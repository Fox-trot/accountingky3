#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать 
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
КонецПроцедуры // ПриЧтенииНаСервере()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнениеСтрокиОС(ТекСтрока)
	
	КонтрольВыбораОсновногоСредства(ТекСтрока);
		
		Если ТекСтрока.ОсновноеСредство = Неопределено Тогда
		ТекСтрока.Подразделение=0;
		ТекСтрока.МОЛ=0;
		ТекСтрока.ИнвентарныйНомер="";
	Иначе
		СписРекв=ПолучитьДанныеРегистровСведений(ТекСтрока.ОсновноеСредство);
		СписРекв.Свойство("Подразделение",ТекСтрока.Местонахождение);
		СписРекв.Свойство("МОЛ",ТекСтрока.МОЛ);
		СписРекв.Свойство("ИнвентарныйНомер",ТекСтрока.ИнвентарныйНомер);
		
	КонецЕсли;
	

КонецПроцедуры // ЗаполнениеСтрокиОС(НоваяСтрока)()

&НаСервере
Функция ОстаткиОС(СписокОС = Неопределено)
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ДатаОстатков",  Объект.Дата);
	Запрос.УстановитьПараметр("Организация",   Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("МОЛ", 		   Объект.МОЛОрганизации);	
	Запрос.УстановитьПараметр("СписокОС",      СписокОС);
	Запрос.УстановитьПараметр("НеВестиОтборПоОС", СписокОС = Неопределено);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестонахождениеОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОССрезПоследних.Подразделение КАК Местонахождение,
	|	МестонахождениеОССрезПоследних.МОЛ КАК МОЛ
	|ПОМЕСТИТЬ ВТ_МестонахождениеОС
	|ИЗ
	|	РегистрСведений.МестонахождениеОС.СрезПоследних(
	|			&ДатаОстатков,
	|			Организация = &Организация
	|				И (ОсновноеСредство В (&СписокОС)
	|					ИЛИ &НеВестиОтборПоОС)) КАК МестонахождениеОССрезПоследних
	|ГДЕ
	|	МестонахождениеОССрезПоследних.Подразделение = &Подразделение
	|	И (МестонахождениеОССрезПоследних.МОЛ = &МОЛ
	|			ИЛИ &МОЛ = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокОСВПодразделении.ОсновноеСредство КАК ОсновноеСредство,
	|	ЕСТЬNULL(ТиповойОстатки.СуммаОстатокДт, 0) КАК ВосстановительнаяСтоимость,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета,
	|	СписокОСВПодразделении.Местонахождение,
	|	СписокОСВПодразделении.МОЛ
	|ИЗ
	|	ВТ_МестонахождениеОС КАК СписокОСВПодразделении
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
	|				&ДатаОстатков,
	|				Организация = &Организация
	|					И (ОсновноеСредство В (&СписокОС)
	|						ИЛИ &НеВестиОтборПоОС)) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	|					&ДатаОстатков,
	|					,
	|					ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|					Организация = &Организация
	|						И (Субконто1 В (&СписокОС)
	|							ИЛИ &НеВестиОтборПоОС)) КАК ТиповойОстатки
	|			ПО СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета = ТиповойОстатки.Счет
	|				И СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство = ТиповойОстатки.Субконто1
	|		ПО СписокОСВПодразделении.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство";	
	Возврат Запрос.Выполнить().Выгрузить();	
КонецФункции // ОстаткиОС()

Функция ОстаткиМБП(СписокМБП = Неопределено)
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ДатаСреза", 		Объект.Дата);
	Запрос.УстановитьПараметр("Организация", 	Объект.Организация);
	Запрос.УстановитьПараметр("МОЛ", 			Объект.МОЛОрганизации);	
	Запрос.УстановитьПараметр("СписокМБП", 		СписокМБП);
	Запрос.УстановитьПараметр("НеВестиОтборПоМБП", СписокМБП = Неопределено);
	
	Запрос.Текст = 		
	"ВЫБРАТЬ
	|	РегистрНакопленияМБПСкладОстатки.Номенклатура КАК Номенклатура,
	|	РегистрНакопленияМБПСкладОстатки.Статус,
	|	РегистрНакопленияМБПСкладОстатки.Организация,
	|	РегистрНакопленияМБПСкладОстатки.Склад,
	|	РегистрНакопленияМБПСкладОстатки.КоличествоОстаток КАК КоличествоПоДаннымУчета,
	|	РегистрНакопленияМБПСкладОстатки.СуммаОстаток КАК СтоимостьПоДаннымУчета,
	|	ИСТИНА КАК НаличиеПоДаннымУчета
	|ИЗ
	|	РегистрНакопления.МБПСклад.Остатки(
	|			&ДатаСреза,
	|			Организация = &Организация
	|				И (Номенклатура В (&СписокМБП)
	|					ИЛИ &НеВестиОтборПоМБП)) КАК РегистрНакопленияМБПСкладОстатки";
	
	Возврат Запрос.Выполнить().Выгрузить();	
КонецФункции // ОстаткиОС()

&НаКлиенте
Процедура РассчитатьИзлишекНедостача(ТД)
	
	РазницаПоНаличию   = Число(ТД.НаличиеФактическое) - Число(ТД.НаличиеПоДаннымУчета);
	РазницаПоСтоимости = ТД.СтоимостьФактическая - ТД.СтоимостьПоДаннымУчета;
	
	ТД.ИзлишекКоличество   = ?(РазницаПоНаличию   > 0,  РазницаПоНаличию, 0);
	ТД.НедостачаКоличество = ?(РазницаПоНаличию   < 0, -РазницаПоНаличию, 0);
	ТД.ИзлишекСумма        = ?(РазницаПоСтоимости > 0,  РазницаПоСтоимости, 0);
	ТД.НедостачаСумма 	   = ?(РазницаПоСтоимости < 0, -РазницаПоСтоимости, 0); 

КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхОС()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ОС.Выгрузить(,"ОсновноеСредство").ВыгрузитьКолонку("ОсновноеСредство"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеУчетаОСНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОС.ОсновноеСредство,
		|	ТаблицаОС.НаличиеПоДаннымУчета,
		|	ТаблицаОС.СтоимостьПоДаннымУчета,
		|	ТаблицаОС.НаличиеФактическое,
		|	ТаблицаОС.СтоимостьФактическая,
		|	ТаблицаОС.НакопленнаяАмортизация КАК НакопленнаяАмортизация,
		|	ТаблицаОС.БалансоваяСтоимость КАК БалансоваяСтоимость,
		|	ТаблицаОС.СрокСлужбы,
		|	ТаблицаОС.ОстаточныйСрокСлужбы КАК ОстаточныйСрокСлужбы,
		|	ТаблицаОС.Комплект,
		|	ТаблицаОС.МОЛ,
		|	ТаблицаОС.Местонахождение,
		|	ТаблицаОС.ИзлишекСумма,
		|	ТаблицаОС.ИзлишекКоличество,
		|	ТаблицаОС.НедостачаСумма,
		|	ТаблицаОС.НедостачаКоличество,
		|	ТаблицаОС.НормаАмортизации,
		|	ТаблицаОС.ИнвентарныйНомер
		|ПОМЕСТИТЬ ВременнаяТаблицаОС
		|ИЗ
		|	&ТаблицаОС КАК ТаблицаОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОС.ОсновноеСредство,
		|	ВременнаяТаблицаОС.НаличиеПоДаннымУчета,
		|	ВременнаяТаблицаОС.СтоимостьПоДаннымУчета,
		|	ВременнаяТаблицаОС.НаличиеФактическое,
		|	ВременнаяТаблицаОС.СтоимостьФактическая,
		|	ЕСТЬNULL(ХозрасчетныйОстатки_Амортизация.СуммаОстатокКт, ВременнаяТаблицаОС.НакопленнаяАмортизация) КАК НакопленнаяАмортизация,
		|	ЕСТЬNULL(ХозрасчетныйОстатки_БалансоваяСтоимость.СуммаОстатокДт, ВременнаяТаблицаОС.БалансоваяСтоимость) КАК БалансоваяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.СрокСлужбы,
		|	ВЫБОР
		|		КОГДА СостоянияОССрезПоследних.Состояние ЕСТЬ NULL 
		|			ТОГДА ВременнаяТаблицаОС.ОстаточныйСрокСлужбы
		|		ИНАЧЕ РАЗНОСТЬДАТ(&ДатаСреза, ДОБАВИТЬКДАТЕ(СостоянияОССрезПоследних.Период, МЕСЯЦ, ПараметрыУчетаОССрезПоследних.СрокСлужбы), МЕСЯЦ)
		|	КОНЕЦ КАК ОстаточныйСрокСлужбы,
		|	ВременнаяТаблицаОС.Комплект,
		|	ВременнаяТаблицаОС.МОЛ,
		|	ВременнаяТаблицаОС.Местонахождение,
		|	ВременнаяТаблицаОС.ИзлишекСумма,
		|	ВременнаяТаблицаОС.ИзлишекКоличество,
		|	ВременнаяТаблицаОС.НедостачаСумма,
		|	ВременнаяТаблицаОС.НедостачаКоличество,
		|	ВременнаяТаблицаОС.НормаАмортизации,
		|	ВременнаяТаблицаОС.ИнвентарныйНомер
		|ПОМЕСТИТЬ ВременнаяТаблицаПараметры
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыУчетаОС.СрезПоследних(&ДатаСреза, Организация = &Организация) КАК ПараметрыУчетаОССрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаСреза, , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Организация = &Организация) КАК ХозрасчетныйОстатки_Амортизация
		|			ПО ПараметрыУчетаОССрезПоследних.ОсновноеСредство = ХозрасчетныйОстатки_Амортизация.Субконто1
		|				И ПараметрыУчетаОССрезПоследних.СчетУчета.ПарныйСчет = ХозрасчетныйОстатки_Амортизация.Счет
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаСреза, , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Организация = &Организация) КАК ХозрасчетныйОстатки_БалансоваяСтоимость
		|			ПО ПараметрыУчетаОССрезПоследних.ОсновноеСредство = ХозрасчетныйОстатки_БалансоваяСтоимость.Субконто1
		|				И ПараметрыУчетаОССрезПоследних.СчетУчета = ХозрасчетныйОстатки_БалансоваяСтоимость.Счет
		|		ПО ВременнаяТаблицаОС.ОсновноеСредство = ПараметрыУчетаОССрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОС.СрезПоследних(
		|				&ДатаСреза,
		|				Организация = &Организация
		|					И Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)) КАК СостоянияОССрезПоследних
		|		ПО ВременнаяТаблицаОС.ОсновноеСредство = СостоянияОССрезПоследних.ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаПараметры.ОсновноеСредство,
		|	ВременнаяТаблицаПараметры.НаличиеПоДаннымУчета,
		|	ВременнаяТаблицаПараметры.СтоимостьПоДаннымУчета,
		|	ВременнаяТаблицаПараметры.НаличиеФактическое,
		|	ВременнаяТаблицаПараметры.СтоимостьФактическая,
		|	ВременнаяТаблицаПараметры.НакопленнаяАмортизация,
		|	ВременнаяТаблицаПараметры.БалансоваяСтоимость,
		|	ВременнаяТаблицаПараметры.СрокСлужбы,
		|	ВременнаяТаблицаПараметры.ОстаточныйСрокСлужбы,
		|	ВременнаяТаблицаПараметры.Комплект,
		|	ВременнаяТаблицаПараметры.МОЛ,
		|	ВременнаяТаблицаПараметры.Местонахождение,
		|	ВременнаяТаблицаПараметры.ИзлишекСумма,
		|	ВременнаяТаблицаПараметры.ИзлишекКоличество,
		|	ВременнаяТаблицаПараметры.НедостачаСумма,
		|	ВременнаяТаблицаПараметры.НедостачаКоличество,
		|	ВременнаяТаблицаПараметры.НормаАмортизации,
		|	ВременнаяТаблицаПараметры.ИнвентарныйНомер
		|ИЗ
		|	ВременнаяТаблицаПараметры КАК ВременнаяТаблицаПараметры";
	
	Запрос.Параметры.Вставить("ТаблицаОС", Объект.ОС.Выгрузить());	
	Запрос.Параметры.Вставить("Организация", Объект.Организация);
	Запрос.Параметры.Вставить("ДатаСреза", ДатаДокумента);
	Объект.ОС.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамОСНаСервере()
	ВыборкаОС = ОстаткиОС();
	
	Для Каждого СтрокаОС Из ВыборкаОС Цикл
		
		НоваяСтрока = Объект.ОС.Добавить();
		
		НоваяСтрока.ОсновноеСредство       = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.СтоимостьПоДаннымУчета = СтрокаОС.ВосстановительнаяСтоимость;
		НоваяСтрока.НаличиеПоДаннымУчета   = Истина;
		
		НоваяСтрока.Местонахождение = СтрокаОС.Местонахождение;
		НоваяСтрока.МОЛ = СтрокаОС.МОЛ;
		
		РазницаПоНаличию   = Число(НоваяСтрока.НаличиеФактическое) - Число(НоваяСтрока.НаличиеПоДаннымУчета);
		РазницаПоСтоимости = НоваяСтрока.СтоимостьФактическая - НоваяСтрока.СтоимостьПоДаннымУчета;
		
		НоваяСтрока.ИзлишекКоличество   = ?(РазницаПоНаличию   > 0,  РазницаПоНаличию, 0);
		НоваяСтрока.НедостачаКоличество = ?(РазницаПоНаличию   < 0, -РазницаПоНаличию, 0);
		НоваяСтрока.ИзлишекСумма        = ?(РазницаПоСтоимости > 0,  РазницаПоСтоимости, 0);
		НоваяСтрока.НедостачаСумма 	    = ?(РазницаПоСтоимости < 0, -РазницаПоСтоимости, 0); 		
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамМБПНаСервере()
	
	ТЗ_МБП = ОстаткиМБП();
	
	Для Каждого СтрокаМБП Из ТЗ_МБП Цикл 		
		НоваяСтрока = Объект.МБП.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМБП);	
	КонецЦикла;     

КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеРегистровСведений(ВыбОС)
	СписРекв = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Объект.Ссылка.Дата = Объект.Дата Тогда
			Граница = Новый Граница(Объект.Ссылка.МоментВремени(),ВидГраницы.Исключая); 
		Иначе
			Граница=Объект.Дата;
		КонецЕсли;
	Иначе
		Граница=Объект.Дата;
	КонецЕсли;
	
	ОтборМестонахождениеОС = Новый Структура;
	ОтборМестонахождениеОС.Вставить("ОсновноеСредство", ВыбОС);
	ОтборМестонахождениеОС.Вставить("Организация", Объект.Организация);
	
	РесурсыМестонахождениеОС=РегистрыСведений.МестонахождениеОС.ПолучитьПоследнее(Граница, ОтборМестонахождениеОС);
	
	СписРекв.Вставить("Подразделение",РесурсыМестонахождениеОС.Подразделение);
	СписРекв.Вставить("МОЛ",РесурсыМестонахождениеОС.МОЛ);
		
	ОтборПараметрыУчетаОС = Новый Структура;
	ОтборПараметрыУчетаОС.Вставить("ОсновноеСредство", ВыбОС);
	
	РесурсыПараметрыУчетаОС=РегистрыСведений.ПараметрыУчетаОС.ПолучитьПоследнее(Граница, ОтборПараметрыУчетаОС);
	
	СписРекв.Вставить("ИнвентарныйНомер",РесурсыПараметрыУчетаОС.ИнвентарныйНомер);
	СписРекв.Вставить("ПервоначальнаяСтоимость",РесурсыПараметрыУчетаОС.ПервоначальнаяСтоимость);

	Возврат СписРекв;
КонецФункции

&НаКлиенте
Процедура КонтрольВыбораОсновногоСредства(СтрокаТабличнойчасти)
    Отказ = Ложь;

	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойчасти.ОсновноеСредство) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	// Проверка дублей ОС	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ОсновноеСредство", СтрокаТабличнойчасти.ОсновноеСредство);
	НайденныеСтроки = Объект.ОС.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 1 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выбранное ОС ""%1"" было выбранно ранее в строке %2'"), СтрокаТабличнойчасти.ОсновноеСредство, НайденныеСтроки[0].НомерСтроки);
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.ОС[" + (СтрокаТабличнойЧасти.НомерСтроки -1) + "].ОсновноеСредство",
			Отказ);
	
		СтрокаТабличнойчасти.ОсновноеСредство = ПредопределенноеЗначение("Справочник.ОсновныеСредства.ПустаяСсылка");	
	    Возврат;
	КонецЕсли;

КонецПроцедуры // КонтрольВыбораОсновногоСредства()

#КонецОбласти

#Область ОбработчикиСлужебные

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

#КонецОбласти

#Область УправлениеВнешнимВидом

&НаСервере
// Процедура устанавливает видимость и доступность элементов.
//
Процедура УстановитьВидимостьДоступностьЭлементов()  	
	
	Элементы.МБП.Видимость = Ложь;	
		
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()    

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подбор(Команда)
	
	УправлениеВнеоборотнымиАктивамиКлиент.ВыбратьОСНаДату(
	Элементы.ОС,
	Объект.Организация, Объект.ПодразделениеОрганизации,
	Объект.МОЛОрганизации,,, ДатаДокумента,Истина,АдресСпискаПодобранныхОС());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеУчетаОС(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		Возврат;
	КонецЕсли;  	   
	
	ЗаполнитьДанныеУчетаОСНаСервере();
КонецПроцедуры

// Процедура вызывается при выборе пункта "Фактические данные" из меню 
// "Заполнить"  командной панели табличной части "ОС", производит заполнение 
// колонок табличной части с данными учета для списка основных средств, 
// заданного в табличной части.
&НаКлиенте
Процедура ЗаполнитьФактическиеДанныеОС(Команда)
	//Для Каждого СтрокаОС Из Объект.ОС Цикл		
	//	СтрокаОС.СтоимостьФактическая = СтрокаОС.СтоимостьПоДаннымУчета;
	//	СтрокаОС.НаличиеФактическое   = СтрокаОС.НаличиеПоДаннымУчета;				
	//КонецЦикла;
	
	Для Каждого СтрокаОС Из Объект.ОС Цикл		
		СтрокаОС.СтоимостьФактическая 	= СтрокаОС.СтоимостьПоДаннымУчета;
		СтрокаОС.НаличиеФактическое   	= СтрокаОС.НаличиеПоДаннымУчета;				
		СтрокаОС.НедостачаСумма   		= 0;
		СтрокаОС.НедостачаКоличество   	= 0;
	КонецЦикла;


КонецПроцедуры // КоманднаяПанельОСЗаполнитьФактическиеДанные() 

&НаКлиенте
Процедура ЗаполнитьПоОстаткамОС(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		Возврат;
	КонецЕсли;
			
	Объект.ОС.Очистить();    	
		
	ЗаполнитьПоОстаткамОСНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамМБП(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
		
	Объект.МБП.Очистить();
	
	ЗаполнитьПоОстаткамМБПНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеУчетаМБП(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;      	
	
	ЗаполнитьДанныеУчетаМБПНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеУчетаМБПНаСервере()
	
	СписокМБП = Объект.МБП.Выгрузить(,"Номенклатура");
	ТЗ_МБП = ОстаткиМБП();
	
	Для Каждого СтрокаМБП Из Объект.МБП Цикл
		
		ДанныеМБП = ТЗ_МБП.Найти(СтрокаМБП.Номенклатура, "Номенклатура");		
		Если ДанныеМБП <> Неопределено Тогда			
			ЗаполнитьЗначенияСвойств(СтрокаМБП, ДанныеМБП);			
		Иначе			
			СтрокаМБП.СтоимостьПоДаннымУчета = 0;
			СтрокаМБП.НаличиеПоДаннымУчета   = Ложь;			
		КонецЕсли;				
	КонецЦикла;

	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактическиеДанныеМБП(Команда)
	Для Каждого СтрокаМБП Из Объект.МБП Цикл		
		СтрокаМБП.СтоимостьФактическая = СтрокаМБП.СтоимостьПоДаннымУчета;
		СтрокаМБП.НаличиеФактическое   = СтрокаМБП.НаличиеПоДаннымУчета;				
	КонецЦикла;

КонецПроцедуры

// Процедура - Подбор физических лиц
//
// Параметры:
//  Команда	 - 	 - 
&НаКлиенте
Процедура ПодборФизическихЛиц(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, Элементы.Комиссия);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетСервер.ПроверитьСуществованиеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры  

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыИЭлементовТаблицыФормыОС

&НаКлиенте
Процедура ОССтоимостьПоДаннымУчетаПриИзменении(Элемент)
	РассчитатьИзлишекНедостача(Элементы.ОС.ТекущиеДанные);
КонецПроцедуры 

&НаКлиенте
Процедура ОСНаличиеПоДаннымУчетаПриИзменении(Элемент)
	РассчитатьИзлишекНедостача(Элементы.ОС.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ОССтоимостьФактическаяПриИзменении(Элемент)
	РассчитатьИзлишекНедостача(Элементы.ОС.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ОСНаличиеФактическоеПриИзменении(Элемент)
	
	ТД = Элементы.ОС.ТекущиеДанные;	
	
	Если ТД.НаличиеФактическое Тогда
			
		ТД.СтоимостьФактическая = ТД.СтоимостьПоДаннымУчета;
		
	Иначе
		
		ТД.СтоимостьФактическая = 0;
		
	КонецЕсли;
	
	РассчитатьИзлишекНедостача(ТД); 	
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
;
	ТекСтрока = Элементы.ОС.ТекущиеДанные;
	ЗаполнениеСтрокиОС(ТекСтрока)
	КонецПроцедуры

&НаКлиенте
Процедура ОСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Для Каждого Строка из ВыбранноеЗначение Цикл 
		Строки = Объект.ОС.НайтиСтроки(Новый Структура("ОсновноеСредство", Строка));
		
		
		Если Строки.Количество() > 0 Тогда
			ШаблонСообщения = НСтр("ru = 'Основное средство ""%1"" уже подобрано!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка);
			ПоказатьПредупреждение(, ТекстСообщения, 60);
		Иначе
			НоваяСтрока = Объект.ОС.Добавить();
			НоваяСтрока.ОсновноеСредство = Строка;
			ЗаполнениеСтрокиОС(НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	
	Если ТекущаяСтрокаТЧ.ОсновноеСредство <> ВыбранноеЗначение Тогда
		
		СтрокиТабличнойЧасти = Объект.ОС.НайтиСтроки(Новый Структура("ОсновноеСредство", ВыбранноеЗначение));
		
		Если СтрокиТабличнойЧасти.Количество() > 0 Тогда
			ШаблонСообщения = НСтр("ru = 'Основное средство ""%1"" уже подобрано!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ВыбранноеЗначение);
			ПоказатьПредупреждение(, ТекстСообщения, 60);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыКомиссия

// Процедура - комиссия перед удалением
//
// Параметры:
//  Элемент	 - 	 - 
//  Отказ	 - 	 - 
&НаКлиенте
Процедура КомиссияПередУдалением(Элемент, Отказ)

	ТекущаяСтрокаТЧ = Элементы.Комиссия.ТекущиеДанные;
	Если ТекущаяСтрокаТЧ.Председатель Тогда
		ИндексУдаляемойСтроки = Объект.Комиссия.Индекс(ТекущаяСтрокаТЧ);
		КоличествоСтрок = Объект.Комиссия.Количество() - 1;

		Если КоличествоСтрок > 0 Тогда
			Если ИндексУдаляемойСтроки <= КоличествоСтрок - 1 Тогда
				ИндексНовогоПредседателя = ИндексУдаляемойСтроки + 1;
			Иначе
				ИндексНовогоПредседателя = КоличествоСтрок - 1;
			КонецЕсли;
			Объект.Комиссия[ИндексНовогоПредседателя].Председатель = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура - комиссия при начале редактирования
//
// Параметры:
//  Элемент		 - 	 - 
//  НоваяСтрока	 - 	 - 
//  Копирование	 - 	 - 
&НаКлиенте
Процедура КомиссияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если Копирование Тогда
		ТекущаяСтрокаТЧ = Элементы.Комиссия.ТекущиеДанные;
		ТекущаяСтрокаТЧ.ФизЛицо = Неопределено;
		ТекущаяСтрокаТЧ.Председатель = Ложь;
	Иначе // Создание заново
		Если Объект.Комиссия.Количество() = 1 Тогда
			Объект.Комиссия[0].Председатель = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - комиссия обработка выбора
//
// Параметры:
//  Элемент				 - 	 - 
//  ВыбранноеЗначение	 - 	 - 
//  СтандартнаяОбработка - 	 - 
&НаКлиенте
Процедура КомиссияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Строки = Объект.Комиссия.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение));

	Если Строки.Количество() > 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Физическое лицо ""%1"" уже подобрано!'"), ВыбранноеЗначение);
		ПоказатьПредупреждение(, ТекстСообщения, 60);
	Иначе
		НоваяСтрока = Объект.Комиссия.Добавить();
		НоваяСтрока.ФизЛицо = ВыбранноеЗначение;
		Если Объект.Комиссия.Количество() = 1 Тогда
			НоваяСтрока.Председатель = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомиссия

// Процедура - комиссия председатель при изменении
//
// Параметры:
//  Элемент	 - 	 - 
&НаКлиенте
Процедура КомиссияПредседательПриИзменении(Элемент)

	ТекущаяСтрокаТЧ = Элементы.Комиссия.ТекущиеДанные;

	Если НЕ ТекущаяСтрокаТЧ.Председатель Тогда
		// Снимать флажок нельзя
		ТекущаяСтрокаТЧ.Председатель = Истина;
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТЧ Из Объект.Комиссия Цикл
		Если СтрокаТЧ.НомерСтроки <> ТекущаяСтрокаТЧ.НомерСтроки Тогда
			СтрокаТЧ.Председатель = Ложь;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура - комиссия физ лицо при изменении
//
// Параметры:
//  Элемент	 - 	 - 
&НаКлиенте
Процедура КомиссияФизЛицоПриИзменении(Элемент)

	Если Объект.Комиссия.Количество() = 1 Тогда
		Объект.Комиссия[0].Председатель = Истина;
	КонецЕсли;

КонецПроцедуры

// Процедура - комиссия физ лицо обработка выбора
//
// Параметры:
//  Элемент				 - 	 - 
//  ВыбранноеЗначение	 - 	 - 
//  СтандартнаяОбработка - 	 - 
&НаКлиенте
Процедура КомиссияФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ТекущаяСтрокаТЧ = Элементы.Комиссия.ТекущиеДанные;

	Если ТекущаяСтрокаТЧ.ФизЛицо <> ВыбранноеЗначение Тогда

		СтрокиТабличнойЧасти = Объект.Комиссия.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение));

		Если СтрокиТабличнойЧасти.Количество() > 0 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Физическое лицо ""%1"" уже включено в состав комиссии!'"), ВыбранноеЗначение);
			ПоказатьПредупреждение(, ТекстСообщения, 60);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

