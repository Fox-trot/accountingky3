#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыПроведенияДокумента

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаНачисления(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.ПериодРегистрации,
		|	ВременнаяТаблицаШапка.ДатаНачала КАК ПериодДействияНачало,
		|	КОНЕЦПЕРИОДА(ВременнаяТаблицаШапка.ДатаОкончания, ДЕНЬ) КАК ПериодДействияКонец,
		|	ВременнаяТаблицаШапка.ВидРасчета,
		|	ТаблицаДокумента.СчетУчетаЗатрат,
		|	ТаблицаДокумента.СтатьяЗатрат,
		|	ТаблицаДокумента.ФизЛицо,
		|	ВременнаяТаблицаШапка.Организация,
		|	ТаблицаДокумента.Подразделение,
		|	ТаблицаДокумента.Должность,
		|	ТаблицаДокумента.Размер,
		|	ТаблицаДокумента.Результат,
		|	ТаблицаДокумента.ОтработаноДней,
		|	ТаблицаДокумента.ОтработаноЧасов,
		|	НЕОПРЕДЕЛЕНО КАК ГрафикРаботы
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаНачисления КАК ТаблицаДокумента
		|		ПО (ИСТИНА)";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаНачисления", РезультатЗапроса.Выгрузить());
КонецПроцедуры // СформироватьТаблицаСотрудники()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Дата,
		|	ТаблицаДокумента.Организация,
		|	НачалоПериода(ТаблицаДокумента.ДатаНачала, МЕСЯЦ) КАК ПериодРегистрации,
		|	ТаблицаДокумента.ВидРасчета,
		|	ТаблицаДокумента.ДатаНачала,
		|	ТаблицаДокумента.ДатаОкончания
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.Командировка КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.ФизЛицо,
		|	ТаблицаДокумента.Подразделение,		
		|	ТаблицаДокумента.Должность,
		|	ТаблицаДокумента.СчетУчетаЗатрат,
		|	ТаблицаДокумента.СтатьяЗатрат,
		|	ТаблицаДокумента.Дни КАК ОтработаноДней,
		|	0 КАК ОтработаноЧасов,
		|	(ТаблицаДокумента.Суточные + ТаблицаДокумента.Проживание + ТаблицаДокумента.Питание + ТаблицаДокумента.Проездные) * ТаблицаДокумента.Курс КАК Размер,
		|	ТаблицаДокумента.СуммаВсего * ТаблицаДокумента.Курс КАК Результат
		|ПОМЕСТИТЬ ВременнаяТаблицаНачисления
		|ИЗ
		|	Документ.Командировка.Сотрудники КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Выполнить();
	
	СформироватьТаблицаНачисления(ДокументСсылка, СтруктураДополнительныеСвойства);

КонецПроцедуры // ИнициализироватьДанныеДокумента()

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
//
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыКомандировка()
	
	ТекСтрокаТаблицыЗначенийапроса =
	"ВЫБРАТЬ
	|	Командировка.Ссылка,
	|	Командировка.Номер,
	|	Командировка.Дата,
	|	Командировка.Проведен,
	|	Командировка.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	Командировка.Комментарий,
	|	Командировка.Автор,
	|	Командировка.СуммаДокумента,
	|	Командировка.ДокументОснование,
	|	Командировка.Страна.Наименование КАК Страна,
	|	Командировка.Город,
	|	Командировка.ДатаНачала,
	|	Командировка.ДатаОкончания,
	|	Командировка.ВидРасчета,
	|	Командировка.СодержаниеОВыплате,
	|	Командировка.СодержаниеОВыплатеПитание,
	|	Командировка.Организация.КодПоОКПО КАК КодПоОКПО,
	|	Командировка.Организация,
	|	Командировка.Основание,
	|	Командировка.КоличествоДней
	|ИЗ
	|	Документ.Командировка КАК Командировка
	|ГДЕ
	|	Командировка.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КомандировкаСотрудники.Ссылка КАК Ссылка,
	|	КомандировкаСотрудники.НомерСтроки КАК НомерСтроки,
	|	КомандировкаСотрудники.ФизЛицо КАК ФизЛицо,
	|	КомандировкаСотрудники.Подразделение.Наименование КАК Подразделение,
	|	КомандировкаСотрудники.Должность.Наименование КАК Должность,
	|	КомандировкаСотрудники.Дни,
	|	КомандировкаСотрудники.Город КАК Город,
	|	КомандировкаСотрудники.Суточные,
	|	КомандировкаСотрудники.Питание,
	|	КомандировкаСотрудники.Проживание,
	|	КомандировкаСотрудники.Проездные,
	|	КомандировкаСотрудники.Валюта,
	|	КомандировкаСотрудники.Задание,
	|	КомандировкаСотрудники.СуммаВсего,
	|	КомандировкаСотрудники.ФизЛицо.Код КАК ТабНомер,
	|	КомандировкаСотрудники.ФизЛицо.Наименование КАК ФИО,
	|	КомандировкаСотрудники.Страна.Наименование КАК Страна
	|ИЗ
	|	Документ.Командировка.Сотрудники КАК КомандировкаСотрудники
	|ГДЕ
	|	КомандировкаСотрудники.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(НомерСтроки),
	|	МАКСИМУМ(ФизЛицо),
	|	МАКСИМУМ(Должность),
	|	МАКСИМУМ(ТабНомер)
	|ПО
	|	Город
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КомандировкаСотрудники.Ссылка КАК Ссылка,
	|	КомандировкаСотрудники.НомерСтроки КАК НомерСтроки,
	|	КомандировкаСотрудники.ФизЛицо КАК ФизЛицо,
	|	КомандировкаСотрудники.Подразделение.Наименование КАК Подразделение,
	|	КомандировкаСотрудники.Должность.Наименование КАК Должность,
	|	КомандировкаСотрудники.Дни,
	|	КомандировкаСотрудники.Город КАК Город,
	|	КомандировкаСотрудники.Суточные,
	|	КомандировкаСотрудники.Питание,
	|	КомандировкаСотрудники.Проживание,
	|	КомандировкаСотрудники.Проездные,
	|	КомандировкаСотрудники.Валюта,
	|	КомандировкаСотрудники.СуммаВсего,
	|	КомандировкаСотрудники.ФизЛицо.Код КАК ТабНомер,
	|	КомандировкаСотрудники.ФизЛицо.Наименование КАК ФИО,
	|	Командировка.ВерсияДанных,
	|	Командировка.ПометкаУдаления,
	|	Командировка.Номер КАК Номер,
	|	Командировка.Дата КАК Дата,
	|	Командировка.Проведен,
	|	Командировка.Организация КАК Организация,
	|	Командировка.Комментарий КАК Комментарий,
	|	Командировка.Автор,
	|	Командировка.СуммаДокумента,
	|	Командировка.ДокументОснование,
	|	Командировка.Страна.Наименование КАК Страна,
	|	Командировка.ДатаНачала КАК ДатаНачала,
	|	Командировка.ДатаОкончания КАК ДатаОкончания,
	|	Командировка.КоличествоДней,
	|	Командировка.ВидРасчета,
	|	Командировка.СодержаниеОВыплате КАК СодержаниеОВыплате,
	|	Командировка.СодержаниеОВыплатеПитание КАК СодержаниеОВыплатеПитание,
	|	Командировка.Город КАК ГородДокумента,
	|	Командировка.Страна КАК СтранаДокумента,
	|	Командировка.Основание КАК Основание
	|ИЗ
	|	Документ.Командировка.Сотрудники КАК КомандировкаСотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Командировка КАК Командировка
	|		ПО КомандировкаСотрудники.Ссылка = Командировка.Ссылка
	|ГДЕ
	|	КомандировкаСотрудники.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(НомерСтроки),
	|	МАКСИМУМ(ФизЛицо),
	|	МАКСИМУМ(Должность),
	|	МАКСИМУМ(ТабНомер),
	|	МАКСИМУМ(Номер),
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Комментарий),
	|	МАКСИМУМ(Страна),
	|	МАКСИМУМ(ДатаНачала),
	|	МАКСИМУМ(ДатаОкончания),
	|	МАКСИМУМ(СодержаниеОВыплате),
	|	МАКСИМУМ(СодержаниеОВыплатеПитание),
	|	МАКСИМУМ(ГородДокумента),
	|	МАКСИМУМ(СтранаДокумента),
	|	МАКСИМУМ(Основание)
	|ПО
	|	Ссылка,
	|	Город,
	|	Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Номер КАК НомерРКО,
	|	РасходныйКассовыйОрдер.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.ДокументОснование В(&МассивОбъектов)";
	
	Возврат ТекСтрокаТаблицыЗначенийапроса;
	
КонецФункции

// Функция формирует табличный документ с печатной формой ПриказКомандировка
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьПриказаКомандировка(МассивОбъектов, ОбъектыПечати)
	Перем Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати 	= "Командировка_ПриказКомандировка";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Командировка.ПФ_MXL_ПриказКомандировка");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыКомандировка();
	
	РезультатЗапроса 	= Запрос.ВыполнитьПакет();
	Шапка 				= РезультатЗапроса[0].Выбрать();
	ВременнаяТаблицаСотрудники 	= РезультатЗапроса[1].Выгрузить();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий()  Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;

		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.НомерДокумента	= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер);
		ОбластьМакета.Параметры.ДатаДокумента	= Формат(Шапка.Дата,"ДЛФ=DD");
	
		Отбор = Новый Структура;
		Отбор.Вставить("Ссылка", Шапка.Ссылка);
		МассивСтрок = ВременнаяТаблицаСотрудники.НайтиСтроки(Отбор);
		
		Для каждого СтрокаТаблицыЗначений Из МассивСтрок Цикл
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицыЗначений);
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ОбластьМакета.Параметры.ТабельныйНомер	= ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(СтрокаТаблицыЗначений.ТабНомер);	
			ОбластьМакета.Параметры.МестоНазначения = Шапка.Страна + ?(ЗначениеЗаполнено(Шапка.Город), ", " + Шапка.Город, "");
			ОбластьМакета.Параметры.Дни				= СтрокаТаблицыЗначений.Дни;
			ОбластьМакета.Параметры.ДатаНачала		= Формат(Шапка.ДатаНачала,"ДЛФ=D");
			ОбластьМакета.Параметры.ДатаОкончания	= Формат(Шапка.ДатаОкончания,"ДЛФ=D");

		КонецЦикла;
		
		ОбластьМакета.Параметры.ДатаНачала		= Формат(Шапка.ДатаНачала,"ДЛФ=D");
		ОбластьМакета.Параметры.ДатаОкончания	= Формат(Шапка.ДатаОкончания,"ДЛФ=D");
		
		Если СтрДлина(Шапка.СодержаниеОВыплате) > 80 Тогда
			ОбластьМакета.Параметры.СодержаниеОВыплате	= Сред(Шапка.СодержаниеОВыплате, 1, 	79);	
			ОбластьМакета.Параметры.СодержаниеОВыплате2	= Сред(Шапка.СодержаниеОВыплате, 80, 	СтрДлина(Шапка.СодержаниеОВыплате));			
		Иначе
		    ОбластьМакета.Параметры.СодержаниеОВыплате	= Шапка.СодержаниеОВыплате;
			ОбластьМакета.Параметры.СодержаниеОВыплате2 = "";
		КонецЕсли;
		
		Если СтрДлина(Шапка.Основание) > 70 Тогда
			ОбластьМакета.Параметры.Основание	= Сред(Шапка.Основание, 1, 	69);	
			ОбластьМакета.Параметры.Основание2	= Сред(Шапка.Основание, 70, 	СтрДлина(Шапка.Основание));			
		Иначе
		    ОбластьМакета.Параметры.Основание	= Шапка.Основание;
			ОбластьМакета.Параметры.Основание2 = "";
		КонецЕсли;
		
		Структура = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата);
		Если НЕ Структура.Свойство("Руководитель") = Неопределено Тогда
			ОбластьМакета.Параметры.ДолжностьРуководителя 	= Структура.РуководительДолжность;
			ОбластьМакета.Параметры.ФИОРуководителя 		= Структура.Руководитель;		
		КонецЕсли;
							
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
		                                               НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
													   
	КонецЦикла;
		
	Если НЕ Ошибки = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;	
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	// Добавление дополнительных параметров
	БухгалтерскиеОтчетыКлиентСервер.ЗаполнитьДополнительныеПараметрыПечати(ТабличныйДокумент);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует табличный документ с печатной формой КомандировочноеУдостоверение
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьКомандировочногоУдостоверения(МассивОбъектов, ОбъектыПечати)

	Перем Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати 	= "Командировка_КомандировочноеУдостоверение";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Командировка.ПФ_MXL_КомандировочноеУдостоверение");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыКомандировка();
	
	РезультатЗапроса 	= Запрос.ВыполнитьПакет();
	Шапка 				= РезультатЗапроса[0].Выбрать();
	ВременнаяТаблицаСотрудники 	= РезультатЗапроса[1].Выгрузить();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий()  Цикл
		
		// Выводим из таблицы: один сотрудник - одна страница
		
		Отбор = Новый Структура;
		Отбор.Вставить("Ссылка", Шапка.Ссылка);
		МассивСтрок = ВременнаяТаблицаСотрудники.НайтиСтроки(Отбор);
		
		Для каждого СтрокаТаблицыЗначений Из МассивСтрок Цикл
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			ОбластьМакета = Макет.ПолучитьОбласть("ОбластьУдостоверение");
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицыЗначений);
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ОбластьМакета.Параметры.НомерДокумента 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер) + "/" + СтрокаТаблицыЗначений.НомерСтроки;
			ОбластьМакета.Параметры.ДатаДокумента		= Формат(Шапка.Дата,"ДЛФ=DD");
			ОбластьМакета.Параметры.ТабельныйНомер		= ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(СтрокаТаблицыЗначений.ТабНомер);	
			ОбластьМакета.Параметры.МестоНазначения 	= СтрокаТаблицыЗначений.Страна + ?(ЗначениеЗаполнено(СтрокаТаблицыЗначений.Город), ", " + СтрокаТаблицыЗначений.Город, "");
	
			ОбластьМакета.Параметры.ДатаНачала			= Формат(Шапка.ДатаНачала,"ДЛФ=D");
			ОбластьМакета.Параметры.ДатаОкончания		= Формат(Шапка.ДатаОкончания,"ДЛФ=D");
			Если СтрДлина(Шапка.СодержаниеОВыплате) > 80 Тогда
				ОбластьМакета.Параметры.СодержаниеОВыплате	= Сред(Шапка.СодержаниеОВыплате, 1, 	79);	
				ОбластьМакета.Параметры.СодержаниеОВыплате2	= Сред(Шапка.СодержаниеОВыплате, 80, 	СтрДлина(Шапка.СодержаниеОВыплате));			
			Иначе
			    ОбластьМакета.Параметры.СодержаниеОВыплате	= Шапка.СодержаниеОВыплате;
				ОбластьМакета.Параметры.СодержаниеОВыплате2 = "";
			КонецЕсли;
			
			Структура = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата);
			Если НЕ Структура.Свойство("Руководитель") = Неопределено Тогда
				ОбластьМакета.Параметры.ДолжностьРуководителя 	= Структура.РуководительДолжность;
				ОбластьМакета.Параметры.ФИОРуководителя 		= Структура.Руководитель;		
			КонецЕсли;
						
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		КонецЦикла;
		
	КонецЦикла;
		
	Если НЕ Ошибки = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;	
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	// Добавление дополнительных параметров
	БухгалтерскиеОтчетыКлиентСервер.ЗаполнитьДополнительныеПараметрыПечати(ТабличныйДокумент);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует табличный документ с печатной формой ПлатежнаяВедомость
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьПлатежнаяВедомость(МассивОбъектов, ОбъектыПечати)
	Перем Ошибки;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати 	= "Командировка_ПлатежнаяВедомость";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Командировка.ПФ_MXL_ПлатежнаяВедомость");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыКомандировка();
	
	РезультатЗапроса 	= Запрос.ВыполнитьПакет();
	Шапка 				= РезультатЗапроса[0].Выбрать();
	ВременнаяТаблицаСотрудники 	= РезультатЗапроса[1].Выгрузить();
	ТаблицаРКО 			= РезультатЗапроса[3].Выгрузить();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий()  Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;

		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		// Выводим шапку
		
		ОбластьМакета = Макет.ПолучитьОбласть("ОбластьШапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер);
		ОбластьМакета.Параметры.СуммаПрописью	= РаботаСКурсамиВалют.СформироватьСуммуПрописью(Шапка.СуммаДокумента, ВалютаРегламентированногоУчета);
		ОбластьМакета.Параметры.Сумма			= "" + Шапка.СуммаДокумента + " " + ВалютаРегламентированногоУчета;
		
		Первый = Истина;
		СписокРКО = "";
		Для каждого СтрокаТаблицыЗначений Из ТаблицаРКО Цикл
			СписокРКО = СписокРКО + ?(Первый, "", ", ") + СтрокаТаблицыЗначений.НомерРКО;
			Первый = Ложь;
		КонецЦикла;	
		ОбластьМакета.Параметры.РКО	= СписокРКО;

		Структура = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата);
		Если НЕ Структура.Свойство("Руководитель") 			= Неопределено Тогда
			ОбластьМакета.Параметры.Руководитель 			= Структура.Руководитель;		
		КонецЕсли;
		Структура = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата);
		Если НЕ Структура.Свойство("ГлавныйБухгалтер") 		= Неопределено Тогда
			ОбластьМакета.Параметры.ФИОГлавБуха 			= Структура.ГлавныйБухгалтер;		
		КонецЕсли;

		
		ОбластьМакета.Параметры.Дата			= Формат(Шапка.Дата,"ДЛФ=DD");
		ОбластьМакета.Параметры.ДатаНачала		= Формат(Шапка.ДатаНачала,"ДЛФ=D");
		ОбластьМакета.Параметры.ДатаОкончания	= Формат(Шапка.ДатаОкончания,"ДЛФ=D");

		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ОбластьШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		
		// Выводим таблицу
		
		Отбор = Новый Структура;
		Отбор.Вставить("Ссылка", Шапка.Ссылка);
		МассивСтрок = ВременнаяТаблицаСотрудники.НайтиСтроки(Отбор);
		
		Для каждого СтрокаТаблицыЗначений Из МассивСтрок Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("ОбластьСтрока");
			ОбластьМакета.Параметры.НомерСтроки		= СтрокаТаблицыЗначений.НомерСтроки;
			ОбластьМакета.Параметры.ТабНомер		= ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(СтрокаТаблицыЗначений.ТабНомер);	
			ОбластьМакета.Параметры.ФИО				= СтрокаТаблицыЗначений.ФИО;
			ОбластьМакета.Параметры.Сумма			= СтрокаТаблицыЗначений.СуммаВсего;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		// Выводим Подвал

		ОбластьМакета = Макет.ПолучитьОбласть("ОбластьПодвал");
		ОбластьМакета.Параметры.СуммаПрописью			= РаботаСКурсамиВалют.СформироватьСуммуПрописью(Шапка.СуммаДокумента, 
														ВалютаРегламентированногоУчета);
		ОбластьМакета.Параметры.Сумма					= "" + Шапка.СуммаДокумента + " " + ВалютаРегламентированногоУчета;
		
		СуммаРКО 										= ТаблицаРКО.Итог("Сумма");
		ОбластьМакета.Параметры.СуммаВыплаченоПрописью	= РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаРКО, 
														ВалютаРегламентированногоУчета);
		ОбластьМакета.Параметры.СуммаВыплачено			= "" + СуммаРКО + " " + ВалютаРегламентированногоУчета;
		
		ОбластьМакета.Параметры.Дата					= Формат(Шапка.Дата,"ДЛФ=DD");
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
		                                               НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
													   
	КонецЦикла;
		
														
	
	Если НЕ Ошибки = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;	
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	// Добавление дополнительных параметров
	БухгалтерскиеОтчетыКлиентСервер.ЗаполнитьДополнительныеПараметрыПечати(ТабличныйДокумент);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует табличный документ с печатной формой РаспоряжениеНаВыполнениеЗадания
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьРаспоряжениеНаВыполнениеЗадания(МассивОбъектов, ОбъектыПечати)

	Перем Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати 	= "Командировка_РаспоряжениеНаВыполнениеЗадания";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Командировка.ПФ_MXL_РаспоряжениеНаВыполнениеЗадания");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыКомандировка();
	
	РезультатЗапроса 	= Запрос.ВыполнитьПакет();
	Шапка 				= РезультатЗапроса[0].Выбрать();
	ВременнаяТаблицаСотрудники 	= РезультатЗапроса[1].Выгрузить();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий()  Цикл
		
		// Выводим из таблицы: один сотрудник - одна страница
		
		Отбор = Новый Структура;
		Отбор.Вставить("Ссылка", Шапка.Ссылка);
		МассивСтрок = ВременнаяТаблицаСотрудники.НайтиСтроки(Отбор);
		
		Для каждого СтрокаТаблицыЗначений Из МассивСтрок Цикл
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицыЗначений);
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ОбластьМакета.Параметры.НомерДокумента 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер) + "/" + СтрокаТаблицыЗначений.НомерСтроки;
			ОбластьМакета.Параметры.ДатаДокумента		= Формат(Шапка.Дата,"ДЛФ=DD");
			ОбластьМакета.Параметры.ТабельныйНомер		= ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(СтрокаТаблицыЗначений.ТабНомер);	
			ОбластьМакета.Параметры.МестоНазначения 	= СтрокаТаблицыЗначений.Страна + ?(ЗначениеЗаполнено(СтрокаТаблицыЗначений.Город), ", " + СтрокаТаблицыЗначений.Город, "");
			ОбластьМакета.Параметры.ДатаНачала			= Формат(Шапка.ДатаНачала,"ДЛФ=D");
			ОбластьМакета.Параметры.ДатаОкончания		= Формат(Шапка.ДатаОкончания,"ДЛФ=D");
			
			Курс = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаТаблицыЗначений.Валюта,  Шапка.Дата).Курс;
			//Суточные
			Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.Суточные) Тогда
				ОбластьМакета.Параметры.Валюта1	= СтрокаТаблицыЗначений.Валюта;				
				ОбластьМакета.Параметры.Курс1	= Курс; 						
				ОбластьМакета.Параметры.СуммаСуточныеВал = СтрокаТаблицыЗначений.Суточные;								
				ОбластьМакета.Параметры.СуммаСуточные = СтрокаТаблицыЗначений.Суточные * Курс;
			КонецЕсли;	
			//Проживание
			Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.Проживание) Тогда
				ОбластьМакета.Параметры.Валюта2	= СтрокаТаблицыЗначений.Валюта;				
				ОбластьМакета.Параметры.Курс2	= Курс; 						
				ОбластьМакета.Параметры.СуммаПроживаниеВал 	= СтрокаТаблицыЗначений.Проживание;								
				ОбластьМакета.Параметры.СуммаПроживание		= СтрокаТаблицыЗначений.Проживание * Курс;
			КонецЕсли;
			//Питание
			Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.Питание) Тогда
				ОбластьМакета.Параметры.Валюта3	= СтрокаТаблицыЗначений.Валюта;				
				ОбластьМакета.Параметры.Курс3	= Курс; 						
				ОбластьМакета.Параметры.СуммаПитаниеВал = СтрокаТаблицыЗначений.Питание;								
				ОбластьМакета.Параметры.СуммаПитание = СтрокаТаблицыЗначений.Питание * Курс;
			КонецЕсли;			
			//Проездные
			Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.Проездные) Тогда	
				ОбластьМакета.Параметры.Валюта4	= СтрокаТаблицыЗначений.Валюта;				
				ОбластьМакета.Параметры.Курс4	= Курс; 						
				ОбластьМакета.Параметры.СуммаПроездныеВал = СтрокаТаблицыЗначений.Проездные;								
				ОбластьМакета.Параметры.СуммаПроездные 	  = СтрокаТаблицыЗначений.Проездные * Курс;
			КонецЕсли;
			ОбластьМакета.Параметры.СуммаВсего = СтрокаТаблицыЗначений.СуммаВсего * Курс;
			
			Структура = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата);
			Если НЕ Структура.Свойство("ГлавныйБухгалтер") 		= Неопределено Тогда
				ОбластьМакета.Параметры.ФИОГлавБуха 			= Структура.ГлавныйБухгалтер;		
			КонецЕсли;
						
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		КонецЦикла;
		
	КонецЦикла;
		
	Если НЕ Ошибки = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;	
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	// Добавление дополнительных параметров
	БухгалтерскиеОтчетыКлиентСервер.ЗаполнитьДополнительныеПараметрыПечати(ТабличныйДокумент);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует табличный документ с печатной формой ПриказаОКомандировании
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьПриказаОКомандировании(МассивОбъектов, ОбъектыПечати)
	Перем Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати 	= "Командировка_ПриказОКомандировании";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Командировка.ПФ_MXL_ПриказОКомандировании");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыКомандировка();
	
	РезультатЗапроса 	= Запрос.ВыполнитьПакет();
	Шапка 				= РезультатЗапроса[0].Выбрать();
	ТаблицаСотрудники 	= РезультатЗапроса[1].Выгрузить();
	ТаблицаСотрудники.Свернуть("ФизЛицо,Должность");
	
	ПервыйДокумент = Истина;
	
	ОбластьМакетаШапка 		= Макет.ПолучитьОбласть("Шапка");	
	ОбластьМакетаСотрудники = Макет.ПолучитьОбласть("Сотрудники");	
	ОбластьМакетаПодвал		= Макет.ПолучитьОбласть("Подвал");	
		
	Пока Шапка.Следующий()  Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;

		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
		ОбластьМакетаШапка.Параметры.НомерДокумента	= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер);
		ОбластьМакетаШапка.Параметры.ДатаДокумента	= Формат(Шапка.Дата,"ДЛФ=DD");
		ОбластьМакетаШапка.Параметры.МестоНазначения = "в" + " " + Шапка.Страна + ?(ЗначениеЗаполнено(Шапка.Город), ", " + Шапка.Город, "");
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
		
		Для Каждого СтрокаТаблицыЗначений Из ТаблицаСотрудники Цикл
			ОбластьМакетаСотрудники.Параметры.Заполнить(СтрокаТаблицыЗначений);
			ТабличныйДокумент.Вывести(ОбластьМакетаСотрудники);
		КонецЦикла;
		
		// Выводим Подвал
		ОбластьМакетаПодвал.Параметры.Заполнить(Шапка);
		
		//Дни 
		ПредставлениеДней	= НСтр("ru = 'день'")    + "," + НСтр("ru = 'дня'")     + "," + НСтр("ru = 'дней'");
		ПродолжительностьДни = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(Шапка.КоличествоДней, ПредставлениеДней) + " ";	
		Если Шапка.КоличествоДней > 1 Тогда	
			ПродолжительностьДни = ПродолжительностьДни + "с " + Формат(Шапка.ДатаНачала,  "ДЛФ=DD") + " по " + Формат(Шапка.ДатаОкончания,  "ДЛФ=DD");
		Иначе 	
			ПродолжительностьДни = ПродолжительностьДни + Формат(Шапка.ДатаНачала,  "ДЛФ=DD");
		КонецЕсли;
		ОбластьМакетаПодвал.Параметры.ПродолжительностьДни 		  = ПродолжительностьДни;
		
		Структура = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата);
		Если НЕ Структура.Свойство("Руководитель") = Неопределено Тогда
			ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя 	= Структура.РуководительДолжность;
			ОбластьМакетаПодвал.Параметры.ФИОРуководителя 			= Структура.Руководитель;		
		КонецЕсли;
							
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
		                                               НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
													   
	КонецЦикла;
		
	Если НЕ Ошибки = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;	
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	// Добавление дополнительных параметров
	БухгалтерскиеОтчетыКлиентСервер.ЗаполнитьДополнительныеПараметрыПечати(ТабличныйДокумент);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	// Проверяем, нужно ли для макета Командировка формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Командировка_Приказ") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"Командировка_Приказ", НСтр("ru = 'Печать приказа'"), ПечатьПриказаКомандировка(МассивОбъектов, ОбъектыПечати),,
			"Документ.Командировка.ПФ_MXL_ПриказКомандировка");
		КонецЕсли;
				 
	// Проверяем, нужно ли для макета Командировка формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Командировка_КомандировочноеУдостоверение") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"Командировка_КомандировочноеУдостоверение", НСтр("ru = 'Командировочное удостоверение'"), ПечатьКомандировочногоУдостоверения(МассивОбъектов, ОбъектыПечати),,
			"Документ.Командировка.ПФ_MXL_КомандировочноеУдостоверение");
		КонецЕсли;
		
	// Проверяем, нужно ли для макета Командировка формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Командировка_ПлатежнаяВедомость") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"Командировка_ПлатежнаяВедомость", НСтр("ru = 'Платежная ведомость'"), ПечатьПлатежнаяВедомость(МассивОбъектов, ОбъектыПечати),,
			"Документ.Командировка.ПФ_MXL_ПлатежнаяВедомость");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Командировка_РаспоряжениеНаВыполнениеЗадания") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"Командировка_РаспоряжениеНаВыполнениеЗадания", НСтр("ru = 'Распоряжение на выполнение задания'"), ПечатьРаспоряжениеНаВыполнениеЗадания(МассивОбъектов, ОбъектыПечати),,
			"Документ.Командировка.ПФ_MXL_РаспоряжениеНаВыполнениеЗадания");
	КонецЕсли;

	// Проверяем, нужно ли для макета Командировка формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Командировка_ПриказОКомандировании") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"Командировка_ПриказОКомандировании", НСтр("ru = 'Печать приказа о командировании'"), ПечатьПриказаОКомандировании(МассивОбъектов, ОбъектыПечати),,
			"Документ.Командировка.ПФ_MXL_ПриказОКомандировании");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Командировка_Приказ";
	КомандаПечати.Представление = НСтр("ru = 'Печать приказа'");
	КомандаПечати.Порядок = 1;	
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Командировка_КомандировочноеУдостоверение";
	КомандаПечати.Представление = НСтр("ru = 'Командировочное удостоверение'");
	КомандаПечати.Порядок = 10;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Командировка_ПлатежнаяВедомость";
	КомандаПечати.Представление = НСтр("ru = 'Платежная ведомость'");
	КомандаПечати.Порядок = 15;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Командировка_РаспоряжениеНаВыполнениеЗадания";
	КомандаПечати.Представление = НСтр("ru = 'Распоряжение на выполнение задания'");
	КомандаПечати.Порядок = 16;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Командировка_ПриказОКомандировании";
	КомандаПечати.Представление = НСтр("ru = 'Печать приказа о командировании'");
	КомандаПечати.Порядок = 17;	

	// Комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = 	"Командировка_Приказ,Командировка_КомандировочноеУдостоверение,Командировка_ПлатежнаяВедомость";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов'");
	КомандаПечати.Картинка = БиблиотекаКартинок.Печать;
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.Порядок = 75;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = 	"Командировка_Приказ,Командировка_КомандировочноеУдостоверение,Командировка_ПлатежнаяВедомость";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 79;
	

КонецПроцедуры

#КонецОбласти

#КонецЕсли
