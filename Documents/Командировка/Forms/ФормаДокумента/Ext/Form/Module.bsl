#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ЭлементОтбора = ТаблицаРКО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДокументОснование");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбора = ТаблицаРКО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидОперации");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаПодотчетнику");
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПодборСотрудникаПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		ПолучитьРезультатПодбораИзХранилища(АдресЗапасовВХранилище, "Сотрудники");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер = "";
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ДатаНачала.
//
&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	Объект.КоличествоДней = КоличествоДней(Объект.ДатаОкончания, Объект.ДатаНачала);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ДатаОкончания.
//
&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	Объект.КоличествоДней = КоличествоДней(Объект.ДатаОкончания, Объект.ДатаНачала);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = Элементы.Сотрудники.ТекущиеДанные;	
		СтрокаТабличнойЧасти.Валюта = ВалютаРегламентированногоУчета;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СотрудникиФизЛицо.
//
&НаКлиенте
Процедура СотрудникиФизЛицоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Сотрудники.ТекущиеДанные;	
	
	СтруктураСотрудник = СведенияОСотруднике(ДатаДокумента, Объект.Организация, СтрокаТабличнойЧасти.ФизЛицо);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураСотрудник);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СотрудникиСуточные.
//
&НаКлиенте
Процедура СотрудникиСуточныеПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.КоличествоДней);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СотрудникиПроживание.
//
&НаКлиенте
Процедура СотрудникиПроживаниеПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.КоличествоДней);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СотрудникиПроездные.
//
&НаКлиенте
Процедура СотрудникиПроездныеПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.КоличествоДней);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьРКО(Команда)
	Если НЕ ЗаписатьДокументОтменивПроведение() Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросСоздатьДокументыВыплаты", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Будут сформированы документы РКО. Продолжить выполнение операции?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено подразделение! Заполнение документа отменено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Подразделение",,Отказ)		
	КонецЕсли;

	Если Отказ Тогда 
		Возврат
	КонецЕсли;	
	
	Если Объект.Сотрудники.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнить", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет перезаполнена. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе 		
		ЗаполнитьНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	Отказ = Ложь;

	Если Объект.Сотрудники.Количество() = 0  Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть ""Сотрудники"". Расчет документа отменен.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Сотрудники",,Отказ);		
	КонецЕсли;

	Если Отказ Тогда 
		Возврат
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросРассчитать", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Табличная часть документа будет пересчитана. Продолжить выполнение операции?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
КонецПроцедуры

&НаКлиенте
Процедура ПодборСотрудников(Команда)
	СотрудникиКлиент.ОткрытьПодбор(ЭтаФорма, "Сотрудники");  
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросЗаполнить(РезультатВопроса, ДополнительныеПараметры) Экспорт
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ЗаполнитьНаСервере();
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ОтветНаВопросРассчитать(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТарифыКомандировочных = ПолучитьТарифыКомандировочных();
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Сотрудники Цикл 
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ТарифыКомандировочных, "Суточные, Проживание, Проездные, Валюта");
			РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.КоличествоДней);
		КонецЦикла;	
	КонецЕсли; 
КонецПроцедуры	

&НаКлиенте
Процедура ОтветНаВопросСоздатьДокументыВыплаты(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СоздатьДокументыВыплатыЗавершение();
	КонецЕсли; 
КонецПроцедуры	

&НаКлиенте
Процедура ОтветНаВопросОчиститьТабличнуюЧастьСотрудники(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Подразделение = Объект.Подразделение;
		Объект.Сотрудники.Очистить();
	Иначе
		// Отмена изменения - возврат прежних значений
		Объект.Подразделение = Подразделение;
	КонецЕсли; 
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	ЭтоНовый = ЗначениеЗаполнено(Объект.Ссылка);
	
	Элементы.ТаблицаРКО.Видимость = НЕ ЭтоНовый;
	Элементы.ТаблицаАО.Видимость = НЕ ЭтоНовый;
	
	ТаблицаРКО.Отбор.Элементы.Очистить();
	ЭлементОтбора = ТаблицаРКО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДокументОснование");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбора = ТаблицаРКО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидОперации");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаПодотчетнику");
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ТаблицаАО.Отбор.Элементы.Очистить();
	ЭлементОтбора = ТаблицаАО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДокументОснование");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

КонецПроцедуры 

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, ДатаДокумента, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Функция - Количество дней
//
// Параметры:
//  Дата1	 - Дата	 - Окончание периода
//  Дата2	 - Дата	 - Начало периода
// 
// Возвращаемое значение:
//   КоличествоДней - Число
//
&НаСервере
Функция КоличествоДней(Дата1, Дата2)
	Если ЗначениеЗаполнено(Дата1)
		И ЗначениеЗаполнено(Дата2)
		И Дата1 >= Дата2 Тогда 	
		Возврат Окр((НачалоДня(Дата1) - НачалоДня(Дата2)) / 86400);
	Иначе 
		Возврат 0;
	КонецЕсли;	
КонецФункции

&НаСервереБезКонтекста
Функция СведенияОСотруднике(Дата, Организация, ФизЛицо)
	Возврат ПроведениеРасчетовПоЗарплатеСервер.СведенияОСотруднике(Дата, Организация, ФизЛицо)
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, КоличествоДней)
	СтрокаТабличнойЧасти.СуммаВсего = КоличествоДней * (СтрокаТабличнойЧасти.Суточные + СтрокаТабличнойЧасти.Проживание) + СтрокаТабличнойЧасти.Проездные;
КонецПроцедуры 

// Функция - Тарифы командировочных
// 
// Возвращаемое значение:
//  Структура - 
//
&НаСервере
Функция ПолучитьТарифыКомандировочных()
	
	ТарифыКомандировочных = Новый Структура("Валюта, Суточные, Проживание, Проездные", Неопределено, 0,0,0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТарифыКомандировочныхСрезПоследних.Валюта КАК Валюта,
		|	ТарифыКомандировочныхСрезПоследних.СуммаСуточные КАК Суточные,
		|	ТарифыКомандировочныхСрезПоследних.СуммаПроживание КАК Проживание,
		|	ТарифыКомандировочныхСрезПоследних.СуммаПроездные КАК Проездные
		|ИЗ
		|	РегистрСведений.ТарифыКомандировочных.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И Страна = &Страна
		|				И &Город = Город) КАК ТарифыКомандировочныхСрезПоследних";
	Запрос.УстановитьПараметр("Период", ДатаДокумента);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Страна", Объект.Страна);
	Запрос.УстановитьПараметр("Город", Объект.Город);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда  
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		ЗаполнитьЗначенияСвойств(ТарифыКомандировочных, ВыборкаДетальныеЗаписи); 
	КонецЕсли;	
	
	Возврат ТарифыКомандировочных;
	
КонецФункции

// Процедура получает результат подбора из временного хранилища
//
&НаСервере
Процедура ПолучитьРезультатПодбораИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	МассивФизЛиц = Новый Массив;
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("ФизЛицо", СтрокаЗагрузки.ФизЛицо));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
		МассивФизЛиц.Добавить(СтрокаТабличнойЧасти.ФизЛицо);
	КонецЦикла;
	
	ДополнитьСтрокиНаСервере(МассивФизЛиц);
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// Процедура заполняет строки
//
// Параметры:
//  Сотрудники  - Массив - массив физ.лиц, по которым нужно заполнить строки
//
&НаСервере
Процедура ДополнитьСтрокиНаСервере(Сотрудники)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиСрезПоследних.ФизЛицо,
		|	СотрудникиСрезПоследних.Подразделение,
		|	СотрудникиСрезПоследних.Должность
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ФизЛицо В (&Сотрудники)) КАК СотрудникиСрезПоследних";
	Запрос.УстановитьПараметр("Период", ДатаДокумента);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокиТабличнойЧасти = Объект.Сотрудники.НайтиСтроки(Новый Структура("ФизЛицо", ВыборкаДетальныеЗаписи.ФизЛицо));
		
		Для Каждого СтрокаТабличнойЧасти Из СтрокиТабличнойЧасти Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи);			
		КонецЦикла;		
	КонецЦикла;    
КонецПроцедуры // ДополнитьСтрокиНаСервере()

&НаСервере
Функция СоздатьДокументыРКО(ТЗ_РКО)
	МассивДокументов = Новый Массив();
	
	ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаПодотчетнику");
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Сотрудники Цикл
		
		СтрокаТаблицыЗначений = ТЗ_РКО.Найти(СтрокаТабличнойЧасти.ФизЛицо, "ФизЛицо");
		Если СтрокаТаблицыЗначений = Неопределено Тогда
			ДокОбъект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();	
		Иначе
			Если СтрокаТаблицыЗначений.СуммаДокумента = СтрокаТабличнойЧасти.СуммаВсего Тогда
				Возврат МассивДокументов;
			Иначе
				ДокОбъект = СтрокаТаблицыЗначений.Ссылка.ПолучитьОбъект();
			КонецЕсли;			
		КонецЕсли;
		МассивДокументов.Добавить(ДокОбъект.Ссылка);
		
		ДокОбъект.Дата = ДатаДокумента;
		
		СтруктураЗаполнения = Новый Структура();
		СтруктураЗаполнения.Вставить("Командировка",		Объект.Ссылка);
		СтруктураЗаполнения.Вставить("ВидОперации",			ВидОперации);
		СтруктураЗаполнения.Вставить("Организация",			Объект.Организация);
		СтруктураЗаполнения.Вставить("ДокументОснование",	Объект.Ссылка);
		СтруктураЗаполнения.Вставить("ФизЛицо",				СтрокаТабличнойЧасти.ФизЛицо);
		СтруктураЗаполнения.Вставить("СуммаДокумента",		СтрокаТабличнойЧасти.СуммаВсего);
		СтруктураЗаполнения.Вставить("СчетУчета",			ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами);
		
		ДокОбъект.Заполнить(СтруктураЗаполнения);
								
		СтрокаТабличнойЧастиРКО = ДокОбъект.РасшифровкаПлатежа.Добавить();
		СтрокаТабличнойЧастиРКО.СуммаПлатежа = СтрокаТабличнойЧасти.СуммаВсего;	

		// Попытка
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить проведение по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
	КонецЦикла;
		
	Возврат МассивДокументов;
	
КонецФункции

&НаКлиенте
Процедура СоздатьДокументыВыплатыЗавершение()
    МассивДокументов = СоздатьДокументыВыплатыНаСервереИЗаписать();
    Текст = НСтр("ru = 'Создание:'");
    Для каждого СтрокаДокумент Из МассивДокументов Цикл
        ПоказатьОповещениеПользователя(Текст, ПолучитьНавигационнуюСсылку(СтрокаДокумент), СтрокаДокумент, БиблиотекаКартинок.Информация32);
	КонецЦикла;
	
	Элементы.ТаблицаРКО.Обновить();
КонецПроцедуры // СоздатьДокументыВыплатыЗавершение()

&НаСервере
Функция СоздатьДокументыВыплатыНаСервереИЗаписать()
	МассивДокументов = Новый Массив();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйКассовыйОрдер.Ссылка,
		|	РасходныйКассовыйОрдер.ФизЛицо,
		|	РасходныйКассовыйОрдер.СуммаДокумента
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		|ГДЕ
		|	РасходныйКассовыйОрдер.ДокументОснование = &ДокументОснование";
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	
	ТЗ_РКО = Запрос.Выполнить().Выгрузить();	

	МассивДокументов = СоздатьДокументыРКО(ТЗ_РКО);
				
	Возврат МассивДокументов;

КонецФункции //  СоздатьДокументыВыплатыНаСервере()

// Функция возвращает ответ пользователя о возможности записи/отмене проведения документа перед рассчетом
//
// Параметры:
//  Действие - действие, при котором выполняется проверка
// Возвращаемое значение:
//   Булево - 
//
&НаКлиенте
Функция ЗаписатьДокументОтменивПроведение()
	Если Объект.Проведен Тогда
		ЗаписатьНаСервере(РежимЗаписиДокумента.ОтменаПроведения);		
	ИначеЕсли Модифицированность 
		Или ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Дата = ДатаДокумента;
		ЗаписатьНаСервере(РежимЗаписиДокумента.Запись);		
	КонецЕсли;	
	
	Возврат Истина;
КонецФункции // ЗаписатьДокументОтменивПроведение()

// Процедура - Записать на сервере
//
// Параметры:
//  Режим	 - 	 - 
//
&НаСервере
Процедура ЗаписатьНаСервере(Режим)
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Записать(Режим);
	ЗначениеВРеквизитФормы(Документ, "Объект");
КонецПроцедуры // ЗаписатьНаСервере()

// Процедура заполняет табличную часть
//
&НаСервере
Процедура ЗаполнитьНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиСрезПоследних.ФизЛицо КАК ФизЛицо,
		|	СотрудникиСрезПоследних.Подразделение КАК Подразделение,
		|	СотрудникиСрезПоследних.Должность КАК Должность
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПоследних(&Период, Организация = &Организация) КАК СотрудникиСрезПоследних
		|ГДЕ
		|	СотрудникиСрезПоследних.Подразделение = &Подразделение
		|	И НЕ СотрудникиСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)";
	Запрос.УстановитьПараметр("Период", ДатаДокумента);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Объект.Сотрудники.Загрузить(РезультатЗапроса.Выгрузить());	
	
	ТарифыКомандировочных = ПолучитьТарифыКомандировочных();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Сотрудники Цикл 
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ТарифыКомандировочных, "Суточные, Проживание, Проездные, Валюта");
		РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.КоличествоДней);
	КонецЦикла;	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти  
