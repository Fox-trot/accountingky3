#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КоличествоДней) Тогда
	 	Объект.КоличествоДней 	= КоличествоДней;
	КонецЕсли;
	
	КоличествоДней 	= ПолучитьКоличествоДней();
	ДатаДокумента 	= Объект.Дата;
	Подразделение   = Объект.Подразделение;
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ДокСсылка = ТаблицаРКО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ДокСсылка.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДокументОснование");
	ДокСсылка.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ДокСсылка.Использование = Истина;
	ДокСсылка.ПравоеЗначение = Объект.Ссылка;
	
	ДокСсылка.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Операция");
	ДокСсылка.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ДокСсылка.Использование = Истина;
	ДокСсылка.ПравоеЗначение = ПредопределенноеЗначение("Справочник.ОперацииРКО.ВыдачаДенежныхСредствПодотчетнику");
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДанныеФормыСтруктура") Тогда
		СтрокаТабличнойЧасти = Элементы.Сотрудники.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		РасчетТарифов(СтрокаТабличнойЧасти.НомерСтроки);	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ТаблицаРКО.Отбор.Элементы.Очистить();
	ДокСсылка = ТаблицаРКО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ДокСсылка.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДокументОснование");
	ДокСсылка.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ДокСсылка.Использование = Истина;
	ДокСсылка.ПравоеЗначение = Объект.Ссылка;
	
	ДокСсылка.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Операция");
	ДокСсылка.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ДокСсылка.Использование = Истина;
	ДокСсылка.ПравоеЗначение = ПредопределенноеЗначение("Справочник.ОперацииРКО.ВыдачаДенежныхСредствПодотчетнику");
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер = "";
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	ПересчитатьТабличнуюЧастьПриИзмененииПериодаКомандировки()	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	ПересчитатьТабличнуюЧастьПриИзмененииПериодаКомандировки()
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьТабличнуюЧастьПриИзмененииПериодаКомандировки()
	Объект.КоличествоДней = ПолучитьКоличествоДней();	
	Если Объект.КоличествоДней <> КоличествоДней Тогда
		КоличествоДней = Объект.КоличествоДней;	
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросПересчитатьТабличнуюЧастьПриИзмененииПериодаКомандировки", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Поменялось количество дней командировки! Пересчитать табличную часть?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	КонецЕсли;	
КонецПроцедуры 

&НаКлиенте
Процедура СтранаПриИзменении(Элемент)
	Объект.Город = "";
	РасчетТарифов();
КонецПроцедуры

&НаКлиенте
Процедура ГородПриИзменении(Элемент)
	РасчетТарифов();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	// Значение реквизита не изменилось
	Если Объект.Подразделение = Подразделение Тогда 
		Возврат;
	КонецЕсли;	

	Если Объект.Сотрудники.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросОчиститьТабличнуюЧастьСотрудники", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет очищена. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе 
		Подразделение = Объект.Подразделение;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРКО Тогда
		ТаблицаРКО.Параметры.УстановитьЗначениеПараметра("ДокументСсылка", Объект.Ссылка);
		ТаблицаАО.Параметры.УстановитьЗначениеПараметра("ДокументСсылка", Объект.Ссылка);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти 		= Элементы.Сотрудники.ТекущиеДанные;
		СтрокаТабличнойЧасти.Дни	= Объект.КоличествоДней;	
		СтрокаТабличнойЧасти.Курс 	= 1;
		СтрокаТабличнойЧасти.Валюта = ВалютаРегламентированногоУчета;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаПодбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СуммаДокумента = Объект.Сотрудники.Итог("СуммаВсего");
	Если Объект.Сотрудники.Количество() > 0 И ЗначениеЗаполнено(Объект.Сотрудники[0].Питание) Тогда
		Объект.СодержаниеОВыплатеПитание = СтрЗаменить(Объект.СодержаниеОВыплатеПитание, "%100%", Объект.Сотрудники[0].Питание);	
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиФизЛицоПриИзменении(Элемент)
	СтрокаТабличнойЧасти 		= Элементы.Сотрудники.ТекущиеДанные;	
	СтруктураСотрудник = СведенияОСотруднике(ДатаДокумента, Объект.Организация, СтрокаТабличнойЧасти.ФизЛицо);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураСотрудник);
	РасчетТарифов(СтрокаТабличнойЧасти.НомерСтроки);
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДополнитьСтрокиНаСервере(СтрокаТабличнойЧасти.ФизЛицо);

КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСтранаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Сотрудники.ТекущиеДанные;
	
	ПересчетСтрокиТабличнойЧасти("Страна");
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиГородПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Сотрудники.ТекущиеДанные;	
	ПересчетСтрокиТабличнойЧасти("Город");
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиДниПриИзменении(Элемент)
	ПересчетСтрокиТабличнойЧасти("Дни");
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиВалютаПриИзменении(Элемент)
	СтрокаТабличнойЧасти 		= Элементы.Сотрудники.ТекущиеДанные;
	// проверка заполненого значения
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Валюта) Тогда 
		СтрокаТабличнойЧасти.Курс = КурсВалюты(СтрокаТабличнойЧасти.Валюта, ДатаДокумента);
	Иначе
		СтрокаТабличнойЧасти.Курс = 1;
	КонецЕсли;	
	
	ПересчетСтрокиТабличнойЧасти("Валюта");
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПитаниеПриИзменении(Элемент)
	ПересчетСтрокиТабличнойЧасти("Сумма");
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСуточныеПриИзменении(Элемент)
	ПересчетСтрокиТабличнойЧасти("Сумма");
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПроживаниеПриИзменении(Элемент)
	ПересчетСтрокиТабличнойЧасти("Сумма");
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПроездныеПриИзменении(Элемент)
	ПересчетСтрокиТабличнойЧасти("Сумма");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьРКО(Команда)
	Если НЕ ЗаписатьДокументОтменивПроведение() Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросСоздатьДокументыВыплаты", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Будут сформированы документы РКО! Продолжить выполнение операции?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	
	Элементы.ТаблицаРКО.Обновить();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПодразделению(Команда)
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено подразделение! Заполнение документа отменено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Подразделение",,Отказ)		
	КонецЕсли;

	Если Отказ Тогда 
		Возврат
	КонецЕсли;	
	
	Если Объект.Сотрудники.Количество() = 0 Тогда
		ЗаполнитьПоПодразделениюНаСервере();
		РасчетТарифов();
	Иначе	
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьТабличнуюЧасть", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет перезаполнена! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПодборСотрудников(Команда)
	Отказ = Ложь;

	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено подразделение! Заполнение документа отменено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Подразделение",,Отказ)		
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТекущаяОрганизация", Объект.Организация);
	СтруктураОтбора.Вставить("ТекущееПодразделение", Объект.Подразделение);
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	ПараметрыФормы.Вставить("АдресСпискаПодобранныхСотрудников", АдресСпискаПодобранныхСотрудников());
	
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, Элементы.Сотрудники);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьТабличнуюЧасть(РезультатВопроса, ДополнительныеПараметры) Экспорт
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоПодразделениюНаСервере();
		РасчетТарифов();
	КонецЕсли;
КонецПроцедуры	
		
&НаКлиенте
Процедура ОтветНаВопросПересчитатьТабличнуюЧастьПриИзмененииПериодаКомандировки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Сотрудники Цикл
			СтрокаТабличнойЧасти.Дни = КоличествоДней;
		КонецЦикла;
		РасчетТарифов();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросСоздатьДокументыВыплаты(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СоздатьДокументыВыплатыЗавершение();
		//ТаблицаРКО.
	КонецЕсли; 
КонецПроцедуры	

&НаКлиенте
Процедура ОтветНаВопросПересчитатьСтрокуТабличнойЧасти(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СтрокаТабличнойЧасти = Элементы.Сотрудники.ТекущиеДанные;
		РасчетТарифов(СтрокаТабличнойЧасти.НомерСтроки);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросПересчитатьСтрокуТабличнойЧастиПоВалюте(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СтрокаТабличнойЧасти = Элементы.Сотрудники.ТекущиеДанные;
		РасчетТарифов(СтрокаТабличнойЧасти.НомерСтроки,СтрокаТабличнойЧасти.Валюта);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросОчиститьТабличнуюЧастьСотрудники(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Подразделение = Объект.Подразделение;
		Объект.Сотрудники.Очистить();
	Иначе
		// Отмена изменения - возврат прежних значений
		Объект.Подразделение = Подразделение;
	КонецЕсли; 
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервере
Процедура РасчетТарифов(НомерСтроки = Неопределено, Валюта = Неопределено)
	
	ПараметрВсеСтроки = Ложь;
	Если НомерСтроки = Неопределено Тогда
		ПараметрВсеСтроки = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
			
		"ВЫБРАТЬ
		|	Сотрудники.ФизЛицо,
		|	Сотрудники.Подразделение,
		|	Сотрудники.Должность,
		|	Сотрудники.Дни,
		|	Сотрудники.Страна,
		|	Сотрудники.Город,
		|	Сотрудники.Валюта КАК Валюта,
		|	Сотрудники.НомерСтроки
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	&Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.НомерСтроки = &НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Тарифы.ВидТарифаКомандировочных = ЗНАЧЕНИЕ(Перечисление.ВидыТарифовКомандировочных.Суточные)
		|			ТОГДА Тарифы.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Суточные,
		|	ВЫБОР
		|		КОГДА Тарифы.ВидТарифаКомандировочных = ЗНАЧЕНИЕ(Перечисление.ВидыТарифовКомандировочных.Проживание)
		|			ТОГДА Тарифы.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Проживание,
		|	ВЫБОР
		|		КОГДА Тарифы.ВидТарифаКомандировочных = ЗНАЧЕНИЕ(Перечисление.ВидыТарифовКомандировочных.Питание)
		|			ТОГДА Тарифы.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Питание,
		|	ВЫБОР
		|		КОГДА Тарифы.ВидТарифаКомандировочных = ЗНАЧЕНИЕ(Перечисление.ВидыТарифовКомандировочных.Проездные)
		|			ТОГДА Тарифы.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Проездные,
		|	Тарифы.Страна,
		|	Тарифы.Город,
		|	Тарифы.Валюта
		|ПОМЕСТИТЬ Тарифы
		|ИЗ
		|	РегистрСведений.ТарифыКомандировочных.СрезПоследних(
		|			&Дата,
		|			Организация = &Организация
		|				И (Город, Страна) В
		|					(ВЫБРАТЬ
		|						ТаблицаДокумента.Город,
		|						ТаблицаДокумента.Страна
		|					ИЗ
		|						ТаблицаДокумента КАК ТаблицаДокумента)) КАК Тарифы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.ФизЛицо,
		|	ТаблицаДокумента.Подразделение,
		|	ТаблицаДокумента.Должность,
		|	ТаблицаДокумента.Дни,
		|	ТаблицаДокумента.Страна,
		|	ТаблицаДокумента.Город,
		|	ТаблицаДокумента.НомерСтроки,
		|	ТаблицаДокумента.Валюта КАК Валюта,
		|	СУММА(ЕСТЬNULL(Тарифы.Суточные, 0)) КАК Суточные,
		|	СУММА(ЕСТЬNULL(Тарифы.Проживание, 0)) КАК Проживание,
		|	СУММА(ЕСТЬNULL(Тарифы.Питание, 0)) КАК Питание,
		|	СУММА(ЕСТЬNULL(Тарифы.Проездные, 0)) КАК Проездные,
		|	СУММА(ТаблицаДокумента.Дни * (ЕСТЬNULL(Тарифы.Суточные, 0) + ЕСТЬNULL(Тарифы.Проживание, 0) + ЕСТЬNULL(Тарифы.Проездные, 0) + ЕСТЬNULL(Тарифы.Питание, 0))) КАК СуммаВсего
		|ИЗ
		|	ТаблицаДокумента КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Тарифы КАК Тарифы
		|		ПО ТаблицаДокумента.Страна = Тарифы.Страна
		|			И ТаблицаДокумента.Город = Тарифы.Город
		|			И ТаблицаДокумента.Валюта = Тарифы.Валюта
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.Город,
		|	ТаблицаДокумента.ФизЛицо,
		|	ТаблицаДокумента.Дни,
		|	ТаблицаДокумента.Должность,
		|	ТаблицаДокумента.Валюта,
		|	ТаблицаДокумента.Подразделение,
		|	ТаблицаДокумента.НомерСтроки,
		|	ТаблицаДокумента.Страна";
	
	Запрос.УстановитьПараметр("Дата", 			Объект.Дата);
	Запрос.УстановитьПараметр("Организация", 	Объект.Организация);
	Запрос.УстановитьПараметр("КоличествоДней",	Объект.КоличествоДней);	
	Запрос.УстановитьПараметр("Сотрудники",		Объект.Сотрудники.Выгрузить());
	
	Если ПараметрВсеСтроки Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ГДЕ
		|	Сотрудники.НомерСтроки = &НомерСтроки","");
	Иначе 
		Запрос.УстановитьПараметр("НомерСтроки",НомерСтроки);		
	КонецЕсли;
		
	Если Валюта = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Сотрудники.Валюта КАК Валюта","&Валюта");
		Запрос.УстановитьПараметр("Валюта",ВалютаРегламентированногоУчета); 
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Объект.Сотрудники[Выборка.НомерСтроки - 1], Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКоличествоДней()
	Если Объект.ДатаОкончания > Объект.ДатаНачала Тогда
		РезДеления 		= (КонецДня(Объект.ДатаОкончания) - Объект.ДатаНачала) / 86400;
		ЦелаяЧасть 		= Цел(РезДеления);
		ДробнаяЧасть 	= РезДеления - ЦелаяЧасть;
		Возврат ?(ДробнаяЧасть > 0, ЦелаяЧасть + 1, ЦелаяЧасть);
	ИначеЕсли Объект.ДатаОкончания = Объект.ДатаНачала и ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда 
		Возврат 1;
	Иначе 
		Возврат 0;
	КонецЕсли;	

КонецФункции // ПолучитьКоличествоДней()

&НаСервере
Функция СоздатьДокументыРКО(ТЗ_РКО)
	МассивДокументов = Новый Массив();
	
	Операция = ПредопределенноеЗначение("Справочник.ОперацииРКО.ВыдачаДенежныхСредствПодотчетнику");
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Сотрудники Цикл
		
		СтрокаТаблицыЗначений = ТЗ_РКО.Найти(СтрокаТабличнойЧасти.ФизЛицо, "ФизЛицо");
		Если СтрокаТаблицыЗначений = Неопределено Тогда
			ДокОбъект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();	
		Иначе
			Если СтрокаТаблицыЗначений.СуммаДокумента = СтрокаТабличнойЧасти.СуммаВсего Тогда
				Возврат МассивДокументов;
			Иначе
				ДокОбъект = СтрокаТаблицыЗначений.Ссылка.ПолучитьОбъект();
			КонецЕсли;			
		КонецЕсли;
		МассивДокументов.Добавить(ДокОбъект.Ссылка);
		
		ДокОбъект.Дата = Объект.Дата;
		ДокОбъект.Заполнить(Новый Структура("Командировка, Операция, Организация, ДокументОснование, ФизЛицо, СуммаДокумента, СчетУчета", 
								Объект.Ссылка,
								Операция,
								Объект.Организация,
								Объект.Ссылка,
								СтрокаТабличнойЧасти.ФизЛицо, 
								СтрокаТабличнойЧасти.СуммаВсего,
								ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами));
								
		ДокОбъект.ВыдачаВПодотчет.Очистить();
		СтрокаТабличнойЧастиРКО = ДокОбъект.ВыдачаВПодотчет.Добавить();
		СтрокаТабличнойЧастиРКО.СтатьяДвиженияДенежныхСредств = ?(ЗначениеЗаполнено(Операция), Операция.СтатьяДвиженияДенежныхСредств, Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());	
		СтрокаТабличнойЧастиРКО.СуммаПлатежа 	= СтрокаТабличнойЧасти.СуммаВсего;	

		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
							
	КонецЦикла;
		
	Элементы.ТаблицаРКО.Обновить();
	Возврат МассивДокументов;
	
КонецФункции

&НаКлиенте
Процедура СоздатьДокументыВыплатыЗавершение()
    МассивДокументов = СоздатьДокументыВыплатыНаСервереИЗаписать();
    Текст = НСтр("ru = 'Создание:'");
    Для каждого СтрокаДокумент Из МассивДокументов Цикл
        ПоказатьОповещениеПользователя(Текст, ПолучитьНавигационнуюСсылку(СтрокаДокумент), СтрокаДокумент, БиблиотекаКартинок.Информация32);
    КонецЦикла;
КонецПроцедуры // СоздатьДокументыВыплатыЗавершение()

&НаСервере
Функция СоздатьДокументыВыплатыНаСервереИЗаписать()
	МассивДокументов = Новый Массив();

	НачатьТранзакцию();

	УстановитьПривилегированныйРежим(Истина);
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйКассовыйОрдер.Ссылка,
		|	РасходныйКассовыйОрдер.ФизЛицо,
		|	РасходныйКассовыйОрдер.СуммаДокумента
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		|ГДЕ
		|	РасходныйКассовыйОрдер.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	
	ТЗ_РКО = Запрос.Выполнить().Выгрузить();	

	МассивДокументов = СоздатьДокументыРКО(ТЗ_РКО);
				
	ЗафиксироватьТранзакцию();	
	
	Возврат МассивДокументов;

КонецФункции //  СоздатьДокументыВыплатыНаСервере()

&НаСервереБезКонтекста
Функция СведенияОСотруднике(Дата, Организация, ФизЛицо)
	
	Возврат ПроведениеРасчетовПоЗарплатеСервер.СведенияОСотруднике(Дата, Организация, ФизЛицо)
	
КонецФункции

&НаКлиенте
Процедура ПересчетСтрокиТабличнойЧасти(Колонка)
	Если Колонка = "Дни" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросПересчитатьСтрокуТабличнойЧасти", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'В текущей строке поменялось количество дней командировки! Пересчитать тарифы в этой строке?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	ИначеЕсли Колонка = "Страна" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросПересчитатьСтрокуТабличнойЧасти", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'В текущей строке поменялась страна назначения! Пересчитать тарифы в этой строке?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	ИначеЕсли Колонка = "Город" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросПересчитатьСтрокуТабличнойЧасти", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'В текущей строке поменялся город! Пересчитать тарифы в этой строке?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	ИначеЕсли Колонка = "Валюта" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросПересчитатьСтрокуТабличнойЧастиПоВалюте", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'В текущей строке поменялась валюта! Пересчитать тарифы в этой строке?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	ИначеЕсли Колонка = "Сумма" Тогда
		СтрокаТабличнойЧасти = Элементы.Сотрудники.ТекущиеДанные;
		СтрокаТабличнойЧасти.СуммаВсего = (СтрокаТабличнойЧасти.Суточные + СтрокаТабличнойЧасти.Проживание + СтрокаТабличнойЧасти.Питание + СтрокаТабличнойЧасти.Проездные)*СтрокаТабличнойЧасти.Дни;
	КонецЕсли;
КонецПроцедуры 

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервереБезКонтекста
Функция КурсВалюты(Валюта, Дата)

	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Дата).Курс;	

КонецФункции // ()

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Сотрудники.Выгрузить(,"ФизЛицо").ВыгрузитьКолонку("ФизЛицо"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработкаПодбораНаСервере(Сотрудники)
	
	Для Каждого ФизЛицо Из Сотрудники Цикл
		СтрокиТабличнойЧасти = Объект.Сотрудники.НайтиСтроки(Новый Структура("ФизЛицо", ФизЛицо));
		
		Если СтрокиТабличнойЧасти.Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Объект.Сотрудники.Добавить();
			СтрокаТабличнойЧасти.ФизЛицо = ФизЛицо;
		КонецЕсли;
	КонецЦикла;
	
	ДополнитьСтрокиНаСервере(Сотрудники);
КонецПроцедуры

// Процедура заполняет строки
//
// Параметры:
//  Сотрудники  - Массив - массив физ.лиц, по которым нужно заполнить строки
//
&НаСервере
Процедура ДополнитьСтрокиНаСервере(Сотрудники)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиСрезПоследних.ФизЛицо,
		|	СотрудникиСрезПоследних.Должность,
		|	&НачалоПериода КАК ДатаНачала,
		|	&КонецПериода КАК ДатаОкончания,
		|	СотрудникиСрезПоследних.Подразделение,
		|	СотрудникиСрезПоследних.ГрафикРаботы
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПоследних(
		|			&ДатаК,
		|			Организация = &Организация
		|				И ФизЛицо В (&Сотрудники)) КАК СотрудникиСрезПоследних
		|";
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", Объект.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Объект.ДатаОкончания));
	Запрос.УстановитьПараметр("ДатаК", Объект.Дата);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СтруктураОтбора = ПроведениеРасчетовПоЗарплатеСервер.СтруктураОтбораДанныхСчетовУчетаПоЗП();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокиТабличнойЧасти = Объект.Сотрудники.НайтиСтроки(Новый Структура("ФизЛицо", ВыборкаДетальныеЗаписи.ФизЛицо));
		
		Для Каждого СтрокаТабличнойЧасти Из СтрокиТабличнойЧасти Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи);
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТабличнойЧасти);
			СтруктураОтбора.КатегорияДолжности = СтрокаТабличнойЧасти.Должность.Категория;
	
			ДанныеСчетаУчетаЗП = ПроведениеРасчетовПоЗарплатеСервер.ДанныеСчетаУчетаЗП(СтруктураОтбора);
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСчетаУчетаЗП);		

		КонецЦикла;		
	КонецЦикла;    
КонецПроцедуры // ДополнитьСтрокиНаСервере()

// Функция возвращает ответ пользователя о возможности записи/отмене проведения документа перед рассчетом
//
// Параметры:
//  Действие - действие, при котором выполняется проверка
// Возвращаемое значение:
//   Булево - 
//
&НаКлиенте
Функция ЗаписатьДокументОтменивПроведение()
	Если Объект.Проведен Тогда
		ЗаписатьНаСервере(РежимЗаписиДокумента.ОтменаПроведения);		
	ИначеЕсли Модифицированность 
		Или ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Дата = ДатаДокумента;
		ЗаписатьНаСервере(РежимЗаписиДокумента.Запись);		
	КонецЕсли;	
	
	Возврат Истина;
КонецФункции // ЗаписатьДокументОтменивПроведение()

// Процедура - Записать на сервере
//
// Параметры:
//  Режим	 - 	 - 
//
&НаСервере
Процедура ЗаписатьНаСервере(Режим)
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Записать(Режим);
	ЗначениеВРеквизитФормы(Документ, "Объект");
КонецПроцедуры // ЗаписатьНаСервере()

&НаСервере
Процедура ЗаполнитьПоПодразделениюНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиСрезПоследних.ФизЛицо,
		|	СотрудникиСрезПоследних.Должность,
		|	СотрудникиСрезПоследних.Подразделение,
		|	&Дни
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПоследних(&Дата, Организация = &Организация) КАК СотрудникиСрезПоследних
		|ГДЕ
		|	НЕ СотрудникиСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|	И СотрудникиСрезПоследних.Подразделение = &Подразделение";
	Запрос.УстановитьПараметр("Дата", 			ДатаДокумента);
	Запрос.УстановитьПараметр("Организация", 	Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", 	Объект.Подразделение);
	Запрос.УстановитьПараметр("Дни", 			Объект.КоличествоДней);
	
	РезультатЗапроса = Запрос.Выполнить();
	Объект.Сотрудники.Загрузить(РезультатЗапроса.Выгрузить());	
	
	СтруктураОтбора = ПроведениеРасчетовПоЗарплатеСервер.СтруктураОтбораДанныхСчетовУчетаПоЗП();
	
	// Определение счетов учета
	Для Каждого СтрокаТабличнойЧасти Из Объект.Сотрудники Цикл 
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТабличнойЧасти);
		СтруктураОтбора.ВидРасчетаНачисления = Объект.ВидРасчета;
		СтруктураОтбора.КатегорияДолжности = СтрокаТабличнойЧасти.Должность.Категория;

		ДанныеСчетаУчетаЗП = ПроведениеРасчетовПоЗарплатеСервер.ДанныеСчетаУчетаЗП(СтруктураОтбора);
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСчетаУчетаЗП);		
	КонецЦикла;	
КонецПроцедуры // ЗаполнитьПоподразделениюНаСервере()

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти  
