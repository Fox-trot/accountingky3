
#Область ПроцедурыИФункцииОбщегоНазначения

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Функция возвращает количество календарных дней
//
// Параметры:
//  ГрафикиРаботы  	- СправочникСсылка.Календари - графики работы, по которому работает сотрудник
//  ДатаНачала 		- Дата - дата начала
//  ДатаОкончания 	- Дата - дата окончания
//
// Возвращаемое значение:
//   Число   - количество дней
//
&НаСервереБезКонтекста
Функция ПолучитьДатуОкончания(ГрафикРаботы, ДатаНачала, КоличествоДней, МетодРасчета)
				
	МассивВидыДней = Новый Массив;
	МассивВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	МассивВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота);
	МассивВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	
	Если Не МетодРасчета.РасчетПоРабочимДням Тогда
		МассивВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье);
		МассивВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
	КонецЕсли;
	
	Возврат ПроведениеРасчетовПоЗарплатеСервер.ДобавитьКДатеПоГрафику(ГрафикРаботы, ДатаНачала, КоличествоДней, МассивВидыДней);
КонецФункции // КоличествоДней()

// Функция возвращает количество календарных дней
//
// Параметры:
//  ГрафикиРаботы  	- СправочникСсылка.Календари - графики работы, по которому работает сотрудник
//  ДатаНачала 		- Дата - дата начала
//  ДатаОкончания 	- Дата - дата окончания
//
// Возвращаемое значение:
//   Число   - количество дней
//
&НаСервереБезКонтекста
Функция КоличествоДней(ГрафикРаботы, ДатаНачала, ДатаОкончания,МетодРасчета)
	
	КоличествоДней = ПроведениеРасчетовПоЗарплатеСервер.КоличествоДнейГрафикаРаботы(ГрафикРаботы, ДатаНачала, ДатаОкончания);		
	КоличествоДней = ?(МетодРасчета.РасчетПоРабочимДням, 
	    КоличествоДней.КоличествоДнейРабочий + КоличествоДней.КоличествоДнейПредпраздничный,  
		КоличествоДней.КоличествоДней);	
	Возврат КоличествоДней;	
	
КонецФункции // КоличествоДней()

// Функция возвращает количество часов
//
// Параметры:
//  ГрафикиРаботы  	- СправочникСсылка.Календари - графики работы, по которому работает сотрудник
//  ДатаНачала 		- Дата - дата начала
//  ДатаОкончания 	- Дата - дата окончания
//
// Возвращаемое значение:
//   Число   - количество часов
//
&НаСервереБезКонтекста
Функция КоличествоЧасов(ГрафикРаботы, ДатаНачала, ДатаОкончания,МетодРасчета)
	
	КоличествоЧасов = ПроведениеРасчетовПоЗарплатеСервер.КоличествоДнейГрафикаРаботы(ГрафикРаботы, ДатаНачала, ДатаОкончания);		
	КоличествоЧасов = КоличествоЧасов.КоличествоЧасов; //Всегда по дате, как и дней. РасчетПоРабочимДням - смотрим только в ММ при проведении по регистру.
	
	Возврат КоличествоЧасов;	
	
КонецФункции // КоличествоЧасов()

&НаСервереБезКонтекста
Функция ВидРасчетаПоМетодуРасчета(МетодРасчета)	
	Возврат МетодРасчета.ВидРасчета;	
КонецФункции 

&НаСервереБезКонтекста
Функция ПризнакБезСодержанияПоМетодуРасчета(МетодРасчета)	
	Возврат МетодРасчета.БезСодержания;	
КонецФункции 

&НаСервереБезКонтекста
Функция КатегорияПоСтатусу(ДатаДокумента, Организация, ФизЛицо)	
	СведенияОСтатусеСотрудника = ПроведениеРасчетовПоЗарплатеСервер.СтатусСотрудникаКакНалогоплательщика(ДатаДокумента, Организация, ФизЛицо);
	
	Возврат СведенияОСтатусеСотрудника.Статус.Категория;	
КонецФункции 

// Функция возвращает ответ пользователя о возможности записи/отмене проведения документа перед рассчетом
//
// Параметры:
//  Действие  - Строка - действие, при котором выполняется проверка
// Возвращаемое значение:
//   Булево - 
//
&НаКлиенте
Функция ЗаписатьДокументОтменивПроведение()
	Если Объект.Проведен Тогда
		ЗаписатьНаСервере(РежимЗаписиДокумента.ОтменаПроведения);		
	ИначеЕсли Модифицированность 
		Или ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Дата = ДатаДокумента;
		ЗаписатьНаСервере(РежимЗаписиДокумента.Запись);		
	КонецЕсли;	
	
	Возврат Истина;
КонецФункции // ЗаписатьДокументОтменивПроведение()

&НаСервере
Процедура ЗаписатьНаСервере(Режим)
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Записать(Режим);
	ЗначениеВРеквизитФормы(Документ, "Объект");
КонецПроцедуры // ЗаписатьНаСервере()

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьНаСервере()
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьТабличнуюЧасть();
	ЗначениеВРеквизитФормы(Документ, "Объект");
КонецПроцедуры // ЗаполнитьТабличнуюЧастьНаСервере()

// Процедура рассчитывает табличную часть
//
&НаСервере
Процедура РассчитатьТабличнуюЧастьНаСервере()
	// Определение количества месяцев
	КоличествоМесяцевПремии = Объект.МетодРасчета.ПериодРасчетаСреднейПремии;
	Если КоличествоМесяцевПремии = 0 Тогда 
		КоличествоМесяцевПремии = 12;
	КонецЕсли;	
	
	// Коэффициент расчета
	КоэффициентРасчета = Объект.МетодРасчета.КоэффициентРасчета;
	
	// База начислений 
	СреднийЗаработокРезультат  = Объект.СреднийЗаработок.Итог("Результат");
	СреднийЗаработокНормаЧасов = Объект.СреднийЗаработок.Итог("НормаЧасов");
	СредняяПремияРезультат     = Объект.СредняяПремия.Итог("Результат");
	
	ГодНормаДней = 1;
	СредняяПремия = СредняяПремияРезультат / КоличествоМесяцевПремии / ГодНормаДней;
	
	КоличествоМесяцевСреднийЗаработок = Объект.СреднийЗаработок.Количество();
	// Расчет суммы 
	Объект.СуммаСреднийЗаработок = СреднийЗаработокРезультат / КоличествоМесяцевСреднийЗаработок / КоэффициентРасчета + СредняяПремия;
	Результат = Объект.СуммаСреднийЗаработок;
	
	//1.Заполняем строки для основного отп.
	//2.Заполняем доп. отпуск, если есть доп. дни
	Если ЗначениеЗаполнено(Объект.ДатаНачалаДопОтпуска) Тогда
		
		// Заполнение табличной части по периодам регистрации(месяц) Основной отпуск
		ПроведениеРасчетовПоЗарплатеСервер.ЗаполнитьТабличнуюЧастьПоПериодам(Объект, Объект.ДатаНачала, Объект.ДатаНачалаДопОтпуска - 86400, НачалоМесяца(ДатаДокумента), Объект.МетодРасчета.ВидРасчета, Объект.МетодРасчета, Объект.ГрафикРаботы, Результат);
		// Заполнение табличной части по периодам регистрации(месяц) Дополнит. отпуск
		ПроведениеРасчетовПоЗарплатеСервер.ЗаполнитьТабличнуюЧастьПоПериодам(Объект, Объект.ДатаНачалаДопОтпуска , Объект.ДатаОкончанияДопОтпуска, НачалоМесяца(ДатаДокумента), , Объект.МетодРасчета, Объект.ГрафикРаботы, Результат);
		
	Иначе 
		Если Объект.ДнейДополнительногоОтпуска <= 0 Тогда
			ВидРасчета = Объект.МетодРасчета.ВидРасчета;
		КонецЕсли;
		ПроведениеРасчетовПоЗарплатеСервер.ЗаполнитьТабличнуюЧастьПоПериодам(Объект, Объект.ДатаНачала, Объект.ДатаОкончания, НачалоМесяца(ДатаДокумента), ВидРасчета, Объект.МетодРасчета, Объект.ГрафикРаботы, Результат);
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Начисления Цикл
		СтрокаТабличнойЧасти.СчетУчетаЗатрат = СчетУчетаЗатрат;
	    СтрокаТабличнойЧасти.СтатьяЗатрат = СтатьяЗатрат;
	КонецЦикла;
	
КонецПроцедуры // РассчитатьТабличнуюЧастьНаСервере()

&НаКлиенте
Процедура ЗаполнитьДанныеПоФизЛицу()
	
	СведенияОСотруднике = СведенияОСотруднике(ДатаДокумента, Объект.Организация, Объект.ФизЛицо); 
	ЗаполнитьЗначенияСвойств(Объект,СведенияОСотруднике);  // Подразделение, Должность, ГрафикРаботы
	
	Объект.ДополнительныеОтпуска.Очистить();	
	//ДанныеОтпуска = РабочийПериодДниОтпускаСотрудникаНаДату(ДатаДокумента,Объект.Организация,Объект.ФизЛицо);
	//Если ДанныеОтпуска = Неопределено Тогда 
	//	Возврат;
	//КонецЕсли;
	//
	//Объект.ДнейОстаток = ДанныеОтпуска.ДнейОстаток;
	//Объект.ДатаНачалаРабочегоГода = ДанныеОтпуска.ПериодОтпуска;
	//Объект.ДатаОкончанияРабочегоГода = ДобавитьМесяц(Объект.ДатаНачалаРабочегоГода,12);
	// 
	//Если ДанныеОтпуска.ОсновнойОтпуск <> Неопределено Тогда 
	//	//1. Заполнение основного отпуска
	//	СтрокаТабличнойЧасти 				= Объект.ДополнительныеОтпуска.Добавить();
	//	СтрокаТабличнойЧасти.ВидОтпуска		= ДанныеОтпуска.ОсновнойОтпуск;
	//	СтрокаТабличнойЧасти.КоличествоДней	= ДанныеОтпуска.ДнейОстаток;
	//	
	//КонецЕсли;
	
	ЗаполнитьОтражениеВУчете();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтражениеВУчете()
	СтруктураОтбора = ПроведениеРасчетовПоЗарплатеСервер.СтруктураОтбораДанныхСчетовУчетаПоЗП();
	
	СтруктураОтбора.Подразделение = Объект.Подразделение;
	СтруктураОтбора.Должность = Объект.Должность;
	СтруктураОтбора.МетодРасчетаОтпуска = Объект.МетодРасчета;
	СтруктураОтбора.ВидРасчетаНачисления = Объект.МетодРасчета.ВидРасчета;
	ДанныеСчетаУчетаЗП = ПроведениеРасчетовПоЗарплатеСервер.ДанныеСчетаУчетаЗП(СтруктураОтбора);
	
	СчетУчетаЗатрат = ДанныеСчетаУчетаЗП.СчетУчетаЗатрат;
	СтатьяЗатрат = ДанныеСчетаУчетаЗП.СтатьяЗатрат;
КонецПроцедуры // ЗаполнитьОтражениеВУчете()

&НаКлиенте
Процедура ПересчитатьДатуОкончанияПоДням()
	Объект.Дней = Объект.ДополнительныеОтпуска.Итог("КоличествоДнейФакт");	
	//Объект.ДнейДополнительногоОтпуска = КоличествоДнейДополнительногоОтпуска();

	КатегорияСотрудника = КатегорияПоСтатусу(ДатаДокумента, Объект.Организация, Объект.ФизЛицо);
	УПП = БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиПоПерсоналу(ДатаДокумента,Объект.Организация);
	
	Если ЗначениеЗаполнено(УПП.ГрафикДляРасчетаОтпусков) Тогда 
		График = УПП.ГрафикДляРасчетаОтпусков;
	Иначе 	
		ТекстСообщения = НСтр("ru = 'Не заполнен график отпусков в учетной политике! Расчет даты окончания отменен'");
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле = "Объект.ДатаОкончания";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();			
		Возврат;
	КонецЕсли;
	
	Если Объект.Дней > 0 Тогда 
		Объект.ДатаОкончания = ПолучитьДатуОкончания(График, Объект.ДатаНачала, Объект.Дней, Объект.МетодРасчета);
	КонецЕсли;	
	Объект.ЧастьОтпуска =  Объект.Дней < Объект.ДнейОстаток;
	
	//Если БезСодержания, то заполним часы: 
	Если ПризнакБезСодержанияПоМетодуРасчета(Объект.МетодРасчета)Тогда 
		Объект.Часов = КоличествоЧасов(Объект.ГрафикРаботы, Объект.ДатаНачала, Объект.ДатаОкончания,Объект.МетодРасчета);
	КонецЕсли;
	
	// Разделяем периоды основного и доп. отпусков
	ДнейОснОтпуска = Объект.Дней - Объект.ДнейДополнительногоОтпуска;
	Объект.ДатаНачалаДопОтпуска = "";
	Объект.ДатаОкончанияДопОтпуска = "";

	// Если ДнейДополнительногоОтпуска > 0 =>  значит есть доп отпуск, и если ДнейОснОтпуска > 0 => надо делить! 
	Если Объект.ДнейДополнительногоОтпуска > 0 И ДнейОснОтпуска > 0 Тогда 
		ДатаОкончанияОснОтпуска = ПолучитьДатуОкончания(График, Объект.ДатаНачала, ДнейОснОтпуска, Объект.МетодРасчета);
		
		Объект.ДатаНачалаДопОтпуска = КонецДня(ДатаОкончанияОснОтпуска) + 1;
		Объект.ДатаОкончанияДопОтпуска = ПолучитьДатуОкончания(График, Объект.ДатаНачалаДопОтпуска, Объект.ДнейДополнительногоОтпуска, Объект.МетодРасчета);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОСотруднике(ДатаДокумента, Организация, ФизЛицо)
	Возврат ПроведениеРасчетовПоЗарплатеСервер.СведенияОСотруднике(ДатаДокумента, Организация, ФизЛицо);
КонецФункции // СведенияОСотруднике()

//&НаСервереБезКонтекста
//Функция РабочийПериодДниОтпускаСотрудникаНаДату(Период, Организация, ФизЛицо)
//	Возврат ПроведениеРасчетовПоЗарплатеСервер.РабочийПериодДниОтпускаСотрудникаНаДату(Период, Организация, ФизЛицо);
//КонецФункции // РабочийПериодДниОтпускаСотрудникаНаДату()

//// Функция возвращает количество дополнительных дней отпуска из ТЧ Дополнительные отпуска
////
//&НаКлиенте
//Функция КоличествоДнейДополнительногоОтпуска()
//	
//	КоличествоДней = 0;
//	Для каждого СтрокаТабличнойЧасти Из  Объект.ДополнительныеОтпуска Цикл
//		Если СтрокаТабличнойЧасти.ВидОтпуска <> ПредопределенноеЗначение("Справочник.ДополнительныеОтпуска.Основной") Тогда 
//			КоличествоДней = КоличествоДней + СтрокаТабличнойЧасти.КоличествоДнейФакт; 
//		КонецЕсли;
//	КонецЦикла;
//	
//	Возврат КоличествоДней;	
//	
//КонецФункции // КоличествоДнейДополнительногоОтпуска()

#КонецОбласти

#Область УправлениеВнешнимВидом

&НаКлиенте
// Процедура устанавливает видимость и доступность элементов.
//
Процедура УстановитьВидимостьДоступностьЭлементов()
	Элементы.ВидОтзыва.Видимость = Ложь;
	Элементы.ГруппаСообщенияОНеСоответствии.Видимость = Ложь;	
	 
	Если Объект.МетодРасчета = ПредопределенноеЗначение("Справочник.МетодыРасчетаОтпуска.ОтзывИзОтпуска") Тогда 		
		Элементы.ВидОтзыва.Видимость = Истина;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ФизЛицо)
		И НЕ (ЗначениеЗаполнено(Объект.ГрафикРаботы)
		И ЗначениеЗаполнено(Объект.Подразделение)
		И ЗначениеЗаполнено(Объект.Должность)) Тогда 
		
		Элементы.ГруппаСообщенияОНеСоответствии.Видимость = Истина;			
	КонецЕсли;
	
	БезСодержания = ПризнакБезСодержанияПоМетодуРасчета(Объект.МетодРасчета);
	Если БезСодержания Тогда 
		Элементы.СтраницаСреднийЗаработок.Видимость = Ложь;
		Элементы.СтраницаНачисления.Видимость 		= Ложь;
		Элементы.Часов.Видимость 					= Истина; 
	Иначе 
		Элементы.СтраницаСреднийЗаработок.Видимость = Истина; 
		Элементы.СтраницаНачисления.Видимость 		= Истина;
		Элементы.Часов.Видимость 					= Ложь; 		
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли; 
	ЗаполнитьОтражениеВУчете();	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Сотрудник""! Заполнение документа отменено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ФизЛицо",,Отказ)		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.ГрафикРаботы) Тогда 
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""ГрафикРаботы""!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ГрафикРаботы",,Отказ)		
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ВидРасчетаПоМетодуРасчета(Объект.МетодРасчета)) Тогда 
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Вид начисления в методе расчета ""!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.МетодРасчета",,Отказ)		
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.МетодРасчета) Тогда 
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""МетодРасчета""!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.МетодРасчета",,Отказ)		
	КонецЕсли;	
	
	Если Отказ Тогда 
		Возврат
	КонецЕсли;	
	
	Если НЕ ЗаписатьДокументОтменивПроведение() Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Объект.СреднийЗаработок.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьТабличнуюЧасть", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет очищена! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		ЗаполнитьТабличнуюЧастьНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	Отказ = Ложь;
	
	Если Объект.СреднийЗаработок.Количество() = 0  Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть ""Средний заработок""! Расчет документа отменен.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Начисления",,Отказ)		
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат
	КонецЕсли;	
	
	Если НЕ ЗаписатьДокументОтменивПроведение() Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Объект.Начисления.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросРассчитатьТабличнуюЧасть", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет пересчитана! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		РассчитатьТабличнуюЧастьНаСервере();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДанныеПоФизЛицу();	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
КонецПроцедуры

&НаКлиенте
Процедура МетодРасчетаПриИзменении(Элемент)
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)	
	ЗаполнитьДанныеПоФизЛицу();	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда	
	    Объект.ДатаОкончания = Объект.ДатаНачала;	
	КонецЕсли; 
	// расчет дней	
	Объект.Дней = КоличествоДней(Объект.ГрафикРаботы, Объект.ДатаНачала, Объект.ДатаОкончания,Объект.МетодРасчета);
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаРабочегоГодаПриИзменении(Элемент)
	Объект.ДатаОкончанияРабочегоГода = ДобавитьМесяц(Объект.ДатаНачалаРабочегоГода,12);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ЗаполнитьОтражениеВУчете();
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПриИзменении(Элемент)
	ЗаполнитьОтражениеВУчете();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТабличныхЧастей

&НаКлиенте
Процедура ДополнительныеОтпускаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПересчитатьДатуОкончанияПоДням();	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтпускаПослеУдаления(Элемент)
	ПересчитатьДатуОкончанияПоДням();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = Элементы.Начисления.ТекущиеДанные;	
		СтрокаТабличнойЧасти.СчетУчетаЗатрат = СчетУчетаЗатрат;
	    СтрокаТабличнойЧасти.СтатьяЗатрат = СтатьяЗатрат;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьТабличнуюЧасть(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.СреднийЗаработок.Очистить();
		ЗаполнитьТабличнуюЧастьНаСервере();
	КонецЕсли; 
КонецПроцедуры	

&НаКлиенте
Процедура ОтветНаВопросРассчитатьТабличнуюЧасть(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Начисления.Очистить();
		РассчитатьТабличнуюЧастьНаСервере();	
	КонецЕсли; 
КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

