#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "МодифицированМетодРасчетаОтпуска"
		И Параметр Тогда
		// Установить видимость и доступность элементов формы
		УстановитьВидимостьДоступностьЭлементов();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
	ФизЛицоПриИзмененииНаСервере();	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ФизЛицо.
//
&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)	
	ФизЛицоПриИзмененииНаСервере();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода МетодРасчета.
//
&НаКлиенте
Процедура МетодРасчетаПриИзменении(Элемент)
	РассчитатьДни();                          	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ДатаНачала.
//
&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	РассчитатьДни();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ДатаОкончания.
//
&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	РассчитатьДни();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоФизЛицу(Команда)
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФизЛицо) Тогда 
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Сотрудник""!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.ФизЛицо",,Отказ)		
	КонецЕсли;	
	
	Если Отказ Тогда 
		Возврат
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьПоФизЛицу", ЭтотОбъект);
	ТекстВопроса = СтрШаблон(НСтр("ru = 'Документ будет перезаполнен по сотруднику ""%1""! Продолжить выполнение операции?'"), Объект.ФизЛицо);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Сотрудник""! Заполнение документа отменено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.ФизЛицо",,Отказ)		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.ГрафикРаботы) Тогда 
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""ГрафикРаботы""!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.ГрафикРаботы",,Отказ)		
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.МетодРасчета) Тогда 
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""МетодРасчета""!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.МетодРасчета",,Отказ)		
	КонецЕсли;	
	
	Если НЕ ПроверитьЗаполнениеМетодаРасчета() Тогда 
		ТекстСообщения = НСтр("ru = 'Не заполнены поля в ""Методе расчета""!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.МетодРасчета",,Отказ)		
	КонецЕсли;	

	Если Отказ Тогда 
		Возврат
	КонецЕсли;	
	
	Если НЕ ЗаписатьДокументОтменивПроведение() Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Объект.СреднийЗаработок.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьТабличнуюЧасть", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет очищена! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		ЗаполнитьТабличнуюЧастьНаСервере();
		РасчитатьСреднийЗаработок();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	Отказ = Ложь;
	
	Если Объект.СреднийЗаработок.Количество() = 0  Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть ""Средний заработок""! Расчет документа отменен.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Начисления",,Отказ)		
	КонецЕсли;
	
	РасчитатьСреднийЗаработок(Истина, Отказ);
	
	Если Отказ Тогда 
		Возврат
	КонецЕсли;	
	
	Если НЕ ЗаписатьДокументОтменивПроведение() Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Объект.Начисления.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросРассчитатьТабличнуюЧасть", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет пересчитана! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		РассчитатьТабличнуюЧастьНаСервере();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьПоФизЛицу(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ФизЛицоПриИзмененииНаСервере();		
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьТабличнуюЧасть(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.СреднийЗаработок.Очистить();
		ЗаполнитьТабличнуюЧастьНаСервере();
		РасчитатьСреднийЗаработок();
	КонецЕсли; 
КонецПроцедуры	

&НаКлиенте
Процедура ОтветНаВопросРассчитатьТабличнуюЧасть(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Начисления.Очистить();
		РассчитатьТабличнуюЧастьНаСервере();	
	КонецЕсли; 
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	ВидОтпуска = ВидОтпускаМетодаРасчета(Объект.МетодРасчета);
	
	Если ВидОтпуска = Перечисления.ВидыОтпусков.БезСодержания Тогда 
		Элементы.ДатаНачала.Видимость = Истина;
		Элементы.ДатаОкончания.Видимость = Истина;
		Элементы.Дней.ТолькоПросмотр = Истина;

		Элементы.РазмерСреднийЗаработок.Видимость = Ложь;
		Элементы.СтраницаСреднийЗаработок.Видимость = Ложь;
		Элементы.СтраницаНачисления.Видимость = Ложь;
		Элементы.СреднийЗаработокИтогРезультат.Видимость = Ложь;
		Элементы.НачисленияИтогРезультат.Видимость = Ложь;
		
		Элементы.НачисленияДатаНачала.Видимость = Истина;
		Элементы.НачисленияДатаОкончания.Видимость = Истина;
		
	ИначеЕсли ВидОтпуска = Перечисления.ВидыОтпусков.Компенсация Тогда 
		Элементы.ДатаНачала.Видимость = Ложь;
		Элементы.ДатаОкончания.Видимость = Ложь;
		Элементы.Дней.ТолькоПросмотр = Ложь;
		
		Элементы.РазмерСреднийЗаработок.Видимость = Истина;
		Элементы.СтраницаСреднийЗаработок.Видимость = Истина;
		Элементы.СтраницаНачисления.Видимость = Истина;
		Элементы.СреднийЗаработокИтогРезультат.Видимость = Истина;
		Элементы.НачисленияИтогРезультат.Видимость = Истина;

		Элементы.НачисленияДатаНачала.Видимость = Ложь;
		Элементы.НачисленияДатаОкончания.Видимость = Ложь;

	Иначе 
		Элементы.ДатаНачала.Видимость = Истина;
		Элементы.ДатаОкончания.Видимость = Истина;
		Элементы.Дней.ТолькоПросмотр = Истина;
		
		Элементы.РазмерСреднийЗаработок.Видимость = Истина;
		Элементы.СтраницаСреднийЗаработок.Видимость = Истина;
		Элементы.СтраницаНачисления.Видимость = Истина;
		Элементы.СреднийЗаработокИтогРезультат.Видимость = Истина;
		Элементы.НачисленияИтогРезультат.Видимость = Истина;
		
		Элементы.НачисленияДатаНачала.Видимость = Истина;
		Элементы.НачисленияДатаОкончания.Видимость = Истина;
	КонецЕсли;	
		
КонецПроцедуры 

// Функция возвращает коэффициент расчета по методу расчета
//
// Параметры:
//  МетодРасчета  	- СправочникСсылка.МетодыРасчетаОтпуска - Метод Расчета
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ВидыОтпусков - Вид отпуска Расчета
//
&НаСервереБезКонтекста
Функция ВидОтпускаМетодаРасчета(МетодРасчета)
	Возврат МетодРасчета.ВидОтпуска;
КонецФункции // ВидОтпускаМетодаРасчета()

// Функция возвращает коэффициент расчета по методу расчета
//
// Параметры:
//  МетодРасчета  	- СправочникСсылка.МетодыРасчетаОтпуска - Метод Расчета
//
// Возвращаемое значение:
//   Число   - Коэффициент Расчета
//
&НаСервереБезКонтекста
Функция КоэффициентРасчета(МетодРасчета)
	Возврат МетодРасчета.КоэффициентРасчета;
КонецФункции // КоэффициентРасчета()

// Процедура - Рассчитать дни
//
&НаСервере
Процедура РассчитатьДни()
	// Всего дней
	КоличествоДней = ПроведениеРасчетовПоЗарплатеСервер.КоличествоДнейГрафикаРаботы(Объект.ГрафикРаботы, Объект.ДатаНачала, Объект.ДатаОкончания);
	Объект.Дней = ?(Объект.МетодРасчета.РасчетПоРабочимДням, 
	    КоличествоДней.КоличествоДнейРабочий + КоличествоДней.КоличествоДнейПредпраздничный,  
		КоличествоДней.КоличествоДней - КоличествоДней.КоличествоДнейПраздник);	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьСреднийЗаработок(СообщатьОбОшибке = Ложь, Отказ = Ложь)
	// База начислений 
	РезультатСреднийЗаработок = Объект.СреднийЗаработок.Итог("Результат");  
	ИтогКоэффициентРасчета = Объект.СреднийЗаработок.Итог("КоэффициентРасчета"); 	
	
	// Расчет размера 
	РазмерСреднийЗаработок = 0;
	
	Если ИтогКоэффициентРасчета = 0 Тогда 
		Если СообщатьОбОшибке Тогда 
			ТекстСообщения = НСтр("ru = 'Сумма коэффициентов расчета равна нулю. Рсчет среднего заработка невозможен.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.СреднийЗаработок",,Отказ);
		КонецЕсли;	
	Иначе 
		РазмерСреднийЗаработок = РезультатСреднийЗаработок / ИтогКоэффициентРасчета;
	КонецЕсли;
КонецПроцедуры

// Функция - Проверить заполнение метода расчета
// 
// Возвращаемое значение:
//  Истина - ошибок нет
//
&НаСервере
Функция ПроверитьЗаполнениеМетодаРасчета()
	Если НЕ (ЗначениеЗаполнено(Объект.МетодРасчета.НеполныеМесяцы)
		И ЗначениеЗаполнено(Объект.МетодРасчета.ВидРасчета)
		И ЗначениеЗаполнено(Объект.МетодРасчета.КоэффициентРасчета)) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
КонецФункции // ПроверитьЗаполнениеМетодаРасчета()

// Функция возвращает ответ пользователя о возможности записи/отмене проведения документа перед рассчетом
//
// Параметры:
//  Действие  - Строка - действие, при котором выполняется проверка
// Возвращаемое значение:
//   Булево - 
//
&НаКлиенте
Функция ЗаписатьДокументОтменивПроведение()
	Если Объект.Проведен Тогда
		ЗаписатьНаСервере(РежимЗаписиДокумента.ОтменаПроведения);		
	ИначеЕсли Модифицированность 
		Или ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Дата = ДатаДокумента;
		ЗаписатьНаСервере(РежимЗаписиДокумента.Запись);		
	КонецЕсли;	
	
	Возврат Истина;
КонецФункции // ЗаписатьДокументОтменивПроведение()

&НаСервере
Процедура ЗаписатьНаСервере(Режим)
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Записать(Режим);
	ЗначениеВРеквизитФормы(Документ, "Объект");
КонецПроцедуры // ЗаписатьНаСервере()

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьНаСервере()
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьТабличнуюЧасть();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	Модифицированность = Истина;
КонецПроцедуры // ЗаполнитьТабличнуюЧастьНаСервере()

// Процедура рассчитывает табличную часть
//
&НаСервере
Процедура РассчитатьТабличнуюЧастьНаСервере()
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.РассчитатьТабличнуюЧасть(РазмерСреднийЗаработок);
	ЗначениеВРеквизитФормы(Документ, "Объект");
КонецПроцедуры // РассчитатьТабличнуюЧастьНаСервере()

&НаСервере
Процедура ФизЛицоПриИзмененииНаСервере()
	СведенияОСотруднике = ПроведениеРасчетовПоЗарплатеСервер.СведенияОСотруднике(Объект.Дата, Объект.Организация, Объект.ФизЛицо);
	ЗаполнитьЗначенияСвойств(Объект, СведенияОСотруднике, "Подразделение, Должность, ГрафикРаботы");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

