#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет табличную часть
//
Процедура ЗаполнитьТабличнуюЧасть() Экспорт 
	// Определение количества месяцев
	КоличествоМесяцев = МетодРасчета.ВидРасчета.ПериодРасчетаСреднегоЗаработка;
	Если КоличествоМесяцев = 0 Тогда 
		КоличествоМесяцев = 3;
	КонецЕсли;	
	
	НеполныеМесяцы = МетодРасчета.НеполныеМесяцы;
	
	Если НеполныеМесяцы = ПредопределенноеЗначение("Перечисление.НеполныеМесяцы.Отбрасывать") Тогда 
		БазовыйПериодНачало = ДобавитьМесяц(НачалоМесяца(ДатаНачала), - 12);
		БазовыйПериодКонец = НачалоМесяца(ДатаНачала) - 1;
	Иначе 
		БазовыйПериодНачало = ДобавитьМесяц(НачалоМесяца(ДатаНачала), -КоличествоМесяцев);
		БазовыйПериодКонец = НачалоМесяца(ДатаНачала) - 1;
	КонецЕсли;	
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Дата, МЕСЯЦ) КАК ПериодРегистрации,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Дата, МЕСЯЦ) КАК ПериодДействияНачало,
		|	КОНЕЦПЕРИОДА(ТаблицаДокумента.Дата, МЕСЯЦ) КАК ПериодДействияКонец,
		|	&БазовыйПериодНачало,
		|	&БазовыйПериодКонец,
		|	ТаблицаДокумента.МетодРасчета.ВидРасчета КАК ВидРасчета,
		|	ТаблицаДокумента.ФизЛицо,
		|	ТаблицаДокумента.Организация,
		|	ТаблицаДокумента.ГрафикРаботы,
		|	ТаблицаДокумента.Подразделение,
		|	ТаблицаДокумента.Должность
		|ИЗ
		|	Документ.Отпуск КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);	
	Запрос.УстановитьПараметр("БазовыйПериодНачало", БазовыйПериодНачало);	
	Запрос.УстановитьПараметр("БазовыйПериодКонец", БазовыйПериодКонец);	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаНачисления", РезультатЗапроса.Выгрузить());
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьНачисления(ДополнительныеСвойства, Движения, Ложь);

	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
	Ошибки = Неопределено;
	ПроведениеРасчетовПоЗарплатеСервер.ЗаполнитьТабличнуюЧастьСреднийЗаработок(КоличествоМесяцев, БазовыйПериодНачало, БазовыйПериодКонец, 
							ГрафикРаботы, Ссылка, НеполныеМесяцы, СреднийЗаработок, Ошибки);
															
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	СреднийЗаработок.Сортировать("ПериодРегистрации");
	
	ЗаполнитьТабличнуюЧастьСредняяПремия();
	
КонецПроцедуры // ЗаполнитьТабличнуюЧасть()

Процедура ЗаполнитьТабличнуюЧастьСредняяПремия();
	
	КоличествоМесяцевПремии = МетодРасчета.ПериодРасчетаСреднейПремии;
	Если КоличествоМесяцевПремии = 0 Тогда 
		КоличествоМесяцевПремии = 12;
	КонецЕсли;
	НачалоПериода = ДобавитьМесяц(НачалоМесяца(ДатаНачала), -КоличествоМесяцевПремии);
	КонецПериода  = НачалоМесяца(ДатаНачала) - 1;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыРасчета.ВидРасчета КАК ВидРасчета
	|ПОМЕСТИТЬ ВременнаяТаблицаВидыРасчетаПремий
	|ИЗ
	|	&ВидыРасчета КАК ВидыРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Результат КАК Результат,
	|	Начисления.ВидРасчета КАК ВидРасчета
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.ФизЛицо = &ФизЛицо
	|	И Начисления.Организация = &Организация
	|	И Начисления.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Начисления.ВидРасчета В
	|			(ВЫБРАТЬ
	|				ВременнаяТаблицаВидыРасчетаПремий.ВидРасчета
	|			ИЗ
	|				ВременнаяТаблицаВидыРасчетаПремий КАК ВременнаяТаблицаВидыРасчетаПремий)";
	
	Запрос.УстановитьПараметр("ВидыРасчета", МетодРасчета.ВидыРасчета);	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);	
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);	
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);	
	Запрос.УстановитьПараметр("Организация", Организация);	
	
	РезультатЗапроса = Запрос.Выполнить();
	СредняяПремия.Загрузить(РезультатЗапроса.Выгрузить());

КонецПроцедуры

// Выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(МетодРасчета.ВидРасчета) Тогда 
		ТекстСообщения = НСтр("ru = 'Не заполнен вид расчета в методе расчета.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "МетодРасчета", , Отказ);
	КонецЕсли;	
	
КонецПроцедуры

// Процедура заполняет табличную часть по перидам регистрации
//
Процедура ЗаполнитьТабличнуюЧастьСведенияПоОтзывам() 
	СведенияПоОтзывам.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.Дата КАК Дата
		//|ПОМЕСТИТЬ ТаблицаДанныеПроизводственногоКалендаря
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ДанныеПроизводственногоКалендаря.ГрафикРаботы = &ГрафикРаботы
		|	И ДанныеПроизводственногоКалендаря.Год МЕЖДУ &ГодНачалоПериода И &ГодКонецПериода
		|
		//|ИНДЕКСИРОВАТЬ ПО
		//|	Дата
		|";
	Запрос.УстановитьПараметр("ГодНачалоПериода", Год(ДатаНачала));
	Запрос.УстановитьПараметр("ГодКонецПериода", Год(ДатаОкончания));
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", ДатаОкончания);
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ТекущаяДата = Дата(1,1,1);
	
	// Обход выборки
	Пока Выборка.Следующий() Цикл
		// Определение даты начала
		Если НачалоМесяца(ТекущаяДата) = Выборка.Дата
			Или НЕ ТекущаяДата = Выборка.Дата Тогда 
			СтрокаТабличнойЧасти = СведенияПоОтзывам.Добавить();
			СтрокаТабличнойЧасти.ПериодРегистрации = НачалоМесяца(Выборка.Дата);
			СтрокаТабличнойЧасти.ДатаНачала = Выборка.Дата;
			ТекущаяДата = Выборка.Дата;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ДатаОкончания = Выборка.Дата;

		// Увеличение на день
		ТекущаяДата = ТекущаяДата + 86400;
	КонецЦикла; 
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоПериодам()

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеОбъектов.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
	
	ДатаДокумента = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата());
	ДатаНачалаРабочегоГода 	 	= НачалоГода(ДатаДокумента);
	ДатаОкончанияРабочегоГода 	= КонецГода(ДатаДокумента);	
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
 
	Если НЕ МетодРасчета = Справочники.МетодыРасчетаОтпуска.ОтзывИзОтпуска Тогда 
		ВидОтзыва = Перечисления.ВидыОтзывов.ПустаяСсылка();
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьСведенияПоОтзывам();
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.Отпуск.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	//БухгалтерскийУчетСервер.ОтразитьОстаткиДнейОтпуска(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьНачисления(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьВзаиморасчетыССотрудниками(ДополнительныеСвойства, Движения, Отказ); 

	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		
КонецПроцедуры

// В обработчике события ОбработкаПроверкиЗаполнения документа выполняется
// копирование и обнуление проверяемых реквизитов для исключения стандартной
// проверки заполнения платформой и последующей проверки средствами встроенного языка.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
		 
	Если МетодРасчета = Справочники.МетодыРасчетаОтпуска.ОтзывИзОтпуска Тогда
		ПроверяемыеРеквизиты.Добавить("ВидОтзыва");
	КонецЕсли;	

	// Предварительный контроль
	ВыполнитьПредварительныйКонтроль(Отказ);	
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти

#КонецЕсли
