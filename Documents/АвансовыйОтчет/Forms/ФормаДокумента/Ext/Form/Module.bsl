#Область ОбработчикиСлужебные

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервереБезКонтекста
Функция ПолучитьКурсВалютыИзДоговораНаСервере(Договор, Дата)
	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Договор.ВалютаРасчетов, Дата);
КонецФункции

// Установка знанчений счетов учета с контрагентами
//
&НаКлиенте
Процедура ОпределитьСчетаУчетаРасчетовСКонтрагентом(СТЧ = Неопределено)
	
	ДоговорКонтрагента 		= СТЧ.ДоговорКонтрагента;
	СчетаУчета				= БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, СТЧ.Контрагент, СТЧ.ДоговорКонтрагента); 										
	СТЧ.СчетАвансов    		= СчетаУчета.СчетАвансовПоставщика;
	СТЧ.СчетРасчетов    	= СчетаУчета.СчетРасчетовПоставщика;
	Если НЕ ЗначениеЗаполнено(СТЧ.СчетАвансов) Тогда
		СТЧ.СчетАвансов 	= ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.АвансыПоставщикам"); 
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СТЧ.СчетРасчетов) Тогда
		СТЧ.СчетРасчетов 	= ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.СчетаКОплате");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, ИмяТЧ, СТЧ = Неопределено)
	
	Если СТЧ = Неопределено Тогда
		СТЧ = Элементы[ИмяТЧ].ТекущиеДанные;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеСТЧ,	СТЧ);
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, СТЧ);
	ПараметрыОбъекта.Ссылка = Объект.Ссылка;
	ПараметрыОбъекта.ПлательщикНДС = УПП.ПлательщикНДС;
	ПараметрыОбъекта.ПлательщикНСП = УПП.ПлательщикНСП;
	ПараметрыОбъекта.НДСНеПодтвержден = Ложь;
	
	Если ЕстьРеквизитТабличнойЧасти(ИмяТЧ, "ДоговорКонтрагента") И ЗначениеЗаполнено(СТЧ.ДоговорКонтрагента) Тогда
		ЗначСтавкаНДС 	= БухгалтерскийУчетСервер.ПолучитьСтавкуНДСПоДоговору(ДатаДокумента, СТЧ.ДоговорКонтрагента);	
		ЗначСтавкаНСП 	= БухгалтерскийУчетСервер.ПолучитьСтавкуНСППоДоговору(ДатаДокумента, СТЧ.ДоговорКонтрагента);	
		ДанныеСТЧ.ЗначСтавкаНДС = ЗначСтавкаНДС;
		ДанныеСТЧ.ЗначСтавкаНСП = ЗначСтавкаНСП;
	КонецЕсли;	
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьРеквизитТабличнойЧасти(ИмяТЧ, Колонка)
	Возврат НЕ Метаданные.Документы.АвансовыйОтчет.ТабличныеЧасти.Найти(ИмяТЧ).Реквизиты.Найти(Колонка) = Неопределено;
КонецФункции

&НаСервереБезКонтекста
Процедура ПересчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, Изменение);
	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, Изменение);	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКурсВалютыНаСервере(Валюта, Дата)
	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Дата);
КонецФункции

&НаСервереБезКонтекста
Функция ПересчитатьКурсОбмена(Сумма, СуммаОтчета)
	Если Сумма <> 0 И СуммаОтчета <> 0 Тогда
		Возврат Окр(СуммаОтчета / Сумма, 4);	
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

//Установка доступности субконто для существующих строк табличной части
&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
	"СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
	
	Для Каждого СТЧ Из Объект.Услуги Цикл
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СТЧ.СчетУчета, СТЧ, ПоляОбъекта, Истина);
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СТЧ, "СубконтоДт" + "%Индекс%", "СчетУчета");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СТЧ, "СубконтоДт" + "%Индекс%", "УслугиСубконтоДт" + "%Индекс%", ПараметрыДокумента);			
	КонецЦикла;
	
	Для Каждого СТЧ Из Объект.Прочее Цикл
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СТЧ.СчетУчета, СТЧ, ПоляОбъекта, Истина);
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СТЧ, "СубконтоДт" + "%Индекс%", "СчетУчета");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СТЧ, "СубконтоДт" + "%Индекс%", "ПрочееСубконтоДт" + "%Индекс%", ПараметрыДокумента);			
	КонецЦикла;
	
	Для Каждого СТЧ Из Объект.ТоварыУслуги Цикл
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СТЧ.СчетУчета, СТЧ, ПоляОбъекта, Истина);
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СТЧ, "СубконтоДт" + "%Индекс%", "СчетУчета");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СТЧ, "СубконтоДт" + "%Индекс%", "ТоварыУслугиСубконтоДт" + "%Индекс%", ПараметрыДокумента);			
	КонецЦикла;	
	
КонецПроцедуры

// Процедура - Изменить параметры выбора полей субконто
//
// Параметры:
//  Форма	 - 	 - 
//  Суффикс	 - 	 - 
//  ИмяСчета - 	 - 
&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, ИмяТЧ, Суффикс, ИмяСчета)
	
	Если ИмяТЧ = "Услуги" Тогда
		СтрокаТабличнойЧасти = Форма.Элементы.Услуги.ТекущиеДанные;
	ИначеЕсли ИмяТЧ = "Прочее" Тогда
		СтрокаТабличнойЧасти = Форма.Элементы.Прочее.ТекущиеДанные;	
	ИначеЕсли ИмяТЧ = "ТоварыУслуги" Тогда
		СтрокаТабличнойЧасти = Форма.Элементы.ТоварыУслуги.ТекущиеДанные;	
	КонецЕсли;
		
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, "Субконто" + Суффикс + "%Индекс%", ИмяТЧ + "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета",   ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", ДанныеОбъекта.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	БухгалтерскийУчетКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);	
КонецПроцедуры

&НаКлиенте
Функция ИнициализироватьПараметрыОбъекта()

	ПараметрыОбъекта 	= Новый Структура("Организация, 
											|Дата, 
											|Ссылка, 
											|ВалютаДокумента, 
											|КурсВзаиморасчетов, 
											|Склад, 
											|ВидОперации, 
											|ДоговорКонтрагента,
											|НДСНеПодтвержден,
											|ЗначСтавкаНДС, 
											|ЗначСтавкаНСП,
											|ПлательщикНСП,
											|ПлательщикНДС");
		
	Возврат ПараметрыОбъекта;

КонецФункции // ()

&НаКлиенте
Функция ИнициализироватьДанныеСТЧ()

	ДанныеСТЧ = Новый Структура("Номенклатура, 
								|ОсновноеСредство, 
								|Количество, 
								|КоличествоМест, 
								|Емкость, 
								|Цена, 
								|Сумма, 
								|СуммаНДС, 
								|СуммаНСП,
								|СтавкаНДС,								
								|СтавкаНСП,								
								|ЗначСтавкаНДС,
								|ЗначСтавкаНСП,
								|СуммаУч, 
								|СуммаСФ, 
								|Всего, 
								|СчетУчета, 
								|ЕдиницаИзмерения, 
								|СчетАвансов, 
								|СчетРасчетов,
								|СуммаОтклонение");		
											
	Возврат ДанныеСТЧ;

КонецФункции // ()

// Команда заполнения ТЧ на странице Авансы
&НаСервере
Процедура ЗаполнитьАвансыПоОстаткамНаСервере()
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьАвансы(ДатаДокумента);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетФактураНаСервере()

	Объект.СчетФактура.Очистить();
	ТЗ_СчетФактура = Объект.СчетФактура.Выгрузить(); //Создадим временную пустую таблицу значений с аналогичной структурой данных
	
	ТЗТовары = Объект.Товары.Выгрузить();
	ТЗТовары.Свернуть("СтавкаНДС, Контрагент, ДоговорКонтрагента, НомерБланкаСФ, СерияБланкаСФ, Курс", "Всего, СуммаНДС, СуммаНСП");
	
	Для Каждого ТекСтр Из ТЗТовары Цикл 
		Если ТекСтр.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.БезНДС") Тогда
			Продолжить;
		КонецЕсли;	
		СТЧ = ТЗ_СчетФактура.Добавить();
		СТЧ.ДатаВыписки 		= Объект.Дата;
		СТЧ.Контрагент 			= ТекСтр.Контрагент;
		СТЧ.ДоговорКонтрагента 	= ТекСтр.ДоговорКонтрагента;                    
		СТЧ.НомерБланкаСФ		= ТекСтр.НомерБланкаСФ;
		СТЧ.СерияБланкаСФ      	= ТекСтр.СерияБланкаСФ;
		Если  ЗначениеЗаполнено(СТЧ.НомерБланкаСФ) И ЗначениеЗаполнено(СТЧ.СерияБланкаСФ) Тогда
			СТЧ.АвтоЗаполнение          = Истина;
		Иначе
			СТЧ.ПризнакТабличнойЧасти   = "Т";
		КонецЕсли;

		СТЧ.Сумма				= Окр(ТекСтр.Всего * ТекСтр.Курс, 2);
		СТЧ.СуммаНДС			= Окр(ТекСтр.СуммаНДС * ТекСтр.Курс, 2);
		СТЧ.СтавкаНДС			= ТекСтр.СтавкаНДС;		
		СТЧ.СуммаНСП			= Окр(ТекСтр.СуммаНСП * ТекСтр.Курс, 2);
		
	КонецЦикла;

	ТЗТовары = Объект.Услуги.Выгрузить();
	ТЗТовары.Свернуть("СтавкаНДС, Контрагент, ДоговорКонтрагента, НомерБланкаСФ, СерияБланкаСФ, Курс", "Всего, СуммаНДС, СуммаНСП");
		
	Для Каждого ТекСтр Из ТЗТовары Цикл 
		Если ТекСтр.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.БезНДС") Тогда
			Продолжить;
		КонецЕсли;	
		СТЧ = ТЗ_СчетФактура.Добавить();
		СТЧ.ДатаВыписки 		= Объект.Дата;
		СТЧ.Контрагент 			= ТекСтр.Контрагент;
		СТЧ.ДоговорКонтрагента 	= ТекСтр.ДоговорКонтрагента;               
		СТЧ.НомерБланкаСФ		= ТекСтр.НомерБланкаСФ;
		СТЧ.СерияБланкаСФ       = ТекСтр.СерияБланкаСФ;

		Если  ЗначениеЗаполнено(СТЧ.НомерБланкаСФ) И ЗначениеЗаполнено(СТЧ.СерияБланкаСФ) Тогда
			СТЧ.АвтоЗаполнение          = Истина;
		Иначе
			СТЧ.ПризнакТабличнойЧасти   = "У";
		КонецЕсли;
		СТЧ.Сумма				= Окр(ТекСтр.Всего * ТекСтр.Курс, 2);
		СТЧ.СуммаНДС			= Окр(ТекСтр.СуммаНДС * ТекСтр.Курс, 2);
		СТЧ.СтавкаНДС			= ТекСтр.СтавкаНДС;
		СТЧ.СуммаНСП			= Окр(ТекСтр.СуммаНСП * ТекСтр.Курс, 2);
	КонецЦикла;	
	
	ТЗ_СчетФактура.Свернуть("Контрагент, ДоговорКонтрагента, ДатаВыписки, СтавкаНДС, НомерБланкаСФ,Номенклатура, СерияБланкаСФ, ПризнакТабличнойЧасти, АвтоЗаполнение", "Сумма, СуммаНДС, СуммаНСП, СуммаНеоблагаемая");
	ТЗ_СчетФактура.Сортировать("Контрагент, ДоговорКонтрагента, НомерБланкаСФ");
	
	Объект.СчетФактура.Загрузить(ТЗ_СчетФактура);

КонецПроцедуры // ()

&НаСервереБезКонтекста
Функция ЭтоРасчетСКонтрагентом(Дата, Контрагент, СчетРасчетов)
	СуммаОстаток = 0;
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты"));
	ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстаток, 0) КАК СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата, Счет = &СчетРасчетов, &ВидыСубконто, Субконто1 = &Контрагент) КАК ХозрасчетныйОстатки";
	
	Запрос.УстановитьПараметр("ВидыСубконто", 	ВидыСубконто);
	Запрос.УстановитьПараметр("Дата", 			Дата);
	Запрос.УстановитьПараметр("Контрагент", 	Контрагент);
	Запрос.УстановитьПараметр("СчетРасчетов", 	СчетРасчетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СуммаОстаток = ВыборкаДетальныеЗаписи.СуммаОстаток;
	КонецЕсли;
	
	Возврат СуммаОстаток < 0;	

КонецФункции // ЭтоРасчетСКонтрагентом(СтрокаТабличнойЧасти.СчетРасчетов)()

#КонецОбласти

#Область УправлениеВнешнимВидом

// Видимость и доступность всех элементов формы
//
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	// Подсчет количества строк в табличных частях для вывода в наименование страницы.
	Кол_СтраницаАвансы 				= Объект.ДвижениеДенежныхСредств.Количество();
	Кол_СтраницаОплатаПоставщикам 	= Объект.ОплатаПоставщикам.Количество();
	Кол_СтраницаТовары 				= Объект.Товары.Количество();
	Кол_СтраницаУслуги 				= Объект.Услуги.Количество();
	Кол_СтраницаПрочее 				= Объект.Прочее.Количество();
	Кол_СтраницаЗП 					= Объект.ВыплатаЗаработнойПлаты.Количество();
	Кол_Патенты 					= Объект.ТоварыУслуги.Количество();
	Кол_ОбменВалют 					= Объект.ОбменВалют.Количество();
	
	Элементы.СтраницаАвансы.Заголовок 				= "Авансы" + ?(Кол_СтраницаАвансы = 0, "", " (" + Кол_СтраницаАвансы + ")");
	Элементы.СтраницаОплатаПоставщикам.Заголовок 	= "Оплата поставщикам" + ?(Кол_СтраницаОплатаПоставщикам = 0, "", " (" + Кол_СтраницаОплатаПоставщикам + ")");
	Элементы.СтраницаТовары.Заголовок 				= "ТМЗ" + ?(Кол_СтраницаТовары = 0, "", " (" + Кол_СтраницаТовары + ")");
	Элементы.СтраницаУслуги.Заголовок 				= "Услуги" + ?(Кол_СтраницаУслуги = 0, "", " (" + Кол_СтраницаУслуги + ")");
	Элементы.СтраницаПрочее.Заголовок 				= "Прочее" + ?(Кол_СтраницаПрочее = 0, "", " (" + Кол_СтраницаПрочее + ")");
	Элементы.СтраницаВыплатаЗП.Заголовок			= "Выплата ЗП" + ?(Кол_СтраницаЗП = 0, "", " (" + Кол_СтраницаЗП + ")");
	Элементы.СтраницаОбменВалют.Заголовок			= "Обмен валют" + ?(Кол_ОбменВалют = 0, "", " (" + Кол_ОбменВалют + ")");
	Элементы.СтраницаПатенты.Заголовок				= "Патенты" + ?(Кол_Патенты = 0, "", " (" + Кол_Патенты + ")");
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыплатаЗП Тогда
		Элементы.ПоВедомости.Видимость 	= Истина;
		Элементы.Физлицо.Заголовок		= "Подотчетник";
	Иначе 
		Элементы.ПоВедомости.Видимость 	= Ложь;
		Элементы.Физлицо.Заголовок		= "Сотрудник";
	КонецЕсли;	
	Если Объект.ПоВедомости Тогда
		Элементы.ВыплатаЗаработнойПлатыФизЛицо.Видимость 	= Ложь;	
		Элементы.ВыплатаЗаработнойПлатыВедомость.Видимость 	= Истина;
	Иначе
		Элементы.ВыплатаЗаработнойПлатыФизЛицо.Видимость 	= Истина;
		Элементы.ВыплатаЗаработнойПлатыВедомость.Видимость 	= Ложь;
	КонецЕсли;
	
	Элементы.ТоварыСерияБланкаСФ.Видимость = Ложь;
	Элементы.ТоварыНомерБланкаСФ.Видимость = Ложь;	
	Элементы.УслугиСерияБланкаСФ.Видимость = Ложь;
	Элементы.УслугиНомерБланкаСФ.Видимость = Ложь;
	
	Если Объект.СчетаФактуры Тогда
		Элементы.ТоварыСерияБланкаСФ.Видимость = Истина;
		Элементы.ТоварыНомерБланкаСФ.Видимость = Истина;
		Элементы.УслугиСерияБланкаСФ.Видимость = Истина;
		Элементы.УслугиНомерБланкаСФ.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()  

&НаСервере
Процедура УстановитьТекущуюСтраницуЗадатьЗаголовкиСтраниц()
		
	// Подсчет количества строк в табличных частях для вывода в наименование страницы.
	Кол_СтраницаАвансы 				= Объект.ДвижениеДенежныхСредств.Количество();
	Кол_СтраницаОплатаПоставщикам 	= Объект.ОплатаПоставщикам.Количество();
	Кол_СтраницаТовары 				= Объект.Товары.Количество();
	Кол_СтраницаУслуги 				= Объект.Услуги.Количество();
	Кол_СтраницаПрочее 				= Объект.Прочее.Количество();
	Кол_СтраницаЗП 					= Объект.ВыплатаЗаработнойПлаты.Количество();	
	Кол_ОбменВалют 					= Объект.ОбменВалют.Количество();
	Кол_Патенты 					= Объект.ТоварыУслуги.Количество();
	
	Если Кол_СтраницаАвансы <> 0 Тогда		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаАвансы;
	ИначеЕсли Кол_СтраницаОплатаПоставщикам <> 0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОплатаПоставщикам;		
	ИначеЕсли Кол_СтраницаТовары <> 0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТовары;	
	ИначеЕсли Кол_СтраницаУслуги <> 0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУслуги;
	ИначеЕсли Кол_СтраницаПрочее <> 0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПрочее;
	ИначеЕсли Кол_СтраницаЗП <> 0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыплатаЗП;
	ИначеЕсли Кол_ОбменВалют <> 0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбменВалют;
	ИначеЕсли Кол_Патенты <> 0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПатенты;		
	КонецЕсли;

КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	УПП = БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	УстановитьДоступностьСубконто();
	
	УстановитьТекущуюСтраницуЗадатьЗаголовкиСтраниц();
	
	УстановитьВидимостьДоступностьЭлементов();
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ДанныеСТЧ = ИнициализироватьДанныеСТЧ();
	ПараметрыОбъекта = ИнициализироватьПараметрыОбъекта();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьДоступностьСубконто();
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьАвансыПоОстаткам(Команда)
	Если Объект.ДвижениеДенежныхСредств.Количество() > 0 ИЛИ  Объект.ТаблицаДокументов.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьТабличнуюЧастьДвижениеДенежныхСредств", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличные части закладки ""Авансы"" будут очищены! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);	
	Иначе
		ЗаполнитьАвансыПоОстаткамНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСчетФактура(Команда)
	Если Объект.СчетФактура.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьТабличнуюЧастьСчетФактура", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть будет очищены! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);	
	Иначе
		ЗаполнитьСчетФактураНаСервере();
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьТабличнуюЧастьДвижениеДенежныхСредств(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ЗаполнитьАвансыПоОстаткамНаСервере();
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьТабличнуюЧастьСчетФактура(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда	
		ЗаполнитьСчетФактураНаСервере();
    КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетСервер.ПроверитьСуществованиеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ПоВедомостиПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СчетаФактурыПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ФизЛицо", Объект.ФизЛицо);
	ОткрытьФорму("Документ.Командировка.ФормаВыбора", ПараметрыОтбора, ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТабличныхЧастей

&НаКлиенте
Процедура ОплатаПоставщикамКонтрагентПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	СтруктураДоговор 			= БухгалтерскийУчетСервер.ПолучитьДоговорКонтрагента(
								Объект.Организация, 
								СтрокаТабличнойЧасти.Контрагент, 
								ВалютаРегламентированногоУчета, 
								ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	СтрокаТабличнойЧасти.ДоговорКонтрагента 	= СтруктураДоговор.ДоговорКонтрагента;	
	
	ДоговорКонтрагентаПриИзменении("ОплатаПоставщикам", СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.ОплатаРасчеты = ЭтоРасчетСКонтрагентом(ДатаДокумента, СтрокаТабличнойЧасти.Контрагент, СтрокаТабличнойЧасти.СчетРасчетов); // Если Ложь - то Авансы
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКонтрагентПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтруктураДоговор 			= БухгалтерскийУчетСервер.ПолучитьДоговорКонтрагента(
								Объект.Организация, 
								СтрокаТабличнойЧасти.Контрагент, 
								ВалютаРегламентированногоУчета, 
								ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	СтрокаТабличнойЧасти.ДоговорКонтрагента 	= СтруктураДоговор.ДоговорКонтрагента;	
	
	ДоговорКонтрагентаПриИзменении("Товары", СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура УслугиКонтрагентПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	СтруктураДоговор 			= БухгалтерскийУчетСервер.ПолучитьДоговорКонтрагента(
								Объект.Организация, 
								СтрокаТабличнойЧасти.Контрагент, 
								ВалютаРегламентированногоУчета, 
								ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	СтрокаТабличнойЧасти.ДоговорКонтрагента 	= СтруктураДоговор.ДоговорКонтрагента;	
	
	ДоговорКонтрагентаПриИзменении("Услуги", СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамДоговорКонтрагентаПриИзменении(Элемент)
	СТЧ = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	КурсСтруктура 		= ПолучитьКурсВалютыИзДоговораНаСервере(СТЧ.ДоговорКонтрагента, Объект.Дата);
	СТЧ.Курс 			= КурсСтруктура.Курс;
	СТЧ.Валюта 			= КурсСтруктура.Валюта;

	ОпределитьСчетаУчетаРасчетовСКонтрагентом(СТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамСделкаПриИзменении(Элемент)
	СТЧ = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	СТЧ.Сумма = ОплатаПоставщикамСделкаПриИзмененииНаСервере(СТЧ.Сделка);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОплатаПоставщикамСделкаПриИзмененииНаСервере(Ссылка)
	Возврат Ссылка.СуммаДокумента;
КонецФункции

&НаКлиенте
Процедура ТоварыДоговорКонтрагентаПриИзменении(Элемент)
	СТЧ 			= Элементы.Товары.ТекущиеДанные;
	ДоговорКонтрагентаПриИзменении("Товары", СТЧ);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(ТабличнаяЧасть, СТЧ)
	ДанныеДоговора 	= БухгалтерскийУчетВызовСервераПовтИсп.ДанныеДоговора(СТЧ.ДоговорКонтрагента);
	ЗначСтавкаНДС 	= БухгалтерскийУчетСервер.ПолучитьСтавкуНДСПоДоговору(ДатаДокумента, СТЧ.ДоговорКонтрагента);
	ЗначСтавкаНСП 	= БухгалтерскийУчетСервер.ПолучитьСтавкуНСППоДоговору(ДатаДокумента, СТЧ.ДоговорКонтрагента);	
	КурсСтруктура 		= ПолучитьКурсВалютыИзДоговораНаСервере(СТЧ.ДоговорКонтрагента, ДатаДокумента);
	СТЧ.Курс 			= КурсСтруктура.Курс;
	СТЧ.Валюта 			= КурсСтруктура.Валюта;

	ОпределитьСчетаУчетаРасчетовСКонтрагентом(СТЧ);
	     
	ПараметрыОбъекта 	= ИнициализироватьПараметрыОбъекта();
	ДанныеСТЧ 			= ИнициализироватьДанныеСТЧ();
	Если ТабличнаяЧасть = "Товары" Тогда
		СТЧ.СтавкаНДС   = ДанныеДоговора.СтавкаНДС;
		СТЧ.СтавкаНСП   = ДанныеДоговора.СтавкаНСП;
		ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары", СТЧ);
		ПриИзмененииНоменклатурыТЧ(ДанныеСТЧ, ПараметрыОбъекта);
		ЗаполнитьЗначенияСвойств(СТЧ, ДанныеСТЧ);
	ИначеЕсли ТабличнаяЧасть = "Услуги" Тогда
		СТЧ.СтавкаНДС   = ДанныеДоговора.СтавкаНДС;
		СТЧ.СтавкаНСП   = ДанныеДоговора.СтавкаНСП;		
		ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Услуги", СТЧ);
		ПриИзмененииНоменклатурыТЧУслугиПрочее(ДанныеСТЧ, ПараметрыОбъекта);
		ЗаполнитьЗначенияСвойств(СТЧ, ДанныеСТЧ);			
	КонецЕсли;

КонецПроцедуры // ДоговорКонтрагентаПриИзменении(Элемент)

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		СТЧ 			= Элементы.Товары.ТекущиеДанные;	
		СТЧ.СчетУчета		= ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами");
		ЗначСтавкаНДС 	= 0;
		ЗначСтавкаНСП 	= 0;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	// Подготовка и заполнение структуры колонок ТЧ
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары");
	
	// Общая процедура отработки изменения номенклатуры в ТЧ
	ПриИзмененииНоменклатурыТЧ(ДанныеСТЧ, ПараметрыОбъекта);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСТЧ);
	РассчитатьСуммыОбщие();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриИзмененииНоменклатурыТЧ(ДанныеСТЧ, ПараметрыОбъекта)
	
	ОбработкаТабличныхЧастейВызовСервера.ЗаполнитьСчетУчетаСтрокиТабличнойЧасти(ДанныеСТЧ, ПараметрыОбъекта);
	
	ОбработкаТабличныхЧастейВызовСервера.ЗаполнитьЦенуСтрокиТабличнойЧасти(ДанныеСТЧ, ПараметрыОбъекта);
	// Расчет по строке от цены-количества
	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "Цена");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриИзмененииНоменклатурыТЧУслугиПрочее(ДанныеСТЧ, ПараметрыОбъекта)
	
	ОбработкаТабличныхЧастейВызовСервера.ЗаполнитьСчетУчетаСтрокиТабличнойЧасти(ДанныеСТЧ, ПараметрыОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыОбщие()
	
	СуммаОплатаПоставщикам 	= Объект.ОплатаПоставщикам.Итог("Сумма");
	СуммаТовары 			= Объект.Товары.Итог("Всего");	
	СуммаУслуги 			= Объект.Услуги.Итог("Всего");
	СуммаПрочее 			= Объект.Прочее.Итог("Сумма");
	СуммаВыплатаЗП 			= Объект.Прочее.Итог("Сумма");
	СуммаТоварыУслуги		= Объект.ТоварыУслуги.Итог("Всего");
	
	СуммаДокумента         	= 
		СуммаОплатаПоставщикам 	+
		СуммаТовары 			+	
		СуммаУслуги 			+
		СуммаПрочее 			+
		СуммаВыплатаЗП          +
		СуммаТоварыУслуги		;	
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	
	// Подготовка и заполнение структуры колонок ТЧ
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары");

	ПересчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "Сумма");
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеСТЧ);		
	РассчитатьСуммыОбщие();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	
	// Подготовка и заполнение структуры колонок ТЧ
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары");

	ПересчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "Сумма");
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеСТЧ);		
	РассчитатьСуммыОбщие();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)	
	// Подготовка и заполнение структуры колонок ТЧ
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары");

	ПересчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "Сумма");
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеСТЧ);		
	РассчитатьСуммыОбщие();
КонецПроцедуры

&НаКлиенте
Процедура УслугиДоговорКонтрагентаПриИзменении(Элемент)
	СТЧ 			= Элементы.Услуги.ТекущиеДанные;
	ДоговорКонтрагентаПриИзменении("Услуги", СТЧ);
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	// Подготовка и заполнение структуры колонок ТЧ
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Услуги");
	
	// Общая процедура отработки изменения номенклатуры в ТЧ
	ПриИзмененииНоменклатурыТЧУслугиПрочее(ДанныеСТЧ, ПараметрыОбъекта);
	ЗаполнитьЗначенияСвойств(Элементы.Услуги.ТекущиеДанные, ДанныеСТЧ);
	РассчитатьСуммыОбщие();
КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетУчетаПриИзменении(Элемент)

	СТЧ = Элементы.Услуги.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СТЧ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДт1", "СубконтоДт2", "СубконтоДт3");

	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СТЧ.СчетУчета, СТЧ, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Услуги", "Дт", "СчетУчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееНоменклатураПриИзменении(Элемент)
	// Подготовка и заполнение структуры колонок ТЧ
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Прочее");
	
	// Общая процедура отработки изменения номенклатуры в ТЧ
	ПриИзмененииНоменклатурыТЧУслугиПрочее(ДанныеСТЧ, ПараметрыОбъекта);
	ЗаполнитьЗначенияСвойств(Элементы.Прочее.ТекущиеДанные, ДанныеСТЧ);
	РассчитатьСуммыОбщие();
	
	ПрочееСчетУчетаПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСчетУчетаПриИзменении(Элемент)

	СТЧ = Элементы.Прочее.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СТЧ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДт1", "СубконтоДт2", "СубконтоДт3");

	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СТЧ.СчетУчета, СТЧ, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Прочее", "Дт", "СчетУчета");

КонецПроцедуры

&НаКлиенте
Процедура ПрочееВалютаПриИзменении(Элемент)
	СТЧ 				= Элементы.Прочее.ТекущиеДанные;
	КурсСтруктура 		= ПолучитьКурсВалютыНаСервере(СТЧ.Валюта, ДатаДокумента);
	СТЧ.Курс 			= КурсСтруктура.Курс;
КонецПроцедуры

&НаКлиенте
Процедура ДвижениеДенежныхСредствПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПрочееПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДвижениеДенежныхСредствПослеУдаления(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамПослеУдаления(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПрочееПослеУдаления(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьПриИзменении(Элемент)
	СТЧ = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
	Если ЗначениеЗаполнено(СТЧ.Ведомость) Тогда
		ВыплатаЗаработнойПлатыВедомостьПриИзмененииНаСервере(Объект.ПоВедомости, СТЧ.Ведомость, СТЧ.Сумма);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыплатаЗаработнойПлатыВедомостьПриИзмененииНаСервере(ПоВедомости, Ведомость, Сумма)
	Если ПоВедомости Тогда
		Сумма = Ведомость.Зарплата.Итог("СуммаКВыплате");	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	// Подготовка и заполнение структуры колонок ТЧ
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Услуги");

	ПересчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "Сумма"); 
	ЗаполнитьЗначенияСвойств(Элементы.Услуги.ТекущиеДанные, ДанныеСТЧ);		
	РассчитатьСуммыОбщие();

КонецПроцедуры

&НаКлиенте
Процедура ВладельцыПатентовПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока_ВладельцыПатентов = Элементы.ВладельцыПатентов.ТекущиеДанные;
	Если ТекущаяСтрока_ВладельцыПатентов <> Неопределено 
		И ТекущаяСтрока_ВладельцыПатентов.Контрагент <> Неопределено 
		И ТекущаяСтрока_ВладельцыПатентов.Контрагент <> "" Тогда
		
		ОтборСтрок = Новый ФиксированнаяСтруктура("Контрагент", ТекущаяСтрока_ВладельцыПатентов.Контрагент);
		Элементы.ТоварыУслуги.ОтборСтрок = ОтборСтрок;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	СТЧ_Патенты = Элементы.ВладельцыПатентов.ТекущиеДанные;
	Если НоваяСтрока Тогда
		НоваяСтрокаТоварыУслуги				= Элемент.ТекущиеДанные;
		НоваяСтрокаТоварыУслуги.Контрагент 	= СТЧ_Патенты.Контрагент;
	    НоваяСтрокаТоварыУслуги.ИНН 		= СТЧ_Патенты.ИНН;
		НоваяСтрокаТоварыУслуги.Валюта 		= ВалютаРегламентированногоУчета;
		
		СтруктураКурса 						= ПолучитьКурсВалютыНаСервере(ВалютаРегламентированногоУчета, Объект.Дата);
		НоваяСтрокаТоварыУслуги.Курс 		= СтруктураКурса.Курс;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиСчетУчетаПриИзменении(Элемент)

	СТЧ = Элементы.ТоварыУслуги.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СТЧ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если БухгалтерскийУчетВызовСервераПовтИсп.ЕстьСубконто(СТЧ.СчетУчета, ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура")) Тогда	
		СТЧ.ЕстьСубконтоНоменклатура = Истина;	
	Иначе
		СТЧ.ЕстьСубконтоНоменклатура = Ложь;
	КонецЕсли;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДт1", "СубконтоДт2", "СубконтоДт3");

	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СТЧ.СчетУчета, СТЧ, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ТоварыУслуги", "Дт", "СчетУчета");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиВалютаПриИзменении(Элемент)
	СТЧ 			= Элементы.ТоварыУслуги.ТекущиеДанные;
	СтруктураКурса 	= ПолучитьКурсВалютыНаСервере(СТЧ.Валюта, Объект.Дата);
	СТЧ.Курс 		= СтруктураКурса.Курс;
КонецПроцедуры

&НаКлиенте
Процедура ОбменВалютСуммаПриИзменении(Элемент)
	СТЧ 			= Элементы.ОбменВалют.ТекущиеДанные;	
	СТЧ.КурсОтчета 	= ПересчитатьКурсОбмена(СТЧ.Сумма, СТЧ.СуммаОтчета);
КонецПроцедуры

&НаКлиенте
Процедура ОбменВалютСуммаОтчетаПриИзменении(Элемент)
	СТЧ 			= Элементы.ОбменВалют.ТекущиеДанные;	
	СТЧ.КурсОтчета 	= ПересчитатьКурсОбмена(СТЧ.Сумма, СТЧ.СуммаОтчета);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДт1ПриИзменении(Элемент)
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Услуги", "Дт", "СчетУчета");
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоДт", 1, "СчетУчета", СтрокаТабличнойЧасти, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоДт", 2, "СчетУчета", СтрокаТабличнойЧасти, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоДт", 3, "СчетУчета", СтрокаТабличнойЧасти, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоДт1ПриИзменении(Элемент)
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Прочее", "Дт", "СчетУчета");
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоДт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоДт", 1, "СчетУчета", СтрокаТабличнойЧасти, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоДт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоДт", 2, "СчетУчета", СтрокаТабличнойЧасти, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоДт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоДт", 3, "СчетУчета", СтрокаТабличнойЧасти, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиСубконтоДт1ПриИзменении(Элемент)
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ТоварыУслуги", "Дт", "СчетУчета");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиСубконтоДт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.ТоварыУслуги.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоДт", 1, "СчетУчета", СтрокаТабличнойЧасти, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиСубконтоДт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.ТоварыУслуги.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоДт", 2, "СчетУчета", СтрокаТабличнойЧасти, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиСубконтоДт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.ТоварыУслуги.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоДт", 3, "СчетУчета", СтрокаТабличнойЧасти, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТоварыУслуги.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	
	// Подготовка и заполнение структуры колонок ТЧ
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "ТоварыУслуги");

	ЗаполнитьЗначенияСвойств(Элементы.ТоварыУслуги.ТекущиеДанные, ДанныеСТЧ);		
	РассчитатьСуммыОбщие();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТоварыУслуги.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	
	// Подготовка и заполнение структуры колонок ТЧ
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "ТоварыУслуги");

	ЗаполнитьЗначенияСвойств(Элементы.ТоварыУслуги.ТекущиеДанные, ДанныеСТЧ);		
	РассчитатьСуммыОбщие();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти


