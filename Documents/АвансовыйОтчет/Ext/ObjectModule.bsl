#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

Функция ФизЛицоКомандировки(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КомандировкаСотрудники.ФизЛицо
		|ИЗ
		|	Документ.Командировка.Сотрудники КАК КомандировкаСотрудники
		|ГДЕ
		|	КомандировкаСотрудники.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	КомандировкаСотрудники.ФизЛицо";
	
	Запрос.Параметры.Вставить("Ссылка", ДокументСсылка);	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.ФизЛицо;
	Иначе	
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;	

КонецФункции // ()

Функция ИнициализироватьДанныеДокумента()
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("СуммаДокумента", 	0);
	СтруктураВозврата.Вставить("Документ", 			Неопределено);
	СтруктураВозврата.Вставить("ВалютаДокумента", 	Неопределено);
	СтруктураВозврата.Вставить("Сумма", 			0);
	
	Возврат СтруктураВозврата;

КонецФункции // ИнициализироватьДанныеДокумента()

Процедура ЗаполнитьАвансы(ДатаДокумента) Экспорт
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СчетРасчета",		СчетУчета); 
	Запрос.УстановитьПараметр("СчетРасчетаПара",	СчетУчета.ПарныйСчет);
	Запрос.УстановитьПараметр("Сотрудник",      	ФизЛицо);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ДатаИтогов", 		ДатаДокумента+1);
	Запрос.УстановитьПараметр("Ссылка",				Ссылка);
	Запрос.УстановитьПараметр("ДатаКонОстатков",	ДатаДокумента+1);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	ВалютаРегламентированногоУчета);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АвансовыйОтчетОплатаПоставщикам.Валюта КАК Валюта,
	|	СУММА(АвансовыйОтчетОплатаПоставщикам.Сумма) КАК СуммаВсего
	|ПОМЕСТИТЬ ВТОплата
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчетОплатаПоставщикам
	|ГДЕ
	|	АвансовыйОтчетОплатаПоставщикам.Ссылка.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетОплатаПоставщикам.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчетУслуги.Валюта,
	|	СУММА(АвансовыйОтчетУслуги.Всего)
	|ИЗ
	|	Документ.АвансовыйОтчет.Услуги КАК АвансовыйОтчетУслуги
	|ГДЕ
	|	АвансовыйОтчетУслуги.Ссылка.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетУслуги.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчетТовары.Валюта,
	|	СУММА(АвансовыйОтчетТовары.Всего)
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
	|ГДЕ
	|	АвансовыйОтчетТовары.Ссылка.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетТовары.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчетТоварыУслуги.Валюта,
	|	СУММА(АвансовыйОтчетТоварыУслуги.Всего)
	|ИЗ
	|	Документ.АвансовыйОтчет.ТоварыУслуги КАК АвансовыйОтчетТоварыУслуги
	|ГДЕ
	|	АвансовыйОтчетТоварыУслуги.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетТоварыУслуги.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчетПрочее.Валюта,
	|	СУММА(АвансовыйОтчетПрочее.Сумма)
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
	|ГДЕ
	|	АвансовыйОтчетПрочее.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетПрочее.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ВалютаРегламентированногоУчета,
	|	АвансовыйОтчетВыплатаЗаработнойПлаты.Сумма
	|ИЗ
	|	Документ.АвансовыйОтчет.ВыплатаЗаработнойПлаты КАК АвансовыйОтчетВыплатаЗаработнойПлаты
	|ГДЕ
	|	АвансовыйОтчетВыплатаЗаработнойПлаты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстаток КАК ВалютнаяСуммаОстаток,
	|	&ВалютаРегламентированногоУчета КАК Валюта,
	|	0 КАК Выдано,
	|	0 КАК Расход,
	|	0 КАК Приход,
	|	0 КАК КонОстаток,
	|	0 КАК СуммаВсего
	|ПОМЕСТИТЬ ВТСборка
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаИтогов,
	|			Счет = &СчетРасчета,
	|			,
	|			Организация = &Организация
	|				И Субконто1 = &Сотрудник) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	АвансовыйОтчетОбменВалют.Валюта,
	|	0,
	|	СУММА(АвансовыйОтчетОбменВалют.Сумма),
	|	0,
	|	0,
	|	0
	|ИЗ
	|	Документ.АвансовыйОтчет.ОбменВалют КАК АвансовыйОтчетОбменВалют
	|ГДЕ
	|	АвансовыйОтчетОбменВалют.Ссылка.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетОбменВалют.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	АвансовыйОтчетОбменВалют.ВалютаОтчета,
	|	0,
	|	0,
	|	СУММА(АвансовыйОтчетОбменВалют.СуммаОтчета),
	|	0,
	|	0
	|ИЗ
	|	Документ.АвансовыйОтчет.ОбменВалют КАК АвансовыйОтчетОбменВалют
	|ГДЕ
	|	АвансовыйОтчетОбменВалют.Ссылка.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетОбменВалют.ВалютаОтчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	&ВалютаРегламентированногоУчета,
	|	0,
	|	0,
	|	0,
	|	ХозрасчетныйОстатки.СуммаОстаток,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаКонОстатков,
	|			Счет = &СчетРасчета,
	|			,
	|			Организация = &Организация
	|				И Субконто1 = &Сотрудник) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ВТОплата.Валюта,
	|	0,
	|	0,
	|	0,
	|	0,
	|	СУММА(ВТОплата.СуммаВсего)
	|ИЗ
	|	ВТОплата КАК ВТОплата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТОплата.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстаток,
	|	&ВалютаРегламентированногоУчета,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаИтогов,
	|			Счет = &СчетРасчетаПара,
	|			,
	|			Организация = &Организация
	|				И Субконто1 = &Сотрудник) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстаток,
	|	&ВалютаРегламентированногоУчета,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаКонОстатков,
	|			Счет = &СчетРасчетаПара,
	|			,
	|			Организация = &Организация
	|				И Субконто1 = &Сотрудник) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТСборка.ВалютнаяСуммаОстаток) КАК ОстатокНаНачало,
	|	ВТСборка.Валюта,
	|	СУММА(ВТСборка.Выдано) КАК Выдано,
	|	СУММА(ВТСборка.Расход) КАК ОбменРасход,
	|	СУММА(ВТСборка.Приход) КАК ОбменПриход,
	|	СУММА(ВТСборка.КонОстаток) КАК ОстатокНаКонец,
	|	СУММА(ВТСборка.СуммаВсего) КАК Израсходовано
	|ИЗ
	|	ВТСборка КАК ВТСборка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСборка.Валюта";	
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ДвижениеДенежныхСредств.Очистить();
	ТаблицаДокументов.Очистить();
	
	Пока Выборка.Следующий() Цикл // Заполняем данными таблицу ДвижениеДенежныхСредств
		НоваяСтрока = ДвижениеДенежныхСредств.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Итого =  Выборка.ОстатокНаНачало 
							- ?(Выборка.ОбменРасход <> 0, Выборка.ОбменРасход, 0) 
							+ ?(Выборка.ОбменПриход <> 0, Выборка.ОбменПриход, 0);
	КонецЦикла;
		
	//формируем таблицы документов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АвансовыйОтчетТаблицаДокументов.ДокументОплаты
	|ПОМЕСТИТЬ ВременнаяТаблицаФильтр
	|ИЗ
	|	Документ.АвансовыйОтчет.ТаблицаДокументов КАК АвансовыйОтчетТаблицаДокументов
	|ГДЕ
	|	АвансовыйОтчетТаблицаДокументов.Ссылка.Организация = &Организация
	|	И АвансовыйОтчетТаблицаДокументов.Ссылка.Дата МЕЖДУ &ДатаН И &ДатаК
	|	И НЕ АвансовыйОтчетТаблицаДокументов.Ссылка.ПометкаУдаления
	|	И АвансовыйОтчетТаблицаДокументов.СуммаДокумента > ВЫБОР
	|			КОГДА АвансовыйОтчетТаблицаДокументов.Остаток < 0
	|				ТОГДА -АвансовыйОтчетТаблицаДокументов.Остаток
	|			ИНАЧЕ АвансовыйОтчетТаблицаДокументов.Остаток
	|		КОНЕЦ
	|	И АвансовыйОтчетТаблицаДокументов.Остаток < 0
	|	И АвансовыйОтчетТаблицаДокументов.Ссылка.ФизЛицо = &Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.СуммаДокумента КАК СуммаДокумента,
	|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
	|	РасходныйКассовыйОрдер.ВалютаДенежныхСредств КАК ВалютаДокумента,
	|	РасходныйКассовыйОрдер.СуммаДокумента КАК Сумма
	|ПОМЕСТИТЬ ВременнаяТаблицаДокументов
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И РасходныйКассовыйОрдер.Проведен = ИСТИНА
	|	И РасходныйКассовыйОрдер.Дата МЕЖДУ &ДатаН И &ДатаК
	|	И РасходныйКассовыйОрдер.ФизЛицо = &Физлицо
	|	И РасходныйКассовыйОрдер.Организация = &Организация
	|	И РасходныйКассовыйОрдер.Операция.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыдачаПодотчетнику)
	|	И НЕ РасходныйКассовыйОрдер.Ссылка В
	|				(ВЫБРАТЬ
	|					ТаблицаФильтр.ДокументОплаты
	|				ИЗ
	|					ВременнаяТаблицаФильтр КАК ТаблицаФильтр)
	|  И РасходныйКассовыйОрдер.ДокументОснование = &ДокументОснование
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПлатежноеПоручениеИсходящее.СуммаДокумента,
	|	ПлатежноеПоручениеИсходящее.Ссылка,
	|	ПлатежноеПоручениеИсходящее.ВалютаДенежныхСредств,
	|	ПлатежноеПоручениеИсходящее.СуммаДокумента
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.ПометкаУдаления = ЛОЖЬ
	|	И ПлатежноеПоручениеИсходящее.Проведен = ИСТИНА
	|	И ПлатежноеПоручениеИсходящее.Дата МЕЖДУ &ДатаН И &ДатаК
	|	И ПлатежноеПоручениеИсходящее.ФизЛицо = &Физлицо
	|	И ПлатежноеПоручениеИсходящее.Организация = &Организация
	|	И ПлатежноеПоручениеИсходящее.Операция.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИ.ВыдачаПодотчетнику)
	|	И НЕ ПлатежноеПоручениеИсходящее.Ссылка В
	|				(ВЫБРАТЬ
	|					ТаблицаФильтр.ДокументОплаты
	|				ИЗ
	|					ВременнаяТаблицаФильтр КАК ТаблицаФильтр)
	|  И ПлатежноеПоручениеИсходящее.ДокументОснование = &ДокументОснование
	|	
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.СуммаДокумента,
	|	ПриходныйКассовыйОрдер.Ссылка,
	|	ПриходныйКассовыйОрдер.ВалютаДенежныхСредств,
	|	ПриходныйКассовыйОрдер.СуммаДокумента
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И ПриходныйКассовыйОрдер.Проведен = ИСТИНА
	|	И ПриходныйКассовыйОрдер.Дата МЕЖДУ &ДатаН И &ДатаК
	|	И ПриходныйКассовыйОрдер.ФизЛицо = &Физлицо
	|	И ПриходныйКассовыйОрдер.Организация = &Организация
	|	И ПриходныйКассовыйОрдер.Операция.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ВозвратОтПодотчетника)
	|	И НЕ ПриходныйКассовыйОрдер.Ссылка В
	|				(ВЫБРАТЬ
	|					ТаблицаФильтр.ДокументОплаты
	|				ИЗ
	|					ВременнаяТаблицаФильтр КАК ТаблицаФильтр)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.СуммаДокумента,
	|	ТаблицаДокументов.Ссылка КАК Документ,
	|	ТаблицаДокументов.ВалютаДокумента КАК ВалютаДокумента,
	|	ТаблицаДокументов.Сумма
	|ИЗ
	|	ВременнаяТаблицаДокументов КАК ТаблицаДокументов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокументов.Ссылка.Дата УБЫВ,
	|	ВалютаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФильтр.ДокументОплаты
	|ПОМЕСТИТЬ ВременнаяТаблицаФильтрИзМенеджера
	|ИЗ
	|	ВременнаяТаблицаФильтр КАК ТаблицаФильтр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(АвансовыйДДС.ОстатокНаКонец) КАК Сумма,
	|	АвансовыйДДС.Ссылка КАК Документ,
	|	СУММА(АвансовыйДДС.Ссылка.СуммаДокумента) КАК СуммаДокумента,
	|	АвансовыйДДС.Валюта КАК ВалютаДокумента,
	|	АвансовыйДДС.Ссылка.ФизЛицо КАК ФизЛицо
	|ИЗ
	|	Документ.АвансовыйОтчет.ДвижениеДенежныхСредств КАК АвансовыйДДС
	|ГДЕ
	|	АвансовыйДДС.Ссылка.Проведен
	|	И НЕ АвансовыйДДС.Ссылка.ПометкаУдаления
	|	И АвансовыйДДС.Ссылка.Организация = &Организация
	|	И АвансовыйДДС.Ссылка.ФизЛицо = &Физлицо
	|	И АвансовыйДДС.Ссылка <> &Ссылка
	|	И АвансовыйДДС.Ссылка.Дата МЕЖДУ &ДатаН И &ДатаК
	|	И АвансовыйДДС.ОстатокНаКонец < 0
	|	И НЕ АвансовыйДДС.Ссылка В
	|				(ВЫБРАТЬ
	|					ТаблицаФильтр.ДокументОплаты
	|				ИЗ
	|					ВременнаяТаблицаФильтр КАК ТаблицаФильтр)
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйДДС.Ссылка,
	|	АвансовыйДДС.Валюта,
	|	АвансовыйДДС.Ссылка.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	АвансовыйДДС.Ссылка.Дата УБЫВ" ;
	
	Запрос.УстановитьПараметр("СчетРасчета", 		СчетУчета);
	Запрос.УстановитьПараметр("СчетРасчетаПара",	СчетУчета.ПарныйСчет);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("Физлицо",			ФизЛицо);
	Запрос.УстановитьПараметр("Ссылка", 			Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", 	ДокументОснование);
	Запрос.УстановитьПараметр("ДатаК",				?(ОтборПлатежныхДокументовНаМоментВремениДокумента, ДатаДокумента, КонецДня(ДатаДокумента)));
	
	ДатаН_РКО = НачалоМесяца(ДобавитьМесяц(ДатаДокумента, -2));
	ДатаН_РКО = ?(Год(ДатаН_РКО) = Год(ДатаДокумента), ДатаН_РКО, НачалоГода(ДатаДокумента));	
	Запрос.УстановитьПараметр("ДатаН",				ДатаН_РКО);

	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РасходныйКассовыйОрдер.ДокументОснование = &ДокументОснование", "");	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПлатежноеПоручениеИсходящее.ДокументОснование = &ДокументОснование", "");	
	КонецЕсли;
	РезультатЗапроса 		= Запрос.ВыполнитьПакет();
	ВыборкаРКО 				= РезультатЗапроса[2].Выбрать();
	ВыборкаДокиПерерасход	= РезультатЗапроса[4].Выбрать();
	
	Остатки = ДвижениеДенежныхСредств.Выгрузить();
	
	МассивАО = Новый Массив();
	СуммаРКО = 0;
	ДанныеДокумента = ИнициализироватьДанныеДокумента();
	
	Для Каждого СТЧРКО из  Остатки Цикл // обходим все Остатки
		Пока ВыборкаРКО.Следующий() Цикл
			Осталось = СТЧРКО.ОстатокНаНачало;
			Если СТЧРКО.Валюта = ВыборкаРКО.ВалютаДокумента Тогда 
				Если СТЧРКО.ОстатокНаНачало > ВыборкаРКО.Сумма Тогда 
					СуммаРКО = СуммаРКО + ВыборкаРКО.СуммаДокумента;
					ДанныеДокумента = ИнициализироватьДанныеДокумента();
					ЗаполнитьЗначенияСвойств(ДанныеДокумента, ВыборкаРКО);
					МассивАО.Добавить(ДанныеДокумента);
					Если Осталось <= СуммаРКО Тогда  // если набрали документы на сумму остатка тогда прерываем
						Прервать;	
					КонецЕсли;
				Иначе 
					СуммаРКО = СуммаРКО + ВыборкаРКО.СуммаДокумента;
					ЗаполнитьЗначенияСвойств(ДанныеДокумента, ВыборкаРКО);
					МассивАО.Добавить(ДанныеДокумента);
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		ВыборкаРКО.Сбросить();
		
	КонецЦикла;
		
	// Выборка документов АО по которым случился перерасход,
	// так как докуметы с одним   не погашеным, перерасходом будут ссылаться друг на друга достаточно взять последний документ.
	Для Каждого СТЧОст Из Остатки Цикл 		
		Пока ВыборкаДокиПерерасход.Следующий() Цикл
			Осталось = СТЧРКО.ОстатокНаНачало;
			Если СТЧОст.валюта = ВыборкаДокиПерерасход.ВалютаДокумента Тогда 
				Если СТЧОст.ОстатокНаНачало > ВыборкаДокиПерерасход.СуммаДокумента Тогда 
					СуммаРКО = СуммаРКО + ВыборкаДокиПерерасход.СуммаДокумента;
					ЗаполнитьЗначенияСвойств(ДанныеДокумента, ВыборкаДокиПерерасход);
					МассивАО.Добавить(ДанныеДокумента);					
					Если Осталось <= СуммаРКО Тогда  // если набрали документы на сумму остатка тогда прерываем
						Прервать;	
					КонецЕсли;
					
				Иначе 
					СуммаРКО = СуммаРКО + ВыборкаДокиПерерасход.СуммаДокумента;
					ЗаполнитьЗначенияСвойств(ДанныеДокумента, ВыборкаДокиПерерасход);
					МассивАО.Добавить(ДанныеДокумента);	
					Прервать;					
				КонецЕсли;
			КонецЕсли;		
		КонецЦикла;
		ВыборкаДокиПерерасход.Сбросить();
		
	КонецЦикла;
		
	// Выборка перерасход.		
	Для Каждого ЭМ из МассивАО Цикл //Выносим в таблицу документы которые попали по суммам
		СтрокаТЧ = ТаблицаДокументов.Добавить();
		СтрокаТЧ.ДокументОплаты =  ЭМ.Документ ;
		СтрокаТЧ.Остаток  		 =  ЭМ.Сумма;
		СтрокаТЧ.СуммаДокумента  =  ЭМ.СуммаДокумента;
		СтрокаТЧ.Валюта   		 =  ЭМ.ВалютаДокумента;
	КонецЦикла;
	
	//Проставим остатки
	Для Каждого СТЧОстатки Из ДвижениеДенежныхСредств Цикл
		Остаток = СТЧОстатки.ОстатокНаНачало;
		Если Остаток = 0 тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СТЧ Из ТаблицаДокументов Цикл 
			Если ТипЗнч(СТЧ.ДокументОплаты) <> ТипЗнч(Документы.АвансовыйОтчет.ПустаяСсылка()) и ТаблицаДокументов.Итог("Остаток") = СТЧОстатки.ОстатокНаНачало Тогда
				Если СТЧОстатки.Валюта = СТЧ.Валюта Тогда 
					Если ВыборкаДокиПерерасход.Количество() = 0 Тогда
						если не Остаток < 0 Тогда
							СТЧ.Остаток = ?(Остаток >= СТЧ.СуммаДокумента, СТЧ.СуммаДокумента, Остаток);
							Остаток = Остаток - СТЧ.СуммаДокумента;
						иначе
							СТЧ.Остаток = СТЧ.СуммаДокумента;
							Остаток = Остаток + СТЧ.СуммаДокумента;
						КонецЕсли;
					иначе
						если не Остаток < 0 Тогда
							СТЧ.Остаток =  СТЧ.СуммаДокумента;
							Остаток = Остаток - СТЧ.СуммаДокумента;
						иначе
							СТЧ.Остаток = СТЧ.СуммаДокумента;
							Остаток = Остаток + СТЧ.СуммаДокумента;
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(СТЧ.ДокументОплаты) <> ТипЗнч(Документы.АвансовыйОтчет.ПустаяСсылка()) и ТаблицаДокументов.Итог("Остаток") <> СТЧОстатки.ОстатокНаНачало и ВыборкаДокиПерерасход.Количество() <> 0 Тогда
				ТаблицаДокументов.Удалить(СТЧ);
			ИначеЕсли ТипЗнч(СТЧ.ДокументОплаты) <> ТипЗнч(Документы.АвансовыйОтчет.ПустаяСсылка()) тогда
				если не Остаток < 0 Тогда
					СТЧ.Остаток = ?(Остаток >= СТЧ.СуммаДокумента, СТЧ.СуммаДокумента, Остаток);
					Остаток = Остаток - СТЧ.СуммаДокумента;
				иначе
					СТЧ.Остаток = СТЧ.СуммаДокумента;
					Остаток = Остаток + СТЧ.СуммаДокумента;
				КонецЕсли;
								
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	МассивАО.Очистить();	
	
	

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьДокументПоДокументуКомандировка(ДанныеЗаполнения) Экспорт
	ДокументОснование 		= ДанныеЗаполнения;
	Организация				= ДанныеЗаполнения.Организация;
	СуммаДокумента			= ДанныеЗаполнения.СуммаДокумента;
	ФизЛицо 				= ФизЛицоКомандировки(ДанныеЗаполнения);
	СчетУчета               = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
	
	ЗаполнитьАвансы(КонецДня(ТекущаяДата()));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.Командировка")] = "ЗаполнитьДокументПоДокументуКомандировка";
	
	ЗаполнениеОбъектов.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ДополнительныеСвойства.ДляПроведения.Вставить("ВалютаРегламентированногоУчета", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ДополнительныеСвойства.ДляПроведения.Вставить("ОсновнойСпособОценкиЗапасов", Перечисления.СпособыОценки.ПоСредней);
	
	// Инициализация данных документа.
	Документы.АвансовыйОтчет.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьПоступления(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьМБПСклад(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьПоступленияИтоги(ДополнительныеСвойства, Движения, Отказ);
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		
КонецПроцедуры

// В обработчике события ОбработкаПроверкиЗаполнения документа выполняется
// копирование и обнуление проверяемых реквизитов для исключения стандартной
// проверки заполнения платформой и последующей проверки средствами встроенного языка.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)	
	
	БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ФизЛицо");
	БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
	БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СуммаДокумента");
	Если ОплатаПоставщикам.Количество() = 0 Тогда
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ОплатаПоставщикам.Контрагент");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ОплатаПоставщикам.ДоговорКонтрагента");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ОплатаПоставщикам.Сумма");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ОплатаПоставщикам.СчетАвансов");			
	КонецЕсли;		
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти
	
#КонецЕсли