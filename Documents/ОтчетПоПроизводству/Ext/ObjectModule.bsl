#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ОтчетПоПроизводству.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	УчетТоваров.СформироватьДвиженияСписаниеТоваров(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСостояниеЗаказов(ДополнительныеСвойства, Движения, Отказ);
		
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Документы.ОтчетПоПроизводству.СформироватьТаблицуГотовыхЗаказов(ДополнительныеСвойства);
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаРеквизитыГП") Тогда  
		УчетТоваров.СформироватьДвиженияГотоваяПродукция(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка заполнения табличных частей
	Если ГотоваяПродукция.Количество() = 0 ИЛИ Материалы.Количество() = 0 Тогда	
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Необходимо заполнить закладки!'"),,,,Отказ);
	КонецЕсли;
	
	// Выполнение предварительного контроля.
	ВыполнитьПредварительныйКонтроль(Отказ);
КонецПроцедуры

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
	    |	ТаблицаГотоваяПродукция.Заказ
		|ПОМЕСТИТЬ ВременнаяТаблицаЗаказы
		|ИЗ
		|	&ТаблицаГотоваяПродукция КАК ТаблицаГотоваяПродукция
		|;
		|
		|//////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаЗаказы.Заказ
		|ИЗ
		|	ВременнаяТаблицаЗаказы КАК ВременнаяТаблицаЗаказы";
	Запрос.УстановитьПараметр("ТаблицаГотоваяПродукция", ГотоваяПродукция);
	ТЗЗаказы = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СостояниеЗаказовСрезПоследних.Заказ КАК Заказ,
		|	СостояниеЗаказовСрезПоследних.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.СостояниеЗаказов.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И Заказ В (&МассивЗаказов)
		|				И Регистратор <> &Ссылка) КАК СостояниеЗаказовСрезПоследних";
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("МассивЗаказов", ТЗЗаказы.ВыгрузитьКолонку("Заказ"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ТЗИтоговПоЗаказам = Запрос.Выполнить().Выгрузить();	
	
	МассивГотовыхЗаказов = Новый Массив();
	
	Для Каждого СтрокаТаблицыЗначений Из ТЗЗаказы Цикл
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Заказ", СтрокаТаблицыЗначений.Заказ);
		
		ЗаказГотов = Ложь;
		
		Для Каждого СтрокаТЗИтогов Из ТЗИтоговПоЗаказам.НайтиСтроки(СтруктураОтбора) Цикл
			Если СтрокаТЗИтогов.Состояние = Перечисления.СостояниеРаботПоПроизводству.Изготовлен Тогда
				ЗаказГотов = Истина;	
			Иначе
				ЗаказГотов = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		
		Если ЗаказГотов Тогда
			МассивГотовыхЗаказов.Добавить(СтрокаТаблицыЗначений.Заказ);		
		КонецЕсли;	
	КонецЦикла;
	
	Если МассивГотовыхЗаказов.Количество() > 0 Тогда
		Для Каждого СтрокаМассива Из МассивГотовыхЗаказов Цикл
			ТекстСообщения = СтрШаблон(НСтр("ru = '""%1"" уже выполнен!'"), 
							СтрокаМассива);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				,
				,
				,
				Отказ);
		КонецЦикла;
	КонецЕсли;	
		
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#КонецЕсли