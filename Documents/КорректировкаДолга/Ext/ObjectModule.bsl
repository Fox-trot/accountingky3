#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		СуммаДтЗадолженности = ДебиторскаяЗадолженность.Итог("Сумма");
		СуммаКтЗадолженности = КредиторскаяЗадолженность.Итог("Сумма");
	Иначе
		СуммаДтЗадолженности = ДебиторскаяЗадолженность.Итог("СуммаВзаиморасчетов");
		СуммаКтЗадолженности = КредиторскаяЗадолженность.Итог("СуммаВзаиморасчетов");
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.КорректировкаДолга.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
		
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив();

	// Проверяем реквизиты шапки:
	Если НЕ ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетКт");
		МассивНепроверяемыхРеквизитов.Добавить("СчетДт");
		
	Иначе
		
		Если ДебиторскаяЗадолженность.Количество() > 0 Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СчетКт");
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("СчетДт");
		КонецЕсли;	
		
		МассивНепроверяемыхРеквизитов.Добавить("КонтрагентКредитор");
		
	КонецЕсли;	
	
	Если ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		ИтогДт = ДебиторскаяЗадолженность.Итог("Сумма");
		ИтогКт = КредиторскаяЗадолженность.Итог("Сумма");
	Иначе
		ИтогДт = ДебиторскаяЗадолженность.Итог("СуммаВзаиморасчетов");
		ИтогКт = КредиторскаяЗадолженность.Итог("СуммаВзаиморасчетов");
	КонецЕсли;
	Разница = ИтогДт - ИтогКт;
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДебиторскаяЗадолженность.КорДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("ДебиторскаяЗадолженность.КорСчетУчетаРасчетов");
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ДебиторскаяЗадолженность.КорДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("ДебиторскаяЗадолженность.КорСчетУчетаРасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("КредиторскаяЗадолженность.КорДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("КредиторскаяЗадолженность.КорСчетУчетаРасчетов");
	КонецЕсли;
	
	СтруктураРезультатовПроверки = ПолучитьСтруктуруРезультатовПроверки();
	
	ВыборкаОшибок = СтруктураРезультатовПроверки.СтрокиДокументаСОшибками;
	Пока ВыборкаОшибок.Следующий() Цикл
	
		ТекстСообщения = ВыборкаОшибок.ОписаниеОшибки;
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
			НСтр("ru = 'Счет учета'"), ВыборкаОшибок.НомерСтроки, ВыборкаОшибок.СинонимТабЧасти, ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, ЭтотОбъект, 
			ВыборкаОшибок.ИмяТабЧасти + "[" + Формат(ВыборкаОшибок.НомерСтроки - 1, "ЧДЦ=0; ЧГ=") + "].СчетУчетаРасчетов",
			"Объект", Отказ);
		
	КонецЦикла; 
	
	// Удаляем из проверяемых реквизитов все, по которым автоматическая проверка не нужна:
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСтруктуруРезультатовПроверки()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДебиторскаяЗадолженность", ДебиторскаяЗадолженность.Выгрузить(, 
		"НомерСтроки, ДоговорКонтрагента, КурсВзаиморасчетов, СчетУчетаРасчетов"));
	Запрос.УстановитьПараметр("КредиторскаяЗадолженность", КредиторскаяЗадолженность.Выгрузить(, 
		"НомерСтроки, ДоговорКонтрагента, КурсВзаиморасчетов, СчетУчетаРасчетов"));
	Запрос.УстановитьПараметр("ИмяДебиторскойЗадолженности",  НСтр("ru = 'Дебиторская задолженность'") );
	Запрос.УстановитьПараметр("ИмяКредиторскойЗадолженности", НСтр("ru = 'Кредиторская задолженность'") );
	Запрос.УстановитьПараметр("ВалютаРеглУчета",              Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ТекстОшибки1", НСтр("ru = 'Для валютного договора указан счет без валютного учета!'") );
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	""ДебиторскаяЗадолженность"" КАК ИмяТабЧасти,
		|	&ИмяДебиторскойЗадолженности КАК СинонимТабЧасти,
		|	ТабЧасть.НомерСтроки КАК НомерСтроки,
		|	ТабЧасть.ДоговорКонтрагента КАК Договор,
		|	ТабЧасть.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ТабЧасть.СчетУчетаРасчетов КАК СчетУчета
		|ПОМЕСТИТЬ СтрокиДебиторскойЗадолженности
		|ИЗ
		|	&ДебиторскаяЗадолженность КАК ТабЧасть
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""КредиторскаяЗадолженность"" КАК ИмяТабЧасти,
		|	&ИмяКредиторскойЗадолженности КАК СинонимТабЧасти,
		|	ТабЧасть.НомерСтроки КАК НомерСтроки,
		|	ТабЧасть.ДоговорКонтрагента КАК Договор,
		|	ТабЧасть.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ТабЧасть.СчетУчетаРасчетов КАК СчетУчета
		|ПОМЕСТИТЬ СтрокиКредиторскойЗадолженности
		|ИЗ
		|	&КредиторскаяЗадолженность КАК ТабЧасть
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтрокиДебиторскойЗадолженности.ИмяТабЧасти КАК ИмяТабЧасти,
		|	СтрокиДебиторскойЗадолженности.СинонимТабЧасти КАК СинонимТабЧасти,
		|	СтрокиДебиторскойЗадолженности.НомерСтроки КАК НомерСтроки,
		|	СтрокиДебиторскойЗадолженности.Договор КАК Договор,
		|	СтрокиДебиторскойЗадолженности.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	СтрокиДебиторскойЗадолженности.СчетУчета КАК СчетУчета
		|ПОМЕСТИТЬ СтрокиДокументов
		|ИЗ
		|	СтрокиДебиторскойЗадолженности КАК СтрокиДебиторскойЗадолженности
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтрокиКредиторскойЗадолженности.ИмяТабЧасти,
		|	СтрокиКредиторскойЗадолженности.СинонимТабЧасти,
		|	СтрокиКредиторскойЗадолженности.НомерСтроки,
		|	СтрокиКредиторскойЗадолженности.Договор,
		|	СтрокиКредиторскойЗадолженности.КурсВзаиморасчетов,
		|	СтрокиКредиторскойЗадолженности.СчетУчета
		|ИЗ
		|	СтрокиКредиторскойЗадолженности КАК СтрокиКредиторскойЗадолженности
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ПОМЕСТИТЬ ВТ_СчетаУчетаРасчетовСПоставщиками
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АвансыВыданные), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СчетаКОплате))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ПОМЕСТИТЬ ВТ_СчетаУчетаРасчетовСПокупателями
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СчетаКПолучению), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АвансыПолученные))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтрокиДокумента.ИмяТабЧасти КАК ИмяТабЧасти,
		|	СтрокиДокумента.СинонимТабЧасти КАК СинонимТабЧасти,
		|	СтрокиДокумента.НомерСтроки КАК НомерСтроки,
		|	&ТекстОшибки1 КАК ОписаниеОшибки,
		|	Договоры.Ссылка КАК Договор,
		|	Счета.Ссылка КАК СчетУчета
		|ИЗ
		|	СтрокиДокументов КАК СтрокиДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
		|		ПО СтрокиДокумента.Договор = Договоры.Ссылка
		|			И (Договоры.ВалютаРасчетов <> &ВалютаРеглУчета)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Счета
		|		ПО СтрокиДокумента.СчетУчета = Счета.Ссылка
		|			И (НЕ Счета.Валютный)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИмяТабЧасти,
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтрокиДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов
		|ИЗ
		|	СтрокиДокументов КАК СтрокиДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
		|		ПО СтрокиДокумента.Договор = Договоры.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА СтрокиДокумента.ИмяТабЧасти = ""ДебиторскаяЗадолженность""
		|				ТОГДА Договоры.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
		|						И СтрокиДокумента.СчетУчета В
		|							(ВЫБРАТЬ
		|								ВТ_СчетаУчетаРасчетовСПоставщиками.Счет
		|							ИЗ
		|								ВТ_СчетаУчетаРасчетовСПоставщиками)
		|						И СтрокиДокумента.СчетУчета В
		|							(ВЫБРАТЬ
		|								ВТ_СчетаУчетаРасчетовСПоставщиками.Счет
		|							ИЗ
		|								ВТ_СчетаУчетаРасчетовСПоставщиками)
		|			ИНАЧЕ Договоры.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
		|					И СтрокиДокумента.СчетУчета В
		|						(ВЫБРАТЬ
		|							ВТ_СчетаУчетаРасчетовСПокупателями.Счет
		|						ИЗ
		|							ВТ_СчетаУчетаРасчетовСПокупателями)
		|					И СтрокиДокумента.СчетУчета В
		|						(ВЫБРАТЬ
		|							ВТ_СчетаУчетаРасчетовСПокупателями.Счет
		|						ИЗ
		|							ВТ_СчетаУчетаРасчетовСПокупателями)
		|		КОНЕЦ";
	
	Результат = Запрос.ВыполнитьПакет();
	
	СтрукутураРезультатовПроверки = Новый Структура;
	СтрукутураРезультатовПроверки.Вставить("СтрокиДокументаСОшибками", Результат[5].Выбрать());
	СтрукутураРезультатовПроверки.Вставить("АвансыПоРазнымКурсам", Результат[6].Выбрать().Количество());
	
	Возврат СтрукутураРезультатовПроверки;

КонецФункции

#КонецОбласти

#КонецЕсли
