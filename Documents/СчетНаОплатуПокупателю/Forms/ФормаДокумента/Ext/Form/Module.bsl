
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Установка реквизитов формы.	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();	
	Контрагент = Объект.Контрагент;
	ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	ТипЦен = Объект.ДоговорКонтрагента.ТипЦен;	
	СуммаСкидкиПоСтроке = Объект.ВидСкидкиНаценки = Перечисления.ВидыСкидокНаценок.СуммаПоСтроке;
	
	УстановитьФункциональныеОпцииФормы();

	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	БухгалтерскийУчетСервер.ОпределитьТипПоследнегоОткрытогоДокумента(Объект, Истина);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
// В процедуре осуществляется
// - установка видимости/доступности элементов управления формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьДоступностьЭлементов();
	УстановитьТекущуюСтраницу();
	ОбновитьПодвалФормы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "МодифицированДоговораКонтрагента" Тогда
		ОбработатьИзменениеДоговора(Истина);
		
	ИначеЕсли ИмяСобытия = "ПодборНоменклатурыПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище, "Товары");
		
		ОбновитьПодвалФормы();
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением, Объект.ВалютаДокумента);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные);
		КонецЕсли;	
	КонецЕсли;
	
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	
	УстановитьФункциональныеОпцииФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер = "";

	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	УстановитьФункциональныеОпцииФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
		
		Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
		ОбработатьИзменениеДоговора();
		
	Иначе
		Объект.ДоговорКонтрагента = ДоговорКонтрагента; // Восстанавливаем автоматически очищеный договор.
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор контрагента.
//
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ОбработатьИзменениеДоговора();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Документ основание.
//
&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	ПоказатьПредупреждение(, "В разработке", 30, "ВНИМАНИЕ");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Вид скидки.
//
&НаКлиенте
Процедура ВидСкидкиПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();

	СуммаСкидкиПоСтроке = Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке");
	ВидСкидкиПриИзмененииНаКлиенте();	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Скидка процент.
//
&НаКлиенте
Процедура ПроцентСкидкиНаценкиПриИзменении(Элемент)
	ВидСкидкиПриИзмененииНаКлиенте()
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флага Безналичный расчет.
//
&НаКлиенте
Процедура БезналичныйРасчетПриИзменении(Элемент)
	ПоказатьПредупреждение(, "В разработке", 30, "ВНИМАНИЕ");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НДС.
//
&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(
		Объект,
		ДатаДокумента, 
		"Товары",
		Объект.СуммаВключаетНалоги, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП);
		
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(
		Объект,
		ДатаДокумента, 
		"Услуги",
		Объект.СуммаВключаетНалоги, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСПУслуги);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НСП.
//
&НаКлиенте
Процедура СтавкаНСППриИзменении(Элемент)
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(
		Объект,
		ДатаДокумента, 
		"Товары",
		Объект.СуммаВключаетНалоги, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НСП для Услуг.
//
&НаКлиенте
Процедура СтавкаНСПУслугиПриИзменении(Элемент)
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(
		Объект,
		ДатаДокумента, 
		"Услуги",
		Объект.СуммаВключаетНалоги, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСПУслуги);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары
	
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Дата", ДатаДокумента);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Контрагент", Объект.Контрагент);
	СтруктураДанные.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНалоги", Объект.СуммаВключаетНалоги);
	СтруктураДанные.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	СтруктураДанные.Вставить("СтавкаНСП", Объект.СтавкаНСП);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

	// Изменение ставки НСП
	Если НЕ ЗначениеЗаполнено(Объект.СтавкаНСП) Тогда 
		Объект.СтавкаНСП = СтруктураДанные.СтавкаНСП;		
	КонецЕсли;	
	
	// Заполнение по данным номенклатуры
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,,СуммаСкидкиПоСтроке);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДатаДокумента, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,,СуммаСкидкиПоСтроке);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДатаДокумента, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,,СуммаСкидкиПоСтроке);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДатаДокумента, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДатаДокумента, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНСППриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДатаДокумента, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,,СуммаСкидкиПоСтроке);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДатаДокумента, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Дата", ДатаДокумента);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Контрагент", Объект.Контрагент);
	СтруктураДанные.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНалоги", Объект.СуммаВключаетНалоги);
	СтруктураДанные.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	СтруктураДанные.Вставить("СтавкаНСП", Объект.СтавкаНСП);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

	// Изменение ставки НСП
	Если НЕ ЗначениеЗаполнено(Объект.СтавкаНСПУслуги) Тогда 
		Объект.СтавкаНСПУслуги = СтруктураДанные.СтавкаНСП;		
	КонецЕсли;	
	
	// Заполнение по данным номенклатуры
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,,СуммаСкидкиПоСтроке);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДатаДокумента, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСПУслуги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,,СуммаСкидкиПоСтроке);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДатаДокумента, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСПУслуги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,,СуммаСкидкиПоСтроке);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДатаДокумента, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСПУслуги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДатаДокумента, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСПУслуги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНСППриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПроцентСкидкиНаценкиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДатаДокумента, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСПУслуги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаСкидкиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,,СуммаСкидкиПоСтроке);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДатаДокумента, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик события действие команды Подбор в табличную часть Товары
//
&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	РаботаСПодборомНоменклатурыКлиент.ОткрытьПодбор(ЭтаФорма, "Товары", "Реализация");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()	
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда 
		Элементы.ПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ТоварыПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ТоварыСуммаСкидки.Видимость = Ложь;
		Элементы.УслугиПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.УслугиСуммаСкидки.Видимость = Ложь;
		Элементы.ИтогСуммаСкидки.Видимость = Ложь;
	ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентПоСтроке") Тогда 
		Элементы.ПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ТоварыПроцентСкидкиНаценки.Видимость = Истина;
		Элементы.ТоварыСуммаСкидки.Видимость = Истина;
		Элементы.УслугиПроцентСкидкиНаценки.Видимость = Истина;
		Элементы.УслугиСуммаСкидки.Видимость = Истина;
		Элементы.ИтогСуммаСкидки.Видимость = Истина;		
		Элементы.ТоварыСуммаСкидки.ТолькоПросмотр = Истина;
		Элементы.УслугиСуммаСкидки.ТолькоПросмотр = Истина;
	ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда 
		Элементы.ПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ТоварыПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ТоварыСуммаСкидки.Видимость = Истина;
		Элементы.УслугиПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.УслугиСуммаСкидки.Видимость = Истина;
		Элементы.ИтогСуммаСкидки.Видимость = Истина;		
		Элементы.ТоварыСуммаСкидки.ТолькоПросмотр = Ложь;
		Элементы.УслугиСуммаСкидки.ТолькоПросмотр = Ложь;
	ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентОбщий") Тогда 
		Элементы.ПроцентСкидкиНаценки.Видимость = Истина;
		Элементы.ТоварыПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ТоварыСуммаСкидки.Видимость = Истина;
		Элементы.УслугиПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.УслугиСуммаСкидки.Видимость = Истина;
		Элементы.ИтогСуммаСкидки.Видимость = Истина;		
		Элементы.ТоварыСуммаСкидки.ТолькоПросмотр = Истина;
		Элементы.УслугиСуммаСкидки.ТолькоПросмотр = Истина;
	КонецЕсли;		
	
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()    

// Процедура устанавливает текущую страницу при открытии формы.
//
&НаКлиенте
Процедура УстановитьТекущуюСтраницу()	
	Если Объект.Товары.Количество() > 0 Тогда 
		Возврат;
	ИначеЕсли Объект.Услуги.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаУслуги;
	КонецЕсли;	
КонецПроцедуры

// Процедура устанавливает функциональные опции формы документа.
//
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма, Объект.Организация, ДатаДокумента);
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением, ВалютаДокумента)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаНовая, Новый Структура("Валюта", ВалютаДокумента));
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность
	);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Пересчитать курс кратность валюты расчетов
//
// Параметры:
//  СтруктураДанные	- Структура - 
//		* ВалютаКурсКратность - Структура
//			* Курс - Число
//			* Кратность - Число
//
&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		Или Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(Объект.Курс) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(КурсНовый) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		
		ТекстСообщения = НСтр("ru = 'На дату документа у валюты расчетов (" + КурсВалютыСтрокой + ") был задан курс.
									|Установить курс расчетов (" + КурсНовыйВалютыСтрокой + ") в соответствии с курсом валюты?'");
		
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПересчитатьКурсКратностьВалютыДокументаЗавершение", ЭтотОбъект, Новый Структура("КратностьНовый, КурсНовый", КратностьНовый, КурсНовый)), ТекстСообщения, Режим, 0);
		Возврат;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КратностьНовый = ДополнительныеПараметры.КратностьНовый;
	КурсНовый = ДополнительныеПараметры.КурсНовый;
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Курс = КурсНовый;
		Объект.Кратность = КратностьНовый;
	КонецЕсли;
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанию
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Период, ВалютаДокумента, ДоговорКонтрагента)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорКонтрагента.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Период, Новый Структура("Валюта", ДоговорКонтрагента.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"ТипЦен",
		ДоговорКонтрагента.ТипЦен
	);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНалоги",
		ДоговорКонтрагента.СуммаВключаетНалоги
	);
	
	СтруктураДанные.Вставить(
		"СтавкаНДС",
		ДоговорКонтрагента.СтавкаНДС
	);
	
	СтруктураДанные.Вставить(
		"СтавкаНСП",
		ДоговорКонтрагента.СтавкаНСП
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаКлиенте
Процедура ОбработатьИзменениеДоговора(МодифицированДоговор = Ложь)
	
	ДоговорПередИзменением = ДоговорКонтрагента;
	ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	Если ДоговорПередИзменением <> Объект.ДоговорКонтрагента
		Или МодифицированДоговор Тогда
		
		СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(ДатаДокумента, Объект.ВалютаДокумента, Объект.ДоговорКонтрагента);

		// Обработка изменения валюты
		СтруктураКурсыПред = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
		
		Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
		Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
		Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
		
		СтруктураКурсы = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
		
		// Обработка изменения налогооблажения
		Объект.СуммаВключаетНалоги = СтруктураДанные.СуммаВключаетНалоги;
		Объект.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		
		ТипЦенПередИзменением = ТипЦен;
		ТипЦен = СтруктураДанные.ТипЦен;
		
		// Вопрос изменения
		ИзменилсяТипЦен = ТипЦенПередИзменением <> ТипЦен
			И ЗначениеЗаполнено(ТипЦен);
		ИзмениласьВалютаРасчетов = СтруктураКурсыПред.Валюта <> СтруктураДанные.ВалютаРасчетов
			И ЗначениеЗаполнено(Объект.ВалютаДокумента); 
		ПересчетНеобходим = (Объект.Товары.Количество() > 0)
			Или (Объект.Услуги.Количество() > 0);	
			
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) 
			И (ИзменилсяТипЦен Или ИзмениласьВалютаРасчетов)
			И ПересчетНеобходим Тогда
			
			ТекстСообщение = "";
			
			Если ИзменилсяТипЦен Тогда 
				ТекстСообщение = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, 
					|отличные от установленных в документе! 
					|Возможно, необходимо перезаполнить цены.'") + Символы.ПС + Символы.ПС;
			КонецЕсли;
			
			Если ИзмениласьВалютаРасчетов Тогда 
				ТекстСообщение = ТекстСообщение + НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом!
					|Возможно, необходимо перезаполнить цены.'") + Символы.ПС + Символы.ПС;
			КонецЕсли;

			ТекстСообщение = ТекстСообщение + НСтр("ru = 'Пересчитать документ в соответствии с договором?'");
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьИзменениеДоговораФрагментЗавершение", ЭтотОбъект, 
			
			Новый Структура("СтруктураКурсыПред, СтруктураКурсы", СтруктураКурсыПред, СтруктураКурсы)), 
				ТекстСообщение,
				РежимДиалогаВопрос.ДаНет
			);
			Возврат;
		КонецЕсли;	
			
		// Пересчет табличной части
		// Цена, Сумма
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Товары");
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Услуги");
		// Налоги
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ДатаДокумента, "Товары", Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП);
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ДатаДокумента, "Услуги", Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСПУслуги);
		
		ОбновитьПодвалФормы();
	Иначе
		Объект.ДоговорКонтрагента = ДоговорКонтрагента; // Восстанавливаем автоматически очищеный договор.
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговораФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПоказатьПредупреждение(,"ДЛЯ ЦВС: ЭТОТ ВОПРОС ВРЕМЕННЫЙ- ЕСЛИ НУЖЕН- БУДЕМ ДОБАВЛЯТЬ ВО ВСЕХ ДОКУМЕНТАХ.", 30, "ВНИМАНИЕ");
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СтруктураКурсыПред = ДополнительныеПараметры.СтруктураКурсыПред;
		СтруктураКурсы = ДополнительныеПараметры.СтруктураКурсы;
		
		// Цена, Сумма
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Товары");
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Услуги");
	КонецЕсли;	
	
	// Налоги
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ДатаДокумента, "Товары", Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП);
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ДатаДокумента, "Услуги", Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСПУслуги);

	ОбновитьПодвалФормы();
КонецПроцедуры

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Данные номенклатуры
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("ЭтоУслуга", СтруктураДанные.Номенклатура.Услуга);
	
	// Счета учета
	СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(СтруктураДанные.Организация, СтруктураДанные.Номенклатура);
	СтруктураДанные.Вставить("СчетУчета", СчетаУчетаНоменклатуры.СчетУчета);
	
	// Ставка НСП
	Если ЗначениеЗаполнено(СчетаУчетаНоменклатуры.СтавкаНСП) Тогда 
		СтруктураДанные.Вставить("СтавкаНСП", СчетаУчетаНоменклатуры.СтавкаНСП);
	Иначе
		ДанныеУчетнойПолитикиОрганизаций = БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций(СтруктураДанные.Дата, СтруктураДанные.Организация);
		СтруктураДанные.Вставить("СтавкаНСП", ДанныеУчетнойПолитикиОрганизаций.СтавкаНСППоУмолчанию);
	КонецЕсли;	
	
	// Цены 
	СтруктураДанные.Вставить("ТипЦен", СтруктураДанные.ДоговорКонтрагента.ТипЦен);
	Цена = БухгалтерскийУчетСервер.ПолучитьЦенуНоменклатуры(СтруктураДанные);
	СтруктураДанные.Вставить("Цена", Цена);
	
	Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе	
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Производит расчет суммы скидки/наценки
//
&НаКлиенте
Процедура ВидСкидкиПриИзмененииНаКлиенте()
	
	// Товары
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл 
		Если НЕ ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда 
			Объект.ПроцентСкидкиНаценки = 0;
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
		ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентОбщий") Тогда 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
		ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентПоСтроке") Тогда 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
		ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда 
			Объект.ПроцентСкидкиНаценки = 0;
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,,СуммаСкидкиПоСтроке);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДатаДокумента, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП);
	КонецЦикла;
	
	// Услуги
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл 
		Если НЕ ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда 
			Объект.ПроцентСкидкиНаценки = 0;
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
		ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентОбщий") Тогда 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
		ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентПоСтроке") Тогда 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
		ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда 
			Объект.ПроцентСкидкиНаценки = 0;
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,,СуммаСкидкиПоСтроке);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДатаДокумента, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП);
	КонецЦикла;	
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры // ВидСкидкиПриИзмененииНаКлиенте()

// Процедура рассчитывает итоги для подвала формы.
//
&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего");
	ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС");
	ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП");
	
	ИтогСуммаСкидки = Объект.Товары.Итог("СуммаСкидки") + Объект.Услуги.Итог("СуммаСкидки");
	
КонецПроцедуры // ОбновитьПодвалФормы()

&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, СчетУчета", СтрокаЗагрузки.Номенклатура, СтрокаЗагрузки.СчетУчета));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
		
		// Расчет суммы
		Если ИмяТабличнойЧасти = "Услуги" Тогда 
			СтавкаНСП = Объект.СтавкаНСПУслуги;
		Иначе 
			СтавкаНСП = Объект.СтавкаНСП;
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,,СуммаСкидкиПоСтроке);	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДатаДокумента, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, СтавкаНСП);
	КонецЦикла;
КонецПроцедуры // ПолучитьТоварыИзХранилища()

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
