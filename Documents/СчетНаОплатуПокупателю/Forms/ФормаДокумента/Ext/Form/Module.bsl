#Область ОбработчикиСлужебные

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервереБезКонтекста
Функция ЭтоУслуга(Номенклатура)

	Возврат Номенклатура.Услуга;	

КонецФункции // ЭтоУслуга()

&НаСервереБезКонтекста
Функция ПолучитьЕдиницуИзмерения(Номенклатура)

	Возврат Номенклатура.ЕдиницаИзмерения;	

КонецФункции // ()

&НаКлиенте
Процедура ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, ИмяТЧ, СТЧ = Неопределено)
	
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Дата 				= ДатаДокумента;
	ПараметрыОбъекта.СуммаСкидкиОбщая 	= Объект.СуммаСкидки;	
	ПараметрыОбъекта.ЗначСтавкаНДС 		= ЗначСтавкаНДС;
	ПараметрыОбъекта.СтавкаНДС 			= СтавкаНДС;
	ПараметрыОбъекта.ПлательщикНДС 		= УПП.ПлательщикНДС;
	ПараметрыОбъекта.ПлательщикНСП 		= УПП.ПлательщикНСП;
			
	Если НЕ (Элементы[ИмяТЧ].ТекущиеДанные = Неопределено И СТЧ = Неопределено) Тогда
		СтрокаТабличнойЧасти = ?(СТЧ = Неопределено, Элементы[ИмяТЧ].ТекущиеДанные, СТЧ);
		ЗаполнитьЗначенияСвойств(ДанныеСТЧ, СтрокаТабличнойЧасти);

	    ДанныеСТЧ.СтавкаНДС 	= СтавкаНДС;
		СтруктураСчетовУчета 	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТабличнойЧасти.Номенклатура);
		ДанныеСТЧ.СтавкаНСП 	= ?(ЗначениеЗаполнено(СтруктураСчетовУчета.СтавкаНСП), СтруктураСчетовУчета.СтавкаНСП, УПП.СтавкаНСППоУмолчанию);
		ЗначСтавкаНСП 			= БухгалтерскийУчетСервер.ПолучитьСтавкуНСП(ДатаДокумента, СтавкаНДС, ДанныеСТЧ.СтавкаНСП).Ставка;	
		ДанныеСТЧ.ЗначСтавкаНСП = ЗначСтавкаНСП;	
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТипЦенИзДоговора(Договор)
	
	Возврат Договор.ТипЦен;	

КонецФункции // ПолучитьТипЦенИзДоговора(Договор)

&НаКлиенте
Процедура ПриИзмененииДоговораКонтрагента()
		
	Объект.ТипЦен = ПолучитьТипЦенИзДоговора(Объект.ДоговорКонтрагента);	
		
	ДанныеДоговора 				= БухгалтерскийУчетВызовСервераПовтИсп.ДанныеДоговора(Объект.ДоговорКонтрагента);
	СтавкаНДС 					= ?(ЗначениеЗаполнено(ДанныеДоговора.СтавкаНДС), ДанныеДоговора.СтавкаНДС, УПП.СтавкаНДСПоУмолчанию);
	ЗначСтавкаНДС 				= БухгалтерскийУчетСервер.ПолучитьСтавкуНДСПоДоговору(Объект.Дата, Объект.ДоговорКонтрагента);
	СтавкаНСПУслуги				= ?(ЗначениеЗаполнено(ДанныеДоговора.СтавкаНСП), ДанныеДоговора.СтавкаНСП, УПП.СтавкаНСППоУмолчанию);
	ЗначСтавкаНСПУслуги			= БухгалтерскийУчетСервер.ПолучитьСтавкуНСППоДоговору(Объект.Дата, Объект.ДоговорКонтрагента);
	
	Объект.ВалютаДокумента 		= ДанныеДоговора.ВалютаРасчетов;
	Объект.ВидПоставкиНДС 		= ДанныеДоговора.ВидПоставкиНДС;
	
	УстановитьКурсВалютыДокумента(ДатаДокумента, Объект.ВалютаДокумента, Объект.Курс);

	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл 
		ПриИзмененииНоменклатуры(ДанныеСТЧ, ПараметрыОбъекта, "Товары", СтрокаТабличнойЧасти);
	КонецЦикла;
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл 
		ПриИзмененииУслуги(ДанныеСТЧ, ПараметрыОбъекта, "Услуги", СтрокаТабличнойЧасти);
	КонецЦикла;
		
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

// Процедура обработки строки ТЧ документов поступления ТМЗ, ОС и услуг
// Выборка цены производится только при установленном парамтре Заполнить цену 
// (при изменении номенклатуры)
&НаКлиенте
Процедура ПриИзмененииНоменклатуры(ДанныеСТЧ, ПараметрыОбъекта, ИмяТабличнойЧасти, СтрокаТабличнойЧасти)
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, ИмяТабличнойЧасти, СтрокаТабличнойЧасти);
	ДанныеСТЧ.СпособОценки = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСпособОценкиЗапасов(СтрокаТабличнойЧасти.СчетУчета, ПредопределенноеЗначение("Перечисление.СпособыОценки.ПоСредней"));
	
	ОбработкаТабличныхЧастейВызовСервера.ЗаполнитьСчетУчетаСтрокиТабличнойЧасти(ДанныеСТЧ, ПараметрыОбъекта);
	Если ДанныеСТЧ.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.МБП") Тогда 
		КоличествоОстаток = БухгалтерскийУчетСервер.ПолучитьОстатокПоМБПНаСкладе(ДанныеСТЧ, ПараметрыОбъекта);	
		
	Иначе 
		КоличествоОстаток = БухгалтерскийУчетСервер.ПолучитьОстатокПоНоменклатуреИСчетуУчета(ДанныеСТЧ, ПараметрыОбъекта);
	КонецЕсли;
	
	ДанныеСТЧ.КоличествоОстаток = КоличествоОстаток;
	ОбработкаТабличныхЧастейВызовСервера.ЗаполнитьЦенуСтрокиТабличнойЧасти(ДанныеСТЧ, ПараметрыОбъекта);
	
	Если ДанныеСТЧ.Количество = 0 Тогда
		ДанныеСТЧ.Количество = КоличествоОстаток;
	КонецЕсли;
	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиРеализации(ДанныеСТЧ, ПараметрыОбъекта);		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСТЧ);
		
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле Склад.'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.Склад",
			Истина);
			
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена номенклатура.'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			"Товары",
			СтрокаТабличнойЧасти.НомерСтроки,
			"Номенклатура",
			Истина);
			
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчета) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен счет учета номенклатуры.'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			"Товары",
			СтрокаТабличнойЧасти.НомерСтроки,
			"СчетУчета",
			Истина);		
			
	ИначеЕсли СтрокаТабличнойЧасти.Количество = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нулевой остаток для выбранных номенклатуры и счета учета!'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			"Товары",
			СтрокаТабличнойЧасти.НомерСтроки,
			"Количество",
			Истина);		
		
	ИначеЕсли НЕ ЭтоУслуга(СтрокаТабличнойЧасти.Номенклатура) И СтрокаТабличнойЧасти.Количество > КоличествоОстаток Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Количество для выбранных номенклатуры и счета учета указано больше, чем есть в остатке. Остаток составляет  %1 %2'"), КоличествоОстаток, ПолучитьЕдиницуИзмерения(СтрокаТабличнойЧасти.Номенклатура));
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			"Товары",
			СтрокаТабличнойЧасти.НомерСтроки,
			"Количество",
			Истина);	
		
	КонецЕсли;
		
	Объект.СуммаСкидки = Объект.Товары.Итог("СуммаСкидки") + Объект.Услуги.Итог("СуммаСкидки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЦены(ДанныеСТЧ, ПараметрыОбъекта, ИмяТабличнойЧасти, СтрокаТабличнойЧасти)
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, ИмяТабличнойЧасти, СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиРеализации(ДанныеСТЧ, ПараметрыОбъекта);		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСТЧ);
		
	Объект.СуммаСкидки = Объект.Товары.Итог("СуммаСкидки") + Объект.Услуги.Итог("СуммаСкидки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииУслуги(ДанныеСТЧ, ПараметрыОбъекта, ИмяТабличнойЧасти, СтрокаТабличнойЧасти)
	
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, ИмяТабличнойЧасти, СтрокаТабличнойЧасти);
	
	ОбработкаТабличныхЧастейВызовСервера.ЗаполнитьСчетУчетаСтрокиТабличнойЧасти(ДанныеСТЧ, ПараметрыОбъекта);
	ОбработкаТабличныхЧастейВызовСервера.ЗаполнитьЦенуСтрокиТабличнойЧасти(ДанныеСТЧ, ПараметрыОбъекта);
	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиРеализации(ДанныеСТЧ, ПараметрыОбъекта);		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСТЧ);
		
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле Склад.'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.Склад",
			Истина);
			
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена номенклатура(услуга).'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.Товары[" + (СтрокаТабличнойЧасти.НомерСтроки -1) + "].Номенклатура",
			Истина);
			
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчета) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен счет учета номенклатуры(услуги).'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.Товары[" + (СтрокаТабличнойЧасти.НомерСтроки -1) + "].СчетУчета",
			Истина);	
		
	КонецЕсли;
		
	Объект.СуммаСкидки = Объект.Товары.Итог("СуммаСкидки") + Объект.Услуги.Итог("СуммаСкидки");
	
КонецПроцедуры // ПриИзмененииНоменклатурыИСчета()

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ПриИзмененииДоговораКонтрагента();
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы, ОбщийПодбор = Истина)

	ДатаРасчетов		= ДатаДокумента;
	
	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Товары'");
	КонецЕсли;
	ЗаголовокПодбора = СтрШаблон(НСтр("ru = 'Подбор номенклатуры в %1 (%2)'"), Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов", ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация" , Объект.Организация);
	ПараметрыФормы.Вставить("Склад"       , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"   , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"  , "");
	ПараметрыФормы.Вставить("ИмяТаблицы"  , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"      , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
	ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("ОбщийПодбор", 	ОбщийПодбор);		
	ПараметрыФормы.Вставить("СпособОценки", ПредопределенноеЗначение("Перечисление.СпособыОценки.ПустаяСсылка"));
	ПараметрыФормы.Вставить("ПодборНоменклатурыПоПартии", Объект.ПодборНоменклатурыПоПартии);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Процедура ПересчетТабличнойЧасти(ИмяТабличнойЧасти)
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		ТабличнаяЧасть = Объект.Товары;			
	ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда
		ТабличнаяЧасть = Объект.Услуги;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		ПриИзмененииНоменклатуры(ДанныеСТЧ, ПараметрыОбъекта, ИмяТабличнойЧасти, СтрокаТабличнойЧасти);
	КонецЦикла;
			
КонецПроцедуры // ПересчетТабличнойЧасти(ИмяТабличнойЧасти)

&НаСервереБезКонтекста
Процедура УстановитьКурсВалютыДокумента(ДатаДокумента, ВалютаДокумента, Курс)

	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		Возврат;	
	КонецЕсли;
	КурсСтруктура	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	Курс 			= КурсСтруктура.Курс;
	
КонецПроцедуры // УстановитьКурсВалютыДокумента()

&НаКлиенте
Процедура ПриИзмененииСкидки()
	ВидСкидки = Объект.ВидСкидки;
	
	Если НЕ ЗначениеЗаполнено(ВидСкидки) ИЛИ ВидСкидки = ПредопределенноеЗначение("Перечисление.ВидыСкидок.СуммаПоСтроке") Тогда		
		Объект.СкидкаПроцент = 0;
	КонецЕсли;

	ПересчетТабличнойЧасти("Товары");
	ПересчетТабличнойЧасти("Услуги");
	ОбщийИтогСкидка 	= Объект.Товары.Итог("СуммаСкидки") + Объект.Услуги.Итог("СуммаСкидки");
	Объект.СуммаСкидки 	= ОбщийИтогСкидка;
		
	УстановитьВидимостьДоступностьЭлементов();	

КонецПроцедуры // ПриИзмененииСкидки()

&НаКлиенте
Процедура ПолучитьОбщиеИтоги()
	ОбщийИтог 		= Объект.Товары.Итог("Итого") 		+ Объект.Услуги.Итог("Итого");		
	ОбщийИтогСкидка = Объект.Товары.Итог("СуммаСкидки") + Объект.Услуги.Итог("СуммаСкидки");
	ОбщийИтогНДС 	= Объект.Товары.Итог("СуммаНДС") 	+ Объект.Услуги.Итог("СуммаНДС");
	ОбщийИтогНСП 	= Объект.Товары.Итог("СуммаНСП") 	+ Объект.Услуги.Итог("СуммаНСП");
КонецПроцедуры // ПолучитьОбщиеИтоги()

&НаСервереБезКонтекста
Функция ОсновнойБанковскийСчетКонтрагента(Контрагент)

	Возврат Контрагент.ОсновнойБанковскийСчет;	

КонецФункции // ОсновнойБанковскийСчетКонтрагента(Контрагент)

#КонецОбласти

#Область УправлениеВнешнимВидом

&НаСервере
// Процедура устанавливает видимость и доступность элементов.
//
Процедура УстановитьВидимостьДоступностьЭлементов()	
	
	Если ЗначениеЗаполнено(Объект.ВалютаДокумента) И Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		Элементы.ВалютаДоговора.Видимость 			= Истина;	
		Элементы.Курс.Видимость 					= Истина;
	Иначе
		Элементы.ВалютаДоговора.Видимость 			= Ложь;	
		Элементы.Курс.Видимость 					= Ложь;
	КонецЕсли;
	
	Элементы.СуммаСкидки.Видимость 			= НЕ ВидСкидки = ПредопределенноеЗначение("Перечисление.ВидыСкидок.ПустаяСсылка");
	Элементы.СуммаСкидки.Доступность 		= НЕ ВидСкидки = ПредопределенноеЗначение("Перечисление.ВидыСкидок.ПроцентПоСтроке");	
	Элементы.СкидкаПроцент.Видимость 		= НЕ ВидСкидки = ПредопределенноеЗначение("Перечисление.ВидыСкидок.ПустаяСсылка");
	Элементы.СкидкаПроцент.Доступность 		= НЕ ВидСкидки = ПредопределенноеЗначение("Перечисление.ВидыСкидок.СуммаПоСтроке");
	Элементы.ТоварыСкидкаПроцент.Видимость 	= ВидСкидки = ПредопределенноеЗначение("Перечисление.ВидыСкидок.ПроцентПоСтроке");
	Элементы.ТоварыСкидкаСумма.Видимость 	= Элементы.СуммаСкидки.Видимость;
	Элементы.ТоварыИтого.Видимость 			= Объект.СуммаСкидки <> 0;
	Элементы.ТоварыСуммаНДС.Видимость 		= УПП.ПлательщикНДС И НЕ Объект.ДоговорКонтрагента.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.БезНДС");
	Элементы.ТоварыСуммаНСП.Видимость 		= УПП.ПлательщикНСП;
	Элементы.УслугиСкидкаПроцент.Видимость 	= ВидСкидки = ПредопределенноеЗначение("Перечисление.ВидыСкидок.ПроцентПоСтроке");
	Элементы.УслугиСуммаСкидки.Видимость 	= Элементы.СуммаСкидки.Видимость;
	Элементы.УслугиИтого.Видимость 			= Объект.СуммаСкидки <> 0;
	Элементы.УслугиСуммаНДС.Видимость 		= УПП.ПлательщикНДС И НЕ Объект.ДоговорКонтрагента.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.БезНДС");
	Элементы.УслугиСуммаНСП.Видимость 		= УПП.ПлательщикНСП;	
	Элементы.ТоварыПартия.Видимость 		= Объект.ПодборНоменклатурыПоПартии;

КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()    

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ЗначСтавкаНДС 					= БухгалтерскийУчетСервер.ПолучитьСтавкуНДСПоДоговору(ДатаДокумента, Объект.ДоговорКонтрагента);
	ЗначСтавкаНСП 					= БухгалтерскийУчетСервер.ПолучитьСтавкуНСППоДоговору(ДатаДокумента, Объект.ДоговорКонтрагента);
	
	УПП 							= БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДанныеДоговора 				= БухгалтерскийУчетВызовСервераПовтИсп.ДанныеДоговора(Объект.ДоговорКонтрагента);
		СтавкаНДС 					= ДанныеДоговора.СтавкаНДС;
		СтавкаНСП 					= ДанныеДоговора.СтавкаНСП;	
	КонецЕсли;

	ВидСкидки 						= Объект.ВидСкидки;
	
	ПараметрыОбъекта 	= Новый Структура("Организация, 
											|Дата, 
											|Ссылка, 
											|ВалютаДокумента, 
											|КурсВзаиморасчетов, 
											|Склад,  
											|ДоговорКонтрагента,
											|ТипЦен,
											|СтавкаНДС,  
											|ЗначСтавкаНДС, 
											|ПлательщикНДС,
											|ПлательщикНСП,
											|ВидСкидки,
											|СкидкаПроцент,
											|СуммаСкидкиОбщая");
											
	ДанныеСТЧ 			= Новый Структура("Номенклатура, 
											|Количество,
											|Цена, 
											|Всего, 
											|Доход, 
											|Итого,
											|СтавкаНДС,											
											|СуммаНДС,
											|СтавкаНСП,
											|ЗначСтавкаНСП,											 
											|СуммаНСП,
											|СкидкаПроцент,
											|СуммаСкидки,
											|СчетУчета,
											|ЕдиницаИзмерения,
											|КоличествоОстаток,
											|СпособОценки");											
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаВажныеКоманды);
	// Конец СтандартныеПодсистемы.Печать	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьДоступностьЭлементов();
	ПолучитьОбщиеИтоги();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") Тогда		
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
		ПересчетТабличнойЧасти("Товары");
				
	ИначеЕсли ИмяСобытия = "ПодборВСтрокуТабличнойЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		ОбработкаОповещенияПодборВСтрокуТабличнойЧастиТоварыНаСервере(Параметр, Элементы.Товары.ТекущиеДанные.НомерСтроки);
		ПересчетТабличнойЧасти("Товары");
		
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧастьТоварыМБП" Тогда	
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыМБПНаСервере(Параметр);
		ПересчетТабличнойЧасти("Товары");
		
	ИначеЕсли ИмяСобытия = "МодифицированДоговораКонтрагента" Тогда
		ПриИзмененииДоговораКонтрагента();
	
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	ПолучитьОбщиеИтоги();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если НЕ Объект.СуммаДокумента = ОбщийИтог Тогда
		Объект.СуммаДокумента = ОбщийИтог
	КонецЕсли;
	Если НЕ Объект.СуммаНДС = ОбщийИтогНДС Тогда
		Объект.СуммаНДС = ОбщийИтогНДС
	КонецЕсли;
	Если НЕ Объект.СуммаНСП = ОбщийИтогНСП Тогда
		Объект.СуммаНСП = ОбщийИтогНСП
	КонецЕсли;
	Если НЕ Объект.СуммаСкидки = ОбщийИтогСкидка Тогда
		Объект.СуммаСкидки = ОбщийИтогНСП
	КонецЕсли;		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подбор(Команда)
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ПодборМБП(Команда)
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	ПараметрыПодбора.Вставить("ВидПодбора" , "ПодборМБПСклад");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресПодобраннойНоменклатурыВХранилище);	
	
	Для каждого СтрокаПодбора Из ТаблицаОбработки Цикл
		ОтборСтруктура = Новый Структура;
		ОтборСтруктура.Вставить("Номенклатура", СтрокаПодбора.Номенклатура);
		Если Объект.ПодборНоменклатурыПоПартии Тогда
			ОтборСтруктура.Вставить("Партия", СтрокаПодбора.Партия);
		КонецЕсли;		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ОтборСтруктура);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + СтрокаПодбора.Количество;	
		Иначе
			СтрокаТабличнойЧасти 				= Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаПодбора);
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДС;
			СтрокаТабличнойЧасти.СтавкаНСП = СтавкаНСП;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияПодборВСтрокуТабличнойЧастиТоварыНаСервере(Параметры, НомерСтроки)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресПодобраннойНоменклатурыВХранилище);
	// Вообще-то, в данном случае в таблице ТаблицаОбработки всегда будет одна строка
	Если ТаблицаОбработки.Количество() > 0 Тогда
		СтрокаПодбора = ТаблицаОбработки[0];
		СтрокаТабличнойЧасти = Объект.Товары[НомерСтроки - 1];
	    ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаПодбора);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыМБПНаСервере(Параметр)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметр.АдресПодобраннойНоменклатурыВХранилище);	
	
	Для каждого СтрокаПодбора Из ТаблицаОбработки Цикл
		ОтборСтруктура = Новый Структура;
		ОтборСтруктура.Вставить("Номенклатура", СтрокаПодбора.Номенклатура);
		ОтборСтруктура.Вставить("ИндивидуальныйНомер", СтрокаПодбора.ИндивидуальныйНомер);
		ОтборСтруктура.Вставить("Партия", СтрокаПодбора.Партия);
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ОтборСтруктура);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + СтрокаПодбора.Количество;	
			НайденныеСтроки[0].Всего			 = СтрокаПодбора.Цена * НайденныеСтроки[0].Количество;
			НайденныеСтроки[0].предСтатусМБП = СтрокаПодбора.СтатусМБП;
		Иначе
			СтрокаТабличнойЧасти 					= Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаПодбора);
			СтрокаТабличнойЧасти.СчетУчета      = ПланыСчетов.Хозрасчетный.МБП;
			СтрокаТабличнойЧасти.Всего			 = СтрокаПодбора.Цена * СтрокаПодбора.Количество;
			СтрокаТабличнойЧасти.предСтатусМБП = СтрокаПодбора.СтатусМБП;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	УПП = БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетСервер.ПроверитьСуществованиеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	УПП = БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	Объект.БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	Объект.БанковскийСчет       = ОсновнойБанковскийСчетКонтрагента(Объект.Контрагент);
	СтруктураДоговор 			= БухгалтерскийУчетСервер.ПолучитьДоговорКонтрагента(
								Объект.Организация, 
								Объект.Контрагент, 
								ВалютаРегламентированногоУчета, 
								ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	Объект.ДоговорКонтрагента 	= СтруктураДоговор.ДоговорКонтрагента;	
	
	ПриИзмененииДоговораКонтрагента();
КонецПроцедуры

&НаКлиенте
Процедура ВидСкидкиПриИзменении(Элемент)
	
	ПриИзмененииСкидки();
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаПроцентПриИзменении(Элемент)
	
	ПриИзмененииСкидки()
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаСкидкиПриИзменении(Элемент)
	
	ПриИзмененииСкидки()
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТабличныхЧастей

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ДанныеСТЧ, ПараметрыОбъекта, "Товары", СтрокаТабличнойЧасти);		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ДанныеСТЧ, ПараметрыОбъекта, "Товары", СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары", Ложь);
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры
	
&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ПолучитьОбщиеИтоги()	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкидкаПроцентПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары", СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейВызовСервера.РасчетСкидкиВРеализации(ДанныеСТЧ, ПараметрыОбъекта);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСТЧ);
	Объект.СуммаСкидки = Объект.Товары.Итог("СуммаСкидки") + Объект.Услуги.Итог("СуммаСкидки");
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	ПолучитьОбщиеИтоги()
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ПриИзмененииУслуги(ДанныеСТЧ, ПараметрыОбъекта, "Услуги", СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ПриИзмененииУслуги(ДанныеСТЧ, ПараметрыОбъекта, "Услуги", СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ПриИзмененииУслуги(ДанныеСТЧ, ПараметрыОбъекта, "Услуги", СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСкидкаПроцентПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Услуги", СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейВызовСервера.РасчетСкидкиВРеализации(ДанныеСТЧ, ПараметрыОбъекта);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСТЧ);
	Объект.СуммаСкидки = Объект.Товары.Итог("СуммаСкидки") + Объект.Услуги.Итог("СуммаСкидки");
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДС;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДС;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ПриИзмененииЦены(ДанныеСТЧ, ПараметрыОбъекта, "Товары", СтрокаТабличнойЧасти);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти


