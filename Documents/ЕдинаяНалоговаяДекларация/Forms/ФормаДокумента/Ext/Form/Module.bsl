
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ИмяТабличнойЧасти = "СтрокиОтчета";
	
	УстановитьУсловноеОформление();

	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	Объект.КонецПериода = КонецГода(Объект.НачалоПериода);	
КонецПроцедуры

&НаКлиенте
Процедура ВсеСтрокиПриИзменении(Элемент)
	Если ВсеСтроки Тогда 
		Элементы.Расшифровка.ОтборСтрок = Неопределено;
	Иначе 
		БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "Расшифровка");
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

// Процедура - обработчик события ПриАктивизации строки табличной части СтрокиОтчета.
//
&НаКлиенте
Процедура СтрокиОтчетаПриАктивизацииСтроки(Элемент)
	Если НЕ ВсеСтроки Тогда
		БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "Расшифровка");
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПередУдалением строки табличной части СтрокиОтчета.
//
&НаКлиенте
Процедура СтрокиОтчетаПередУдалением(Элемент, Отказ)
	БухгалтерскийУчетКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтаФорма, "Расшифровка");
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования строки табличной части СтрокиОтчета.
//
&НаКлиенте
Процедура СтрокиОтчетаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		БухгалтерскийУчетКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтаФорма);
		
		Если НЕ ВсеСтроки Тогда
			БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "Расшифровка");
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыФормы = Новый Структура("НачалоПериода, КонецПериода", Объект.НачалоПериода, Объект.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыФормы, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора, "НачалоПериода,КонецПериода");
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда 
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнить", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Данные отчета будут перезаполнены. Продолжить выполнение операции?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросЗаполнить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.СтрокиОтчета.Очистить();
		Объект.Расшифровка.Очистить();
		ЗаполнитьНаСервере();
		Модифицированность = Истина;
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура настройки условного оформления форм и динамических списков .
//
&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Таблица СтрокиОтчета.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СтрокиОтчета");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтрокиОтчета.ЭтоЗаголовок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаШапкиОтчета);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	ЗаполнитьНомераПроходов();
	Рассчитать();
КонецПроцедуры

// Процедура проставляет номера проходов взависимости от групп.
//
&НаСервере
Процедура ЗаполнитьНомераПроходов()
	
	Объект.СтрокиОтчета.Загрузить(Объект.Настройка.СтрокиОтчета.Выгрузить());
	
	// Таблица групп.
	ТаблицаСтрокиОтчетаГруппы = Объект.СтрокиОтчета.Выгрузить();
	ТаблицаСтрокиОтчетаГруппы.Свернуть("Группа");
	ТаблицаСтрокиОтчетаГруппы.Индексы.Добавить("Группа");
	
	// Удалени пустых строк.
	НайденныеСтроки = ТаблицаСтрокиОтчетаГруппы.НайтиСтроки(Новый Структура("Группа", ""));
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл 
		ТаблицаСтрокиОтчетаГруппы.Удалить(СтрокаТаблицы);
	КонецЦикла;	
	
	// Добавление колонки "Проход".
	ТаблицаСтрокиОтчетаГруппы.Колонки.Добавить("Проход");
	// Всем группам присваивается уровень 1.
	ТаблицаСтрокиОтчетаГруппы.ЗаполнитьЗначения(1, "Проход");
	
	// Формирование номеров проходов.
	// Глубина вложенности 19.
	Глубина = 1;
	Пока Глубина < 20 Цикл
		// Признак пустой группы.
		ГруппаПустая = Истина;
		
		Для Каждого СтрокаТаблицы Из ТаблицаСтрокиОтчетаГруппы Цикл
			Если СтрокаТаблицы.Проход = Глубина Тогда
				// Поиск всех строк по совпадению кода строки и группы.
				НайденныеСтроки = Объект.СтрокиОтчета.НайтиСтроки(Новый Структура("КодСтроки", СтрокаТаблицы.Группа));
				
				// Обход всех строк, "пренадлежащих" текущей группе.
				Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл 
					НайденнаяСтрока = ТаблицаСтрокиОтчетаГруппы.Найти(СтрокаТабличнойЧасти.Группа, "Группа");
					// Увеличение глубины вхождения.
					Если НЕ НайденнаяСтрока = Неопределено Тогда				
						НайденнаяСтрока.Проход = Глубина + 1;
						ГруппаПустая = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Если ГруппаПустая Тогда
			Прервать;
		КонецЕсли;
		Глубина = Глубина + 1;
	КонецЦикла;
	
	// Заполнить номера проходов.
	Для Каждого СтрокаТабличнойЧасти Из Объект.СтрокиОтчета Цикл
		СтрокаТабличнойЧасти.Проход = 0;
		СтрокаТаблицы = ТаблицаСтрокиОтчетаГруппы.Найти(СтрокаТабличнойЧасти.КодСтроки, "Группа");
		Если НЕ СтрокаТаблицы = Неопределено Тогда 
			СтрокаТабличнойЧасти.Проход = СтрокаТаблицы.Проход;	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура Рассчитать()

	// В формулах могут присутствовать: ОборотыДтКт, ОборотыДт, ОборотыКт.
	
	// 1. Настройки строк.
	// 2. Строки отчета.
	// 3. Обороты.
	// 4. Данные РС "Налоговая амортизация".
	// 5. Применение формулы.
	// 6. Применение корректировки НУ.
	// 7. Применение знака.
	// 8. Применение округления.
	// 9. Строки отчета.
	// 10. Расшифровка.
	// 11. Количество проходов.
	
	// Настройки строк.
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	НастройкиСтрок.КодСтроки КАК КодСтроки,
		|	НастройкиСтрок.СчетУчета КАК СчетУчета,
		|	НастройкиСтрок.Знак КАК Знак,
		|	НастройкиСтрок.Формула КАК Формула,
		|	НастройкиСтрок.КлючСвязи КАК КлючСвязи
		|ПОМЕСТИТЬ ВременнаяТаблицаНастройкиСтрок
		|ИЗ
		|	&НастройкиСтрок КАК НастройкиСтрок
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетУчета";
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
	
	// Строки отчета.
	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	2 КАК Порядок,
		|	СтрокиОтчета.КодСтроки КАК КодСтроки,
		|	СтрокиОтчета.НаименованиеСтроки КАК НаименованиеСтроки,
		|	СтрокиОтчета.ЭтоЗаголовок КАК ЭтоЗаголовок,
		|	СтрокиОтчета.Группа КАК Группа,
		|	СтрокиОтчета.ЗнакГруппы КАК ЗнакГруппы,
		|	СтрокиОтчета.КодСтрокиПеренос КАК КодСтрокиПеренос,
		|	СтрокиОтчета.Проход КАК Проход,
		|	СтрокиОтчета.КлючСвязи КАК КлючСвязи
		|ПОМЕСТИТЬ ВременнаяТаблицаОтчет
		|ИЗ
		|	&СтрокиОтчета КАК СтрокиОтчета";
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
		
	// Обороты.
	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	3 КАК Порядок,
		|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетУчета,
		|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборотДт,
		|	0 КАК СуммаОборотКт
		|ПОМЕСТИТЬ ВременнаяТаблицаОбороты
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			СчетДТ В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ВременнаяТаблицаНастройкиСтрок.СчетУчета КАК СчетУчета
		|				ИЗ
		|					ВременнаяТаблицаНастройкиСтрок КАК ВременнаяТаблицаНастройкиСтрок),
		|			,
		|			НЕ СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СводДоходовИРасходов)
		|				И НЕ СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НераспределеннаяПрибыль),
		|			,
		|			Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	ХозрасчетныйОборотыДтКт.СчетКт,
		|	0,
		|	ХозрасчетныйОборотыДтКт.СуммаОборот
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			НЕ СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СводДоходовИРасходов)
		|				И НЕ СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НераспределеннаяПрибыль),
		|			,
		|			СчетКТ В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ВременнаяТаблицаНастройкиСтрок.СчетУчета КАК СчетУчета
		|				ИЗ
		|					ВременнаяТаблицаНастройкиСтрок КАК ВременнаяТаблицаНастройкиСтрок),
		|			,
		|			Организация = &Организация) КАК ХозрасчетныйОборотыДтКт";
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
	
	// Для строки 163.
	// ОТРИЦАТЕЛЬНЫЕ СУММЫ НАЛОГОВОГО РАСЧЕТА ПО ГРУППЕ АМОРТИЗИРОВАННЫХ АКТИВОВ НА КОНЕЦ НАЛОГОВОГО ПЕРИОДА.
	// Сумма берется из РС "Налоговая амортизация" - Увеличение СОД.
	// Для строки 255.
	// СУММЫ АМОРТИЗАЦИОННЫХ НАЧИСЛЕНИ.
	// Сумма берется из РС "Налоговая амортизация" - Амортизация за год.
	// Для строки 256.
	// РАСХОДЫ НА РЕМОНТ.
	// Сумма берется из РС "Налоговая амортизация" - Норма на ремонт.
	
	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	4 КАК Порядок,
		|	СУММА(НалоговаяАмортизация.УвеличениеСОД) КАК СуммаУвеличениеСОД,
		|	СУММА(НалоговаяАмортизация.НормаНаРемонт) КАК СуммаНормаНаРемонт,
		|	СУММА(НалоговаяАмортизация.АмортизацияЗаГод) КАК СуммаАмортизацияЗаГод
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныеНалоговойАмортизации
		|ИЗ
		|	РегистрСведений.НалоговаяАмортизация КАК НалоговаяАмортизация
		|ГДЕ
		|	НалоговаяАмортизация.Организация = &Организация
		|	И НалоговаяАмортизация.Год МЕЖДУ &НачалоПериода И &КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	4 КАК Порядок,
		|	""163"" КАК КодСтроки,
		|	НалоговаяАмортизация.СуммаУвеличениеСОД КАК СуммаПоДаннымУправленческогоУчета
		|ПОМЕСТИТЬ ВременнаяТаблицаНалоговаяАмортизация
		|ИЗ
		|	ВременнаяТаблицаДанныеНалоговойАмортизации КАК НалоговаяАмортизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4,
		|	""255"",
		|	НалоговаяАмортизация.СуммаАмортизацияЗаГод
		|ИЗ
		|	ВременнаяТаблицаДанныеНалоговойАмортизации КАК НалоговаяАмортизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4,
		|	""256"",
		|	НалоговаяАмортизация.СуммаНормаНаРемонт
		|ИЗ
		|	ВременнаяТаблицаДанныеНалоговойАмортизации КАК НалоговаяАмортизация";
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
	
	// Применение формулы.
	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	5 КАК Порядок,
		|	ВременнаяТаблицаНастройкиСтрок.КодСтроки КАК КодСтроки,
		|	ВременнаяТаблицаНастройкиСтрок.Знак КАК Знак,
		|	ВременнаяТаблицаНастройкиСтрок.СчетУчета КАК СчетУчета,
		|	ВременнаяТаблицаНастройкиСтрок.Формула КАК Формула,
		|	СУММА(ВЫБОР
		|			КОГДА ВременнаяТаблицаНастройкиСтрок.Формула = ЗНАЧЕНИЕ(Перечисление.Формулы.ОборотыДт)
		|				ТОГДА ЕСТЬNULL(ВременнаяТаблицаОбороты.СуммаОборотДт, 0)
		|			КОГДА ВременнаяТаблицаНастройкиСтрок.Формула = ЗНАЧЕНИЕ(Перечисление.Формулы.ОборотыКт)
		|				ТОГДА ЕСТЬNULL(ВременнаяТаблицаОбороты.СуммаОборотКт, 0)
		|			КОГДА ВременнаяТаблицаНастройкиСтрок.Формула = ЗНАЧЕНИЕ(Перечисление.Формулы.ОборотыДтКт)
		|					И ВременнаяТаблицаНастройкиСтрок.СчетУчета.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
		|				ТОГДА ЕСТЬNULL(ВременнаяТаблицаОбороты.СуммаОборотДт, 0) - ЕСТЬNULL(ВременнаяТаблицаОбороты.СуммаОборотКт, 0)
		|			КОГДА ВременнаяТаблицаНастройкиСтрок.Формула = ЗНАЧЕНИЕ(Перечисление.Формулы.ОборотыДтКт)
		|					И ВременнаяТаблицаНастройкиСтрок.СчетУчета.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
		|				ТОГДА ЕСТЬNULL(ВременнаяТаблицаОбороты.СуммаОборотКт, 0) - ЕСТЬNULL(ВременнаяТаблицаОбороты.СуммаОборотДт, 0)
		|			КОГДА ВременнаяТаблицаНастройкиСтрок.Формула = ЗНАЧЕНИЕ(Перечисление.Формулы.ОсобаяФормула)
		|					И ВременнаяТаблицаНастройкиСтрок.КодСтроки = ""163""
		|				ТОГДА ЕСТЬNULL(ВременнаяТаблицаНалоговаяАмортизация.СуммаПоДаннымУправленческогоУчета, 0)
		|			КОГДА ВременнаяТаблицаНастройкиСтрок.Формула = ЗНАЧЕНИЕ(Перечисление.Формулы.ОсобаяФормула)
		|					И ВременнаяТаблицаНастройкиСтрок.КодСтроки = ""255""
		|				ТОГДА ЕСТЬNULL(ВременнаяТаблицаНалоговаяАмортизация.СуммаПоДаннымУправленческогоУчета, 0)
		|			КОГДА ВременнаяТаблицаНастройкиСтрок.Формула = ЗНАЧЕНИЕ(Перечисление.Формулы.ОсобаяФормула)
		|					И ВременнаяТаблицаНастройкиСтрок.КодСтроки = ""256""
		|				ТОГДА ЕСТЬNULL(ВременнаяТаблицаНалоговаяАмортизация.СуммаПоДаннымУправленческогоУчета, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаРасчеты
		|ИЗ
		|	ВременнаяТаблицаНастройкиСтрок КАК ВременнаяТаблицаНастройкиСтрок
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОбороты КАК ВременнаяТаблицаОбороты
		|		ПО ВременнаяТаблицаНастройкиСтрок.СчетУчета = ВременнаяТаблицаОбороты.СчетУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНалоговаяАмортизация КАК ВременнаяТаблицаНалоговаяАмортизация
		|		ПО ВременнаяТаблицаНастройкиСтрок.КодСтроки = ВременнаяТаблицаНалоговаяАмортизация.КодСтроки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаНастройкиСтрок.КодСтроки,
		|	ВременнаяТаблицаНастройкиСтрок.Знак,
		|	ВременнаяТаблицаНастройкиСтрок.СчетУчета,
		|	ВременнаяТаблицаНастройкиСтрок.Формула";
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
	
	// Применение корректировки НУ.
	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	6 КАК Порядок,
		|	ВременнаяТаблицаРасчеты.КодСтроки КАК КодСтроки,
		|	ВременнаяТаблицаРасчеты.Знак КАК Знак,
		|	ВременнаяТаблицаРасчеты.СчетУчета КАК СчетУчета,
		|	ВременнаяТаблицаРасчеты.Формула КАК Формула,
		|	ВременнаяТаблицаРасчеты.Сумма - ЕСТЬNULL(КорректировкиНУОбороты.СуммаОборот, 0) КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыКорректировка
		|ИЗ
		|	ВременнаяТаблицаРасчеты КАК ВременнаяТаблицаРасчеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КорректировкиНУ.Обороты(
		|				&НачалоПериода,
		|				&КонецПериода,
		|				,
		|				Организация = &Организация
		|					И Счет В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							ВременнаяТаблицаНастройкиСтрок.СчетУчета КАК СчетУчета
		|						ИЗ
		|							ВременнаяТаблицаНастройкиСтрок КАК ВременнаяТаблицаНастройкиСтрок)) КАК КорректировкиНУОбороты
		|		ПО ВременнаяТаблицаРасчеты.СчетУчета = КорректировкиНУОбороты.Счет";
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
	
	// Применение знака.
	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	7 КАК Порядок,
		|	ВременнаяТаблицаРасчетыКорректировка.КодСтроки КАК КодСтроки,
		|	ВременнаяТаблицаРасчетыКорректировка.СчетУчета КАК СчетУчета,
		|	ВременнаяТаблицаРасчетыКорректировка.Формула КАК Формула,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаРасчетыКорректировка.Знак = ЗНАЧЕНИЕ(Перечисление.ПлюсМинус.Минус)
		|			ТОГДА -ВременнаяТаблицаРасчетыКорректировка.Сумма
		|		ИНАЧЕ ВременнаяТаблицаРасчетыКорректировка.Сумма
		|	КОНЕЦ КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыЗнак
		|ИЗ
		|	ВременнаяТаблицаРасчетыКорректировка КАК ВременнаяТаблицаРасчетыКорректировка";
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
	
	// Применение округления.
	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	8 КАК Порядок,
		|	ВременнаяТаблицаРасчетыЗнак.КодСтроки КАК КодСтроки,
		|	СУММА(ВЫБОР
		|			КОГДА &ЕдиницаОтчета = ""Целые сомы""
		|				ТОГДА ВЫРАЗИТЬ(ВременнаяТаблицаРасчетыЗнак.Сумма КАК ЧИСЛО(15, 0))
		|			КОГДА &ЕдиницаОтчета = ""Тысячи сомов""
		|				ТОГДА ВЫРАЗИТЬ(ВременнаяТаблицаРасчетыЗнак.Сумма / 1000 КАК ЧИСЛО(15, 0))
		|			КОГДА &ЕдиницаОтчета = ""Тысячи сомов/2""
		|				ТОГДА ВЫРАЗИТЬ(ВременнаяТаблицаРасчетыЗнак.Сумма / 1000 КАК ЧИСЛО(15, 2))
		|			КОГДА &ЕдиницаОтчета = ""Тысячи сомов/1""
		|				ТОГДА ВЫРАЗИТЬ(ВременнаяТаблицаРасчетыЗнак.Сумма / 1000 КАК ЧИСЛО(15, 1))
		|			ИНАЧЕ ВременнаяТаблицаРасчетыЗнак.Сумма
		|		КОНЕЦ) КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаГруппировкаПоСтроке
		|ИЗ
		|	ВременнаяТаблицаРасчетыЗнак КАК ВременнаяТаблицаРасчетыЗнак
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаРасчетыЗнак.КодСтроки";
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
	
	// Строки отчета.
	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	9 КАК Порядок,
		|	ВременнаяТаблицаОтчет.КодСтроки КАК КодСтроки,
		|	ВременнаяТаблицаОтчет.НаименованиеСтроки КАК НаименованиеСтроки,
		|	ВременнаяТаблицаОтчет.ЭтоЗаголовок КАК ЭтоЗаголовок,
		|	ВременнаяТаблицаОтчет.Группа КАК Группа,
		|	ВременнаяТаблицаОтчет.ЗнакГруппы КАК ЗнакГруппы,
		|	ВременнаяТаблицаОтчет.КодСтрокиПеренос КАК КодСтрокиПеренос,
		|	ВременнаяТаблицаОтчет.Проход КАК Проход,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаОтчет.ЗнакГруппы = ЗНАЧЕНИЕ(Перечисление.ПлюсМинус.Минус)
		|			ТОГДА -ЕСТЬNULL(ВременнаяТаблицаГруппировкаПоСтроке.Сумма, 0)
		|		ИНАЧЕ ЕСТЬNULL(ВременнаяТаблицаГруппировкаПоСтроке.Сумма, 0)
		|	КОНЕЦ КАК Сумма,
		|	ВременнаяТаблицаОтчет.КлючСвязи КАК КлючСвязи
		|ИЗ
		|	ВременнаяТаблицаОтчет КАК ВременнаяТаблицаОтчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаГруппировкаПоСтроке КАК ВременнаяТаблицаГруппировкаПоСтроке
		|		ПО ВременнаяТаблицаОтчет.КодСтроки = ВременнаяТаблицаГруппировкаПоСтроке.КодСтроки";
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
		
	// Расшифровка.
	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	10 КАК Порядок,
		|	ВременнаяТаблицаНастройкиСтрок.КодСтроки КАК КодСтроки,
		|	ВременнаяТаблицаНастройкиСтрок.СчетУчета КАК СчетУчета,
		|	ВременнаяТаблицаНастройкиСтрок.Формула КАК Формула,
		|	ВременнаяТаблицаРасчетыЗнак.Сумма КАК Сумма,
		|	ВременнаяТаблицаНастройкиСтрок.КлючСвязи КАК КлючСвязи
		|ИЗ
		|	ВременнаяТаблицаНастройкиСтрок КАК ВременнаяТаблицаНастройкиСтрок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаРасчетыЗнак КАК ВременнаяТаблицаРасчетыЗнак
		|		ПО ВременнаяТаблицаНастройкиСтрок.КодСтроки = ВременнаяТаблицаРасчетыЗнак.КодСтроки
		|			И ВременнаяТаблицаНастройкиСтрок.СчетУчета = ВременнаяТаблицаРасчетыЗнак.СчетУчета
		|			И ВременнаяТаблицаНастройкиСтрок.Формула = ВременнаяТаблицаРасчетыЗнак.Формула";
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();
	
	// Количество проходов.
	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	11 КАК Порядок,
		|	МАКСИМУМ(ВременнаяТаблицаОтчет.Проход) КАК КоличествоПроходов
		|ИЗ
		|	ВременнаяТаблицаОтчет КАК ВременнаяТаблицаОтчет";
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПСервер.ТекстРазделителяЗапросовПакета();

	Если Объект.Организация.Пустая() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Организация = &Организация", "Истина");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("НастройкиСтрок", Объект.Настройка.НастройкиСтрок.Выгрузить());
	Запрос.УстановитьПараметр("СтрокиОтчета", Объект.СтрокиОтчета.Выгрузить());

	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Объект.КонецПериода));
	Запрос.УстановитьПараметр("ЕдиницаОтчета", Объект.ЕдиницаОтчета);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Объект.СтрокиОтчета.Загрузить(РезультатЗапроса[9].Выгрузить());
	Объект.Расшифровка.Загрузить(РезультатЗапроса[10].Выгрузить());
		
	КоличествоПроходов = 0;
	Если НЕ РезультатЗапроса[11].Пустой() Тогда 
		Выборка = РезультатЗапроса[11].Выбрать();
		Выборка.Следующий();
		КоличествоПроходов = Выборка.КоличествоПроходов;
	КонецЕсли;	
	
	// Расчет групповых строк.
	Глубина = 1;
	Пока Глубина <= КоличествоПроходов Цикл
		// Выгрузка производится в цикле, чтобы учесть всю глубину вхождения.
		ТаблицаСтрокиОтчета = Объект.СтрокиОтчета.Выгрузить();
		ТаблицаСтрокиОтчета.Свернуть("Группа","Сумма");
		
		// Перенос групповых Сумм из Таблицы в ТЧ СтрокиОтчета.
		Для Каждого СтрокаТабличнойЧасти Из Объект.СтрокиОтчета Цикл
			
			// Проверка переноса строки при отрицательном значении.
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.КодСтрокиПеренос)
				И СтрокаТабличнойЧасти.Сумма < 0 Тогда
				// Перенос строк отчета.
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("КодСтроки", СтрокаТабличнойЧасти.КодСтрокиПеренос); 
				НайденныеСтроки = Объект.СтрокиОтчета.НайтиСтроки(ПараметрыОтбора);
				Если НЕ НайденныеСтроки.Количество() = 0 Тогда 
					СтрокаТабличнойЧастиПеренос = НайденныеСтроки[0];
					СтрокаТабличнойЧастиПеренос.Сумма = СтрокаТабличнойЧастиПеренос.Сумма + СтрокаТабличнойЧасти.Сумма * -1;
					
					// Перенос строк для расшифровки.
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("КодСтроки", СтрокаТабличнойЧасти.КодСтроки); 
					НайденныеСтроки = Объект.Расшифровка.НайтиСтроки(ПараметрыОтбора);
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
						НайденнаяСтрока.КлючСвязи = СтрокаТабличнойЧастиПеренос.КлючСвязи; 	
					КонецЦикла;	
				КонецЕсли;	
				
				// Обнуление.
				СтрокаТабличнойЧасти.Сумма = 0;
			КонецЕсли;	
			
			Если СтрокаТабличнойЧасти.Проход = Глубина 
				И НЕ СтрокаТабличнойЧасти.КодСтроки = "" Тогда 
				СтрокаТаблицы = ТаблицаСтрокиОтчета.Найти(СтрокаТабличнойЧасти.КодСтроки, "Группа");
				
				Если СтрокаТаблицы = Неопределено Тогда 
					СтрокаТабличнойЧасти.Сумма = 0;
				Иначе
					СтрокаТабличнойЧасти.Сумма = СтрокаТаблицы.Сумма;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Глубина = Глубина + 1;
	КонецЦикла;
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

