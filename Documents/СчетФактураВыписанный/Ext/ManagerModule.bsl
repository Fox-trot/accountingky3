#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыПроведенияДокумента

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаБланкиСчетовФактур(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СерияБланкаСФ,
		|	ВременнаяТаблицаШапка.НомерБланкаСФ,
		|	1 КАК Количество,		
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|ГДЕ
		|	НЕ ВременнаяТаблицаШапка.СерияБланкаСФ = """"
		|			И НЕ ВременнаяТаблицаШапка.НомерБланкаСФ = """"";		
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаБланкиСчетовФактур", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры 

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСчетаФактурыВыписанные(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.ДатаСФ КАК Дата,
		|	ВременнаяТаблицаШапка.Дата КАК ДатаСФ,
		|	ВременнаяТаблицаШапка.ДатаСФ КАК ДатаПоставки,
		|	ВременнаяТаблицаДокументыОснования.ДокументРеализации КАК Документ,
		|	ВременнаяТаблицаШапка.СерияБланкаСФ КАК СерияБланкаСФ,
		|	ВременнаяТаблицаШапка.НомерБланкаСФ КАК НомерБланкаСФ,
		|	ВременнаяТаблицаШапка.ВозвратТоваров,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаДокументыОснования.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.СтраныМира.Киргизия)
		|				ИЛИ ВременнаяТаблицаДокументыОснования.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПризнакиСтраны.КР)
		|		КОГДА ВременнаяТаблицаДокументыОснования.ЕАЭС
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПризнакиСтраны.ЕАЭС)
		|		КОГДА ВременнаяТаблицаШапка.ЭкспортнаяПоставка
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПризнакиСтраны.ИмпортЭкспорт)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиСтраны.ПустаяСсылка)
		|	КОНЕЦ КАК ПризнакСтраны,
		|	ВременнаяТаблицаДокументыОснования.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаДокументыОснования.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВременнаяТаблицаДокументыОснования.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаШапка.ВидПоставкиНДС КАК ВидПоставкиНДС,
		|	ВременнаяТаблицаДокументыОснования.СуммаДохода КАК СуммаБезНДС,
		|	ВременнаяТаблицаДокументыОснования.СуммаНДС КАК СуммаНДС,
		|	ВременнаяТаблицаДокументыОснования.СуммаНСП КАК СуммаНеоблагаемая
		|ПОМЕСТИТЬ ВременнаяТаблицаОбщая
		|ИЗ
		|	ВременнаяТаблицаДокументыОснования КАК ВременнаяТаблицаДокументыОснования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОбщая.Организация,
		|	ВременнаяТаблицаОбщая.Дата,
		|	ВременнаяТаблицаОбщая.Документ,
		|	ВременнаяТаблицаОбщая.СерияБланкаСФ,
		|	ВременнаяТаблицаОбщая.НомерБланкаСФ,
		|	ВременнаяТаблицаОбщая.ВозвратТоваров,
		|	ВременнаяТаблицаОбщая.ПризнакСтраны,
		|	ВременнаяТаблицаОбщая.Контрагент,
		|	ВременнаяТаблицаОбщая.ДоговорКонтрагента,
		|	ВременнаяТаблицаОбщая.СтавкаНДС,
		|	ВременнаяТаблицаОбщая.ДатаСФ,
		|	ВременнаяТаблицаОбщая.ДатаПоставки,
		|	СУММА(ВременнаяТаблицаОбщая.СуммаБезНДС) КАК СуммаБезНДС,
		|	СУММА(ВременнаяТаблицаОбщая.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ВременнаяТаблицаОбщая.СуммаНеоблагаемая) КАК СуммаНеоблагаемая,
		|	ВременнаяТаблицаОбщая.ВидПоставкиНДС
		|ИЗ
		|	ВременнаяТаблицаОбщая КАК ВременнаяТаблицаОбщая
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаОбщая.СтавкаНДС,
		|	ВременнаяТаблицаОбщая.ДоговорКонтрагента,
		|	ВременнаяТаблицаОбщая.Контрагент,
		|	ВременнаяТаблицаОбщая.ДатаСФ,
		|	ВременнаяТаблицаОбщая.ДатаПоставки,
		|	ВременнаяТаблицаОбщая.ВозвратТоваров,
		|	ВременнаяТаблицаОбщая.НомерБланкаСФ,
		|	ВременнаяТаблицаОбщая.Документ,
		|	ВременнаяТаблицаОбщая.СерияБланкаСФ,
		|	ВременнаяТаблицаОбщая.ПризнакСтраны,
		|	ВременнаяТаблицаОбщая.Организация,
		|	ВременнаяТаблицаОбщая.Дата,
		|	ВременнаяТаблицаОбщая.ВидПоставкиНДС";
	РезультатЗапроса = Запрос.Выполнить();
	           
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСчетаФактурыВыписанные", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.СерияБланкаСФ КАК СерияБланкаСФ,
		|	ТаблицаДокумента.НомерБланкаСФ КАК НомерБланкаСФ,
		|	ТаблицаДокумента.ДатаСФ КАК ДатаСФ,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаДокумента.ВидПоставкиНДС КАК ВидПоставкиНДС,
		|	ТаблицаДокумента.ЭкспортнаяПоставка КАК ЭкспортнаяПоставка,
		|	ТаблицаДокумента.ВозвратТоваров КАК ВозвратТоваров
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.СчетФактураВыписанный КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.ДокументОснования КАК ДокументРеализации,
		|	СУММА(ТаблицаДокумента.СуммаВВалютеРеглУчета) КАК Сумма,
		|	СУММА(ТаблицаДокумента.СуммаНДСВВалютеРеглУчета) КАК СуммаНДС,
		|	СУММА(ТаблицаДокумента.СуммаНСПВВалютеРеглУчета) КАК СуммаНСП,
		|	СУММА(ТаблицаДокумента.СуммаДоходаВВалютеРеглУчета) КАК СуммаДохода,
		|	СУММА(ТаблицаДокумента.ВсегоВВалютеРеглУчета) КАК Всего,
		|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаДокумента.ДокументОснования.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.ДокументОснования.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВЫРАЗИТЬ(ТаблицаДокумента.ДокументОснования.Контрагент КАК Справочник.Контрагенты).СтранаРезидентства КАК СтранаРезидентства,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ТаблицаДокумента.ДокументОснования.Контрагент КАК Справочник.Контрагенты).ПризнакСтраны = ЗНАЧЕНИЕ(Перечисление.ПризнакиСтраны.ЕАЭС)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕАЭС
		|ПОМЕСТИТЬ ВременнаяТаблицаДокументыОснования
		|ИЗ
		|	Документ.СчетФактураВыписанный.Товары КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.ДокументОснования,
		|	ТаблицаДокумента.СтавкаНДС,
		|	ТаблицаДокумента.ДокументОснования.Контрагент,
		|	ТаблицаДокумента.ДокументОснования.ДоговорКонтрагента,
		|	ВЫРАЗИТЬ(ТаблицаДокумента.ДокументОснования.Контрагент КАК Справочник.Контрагенты).СтранаРезидентства,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ТаблицаДокумента.ДокументОснования.Контрагент КАК Справочник.Контрагенты).ПризнакСтраны = ЗНАЧЕНИЕ(Перечисление.ПризнакиСтраны.ЕАЭС)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Выполнить();
	
	СформироватьТаблицаБланкиСчетовФактур(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаСчетаФактурыВыписанные(ДокументСсылка, СтруктураДополнительныеСвойства);
		
КонецПроцедуры // ИнициализироватьДанныеДокумента()

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Функция формирует табличный документ с печатной формой Счет-фактура
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, КоличествоСтрокСчетаФактуры, СчетФактураВВалюте = Ложь)
	Перем Ошибки, ПервыйДокумент, НомерСтрокиНачало;

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "СчетФактураВыписанный_СчетФактура";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетФактура.ПФ_MXL_СчетФактура");

	ТекстЗапроса = ПолучитьТекстЗапросаДокументовОснования();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("СчетФактураВВалюте", СчетФактураВВалюте);
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	// Таблицы
	ТаблицаИсходныхСумм = МассивРезультатовЗапроса[8].Выгрузить();                                      
	ТаблицаПересчитанныхСумм = МассивРезультатовЗапроса[9].Выгрузить();   
	ТаблицаИсходныхСумм.Индексы.Добавить("ДокументСФ");
	ТаблицаПересчитанныхСумм.Индексы.Добавить("ДокументСФ");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка,
		|	ТаблицаДокумента.Номер,
		|	ТаблицаДокумента.Дата,
		|	ТаблицаДокумента.Организация,
		|	ТаблицаДокумента.ВалютаДокумента,
		|	ТаблицаДокумента.ФормаОплаты,
		// Сведения об организации
		|	ТаблицаДокумента.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	ТаблицаДокумента.Организация.ИНН КАК ИННОрганизации,
		|	ТаблицаДокумента.Организация.ГНС КАК ГНСОрганизации,
		|	ТаблицаДокумента.Организация.ГНС.Код КАК КодГНСОрганизации,
		|	ТаблицаДокумента.Организация.ФайлЛоготип КАК ФайлЛоготип,
		// Сведения о банковском счете организации
		|	ТаблицаДокумента.ЭкспортнаяПоставка КАК ЭкспортнаяПоставка,
		|	ТаблицаДокумента.БанковскийСчет.НомерСчета КАК НомерБанковскогоСчетаОрганизации,
		|	ТаблицаДокумента.БанковскийСчет.Банк.Код КАК БикБанкаОрганизации,
		|	ТаблицаДокумента.БанковскийСчет.Банк.Наименование КАК НаименованиеБанкаОрганизации,
		// Сведения о контрегенте
		|	ВЫБОР
		|		КОГДА &ПечататьСчетаФактурыСГоловнымКонтрагентом
		|				И НЕ ТаблицаДокумента.Контрагент.ГоловнойКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ТаблицаДокумента.Контрагент.ГоловнойКонтрагент
		|		ИНАЧЕ ТаблицаДокумента.Контрагент
		|	КОНЕЦ КАК Контрагент,
		// Сведения о счете-фактуре
		|	ТаблицаДокумента.НомерБланкаСФ,
		|	ТаблицаДокумента.СерияБланкаСФ,
		|	ТаблицаДокумента.ДатаСФ,
		|	ТаблицаДокумента.ВидПоставкиНДС.Код КАК ВидПоставкиНДС,
		// Настройки печати
		|	ТаблицаДокумента.ПечатьВРегламентированнойВалюте,
		|	ТаблицаДокумента.ПечататьКурсИСуммуВРегламентированнойВалюте,
		|	ТаблицаДокумента.НеГруппироватьПоНоменклатуре
		|ИЗ
		|	Документ.СчетФактураВыписанный КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&СписокДокументов)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПечататьСчетаФактурыСГоловнымКонтрагентом", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьЗначениеКонстанты("ПечататьСчетаФактурыСГоловнымКонтрагентом"));
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;
		ДанныеПечати.Вставить("НомерОтчета", ?(КоличествоСтрокСчетаФактуры = 20,"001","002"));
		ДанныеПечати.Вставить("НомерПриложения", ?(КоличествоСтрокСчетаФактуры = 20,"2","3"));
		ДанныеПечати.Вставить("НомерБланкаСФ", Шапка.НомерБланкаСФ);
		ДанныеПечати.Вставить("СерияБланкаСФ", Шапка.СерияБланкаСФ);
		ДанныеПечати.Вставить("ВидПоставки", Шапка.ВидПоставкиНДС);
		ДанныеПечати.Вставить("ТипПоставки", ?(Шапка.ЭкспортнаяПоставка, "Экспорт", "Внутренняя"));
		ДанныеПечати.Вставить("ВидПлатежа", Шапка.ФормаОплаты);
		
		ДанныеПечати.Вставить("ТекстЗаголовка", НСтр("ru = 'СЧЕТ-ФАКТУРА НДС'"));

		ДанныеПечати.Вставить("ДатаПоставки", Формат(Шапка.Дата,"ДЛФ=DD"));
		ДанныеПечати.Вставить("БанкПоставщика", Шапка.НаименованиеБанкаОрганизации);		
		
		ДанныеПечати.Вставить("ФайлЛоготип", Шапка.ФайлЛоготип);
		
		ДанныеПечати.Вставить("СтавкаНДС", "");
		ДанныеПечати.Вставить("СтавкаНСП", "");
		
		ПредставлениеПоставщика = "";
		Организация = Шапка.Организация;
		ИНН = Шапка.ИННОрганизации;
	    ГНС = Шапка.ГНСОрганизации;
	    КодГНС = Шапка.КодГНСОрганизации;
		
		ПредставлениеПоставщика = Шапка.ОрганизацияПредставление;
		
		ДатаСФ = Формат(Шапка.ДатаСФ, "ДЛФ=D");
		ДанныеПечати.Вставить("Дата1", Сред(ДатаСФ,1,1));
		ДанныеПечати.Вставить("Дата2", Сред(ДатаСФ,2,1));
		ДанныеПечати.Вставить("Дата3", Сред(ДатаСФ,4,1));
		ДанныеПечати.Вставить("Дата4", Сред(ДатаСФ,5,1));
		ДанныеПечати.Вставить("Дата5", Сред(ДатаСФ,7,1));
		ДанныеПечати.Вставить("Дата6", Сред(ДатаСФ,8,1));
		ДанныеПечати.Вставить("Дата7", Сред(ДатаСФ,9,1));
		ДанныеПечати.Вставить("Дата8", Сред(ДатаСФ,10,1));
		
		ДанныеПечати.Вставить("ИННПост1", Сред(ИНН,1,1));
		ДанныеПечати.Вставить("ИННПост2", Сред(ИНН,2,1));
		ДанныеПечати.Вставить("ИННПост3", Сред(ИНН,3,1));
		ДанныеПечати.Вставить("ИННПост4", Сред(ИНН,4,1));
		ДанныеПечати.Вставить("ИННПост5", Сред(ИНН,5,1));
		ДанныеПечати.Вставить("ИННПост6", Сред(ИНН,6,1));
		ДанныеПечати.Вставить("ИННПост7", Сред(ИНН,7,1));
		ДанныеПечати.Вставить("ИННПост8", Сред(ИНН,8,1));
		ДанныеПечати.Вставить("ИННПост9", Сред(ИНН,9,1));
		ДанныеПечати.Вставить("ИННПост10", Сред(ИНН,10,1));
		ДанныеПечати.Вставить("ИННПост11", Сред(ИНН,11,1));
		ДанныеПечати.Вставить("ИННПост12", Сред(ИНН,12,1));
		ДанныеПечати.Вставить("ИННПост13", Сред(ИНН,13,1));
		ДанныеПечати.Вставить("ИННПост14", Сред(ИНН,14,1));

        БИК = Шапка.БикБанкаОрганизации;
		ДанныеПечати.Вставить("КодБанкаПоставщика1", Сред(БИК,1,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика2", Сред(БИК,2,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика3", Сред(БИК,3,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика4", Сред(БИК,4,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика5", Сред(БИК,5,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика6", Сред(БИК,6,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика7", Сред(БИК,7,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика8", Сред(БИК,8,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика9", Сред(БИК,9,1));		
		
		НомерСчета = Шапка.НомерБанковскогоСчетаОрганизации;
		ДанныеПечати.Вставить("СчетПоставщика1", Сред(НомерСчета,1,1));		
		ДанныеПечати.Вставить("СчетПоставщика2", Сред(НомерСчета,2,1));		
		ДанныеПечати.Вставить("СчетПоставщика3", Сред(НомерСчета,3,1));		
		ДанныеПечати.Вставить("СчетПоставщика4", Сред(НомерСчета,4,1));		
		ДанныеПечати.Вставить("СчетПоставщика5", Сред(НомерСчета,5,1));		
		ДанныеПечати.Вставить("СчетПоставщика6", Сред(НомерСчета,6,1));		
		ДанныеПечати.Вставить("СчетПоставщика7", Сред(НомерСчета,7,1));		
		ДанныеПечати.Вставить("СчетПоставщика8", Сред(НомерСчета,8,1));		
		ДанныеПечати.Вставить("СчетПоставщика9", Сред(НомерСчета,9,1));		
		ДанныеПечати.Вставить("СчетПоставщика10", Сред(НомерСчета,10,1));		
		ДанныеПечати.Вставить("СчетПоставщика11", Сред(НомерСчета,11,1));		
		ДанныеПечати.Вставить("СчетПоставщика12", Сред(НомерСчета,12,1));		
		ДанныеПечати.Вставить("СчетПоставщика13", Сред(НомерСчета,13,1));		
		ДанныеПечати.Вставить("СчетПоставщика14", Сред(НомерСчета,14,1));		
		ДанныеПечати.Вставить("СчетПоставщика15", Сред(НомерСчета,15,1));		
		ДанныеПечати.Вставить("СчетПоставщика16", Сред(НомерСчета,16,1));		
		
		ДанныеПечати.Вставить("ГНСПоставщика1", Сред(КодГНС,1,1));		
		ДанныеПечати.Вставить("ГНСПоставщика2", Сред(КодГНС,2,1));		
		ДанныеПечати.Вставить("ГНСПоставщика3", Сред(КодГНС,3,1));		

		ДанныеПечати.Вставить("НаименованиеГНСПоставщика", ГНС);		
		ДанныеПечати.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);		
		 
		КонтактныеДанные = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСведенияОбОрганизации(Организация, Шапка.Дата);
		ДанныеПечати.Вставить("АдресПоставщика", КонтактныеДанные.АдрЮР);

		// Данные по контрагенту
		СведенияОКонтрагенте = БухгалтерскийУчетСервер.ПолучитьСведенияОКонтрагенте(Шапка.Контрагент);
		
		ВыводДопИнформацииПоКонтрагенту = БухгалтерскийУчетСервер.ПолучитьПризнакПатентаПоКонтрагенту(Шапка.Контрагент) ИЛИ
			(Шапка.Контрагент.СтранаРезидентства = Справочники.СтраныМира.Киргизия ИЛИ Шапка.Контрагент.СтранаРезидентства.УчастникЕАЭС);
		
		Если ВыводДопИнформацииПоКонтрагенту Тогда
			ДанныеПечати.Вставить("НаименованиеГНСПокупателя", СведенияОКонтрагенте.ГНСНаименование);
			КодГНСКонтрагента = СведенияОКонтрагенте.ГНСКод;
			ДанныеПечати.Вставить("ГНСПокупателя1", Сред(КодГНСКонтрагента,1,1));		
			ДанныеПечати.Вставить("ГНСПокупателя2", Сред(КодГНСКонтрагента,2,1));		
			ДанныеПечати.Вставить("ГНСПокупателя3", Сред(КодГНСКонтрагента,3,1));
		Иначе
			ДанныеПечати.Вставить("НаименованиеГНСПокупателя", "отсутствует");
		КонецЕсли;
		
		ДанныеПечати.Вставить("ПредставлениеПокупателя", СведенияОКонтрагенте.НаименованиеПолное);
		ДанныеПечати.Вставить("АдресПокупателя", СведенияОКонтрагенте.АдрЮР);		
		
		ИННКонтрагента = СведенияОКонтрагенте.ИНН;
		ДанныеПечати.Вставить("ИННПок1", Сред(ИННКонтрагента,1,1));		
		ДанныеПечати.Вставить("ИННПок2", Сред(ИННКонтрагента,2,1));		
		ДанныеПечати.Вставить("ИННПок3", Сред(ИННКонтрагента,3,1));		
		ДанныеПечати.Вставить("ИННПок4", Сред(ИННКонтрагента,4,1));		
		ДанныеПечати.Вставить("ИННПок5", Сред(ИННКонтрагента,5,1));		
		ДанныеПечати.Вставить("ИННПок6", Сред(ИННКонтрагента,6,1));		
		ДанныеПечати.Вставить("ИННПок7", Сред(ИННКонтрагента,7,1));		
		ДанныеПечати.Вставить("ИННПок8", Сред(ИННКонтрагента,8,1));		
		ДанныеПечати.Вставить("ИННПок9", Сред(ИННКонтрагента,9,1));		
		ДанныеПечати.Вставить("ИННПок10", Сред(ИННКонтрагента,10,1));		
		ДанныеПечати.Вставить("ИННПок11", Сред(ИННКонтрагента,11,1));		
		ДанныеПечати.Вставить("ИННПок12", Сред(ИННКонтрагента,12,1));		
		ДанныеПечати.Вставить("ИННПок13", Сред(ИННКонтрагента,13,1));		
		ДанныеПечати.Вставить("ИННПок14", Сред(ИННКонтрагента,14,1));		
				
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.НомерСчета) И ВыводДопИнформацииПоКонтрагенту Тогда 
			НомерСчетаКонтрагента = СведенияОКонтрагенте.НомерСчета;
			ДанныеПечати.Вставить("СчетПокупателя1", Сред(НомерСчетаКонтрагента,1,1));		
			ДанныеПечати.Вставить("СчетПокупателя2", Сред(НомерСчетаКонтрагента,2,1));		
			ДанныеПечати.Вставить("СчетПокупателя3", Сред(НомерСчетаКонтрагента,3,1));		
			ДанныеПечати.Вставить("СчетПокупателя4", Сред(НомерСчетаКонтрагента,4,1));		
			ДанныеПечати.Вставить("СчетПокупателя5", Сред(НомерСчетаКонтрагента,5,1));		
			ДанныеПечати.Вставить("СчетПокупателя6", Сред(НомерСчетаКонтрагента,6,1));		
			ДанныеПечати.Вставить("СчетПокупателя7", Сред(НомерСчетаКонтрагента,7,1));		
			ДанныеПечати.Вставить("СчетПокупателя8", Сред(НомерСчетаКонтрагента,8,1));		
			ДанныеПечати.Вставить("СчетПокупателя9", Сред(НомерСчетаКонтрагента,9,1));		
			ДанныеПечати.Вставить("СчетПокупателя10", Сред(НомерСчетаКонтрагента,10,1));		
			ДанныеПечати.Вставить("СчетПокупателя11", Сред(НомерСчетаКонтрагента,11,1));		
			ДанныеПечати.Вставить("СчетПокупателя12", Сред(НомерСчетаКонтрагента,12,1));		
			ДанныеПечати.Вставить("СчетПокупателя13", Сред(НомерСчетаКонтрагента,13,1));		
			ДанныеПечати.Вставить("СчетПокупателя14", Сред(НомерСчетаКонтрагента,14,1));
			ДанныеПечати.Вставить("СчетПокупателя15", Сред(НомерСчетаКонтрагента,15,1));		
			ДанныеПечати.Вставить("СчетПокупателя16", Сред(НомерСчетаКонтрагента,16,1));
			
			БикБанкаКонтрагента = СведенияОКонтрагенте.БИКБанка;
			ДанныеПечати.Вставить("КодБанкаПокупателя1", Сред(БикБанкаКонтрагента,1,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя2", Сред(БикБанкаКонтрагента,2,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя3", Сред(БикБанкаКонтрагента,3,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя4", Сред(БикБанкаКонтрагента,4,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя5", Сред(БикБанкаКонтрагента,5,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя6", Сред(БикБанкаКонтрагента,6,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя7", Сред(БикБанкаКонтрагента,7,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя8", Сред(БикБанкаКонтрагента,8,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя9", Сред(БикБанкаКонтрагента,9,1));		
			
			ДанныеПечати.Вставить("БанкПокупателя", СведенияОКонтрагенте.Банк);
		Иначе 	
			// Отсутствует
			ДанныеПечати.Вставить("СчетПокупателя1","о");
			ДанныеПечати.Вставить("СчетПокупателя2","т");
			ДанныеПечати.Вставить("СчетПокупателя3","с");
			ДанныеПечати.Вставить("СчетПокупателя4","у");
			ДанныеПечати.Вставить("СчетПокупателя5","т");
			ДанныеПечати.Вставить("СчетПокупателя6","с");
			ДанныеПечати.Вставить("СчетПокупателя7","т");
			ДанныеПечати.Вставить("СчетПокупателя8","в");
			ДанныеПечати.Вставить("СчетПокупателя9","у");
			ДанныеПечати.Вставить("СчетПокупателя10","е");
			ДанныеПечати.Вставить("СчетПокупателя11","т");	

			ДанныеПечати.Вставить("БанкПокупателя", "отсутствует");
		КонецЕсли;	
		
		// Таблицы
		ПараметрыОтбора = Новый Структура("ДокументСФ", Шапка.Ссылка);
		
		ПересчитаннаяТаблица = Неопределено;
		ИсходнаяТаблица = Неопределено;
		
		Если Шапка.ПечатьВРегламентированнойВалюте ИЛИ Шапка.ПечататьКурсИСуммуВРегламентированнойВалюте ИЛИ СчетФактураВВалюте Тогда
			ПересчитаннаяТаблица = ТаблицаПересчитанныхСумм.Скопировать(ПараметрыОтбора);
			ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		КонецЕсли;	
		
		Если НЕ Шапка.ПечатьВРегламентированнойВалюте Тогда
			ИсходнаяТаблица = ТаблицаИсходныхСумм.Скопировать(ПараметрыОтбора);	
		КонецЕсли;	   
		
		КоличествоСтрок = 0;
		
		//ВсегоСуммаСкидкиИсходная = 0;
		//ВсегоСуммаСкидкиПересчитанная = 0;
		
		// Итоги по исходным суммам
		Если ИсходнаяТаблица <> Неопределено Тогда
			ВсегоСтоимостьИсходная = ИсходнаяТаблица.Итог("Стоимость");
			ВсегоИсходная = ИсходнаяТаблица.Итог("Всего");
			ВсегоНДСИсходная = ИсходнаяТаблица.Итог("СуммаНДС");
			ВсегоНСПИсходная = ИсходнаяТаблица.Итог("СуммаНСП");
			//ВсегоСуммаСкидкиИсходная = ИсходнаяТаблица.Итог("СуммаСкидки");
			КоличествоСтрок = КоличествоСтрок + ИсходнаяТаблица.Количество();
			
			// Если пересчитанных сумм нет, то итоговая строка будет одна,
			// поэтому используется строка итогов, которая находится в области "Подвал" и 
			// названия параметров задаются соответственно этой области. 
			// Если пересчитанные суммы есть, то итоговых строки будет две 
			// (с исходными суммами и с пересчитанными), поэтому будет задействована область
			// "ИсходныйИтог" и параметры соответственно именуем как они указаны в данной области.
			Если ПересчитаннаяТаблица = Неопределено Тогда
				ДанныеПечати.Вставить("ВсегоСтоимость", ВсегоСтоимостьИсходная);
				ДанныеПечати.Вставить("Всего", ВсегоИсходная);
				ДанныеПечати.Вставить("ВсегоНДС", ВсегоНДСИсходная);
				ДанныеПечати.Вставить("ВсегоНСП", ВсегоНСПИсходная);
				
				Если Шапка.ПечатьВРегламентированнойВалюте Тогда 
					ДанныеПечати.Вставить("Валюта", " (" + ВалютаРегламентированногоУчета + ")");
				Иначе
					ДанныеПечати.Вставить("Валюта", " (" + Шапка.ВалютаДокумента + ")");
				КонецЕсли;
			Иначе
				ДанныеПечати.Вставить("ВсегоСтоимостьИсходная", ВсегоСтоимостьИсходная);
				ДанныеПечати.Вставить("ВсегоИсходная", ВсегоИсходная);
				ДанныеПечати.Вставить("ВсегоНДСИсходная", ВсегоНДСИсходная);
				ДанныеПечати.Вставить("ВсегоНСПИсходная", ВсегоНСПИсходная);
				
				ДанныеПечати.Вставить("ВалютаИсходная", " (" + Шапка.ВалютаДокумента + ")");
			КонецЕсли;
		КонецЕсли;
		
		// Итоги по пересчитанным суммам
		Если ПересчитаннаяТаблица <> Неопределено Тогда
			ВсегоСтоимостьПересчитанная = ПересчитаннаяТаблица.Итог("Стоимость");
			ВсегоПересчитанная = ПересчитаннаяТаблица.Итог("Всего");
			ВсегоНДСПересчитанная = ПересчитаннаяТаблица.Итог("СуммаНДС");
			ВсегоНСППересчитанная = ПересчитаннаяТаблица.Итог("СуммаНСП");
			//ВсегоСуммаСкидкиПересчитанная = ПересчитаннаяТаблица.Итог("СуммаСкидки");
			КоличествоСтрок = КоличествоСтрок + ПересчитаннаяТаблица.Количество();
			
			ДанныеПечати.Вставить("ВсегоСтоимость", ВсегоСтоимостьПересчитанная);
			ДанныеПечати.Вставить("Всего", ВсегоПересчитанная);
			ДанныеПечати.Вставить("ВсегоНДС", ВсегоНДСПересчитанная);
			ДанныеПечати.Вставить("ВсегоНСП", ВсегоНСППересчитанная);
			
			ДанныеПечати.Вставить("Валюта", " (" + ВалютаРегламентированногоУчета + ")");
		КонецЕсли;
		
		//// Скидка
		//ЕстьСкидка = Ложь;
		//Если ВсегоСуммаСкидкиИсходная <> 0 Тогда								
		//	ЕстьСкидка = Истина;
		//	ДанныеПечати.Вставить("СтоимостьСкидка", 0);
		//	ДанныеПечати.Вставить("СуммаНДССкидка",  0);
		//	ДанныеПечати.Вставить("СуммаНСПСкидка",  0);
		//	ДанныеПечати.Вставить("ВсегоСкидка", 	 0);
		//КонецЕсли;
		//
		//ЕстьПересчитаннаяСкидка = Ложь;
		//Если ВсегоСуммаСкидкиПересчитанная <> 0 Тогда								
		//	ЕстьПересчитаннаяСкидка = Истина;
		//	ДанныеПечати.Вставить("СтоимостьСкидкаПересчитанная", 0);
		//	ДанныеПечати.Вставить("СуммаНДССкидкаПересчитанная",  0);
		//	ДанныеПечати.Вставить("СуммаНСПСкидкаПересчитанная",  0);
		//	ДанныеПечати.Вставить("ВсегоСкидкаПересчитанная", 	  0);
		//КонецЕсли;
		
		// Информация подвала
		ТекстОКоличестве = СтрШаблон("%1 (%2)", КоличествоСтрокСчетаФактуры, ?(КоличествоСтрокСчетаФактуры = 20,"(двадцати)","(семи)"));
		ДанныеПечати.Вставить("КоличествоСтрокСчетаФактуры", ТекстОКоличестве);
		ДанныеПечати.Вставить("НомерОтчета", ?(КоличествоСтрокСчетаФактуры = 20,"001","002"));
		
		// Области
		МассивОбластейМакета = Новый Массив;
		
		Если СчетФактураВВалюте Тогда
			МассивОбластейМакета.Добавить("ЗаголовокСФВВалюте");
		Иначе
			МассивОбластейМакета.Добавить("Заголовок");
		КонецЕсли;
		
		МассивОбластейМакета.Добавить("Шапка");
		
		Если СчетФактураВВалюте Тогда
			МассивОбластейМакета.Добавить("ШапкаТаблицыВВалюте");
			МассивОбластейМакета.Добавить("СтрокаСФВВалюте");
		Иначе
			МассивОбластейМакета.Добавить("ШапкаТаблицы");
			МассивОбластейМакета.Добавить("Строка");
		КонецЕсли;	
		
		//Если ЕстьСкидка Тогда 
		//	МассивОбластейМакета.Добавить("СтрокаСоСкидкой");
		//КонецЕсли;
		//
		//Если ЕстьПересчитаннаяСкидка Тогда 
		//	МассивОбластейМакета.Добавить("ПересчитаннаяСтрокаСоСкидкой");
		//КонецЕсли;
		
		Если ДанныеПечати.Свойство("ВалютаИсходная") Тогда
			МассивОбластейМакета.Добавить("ИсходныйИтог");
		КонецЕсли;	
		
		МассивОбластейМакета.Добавить("ПодвалСФаксимиле");
	
		ДанныеПечатиСтроки = Новый Структура("КодТовара1, КодТовара2, КодТовара3, КодТовара4","0","0","0","0");
		
		ДанныеПечатиПустаяСтрока = Новый Структура();
		ДанныеПечатиПустаяСтрока.Вставить("КодТовара1", 				"");
		ДанныеПечатиПустаяСтрока.Вставить("КодТовара2", 				"");
		ДанныеПечатиПустаяСтрока.Вставить("КодТовара3", 				"");
		ДанныеПечатиПустаяСтрока.Вставить("КодТовара4", 				"");
		ДанныеПечатиПустаяСтрока.Вставить("Количество", 				"Х");
		ДанныеПечатиПустаяСтрока.Вставить("СтавкаНДС", 					"Х");
		ДанныеПечатиПустаяСтрока.Вставить("СтавкаНСП", 					"Х");
		ДанныеПечатиПустаяСтрока.Вставить("Стоимость", 					"Х");	
		ДанныеПечатиПустаяСтрока.Вставить("СуммаНДС", 					"Х");
		ДанныеПечатиПустаяСтрока.Вставить("СуммаНСП", 					"Х");
		ДанныеПечатиПустаяСтрока.Вставить("НоменклатураПредставление", 	"Х");   
		ДанныеПечатиПустаяСтрока.Вставить("ЕдиницаИзмерения",			"Х");
		ДанныеПечатиПустаяСтрока.Вставить("Цена", 						"Х");
		ДанныеПечатиПустаяСтрока.Вставить("Всего", 						"Х");
		
		Если СчетФактураВВалюте Тогда
			ДанныеПечатиПустаяСтрока.Вставить("НоменклатураПредставлениеСКурсом", 	"Х");
			ДанныеПечатиПустаяСтрока.Вставить("ЦенаВРеглВалюте", 					"Х");
			ДанныеПечатиПустаяСтрока.Вставить("СтоимостьВРеглВалюте", 				"Х");
			ДанныеПечатиПустаяСтрока.Вставить("СуммаНДСВРеглВалюте", 				"Х");
			ДанныеПечатиПустаяСтрока.Вставить("СуммаНСПВРеглВалюте", 				"Х");
			ДанныеПечатиПустаяСтрока.Вставить("ВсегоВРеглВалюте", 					"Х");
		КонецЕсли;
				
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			
			Если ИмяОбласти <> "Строка" И ИмяОбласти <> "СтрокаСФВВалюте" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			Иначе	
				Если (ИсходнаяТаблица <> Неопределено И ПересчитаннаяТаблица <> Неопределено)
					ИЛИ ИсходнаяТаблица <> Неопределено Тогда
					
					ОбластьМакетаДопСтрока = Неопределено;
					
					// Заготовка необходимых структур
					Если ПересчитаннаяТаблица <> Неопределено Тогда
						ОбластьМакетаДопСтрока = Макет.ПолучитьОбласть("ПересчитаннаяСтрока");
						СтруктураОтбора = Новый Структура();
						СтруктураОтбора.Вставить("ДокументСФ", );
						СтруктураОтбора.Вставить("Ссылка", );
						СтруктураОтбора.Вставить("Номенклатура", );
						
						СтруктураНоменклатура = Новый Структура();
						Если СчетФактураВВалюте Тогда
							СтруктураНоменклатура.Вставить("НоменклатураПредставлениеСКурсом", "");	
						Иначе
							СтруктураНоменклатура.Вставить("НоменклатураПредставление", "");	
						КонецЕсли;
					КонецЕсли;
						
					Для Каждого СтрокаТаблицы Из ИсходнаяТаблица Цикл
						КодТНВЭД = ?(ЗначениеЗаполнено(СтрокаТаблицы.КодТНВЭД), СтрокаТаблицы.КодТНВЭД, "0000");
						ДанныеПечатиСтроки.КодТовара1 = Сред(КодТНВЭД,1,1);
						ДанныеПечатиСтроки.КодТовара2 = Сред(КодТНВЭД,2,1);
						ДанныеПечатиСтроки.КодТовара3 = Сред(КодТНВЭД,3,1);
						ДанныеПечатиСтроки.КодТовара4 = Сред(КодТНВЭД,4,1);
						
						Если ОбластьМакетаДопСтрока = Неопределено Тогда
							// Ставки
							ЗначениеСтавкиНСП = УчетНДСВызовСервера.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, СтрокаТаблицы.СтавкаНСП);	
							ЗначениеСтавкиНДС = УчетНДСВызовСервера.ПолучитьСтавкуНДС(Шапка.Дата, СтрокаТаблицы.СтавкаНДС);
							
							ДанныеПечати.СтавкаНДС = ?(ЗначениеЗаполнено(ЗначениеСтавкиНДС), Строка(ЗначениеСтавкиНДС) + "%","");
							ДанныеПечати.СтавкаНСП = ?(ЗначениеЗаполнено(ЗначениеСтавкиНСП), Строка(ЗначениеСтавкиНСП) + "%","");
							
							ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
							ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
							ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСтроки);
							
							ТабличныйДокумент.Вывести(ОбластьМакета);
							
							//Если ЕстьСкидка Тогда
							//	СтоимостьСкидка = СтрокаТаблицы.СуммаСкидки * 100 / (100 + ЗначениеСтавкиНДС + ЗначениеСтавкиНСП);
							//	СуммаНДССкидка 	= СтрокаТаблицы.СуммаСкидки * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС + ЗначениеСтавкиНСП);
							//	
							//	ДанныеПечати.СтоимостьСкидка = ДанныеПечати.СтоимостьСкидка - СтоимостьСкидка;
							//	ДанныеПечати.СуммаНДССкидка = ДанныеПечати.СуммаНДССкидка - СуммаНДССкидка;
							//	ДанныеПечати.СуммаНСПСкидка = ДанныеПечати.СуммаНСПСкидка - (СтрокаТаблицы.СуммаСкидки - СтоимостьСкидка - СуммаНДССкидка);
							//	ДанныеПечати.ВсегоСкидка = ДанныеПечати.ВсегоСкидка - СтрокаТаблицы.СуммаСкидки;
							//КонецЕсли;	
								
						// Вывод основной строки с исходной суммой (к номенклатуре добавляется курс),
						// а затем вывод дополнительной строки с пересчитанными суммами.
						Иначе
							Если СчетФактураВВалюте Тогда
								СтруктураНоменклатура.НоменклатураПредставлениеСКурсом = СтрШаблон(НСтр("ru = '%1, курс %2'"),
									СтрокаТаблицы.НоменклатураПредставление,
									СтрокаТаблицы.Курс);
							Иначе	
								СтруктураНоменклатура.НоменклатураПредставление = СтрШаблон(НСтр("ru = '%1, курс %2'"),
									СтрокаТаблицы.НоменклатураПредставление,
									СтрокаТаблицы.Курс);
							КонецЕсли; 
							
							// Ставки
							ЗначениеСтавкиНСП = УчетНДСВызовСервера.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, СтрокаТаблицы.СтавкаНСП);	
							ЗначениеСтавкиНДС = УчетНДСВызовСервера.ПолучитьСтавкуНДС(Шапка.Дата, СтрокаТаблицы.СтавкаНДС);
							
							ДанныеПечати.СтавкаНДС = ?(ЗначениеЗаполнено(ЗначениеСтавкиНДС), Строка(ЗначениеСтавкиНДС) + "%","");
							ДанныеПечати.СтавкаНСП = ?(ЗначениеЗаполнено(ЗначениеСтавкиНСП), Строка(ЗначениеСтавкиНСП) + "%","");
							
							ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
							ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
							ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСтроки);
							ОбластьМакета.Параметры.Заполнить(СтруктураНоменклатура);
							
							Если СчетФактураВВалюте Тогда
								СтрутктураЦены = Новый Структура();
								СтрутктураЦены.Вставить("Цена", Строка(Формат(СтрокаТаблицы.Цена, "ЧДЦ=2; ЧВН=")) + " (" + Шапка.ВалютаДокумента + ")");
								ОбластьМакета.Параметры.Заполнить(СтрутктураЦены);
							КонецЕсли;
							
							Если НЕ СчетФактураВВалюте Тогда
								ТабличныйДокумент.Вывести(ОбластьМакета);
							КонецЕсли;
							
							//Если ЕстьСкидка Тогда
							//	СтоимостьСкидка = СтрокаТаблицы.СуммаСкидки * 100 / (100 + ЗначениеСтавкиНДС + ЗначениеСтавкиНСП);
							//	СуммаНДССкидка 	= СтрокаТаблицы.СуммаСкидки * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС + ЗначениеСтавкиНСП);
							//	
							//	ДанныеПечати.СтоимостьСкидка = ДанныеПечати.СтоимостьСкидка - СтоимостьСкидка;
							//	ДанныеПечати.СуммаНДССкидка = ДанныеПечати.СуммаНДССкидка - СуммаНДССкидка;
							//	ДанныеПечати.СуммаНСПСкидка = ДанныеПечати.СуммаНСПСкидка - (СтрокаТаблицы.СуммаСкидки - СтоимостьСкидка - СуммаНДССкидка);
							//	ДанныеПечати.ВсегоСкидка = ДанныеПечати.ВсегоСкидка - СтрокаТаблицы.СуммаСкидки;
							//КонецЕсли;	
								
							ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы);
							
							Строки = ПересчитаннаяТаблица.НайтиСтроки(СтруктураОтбора);
							Если Строки.Количество() > 0 Тогда
								Данные = Строки[0];
								
								Если СчетФактураВВалюте Тогда
									СтрутктураСуммВРеглВалюте = Новый Структура();
									СтрутктураСуммВРеглВалюте.Вставить("ЦенаВРеглВалюте", 		Строка(Формат(Данные.Цена, "ЧДЦ=2; ЧВН=")) + " (" + ВалютаРегламентированногоУчета + ")");
									СтрутктураСуммВРеглВалюте.Вставить("СтоимостьВРеглВалюте", 	Данные.Стоимость);
									СтрутктураСуммВРеглВалюте.Вставить("СуммаНДСВРеглВалюте", 	Данные.СуммаНДС);
									СтрутктураСуммВРеглВалюте.Вставить("СуммаНСПВРеглВалюте", 	Данные.СуммаНСП);
									СтрутктураСуммВРеглВалюте.Вставить("ВсегоВРеглВалюте", 		Данные.Всего);
									ОбластьМакета.Параметры.Заполнить(СтрутктураСуммВРеглВалюте);
									
								Иначе	
									КодТНВЭД = ?(ЗначениеЗаполнено(Данные.КодТНВЭД), Данные.КодТНВЭД, "0000");
									ДанныеПечатиСтроки.КодТовара1 = Сред(КодТНВЭД,1,1);
									ДанныеПечатиСтроки.КодТовара2 = Сред(КодТНВЭД,2,1);
									ДанныеПечатиСтроки.КодТовара3 = Сред(КодТНВЭД,3,1);
									ДанныеПечатиСтроки.КодТовара4 = Сред(КодТНВЭД,4,1);
									
									// Ставки
									ЗначениеСтавкиНСП = УчетНДСВызовСервера.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, Данные.СтавкаНСП);	
									ЗначениеСтавкиНДС = УчетНДСВызовСервера.ПолучитьСтавкуНДС(Шапка.Дата, Данные.СтавкаНДС);
									
									ДанныеПечати.СтавкаНДС = ?(ЗначениеЗаполнено(ЗначениеСтавкиНДС), Строка(ЗначениеСтавкиНДС) + "%","");
									ДанныеПечати.СтавкаНСП = ?(ЗначениеЗаполнено(ЗначениеСтавкиНСП), Строка(ЗначениеСтавкиНСП) + "%","");
									
									ОбластьМакета.Параметры.Заполнить(Данные);
									ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
									ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСтроки);
								КонецЕсли;	
								
								ТабличныйДокумент.Вывести(ОбластьМакета);
								
								//Если ЕстьПересчитаннаяСкидка Тогда
								//	СтоимостьСкидка = Данные.СуммаСкидки * 100 / (100 + ЗначениеСтавкиНДС + ЗначениеСтавкиНСП);
								//	СуммаНДССкидка 	= Данные.СуммаСкидки * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС + ЗначениеСтавкиНСП);
								//	
								//	ДанныеПечати.СтоимостьСкидкаПересчитанная = ДанныеПечати.СтоимостьСкидкаПересчитанная - СтоимостьСкидка;
								//	ДанныеПечати.СуммаНДССкидкаПересчитанная = ДанныеПечати.СуммаНДССкидкаПересчитанная - СуммаНДССкидка;
								//	ДанныеПечати.СуммаНСПСкидкаПересчитанная = ДанныеПечати.СуммаНСПСкидкаПересчитанная - (Данные.СуммаСкидки - СтоимостьСкидка - СуммаНДССкидка);
								//	ДанныеПечати.ВсегоСкидкаПересчитанная = ДанныеПечати.ВсегоСкидкаПересчитанная - Данные.СуммаСкидки;
								//КонецЕсли;	
							КонецЕсли;
						КонецЕсли;	
					КонецЦикла;
					
				Иначе
					Для Каждого СтрокаТаблицы Из ПересчитаннаяТаблица Цикл 
						КодТНВЭД = ?(ЗначениеЗаполнено(СтрокаТаблицы.КодТНВЭД), СтрокаТаблицы.КодТНВЭД, "0000");
						ДанныеПечатиСтроки.КодТовара1 = Сред(КодТНВЭД,1,1);
						ДанныеПечатиСтроки.КодТовара2 = Сред(КодТНВЭД,2,1);
						ДанныеПечатиСтроки.КодТовара3 = Сред(КодТНВЭД,3,1);
						ДанныеПечатиСтроки.КодТовара4 = Сред(КодТНВЭД,4,1);
						
						// Ставки
						ЗначениеСтавкиНСП = УчетНДСВызовСервера.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, СтрокаТаблицы.СтавкаНСП);	
						ЗначениеСтавкиНДС = УчетНДСВызовСервера.ПолучитьСтавкуНДС(Шапка.Дата, СтрокаТаблицы.СтавкаНДС);
						
						ДанныеПечати.СтавкаНДС = ?(ЗначениеЗаполнено(ЗначениеСтавкиНДС), Строка(ЗначениеСтавкиНДС) + "%","");
						ДанныеПечати.СтавкаНСП = ?(ЗначениеЗаполнено(ЗначениеСтавкиНСП), Строка(ЗначениеСтавкиНСП) + "%","");
						
						ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
						ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
						ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСтроки);
						ТабличныйДокумент.Вывести(ОбластьМакета);
						
						//Если ЕстьПересчитаннаяСкидка Тогда
						//	СтоимостьСкидка = СтрокаТаблицы.СуммаСкидки * 100 / (100 + ЗначениеСтавкиНДС + ЗначениеСтавкиНСП);
						//	СуммаНДССкидка 	= СтрокаТаблицы.СуммаСкидки * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС + ЗначениеСтавкиНСП);
						//	
						//	ДанныеПечати.СтоимостьСкидкаПересчитанная = ДанныеПечати.СтоимостьСкидкаПересчитанная - СтоимостьСкидка;
						//	ДанныеПечати.СуммаНДССкидкаПересчитанная = ДанныеПечати.СуммаНДССкидкаПересчитанная - СуммаНДССкидка;
						//	ДанныеПечати.СуммаНСПСкидкаПересчитанная = ДанныеПечати.СуммаНСПСкидкаПересчитанная - (СтрокаТаблицы.СуммаСкидки - СтоимостьСкидка - СуммаНДССкидка);
						//	ДанныеПечати.ВсегоСкидкаПересчитанная = ДанныеПечати.ВсегоСкидкаПересчитанная - СтрокаТаблицы.СуммаСкидки;
						//КонецЕсли;
					КонецЦикла;
				КонецЕсли;
						
				// Добавление пустых строк
				Если КоличествоСтрокСчетаФактуры > КоличествоСтрок Тогда 
					Для Счетчик = 1 По КоличествоСтрокСчетаФактуры - КоличествоСтрок Цикл
						ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПустаяСтрока);
						ТабличныйДокумент.Вывести(ОбластьМакета);		
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции
	
// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура001") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактура001", НСтр("ru = 'Счет-фактура (001)'"), ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, 20));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура002") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактура002", НСтр("ru = 'Счет-фактура (002)'"), ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, 7));
	КонецЕсли;	
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактураВВалюте") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактураВВалюте", НСтр("ru = 'Счет-фактура в валюте'"), ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, 1, Истина));
	КонецЕсли;
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
		
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура001";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (001)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура002";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (002)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 2;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактураВВалюте";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура в валюте'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 3;
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "РеестрСчетФактураВыписанный";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Счет фактура выписанный""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция для формирования текста запроса
//
// Возвращаемое значение:
//	Строка - текст запроса
//
Функция ПолучитьТекстЗапросаДокументовОснования()
	
	// 1. Данные из выделенных документов "Счет-фактура выписанный"
	// 2. Документы "Счет-фактура выписанный", в которых необходимо пересчитать суммы
	// 3. Документы "Счет-фактура выписанный" с исходными суммы
	// 4. Документы "Счет-фактура выписанный" в которых не нужно группировать номенклатуру
	// 5. Документы из ТЧ "ДокументыОснования"
	// 6. Данные из документов основания по ТЧ "Товары" и "Услуги"
	// 7. Данные по 6 пункту с отбором по документам 3 пункта
	// 8. Данные по 6 пункту с отбором по документам 2 пункта с пересчитанными суммами по курсу
	// 9. Готовые данные по документам с исходными суммами (объединение данных без группировки
	//		по номенклатуре и данных с группировкой).
	// 10. Готовые данные по документам с пересчитанными суммами (объединение данных без группировки
	//		по номенклатуре и данных с группировкой).
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.ПечатьВРегламентированнойВалюте КАК ПечатьВРегламентированнойВалюте,
		|	ТаблицаДокумента.ПечататьКурсИСуммуВРегламентированнойВалюте КАК ПечататьКурсИСуммуВРегламентированнойВалюте,
		|	ТаблицаДокумента.НеГруппироватьПоНоменклатуре КАК НеГруппироватьПоНоменклатуре
		|ПОМЕСТИТЬ ВременнаяТаблицаНастройкиПечати
		|ИЗ
		|	Документ.СчетФактураВыписанный КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&СписокДокументов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаНастройкиПечати.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВременнаяТаблицаДокументыДляПересчета
		|ИЗ
		|	ВременнаяТаблицаНастройкиПечати КАК ВременнаяТаблицаНастройкиПечати
		|ГДЕ
		|	ВременнаяТаблицаНастройкиПечати.ПечатьВРегламентированнойВалюте
		|	ИЛИ ВременнаяТаблицаНастройкиПечати.ПечататьКурсИСуммуВРегламентированнойВалюте
		|	ИЛИ &СчетФактураВВалюте
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаНастройкиПечати.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВременнаяТаблицаДокументыСИсходнымиСуммами
		|ИЗ
		|	ВременнаяТаблицаНастройкиПечати КАК ВременнаяТаблицаНастройкиПечати
		|ГДЕ
		|	НЕ ВременнаяТаблицаНастройкиПечати.ПечатьВРегламентированнойВалюте
		|	ИЛИ &СчетФактураВВалюте
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаНастройкиПечати.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВременнаяТаблицаДокументыБезГруппировки
		|ИЗ
		|	ВременнаяТаблицаНастройкиПечати КАК ВременнаяТаблицаНастройкиПечати
		|ГДЕ
		|	ВременнаяТаблицаНастройкиПечати.НеГруппироватьПоНоменклатуре
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК ДокументСФ,
		|	ТаблицаДокумента.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВременнаяТаблицаДокументыОснования
		|ИЗ
		|	Документ.СчетФактураВыписанный.ДокументыОснования КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&СписокДокументов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК ДокументСФ,
		|	ТаблицаДокумента.ДокументОснования КАК Ссылка,
		|	ТаблицаДокумента.ДокументОснования.Курс КАК Курс,
		|	ТаблицаДокумента.ДокументОснования.Кратность КАК Кратность,
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|	ТаблицаДокумента.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		|	ТаблицаДокумента.Количество КАК Количество,
		|	ТаблицаДокумента.Цена КАК Цена,
		|	ТаблицаДокумента.Всего КАК Всего,
		|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
		|	ТаблицаДокумента.СуммаНСП КАК СуммаНСП,
		|	ТаблицаДокумента.СуммаДохода КАК Стоимость,
		//|	ТаблицаДокумента.СуммаСкидки КАК СуммаСкидки,
		|	ТаблицаДокумента.ВсегоВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаНДСВВалютеРеглУчета КАК СуммаНДСВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаНСПВВалютеРеглУчета КАК СуммаНСПВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаДоходаВВалютеРеглУчета КАК СтоимостьВВалютеРеглУчета,
		//|	ТаблицаДокумента.СуммаСкидкиВВалютеРеглУчета КАК СуммаСкидкиВВалютеРеглУчета,
		|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаДокумента.СтавкаНСП КАК СтавкаНСП,
		|	ТаблицаДокумента.Номенклатура.КодТНВЭД КАК КодТНВЭД
		|ПОМЕСТИТЬ ВременнаяТаблицаТоварыУслуги
		|ИЗ
		|	Документ.СчетФактураВыписанный.Товары КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТоварыУслуги.ДокументСФ КАК ДокументСФ,
		|	ВременнаяТаблицаТоварыУслуги.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаТоварыУслуги.Курс КАК Курс,
		|	ВременнаяТаблицаТоварыУслуги.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаТоварыУслуги.НоменклатураПредставление КАК НоменклатураПредставление,
		|	ВременнаяТаблицаТоварыУслуги.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВременнаяТаблицаТоварыУслуги.Количество КАК Количество,
		|	ВременнаяТаблицаТоварыУслуги.Цена КАК Цена,
		|	ВременнаяТаблицаТоварыУслуги.Всего КАК Всего,
		|	ВременнаяТаблицаТоварыУслуги.Стоимость КАК Стоимость,
		|	ВременнаяТаблицаТоварыУслуги.СуммаНДС КАК СуммаНДС,
		|	ВременнаяТаблицаТоварыУслуги.СуммаНСП КАК СуммаНСП,
		//|	ВременнаяТаблицаТоварыУслуги.СуммаСкидки КАК СуммаСкидки,
		|	ВременнаяТаблицаТоварыУслуги.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаТоварыУслуги.СтавкаНСП КАК СтавкаНСП,
		|	ВременнаяТаблицаТоварыУслуги.КодТНВЭД КАК КодТНВЭД
		|ПОМЕСТИТЬ ВременнаяТаблицаТоварыУслугиИсходныеСуммы
		|ИЗ
		|	ВременнаяТаблицаТоварыУслуги КАК ВременнаяТаблицаТоварыУслуги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументыСИсходнымиСуммами КАК ВременнаяТаблицаДокументыСИсходнымиСуммами
		|		ПО ВременнаяТаблицаТоварыУслуги.ДокументСФ = ВременнаяТаблицаДокументыСИсходнымиСуммами.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТоварыУслуги.ДокументСФ КАК ДокументСФ,
		|	ВременнаяТаблицаТоварыУслуги.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаТоварыУслуги.Курс КАК Курс,
		|	ВременнаяТаблицаТоварыУслуги.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаТоварыУслуги.НоменклатураПредставление КАК НоменклатураПредставление,
		|	ВременнаяТаблицаТоварыУслуги.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВременнаяТаблицаТоварыУслуги.Количество КАК Количество,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаТоварыУслуги.Цена * ВременнаяТаблицаТоварыУслуги.Курс / ВременнаяТаблицаТоварыУслуги.Кратность КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ВременнаяТаблицаТоварыУслуги.ВсегоВВалютеРеглУчета КАК Всего,
		|	ВременнаяТаблицаТоварыУслуги.СтоимостьВВалютеРеглУчета КАК Стоимость,
		|	ВременнаяТаблицаТоварыУслуги.СуммаНДСВВалютеРеглУчета КАК СуммаНДС,
		|	ВременнаяТаблицаТоварыУслуги.СуммаНСПВВалютеРеглУчета КАК СуммаНСП,
		//|	ВременнаяТаблицаТоварыУслуги.СуммаСкидкиВВалютеРеглУчета КАК СуммаСкидки,
		|	ВременнаяТаблицаТоварыУслуги.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаТоварыУслуги.СтавкаНСП КАК СтавкаНСП,
		|	ВременнаяТаблицаТоварыУслуги.КодТНВЭД КАК КодТНВЭД
		|ПОМЕСТИТЬ ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы
		|ИЗ
		|	ВременнаяТаблицаТоварыУслуги КАК ВременнаяТаблицаТоварыУслуги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументыДляПересчета КАК ВременнаяТаблицаДокументыДляПересчета
		|		ПО ВременнаяТаблицаТоварыУслуги.ДокументСФ = ВременнаяТаблицаДокументыДляПересчета.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.ДокументСФ КАК ДокументСФ,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Курс КАК Курс,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.НоменклатураПредставление КАК НоменклатураПредставление,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Количество КАК Количество,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Цена КАК Цена,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Всего КАК Всего,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Стоимость КАК Стоимость,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.СуммаНДС КАК СуммаНДС,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.СуммаНСП КАК СуммаНСП,
		//|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.СуммаСкидки КАК СуммаСкидки,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.СтавкаНСП КАК СтавкаНСП,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.КодТНВЭД КАК КодТНВЭД
		|ИЗ
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы КАК ВременнаяТаблицаТоварыУслугиИсходныеСуммы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументыБезГруппировки КАК ВременнаяТаблицаДокументыБезГруппировки
		|		ПО ВременнаяТаблицаТоварыУслугиИсходныеСуммы.ДокументСФ = ВременнаяТаблицаДокументыБезГруппировки.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.ДокументСФ,
		|	МАКСИМУМ(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Ссылка),
		|	СРЕДНЕЕ(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Курс),
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Номенклатура,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Номенклатура.НаименованиеПолное,
		|	МАКСИМУМ(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.ЕдиницаИзмерения),
		|	СУММА(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Количество),
		|	СРЕДНЕЕ(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Цена),
		|	СУММА(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Всего),
		|	СУММА(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Стоимость),
		|	СУММА(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.СуммаНДС),
		|	СУММА(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.СуммаНСП),
		//|	СУММА(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.СуммаСкидки),
		|	МАКСИМУМ(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.СтавкаНДС) КАК СтавкаНДС,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.СтавкаНСП КАК СтавкаНСП,
		|	МАКСИМУМ(ВременнаяТаблицаТоварыУслугиИсходныеСуммы.КодТНВЭД)
		|ИЗ
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы КАК ВременнаяТаблицаТоварыУслугиИсходныеСуммы
		|ГДЕ
		|	НЕ ВременнаяТаблицаТоварыУслугиИсходныеСуммы.ДокументСФ В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаДокументыБезГруппировки.Ссылка
		|				ИЗ
		|					ВременнаяТаблицаДокументыБезГруппировки)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.ДокументСФ,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Номенклатура,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.Номенклатура.НаименованиеПолное,
		|	ВременнаяТаблицаТоварыУслугиИсходныеСуммы.СтавкаНСП
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.ДокументСФ КАК ДокументСФ,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Курс КАК Курс,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.НоменклатураПредставление КАК НоменклатураПредставление,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Количество КАК Количество,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Цена КАК Цена,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Всего КАК Всего,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Стоимость КАК Стоимость,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.СуммаНДС КАК СуммаНДС,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.СуммаНСП КАК СуммаНСП,
		//|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.СуммаСкидки КАК СуммаСкидки,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.СтавкаНСП КАК СтавкаНСП,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.КодТНВЭД КАК КодТНВЭД
		|ИЗ
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы КАК ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументыБезГруппировки КАК ВременнаяТаблицаДокументыБезГруппировки
		|		ПО ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.ДокументСФ = ВременнаяТаблицаДокументыБезГруппировки.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.ДокументСФ,
		|	МАКСИМУМ(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Ссылка),
		|	СРЕДНЕЕ(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Курс),
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Номенклатура,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Номенклатура.НаименованиеПолное,
		|	МАКСИМУМ(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.ЕдиницаИзмерения),
		|	СУММА(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Количество),
		|	СРЕДНЕЕ(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Цена),
		|	СУММА(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Всего),
		|	СУММА(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Стоимость),
		|	СУММА(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.СуммаНДС),
		|	СУММА(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.СуммаНСП),
		//|	СУММА(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.СуммаСкидки),
		|	МАКСИМУМ(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.СтавкаНДС) КАК СтавкаНДС,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.СтавкаНСП КАК СтавкаНСП,
		|	МАКСИМУМ(ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.КодТНВЭД)
		|ИЗ
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы КАК ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы
		|ГДЕ
		|	НЕ ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.ДокументСФ В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаДокументыБезГруппировки.Ссылка
		|				ИЗ
		|					ВременнаяТаблицаДокументыБезГруппировки)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.ДокументСФ,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Номенклатура,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.Номенклатура.НаименованиеПолное,
		|	ВременнаяТаблицаТоварыУслугиПересчитанныеСуммы.СтавкаНСП";	
		
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаДокументовОснования()

#КонецОбласти

#КонецЕсли