#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НеобходимостьПерезаполнения = Ложь;
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СформироватьСериюСчетФактуры();
	СформироватьНомераСчетФактур();
	УстановитьТипДляВыбораДокумента();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПодборДокументовСФПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		НеобходимостьПерезаполнения = ПолучитьДокументыИзХранилища(АдресЗапасовВХранилище);
		
		УстановитьЗначениеРеквизитаОбщая();
		
		ТекстОповещения = НСтр("ru = 'Заполнение'");
		ТекстПояснения = НСтр("ru = 'Табличная часть ""Документы"" заполнена'");
		ПоказатьОповещениеПользователя(ТекстОповещения,, ТекстПояснения, БиблиотекаКартинок.Информация32);		
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	
	Объект.БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Объект.Организация);
	
	СформироватьСериюСчетФактуры();
	Элементы.НомерБланкаСФ.СписокВыбора.Очистить();
	Объект.СерияБланкаСФ = "";
	Объект.НомерБланкаСФ = "";
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	//СтруктураДоговор 			= БухгалтерскийУчетВызовСервера.ПолучитьДоговорКонтрагента(
	//							Объект.Организация, 
	//							Объект.Контрагент, 
	//							, 
	//							ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	//Объект.ДоговорКонтрагента 	= СтруктураДоговор.ДоговорКонтрагента;	
	//ДанныеДоговора 				= БухгалтерскийУчетВызовСервераПовтИсп.ДанныеДоговора(Объект.ДоговорКонтрагента);
	//Объект.ВидПоставкиНДС = ДанныеДоговора.ВидПоставкиНДС;
	//Объект.ВалютаДокумента = ДанныеДоговора.ВалютаРасчетов;
	//
	//Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
	//	
	//	Объект.БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Объект.Организация);
	//	
	//КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СерияБланкаСФПриИзменении(Элемент)
	
	СформироватьНомераСчетФактур();
	
	Если ЗначениеЗаполнено(Объект.СерияБланкаСФ) И (НЕ ЗначениеЗаполнено(Объект.ДатаСФ)) Тогда
			Объект.ДатаСФ = ДатаДокумента;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ДанныеДоговора 				= БухгалтерскийУчетВызовСервераПовтИсп.ДанныеДоговора(Объект.ДоговорКонтрагента);
	Объект.ВидПоставкиНДС = ДанныеДоговора.ВидПоставкиНДС;
	Объект.ВалютаДокумента = ДанныеДоговора.ВалютаРасчетов;	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратПриИзменении(Элемент)
	УстановитьТипДляВыбораДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	ЗаполнитьПоДокументу(Объект.ДокументОснование);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыПодбора

&НаКлиенте
Процедура ДокументыДокументОплатыПриИзменении(Элемент)	
	СтрокаТабличнойЧасти = Элементы.Документы.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаДокумента = ПолучитьСуммыВыбираемогоДокумента(СтрокаТабличнойЧасти.ДокументОснование);
	НеобходимостьПерезаполнения = Истина;
	УстановитьЗначениеРеквизитаОбщая();
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПослеУдаления(Элемент)
	НеобходимостьПерезаполнения = Истина;
	УстановитьЗначениеРеквизитаОбщая();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура открывает форму обработки "ПодборДокументовДляСчетФактур"
//
&НаКлиенте
Процедура ЗаполнитьПоКонтрагенту(Команда)
	РаботаСПодборомДокументовКлиент.ОткрытьПодбор(ЭтаФорма);	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, ДатаДокумента, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура формирования списка серий счет фактур.
//
&НаКлиенте
Процедура СформироватьСериюСчетФактуры()	
	
	Элементы.СерияБланкаСФ.СписокВыбора.Очистить();
	СписокСерийБланковСФ = БухгалтерскийУчетВызовСервера.СформироватьСписокСерийСФ(Объект.Организация);
	Элементы.СерияБланкаСФ.СписокВыбора.ЗагрузитьЗначения(СписокСерийБланковСФ);

КонецПроцедуры

// Процедура формирования списка номеров серии счет фактуры.
//
&НаКлиенте
Процедура СформироватьНомераСчетФактур()
	
	Элементы.НомерБланкаСФ.СписокВыбора.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.СерияБланкаСФ) Тогда 
		Возврат;
	КонецЕсли;
	
	СписокНомеровБланковСФ = БухгалтерскийУчетВызовСервера.СформироватьСписокНомеровБланковСФ(Объект.Организация, Объект.СерияБланкаСФ);
	Элементы.НомерБланкаСФ.СписокВыбора.ЗагрузитьЗначения(СписокНомеровБланковСФ);
КонецПроцедуры

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ОбработкаЗаполнения(ДокОснование, );
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
КонецПроцедуры // ЗаполнитьПоДокументу()

// Процедура получает список документов из временного хранилища
//
// Параметры:
//  АдресЗапасовВХранилище - Структура - адрес в хранилище и идентификатор формы владельца.
//
// Возвращаемое значение:
//  Булево - Истина, если подобранные документы отличаются от уже имеющихся документов 
//	в ТЧ "ДокументыОплаты". 
//
&НаСервере
Функция ПолучитьДокументыИзХранилища(АдресЗапасовВХранилище)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Перезаполнить = Ложь;
	Если ТаблицаДляЗагрузки.Количество() <> Объект.ДокументыОснования.Количество() Тогда
		Перезаполнить = Истина;
	Иначе
		СтарыеДанныеТабличнойЧасти = Объект.ДокументыОснования.Выгрузить();
		Для каждого ДокументПодбора Из ТаблицаДляЗагрузки Цикл
			РезльтатПоиска = СтарыеДанныеТабличнойЧасти.Найти(ДокументПодбора.ДокументОснование,"ДокументОплаты");
			Если РезльтатПоиска = Неопределено Тогда
				Перезаполнить = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Перезаполнить Тогда
		Объект.ДокументыОснования.Очистить();  
		                                                             
		Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл			
			СтрокаТабличнойЧасти = Объект.ДокументыОснования.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Перезаполнить;
КонецФункции

// Процедура устанавливает тип реквизита "ДокументОплаты",
// табличной части "ДокументыПодбора", в зависимости от значения
// реквизита шапки "Возврат".
//
Процедура УстановитьТипДляВыбораДокумента()	
	МассивТипов = Новый Массив();
	
	Если Объект.ВозвратТоваров Тогда
		МассивТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
 		Элементы.ДокументыДокументОплаты.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	Иначе
		МассивТипов.Добавить(Тип("ДокументСсылка.ПередачаОС"));
		МассивТипов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		МассивТипов.Добавить(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
		Элементы.ДокументыДокументОплаты.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет табличную часть "Товары"
// по подобранным документам.
//
&НаСервере
Процедура ЗаполнитьПоДокументамРеализацииНаСервере()
	
	ОбъектДокумента = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.СчетФактураВыписанный"));
	ОбъектДокумента.ЗаполнитьПоПодобраннымДокументам(Объект.ВозвратТоваров);
	ЗначениеВРеквизитФормы(ОбъектДокумента, "Объект");
	
КонецПроцедуры

// Процедура заполняет реквизит "СуммаДокумента",
// табличной части "ДокументыПодбора", при выборе
// самого документа.
//
// Параметры:
//  ТекущийПодобранныйДокумент - ДокументСсылка - ссылка на выбранный документ в ТЧ "ДокументыПодбора".
//  
// Возвращаемое значение:
//  Число - сумма передаваемого в функцию документа.
//
&НаСервере
Функция ПолучитьСуммыВыбираемогоДокумента(ТекущийПодобранныйДокумент)
	Возврат ТекущийПодобранныйДокумент.СуммаДокумента		
КонецФункции

// Процедура устанавливает значения реквизита "Общая"
//
Процедура УстановитьЗначениеРеквизитаОбщая()	
	
	Если Объект.ДокументыОснования.Количество() > 1 Тогда
		Объект.Общая = Истина;	
	Иначе
		Объект.Общая = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
