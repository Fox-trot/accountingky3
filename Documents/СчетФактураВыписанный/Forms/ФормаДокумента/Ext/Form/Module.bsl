
#Область ОбработчикиСлужебные

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервереБезКонтекста
Функция ПолучитьСтавкуНДСИзДоговора(Договор)

	Возврат Договор.СтавкаНДС;

КонецФункции // ПолучитьСтавкуНДСИзДоговра(Договор)

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
Процедура ПересчитатьИтоги()
	Объект.СуммаДокумента 	= Объект.ТоварыИУслуги.Итог("Сумма");	
	Объект.СуммаНДС 		= Объект.ТоварыИУслуги.Итог("СуммаНДС");
	Объект.СуммаНСП 		= Объект.ТоварыИУслуги.Итог("СуммаНСП");
КонецПроцедуры // ()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ПолучитьМассивВыбранныхДокументов()
	Массив = Новый Массив;
	Для каждого СтрокаТабличнойЧасти Из Объект.ТоварыИУслуги Цикл
		ДокументРеализации = СтрокаТабличнойЧасти.ДокументРеализации;
		Если ЗначениеЗаполнено(ДокументРеализации) И Массив.Найти(ДокументРеализации) = Неопределено Тогда
			Массив.Добавить(ДокументРеализации);	
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Массив;

КонецФункции // ПолучитьМассивВыбранныхДокументов()

&НаСервере
Функция КоличествоДокументовРеализации()
	МассивДокументов = Новый Массив;
	ТаблицаЗначенийТоварыИУслуги = Объект.ТоварыИУслуги.Выгрузить(, "ДокументРеализации");
	
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивДокументов, ТаблицаЗначенийТоварыИУслуги.ВыгрузитьКолонку("ДокументРеализации"));

	Возврат МассивДокументов.Количество();	

КонецФункции // ()

&НаКлиенте
Процедура СформироватьСписокСФ()
		
	СписокСерийСФ.ЗагрузитьЗначения(БухгалтерскийУчетСервер.СформироватьСписокСерийСФ(Объект.Организация, Объект.Дата));
	
	Элементы.СерияБланкаСФ.СписокВыбора.Очистить();
	Элементы.СерияБланкаСФ.СписокВыбора.ЗагрузитьЗначения(СписокСерийСФ.ВыгрузитьЗначения());	
	
КонецПроцедуры

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ОбработкаЗаполнения(ДокОснование, );
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
КонецПроцедуры // ЗаполнитьПоДокументу()

// Процедура получает список документов из временного хранилища
//
&НаСервере
Процедура ПолучитьДокументыИзХранилища(АдресЗапасовВХранилище)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	Объект.ДокументыПодбора.Очистить();
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл			
		СтрокаТабличнойЧасти = Объект.ДокументыПодбора.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает тип реквизита "ДокументОплаты",
// табличной части "ДокументыПодбора", в зависимости от значения
// реквизита шапки "Возврат".
//
Процедура УстановитьТипДляВыбораДокумента()	
	МассивТипов = Новый Массив();
	
	Если Объект.Возврат Тогда
		МассивТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
 		Элементы.ДокументыДокументОплаты.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	Иначе
		МассивТипов.Добавить(Тип("ДокументСсылка.ПередачаОС"));
		МассивТипов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		МассивТипов.Добавить(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
		Элементы.ДокументыДокументОплаты.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет табличную часть "ТоварыИУслуги"
// по подобранным документам.
//
&НаСервере
Процедура ЗаполнитьПоДокументамРеализацииНаСервере()
	Объект.ТоварыИУслуги.Очистить();

	Если Объект.Возврат Тогда
		Для каждого ДокументПодбора Из Объект.ДокументыПодбора Цикл
			Для каждого СтрокаТабличнойЧасти Из ДокументПодбора.ДокументОплаты.Товары Цикл
				НоваяСтрока = Объект.ТоварыИУслуги.Добавить();	
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
				НоваяСтрока.Сумма = СтрокаТабличнойЧасти.Всего;
				НоваяСтрока.ДокументРеализации = ДокументПодбора.ДокументОплаты; 
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для каждого ДокументПодбора Из Объект.ДокументыПодбора Цикл
			Если ТипЗнч(ДокументПодбора.ДокументОплаты) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
				// Заполнение по ТЧ "Товары"
				Для каждого СтрокаТабличнойЧасти Из ДокументПодбора.ДокументОплаты.Товары Цикл
					НоваяСтрока = Объект.ТоварыИУслуги.Добавить();	
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
					НоваяСтрока.ДокументРеализации = ДокументПодбора.ДокументОплаты;
					НоваяСтрока.Сумма = СтрокаТабличнойЧасти.Всего;
					СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТабличнойЧасти.Номенклатура);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СчетаУчетаНоменклатуры);
				КонецЦикла;
				
				// Заполнение по ТЧ "Услуги"
				Для каждого СтрокаТабличнойЧасти Из ДокументПодбора.ДокументОплаты.Услуги Цикл
					НоваяСтрока = Объект.ТоварыИУслуги.Добавить();	
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
					НоваяСтрока.ДокументРеализации = ДокументПодбора.ДокументОплаты;
					НоваяСтрока.Сумма = СтрокаТабличнойЧасти.Всего;
					СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТабличнойЧасти.Номенклатура);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СчетаУчетаНоменклатуры);
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(ДокументПодбора.ДокументОплаты) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				// Заполнение по ТЧ "Товары"
				Для каждого СтрокаТабличнойЧасти Из ДокументПодбора.ДокументОплаты.Товары Цикл
					НоваяСтрока = Объект.ТоварыИУслуги.Добавить();	
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
					НоваяСтрока.Сумма = СтрокаТабличнойЧасти.Всего;
					НоваяСтрока.ДокументРеализации = ДокументПодбора.ДокументОплаты; 
				КонецЦикла;
				
				// Заполнение по ТЧ "Услуги"
				Для каждого СтрокаТабличнойЧасти Из ДокументПодбора.ДокументОплаты.Услуги Цикл
					НоваяСтрока = Объект.ТоварыИУслуги.Добавить();	
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
					НоваяСтрока.Сумма = СтрокаТабличнойЧасти.Всего;
					НоваяСтрока.ДокументРеализации = ДокументПодбора.ДокументОплаты;
				КонецЦикла;
				
			//ИначеЕсли ТипЗнч(ДокументПодбора.ДокументОплаты) = Тип("ДокументСсылка.ПередачаОС") Тогда
								
			КонецЕсли;
		КонецЦикла;			
	КонецЕсли;

КонецПроцедуры

// Процедура заполняет реквизит "СуммаДокумента",
// табличной части "ДокументыПодбора", при выборе
// самого документа.
//
// Параметры:
//  ТекущийПодобранныйДокумент - ссылка на выбранный документ в ТЧ "ДокументыПодбора".
//  ТекущаяСуммаДокумента - ссылка на сумму выбранного документа в ТЧ "ДокументыПодбора".
//
&НаСервере
Процедура ПодстановкаСуммыДокумента(ТекущийПодобранныйДокумент, ТекущаяСуммаДокумента)
	ТекущаяСуммаДокумента = ТекущийПодобранныйДокумент.СуммаДокумента		
КонецПроцедуры

#КонецОбласти

#Область УправлениеВнешнимВидом
&НаСервере
// Процедура устанавливает видимость и доступность элементов.
//
Процедура УстановитьВидимостьДоступностьЭлементов()
		
	Если ЗначениеЗаполнено(Объект.ВалютаДокумента) 
		И НЕ Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		Элементы.ПечатьВВалюте.Видимость = Истина;
	Иначе
		Элементы.ПечатьВВалюте.Видимость = Ложь;
	КонецЕсли;
	Элементы.Общая.Доступность = КоличествоДокументовРеализации() <= 1;
	
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()    

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура вызывается при нажатии кнопки "ЗаполнитьПоОснованию" 
//
&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Документ будет полностью перезаполнен по ""Основанию""! Продолжить выполнение операции?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
КонецПроцедуры

// Процедура открывает форму обработки "ПодборДокументовДляСчетФактур"
//
&НаКлиенте
Процедура ПодборПоКонтрагенту(Команда)
	РаботаСКонтрагентамиБПКлиент.ОткрытьПодбор(ЭтаФорма);	
КонецПроцедуры

// Процедура заполняет табличную часть "ТоварыИУслуги" по 
// подобранным документам и пересчитывает итоги.
//
&НаКлиенте
Процедура ЗаполнитьПоДокументамРеализации(Команда)
	ЗаполнитьПоДокументамРеализацииНаСервере();
	ПересчитатьИтоги();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаСервере
Процедура ОбработкаОповещенияПодборДокументовРеализации(Параметры, ИмяСобытия)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресПодобраннойНоменклатурыВХранилище);	
	
	Для каждого СтрокаПодбора Из ТаблицаОбработки Цикл
		ДокументРеализации = СтрокаПодбора.Документ;
		Для каждого СтрокаТоварыРеализация Из ДокументРеализации.Товары Цикл
			НоваяСтрокаСФ = Объект.ТоварыИУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСФ, СтрокаТоварыРеализация); 
			НоваяСтрокаСФ.Сумма 				= СтрокаТоварыРеализация.Доход;
		    НоваяСтрокаСФ.ДокументРеализации 	= ДокументРеализации;
		КонецЦикла;
		
		Для каждого СтрокаУслугиРеализация Из ДокументРеализации.Услуги Цикл
			НоваяСтрокаСФ = Объект.ТоварыИУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСФ, СтрокаУслугиРеализация); 
			НоваяСтрокаСФ.Сумма 				= СтрокаУслугиРеализация.Доход;
		    НоваяСтрокаСФ.ДокументРеализации 	= ДокументРеализации;
		КонецЦикла;
				
	КонецЦикла;	
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияПодборВозвратОтПокупателя(Параметры)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресПодобраннойНоменклатурыВХранилище);	
	
	Для каждого СтрокаПодбора Из ТаблицаОбработки Цикл
		ДокументРеализации = СтрокаПодбора.Документ;
		Для каждого СтрокаТоварыРеализация Из ДокументРеализации.Товары Цикл
			НоваяСтрокаСФ = Объект.ТоварыИУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСФ, СтрокаТоварыРеализация); 
			НоваяСтрокаСФ.Сумма 				= СтрокаТоварыРеализация.Доход;
		    НоваяСтрокаСФ.ДокументРеализации 	= ДокументРеализации;
		КонецЦикла;		
	КонецЦикла;	
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияПодборДокументовОплатыСФВ(Параметры)	
	
	//Для каждого СтрокаПодбора Из Параметры Цикл
	//	НоваяСтрокаДокументы = Объект.Документы.Добавить();
	//	НоваяСтрокаДокументы. 				= СтрокаТоварыРеализация.Доход;
	//	НоваяСтрокаДокументы.ДокументРеализации 	= ДокументРеализации;	
	//КонецЦикла;	
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоДокументу(Объект.ДокументОснование);
        УстановитьВидимостьДоступностьЭлементов();
    КонецЕсли;
КонецПроцедуры // ЗаполнитьПоОснованию()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	УПП = БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсисте.Печать
	 УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаВажныеКоманды);
	// Конец СтандартныеПодсистемы.Печать
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СформироватьСписокСФ();
	УстановитьВидимостьДоступностьЭлементов();
	УстановитьТипДляВыбораДокумента();	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПодборДокументовРеализацииКонтрагенту" И ТипЗнч(Параметр) = ТИП("Структура") Тогда
		ОбработкаОповещенияПодборДокументовРеализации(Параметр, ИмяСобытия);
		
	ИначеЕсли ИмяСобытия = "ПодборВозвратОтПокупателя" И ТипЗнч(Параметр) = ТИП("Структура") Тогда
		ОбработкаОповещенияПодборВозвратОтПокупателя(Параметр);	
		
	ИначеЕсли ИмяСобытия = "ПодборДокументовСФПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		ПолучитьДокументыИзХранилища(АдресЗапасовВХранилище);		
	КонецЕсли;
	
	Объект.Общая = КоличествоДокументовРеализации() > 1;
	
	ПересчитатьИтоги();	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	СформироватьСписокСФ();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетСервер.ПроверитьСуществованиеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	Объект.БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	СтруктураДоговор 			= БухгалтерскийУчетСервер.ПолучитьДоговорКонтрагента(
								Объект.Организация, 
								Объект.Контрагент, 
								, 
								ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	Объект.ДоговорКонтрагента 	= СтруктураДоговор.ДоговорКонтрагента;	
	ДанныеДоговора 				= БухгалтерскийУчетВызовСервераПовтИсп.ДанныеДоговора(Объект.ДоговорКонтрагента);
	Объект.ВидПоставкиНДС = ДанныеДоговора.ВидПоставкиНДС;
	Объект.ВалютаДокумента = ДанныеДоговора.ВалютаРасчетов;
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		
		Объект.БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Объект.Организация);
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СерияБланкаСФПриИзменении(Элемент)
	
	Элементы.НомерБланкаСФ.СписокВыбора.Очистить();
	Элементы.НомерБланкаСФ.СписокВыбора.ЗагрузитьЗначения(БухгалтерскийУчетСервер.СформироватьСписокНомеровБланковСФ(Объект.Организация, Объект.СерияБланкаСФ, Объект.Дата));
	Если Элементы.НомерБланкаСФ.СписокВыбора.Количество() = 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Для пользователя %1 и серии %2 нет доступных номеров бланков счет-фактур'"), Объект.Автор, Объект.СерияБланкаСФ);
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.НомерБланкаСФ",
			Истина);
		КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СерияБланкаСФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.ЗагрузитьЗначения(БухгалтерскийУчетСервер.СформироватьСписокСерийСФ(Объект.Организация, Объект.Дата));	
	
КонецПроцедуры

&НаКлиенте
Процедура НомерБланкаСФПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.СерияБланкаСФ) И ЗначениеЗаполнено(Объект.НомерБланкаСФ) Тогда
		Объект.ДатаСФ = ДатаДокумента;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ДанныеДоговора 				= БухгалтерскийУчетВызовСервераПовтИсп.ДанныеДоговора(Объект.ДоговорКонтрагента);
	Объект.ВидПоставкиНДС = ДанныеДоговора.ВидПоставкиНДС;
	Объект.ВалютаДокумента = ДанныеДоговора.ВалютаРасчетов;	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратПриИзменении(Элемент)
	УстановитьТипДляВыбораДокумента();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТабличныхЧастей

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИУслугиПриИзменении(Элемент)
	Объект.Общая = КоличествоДокументовРеализации() > 1;
	ПересчитатьИтоги();

	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДокументыДокументОплатыПриИзменении(Элемент)	
	СтрокаТабличнойЧасти = Элементы.Документы.ТекущиеДанные;
	ПодстановкаСуммыДокумента(СтрокаТабличнойЧасти.ДокументОплаты, СтрокаТабличнойЧасти.СуммаДокумента);
	ЗаполнитьПоДокументамРеализацииНаСервере();
	ПересчитатьИтоги();
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПослеУдаления(Элемент)
	ЗаполнитьПоДокументамРеализацииНаСервере();
	ПересчитатьИтоги();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать
#КонецОбласти
