#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НеобходимостьПерезаполнения = Ложь;
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	УстановитьФункциональныеОпцииФормы();
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СформироватьСериюСчетаФактуры();
	СформироватьНомераСчетФактур();
	УстановитьТипДляВыбораДокумента();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПодборДокументовСФПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		НеобходимостьПерезаполнения = ПолучитьДокументыИзХранилища(АдресЗапасовВХранилище);
		
		ТекстОповещения = НСтр("ru = 'Заполнение'");
		ТекстПояснения = НСтр("ru = 'Табличная часть ""Документы"" заполнена'");
		ПоказатьОповещениеПользователя(ТекстОповещения,, ТекстПояснения, БиблиотекаКартинок.Информация32);		
	КонецЕсли;
	                                                              
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Товары");
	КонецЕсли;
	// Конец КопированиеСтрокТабличныхЧастей
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СписокДокументов = Новый Массив;
	Для Каждого СтрокаТабличнойЧасти Из Объект.ДокументыОснования Цикл 
		СписокДокументов.Добавить(СтрокаТабличнойЧасти.ДокументОснование);
	КонецЦикла;	
	Оповестить("СчетФактураВыписанныйПослеЗаписи", СписокДокументов);
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	
	Объект.БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Объект.Организация);
	
	СформироватьСериюСчетаФактуры();
	Элементы.НомерБланкаСФ.СписокВыбора.Очистить();
	Объект.СерияБланкаСФ = "";
	Объект.НомерБланкаСФ = "";
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СерияБланкаСФ.
//
&НаКлиенте
Процедура СерияБланкаСФПриИзменении(Элемент)
	
	СформироватьНомераСчетФактур();
	
	Если ЗначениеЗаполнено(Объект.СерияБланкаСФ) И (НЕ ЗначениеЗаполнено(Объект.Дата)) Тогда
			Объект.Дата = ДатаДокумента;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора поля ввода Номер бланка счет-фактуры.
//
&НаКлиенте
Процедура НомерБланкаСФОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = "000000" Тогда
		СтандартнаяОбработка = Ложь;
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("НомерБланкаСФОбработкаВыбораЗавершение", ЭтотОбъект);
		ПоказатьВводСтроки(ОбработчикОповещенияОЗакрытии, "", НСтр("ru = 'Укажите номер'"), 6);
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	
	Объект.ЭкспортнаяПоставка = СтруктураДанные.ЭкспортнаяПоставка;
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ОбработатьИзменениеДоговора();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор контрагента.
//
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ОбработатьИзменениеДоговора();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Возврат.
//
&НаКлиенте
Процедура ВозвратПриИзменении(Элемент)
	УстановитьТипДляВыбораДокумента();
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Печать в регламентированной валюте.
//
&НаКлиенте
Процедура ПечатьВРегламентированнойВалютеПриИзменении(Элемент)
	Если Объект.ПечатьВРегламентированнойВалюте Тогда
		Объект.ПечататьКурсИСуммуВРегламентированнойВалюте = Ложь;	
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Печатать курс и сумму в регламентированной валюте.
//
&НаКлиенте
Процедура ПечататьКурсИСуммуВРегламентированнойВалютеПриИзменении(Элемент)
	Если Объект.ПечататьКурсИСуммуВРегламентированнойВалюте Тогда
		Объект.ПечатьВРегламентированнойВалюте = Ложь;	
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении при установке настройки По головному контрагенту.
//
&НаКлиенте
Процедура ПоГоловномуКонтрагентуПриИзменении(Элемент)
	Если Объект.ПоГоловномуКонтрагенту И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	КонецЕсли;
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыОснования

// Процедура - обработчик события ПриИзменении поля ввода ДокументыДокументОплаты.
//
&НаКлиенте
Процедура ДокументыДокументОплатыПриИзменении(Элемент)	
	СтрокаТабличнойЧасти = Элементы.Документы.ТекущиеДанные;
	СтрокаТабличнойЧасти.Сумма = ПолучитьСуммыВыбираемогоДокумента(СтрокаТабличнойЧасти.ДокументОснование);
	НеобходимостьПерезаполнения = Истина;
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПередУдалением(Элемент, Отказ)
	
	ИмяТабличнойЧасти = "Документы";
	БухгалтерскийУчетКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Товары");	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Процедура - обработчик события ПриИзменении поля ввода Товары.
//
&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ПересчитатьИтоги();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Добавление строк не предусмотрено. Воспользуйтесь командой ""Заполнить по документам"".'"));
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Товары",, Отказ);	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура заполнения ТЧ "ДокументыОснования".
//
&НаКлиенте
Процедура Заполнить(Команда)
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Для заполнения табличной части необходимо указать контрагента.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Контрагент",,Отказ)		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФормаОплаты) Тогда
		ТекстСообщения = НСтр("ru = 'Для заполнения табличной части необходимо указать форму оплаты.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ФормаОплаты",,Отказ)		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		ТекстСообщения = НСтр("ru = 'Для заполнения табличной части необходимо указать валюту документа.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ВалютаДокумента",,Отказ)		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ТекстСообщения = НСтр("ru = 'Для заполнения табличной части необходимо задать дату.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Дата",,Отказ)		
	КонецЕсли;
	
	Если Не Отказ Тогда	
		Если Объект.ДокументыОснования.Количество() > 0 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьТабличнуюЧасть", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Табличная часть документа будет очищена. Продолжить выполнение операции?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);				
		Иначе
			ЗаполнитьНаСервере();
			
			Если Объект.ДокументыОснования.Количество() = 0 Тогда 
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Для контрагента %1 не найдены документы с незаполненными СФ.'"), Объект.Контрагент);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.ДокументыОснования");
			Иначе
				ТекстОповещения = НСтр("ru = 'Заполнение'");
				ТекстПояснения = НСтр("ru = 'Табличная часть заполнена'");
				ПоказатьОповещениеПользователя(ТекстОповещения,, ТекстПояснения, БиблиотекаКартинок.Информация32);
			КонецЕсли
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

// Процедура заполнения ТЧ "Товары".
//
&НаКлиенте
Процедура ЗаполнитьПоДокументам(Команда)
	Отказ = Ложь;
	
	Если Объект.ДокументыОснования.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть ""Документы"". Операция отменена.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.ДокументыПоступления",,Отказ);		
	КонецЕсли;

	Если Отказ Тогда 
		Возврат
	КонецЕсли;		
	
	Если Объект.Товары.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьПоДокументам", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные табличной части ""Товары"" будут перезаполнены. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		ЗаполнениеТабличнойЧастиТовары();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВЭлектроннойФорме(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		Или Модифицированность Тогда 
		ТекстСообщения = НСтр("ru='Для формирования отчета по подоходному налогу в электронной форме необходимо записать документ.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	
	
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для формирования отчета по подоходному налогу в электронной форме
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("НаправлениеВыгрузки", "СохранитьВЭлектроннойФорме"));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьСохранение();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьТабличнуюЧасть(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ДокументыОснования.Очистить();
		
		ЗаполнитьНаСервере();
		
		Если Объект.ДокументыОснования.Количество() = 0 Тогда 
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Для контрагента %1 не найдены документы с незаполненными СФ.'"), Объект.Контрагент);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.ДокументыОснования");
		Иначе
			ТекстОповещения = НСтр("ru = 'Заполнение'");
			ТекстПояснения = НСтр("ru = 'Табличная часть заполнена'");
			ПоказатьОповещениеПользователя(ТекстОповещения,, ТекстПояснения, БиблиотекаКартинок.Информация32);
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьПоДокументам(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнениеТабличнойЧастиТовары();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НомерБланкаСФОбработкаВыбораЗавершение(НомерБланкаСФ, ДополнительныеПараметры) Экспорт
	Если НомерБланкаСФ <> Неопределено Тогда
		СформироватьНомераСчетФактур(НомерБланкаСФ);
		
		Если НЕ Элементы.НомерБланкаСФ.СписокВыбора.НайтиПоЗначению(НомерБланкаСФ) = Неопределено Тогда 
			Объект.НомерБланкаСФ = НомерБланкаСФ;	
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПроводник(ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ПолноеИмяФайла) Тогда 
		ФайловаяСистемаКлиент.ОткрытьПроводник(ДополнительныеПараметры.ПолноеИмяФайла);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	Элементы.ГруппаСообщенияОНеобходимостиПерезаполненияТЧТовары.Видимость = НеобходимостьПерезаполнения;
	
	Если ВалютаРегламентированногоУчета = Объект.ВалютаДокумента Тогда
		Элементы.ПечататьКурсИСуммуВРегламентированнойВалюте.Видимость = Ложь;	
	Иначе
		Элементы.ПечататьКурсИСуммуВРегламентированнойВалюте.Видимость = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Элементы.ВалютаДокумента.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ВалютаДокумента.ТолькоПросмотр = Ложь;
	КонецЕсли;	
	
	Элементы.ДокументыСуммаНДС.Видимость  	= ДанныеУчетнойПолитики.ПлательщикНДС;
	Элементы.ДокументыСтавкаНДС.Видимость 	= ДанныеУчетнойПолитики.ПлательщикНДС;
	Элементы.ДокументыСуммаНСП.Видимость  	= ДанныеУчетнойПолитики.ПлательщикНСП;
	Элементы.ТоварыСуммаНДС.Видимость 		= ДанныеУчетнойПолитики.ПлательщикНДС;
	Элементы.ТоварыСуммаНСП.Видимость 		= ДанныеУчетнойПолитики.ПлательщикНСП;
	
	Если Объект.СуммаВключаетНалоги Тогда
		Элементы.ТоварыСумма.Видимость 	= Истина;
		Элементы.ТоварыСуммаДохода1.Видимость = Ложь;
		Элементы.ТоварыВсего.Видимость 	= Ложь;
		Элементы.ТоварыСуммаДохода2.Видимость = Истина;
		
		Элементы.ДокументыСумма.Видимость 	= Истина;
		Элементы.ДокументыСуммаДохода1.Видимость 	= Ложь;
		Элементы.ДокументыВсего.Видимость 	= Ложь;
		Элементы.ДокументыСуммаДохода2.Видимость 	= Истина;
	Иначе
		Элементы.ТоварыСумма.Видимость 	= Ложь;
		Элементы.ТоварыСуммаДохода1.Видимость = Истина;
		Элементы.ТоварыВсего.Видимость 	= Истина;		
		Элементы.ТоварыСуммаДохода2.Видимость = Ложь;
		
		Элементы.ДокументыСумма.Видимость 	= Ложь;
		Элементы.ДокументыСуммаДохода1.Видимость 	= Истина;
		Элементы.ДокументыВсего.Видимость 	= Истина;
		Элементы.ДокументыСуммаДохода2.Видимость 	= Ложь;
	КонецЕсли;
	
	Элементы.ДоговорКонтрагента.Доступность = НЕ Объект.ПоГоловномуКонтрагенту;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьНаСервере()

	ОбъектДокумента = РеквизитФормыВЗначение("Объект");
	ОбъектДокумента.ЗаполнитьДокументыОснования();                           	
	ЗначениеВРеквизитФормы(ОбъектДокумента, "Объект");	

КонецПроцедуры

// Процедура устанавливает функциональные опции формы документа.
//
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма, Объект.Организация, ДатаДокумента);
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, ДатаДокумента, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура формирования списка серий счетов-фактур.
//
&НаКлиенте
Процедура СформироватьСериюСчетаФактуры()	
	
	Элементы.СерияБланкаСФ.СписокВыбора.Очистить();
	СписокСерийБланковСФ = БухгалтерскийУчетВызовСервера.СформироватьСписокСерийСФ(Объект.Организация);
	Элементы.СерияБланкаСФ.СписокВыбора.ЗагрузитьЗначения(СписокСерийБланковСФ);

КонецПроцедуры

// Процедура формирования списка номеров серии счет фактуры.
//
&НаКлиенте
Процедура СформироватьНомераСчетФактур(НомерБланкаСФ = "0")
	
	Элементы.НомерБланкаСФ.СписокВыбора.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.СерияБланкаСФ) Тогда 
		Возврат;
	КонецЕсли;
	
	СписокНомеров = БухгалтерскийУчетВызовСервера.СформироватьСписокНомеровБланковСФ(Объект.Организация, Объект.СерияБланкаСФ, НомерБланкаСФ);
	
	Для Каждого НомерБланка Из СписокНомеров Цикл
		Элементы.НомерБланкаСФ.СписокВыбора.Добавить(НомерБланка.Значение, НомерБланка.Представление);
	КонецЦикла;
КонецПроцедуры	

// Процедура получает список документов из временного хранилища
//
// Параметры:
//  АдресЗапасовВХранилище - Структура - адрес в хранилище и идентификатор формы владельца.
//
// Возвращаемое значение:
//  Булево - Истина, если подобранные документы отличаются от уже имеющихся документов 
//	в ТЧ "ДокументыОплаты". 
//
&НаСервере
Функция ПолучитьДокументыИзХранилища(АдресЗапасовВХранилище)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Перезаполнить = Ложь;
	Если ТаблицаДляЗагрузки.Количество() <> Объект.ДокументыОснования.Количество() Тогда
		Перезаполнить = Истина;
	Иначе
		СтарыеДанныеТабличнойЧасти = Объект.ДокументыОснования.Выгрузить();
		Для каждого ДокументПодбора Из ТаблицаДляЗагрузки Цикл
			РезультатПоиска = СтарыеДанныеТабличнойЧасти.Найти(ДокументПодбора.ДокументОснование,"ДокументОплаты");
			Если РезультатПоиска = Неопределено Тогда
				Перезаполнить = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Перезаполнить Тогда
		Объект.ДокументыОснования.Очистить();  
		                                                             
		Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл			
			СтрокаТабличнойЧасти = Объект.ДокументыОснования.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Перезаполнить;
КонецФункции

// Процедура устанавливает тип реквизита "ДокументОплаты",
// табличной части "ДокументыПодбора", в зависимости от значения
// реквизита шапки "Возврат".
//
&НаКлиенте
Процедура УстановитьТипДляВыбораДокумента()	
	МассивТипов = Новый Массив();
	
	Если Объект.ВозвратТоваров Тогда
		МассивТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
 		Элементы.ДокументыДокументОплаты.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	Иначе
		МассивТипов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		МассивТипов.Добавить(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
		Элементы.ДокументыДокументОплаты.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет реквизит "СуммаДокумента",
// табличной части "ДокументыПодбора", при выборе
// самого документа.
//
// Параметры:
//  ТекущийПодобранныйДокумент - ДокументСсылка - ссылка на выбранный документ в ТЧ "ДокументыПодбора".
//  
// Возвращаемое значение:
//  Число - сумма передаваемого в функцию документа.
//
&НаСервере
Функция ПолучитьСуммыВыбираемогоДокумента(ТекущийПодобранныйДокумент)
	Возврат ТекущийПодобранныйДокумент.СуммаДокумента		
КонецФункции

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию);
	
	СтруктураДанные.Вставить(
		"ЭкспортнаяПоставка",
		НЕ Объект.Контрагент.ПризнакСтраны = Перечисления.ПризнакиСтраны.КР);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанию
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ВидыДоговораДляДокумента(Документ);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеДоговора(МодифицированДоговор = Ложь)
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(Объект.ДоговорКонтрагента);
	
	Объект.ВидПоставкиНДС 	= СтруктураДанные.ВидПоставкиНДС;	
	Объект.ВалютаДокумента 	= ?(ЗначениеЗаполнено(СтруктураДанные.ВалютаРасчетов), 
		СтруктураДанные.ВалютаРасчетов, ВалютаРегламентированногоУчета);
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(ДоговорКонтрагента)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорКонтрагента.ВалютаРасчетов);
	
	СтруктураДанные.Вставить(
		"ВидПоставкиНДС",
		ДоговорКонтрагента.ВидПоставкиНДС);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

// Процедура заполняет ТЧ "ДокументыПоступления" и  
// производит необходимые действия после заполнения.
//
&НаКлиенте
Процедура ЗаполнениеТабличнойЧастиТовары()
	Объект.Товары.Очистить();
	ЗаполнитьПоДокументамНаСервере();
	ПересчитатьИтоги();
	НеобходимостьПерезаполнения = Ложь;
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	ТекстОповещения = НСтр("ru = 'Заполнение'");
	ТекстПояснения = НСтр("ru = 'Табличная часть ""Товары"" заполнена'");
	ПоказатьОповещениеПользователя(ТекстОповещения,, ТекстПояснения, БиблиотекаКартинок.Информация32);	
КонецПроцедуры

// Процедура заполняет табличную часть "Товары"
// по подобранным документам.
//
&НаСервере
Процедура ЗаполнитьПоДокументамНаСервере()
	
	ОбъектДокумента = РеквизитФормыВЗначение("Объект");
	ОбъектДокумента.ЗаполнитьПоПодобраннымДокументам();                           	
	ЗначениеВРеквизитФормы(ОбъектДокумента, "Объект");
	
КонецПроцедуры

// Процедура пересчитывает сумму документа
//
&НаКлиенте
Процедура ПересчитатьИтоги()
	Объект.СуммаДокумента 	= Объект.Товары.Итог("Сумма");	
КонецПроцедуры // ()

&НаСервере
Функция ТребуетсяНастройкаАвторизацияИнтернетПоддержки()
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		Возврат Не МодульИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ПриПодключенииИнтернетПоддержки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодключенияИнтернетПоддержки", ЭтотОбъект, ДополнительныеПараметры);
		МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияИнтернетПоддержки(Результат, ДополнительныеПараметры) Экспорт
	Если Не (ТипЗнч(Результат) = Тип("Структура")
		И ЗначениеЗаполнено(Результат.Логин)
		И ЗначениеЗаполнено(Результат.Пароль)) Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьСохранение();	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеЗаявленияВЭлектронномФормате

&НаКлиенте
Процедура ПродолжитьСохранение()
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Укажите путь для сохранения файла'");
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ДиалогОткрытияФайлаЗавершение", ЭтотОбъект);
	ДиалогОткрытияФайла.Показать(Оповещение);

КонецПроцедуры // ПродолжитьСохранение()

&НаКлиенте
Процедура ДиалогОткрытияФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() > 0 Тогда
		Попытка
			СтруктураДанных = ФормированиеФайлаXML();
			
			Если СтруктураДанных = Неопределено Тогда
				Возврат;	
			КонецЕсли;	
			
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось завершить формирование файла.
				|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;	
		
		// Формирование имени файла.
		КаталогФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВыбранныеФайлы[0]);
		ИмяФайла = СтруктураДанных.ИмяФайла;
		ПолноеИмяФайла = КаталогФайла + ИмяФайла;
		
		// Сохранение файла.
		Двоичное = ПолучитьИзВременногоХранилища(СтруктураДанных.АдресВременногоХранилища);
		Двоичное.Записать(ПолноеИмяФайла);	
		
		ТекстОповещения = НСтр("ru = 'Файл успешно сформирован'");
		ТекстПояснения = ИмяФайла;
		ПоказатьОповещениеПользователя(
			ТекстОповещения, 
			Новый ОписаниеОповещения("ОткрытьПроводник", ЭтотОбъект, Новый Структура("ПолноеИмяФайла", ПолноеИмяФайла)), 
			ТекстПояснения, 
			БиблиотекаКартинок.Информация32);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция СоздатьОбъектXDTO(ТипОбъекта)
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.sample-package3.org", ТипОбъекта));
	
КонецФункции // СоздатьОбъектXDTO()

// Процедура создания XML файла
//
&НаСервере
Функция ФормированиеФайлаXML()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИмяФайла", "");
	СтруктураДанных.Вставить("АдресВременногоХранилища", "");
			
	Дата = Формат(Объект.Дата, "ДФ=yyyy-MM-dd");
	
	ШаблонИмениФайла = СтрШаблон(НСтр("ru = 'Счет-фактура №%1 от %2.'"), Объект.Номер, Дата);
	ИмяФайла = ШаблонИмениФайла + ".xml";
	
	// Массив для описания ошибок и если ошибки есть то отмена создания XML файла.
	МассивОшибок = Новый Массив();
	
	// 1. Данные из ТЧ "Товары".
	// 2. Определение наличных и безналичных оплат по документам. Если форма оплаты "БезвозмезднаяПоставка", тогда
	// 		код формы оплаты в файле xml для него отдельный, в остальных случаях необходимо разделить документы
	//		на налично и безналично оплаченные.
	// 3. Номенклатура с указанием признака "Услуга".
	// 4. Определение наличия в ТЧ "Товары" товаров и услуг для их дальнейшего разделения в файле xml.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Товары.ДокументОснования КАК ДокументОснования,
		|	Товары.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаТовары.ДокументОснования КАК Документ,
		|	ВЫБОР
		|		КОГДА &ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.БезвозмезднаяПоставка)
		|			ТОГДА ИСТИНА
		|		КОГДА ВременнаяТаблицаТовары.ДокументОснования ССЫЛКА Документ.РеализацияТоваровУслуг
		|			ТОГДА ВЫРАЗИТЬ(ВременнаяТаблицаТовары.ДокументОснования КАК Документ.РеализацияТоваровУслуг).БезналичныйРасчет
		|		ИНАЧЕ ВЫРАЗИТЬ(ВременнаяТаблицаТовары.ДокументОснования КАК Документ.ВозвратТоваровОтПокупателя).БезналичныйРасчет
		|	КОНЕЦ КАК БезналичныйРасчет
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА &ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.БезвозмезднаяПоставка)
		|			ТОГДА ИСТИНА
		|		КОГДА ВременнаяТаблицаТовары.ДокументОснования ССЫЛКА Документ.РеализацияТоваровУслуг
		|			ТОГДА ВЫРАЗИТЬ(ВременнаяТаблицаТовары.ДокументОснования КАК Документ.РеализацияТоваровУслуг).БезналичныйРасчет
		|		ИНАЧЕ ВЫРАЗИТЬ(ВременнаяТаблицаТовары.ДокументОснования КАК Документ.ВозвратТоваровОтПокупателя).БезналичныйРасчет
		|	КОНЕЦ КАК БезналичныйРасчет
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).Услуга КАК Услуга
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).Услуга КАК Услуга
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары";	
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ФормаОплаты", Объект.ФормаОплаты);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаДокументы = МассивРезультатов[1].Выгрузить();
	
	ВыборкаФормаОплаты = МассивРезультатов[2].Выбрать();
	
	ТаблицаНомеклатура = МассивРезультатов[3].Выгрузить();
	
	ВыборкаПризнакУслуги = МассивРезультатов[4].Выбрать();
	
	ОбъектXDTO = СоздатьОбъектXDTO("receipts");
	
	НомерДоговора 	= Объект.ДоговорКонтрагента.НомерДоговора;
	ДатаДоговора 	= Формат(Объект.ДоговорКонтрагента.ДатаДоговора, "ДФ=yyyy-MM-dd");
	КодВидаПоставки = Объект.ВидПоставкиНДС.Код;
	ИННОрганизации 	= Объект.Организация.ИНН;
	ИННКонтрагента 	= Объект.Контрагент.ИНН;
	КодВалюты 		= Объект.ВалютаДокумента.Код;
	КодСтраны 		= Объект.Контрагент.СтранаРезидентства.Код;
	
	Пока ВыборкаФормаОплаты.Следующий() Цикл
		
		Если Объект.ФормаОплаты = Перечисления.ФормыОплаты.БезвозмезднаяПоставка Тогда
			КодФормыОплаты = 30;	
			
		ИначеЕсли ВыборкаФормаОплаты.БезналичныйРасчет Тогда
			КодФормыОплаты = 20;
			
		Иначе
			КодФормыОплаты = 10;
		КонецЕсли;	
		
		Пока ВыборкаПризнакУслуги.Следующий() Цикл

			ДанныеПоТоварам = goods(ТаблицаДокументы, ТаблицаНомеклатура, КодФормыОплаты, ВыборкаПризнакУслуги.Услуга);
			
			Если ДанныеПоТоварам.ЕстьЗаписи Тогда
			
				ОбъектXDTOreceipt = СоздатьОбъектXDTO("receipt");
				
				ОбъектXDTOserialNumber = СоздатьОбъектXDTO("serialNumber"); // Номер бланка СФ
				ОбъектXDTOserialNumber.Text = Объект.НомерБланкаСФ;
				ОбъектXDTOreceipt.serialNumber.Добавить(ОбъектXDTOserialNumber);
				
				ОбъектXDTOreceiptTypeCode = СоздатьОбъектXDTO("receiptTypeCode"); // Признак услуг или товаров
				ОбъектXDTOreceiptTypeCode.Text = ?(ВыборкаПризнакУслуги.Услуга, 20, 10);
				ОбъектXDTOreceipt.receiptTypeCode.Добавить(ОбъектXDTOreceiptTypeCode);
				
				ОбъектXDTObankAccount = СоздатьОбъектXDTO("bankAccount"); // Банковский счет организации
				ОбъектXDTObankAccount.Text = "";
				ОбъектXDTOreceipt.bankAccount.Добавить(ОбъектXDTObankAccount); 
				
				ОбъектXDTOcontractorPin = СоздатьОбъектXDTO("contractorPin"); // ИНН контрагента
				ОбъектXDTOcontractorPin.Text = ИННКонтрагента;
				ОбъектXDTOreceipt.contractorPin.Добавить(ОбъектXDTOcontractorPin);
				
				ОбъектXDTOcontractorDepartmentName = СоздатьОбъектXDTO("contractorDepartmentName"); // Подразделение контрагента
				ОбъектXDTOcontractorDepartmentName.Text = "";
				ОбъектXDTOreceipt.contractorDepartmentName.Добавить(ОбъектXDTOcontractorDepartmentName); 
				
				ОбъектXDTOcontractorBankAccount = СоздатьОбъектXDTO("contractorBankAccount"); // Банковский счет контрагента
				ОбъектXDTOcontractorBankAccount.Text = "";
				ОбъектXDTOreceipt.contractorBankAccount.Добавить(ОбъектXDTOcontractorBankAccount); 
				
				ОбъектXDTOdeliveryContractNumber = СоздатьОбъектXDTO("deliveryContractNumber"); // Номер договора
				ОбъектXDTOdeliveryContractNumber.Text = НомерДоговора;
				ОбъектXDTOreceipt.deliveryContractNumber.Добавить(ОбъектXDTOdeliveryContractNumber);
				
				ОбъектXDTOdeliveryContractDate = СоздатьОбъектXDTO("deliveryContractDate"); // Дата договора
				ОбъектXDTOdeliveryContractDate.Text = ДатаДоговора;
				ОбъектXDTOreceipt.deliveryContractDate.Добавить(ОбъектXDTOdeliveryContractDate);
				
				ОбъектXDTOconsigneePin = СоздатьОбъектXDTO("consigneePin"); // ИНН контрагента (получателя)
				ОбъектXDTOconsigneePin.Text = ИННКонтрагента;
				ОбъектXDTOreceipt.consigneePin.Добавить(ОбъектXDTOconsigneePin);
				
				ОбъектXDTOreceipt.consigneeAddress.Добавить(Address("consigneeAddress")); // Данные адреса пункта приема товара

				ОбъектXDTOshipperPin = СоздатьОбъектXDTO("shipperPin"); // ИНН организации (отправителя)
				ОбъектXDTOshipperPin.Text = ИННОрганизации;
				ОбъектXDTOreceipt.shipperPin.Добавить(ОбъектXDTOshipperPin); 
				
				ОбъектXDTOreceipt.shipmentAddress.Добавить(Address("shipmentAddress")); // Данные адреса пункта отправки товара
				
				ОбъектXDTOgoodsDeliveryTypeCode = СоздатьОбъектXDTO("goodsDeliveryTypeCode"); // Код способа отправки
				ОбъектXDTOgoodsDeliveryTypeCode.Text = 20;
				ОбъектXDTOreceipt.goodsDeliveryTypeCode.Добавить(ОбъектXDTOgoodsDeliveryTypeCode);
				
				ОбъектXDTOpaymentTypeCode = СоздатьОбъектXDTO("paymentTypeCode"); // Код формы оплаты
				ОбъектXDTOpaymentTypeCode.Text = КодФормыОплаты;     
				ОбъектXDTOreceipt.paymentTypeCode.Добавить(ОбъектXDTOpaymentTypeCode);
				
				ОбъектXDTOinvoiceDeliveryTypeCode = СоздатьОбъектXDTO("invoiceDeliveryTypeCode"); // Код поставки НДС
				ОбъектXDTOinvoiceDeliveryTypeCode.Text = КодВидаПоставки;
				ОбъектXDTOreceipt.invoiceDeliveryTypeCode.Добавить(ОбъектXDTOinvoiceDeliveryTypeCode);
				
				ОбъектXDTOvatDeliveryTypeCode = СоздатьОбъектXDTO("vatDeliveryTypeCode"); // 
				ОбъектXDTOvatDeliveryTypeCode.Text = "";
				ОбъектXDTOreceipt.vatDeliveryTypeCode.Добавить(ОбъектXDTOvatDeliveryTypeCode);
				
				ОбъектXDTOcurrencyCode = СоздатьОбъектXDTO("currencyCode"); // Код валюты
				ОбъектXDTOcurrencyCode.Text = КодВалюты;
				ОбъектXDTOreceipt.currencyCode.Добавить(ОбъектXDTOcurrencyCode);
				
				ОбъектXDTOexchangeRate = СоздатьОбъектXDTO("exchangeRate"); // Курс
				ОбъектXDTOexchangeRate.Text = "";
				ОбъектXDTOreceipt.exchangeRate.Добавить(ОбъектXDTOexchangeRate);
				
				ОбъектXDTOcontractorCitizenshipCode = СоздатьОбъектXDTO("contractorCitizenshipCode"); // Код страны
				ОбъектXDTOcontractorCitizenshipCode.Text = КодСтраны;
				ОбъектXDTOreceipt.contractorCitizenshipCode.Добавить(ОбъектXDTOcontractorCitizenshipCode);
				
				ОбъектXDTOnote = СоздатьОбъектXDTO("note"); // Комментарий
				ОбъектXDTOnote.Text = Объект.Комментарий;
				ОбъектXDTOreceipt.note.Добавить(ОбъектXDTOnote);
				
				ОбъектXDTOreceipt.goods.Добавить(ДанныеПоТоварам.ОбъектXDTOgoods); // Запись данных о товарах
				
				ОбъектXDTO.receipt.Добавить(ОбъектXDTOreceipt);	
			КонецЕсли;	
		КонецЦикла;
		
		ВыборкаПризнакУслуги.Сбросить()
	КонецЦикла;	
	
	Если НЕ ЗначениеЗаполнено(Объект.НомерБланкаСФ) Тогда
		МассивОшибок.Добавить(НСтр("ru = 'Не указан номер бланка счет-фактуры.'"));
	КонецЕсли;	
	
	
	
	
	
	
	
	
	
	
		
	// Если есть ошибки файл не создается.
	Если МассивОшибок.Количество() > 0 Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Файл XML не сформирован по следующим причинам:'"));
		
		Для Каждого СтрокаМассива Из МассивОшибок Цикл
			ОбщегоНазначения.СообщитьПользователю(СтрокаМассива);			
		КонецЦикла;	
		
		Возврат Неопределено;
		
	Иначе
		// Создание файла.
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		ЗаписьXML = Новый ЗаписьXML;
		ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь);	
		ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, ПараметрыЗаписиXML);
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
		ЗаписьXML.Закрыть();
		
		// Удаление лишнего текста из xml файла
		ТекстДокумент = Новый ТекстовыйДокумент;
		ТекстДокумент.Прочитать(ИмяВременногоФайла);
		ТекстФайла = ТекстДокумент.ПолучитьТекст();
		ТекстФайла = СтрЗаменить(
			ТекстФайла,
			" xmlns=""http://www.sample-package3.org"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""",
			"");
		ТекстДокумент.УстановитьТекст(ТекстФайла);	
		ТекстДокумент.Записать(ИмяВременногоФайла);	
		
		Двоичное = Новый ДвоичныеДанные(ИмяВременногоФайла);
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Двоичное, УникальныйИдентификатор);
		
		// Удаление временного файла
		ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
		
		СтруктураДанных.ИмяФайла = ИмяФайла;
		СтруктураДанных.АдресВременногоХранилища = АдресВременногоХранилища;
		
		Возврат СтруктураДанных;
	КонецЕсли;
КонецФункции // ФормированиеФайла()

&НаСервере
Функция Address(НаименованиеОбъекта)

	ОбъектXDTO = СоздатьОбъектXDTO(НаименованиеОбъекта); // адрес пункта приема/отправки товара
	
	ОбъектXDTOateCode = СоздатьОбъектXDTO("ateCode"); // код местности по базе darek.kg
	ОбъектXDTOateCode.Text = "";
	ОбъектXDTO.ateCode.Добавить(ОбъектXDTOateCode);
	
	ОбъектXDTOstreetCode = СоздатьОбъектXDTO("streetCode"); // код улицы по базе darek.kg
	ОбъектXDTOstreetCode.Text = "";
	ОбъектXDTO.streetCode.Добавить(ОбъектXDTOstreetCode);
	
	ОбъектXDTOhouseNumber = СоздатьОбъектXDTO("houseNumber"); // номер дома
	ОбъектXDTOhouseNumber.Text = "";
	ОбъектXDTO.houseNumber.Добавить(ОбъектXDTOhouseNumber);
	
	ОбъектXDTOapartmentNumber = СоздатьОбъектXDTO("apartmentNumber"); // номер квартиры
	ОбъектXDTOapartmentNumber.Text = "";
	ОбъектXDTO.apartmentNumber.Добавить(ОбъектXDTOapartmentNumber);
	
	Возврат ОбъектXDTO;	
КонецФункции // Address()

&НаСервере
Функция goods(ТаблицаДокументы, ТаблицаНомеклатура, КодФормыОплаты, Услуги)

	ОбъектXDTOgoods = СоздатьОбъектXDTO("goods");
	
	ЕстьЗаписи = Ложь;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если КодФормыОплаты = 10 И ТаблицаДокументы.Найти(СтрокаТабличнойЧасти.ДокументОснования, "Документ").БезналичныйРасчет 
			ИЛИ КодФормыОплаты = 20 И НЕ ТаблицаДокументы.Найти(СтрокаТабличнойЧасти.ДокументОснования, "Документ").БезналичныйРасчет Тогда
			Продолжить;				
		КонецЕсли;	
			
		Если Услуги <> ТаблицаНомеклатура.Найти(СтрокаТабличнойЧасти.Номенклатура, "Номенклатура").Услуга Тогда
			Продолжить;				
		КонецЕсли;	

		КодСтавкиНДС = ?(СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.Стандарт, 60, 30);
	
		КодСтавкиНСП = "";
		
		Если СтрокаТабличнойЧасти.СтавкаНСП = Справочники.СтавкиНСП.Прочее Тогда
			КодСтавкиНСП = 80;
			
		ИначеЕсли СтрокаТабличнойЧасти.СтавкаНСП = Справочники.СтавкиНСП.СотоваяСвязь Тогда
			КодСтавкиНСП = 40;
			
		ИначеЕсли СтрокаТабличнойЧасти.СтавкаНСП = Справочники.СтавкиНСП.Торговля Тогда
			КодСтавкиНСП = 10;
			
		ИначеЕсли СтрокаТабличнойЧасти.СтавкаНСП = Справочники.СтавкиНСП.УслугиБанка Тогда
			КодСтавкиНСП = 20;
		КонецЕсли;
				
		ОбъектXDTOgood = СоздатьОбъектXDTO("good");
		
		ОбъектXDTOvatCode = СоздатьОбъектXDTO("vatCode"); // Код ставки НДС 
		ОбъектXDTOvatCode.Text = КодСтавкиНДС;
		ОбъектXDTOgood.vatCode.Добавить(ОбъектXDTOvatCode);
		
		ОбъектXDTOstCode = СоздатьОбъектXDTO("stCode"); // Код ставки НСП
		ОбъектXDTOstCode.Text = КодСтавкиНСП;
		ОбъектXDTOgood.stCode.Добавить(ОбъектXDTOstCode);
		
		ОбъектXDTOgoodsName = СоздатьОбъектXDTO("goodsName"); // Наименование товара/услуги
		ОбъектXDTOgoodsName.Text = СтрокаТабличнойЧасти.Номенклатура.НаименованиеПолное;
		ОбъектXDTOgood.goodsName.Добавить(ОбъектXDTOgoodsName);
		
		ОбъектXDTObaseCount = СоздатьОбъектXDTO("baseCount"); // Количество
		ОбъектXDTObaseCount.Text = СтрокаТабличнойЧасти.Количество;
		ОбъектXDTOgood.baseCount.Добавить(ОбъектXDTObaseCount);
		
		ОбъектXDTOprice = СоздатьОбъектXDTO("price"); // Цена
		ОбъектXDTOprice.Text = СтрокаТабличнойЧасти.Цена;
		ОбъектXDTOgood.price.Добавить(ОбъектXDTOprice);
		
		ОбъектXDTOgoods.good.Добавить(ОбъектXDTOgood);
		
		ЕстьЗаписи = Истина;
	КонецЦикла;	
	
	ДанныеПоТоварам = Новый Структура();
	ДанныеПоТоварам.Вставить("ОбъектXDTOgoods", ОбъектXDTOgoods);
	ДанныеПоТоварам.Вставить("ЕстьЗаписи", ЕстьЗаписи);
	
	Возврат ДанныеПоТоварам;	
КонецФункции // goods()

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура ТоварыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВставитьСтроки(Команда)
	
	ВставитьСтроки("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ИмяКоманды = Команда.Имя;
	АдресНастроек = ЭтотОбъект.ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд;
	ОписаниеКоманды = ПодключаемыеКомандыКлиентПовтИсп.ОписаниеКоманды(ИмяКоманды, АдресНастроек);
	
	ДополнительныеПараметрыКоманды = ОписаниеКоманды.ДополнительныеПараметры;
	Если ДополнительныеПараметрыКоманды.Свойство("ПараметрыПечати") Тогда 
		ПараметрыПечати = ДополнительныеПараметрыКоманды.ДополнительныеПараметры;
		Если ПараметрыПечати.Свойство("ПлательщикНДС") Тогда 
			ПараметрыПечати.ПлательщикНДС = ДанныеУчетнойПолитики.ПлательщикНДС;
		КонецЕсли;
	КонецЕсли;	

    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
