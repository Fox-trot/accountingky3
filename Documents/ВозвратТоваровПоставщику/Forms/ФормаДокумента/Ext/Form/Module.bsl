#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ПризнакСтраны = Объект.Контрагент.ПризнакСтраны;
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();	
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		СтруктураКурсКратность 	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ДоговорКонтрагента.ВалютаРасчетов, ДатаДокумента);	
		КурсНБКР      			= ?(СтруктураКурсКратность.Курс = 0, 1, СтруктураКурсКратность.Курс);
		КратностьНБКР 			= ?(СтруктураКурсКратность.Кратность = 0, 1, СтруктураКурсКратность.Кратность);
	КонецЕсли;	
	
	УстановитьФункциональныеОпцииФормы();

	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСервере(Элементы, "Товары");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСервере(Элементы, "Услуги");
	// Конец КопированиеСтрокТабличныхЧастей
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеБППовтИсп.ИспользоватьПодключаемоеОборудование();
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УстановитьНачальныеСвойстваСубконтоТаблицы();

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьТекущуюСтраницу();
	ОбновитьПодвалФормы();

	УстановитьМаскуНомераБланкаСФ();
	
	// Проверка заполнения возврата на основании поступления при создании на основании.
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.ДокументОснование)
		И Объект.Товары.Количество() = 0 И Объект.Услуги.Количество() = 0 И Объект.ОС.Количество() = 0 Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'По поступлению ""%1"" возвращены все позиции.'"), Объект.ДокументОснование);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "МодифицированДоговораКонтрагента"
		И Параметр = Объект.ДоговорКонтрагента Тогда
		ОбработатьИзменениеДоговора();
		
	ИначеЕсли ИмяСобытия = "ПодборНоменклатурыПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище);
		
		ОбновитьПодвалФормы();
		
	ИначеЕсли ИмяСобытия = "СчетФактураПолученныйПослеЗаписи"
		И НЕ Параметр.Найти(Объект.Ссылка) = Неопределено Тогда  
		
		ЗаполнитьСчетФактураПолученный();
		УстановитьВидимостьДоступностьЭлементов();	
		
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Товары");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Услуги");
	КонецЕсли;
	// Конец КопированиеСтрокТабличныхЧастей
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату.
			Если Параметр[1] = Неопределено Тогда
				ТекШтрихкод = Параметр[0]; // Достаем штрихкод из основных данных
			Иначе
				ТекШтрихкод = Параметр[1][1]; // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			ПоискПоШтрихкодуЗавершение(ТекШтрихкод, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары"));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	КонтрольВеденияУчета.ПослеЗаписиНаСервере(ТекущийОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением, Объект.ВалютаДокумента);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные);
		КонецЕсли;	
	КонецЕсли;
	
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);				
	УстановитьФункциональныеОпцииФормы();
	ОбработатьИзменениеУчетнойПолитики();
	ОбработатьИзменениеДоговора();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер = "";
	
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	УстановитьФункциональныеОпцииФормы();	
	ОбработатьИзменениеУчетнойПолитики();	
	
	// Договор автоматически очистился- заполнение по умолчанию.
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ОбработатьИзменениеДоговора();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Вид операции.
//
&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	УстановитьМаскуНомераБланкаСФ();
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ПризнакСтраны = СтруктураДанные.ПризнакСтраны;
	
	Если ПризнакСтраны <> ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			СтрокаТабличнойЧасти.СуммаАкциза = 0;
			СтрокаТабличнойЧасти.СуммаАкцизаПоПоступлению = 0;
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
			СтрокаТабличнойЧасти.СуммаАкциза = 0;
		КонецЦикла;
	КонецЕсли;	
		
	// Изменение признака страны
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		Объект.БезналичныйРасчет = Истина;
		// Ставки
		Объект.ЗначениеСтавкиНСП = 0;		
	ИначеЕсли ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ИмпортЭкспорт") Тогда	
		Объект.БезналичныйРасчет = Истина;
		// Ставки
		Объект.ЗначениеСтавкиНДС = 0;
		Объект.ЗначениеСтавкиНСП = 0;
	КонецЕсли;	

	ОбработатьИзменениеДоговора();  
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор контрагента.
//
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ОбработатьИзменениеДоговора();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НДС.
//
&НаКлиенте
Процедура ЗначениеСтавкиНДСПриИзменении(Элемент)
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"Товары",
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСП, 0),
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
		КурсНБКР,
		КратностьНБКР,
		СтранаВходитВЕАЭС);
		
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"Услуги",
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСП, 0),
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
		КурсНБКР,
		КратностьНБКР,
		СтранаВходитВЕАЭС);
		
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"ОС",
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСПДляОС, 0), 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
		КурсНБКР,
		КратностьНБКР,
		СтранаВходитВЕАЭС);
		
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл	 
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтранаВходитВЕАЭС);
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтранаВходитВЕАЭС);	
	КонецЦикла;	
		
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НСП.
//
&НаКлиенте
Процедура ЗначениеСтавкиНСППриИзменении(Элемент)
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"Товары",
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСП, 0),
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
		КурсНБКР,
		КратностьНБКР,
		СтранаВходитВЕАЭС);
		
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"Услуги",
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСП, 0),
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
		КурсНБКР,
		КратностьНБКР,
		СтранаВходитВЕАЭС);	
		
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл	 
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтранаВходитВЕАЭС);
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтранаВходитВЕАЭС);	
	КонецЦикла;	
		
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НСП (ОС)
//
&НаКлиенте
Процедура ЗначениеСтавкиНСПДляОСПриИзменении(Элемент)
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"ОС",
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСПДляОС, 0), 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
		КурсНБКР,
		КратностьНБКР);
		
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ДокументОснование.
//
&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда  
		ЗаполнитьПоДокументуОснования();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флага Расчет по емкости.
//
&НаКлиенте
Процедура ИспользоватьДопЕдиницыПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Серия бланка счет-фактуры.
//
&НаКлиенте
Процедура СерияБланкаСФПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.СерияБланкаСФ) И (НЕ ЗначениеЗаполнено(Объект.ДатаСФ)) Тогда
		Объект.ДатаСФ = ДатаДокумента;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура БезналичныйРасчетПриИзменении(Элемент)
	
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	Если Объект.БезналичныйРасчет Тогда
		Объект.ЗначениеСтавкиНСП = 0;
		Объект.ЗначениеСтавкиНСПДляОС = 0;
	КонецЕсли;	
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"Товары",
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСП, 0),
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
		КурсНБКР,
		КратностьНБКР,
		СтранаВходитВЕАЭС);
		
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"Услуги",
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСП, 0),
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
		КурсНБКР,
		КратностьНБКР,
		СтранаВходитВЕАЭС);
		
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"ОС",
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСПДляОС, 0), 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
		КурсНБКР,
		КратностьНБКР);
		
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл	 
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтранаВходитВЕАЭС);
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтранаВходитВЕАЭС);	
	КонецЦикла;	
		
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура КурсПриИзменении(Элемент)
	
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
		
		// Расчет суммы
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			?(СтранаВходитВЕАЭС, Истина, Ложь),
			?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
			?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСП, 0),
			?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
			СтрокаТабличнойЧасти.СуммаАкциза,
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
			КурсНБКР,
			КратностьНБКР,
			СтранаВходитВЕАЭС);
		// Расчет налогов	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			?(СтранаВходитВЕАЭС, Истина, Ложь),
			?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
			?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСП, 0), 
			?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
			СтрокаТабличнойЧасти.СуммаАкциза,
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
			СтранаВходитВЕАЭС);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КратностьПриИзменении(Элемент)
	
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
		
		// Расчет суммы
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			?(СтранаВходитВЕАЭС, Истина, Ложь),
			?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
			?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСП, 0),
			?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
			СтрокаТабличнойЧасти.СуммаАкциза,
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
			КурсНБКР,
			КратностьНБКР,
			СтранаВходитВЕАЭС);
		// Расчет налогов	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			?(СтранаВходитВЕАЭС, Истина, Ложь),
			?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
			?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСП, 0), 
			?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
			СтрокаТабличнойЧасти.СуммаАкциза,
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
			СтранаВходитВЕАЭС);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Процедура - обработчик события ПередНачаломДобавления таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Всего") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;	
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда 
		ОбновитьПодвалФормы();
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, "Товары");	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)	
	
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Если СтрокаТабличнойЧасти.Количество = 0 Тогда
			СтрокаТабличнойЧасти.Всего = 0;
			СтрокаТабличнойЧасти.Сумма = 0;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			СтрокаТабличнойЧасти.СуммаНСП = 0;
			СтрокаТабличнойЧасти.СуммаАкциза = 0;
		Иначе
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Количество 
							/ ?(СтрокаТабличнойЧасти.КоличествоПоПоступлению = 0, 1, СтрокаТабличнойЧасти.КоличествоПоПоступлению) 
							* СтрокаТабличнойЧасти.ВсегоПоПоступлению;
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество 
							/ ?(СтрокаТабличнойЧасти.КоличествоПоПоступлению = 0, 1, СтрокаТабличнойЧасти.КоличествоПоПоступлению) 
							* СтрокаТабличнойЧасти.СуммаПоПоступлению;
			СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Количество 
							/ ?(СтрокаТабличнойЧасти.КоличествоПоПоступлению = 0, 1, СтрокаТабличнойЧасти.КоличествоПоПоступлению) 
							* СтрокаТабличнойЧасти.СуммаНДСПоПоступлению;
			СтрокаТабличнойЧасти.СуммаНСП = СтрокаТабличнойЧасти.Количество 
							/ ?(СтрокаТабличнойЧасти.КоличествоПоПоступлению = 0, 1, СтрокаТабличнойЧасти.КоличествоПоПоступлению) 
							* СтрокаТабличнойЧасти.СуммаНСППоПоступлению;
			СтрокаТабличнойЧасти.СуммаАкциза = СтрокаТабличнойЧасти.Количество 
							/ ?(СтрокаТабличнойЧасти.КоличествоПоПоступлению = 0, 1, СтрокаТабличнойЧасти.КоличествоПоПоступлению) 
							* СтрокаТабличнойЧасти.СуммаАкцизаПоПоступлению;
		КонецЕсли;	
		
	Иначе
		СтрокаТабличнойЧасти.Количество = ?(СтрокаТабличнойЧасти.Количество = 0, 1, СтрокаТабличнойЧасти.Количество);
		
		// Расчет суммы
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			?(СтранаВходитВЕАЭС, Истина, Ложь),
			?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
			?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСП, 0),
			?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
			СтрокаТабличнойЧасти.СуммаАкциза,
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
			КурсНБКР,
			КратностьНБКР,
			СтранаВходитВЕАЭС);
		// Расчет налогов	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			?(СтранаВходитВЕАЭС, Истина, Ложь),
			?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
			?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСП, 0), 
			?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
			СтрокаТабличнойЧасти.СуммаАкциза,
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
			СтранаВходитВЕАЭС);
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтранаВходитВЕАЭС);	
			
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда	
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
		КонецЕсли;
	КонецЕсли;
		
	Если Объект.ИспользоватьДопЕдиницы Тогда
		РассчитатьКоличествоДопЕдиницСтроки(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВсегоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСП, 0),
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
		КурсНБКР,
		КратностьНБКР,
		СтранаВходитВЕАЭС);	
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСП, 0), 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
		СтранаВходитВЕАЭС);

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтранаВходитВЕАЭС);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ИмпортОсвобожденныйОтНДС.
//
&НаКлиенте
Процедура ТоварыИмпортОсвобожденныйОтНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИмпортОсвобожденныйОтНДС) Тогда
		СтрокаТабличнойЧасти.СуммаНДС = 0;
		
	ИначеЕсли СтрокаТабличнойЧасти.СуммаНДС = 0 Тогда
		СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
		// Расчет налогов	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			?(СтранаВходитВЕАЭС, Истина, Ложь),
			?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
			?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСП, 0), 
			?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
			СтрокаТабличнойЧасти.СуммаАкциза,
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
			СтранаВходитВЕАЭС);
	КонецЕсли;
		
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода КоэффициентДопЕдиниц.
//
&НаКлиенте
Процедура ТоварыКоэффициентДопЕдиницыПриИзменении(Элемент)
	Если Объект.ИспользоватьДопЕдиницы Тогда
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		РассчитатьКоличествоДопЕдиницСтроки(СтрокаТабличнойЧасти);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

// Процедура - обработчик события ПередНачаломДобавления таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Всего") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;	
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПередНачаломИзменения таблицы Товары.
//
&НаКлиенте
Процедура УслугиПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоСтроки(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда 
		ОбновитьПодвалФормы();
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, "Услуги");	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Если СтрокаТабличнойЧасти.Количество = 0 Тогда
			СтрокаТабличнойЧасти.Всего = 0;
			СтрокаТабличнойЧасти.Сумма = 0;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			СтрокаТабличнойЧасти.СуммаНСП = 0;
			СтрокаТабличнойЧасти.СуммаАкциза = 0;
		Иначе
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Количество 
							/ ?(СтрокаТабличнойЧасти.КоличествоПоПоступлению = 0, 1, СтрокаТабличнойЧасти.КоличествоПоПоступлению) 
							* СтрокаТабличнойЧасти.ВсегоПоПоступлению;
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество 
							/ ?(СтрокаТабличнойЧасти.КоличествоПоПоступлению = 0, 1, СтрокаТабличнойЧасти.КоличествоПоПоступлению) 
							* СтрокаТабличнойЧасти.СуммаПоПоступлению;
			СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Количество 
							/ ?(СтрокаТабличнойЧасти.КоличествоПоПоступлению = 0, 1, СтрокаТабличнойЧасти.КоличествоПоПоступлению) 
							* СтрокаТабличнойЧасти.СуммаНДСПоПоступлению;
			СтрокаТабличнойЧасти.СуммаНСП = СтрокаТабличнойЧасти.Количество 
							/ ?(СтрокаТабличнойЧасти.КоличествоПоПоступлению = 0, 1, СтрокаТабличнойЧасти.КоличествоПоПоступлению) 
							* СтрокаТабличнойЧасти.СуммаНСППоПоступлению;
			СтрокаТабличнойЧасти.СуммаАкциза = СтрокаТабличнойЧасти.Количество 
							/ ?(СтрокаТабличнойЧасти.КоличествоПоПоступлению = 0, 1, СтрокаТабличнойЧасти.КоличествоПоПоступлению) 
							* СтрокаТабличнойЧасти.СуммаАкцизаПоПоступлению;
		КонецЕсли;	
		
	Иначе
		СтрокаТабличнойЧасти.Количество = ?(СтрокаТабличнойЧасти.Количество = 0, 1, СтрокаТабличнойЧасти.Количество);
		
		// Расчет суммы
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			?(СтранаВходитВЕАЭС, Истина, Ложь),
			?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
			?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСП, 0),
			?(СтранаВходитВЕАЭС, Истина, Ложь),
			СтрокаТабличнойЧасти.СуммаАкциза,
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
			КурсНБКР,
			КратностьНБКР,
			СтранаВходитВЕАЭС);
		// Расчет налогов	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			?(СтранаВходитВЕАЭС, Истина, Ложь),
			?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
			?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСП, 0), 
			?(СтранаВходитВЕАЭС, Истина, Ложь),
			СтрокаТабличнойЧасти.СуммаАкциза,
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
			СтранаВходитВЕАЭС);
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтранаВходитВЕАЭС);	
			
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда	
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
		КонецЕсли;
	КонецЕсли;
		
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Всего.
//
&НаКлиенте
Процедура УслугиВсегоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСП, 0),
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
		КурсНБКР,
		КратностьНБКР,
		СтранаВходитВЕАЭС);	
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСП, 0), 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
		СтранаВходитВЕАЭС);

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтранаВходитВЕАЭС);	

	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СчетРасхода.
//
&НаКлиенте
Процедура УслугиСчетРасходаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода УслугиСубконто1.
//
&НаКлиенте
Процедура УслугиСубконто1ПриИзменении(Элемент)
	ПриИзмененииСубконто(1);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода УслугиСубконто1.
//
&НаКлиенте
Процедура УслугиСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода УслугиСубконто2.
//
&НаКлиенте
Процедура УслугиСубконто2ПриИзменении(Элемент)
	ПриИзмененииСубконто(2);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода УслугиСубконто2.
//
&НаКлиенте
Процедура УслугиСубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода УслугиСубконто3.
//
&НаКлиенте
Процедура УслугиСубконто3ПриИзменении(Элемент)
	ПриИзмененииСубконто(3);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода УслугиСубконто3.
//
&НаКлиенте
Процедура УслугиСубконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

// Процедура - обработчик события ПередНачаломДобавления таблицы ОС.
//
&НаКлиенте
Процедура ОСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Всего") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;	
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы ОС.
//
&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда 
		ОбновитьПодвалФормы();
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы ОС.
//
&НаКлиенте
Процедура ОСПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Всего.
//
&НаКлиенте
Процедура ОСВсегоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСПДляОС, 0), 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
		КурсНБКР,
		КратностьНБКР);	
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСПДляОС, 0), 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));

	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСПДляОС, 0), 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаНДС.
//
&НаКлиенте
Процедура ОССуммаНДСПриИзменении(Элемент)
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
		// Расчет суммы
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНСПСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			Истина,
			?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСПДляОС, 0),
			Истина,
			СтрокаТабличнойЧасти.СуммаАкциза,
			Объект.Курс,
			Объект.Кратность);
	КонецЕсли;
	
	ОбновитьПодвалФормы();	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоПоступлению(Команда)
	
	ЗаполнитьТабличныеЧастиПоПоступлению("Заполнить");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПоступления(Команда)

	ЗаполнитьТабличныеЧастиПоПоступлению("Добавить");
	
КонецПроцедуры

// Процедура - обработчик события действия команды Подбор в табличную часть Товары.
// Открывает форму подбора.
//
&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	РаботаСПодборомНоменклатурыКлиент.ОткрытьПодбор(ЭтаФорма, "Товары", "Списание");
КонецПроцедуры

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкодуТовары(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", 
		ЭтотОбъект, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары")), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуУслуги(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", 
		ЭтотОбъект, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Услуги")), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
    
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
        ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1), ДополнительныеПараметры.ИмяТабличнойЧасти);
	КонецЕсли;	

КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	ПодключаемоеОборудованиеБПКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, "Товары");
КонецПроцедуры // ЗагрузитьДанныеИзТСД()
// Конец ПодключаемоеОборудование

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьТовары(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
		Объект.Услуги.Очистить();
		Объект.ОС.Очистить();
		ДополнитьТабличныеЧастиПоПоступлению(ДополнительныеПараметры.СпособЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	ПризнакЗачетаНДСП = ДанныеУчетнойПолитики.УказыватьПризнакЗачетаНДСПриПоступлении;
	
	Если ПризнакСтраны = Перечисления.ПризнакиСтраны.ЕАЭС Тогда
		Элементы.БезналичныйРасчет.Видимость = Ложь;
		// Ставки
		Элементы.ЗначениеСтавкиНДС.Видимость = Истина;
		Элементы.ЗначениеСтавкиНСП.Видимость = Ложь;
		Элементы.ЗначениеСтавкиНСПДляОС.Видимость = Ложь;
		// Счет-фактура
		Элементы.СерияБланкаСФ.Видимость = Ложь;
		Элементы.НомерБланкаСФ.Видимость = Ложь;
		Элементы.ДатаСФ.Видимость = Ложь;
		Элементы.СчетФактураПолученный.Видимость = Ложь;
		// Курс прихода
		Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда 
			Элементы.Курс.Видимость = Ложь;
			Элементы.Кратность.Видимость = Ложь;
		Иначе
			Элементы.Курс.Видимость = Истина;
			Если Объект.Кратность <> 0 ИЛИ Объект.Кратность <> 1 Тогда
				Элементы.Кратность.Видимость = Истина;
			Иначе
				Элементы.Кратность.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		// Товары
		// Сумма НДС и НСП
		Элементы.ТоварыСуммаНДС.Видимость = Истина;
		Элементы.ТоварыСуммаНСП.Видимость = Ложь;
		// Зачет НДС
		Элементы.ТоварыЗачетНДС.Видимость = ПризнакЗачетаНДСП И ДанныеУчетнойПолитики.ПлательщикНДС;
		// Импорт
		Элементы.ТоварыИмпортОсвобожденныйОтНДС.Видимость = Истина;
		// Доп единицы
		Элементы.ТоварыКоличествоДопЕдиницы.Видимость = Объект.ИспользоватьДопЕдиницы;
		Элементы.ТоварыКоэффициентДопЕдиницы.Видимость = Объект.ИспользоватьДопЕдиницы;
		
		// Услуги
		// Сумма НДС и НСП
		Элементы.УслугиСуммаНДС.Видимость = Истина;
		Элементы.УслугиСуммаНСП.Видимость = Ложь;
		// Зачет НДС
		Элементы.УслугиЗачетНДС.Видимость = ПризнакЗачетаНДСП И ДанныеУчетнойПолитики.ПлательщикНДС;
		
		// ОС
		// Сумма НДС и НСП
		Элементы.ОССуммаНДС.Видимость = Истина;
		Элементы.ОССуммаНСП.Видимость = Ложь;
		// Зачет НДС
		Элементы.ОСЗачетНДС.Видимость = ПризнакЗачетаНДСП И ДанныеУчетнойПолитики.ПлательщикНДС;
		
		// База НДС
		Элементы.ТоварыБазаНДС.Видимость = Истина;
		Элементы.УслугиБазаНДС.Видимость = Истина;
		
		// Подвал
		Элементы.ТоварыИтогСуммаНСП.Видимость = Ложь;
		Элементы.ТоварыИтогСуммаНДС.Видимость = Истина;		
		
	ИначеЕсли ПризнакСтраны = Перечисления.ПризнакиСтраны.ИмпортЭкспорт Тогда
		Элементы.БезналичныйРасчет.Видимость = Ложь;
		// Ставки
		Элементы.ЗначениеСтавкиНДС.Видимость = Ложь;
		Элементы.ЗначениеСтавкиНСП.Видимость = Ложь;
		Элементы.ЗначениеСтавкиНСПДляОС.Видимость = Ложь;
		// Счет-фактура
		Элементы.СерияБланкаСФ.Видимость = Ложь;
		Элементы.НомерБланкаСФ.Видимость = Ложь;
		Элементы.ДатаСФ.Видимость = Ложь;
		Элементы.СчетФактураПолученный.Видимость = Ложь;
		// Курс прихода
		Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда 
			Элементы.Курс.Видимость = Ложь;
			Элементы.Кратность.Видимость = Ложь;
		Иначе
			Элементы.Курс.Видимость = Истина;
			Если Объект.Кратность <> 0 ИЛИ Объект.Кратность <> 1 Тогда
				Элементы.Кратность.Видимость = Истина;
			Иначе
				Элементы.Кратность.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		// Товары
		// Акциз
		Элементы.ТоварыВес.Видимость = Ложь;
		Элементы.ТоварыИмпортОсвобожденныйОтНДС.Видимость = Ложь;
		Элементы.ТоварыСуммаАкциза.Видимость = Ложь;
		// Сумма НДС и НСП
		Элементы.ТоварыСуммаНДС.Видимость = Ложь;
		Элементы.ТоварыСуммаНСП.Видимость = Ложь;
		// Зачет НДС
		Элементы.ТоварыЗачетНДС.Видимость = Ложь;
		// Доп единицы
		Элементы.ТоварыКоличествоДопЕдиницы.Видимость = Объект.ИспользоватьДопЕдиницы;
		Элементы.ТоварыКоэффициентДопЕдиницы.Видимость = Объект.ИспользоватьДопЕдиницы;
		
		// Услуги
		// Сумма НДС и НСП
		Элементы.УслугиСуммаНДС.Видимость = Ложь;
		Элементы.УслугиСуммаНСП.Видимость = Ложь;
		// Зачет НДС
		Элементы.УслугиЗачетНДС.Видимость = Ложь;
		
		// ОС
		// Сумма НДС и НСП
		Элементы.ОССуммаНДС.Видимость = Ложь;
		Элементы.ОССуммаНСП.Видимость = Ложь;
		// Зачет НДС
		Элементы.ОСЗачетНДС.Видимость = Ложь;
		
		// База НДС
		Элементы.ТоварыБазаНДС.Видимость = Ложь;
		Элементы.УслугиБазаНДС.Видимость = Ложь;
		
		// Подвал
		Элементы.ТоварыИтогСуммаНСП.Видимость = Ложь;
		Элементы.ТоварыИтогСуммаНДС.Видимость = Ложь;
		
	Иначе // КР или не заполнен Контрагент	
		Элементы.БезналичныйРасчет.Видимость = ДанныеУчетнойПолитики.ПлательщикНСП;
		// Ставки	
		Элементы.ЗначениеСтавкиНДС.Видимость = Истина;
		// Счет-фактура
		Элементы.СерияБланкаСФ.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И НЕ ЗначениеЗаполнено(СчетФактураПолученный);
		Элементы.НомерБланкаСФ.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И НЕ ЗначениеЗаполнено(СчетФактураПолученный);
		Элементы.ДатаСФ.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И НЕ ЗначениеЗаполнено(СчетФактураПолученный);
		Элементы.СчетФактураПолученный.Видимость = ЗначениеЗаполнено(СчетФактураПолученный);
		// Курс прихода
		Элементы.Курс.Видимость = Ложь;
		Элементы.Кратность.Видимость = Ложь;
		// Акциз
		Элементы.ТоварыСуммаАкциза.Видимость = Ложь;
		// Товары
		Элементы.ТоварыКоличествоДопЕдиницы.Видимость = Объект.ИспользоватьДопЕдиницы;
		Элементы.ТоварыКоэффициентДопЕдиницы.Видимость = Объект.ИспользоватьДопЕдиницы;
		Элементы.ТоварыВес.Видимость = Ложь;
		Элементы.ТоварыИмпортОсвобожденныйОтНДС.Видимость = Ложь;
		// Сумма НДС
		Элементы.ТоварыСуммаНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС;
		Элементы.УслугиСуммаНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС;
		// Сумма НСП
		Если Объект.БезналичныйРасчет Тогда
			Элементы.ЗначениеСтавкиНСП.Видимость = Ложь;
			Элементы.ЗначениеСтавкиНСПДляОС.Видимость = Ложь;
			Элементы.ТоварыСуммаНСП.Видимость = Ложь;
			Элементы.УслугиСуммаНСП.Видимость = Ложь;
			Элементы.ОССуммаНСП.Видимость = Ложь;
			Элементы.ТоварыИтогСуммаНСП.Видимость = Ложь;
		Иначе 
			Элементы.ЗначениеСтавкиНСП.Видимость = ДанныеУчетнойПолитики.ПлательщикНСП;
			Элементы.ЗначениеСтавкиНСПДляОС.Видимость = ДанныеУчетнойПолитики.ПлательщикНСП;
			Элементы.ТоварыСуммаНСП.Видимость = ДанныеУчетнойПолитики.ПлательщикНСП;
			Элементы.УслугиСуммаНСП.Видимость = ДанныеУчетнойПолитики.ПлательщикНСП;
			Элементы.ОССуммаНСП.Видимость = ДанныеУчетнойПолитики.ПлательщикНСП;
			Элементы.ТоварыИтогСуммаНСП.Видимость = ДанныеУчетнойПолитики.ПлательщикНСП;
		КонецЕсли;
		// Зачет НДС
		Элементы.ТоварыЗачетНДС.Видимость = ПризнакЗачетаНДСП И ДанныеУчетнойПолитики.ПлательщикНДС;
		Элементы.УслугиЗачетНДС.Видимость = ПризнакЗачетаНДСП И ДанныеУчетнойПолитики.ПлательщикНДС;
		Элементы.ОСЗачетНДС.Видимость = ПризнакЗачетаНДСП И ДанныеУчетнойПолитики.ПлательщикНДС;
		
		// База НДС
		Элементы.ТоварыБазаНДС.Видимость = Ложь;
		Элементы.УслугиБазаНДС.Видимость = Ложь;
		
		Элементы.ТоварыИтогСуммаНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС;
	КонецЕсли;
			
	Если Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ВозвратПоставщику Тогда
		Элементы.Контрагент.Заголовок = "Поставщик";
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		Элементы.Контрагент.Заголовок = "Заказчик";
	КонецЕсли;
		
КонецПроцедуры 

// Процедура устанавливает функциональные опции формы документа.
//
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма, Объект.Организация, ДатаДокумента);
КонецПроцедуры

// Процедура устанавливает текущую страницу при открытии формы.
//
&НаКлиенте
Процедура УстановитьТекущуюСтраницу()	
	Если Объект.Товары.Количество() > 0 Тогда 
		Возврат;
	ИначеЕсли Объект.Услуги.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаУслуги;
	ИначеЕсли Объект.ОС.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаОС;
	КонецЕсли;	
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением, ВалютаДокумента)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	ВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаНовая);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура - Пересчитать курс кратность валюты расчетов
//
// Параметры:
//  СтруктураДанные	- Структура - 
//		* ВалютаКурсКратность - Структура
//			* Курс - Число
//			* Кратность - Число
//
&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		Или Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(Объект.Курс) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(КурсНовый) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'На дату документа у валюты расчетов %1 был задан курс.
									|Установить курс расчетов %2 в соответствии с курсом валюты?'"),
									КурсВалютыСтрокой, КурсНовыйВалютыСтрокой);
		
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПересчитатьКурсКратностьВалютыДокументаЗавершение", ЭтотОбъект, Новый Структура("КратностьНовый, КурсНовый", КратностьНовый, КурсНовый)), ТекстСообщения, Режим, 0);
		Возврат;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КратностьНовый = ДополнительныеПараметры.КратностьНовый;
	КурсНовый = ДополнительныеПараметры.КурсНовый;
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Курс = КурсНовый;
		Объект.Кратность = КратностьНовый;
	КонецЕсли;
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация, Объект.ВидОперации);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию);
		
	СтруктураДанные.Вставить(
		"ПризнакСтраны",
		Контрагент.ПризнакСтраны);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ВидыДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Период, ВалютаДокумента, ДоговорКонтрагента, ВидОперации)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорКонтрагента.ВалютаРасчетов);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаРасчетов, Период));

	СтруктураДанные.Вставить(
		"ТипЦен",
		ДоговорКонтрагента.ТипЦен);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНалоги",
		ДоговорКонтрагента.СуммаВключаетНалоги);
	
	СчетаУчета = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(ДоговорКонтрагента.Организация, ДоговорКонтрагента.Владелец, ДоговорКонтрагента);
	
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ВозвратПоставщику Тогда 
		СчетРасчетов = СчетаУчета.СчетРасчетовПоставщика;		
	Иначе 
		СчетРасчетов = СчетаУчета.СчетРасчетовПокупателя;		
	КонецЕсли;	

	СтруктураДанные.Вставить(
		"СчетРасчетов",
		СчетРасчетов);

	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаСервере
Процедура ЗаполнитьСчетФактураПолученный()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СчетаФактурыПолученные.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.СчетаФактурыПолученные КАК СчетаФактурыПолученные
		|ГДЕ
		|	СчетаФактурыПолученные.Организация = &Организация
		|	И СчетаФактурыПолученные.Документ = &Документ";
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		СчетФактураПолученный = Выборка.Регистратор;
		Если ЗначениеЗаполнено(Объект.СерияБланкаСФ)
			Или ЗначениеЗаполнено(Объект.НомерБланкаСФ) Тогда 
			Объект.СерияБланкаСФ = "";
			Объект.НомерБланкаСФ = "";
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // ЗаполнитьСчетФактураПолученный()

&НаСервере
Процедура ЗаполнитьПоДокументуОснования()

	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьПоПоступлениюТоваровУслуг(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговора()
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(ДатаДокумента, Объект.ВалютаДокумента, Объект.ДоговорКонтрагента, Объект.ВидОперации);

	// Обработка изменения валюты
	СтруктураКурсыПред = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	
	Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
	Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
	Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	
	КурсНБКР      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
	КратностьНБКР = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	
	СтруктураКурсы = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	
	// Обработка изменения налогообложения
	Объект.СуммаВключаетНалоги = СтруктураДанные.СуммаВключаетНалоги;
	
	// Обработка изменения отражения в учете
	Объект.СчетРасчетов = СтруктураДанные.СчетРасчетов;
	
	Если НЕ ДанныеУчетнойПолитики.ПлательщикНДС Тогда
		Объект.ЗначениеСтавкиНДС = 0;		
	КонецЕсли;
	
	// Пересчет табличной части
	// Цена, Сумма
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Товары");
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Услуги");
	// Налоги
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"Товары",
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСП, 0), 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
		КурсНБКР,
		КратностьНБКР,
		СтранаВходитВЕАЭС);
		
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"Услуги",
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСП, 0),
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
		КурсНБКР,
		КратностьНБКР,
		СтранаВходитВЕАЭС);
	
	// Расчет цены.
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтранаВходитВЕАЭС);
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтранаВходитВЕАЭС);
	КонецЦикла;
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

	// Заполнение по данным номенклатуры
	Если ИмяТабличнойЧасти = "Товары" Тогда 
		СтрокаТабличнойЧасти.СчетУчета = СтруктураДанные.СчетУчета;
	ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда 
		СтрокаТабличнойЧасти.СчетРасхода = СтруктураДанные.СчетРасхода;
		
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
			ЭтотОбъект, СтрокаТабличнойЧасти, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда  
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;	
КонецПроцедуры	

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Счета учета
	СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(СтруктураДанные.Организация, СтруктураДанные.Номенклатура);
	СтруктураДанные.Вставить("СчетУчета", СчетаУчетаНоменклатуры.СчетУчета);
	СтруктураДанные.Вставить("СчетРасхода", СчетаУчетаНоменклатуры.СчетРасхода);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Процедура - обработчик подбора товаров.
//
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, СчетУчета", СтрокаЗагрузки.Номенклатура, СтрокаЗагрузки.СчетУчета));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
			СтрокаТабличнойЧасти, 
			ДатаДокумента, 
			Объект.Организация, 
			Объект.СуммаВключаетНалоги,
			?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
			?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСП, 0));
	КонецЦикла;
		
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

&НаКлиенте
Процедура РассчитатьКоличествоДопЕдиницСтроки(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.КоличествоДопЕдиницы = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.КоэффициентДопЕдиницы;	

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеУчетнойПолитики()
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);	
	
	Если НЕ ДанныеУчетнойПолитики.ПлательщикНДС Тогда
		Объект.ЗначениеСтавкиНДС = 0;
		Объект.СерияБланкаСФ = "";
		Объект.НомерБланкаСФ = "";
		Объект.ДатаСФ = Дата(0001,01,01);
		Объект.ЗначениеСтавкиНДС = 0;
	КонецЕсли;
	
	Если НЕ ДанныеУчетнойПолитики.ПлательщикНСП Тогда
		Объект.ЗначениеСтавкиНСП = 0;		
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура рассчитывает итоги для подвала формы.
//
&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Всего");
	ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС");
	ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП");
	
КонецПроцедуры // ОбновитьПодвалФормы()

&НаКлиенте
Процедура УстановитьМаскуНомераБланкаСФ()

	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.КР") Тогда
		Элементы.НомерБланкаСФ.Маска = "@@@@@@";
		
	Иначе	
		Элементы.НомерБланкаСФ.Маска = "9999999999999999";
	КонецЕсли;
		
КонецПроцедуры

#Область РаботаССубконто

&НаСервере
Процедура УстановитьНачальныеСвойстваСубконтоТаблицы()
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоТаблицы(
		Объект.Услуги,
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"УслугиСубконто", "Субконто", "СчетРасхода");
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	Результат.СкрыватьСубконто = Ложь;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСубконто(
		ЭтотОбъект, 
		СтрокаТаблицы,
		НомерСубконто, 
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Элементы.Услуги.ТекущиеДанные, 
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

// ПодключаемоеОборудование

// Процедура - Получены штрихкоды
//
// Параметры:
//  ДанныеШтрихкодов	 - Структура/Массив - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов, ИмяТабличнойЧасти) Экспорт
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов, ИмяТабличнойЧасти);
	
	// Неизвестные штрихкоды.
	Если НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды.Количество() > 0 Тогда
		Для Каждого СтруктураДанные Из НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Данные по штрихкоду не найдены: %1'"), СтруктураДанные.Штрихкод);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	// Штрихкоды некорректного типа.
	ИначеЕсли НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа.Количество() > 0 Тогда 
		Для Каждого СтруктураДанные Из НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Найденная по штрихкоду %1 номенклатура: ""%2"", не подходит для этой табличной части'"),
				СтруктураДанные.ТекШтрихкод, СтруктураДанные.Номенклатура);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоШтрихкоду(ТекШтрихкод)
	
	Номенклатура = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьНоменклатуруПоШтрихкоду(ТекШтрихкод);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", Номенклатура);
	СтруктураДанные.Вставить("ТипНоменклатурыУслуга", ?(ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура"), Номенклатура.Услуга, Ложь));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПоШтрихкоду()

// Функция - Заполнить по данным штрихкодов
//
// Параметры:
//  ДанныеШтрихкодов		 - 	 - Структура/Массив	 - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
// 
// Возвращаемое значение:
//  Структура - Массивы неизвестных штрих кодов
//
&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов, ИмяТабличнойЧасти) 
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	Для каждого ТекШтрихкод Из МассивШтрихкодов Цикл
		СтруктураДанные = ПолучитьДанныеПоШтрихкоду(ТекШтрихкод);
		
		Если НЕ ЗначениеЗаполнено(СтруктураДанные.Номенклатура) Тогда 
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ТипНоменклатурыУслуга Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("ТекШтрихкод, Номенклатура", ТекШтрихкод, СтруктураДанные.Номенклатура));
		Иначе 
			СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
			СтрокаТабличнойЧасти.Номенклатура = СтруктураДанные.Номенклатура;
			СтрокаТабличнойЧасти.Количество = ТекШтрихкод.Количество;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",
		НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);

КонецФункции // ЗаполнитьПоДаннымШтрихкодов()
// Конец ПодключаемоеОборудование

#КонецОбласти

#Область ОбработчикиЗаполнения

&НаКлиенте
Процедура ЗаполнитьТабличныеЧастиПоПоступлению(СпособЗаполнения)
	Отказ = Ложь;

	// Перед заполнением договор должен быть выбран.
	Если Не ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран договор контрагента.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ДоговорКонтрагента",, Отказ);
	КонецЕсли;

	Если Отказ Тогда 
		Возврат
	КонецЕсли;	
	
	// Если заполняем, то почистим ТЧ
	Если СпособЗаполнения = "Заполнить"
		И (Объект.Товары.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0) Тогда 
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СпособЗаполнения", СпособЗаполнения);

		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьТовары", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличные части будут очищены. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		ДополнитьТабличныеЧастиПоПоступлению(СпособЗаполнения);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьТабличныеЧастиПоПоступлению(СпособЗаполнения)
		
	ПараметрыФормы = Новый Структура;

	Отбор = Новый Структура();
	
	Если СпособЗаполнения = "Заполнить" Тогда
		Отбор.Вставить("Организация", 			Объект.Организация);
		Отбор.Вставить("Контрагент", 			Объект.Контрагент);
		Отбор.Вставить("ДоговорКонтрагента", 	Объект.ДоговорКонтрагента);
		Отбор.Вставить("Проведен", 				Истина);			
	Иначе 
		Отбор.Вставить("Организация", 			Объект.Организация);
		Отбор.Вставить("Контрагент", 			Объект.Контрагент);
		Отбор.Вставить("ДоговорКонтрагента", 	Объект.ДоговорКонтрагента);
		Отбор.Вставить("Проведен", 				Истина);
		Отбор.Вставить("ЗначениеСтавкиНДС", 	Объект.ЗначениеСтавкиНДС);
		Отбор.Вставить("ЗначениеСтавкиНСП", 	Объект.ЗначениеСтавкиНСП);		
	КонецЕсли;

	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("ДокументВозвратаТоваров", Истина);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СпособЗаполнения", СпособЗаполнения);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьТабличныеЧастиПоПоступлениюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", ПараметрыФормы,ЭтаФорма,,,,ОповещениеОЗакрытии);	

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеЧастиПоПоступлениюЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ДокументПоступления = РезультатЗакрытия;
	
	Если Не ЗначениеЗаполнено(ДокументПоступления) Тогда
		Возврат; // ничего не выбрали.
	КонецЕсли;

	СпособЗаполнения = ДополнительныеПараметры.СпособЗаполнения;
	
	Если СпособЗаполнения = "Заполнить" Тогда
		Объект.ДокументОснование = ДокументПоступления;
	Иначе
		Объект.ДокументОснование = Неопределено;
	КонецЕсли;
	
	ЗаполнитьТабличныеЧастиПоПоступлениюПослеПолученияДокумента(ДокументПоступления, СпособЗаполнения);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеЧастиПоПоступлениюПослеПолученияДокумента(ДокументПоступления, СпособЗаполнения)
	
	// Вызываем процедуру заполнения.
	Если СпособЗаполнения = "Заполнить" Тогда
		
		ЗаполнитьТоварыПоОснованию(ДокументПоступления);
		УстановитьВидимостьДоступностьЭлементов();
		
	Иначе // При добавлении надо сворачивать дубли строк, аналогично подбору

		ДобавитьСтрокиТабличныхЧастейИзДокументаПоступления(ДокументПоступления);

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование)

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	МассивТаблиц = ДокументОбъект.ПолучитьДанныеПоПоступлению(Истина);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Если МассивТаблиц.Количество() <> 0 Тогда 
		Для Каждого СтрокаТаблицы Из МассивТаблиц[0] Цикл
			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы);
			СтрокаТабличнойЧасти.КоличествоПоПоступлению 	= СтрокаТаблицы.Количество;
			СтрокаТабличнойЧасти.СуммаПоПоступлению 		= СтрокаТаблицы.Сумма;
			СтрокаТабличнойЧасти.СуммаНДСПоПоступлению 		= СтрокаТаблицы.СуммаНДС;
			СтрокаТабличнойЧасти.СуммаНСППоПоступлению 		= СтрокаТаблицы.СуммаНСП;
			СтрокаТабличнойЧасти.ВсегоПоПоступлению 		= СтрокаТаблицы.Всего;
			СтрокаТабличнойЧасти.СуммаАкцизаПоПоступлению 	= СтрокаТаблицы.СуммаАкциза;
		КонецЦикла;	
		
		Для Каждого СтрокаТаблицы Из МассивТаблиц[1] Цикл		
			СтрокаТабличнойЧасти = Объект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы);
			СтрокаТабличнойЧасти.КоличествоПоПоступлению 	= СтрокаТаблицы.Количество;
			СтрокаТабличнойЧасти.СуммаПоПоступлению 		= СтрокаТаблицы.Сумма;
			СтрокаТабличнойЧасти.СуммаНДСПоПоступлению 		= СтрокаТаблицы.СуммаНДС;
			СтрокаТабличнойЧасти.СуммаНСППоПоступлению 		= СтрокаТаблицы.СуммаНСП;
			СтрокаТабличнойЧасти.ВсегоПоПоступлению 		= СтрокаТаблицы.Всего;
			СтрокаТабличнойЧасти.СуммаАкцизаПоПоступлению 	= СтрокаТаблицы.СуммаАкциза;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из МассивТаблиц[2] Цикл		
			СтрокаТабличнойЧасти = Объект.ОС.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы);
			СтрокаТабличнойЧасти.СуммаПоПоступлению 	= СтрокаТаблицы.Сумма;
			СтрокаТабличнойЧасти.СуммаНДСПоПоступлению 	= СтрокаТаблицы.СуммаНДС;
			СтрокаТабличнойЧасти.СуммаНСППоПоступлению 	= СтрокаТаблицы.СуммаНСП;
			СтрокаТабличнойЧасти.ВсегоПоПоступлению 	= СтрокаТаблицы.Всего;
			СтрокаТабличнойЧасти.СуммаАкциза 			= 0;
		КонецЦикла;
	КонецЕсли;
	
	Объект.ЗначениеСтавкиНДС = ДокументОснование.ЗначениеСтавкиНДС;
	Объект.ЗначениеСтавкиНСП = ДокументОснование.ЗначениеСтавкиНСП;
	Объект.СчетРасчетов 	 = ДокументОснование.СчетРасчетов;
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиТабличныхЧастейИзДокументаПоступления(ДокументПоступления)

	МассивРезультатовЗапроса = ПолучитьДанныеДляКопирования(ДокументПоступления);
		
	ДобавитьСтрокиТабличнойЧасти("Товары", ДокументПоступления, МассивРезультатовЗапроса[0].Выбрать());
	ДобавитьСтрокиТабличнойЧасти("Услуги", ДокументПоступления, МассивРезультатовЗапроса[1].Выбрать());
	ДобавитьСтрокиТабличнойЧасти("ОС", ДокументПоступления, МассивРезультатовЗапроса[2].Выбрать());
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиТабличнойЧасти(ИмяТабличнойЧасти, ДокументПоступления, Выборка)
	ВалютаДокументаПоступления = ДокументПоступления.ВалютаДокумента;
	КурсДокументаПоступления = ДокументПоступления.Курс;
	КратностьДокументаПоступления = ДокументПоступления.Кратность;
	СуммаВключаетНалогиДокументаПоступления = ДокументПоступления.СуммаВключаетНалоги;
	
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Обход строк Поступления
	СтруктураОтбора = Новый Структура();
	Пока Выборка.Следующий() Цикл

		Если ИмяТабличнойЧасти = "ОС" Тогда
			СтрокаТабличнойЧасти = Объект.ОС.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
			
		Иначе	
			// Поиск текущей позиции основания в табличной части документа возврата.
			// Если найден - увеличение количества; не найден - добавление новой строки.
			СтруктураОтбора.Вставить("Номенклатура", Выборка.Номенклатура);

			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабличнойЧасти(Объект, ИмяТабличнойЧасти, СтруктураОтбора);
			Если СтрокаТабличнойЧасти <> неопределено Тогда			
				// Найдена, увеличение количества в первой найденной строке.
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Выборка.Количество;
				
				// Пересчет цены в валюту документа.
				Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(Выборка.Цена, 
					Новый Структура("Валюта, Курс, Кратность", ВалютаДокументаПоступления, КурсДокументаПоступления, КратностьДокументаПоступления),
					Новый Структура("Валюта, Курс, Кратность", 
						Объект.ВалютаДокумента, 
						ЗаполнениеОбъектовБП.Курс(Объект, ВалютаРегламентированногоУчета),  
						ЗаполнениеОбъектовБП.Кратность(Объект, ВалютаРегламентированногоУчета)));

				СтрокаТабличнойЧасти.Цена = (СтрокаТабличнойЧасти.Цена + Цена) / 2;
				СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Всего + Выборка.Всего;
				
			Иначе
				// Не Найдена - добавление новой строки.
				СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка,, "Цена, Сумма, СуммаНДС, СуммаНСП");			

				СтрокаТабличнойЧасти.Номенклатура = Выборка.Номенклатура;
				СтрокаТабличнойЧасти.Количество = Выборка.Количество;									

				// Пересчет цены в валюту документа.
				Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(Выборка.Цена, 
					Новый Структура("Валюта, Курс, Кратность", ВалютаДокументаПоступления, КурсДокументаПоступления, КратностьДокументаПоступления),
					Новый Структура("Валюта, Курс, Кратность", 
						Объект.ВалютаДокумента, 
						ЗаполнениеОбъектовБП.Курс(Объект, ВалютаРегламентированногоУчета),  
						ЗаполнениеОбъектовБП.Кратность(Объект, ВалютаРегламентированногоУчета)));

				СтрокаТабличнойЧасти.Цена = Цена;	
			КонецЕсли;
		КонецЕсли;

		// Расчет суммы
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			?(СтранаВходитВЕАЭС, Истина, Ложь),
			?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
			?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСП, 0),
			?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
			СтрокаТабличнойЧасти.СуммаАкциза,
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
			КурсНБКР,
			КратностьНБКР,
			?(ИмяТабличнойЧасти = "ОС", Ложь, СтранаВходитВЕАЭС));	
		// Расчет налогов	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			?(СтранаВходитВЕАЭС, Истина, Ложь),
			?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.ЗначениеСтавкиНДС, 0), 
			?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.ЗначениеСтавкиНСП, 0), 
			?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
			СтрокаТабличнойЧасти.СуммаАкциза,
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1),
			?(ИмяТабличнойЧасти = "ОС", Ложь, СтранаВходитВЕАЭС));
	КонецЦикла;
	
КонецПроцедуры // ДобавитьСтрокиТабличнойЧасти()

&НаСервере
Функция ПолучитьДанныеДляКопирования(ДокументСсылка)

	// Получение нужной информаций по документу Поступления
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Количество КАК Количество,
		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
		|	ТаблицаДокумента.Цена КАК Цена,
		|	ТаблицаДокумента.Сумма КАК Сумма,
		|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
		|	ТаблицаДокумента.СуммаНСП КАК СуммаНСП,
		|	ТаблицаДокумента.Всего КАК Всего,
		|	ТаблицаДокумента.СуммаАкциза КАК СуммаАкциза,
		|	ТаблицаДокумента.ЗачетНДС КАК ЗачетНДС,
		|	ТаблицаДокумента.ИмпортОсвобожденныйОтНДС КАК ИмпортОсвобожденныйОтНДС
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаДокумента.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугУслуги.НомерСтроки КАК НомерСтроки,
		|	ПоступлениеТоваровУслугУслуги.Номенклатура КАК Номенклатура,
		|	ПоступлениеТоваровУслугУслуги.Количество КАК Количество,
		|	ПоступлениеТоваровУслугУслуги.Цена КАК Цена,
		|	ПоступлениеТоваровУслугУслуги.Сумма КАК Сумма,
		|	ПоступлениеТоваровУслугУслуги.СуммаНДС КАК СуммаНДС,
		|	ПоступлениеТоваровУслугУслуги.СуммаНСП КАК СуммаНСП,
		|	ПоступлениеТоваровУслугУслуги.Всего КАК Всего,
		|	ПоступлениеТоваровУслугУслуги.СуммаАкциза КАК СуммаАкциза,
		|	ПоступлениеТоваровУслугУслуги.СчетРасхода КАК СчетРасхода,
		|	ПоступлениеТоваровУслугУслуги.Субконто1 КАК Субконто1,
		|	ПоступлениеТоваровУслугУслуги.Субконто2 КАК Субконто2,
		|	ПоступлениеТоваровУслугУслуги.Субконто3 КАК Субконто3,
		|	ПоступлениеТоваровУслугУслуги.ЗачетНДС КАК ЗачетНДС
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		|ГДЕ
		|	ПоступлениеТоваровУслугУслуги.Ссылка = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПоступлениеТоваровУслугУслуги.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугОС.НомерСтроки КАК НомерСтроки,
		|	ПоступлениеТоваровУслугОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ПоступлениеТоваровУслугОС.Сумма КАК Сумма,
		|	ПоступлениеТоваровУслугОС.СуммаНДС КАК СуммаНДС,
		|	ПоступлениеТоваровУслугОС.СуммаНСП КАК СуммаНСП,
		|	ПоступлениеТоваровУслугОС.Всего КАК Всего,
		|	ПоступлениеТоваровУслугОС.СуммаАкциза КАК СуммаАкциза,
		|	ПоступлениеТоваровУслугОС.СчетУчета КАК СчетУчета,
		|	ПоступлениеТоваровУслугОС.ЗачетНДС КАК ЗачетНДС
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.ОС КАК ПоступлениеТоваровУслугОС
		|ГДЕ
		|	ПоступлениеТоваровУслугОС.Ссылка = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПоступлениеТоваровУслугОС.НомерСтроки";
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылка);	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();

	Возврат МассивРезультатовЗапроса;

КонецФункции

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура ТоварыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВставитьСтроки(Команда)
	
	ВставитьСтроки("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКопироватьСтроки(Команда)
	
	КопироватьСтроки("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиВставитьСтроки(Команда)
	
	ВставитьСтроки("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

