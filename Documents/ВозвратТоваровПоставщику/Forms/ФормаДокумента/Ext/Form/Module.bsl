
#Область ОбработчикиСлужебные

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

#КонецОбласти

#Область УправлениеВнешнимВидом
&НаКлиенте
// Процедура устанавливает видимость и доступность элементов.
//
Процедура УстановитьВидимостьДоступностьЭлементов()
	ОперацияПокупка 		= ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ВозвратПоставщику");
	ОперацияИзПереработки 	= ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки");
	
	Элементы.ТоварыКоличествоМест.Видимость = Объект.ИспользоватьДополнительныеЕдиницыИзмерения;
	Элементы.ТоварыЕмкость.Видимость 		= Объект.ИспользоватьДополнительныеЕдиницыИзмерения;
		
	Элементы.СчетУчетаРасчетовПоВозвратам.Видимость 		= Ложь;
	Элементы.СчетУчетаРасчетовСКонтрагентом.Видимость 		= Ложь;
	Если ОперацияПокупка Тогда
		Элементы.Контрагент.Заголовок = "Поставщик";
		Элементы.СчетУчетаРасчетовПоВозвратам.Видимость 	= Истина;	
	ИначеЕсли ОперацияИзПереработки Тогда
		Элементы.Контрагент.Заголовок = "Заказчик";
		Элементы.СчетУчетаРасчетовСКонтрагентом.Видимость 	= Истина;
	КонецЕсли;
	
	Элементы.Курс.Видимость = НЕ Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()    

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте
Процедура УстановитьСчетаРасчетовСКонтрагентами()
	
	СчетаУчета = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	Объект.СчетУчетаРасчетовПоВозвратам		= СчетаУчета.СчетРасчетовПоставщика;		
	Объект.СчетУчетаРасчетовСКонтрагентом	= СчетаУчета.СчетРасчетовПокупателя;

КонецПроцедуры // УстановитьСчетаРасчетовСКонтрагентами()

&НаКлиенте
Процедура ПересчетТабличнойЧасти()

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары", СтрокаТабличнойЧасти);
		ПересчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "КоличествоПриИзвестнойЦене");
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСТЧ);		
	КонецЦикла;			

КонецПроцедуры // ПересчетТабличнойЧасти()

&НаСервере
Процедура ЗаполнитьПоДокументуПоступления(ДокументПоступления)
	Объект.ДокументОснование 	= ДокументПоступления;
	Объект.ДоговорКонтрагента 	= ДокументПоступления.ДоговорКонтрагента;
	Объект.Склад 				= ДокументПоступления.Склад;
	Объект.Курс 				= ДокументПоступления.Курс;
	Объект.ВалютаДокумента 		= ДокументПоступления.ВалютаДокумента;	
	Объект.ИспользоватьДополнительныеЕдиницыИзмерения 	= ДокументПоступления.ИспользоватьДополнительныеЕдиницыИзмерения;
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ЗначСтавкаНДС 	= БухгалтерскийУчетСервер.ПолучитьСтавкуНДСПоДоговору(ДатаДокумента, Объект.ДоговорКонтрагента);
	КонецЕсли;
	ТаблицаЗначений = РеквизитФормыВЗначение("ТаблицаЗапасы");
	ЗаполнитьТаблицуЗапасы(ТаблицаЗначений, ДатаДокумента, Объект.Организация, ДокументПоступления, Объект.Склад);
	ЗначениеВРеквизитФормы(ТаблицаЗначений, "ТаблицаЗапасы"); 
	Объект.Товары.Загрузить(ТаблицаЗначений);
	
КонецПроцедуры // ЗаполнитьТоварыУслуги(МассивСсылок)

&НаСервереБезКонтекста
Процедура ЗаполнитьТаблицуЗапасы(ТаблицаЗапасы, ДатаДокумента, Организация, ДокументПоступления, Склад)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗапасыОстатки.СчетУчета,
		|	ЗапасыОстатки.Номенклатура,
		|	ЗапасыОстатки.КоличествоОстаток КАК Количество,
		|	ЗапасыОстатки.Склад,
		|	ЗапасыОстатки.Партия,
		|	ПоступлениеТоваровУслугТовары.Цена
		|ИЗ
		|	РегистрНакопления.Запасы.Остатки(
		|			&Дата,
		|			Организация = &Организация
		|				И Партия = &Партия
		|				И Склад = &Склад) КАК ЗапасыОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|		ПО ЗапасыОстатки.Номенклатура = ПоступлениеТоваровУслугТовары.Номенклатура
		|			И ЗапасыОстатки.СчетУчета = ПоступлениеТоваровУслугТовары.СчетУчета
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка = &Партия";
	
	Запрос.УстановитьПараметр("Дата", ДатаДокумента);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Партия", ДокументПоступления);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	ТаблицаЗапасы = Запрос.Выполнить().Выгрузить();

КонецПроцедуры // ЗаполнитьТаблицуЗапасы(ТаблицаЗапасы, ДатаДокумента, Организация, ДокументПоступления, Склад)

&НаКлиенте
Процедура КонтрольОстаткаВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыОтбора.Вставить("Цена", 			СтрокаТабличнойЧасти.Цена);
	МассивСтрок = ТаблицаЗапасы.НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрок.Количество() > 0 И СтрокаТабличнойЧасти.Количество > МассивСтрок[0].Количество Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Остаток по указанной номенклатуры на текущем складе составляет %1 ед.'"), МассивСтрок[0].Количество);
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.Товары[" + (СтрокаТабличнойЧасти.НомерСтроки -1) + "].Количество",
			Истина);
		СтрокаТабличнойЧасти.Количество = МассивСтрок[0].Количество; 	
	КонецЕсли;	

КонецПроцедуры // КонтрольОстаткаВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти)

&НаКлиенте
Процедура ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, ИмяТЧ, СТЧ = Неопределено)
	
	ЗаполнитьЗначенияСвойств(ДанныеСТЧ, ?(СТЧ = Неопределено, Элементы[ИмяТЧ].ТекущиеДанные, СТЧ));
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	СтруктураСчетовУчета 	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, ДанныеСТЧ.Номенклатура);
	ДанныеСТЧ.СтавкаНСП		= СтруктураСчетовУчета.СтавкаНСП;
	ДанныеСТЧ.ЗначСтавкаНСП = БухгалтерскийУчетСервер.ПолучитьСтавкуНСП(ДатаДокумента, СтавкаНДСИзДоговора(ДатаДокумента, Объект.ДоговорКонтрагента), ДанныеСТЧ.СтавкаНСП);	
	ДанныеСТЧ.ЗначСтавкаНДС = БухгалтерскийУчетСервер.ПолучитьСтавкуНДС(ДатаДокумента, СтавкаНДСИзДоговора(ДатаДокумента, Объект.ДоговорКонтрагента));
	
	ПараметрыОбъекта.ПлательщикНДС = УПП.ПлательщикНДС;
	ПараметрыОбъекта.ПлательщикНСП = УПП.ПлательщикНСП;	
	ПараметрыОбъекта.НДСНеПодтвержден = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении()
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если Объект.ИспользоватьДополнительныеЕдиницыИзмерения 
			И ЗначениеЗаполнено(СтрокаТабличнойЧасти.КоличествоМест) 
			И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Емкость) Тогда
		
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоМест * СтрокаТабличнойЧасти.Емкость;		
	КонецЕсли;
	
	КонтрольОстаткаВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	// Подготовка и заполнение структуры колонок ТЧ
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары", СтрокаТабличнойЧасти);

	ПересчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "КоличествоМестПриИзвестнойЦене");
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеСТЧ);
	
КонецПроцедуры // КоличествоМестЕмкостьПриИзменении()

&НаСервереБезКонтекста
Процедура ПересчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, Изменение);
	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, Изменение);	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаВводаСФ()

	Если Объект.СФВыписанаКонтрагентом Тогда
		Элементы.СерияБланкаСФ.РежимВыбораИзСписка = Ложь;	
		ТипПоля = "Строка";
		Элементы.СерияБланкаСФ.ОграничениеТипа = Новый ОписаниеТипов(ТипПоля); 
		Элементы.СерияБланкаСФ.ОграничениеТипа.ПривестиЗначение("");		
		Элементы.СерияБланкаСФ.СписокВыбора.Очистить();
	Иначе
		Элементы.СерияБланкаСФ.РежимВыбораИзСписка = Истина;
		ТипПоля = "Строка";
		Элементы.СерияБланкаСФ.ОграничениеТипа = Новый ОписаниеТипов(ТипПоля); 
		Элементы.СерияБланкаСФ.ОграничениеТипа.ПривестиЗначение(ТипПоля);		
		Если Элементы.СерияБланкаСФ.СписокВыбора.Количество() = 0 Тогда
			Элементы.СерияБланкаСФ.СписокВыбора.ЗагрузитьЗначения(БухгалтерскийУчетСервер.СформироватьСписокСерийСФ(Объект.Организация,Объект.Дата));
		КонецЕсли;				
	КонецЕсли;
	Элементы.СерияБланкаСФ.ВыбиратьТип = Ложь;
	УстановитьВидимостьДоступностьЭлементов();

КонецПроцедуры // ()

&НаСервереБезКонтекста
Функция СтавкаНДСИзДоговора(Дата, Договор)
	Возврат Договор.СтавкаНДС;
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьКонтрагентаИзДокументаОснования(ДокументОснование)
	Возврат ДокументОснование.Контрагент;
КонецФункции 

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Установка реквизитов формы.	
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	ВидОперации = Объект.ВидОперации;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ЗначСтавкаНДС 	= БухгалтерскийУчетСервер.ПолучитьСтавкуНДСПоДоговору(ДатаДокумента, Объект.ДоговорКонтрагента);
	КонецЕсли;	
	УПП 				= БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	ПараметрыОбъекта 	= Новый Структура("Организация, 
											|Дата, 
											|Ссылка, 
											|ВалютаДокумента, 
											|КурсВзаиморасчетов, 
											|Склад, 
											|ВидОперации, 
											|ДоговорКонтрагента, 
											|ПлательщикНДС,
											|ПлательщикНСП,
											|НДСНеПодтвержден");
											
	ДанныеСТЧ 			= Новый Структура("Номенклатура, 
											|ОсновноеСредство, 
											|Количество, 
											|КоличествоМест, 
											|Емкость, 
											|Цена, 
											|Сумма,
											|СтавкаНДС,
											|СтавкаНСП,
											|ЗначСтавкаНДС,
											|ЗначСтавкаНСП,											
											|СуммаНДС, 
											|СуммаНСП, 
											|СуммаСФ, 
											|Всего, 
											|СчетУчета, 
											|ЕдиницаИзмерения");	
												
	Если ЗначениеЗаполнено(Объект.СерияБланкаСФ) И НЕ Объект.СФВыписанаКонтрагентом Тогда
		Элементы.НомерБланкаСФ.СписокВыбора.ЗагрузитьЗначения(БухгалтерскийУчетСервер.СформироватьСписокНомеровБланковСФ(Объект.Организация, Объект.СерияБланкаСФ, Объект.Дата));	
	КонецЕсли;
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

	// СтандартныеПодсисте.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаВажныеКоманды);
	// Конец СтандартныеПодсистемы.Печать
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановкаВводаСФ();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПодборДокументовПоступления" И ТипЗнч(Параметр) = ТИП("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьТабличнуюЧасть", ЭтотОбъект,Параметр);
		ТекстВопроса = НСтр("ru = 'Табличная часть будет очищена и заполнена новыми данными! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);		
	КонецЕсли;
	УстановитьВидимостьДоступностьЭлементов();

КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьТабличнуюЧасть(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументуПоступления(ДополнительныеПараметры);
		УстановитьСчетаРасчетовСКонтрагентами();
		ПересчетТабличнойЧасти();
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетСервер.ПроверитьСуществованиеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДополнительныеЕИПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если ВидОперации <> Объект.ВидОперации Тогда
		ВидОперации = Объект.ВидОперации;
	КонецЕсли;
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Контрагент", 	Объект.Контрагент);
	ПараметрыОтбора.Вставить("ДатаОтбора", 	ДатаДокумента);
	ОткрытьФорму("Документ.ВозвратТоваровПоставщику.Форма.ФормаПодбораДокументовПоступления", ПараметрыОтбора, ЭтаФорма)

КонецПроцедуры

&НаКлиенте
Процедура СерияБланкаСФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.ЗагрузитьЗначения(БухгалтерскийУчетСервер.СформироватьСписокСерийСФ(Объект.Организация, Объект.Дата));
	
КонецПроцедуры

&НаКлиенте
Процедура СФВыписанаКонтрагентомПриИзменении(Элемент)
	УстановкаВводаСФ();	
КонецПроцедуры

&НаКлиенте
Процедура СерияБланкаСФПриИзменении(Элемент)
	Если НЕ Объект.СФВыписанаКонтрагентом Тогда
		Элементы.НомерБланкаСФ.СписокВыбора.Очистить();
		Элементы.НомерБланкаСФ.СписокВыбора.ЗагрузитьЗначения(БухгалтерскийУчетСервер.СформироватьСписокНомеровБланковСФ(Объект.Организация, Объект.СерияБланкаСФ, Объект.Дата));
		Если Элементы.НомерБланкаСФ.СписокВыбора.Количество() = 0 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Для пользователя %1 и серии %2 нет доступных номеров бланков счет-фактур'"), Объект.Автор, Объект.СерияБланкаСФ);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
				Объект.Ссылка,   
				ТекстСообщения,
				,
				,
				"Объект.НомерБланкаСФ",
				Истина);
			КонецЕсли;	
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	Если Объект.Контрагент <> ПолучитьКонтрагентаИзДокументаОснования(Объект.ДокументОснование) Тогда
		Объект.ДокументОснование = ПредопределенноеЗначение("Документ.ПоступлениеТоваровУслуг.ПустаяСсылка");	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТабличныхЧастей

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)	
	КоличествоПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоМестПриИзменении(Элемент)
	КоличествоПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕмкостьПриИзменении(Элемент)
	КоличествоПриИзменении();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ЗаполнитьПоПоступлениюНаСервере()

  	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ЗаполнитьПоПоступлениюТоваровУслуг(Объект.ДокументОснование);
	ЗначениеВДанныеФормы(ДокОбъект,Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлению(Команда)
	
	ЗаполнитьПоПоступлениюНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИзПоступленияОповещение(Значение,Параметры)
	
	Если Не Значение = Неопределено Тогда 
		Для Каждого СтПоступления ИЗ Значение.Товары Цикл 
			
			СТЧ = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СТЧ,СтПоступления);		
			
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПоступления(Команда)

	Перем ВыбЗнач;	
	Массив = Новый Массив;
	Массив.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	
	Оповещение =
	Новый ОписаниеОповещения("ДобавитьИзПоступленияОповещение", ЭтотОбъект, Параметры);
	
	ПоказатьВводЗначения(Оповещение,ВыбЗнач, "Введите значение", ОписаниеТипов)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти
