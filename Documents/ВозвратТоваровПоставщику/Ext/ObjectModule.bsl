#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоПоступлениюТоваровУслуг(ДанныеЗаполнения) Экспорт
	
	ДокументОснование 	= ДанныеЗаполнения;	
	Организация			= ДанныеЗаполнения.Организация;
	Склад				= ДанныеЗаполнения.Склад;
	// Сведения о контрагенте
	Контрагент 			= ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента 	= ДанныеЗаполнения.ДоговорКонтрагента;
	СчетРасчетов 		= ДанныеЗаполнения.СчетРасчетов;
	// Валюта
	ВалютаДокумента 	= ДанныеЗаполнения.ВалютаДокумента;			
	Курс 				= ДанныеЗаполнения.Курс;			
	Кратность 			= ДанныеЗаполнения.Кратность;
	// Налоги
	ЗначениеСтавкиНДС	= ДанныеЗаполнения.ЗначениеСтавкиНДС;
	ЗначениеСтавкиНСП	= ДанныеЗаполнения.ЗначениеСтавкиНСП;
	СуммаВключаетНалоги = ДанныеЗаполнения.СуммаВключаетНалоги;
	
	БезналичныйРасчет	= ДанныеЗаполнения.БезналичныйРасчет;
	
	// Флаги
	ИспользоватьДопЕдиницы = ДанныеЗаполнения.ИспользоватьДопЕдиницы;
	
	МассивТаблиц = ПолучитьДанныеПоПоступлению(Ложь);
	
	Если МассивТаблиц.Количество() <> 0 Тогда 
		Для Каждого СтрокаТаблицы Из МассивТаблиц[0] Цикл
			СтрокаТабличнойЧасти = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы);
			СтрокаТабличнойЧасти.КоличествоПоПоступлению 	= СтрокаТаблицы.Количество;
			СтрокаТабличнойЧасти.СуммаПоПоступлению 		= СтрокаТаблицы.Сумма;
			СтрокаТабличнойЧасти.СуммаНДСПоПоступлению 		= СтрокаТаблицы.СуммаНДС;
			СтрокаТабличнойЧасти.СуммаНСППоПоступлению 		= СтрокаТаблицы.СуммаНСП;
			СтрокаТабличнойЧасти.ВсегоПоПоступлению 		= СтрокаТаблицы.Всего;
			СтрокаТабличнойЧасти.СуммаАкцизаПоПоступлению 	= СтрокаТаблицы.СуммаАкциза;
		КонецЦикла;	
		
		Для Каждого СтрокаТаблицы Из МассивТаблиц[1] Цикл		
			СтрокаТабличнойЧасти = Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы);
			СтрокаТабличнойЧасти.КоличествоПоПоступлению 	= СтрокаТаблицы.Количество;
			СтрокаТабличнойЧасти.СуммаПоПоступлению 		= СтрокаТаблицы.Сумма;
			СтрокаТабличнойЧасти.СуммаНДСПоПоступлению 		= СтрокаТаблицы.СуммаНДС;
			СтрокаТабличнойЧасти.СуммаНСППоПоступлению 		= СтрокаТаблицы.СуммаНСП;
			СтрокаТабличнойЧасти.ВсегоПоПоступлению 		= СтрокаТаблицы.Всего;
			СтрокаТабличнойЧасти.СуммаАкцизаПоПоступлению 	= СтрокаТаблицы.СуммаАкциза;
		КонецЦикла;
	КонецЕсли;
	
	СуммаДокумента = Товары.Итог("Всего") + Услуги.Итог("Всего");
КонецПроцедуры

#КонецОбласти
	
#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ПоступлениеТоваровУслуг")] = "ЗаполнитьПоПоступлениюТоваровУслуг";
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	// Проверка заполнения табличных частей
	Если Товары.Количество() = 0
		И Услуги.Количество() = 0 Тогда	
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнен ни один список.'"),,,,Отказ)		
	КонецЕсли;
	
	Если Товары.Количество() = 0 Тогда
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Склад");
	КонецЕсли;
	
	Если Курс = 0 Или Кратность = 0 Тогда 
		ТекстСообщения = НСтр("ru = 'Не заполнен курс валюты ""%1"". Откройте список валют (Банк и касса - Валюты) и проверьте,
			|что у валюты ""%1"" установлен курс на дату %2 или ранее.
			|Перевыберите договор и заново проведите документ.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ВалютаДокумента, Формат(Дата, "ДЛФ=D"));	
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;

	ОбщегоНазначенияБПСервер.ДобавитьНепроверяемыеРеквизитыПоПараметрамФункциональныхОпций(МассивНепроверяемыхРеквизитов, Организация, Дата);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	// Выполнение предварительного контроля.
	ВыполнитьПредварительныйКонтроль(Отказ);	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = Товары.Итог("Всего");
	
	// В случае если очистили дату, но не очистили серию бланка СФ.
	// Дата нужна для записи в РС "РеестрПриобретенныхМатериальныхРесурсов".
	Если НЕ ЗначениеЗаполнено(ДатаСф) Тогда
		ДатаСф = Дата;				
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ВозвратТоваровПоставщику.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	УчетТоваров.СформироватьДвиженияВозвратТоваровПоставщику(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТовары,
		ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСписанныеТовары, 
		ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты, Движения, Отказ, ПрямыеПроводки);
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);   	
	БухгалтерскийУчетСервер.ОтразитьПоступлениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСведенияОПоступлении(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьРеестрПриобретенныхМатериальныхРесурсов(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьРеестрВвезенных(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьНДСНаИмпорт(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьРеестрЗакупок(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСведенияПоПоказателямИмпорта(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.Номенклатура,
		|	ТаблицаДокумента.СчетУчета
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	&ТаблицаДокумента КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаДокумента1.НомерСтроки) КАК НомерСтроки,
		|	ТаблицаДокумента1.Номенклатура
		|ИЗ
		|	ТаблицаДокумента КАК ТаблицаДокумента1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокумента КАК ТаблицаДокумента2
		|		ПО ТаблицаДокумента1.НомерСтроки <> ТаблицаДокумента2.НомерСтроки
		|			И ТаблицаДокумента1.Номенклатура = ТаблицаДокумента2.Номенклатура
		|			И ТаблицаДокумента1.СчетУчета = ТаблицаДокумента2.СчетУчета
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента1.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Запрос.УстановитьПараметр("ТаблицаДокумента", Товары);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Дубли строк.
	Если НЕ МассивРезультатов[1].Пустой() Тогда
		ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Номенклатура указывается повторно в строке %1 списка ""Товары"".'"), 
							ВыборкаИзРезультатаЗапроса.НомерСтроки);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				"Товары",
				ВыборкаИзРезультатаЗапроса.НомерСтроки,
				"Номенклатура",
				Отказ);
		КонецЦикла;
	КонецЕсли;		
	
	// Проверка остатков по поступлению и возвращаемые позиции.
	Если ЗначениеЗаполнено(ДокументОснование) Тогда 
		МассивТаблиц = ПолучитьДанныеПоПоступлению(Истина);
		
		Если МассивТаблиц.Количество() = 0 Тогда
			Отказ = Истина
			
		Иначе	
			ТаблицаТовары = МассивТаблиц[0];
			
			Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
				
				Результат = ТаблицаТовары.Найти(СтрокаТабличнойЧасти.Номенклатура, "Номенклатура");
				
				Если Результат = Неопределено Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Данной позиции ""%1"" нет в поступлении ""%2"".'"), 
												СтрокаТабличнойЧасти.Номенклатура, ДокументОснование);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
					
				Иначе
					Если Результат.Количество < СтрокаТабличнойЧасти.Количество Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Возвращаемое количество по позиции ""%1"" превышено на %2.'"), 
											СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Количество - Результат.Количество);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	
			
			ТаблицаУслуги = МассивТаблиц[1];
			
			Для Каждого СтрокаТабличнойЧасти Из Услуги Цикл
				
				Результат = ТаблицаУслуги.Найти(СтрокаТабличнойЧасти.Номенклатура, "Номенклатура");
				
				Если Результат = Неопределено Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Данной позиции ""%1"" нет в поступлении ""%2"".'"), 
												СтрокаТабличнойЧасти.Номенклатура, ДокументОснование);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
					
				Иначе
					Если Результат.Количество < СтрокаТабличнойЧасти.Количество Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Возвращаемое количество по позиции ""%1"" превышено на %2.'"), 
											СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Количество - Результат.Количество);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает выборку данных ТЧ "Товары" и "Услуги" из запроса 
// по документу поступления одновременно проверяя небыло ли ранее
// возвратов по этому поступлению и если были, вычитает то что уже возвращено.
//
Функция ПолучитьДанныеПоПоступлению(ПоказатьСообщение) Экспорт

	МассивВозврата = Новый Массив();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.Ссылка КАК Ссылка,
		|	ПоступлениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
		|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	ПоступлениеТоваровУслугТовары.КоличествоДопЕдиницы КАК КоличествоДопЕдиницы,
		|	ПоступлениеТоваровУслугТовары.КоэффициентДопЕдиницы КАК КоэффициентДопЕдиницы,
		|	ПоступлениеТоваровУслугТовары.Количество КАК Количество,
		|	ПоступлениеТоваровУслугТовары.Цена КАК Цена,
		|	ПоступлениеТоваровУслугТовары.Сумма КАК Сумма,
		|	ПоступлениеТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
		|	ПоступлениеТоваровУслугТовары.СуммаНСП КАК СуммаНСП,
		|	ПоступлениеТоваровУслугТовары.Всего КАК Всего,
		|	ПоступлениеТоваровУслугТовары.ЗачетНДС КАК ЗачетНДС,
		|	ПоступлениеТоваровУслугТовары.СчетУчета КАК СчетУчета,
		|	ПоступлениеТоваровУслугТовары.Вес КАК Вес,
		|	ПоступлениеТоваровУслугТовары.СуммаАкциза КАК СуммаАкциза,
		|	ПоступлениеТоваровУслугТовары.ИмпортОсвобожденныйОтНДС КАК ИмпортОсвобожденныйОтНДС
		|ПОМЕСТИТЬ ВременнаяТаблицаПоступлениеТоваров
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка = &ДокументПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугУслуги.Ссылка КАК Ссылка,
		|	ПоступлениеТоваровУслугУслуги.НомерСтроки КАК НомерСтроки,
		|	ПоступлениеТоваровУслугУслуги.Номенклатура КАК Номенклатура,
		|	ПоступлениеТоваровУслугУслуги.Количество КАК Количество,
		|	ПоступлениеТоваровУслугУслуги.Цена КАК Цена,
		|	ПоступлениеТоваровУслугУслуги.Сумма КАК Сумма,
		|	ПоступлениеТоваровУслугУслуги.СуммаНДС КАК СуммаНДС,
		|	ПоступлениеТоваровУслугУслуги.СуммаНСП КАК СуммаНСП,
		|	ПоступлениеТоваровУслугУслуги.Всего КАК Всего,
		|	ПоступлениеТоваровУслугУслуги.ЗачетНДС КАК ЗачетНДС,
		|	ПоступлениеТоваровУслугУслуги.СчетРасхода КАК СчетРасхода,
		|	ПоступлениеТоваровУслугУслуги.Субконто1 КАК Субконто1,
		|	ПоступлениеТоваровУслугУслуги.Субконто2 КАК Субконто2,
		|	ПоступлениеТоваровУслугУслуги.Субконто3 КАК Субконто3,
		|	ПоступлениеТоваровУслугУслуги.СуммаАкциза КАК СуммаАкциза
		|ПОМЕСТИТЬ ВременнаяТаблицаПоступлениеУслуг
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		|ГДЕ
		|	ПоступлениеТоваровУслугУслуги.Ссылка = &ДокументПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
		|	СУММА(ВозвратТоваровПоставщикуТовары.Количество) КАК Количество,
		|	СУММА(ВозвратТоваровПоставщикуТовары.Сумма) КАК Сумма,
		|	СУММА(ВозвратТоваровПоставщикуТовары.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ВозвратТоваровПоставщикуТовары.СуммаНСП) КАК СуммаНСП,
		|	СУММА(ВозвратТоваровПоставщикуТовары.Всего) КАК Всего,
		|	СУММА(ВозвратТоваровПоставщикуТовары.СуммаАкциза) КАК СуммаАкциза,
		|	ВозвратТоваровПоставщикуТовары.Ссылка.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВременнаяТаблицаВозвратТоваров
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
		|ГДЕ
		|	ВозвратТоваровПоставщикуТовары.Ссылка <> &Ссылка
		|	И ВозвратТоваровПоставщикуТовары.Ссылка.ДокументОснование = &ДокументПоступления
		|
		|СГРУППИРОВАТЬ ПО
		|	ВозвратТоваровПоставщикуТовары.Ссылка.ДокументОснование,
		|	ВозвратТоваровПоставщикуТовары.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВозвратТоваровПоставщикуУслуги.Номенклатура КАК Номенклатура,
		|	СУММА(ВозвратТоваровПоставщикуУслуги.Количество) КАК Количество,
		|	СУММА(ВозвратТоваровПоставщикуУслуги.Сумма) КАК Сумма,
		|	СУММА(ВозвратТоваровПоставщикуУслуги.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ВозвратТоваровПоставщикуУслуги.СуммаНСП) КАК СуммаНСП,
		|	СУММА(ВозвратТоваровПоставщикуУслуги.Всего) КАК Всего,
		|	СУММА(ВозвратТоваровПоставщикуУслуги.СуммаАкциза) КАК СуммаАкциза,
		|	ВозвратТоваровПоставщикуУслуги.Ссылка.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВременнаяТаблицаВозвратУслуг
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Услуги КАК ВозвратТоваровПоставщикуУслуги
		|ГДЕ
		|	ВозвратТоваровПоставщикуУслуги.Ссылка <> &Ссылка
		|	И ВозвратТоваровПоставщикуУслуги.Ссылка.ДокументОснование = &ДокументПоступления
		|
		|СГРУППИРОВАТЬ ПО
		|	ВозвратТоваровПоставщикуУслуги.Ссылка.ДокументОснование,
		|	ВозвратТоваровПоставщикуУслуги.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаПоступлениеТоваров.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаПоступлениеТоваров.Количество - ЕСТЬNULL(ВременнаяТаблицаВозвратТоваров.Количество, 0) КАК Количество,
		|	ВременнаяТаблицаПоступлениеТоваров.Цена КАК Цена,
		|	ВременнаяТаблицаПоступлениеТоваров.Сумма - ЕСТЬNULL(ВременнаяТаблицаВозвратТоваров.Сумма, 0) КАК Сумма,
		|	ВременнаяТаблицаПоступлениеТоваров.СуммаНДС - ЕСТЬNULL(ВременнаяТаблицаВозвратТоваров.СуммаНДС, 0) КАК СуммаНДС,
		|	ВременнаяТаблицаПоступлениеТоваров.СуммаНСП - ЕСТЬNULL(ВременнаяТаблицаВозвратТоваров.СуммаНСП, 0) КАК СуммаНСП,
		|	ВременнаяТаблицаПоступлениеТоваров.Всего - ЕСТЬNULL(ВременнаяТаблицаВозвратТоваров.Всего, 0) КАК Всего,
		|	ВременнаяТаблицаПоступлениеТоваров.СуммаАкциза - ЕСТЬNULL(ВременнаяТаблицаВозвратТоваров.СуммаАкциза, 0) КАК СуммаАкциза,
		|	ВременнаяТаблицаПоступлениеТоваров.СчетУчета КАК СчетУчета,
		|	ВременнаяТаблицаПоступлениеТоваров.ЗачетНДС КАК ЗачетНДС,
		|	ВременнаяТаблицаПоступлениеТоваров.ИмпортОсвобожденныйОтНДС КАК ИмпортОсвобожденныйОтНДС
		|ИЗ
		|	ВременнаяТаблицаПоступлениеТоваров КАК ВременнаяТаблицаПоступлениеТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаВозвратТоваров КАК ВременнаяТаблицаВозвратТоваров
		|		ПО ВременнаяТаблицаПоступлениеТоваров.Ссылка = ВременнаяТаблицаВозвратТоваров.ДокументОснование
		|			И ВременнаяТаблицаПоступлениеТоваров.Номенклатура = ВременнаяТаблицаВозвратТоваров.Номенклатура
		|ГДЕ
		|	ВременнаяТаблицаПоступлениеТоваров.Количество - ЕСТЬNULL(ВременнаяТаблицаВозвратТоваров.Количество, 0) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаПоступлениеУслуг.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаПоступлениеУслуг.Количество - ЕСТЬNULL(ВременнаяТаблицаВозвратУслуг.Количество, 0) КАК Количество,
		|	ВременнаяТаблицаПоступлениеУслуг.Цена КАК Цена,
		|	ВременнаяТаблицаПоступлениеУслуг.Сумма - ЕСТЬNULL(ВременнаяТаблицаВозвратУслуг.Сумма, 0) КАК Сумма,
		|	ВременнаяТаблицаПоступлениеУслуг.СуммаНДС - ЕСТЬNULL(ВременнаяТаблицаВозвратУслуг.СуммаНДС, 0) КАК СуммаНДС,
		|	ВременнаяТаблицаПоступлениеУслуг.СуммаНСП - ЕСТЬNULL(ВременнаяТаблицаВозвратУслуг.СуммаНСП, 0) КАК СуммаНСП,
		|	ВременнаяТаблицаПоступлениеУслуг.Всего - ЕСТЬNULL(ВременнаяТаблицаВозвратУслуг.Всего, 0) КАК Всего,
		|	ВременнаяТаблицаПоступлениеУслуг.СуммаАкциза - ЕСТЬNULL(ВременнаяТаблицаВозвратУслуг.СуммаАкциза, 0) КАК СуммаАкциза,
		|	ВременнаяТаблицаПоступлениеУслуг.СчетРасхода КАК СчетРасхода,
		|	ВременнаяТаблицаПоступлениеУслуг.ЗачетНДС КАК ЗачетНДС,
		|	ВременнаяТаблицаПоступлениеУслуг.Субконто1 КАК Субконто1,
		|	ВременнаяТаблицаПоступлениеУслуг.Субконто2 КАК Субконто2,
		|	ВременнаяТаблицаПоступлениеУслуг.Субконто3 КАК Субконто3
		|ИЗ
		|	ВременнаяТаблицаПоступлениеУслуг КАК ВременнаяТаблицаПоступлениеУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаВозвратУслуг КАК ВременнаяТаблицаВозвратУслуг
		|		ПО ВременнаяТаблицаПоступлениеУслуг.Ссылка = ВременнаяТаблицаВозвратУслуг.ДокументОснование
		|			И ВременнаяТаблицаПоступлениеУслуг.Номенклатура = ВременнаяТаблицаВозвратУслуг.Номенклатура
		|ГДЕ
		|	ВременнаяТаблицаПоступлениеУслуг.Количество - ЕСТЬNULL(ВременнаяТаблицаВозвратУслуг.Количество, 0) > 0";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДокументПоступления", ДокументОснование);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаТовары = МассивРезультатов[4].Выгрузить();
	ТаблицаУслуги = МассивРезультатов[5].Выгрузить();
	
	Если ПоказатьСообщение И ТаблицаТовары.Количество() = 0 И ТаблицаУслуги.Количество() = 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'По поступлению ""%1"" возвращены все позиции.'"), ДокументОснование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	Иначе
		МассивВозврата.Добавить(ТаблицаТовары);
		МассивВозврата.Добавить(ТаблицаУслуги);
	КонецЕсли;

	Возврат МассивВозврата;
КонецФункции // ПолучитьДанныеПоПоступлению()

#КонецОбласти	

#КонецЕсли