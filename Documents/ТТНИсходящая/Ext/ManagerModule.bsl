#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Функция формирует табличный документ с печатной формой ТТН
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьТТН(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ТТНИсходящая_ТТН";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.АвтоМасштаб = Истина;

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ТТНИсходящая.ПФ_MXL_ТТНВВалюте");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Номер КАК Номер,
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.ДокументОснование.ВалютаДокумента КАК ВалютаДокумента,
		|	ТаблицаДокумента.ДокументОснование.Курс КАК Курс,
		|	ТаблицаДокумента.Автомобиль КАК МаркаАвтомобиля,
		|	ТаблицаДокумента.Водитель КАК ПредставлениеВодителя,
		|	ТаблицаДокумента.НомерПутевогоЛиста КАК НомерПутевогоЛиста,
		//|	ТаблицаДокумента.МассаГрузаНетто КАК МассаГрузаНетто,
		//|	ТаблицаДокумента.МассаГрузаБрутто КАК МассаГрузаБрутто,
		|	ТаблицаДокумента.ДоверенностьНомер КАК ДоверенностьНомер,
		|	ТаблицаДокумента.ДоверенностьДата КАК ДоверенностьДата,
		|	ТаблицаДокумента.ДоверенностьВыдана КАК ДоверенностьВыдана,
		|	ТаблицаДокумента.ДоверенностьЧерезКого КАК ДоверенностьЧерезКого,
		|	ТаблицаДокумента.Товары.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		Номенклатура.Код КАК НоменклатураКод,
		|		Номенклатура.Артикул КАК НоменклатураАртикул,
		|		ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Товары.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|		НомерПрейскуранта КАК НомерПрейскуранта,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		ВидУпаковки КАК ВидУпаковки,
		|		ВесУпаковки КАК ВесУпаковки,
		|		КоличествоМест КАК КоличествоМест,
		|		МассаГрузаНетто КАК МассаГрузаНетто,
		|		МассаГрузаБрутто КАК МассаГрузаБрутто
		|	) КАК Товары
		|ИЗ
		|	Документ.ТТНИсходящая КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&СписокДокументов)";		

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовка данных.
		ДанныеПечати = Новый Структура;
		
		ДанныеПечати.Вставить("ДатаДокумента", Формат(Шапка.Дата, "ДЛФ=D"));
		НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер);
		ДанныеПечати.Вставить("НомерДокумента", НомерНаПечать);
		ДанныеПечати.Вставить("Валюта", Шапка.ВалютаДокумента);
		ДанныеПечати.Вставить("НомерСтраницы", ""); 
		
		// Сведения об организации.
		СведенияОбОрганизации = БухгалтерскийУчетСервер.ПолучитьСведенияОбОрганизации(Шапка.Организация);
		АдресОрганизации = ?(СведенияОбОрганизации.Улица    = "","",СведенияОбОрганизации.Улица + ",")
		+ ?(СведенияОбОрганизации.Дом      = "",""," " + СведенияОбОрганизации.Дом + ",")
		+ ?(СведенияОбОрганизации.Корпус   = "",""," " + СведенияОбОрганизации.Корпус + ",")
		+ ?(СведенияОбОрганизации.Квартира = "",""," " + СведенияОбОрганизации.Квартира);
		Телефон = СведенияОбОрганизации.Тел;
		
		ДанныеПечати.Вставить("ОрганизацияПредставление", "" + СведенияОбОрганизации.НаименованиеПолное 
		+ ?(ЗначениеЗаполнено(СведенияОбОрганизации.ИНН),", " + СведенияОбОрганизации.ИНН, "") 
		+ ?(ЗначениеЗаполнено(АдресОрганизации),", " + АдресОрганизации, "")
		+ ", " + Телефон);
		
		// Сведения о контрагенте.
		СведенияОКонтрагенте = БухгалтерскийУчетСервер.ПолучитьСведенияОКонтрагенте(Шапка.Контрагент);
		АдресКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Шапка.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента); 
		ТелефонКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Шапка.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента); 
		
		ДанныеПечати.Вставить("КонтрагентПредставление", "" + СведенияОКонтрагенте.НаименованиеПолное 
		+ ?(ЗначениеЗаполнено(СведенияОКонтрагенте.ИНН),", " + СведенияОКонтрагенте.ИНН, "") 
		+ ?(ЗначениеЗаполнено(АдресКонтрагента),", " + АдресКонтрагента, "")
		+ ", " + ТелефонКонтрагента);
		
		// Заполнение шапки.
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);			
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Создаем массив для проверки вывода.
		МассивВыводимыхОбластей = Новый Массив;
		
		// Заполнение таблицы.
		ОбластьЗаголовокТаблицы      = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьМакета                = Макет.ПолучитьОбласть("Строка");
		ОбластьИтоговПоСтранице      = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьВсего                 = Макет.ПолучитьОбласть("Всего");
		ОбластьПодвала               = Макет.ПолучитьОбласть("Подвал");
		ОбластьТранспортногоРаздела  = Макет.ПолучитьОбласть("ТранспортныйРаздел");
		ОбластьСведенийОГрузе        = Макет.ПолучитьОбласть("СведенияОГрузе");
		ОбластьПодвалаСведенийОГрузе = Макет.ПолучитьОбласть("ПодвалСведенийОГрузе");
		ОбластьПрочихСведений        = Макет.ПолучитьОбласть("ПрочиеСведения");
		ОбластьПогрузочныеОперации	 = Макет.ПолучитьОбласть("ПогрузочныеОперации");
		
		СтруктураОбластейМакета = Новый Структура();
		СтруктураОбластейМакета.Вставить("ОбластьМакета", ОбластьМакета);
		СтруктураОбластейМакета.Вставить("ОбластьЗаголовокТаблицы", ОбластьЗаголовокТаблицы);
		СтруктураОбластейМакета.Вставить("ОбластьИтоговПоСтранице", ОбластьИтоговПоСтранице);
		СтруктураОбластейМакета.Вставить("ОбластьВсего", ОбластьВсего);
		СтруктураОбластейМакета.Вставить("ОбластьПодвала", ОбластьПодвала);
		
		ТаблицаТовары = Шапка.Товары.Выгрузить();
		
		ДанныеПечати.Вставить("КоличествоМест", ТаблицаТовары.Итог("КоличествоМест"));

		СтруктураПеременных = Новый Структура();
		СтруктураПеременных.Вставить("КоличествоСтрок", ТаблицаТовары.Количество());
		СтруктураПеременных.Вставить("ИтоговыеСуммы", СтруктураИтоговыеСуммыТТН());
		СтруктураПеременных.Вставить("НомерСтроки", 0);
		СтруктураПеременных.Вставить("Курс", Шапка.Курс);
		
		ЗаполнитьИВывестиСтрокиМакетаТТН(СтруктураОбластейМакета, ТаблицаТовары, ТабличныйДокумент, ДанныеПечати, СтруктураПеременных);
				
		// Выводим итоги по последней странице
		ОбластьИтоговПоСтранице.Параметры.Заполнить(СтруктураПеременных.ИтоговыеСуммы);
		ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьВсего.Параметры.Заполнить(СтруктураПеременных.ИтоговыеСуммы);		
		ТабличныйДокумент.Вывести(ОбластьВсего);
		
		// Выводим подвал документа				
		ПолнаяДатаДокумента = Формат(Шапка.Дата, "ДЛФ=DD");
		ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
		ПервыйРазделитель = Найти(ПолнаяДатаДокумента, " ");
		ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
		
		ДанныеПечати.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(СтруктураПеременных.НомерСтроки, ,",,,,,,,,0"));
		ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(СтруктураПеременных.ИтоговыеСуммы.ИтогоСумма, Шапка.ВалютаДокумента));
		ДанныеПечати.Вставить("ДатаДокументаДень", """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель -1 ) + """");
		ДанныеПечати.Вставить("ДатаДокументаМесяц", Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1));
		ДанныеПечати.Вставить("ДатаДокументаГод", Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель));
		ДанныеПечати.Вставить("ВсегоНаименованийПрописью", ЧислоПрописью(СтруктураПеременных.КоличествоСтрок, ,",,,,,,,,0"));
		ДанныеПечати.Вставить("ВсегоМестПрописью", ЧислоПрописью(ДанныеПечати.КоличествоМест, ,",,,,,,,,0"));
		
		ДанныеПечати.Вставить("ДоверенностьНомер", Шапка.ДоверенностьНомер);
		ДанныеПечати.Вставить("ДоверенностьДата", Шапка.ДоверенностьДата);
		ДанныеПечати.Вставить("ДоверенностьВыдана", Шапка.ДоверенностьВыдана);
		ДанныеПечати.Вставить("ДоверенностьЧерезКого", Шапка.ДоверенностьЧерезКого);
		
		МассаГрузаНетто = ТаблицаТовары.Итог("МассаГрузаНетто");
		ДанныеПечати.Вставить("МассаГрузаНетто", МассаГрузаНетто);

		// МассаГрузаНетто прописью в тоннах и килограммах.
		МассаГрузаЦелаяЧасть = Цел(МассаГрузаНетто);
		МассаГрузаДробнаяЧасть = (МассаГрузаНетто - Цел(МассаГрузаНетто)) * 1000;
		МассаГрузаДробнаяЧастьСтрокой = Строка(МассаГрузаДробнаяЧасть);
		
		Если МассаГрузаДробнаяЧасть <> 0 И СтрДлина(МассаГрузаДробнаяЧастьСтрокой) = 1 Тогда
			МассаГрузаДробнаяЧастьСтрокой = "00" + МассаГрузаДробнаяЧастьСтрокой;
		ИначеЕсли СтрДлина(МассаГрузаДробнаяЧастьСтрокой) = 2 Тогда
			МассаГрузаДробнаяЧастьСтрокой = "0" + МассаГрузаДробнаяЧастьСтрокой;
		КонецЕсли;	
		
		ДанныеПечати.Вставить("МассаГрузаНеттоПрописью", ЧислоПрописью(МассаГрузаЦелаяЧасть, ,"тонна, тонны, тонн, ж,,,,,0") 
									+ " " + МассаГрузаДробнаяЧастьСтрокой + " " + "кг");
									
		МассаГрузаБрутто = ТаблицаТовары.Итог("МассаГрузаБрутто");
		ДанныеПечати.Вставить("МассаГрузаБрутто", МассаГрузаБрутто);

		// МассаГрузаБрутто прописью в тоннах и килограммах.
		МассаГрузаЦелаяЧасть = Цел(МассаГрузаБрутто);
		МассаГрузаДробнаяЧасть = (МассаГрузаБрутто - Цел(МассаГрузаБрутто)) * 1000;
		МассаГрузаДробнаяЧастьСтрокой = Строка(МассаГрузаДробнаяЧасть);
		
		Если МассаГрузаДробнаяЧасть <> 0 И СтрДлина(МассаГрузаДробнаяЧастьСтрокой) = 1 Тогда
			МассаГрузаДробнаяЧастьСтрокой = "00" + МассаГрузаДробнаяЧастьСтрокой;
		ИначеЕсли СтрДлина(МассаГрузаДробнаяЧастьСтрокой) = 2 Тогда
			МассаГрузаДробнаяЧастьСтрокой = "0" + МассаГрузаДробнаяЧастьСтрокой;
		КонецЕсли;	
		
		ДанныеПечати.Вставить("МассаГрузаБуттоПрописью", ЧислоПрописью(МассаГрузаЦелаяЧасть, ,"тонна, тонны, тонн, ж,,,,,0") 
									+ " " + МассаГрузаДробнаяЧастьСтрокой + " " + "кг");
		
		// Подписи.
		ФамилияИОРуководителя = "";                    
		ФамилияИОГлавногоБухгалтера = "";
		ОтветственныеЛица = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизацийРуководители(Шапка.Организация, Шапка.Дата);
		БухгалтерскийУчетСервер.ФамилияИнициалыПоНаименованию(ФамилияИОРуководителя, ОтветственныеЛица.Руководитель);
		БухгалтерскийУчетСервер.ФамилияИнициалыПоНаименованию(ФамилияИОГлавногоБухгалтера, ОтветственныеЛица.ГлавныйБухгалтер);
		
		ДанныеПечати.Вставить("ФамилияИОРуководителя", ФамилияИОРуководителя);
		ДанныеПечати.Вставить("ФамилияИОГлавногоБухгалтера", ФамилияИОГлавногоБухгалтера);
		ДанныеПечати.Вставить("РуководительДолжность", ОтветственныеЛица.РуководительДолжность);
				
		ОбластьПодвала.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьПодвала);
				
		МассивВыводимыхОбластей.Очистить();
		МассивВыводимыхОбластей.Добавить(ОбластьТранспортногоРаздела);
		МассивВыводимыхОбластей.Добавить(ОбластьСведенийОГрузе);
		МассивВыводимыхОбластей.Добавить(ОбластьПодвалаСведенийОГрузе);
		МассивВыводимыхОбластей.Добавить(ОбластьПогрузочныеОперации);
		МассивВыводимыхОбластей.Добавить(ОбластьПрочихСведений);
		
		Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ОбластьТранспортногоРаздела.Параметры.Заполнить(ДанныеПечати);
		ОбластьТранспортногоРаздела.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьТранспортногоРаздела);
		ТабличныйДокумент.Вывести(ОбластьСведенийОГрузе);
		ТабличныйДокумент.Вывести(ОбластьПодвалаСведенийОГрузе);
		ТабличныйДокумент.Вывести(ОбластьПогрузочныеОперации);
		ТабличныйДокумент.Вывести(ОбластьПрочихСведений);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТТН") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"ТТН", НСтр("ru = 'ТТН'"), ПечатьТТН(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТТН";
	КомандаПечати.Представление = НСтр("ru = 'ТТН'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 1;
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "РеестрТТНИсходящая";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Реализация товаров и услуг""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 99;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет строку макета ТТН (ТТН в валюте)
//
// Параметры:
//  СтруктураОбластейМакета - Структура - структура с областями;
//  МассивТаблицЗначений - Массив - массив таблиц значений ТЧ "Товары", "Услуги" и "ОС";
//	ТабличныйДокумент - ТабличныйДокумент - табличный документ, в который выводятся данные
//	ДанныеПечати - Структура - данные для печати
//	СтруктураПеременных - Структура - структура переменных, необходимых для подсчета или вычисления.
//
Процедура ЗаполнитьИВывестиСтрокиМакетаТТН(СтруктураОбластейМакета, ТаблицаЗначений, ТабличныйДокумент, ДанныеПечати, СтруктураПеременных)

	МассивВыводимыхОбластей = Новый Массив;
	НомерСтраницы = 1;
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
			
		ДанныеСтроки = СтруктураДанныеСтрокиТТН();
		СтруктураПеременных.НомерСтроки = СтруктураПеременных.НомерСтроки + 1;			
		ДанныеСтроки.Номер = СтруктураПеременных.НомерСтроки;

		СтруктураОбластейМакета.ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
		СтруктураОбластейМакета.ОбластьМакета.Параметры.Заполнить(ДанныеСтроки);
		
		Если СтруктураПеременных.НомерСтроки = 1 Тогда // первая строка
			ДанныеПечати.НомерСтраницы = "Страница " + НомерСтраницы; 
			СтруктураОбластейМакета.ОбластьЗаголовокТаблицы.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(СтруктураОбластейМакета.ОбластьЗаголовокТаблицы);

		Иначе
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(СтруктураОбластейМакета.ОбластьМакета);
			МассивВыводимыхОбластей.Добавить(СтруктураОбластейМакета.ОбластьИтоговПоСтранице);
			
			Если СтруктураПеременных.НомерСтроки = СтруктураПеременных.КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(СтруктураОбластейМакета.ОбластьВсего);
				МассивВыводимыхОбластей.Добавить(СтруктураОбластейМакета.ОбластьПодвала);					
			КонецЕсли;				
			
			Если СтруктураПеременных.НомерСтроки <> 1 И Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				
				СтруктураОбластейМакета.ОбластьИтоговПоСтранице.Параметры.Заполнить(СтруктураПеременных.ИтоговыеСуммы);
				ТабличныйДокумент.Вывести(СтруктураОбластейМакета.ОбластьИтоговПоСтранице);
				
				 // Очистим итоги по странице.
				ОбнулитьИтогиПоСтраницеТТН(СтруктураПеременных.ИтоговыеСуммы);
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				ДанныеПечати.НомерСтраницы = "Страница " + НомерСтраницы; 
				СтруктураОбластейМакета.ОбластьЗаголовокТаблицы.Параметры.Заполнить(ДанныеПечати);
				ТабличныйДокумент.Вывести(СтруктураОбластейМакета.ОбластьЗаголовокТаблицы);
			
			КонецЕсли;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(СтруктураОбластейМакета.ОбластьМакета);
		РассчитатьИтоговыеСуммыТТН(СтруктураПеременных.ИтоговыеСуммы, СтрокаТаблицы);
					
	КонецЦикла;	

КонецПроцедуры

// Функция формирования структуры хранения данных строки.
//
// Возвращаемое значение:
//	Структура - Структура данных строки товаров
//
Функция СтруктураДанныеСтрокиТТН()
	
	Структура = Новый Структура;
	Структура.Вставить("Номер", 0);
	
	Возврат Структура;
	
КонецФункции // СтруктураДанныеСтроки()

// Функция формирования структуры хранения итоговых суммы.
//
// Возвращаемое значение:
//	Структура - Структура хранения итоговых сумм
//
Функция СтруктураИтоговыеСуммыТТН()
	
	Структура = Новый Структура;
	
	// Инициализация итогов по странице.
	Структура.Вставить("ИтогоКоличествоМестНаСтранице", 0);
	Структура.Вставить("ИтогоКоличествоНаСтранице", 0);
	Структура.Вставить("ИтогоСуммаНаСтранице", 0);
	Структура.Вставить("ИтогоМассаГрузаНеттоНаСтранице", 0);
	Структура.Вставить("ИтогоМассаГрузаБруттоНаСтранице", 0);
	Структура.Вставить("ИтогоКоличествоМестНаСтранице", 0);
	
	// Инициализация итогов по документу.
	Структура.Вставить("ИтогоКоличество", 0);
	Структура.Вставить("ИтогоСумма", 0);
	Структура.Вставить("ИтогоМассаГрузаНетто", 0);
	Структура.Вставить("ИтогоМассаГрузаБрутто", 0);
	Структура.Вставить("ИтогоКоличествоМест", 0);
	
	Структура.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", 0);
	Структура.Вставить("СуммаПрописью", "");
	
	Возврат Структура;
	
КонецФункции // СтруктураИтоговыеСуммы()

// Процедура рассчитывает итоговые суммы с учетом строки товаров.
//
// Параметры:
//	ИтоговыеСуммы - Структура - Структура итоговых сумм документа
//	СтрокаТаблицы - СтрокаТаблицыЗначений - Данные строки таблицы товаров
//
Процедура РассчитатьИтоговыеСуммыТТН(ИтоговыеСуммы, СтрокаТаблицы)
	
	// Увеличим итоги по странице.
	ИтоговыеСуммы.ИтогоКоличествоМестНаСтранице		= ИтоговыеСуммы.ИтогоКоличествоМестНаСтранице		+ СтрокаТаблицы.КоличествоМест;
	ИтоговыеСуммы.ИтогоКоличествоНаСтранице  		= ИтоговыеСуммы.ИтогоКоличествоНаСтранице  			+ СтрокаТаблицы.Количество;
	ИтоговыеСуммы.ИтогоСуммаНаСтранице       		= ИтоговыеСуммы.ИтогоСуммаНаСтранице       			+ СтрокаТаблицы.Сумма;
	ИтоговыеСуммы.ИтогоМассаГрузаНеттоНаСтранице	= ИтоговыеСуммы.ИтогоМассаГрузаНеттоНаСтранице 		+ СтрокаТаблицы.МассаГрузаНетто;
	ИтоговыеСуммы.ИтогоМассаГрузаБруттоНаСтранице	= ИтоговыеСуммы.ИтогоМассаГрузаБруттоНаСтранице 	+ СтрокаТаблицы.МассаГрузаБрутто;
	
	// Увеличим итоги по документу.
	ИтоговыеСуммы.ИтогоКоличество  			= ИтоговыеСуммы.ИтогоКоличество  		+ СтрокаТаблицы.Количество;
	ИтоговыеСуммы.ИтогоСумма       			= ИтоговыеСуммы.ИтогоСумма       		+ СтрокаТаблицы.Сумма;
	ИтоговыеСуммы.ИтогоМассаГрузаНетто		= ИтоговыеСуммы.ИтогоМассаГрузаНетто	+ СтрокаТаблицы.МассаГрузаНетто;
	ИтоговыеСуммы.ИтогоМассаГрузаБрутто		= ИтоговыеСуммы.ИтогоМассаГрузаБрутто	+ СтрокаТаблицы.МассаГрузаБрутто;
	ИтоговыеСуммы.ИтогоКоличествоМест  		= ИтоговыеСуммы.ИтогоКоличествоМест  	+ СтрокаТаблицы.КоличествоМест;
	
КонецПроцедуры // РассчитатьИтоговыеСуммы()

// Процедура обнуления итоговых сумм по странице.
//
Процедура ОбнулитьИтогиПоСтраницеТТН(ИтоговыеСуммы)
	
	ИтоговыеСуммы.ИтогоКоличествоМестНаСтранице = 0;
	ИтоговыеСуммы.ИтогоКоличествоНаСтранице = 0;
	ИтоговыеСуммы.ИтогоСуммаНаСтранице = 0;
	ИтоговыеСуммы.ИтогоМассаГрузаНеттоНаСтранице = 0;
	ИтоговыеСуммы.ИтогоМассаГрузаБруттоНаСтранице = 0;
	
КонецПроцедуры // ОбнулитьИтогиПоСтранице()

#КонецОбласти

#КонецЕсли