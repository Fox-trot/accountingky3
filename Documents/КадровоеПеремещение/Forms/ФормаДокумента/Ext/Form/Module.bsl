#Область ОбработчикиСлужебные

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Заполняет документ данными по сотруднику
//
&НаСервере
Процедура ЗаполнитьПоСотруднику()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлановыеНачисленияНачалоСрезПоследних.ВидРасчета,
		|	ПлановыеНачисленияНачалоСрезПоследних.Размер
		|ПОМЕСТИТЬ ВременнаяТаблицаСрезПлановыеНачисленияНачалоАктуально
		|ИЗ
		|	РегистрСведений.ПлановыеНачисленияНачало.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ФизЛицо = &ФизЛицо
		|				И НЕ Регистратор = &Ссылка) КАК ПлановыеНачисленияНачалоСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияОкончание.СрезПоследних(
		|				&Период,
		|				Организация = &Организация
		|					И ФизЛицо = &ФизЛицо
		|					И НЕ Регистратор = &Ссылка) КАК ПлановыеНачисленияОкончаниеСрезПоследних
		|		ПО ПлановыеНачисленияНачалоСрезПоследних.Организация = ПлановыеНачисленияОкончаниеСрезПоследних.Организация
		|			И ПлановыеНачисленияНачалоСрезПоследних.ФизЛицо = ПлановыеНачисленияОкончаниеСрезПоследних.ФизЛицо
		|			И ПлановыеНачисленияНачалоСрезПоследних.ВидРасчета = ПлановыеНачисленияОкончаниеСрезПоследних.ВидРасчета
		|			И ПлановыеНачисленияНачалоСрезПоследних.Регистратор = ПлановыеНачисленияОкончаниеСрезПоследних.ДокументСсылка
		|ГДЕ
		|	ПлановыеНачисленияНачалоСрезПоследних.Основной
		|	И ПлановыеНачисленияОкончаниеСрезПоследних.Организация ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиСрезПоследних.Подразделение,
		|	СотрудникиСрезПоследних.Должность,
		|	СотрудникиСрезПоследних.ЗанимаемыхСтавок,
		|	СотрудникиСрезПоследних.ГрафикРаботы,
		|	ПлановыеНачисленияНачалоСрезПоследних.ВидРасчета,
		|	ПлановыеНачисленияНачалоСрезПоследних.Размер
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ФизЛицо = &ФизЛицо
		|				И НЕ Регистратор = &Ссылка) КАК СотрудникиСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСрезПлановыеНачисленияНачалоАктуально КАК ПлановыеНачисленияНачалоСрезПоследних
		|		ПО (ИСТИНА)";
	Запрос.УстановитьПараметр("Период", ДатаДокумента);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ФизЛицо", Объект.ФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		ТекстСообщения = НСтр("ru = 'Нет сведений по выбранному сотруднику!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Сотрудник");
		Возврат;		
	КонецЕсли;	
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	ЗаполнитьЗначенияСвойств(Объект, ВыборкаДетальныеЗаписи);
	
	ПрежнееПодразделение = Объект.Подразделение;	
	ПрежняяДолжность = Объект.Должность;	
	ПрежнийГрафикРаботы = Объект.ГрафикРаботы;	
	ПрежнееКоличествоЗанимаемыхСтавок = Объект.ЗанимаемыхСтавок;	
	ПрежнийРазмер = Объект.Размер;
	ПрежнийВидРасчета = Объект.ВидРасчета;
	
	ЗаполнитьНачисленияНаСервере();
	ЗаполнитьУдержанияНаСервере();
КонецПроцедуры // ЗаполнитьПоСотруднику()

// Восстанавлнивает прежние данные по сотруднику
//
&НаСервере
Процедура ЗаполнитьПрежниеДанныеПоСотруднику()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлановыеНачисленияНачалоСрезПоследних.ВидРасчета,
		|	ПлановыеНачисленияНачалоСрезПоследних.Размер
		|ПОМЕСТИТЬ ВременнаяТаблицаСрезПлановыеНачисленияНачалоАктуально
		|ИЗ
		|	РегистрСведений.ПлановыеНачисленияНачало.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ФизЛицо = &ФизЛицо
		|				И НЕ Регистратор = &Ссылка) КАК ПлановыеНачисленияНачалоСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияОкончание.СрезПоследних(
		|				&Период,
		|				Организация = &Организация
		|					И ФизЛицо = &ФизЛицо
		|					И НЕ Регистратор = &Ссылка) КАК ПлановыеНачисленияОкончаниеСрезПоследних
		|		ПО ПлановыеНачисленияНачалоСрезПоследних.Организация = ПлановыеНачисленияОкончаниеСрезПоследних.Организация
		|			И ПлановыеНачисленияНачалоСрезПоследних.ФизЛицо = ПлановыеНачисленияОкончаниеСрезПоследних.ФизЛицо
		|			И ПлановыеНачисленияНачалоСрезПоследних.ВидРасчета = ПлановыеНачисленияОкончаниеСрезПоследних.ВидРасчета
		|			И ПлановыеНачисленияНачалоСрезПоследних.Регистратор = ПлановыеНачисленияОкончаниеСрезПоследних.ДокументСсылка
		|ГДЕ
		|	ПлановыеНачисленияНачалоСрезПоследних.Основной
		|	И ПлановыеНачисленияОкончаниеСрезПоследних.Организация ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиСрезПоследних.Подразделение,
		|	СотрудникиСрезПоследних.Должность,
		|	СотрудникиСрезПоследних.ЗанимаемыхСтавок,
		|	СотрудникиСрезПоследних.ГрафикРаботы,
		|	ПлановыеНачисленияНачалоСрезПоследних.ВидРасчета,
		|	ПлановыеНачисленияНачалоСрезПоследних.Размер
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ФизЛицо = &ФизЛицо
		|				И НЕ Регистратор = &Ссылка) КАК СотрудникиСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСрезПлановыеНачисленияНачалоАктуально КАК ПлановыеНачисленияНачалоСрезПоследних
		|		ПО (ИСТИНА)";
	Запрос.УстановитьПараметр("Период", Объект.Период);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ФизЛицо", Объект.ФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	ПрежнееПодразделение = ВыборкаДетальныеЗаписи.Подразделение;	
	ПрежняяДолжность = ВыборкаДетальныеЗаписи.Должность;	
	ПрежнийГрафикРаботы = ВыборкаДетальныеЗаписи.ГрафикРаботы;	
	ПрежнееКоличествоЗанимаемыхСтавок = ВыборкаДетальныеЗаписи.ЗанимаемыхСтавок;	
	ПрежнийРазмер = ВыборкаДетальныеЗаписи.Размер;	
	ПрежнийВидРасчета = Объект.ВидРасчета;

КонецПроцедуры // ЗаполнитьПрежниеДанныеПоСотруднику()

// Заполняет список начислений
//
&НаСервере
Процедура ЗаполнитьНачисленияНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлановыеНачисленияНачалоСрезПоследних.ВидРасчета,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДействияНачисленийУдержаний.НеИзменять) КАК ВидДействия,
		|	ПлановыеНачисленияНачалоСрезПоследних.Размер
		|ИЗ
		|	РегистрСведений.ПлановыеНачисленияНачало.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ФизЛицо = &ФизЛицо
		|				И НЕ Регистратор = &Ссылка) КАК ПлановыеНачисленияНачалоСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияОкончание.СрезПоследних(
		|				&Период,
		|				Организация = &Организация
		|					И ФизЛицо = &ФизЛицо
		|					И НЕ Регистратор = &Ссылка) КАК ПлановыеНачисленияОкончаниеСрезПоследних
		|		ПО ПлановыеНачисленияНачалоСрезПоследних.Организация = ПлановыеНачисленияОкончаниеСрезПоследних.Организация
		|			И ПлановыеНачисленияНачалоСрезПоследних.ФизЛицо = ПлановыеНачисленияОкончаниеСрезПоследних.ФизЛицо
		|			И ПлановыеНачисленияНачалоСрезПоследних.ВидРасчета = ПлановыеНачисленияОкончаниеСрезПоследних.ВидРасчета
		|			И ПлановыеНачисленияНачалоСрезПоследних.Регистратор = ПлановыеНачисленияОкончаниеСрезПоследних.ДокументСсылка
		|ГДЕ
		|	НЕ ПлановыеНачисленияНачалоСрезПоследних.Основной
		|	И ПлановыеНачисленияОкончаниеСрезПоследних.Организация ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПлановыеНачисленияНачалоСрезПоследних.ВидРасчета.РеквизитДопУпорядочивания";
	Запрос.УстановитьПараметр("Период", Объект.Период);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ФизЛицо", Объект.ФизЛицо);
	
	Объект.Начисления.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры // ЗаполнитьНачисленияНаСервере()

// Заполняет список удержаний
//
&НаСервере
Процедура ЗаполнитьУдержанияНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлановыеУдержанияСрезПоследних.ВидРасчета,
		|	ИСТИНА КАК Актуальность,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДействияНачисленийУдержаний.НеИзменять) КАК ВидДействия,
		|	ПлановыеУдержанияСрезПоследних.Размер,
		|	ПлановыеУдержанияСрезПоследних.ДокументСсылка
		|ИЗ
		|	РегистрСведений.ПлановыеУдержания.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ФизЛицо = &ФизЛицо) КАК ПлановыеУдержанияСрезПоследних
		|ГДЕ
		|	ПлановыеУдержанияСрезПоследних.Актуальность
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПлановыеУдержанияСрезПоследних.ВидРасчета.РеквизитДопУпорядочивания";
	Запрос.УстановитьПараметр("Период", Объект.Период);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ФизЛицо", Объект.ФизЛицо);
	
	Объект.Удержания.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры // ЗаполнитьУдержанияНаСервере()

#КонецОбласти

#Область УправлениеВнешнимВидом

// Процедура устанавливает видимость и доступность элементов.
//
&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()
	// Только просмотр
	Элементы.СтраницаПриказ.ТолькоПросмотр = НЕ РедактированиеКадровойЧасти;
	Элементы.СтраницаНачисления.ТолькоПросмотр = НЕ РедактированиеРасчетнойЧасти;
	Элементы.СтраницаУдержания.ТолькоПросмотр = НЕ РедактированиеРасчетнойЧасти;
	
	// изменения возможны
	Элементы.ГруппаСообщенияОНевозможностиИзмененияДокумента.Видимость = НЕ ИзмененияВозможны;	
	Элементы.Заполнить.Доступность = ИзмененияВозможны; 
	Элементы.НачисленияЗаполнитьНачисления.Доступность = ИзмененияВозможны; 
	Элементы.УдержанияЗаполнитьУдержания.Доступность = ИзмененияВозможны; 
	ТолькоПросмотр = НЕ ИзмененияВозможны;
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Если Объект.ЗанимаемыхСтавок = 0 Тогда 
		Объект.ЗанимаемыхСтавок = 1;	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда 
		ЗаполнитьПрежниеДанныеПоСотруднику();
	КонецЕсли;
	
	РедактированиеКадровойЧасти = Пользователи.РолиДоступны("ДобавлениеИзменениеПодсистемыПерсонал");
	РедактированиеРасчетнойЧасти = Пользователи.РолиДоступны("ДобавлениеИзменениеПодсистемыЗарплата");
	
	РезультатПроверки = СотрудникиФормы.ПроверитьВозможностьВнесенияКадровыхИзменений(Объект.Ссылка, Объект.Организация, Объект.ФизЛицо, ДатаДокумента);
	ИзмененияВозможны = РезультатПроверки.ИзмененияВозможны;	
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.ФизЛицо) Тогда 
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Сотрудник"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ФизЛицо");
		Возврат;
	КонецЕсли;	
	
	Ответ = Неопределено;
	ТекстВороса = СтрШаблон(НСтр("ru = 'Документ будет перезаполнен по сотруднику ""%1""! Продолжить выполнение операции?'"),	Объект.ФизЛицо);	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект), 
	ТекстВороса, РежимДиалогаВопрос.ДаНет, 0);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНачисления(Команда)
	Если Объект.Начисления.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьНачисления", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Список начислений будет перезаполнен! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		ЗаполнитьНачисленияНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУдержания(Команда)
	Если Объект.Начисления.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьУдержания", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Список удержаний будет перезаполнен! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		ЗаполнитьУдержанияНаСервере();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетСервер.ПроверитьСуществованиеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ФизлицоПриИзменении(Элемент)
	Объект.Начисления.Очистить();
	Объект.Удержания.Очистить();
	ЗаполнитьПоСотруднику();
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();           
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПриИзменении(Элемент)
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();   	
КонецПроцедуры

&НаКлиенте
Процедура РазмерПриИзменении(Элемент)
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		// получаем текущую строку
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		
		// не удалось получить- возвращаемся
		Если СтрокаТабличнойЧасти = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ВидДействия = ПредопределенноеЗначение("Перечисление.ВидыДействияНачисленийУдержаний.Начать");
	КонецЕсли;			
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		// получаем текущую строку
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		
		// не удалось получить- возвращаемся
		Если СтрокаТабличнойЧасти = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		//СтрокаТабличнойЧасти.Актуальность = Истина;
	КонецЕсли;			
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТабличныхЧастей

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоСотруднику();
		// Установить видимость и доступность элементов формы
		УстановитьВидимостьДоступностьЭлементов();           
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьНачисления(Результат, ДополнительныеПараметры) Экспорт
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗаполнитьНачисленияНаСервере();		
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьУдержания(Результат, ДополнительныеПараметры) Экспорт
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗаполнитьУдержанияНаСервере();		
    КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

