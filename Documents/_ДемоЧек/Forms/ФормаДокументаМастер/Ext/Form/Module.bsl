
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;

	ИспользоватьПодключаемоеОборудование = _ДемоПодключаемоеОборудованиеВызовСервера.ИспользоватьПодключаемоеОборудование();
	
	Объект.Кассир = "Казакова Н.А.";
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	СтрокаДисплеяПокупателя = НСтр("ru = 'Добро пожаловать.'");
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:
				|""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Оборудование подключено.'" );
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ВывестиИнформациюНаДисплейПокупателя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Оповестить("ОбновитьСписок");
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда
		МенеджерОборудованияКлиент.НачатьОчисткуДисплеяПокупателя(,УникальныйИдентификатор);
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
		ОповещенияПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(ОповещенияПриОтключении, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Оборудование отключено.'" );
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ФискализироватьЧекВыполнить_Продолжить(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения <> Неопределено И Тип(РезультатВыполнения) = Тип("Структура") Тогда
		ФискализацияЧека(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Пробить чек".
//
&НаКлиенте
Процедура ФискализироватьЧекВыполнить(Команда)
	
	ОчиститьСообщения();
	
	Если Объект.Статус <> ПредопределенноеЗначение("Перечисление._ДемоСтатусыЧековККМ.Фискализирован") Тогда
		
		ПараметрыКоманды = Неопределено;
		Обработчик = Новый ОписаниеОповещения("ФискализироватьЧекВыполнить_Продолжить", ЭтотОбъект, ПараметрыКоманды);
		ОткрытьФорму("Документ._ДемоЧек.Форма.ФормированиеЧека", , ПараметрыКоманды,,,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	Иначе
		ОшибкаПовторнаяФискализацияЧека();
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Отложить".
//
&НаКлиенте
Процедура ОтложитьВыполнить(Команда)
	
	Если ОтложитьЧек() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Функция записывает чек в базу со статусом Отложен.
//
&НаКлиенте
Процедура СохранитьВыполнить(Команда)
	
	ОтложитьЧек();
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопкии "Открыть денежный ящик".
//
&НаКлиенте
Процедура ОткрытьДенежныйЯщик(Команда)
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ОчиститьСообщения();
		МенеджерОборудованияКлиент.НачатьОткрытиеДенежногоЯщика(, УникальныйИдентификатор)
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить демо данными".
//
&НаКлиенте
Процедура ЗаполнитьДемоДанными(Команда)
	
	Если НЕ ЗаполнитьДемоДаннымиНаСервере() Тогда
		ТекстПредупреждения = НСтр("ru = 'Справочник ""Номенклатура"" не заполнен.'");
		ПоказатьПредупреждение(, ТекстПредупреждения, 10);
	Иначе
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Товарный чек".
//
&НаКлиенте
Процедура ПечатьТоварногоЧекаВыполнить(Команда)
	
	ОчиститьСообщения();
	
	Если Объект.Проведен Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьТоварногоЧекаВыполнить_ПолучениеШириныСтроки", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьПолучениеШириныСтрокиПечатающегоУстройства(ОписаниеОповещения, УникальныйИдентификатор); 
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Перед печатью товарного чека необходимо пробить чек.'");
		ПоказатьПредупреждение(, ТекстПредупреждения, 10);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьТоварногоЧекаВыполнить_ПолучениеШириныСтроки(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ШиринаСтроки = РезультатВыполнения.ВыходныеПараметры[0];
		
		ОбщиеПараметры = ПолучитьДанныеЧека();
		Текст = МенеджерОборудованияКлиентСервер.СформироватьТекстНефискальногоЧека(ОбщиеПараметры, ШиринаСтроки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьТоварногоЧекаВыполнить_ВыполнениеКомандыЗавершение", ЭтотОбъект, Параметры);
		МенеджерОборудованияКлиент.НачатьПечатьТекста(ОписаниеОповещения, УникальныйИдентификатор, Текст, РезультатВыполнения.ИдентификаторУстройства);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьТоварногоЧекаВыполнить_ВыполнениеКомандыЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При печати возникла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ОписаниеОшибки%",  РезультатВыполнения.ОписаниеОшибки);
	Иначе
		ТекстСообщения = НСтр("ru = 'Операция завершена.'");
	КонецЕсли;
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьЧекВыполнить(Команда)
	
	ОчиститьСообщения();
	
	Если Объект.Статус <> ПредопределенноеЗначение("Перечисление._ДемоСтатусыЧековККМ.Фискализирован") Тогда
		
		Элементы.ГруппаОперации.Доступность = Ложь;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("АннулироватьЧекВыполнить_Завершение", ЭтотОбъект);
		
		ПараметрыЧека = МенеджерОборудованияКлиентСервер.ПараметрыОперацииАннулированияЧека();
		ПараметрыЧека.ТипРасчета = Объект.ТипОперации;
		
		МенеджерОборудованияКлиент.НачатьАннулированиеЧекаНаФискальномУстройстве(ОписаниеОповещения, УникальныйИдентификатор, ПараметрыЧека);
		 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьЧекВыполнить_Завершение(РезультатВыполнения, Параметры) Экспорт
	
	Элементы.ГруппаОперации.Доступность = Истина;
		
	Если РезультатВыполнения.Результат Тогда
		Если ОтложитьЧек() Тогда
			Закрыть();
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'При печати возникла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ОписаниеОшибки%",  РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением, Объект.ВалютаДокумента);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	УстановитьФункциональныеОпцииФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	УстановитьФункциональныеОпцииФормы();
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля Количество ТЧ Товары.
//
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуРучнойСкидки();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуРучнойСкидки();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	РассчитатьСуммуНалогов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНСППриИзменении(Элемент)
	
	РассчитатьСуммуНалогов();
	
КонецПроцедуры

&НаКлиенте
Процедура БезналичныйРасчетПриИзменении(Элемент)
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл 
		РассчитатьСуммуНалогов(СтрокаТабличнойЧасти);
	КонецЦикла;	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти);
	
	СтрокаДисплеяПокупателя = СтрокаТабличнойЧасти.Номенклатура;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" ТЧ Товары.
//
&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

// Порцедура - обработчик события "ПриИзменении" поля % руч. ТЧ Товары.
//
&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	РассчитатьСуммуРучнойСкидки();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля Сумма руч. ТЧ Товары.
//
&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	
	РассчитатьПроцентРучнойСкидки();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" ТЧ Оплата.
//
&НаКлиенте
Процедура ОплатаПриИзменении(Элемент)
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаСуммаОплатыПриИзменении(Элемент)
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением, ВалютаДокумента)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	ВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаНовая);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервере
Функция ПолучитьДанныеЧека(ПараметрыОперации = Неопределено, ИдентификаторУстройства = Неопределено);
	
	// Подготовка соответствие секций для табличной части.
	ТаблицаТоваровСоответствииСекциям = Новый Соответствие();
	
	_ДемоПодключаемоеОборудованиеВызовСервера.ЗаполнитьСоответствиеСекцийДляТабличнойЧасти(Объект.Товары, ТаблицаТоваровСоответствииСекциям);
	
	// Общие параметры чека
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		НомерСекции = ТаблицаТоваровСоответствииСекциям.Получить(СтрокаТЧ.НомерСтроки);
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		//СтрокаПозицииЧека.ПризнакСпособаРасчета  = СтрокаТЧ.СпособРасчета;
		//СтрокаПозицииЧека.ПризнакПредметаРасчета = СтрокаТЧ.ПредметРасчета;
		СтрокаПозицииЧека.Наименование = Строка(СтрокаТЧ.Номенклатура);
		СтрокаПозицииЧека.Количество   = СтрокаТЧ.Количество;
		СтрокаПозицииЧека.Цена = СтрокаТЧ.Цена;
		СтрокаПозицииЧека.Сумма = СтрокаТЧ.Сумма;
		СтрокаПозицииЧека.НомерСекции = НомерСекции;
		СтрокаПозицииЧека.СуммаСкидок = СтрокаТЧ.СуммаРучнойСкидки;
		СтрокаПозицииЧека.СтавкаНДС = УчетНДСВызовСервера.ПолучитьСтавкуНДС(ДатаДокумента, СтрокаТЧ.СтавкаНДС);
		//СтрокаПозицииЧека.СтавкаНСП = ВернутьСтавкуНСП(СтрокаТЧ.СтавкаНСП);
		СтрокаПозицииЧека.НомерСтрокиТовара = СтрокаТЧ.НомерСтроки;
		СтрокаПозицииЧека.СуммаНДС = СтрокаТЧ.СуммаНДС;
		//СтрокаПозицииЧека.СуммаНСП = СтрокаТЧ.СуммаНСП;
		
		//СтрокаПозицииЧека.ПризнакАгентаПоПредметуРасчета = СтрокаТЧ.Номенклатура.ПризнакАгента;
		//СтрокаПозицииЧека.ДанныеПоставщика.Телефон       = СтрокаТЧ.Номенклатура.ДанныеПоставщикаТелефон;
		//СтрокаПозицииЧека.ДанныеПоставщика.Наименование  = СтрокаТЧ.Номенклатура.ДанныеПоставщикаНаименование;
		//СтрокаПозицииЧека.ДанныеПоставщика.ИНН           = СтрокаТЧ.Номенклатура.ДанныеПоставщикаИНН;
		//СтрокаПозицииЧека.ДанныеАгента.ПлатежныйАгент.Операция = СтрокаТЧ.Номенклатура.ПлатежныйАгентОперация;
		//СтрокаПозицииЧека.ДанныеАгента.ПлатежныйАгент.Телефон  = СтрокаТЧ.Номенклатура.ПлатежныйАгентТелефон;
		//СтрокаПозицииЧека.ДанныеАгента.ОператорПеревода.Телефон      = СтрокаТЧ.Номенклатура.ОператорПереводаТелефон;
		//СтрокаПозицииЧека.ДанныеАгента.ОператорПеревода.Наименование = СтрокаТЧ.Номенклатура.ОператорПереводаНаименование;
		//СтрокаПозицииЧека.ДанныеАгента.ОператорПеревода.Адрес        = СтрокаТЧ.Номенклатура.ОператорПереводаАдрес;
		//СтрокаПозицииЧека.ДанныеАгента.ОператорПеревода.ИНН          = СтрокаТЧ.Номенклатура.ОператорПереводаИНН;
		//СтрокаПозицииЧека.ДанныеАгента.ОператорПоПриемуПлатежей.Телефон = СтрокаТЧ.Номенклатура.ОператорПоПриемуПлатежейТелефон;
		
		//СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ТипМаркировки = СтрокаТЧ.ТипМаркировки;
		//СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.КонтрольныйИдентификационныйЗнак       = СтрокаТЧ.КонтрольныйИдентификационныйЗнак;
		//СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы = СтрокаТЧ.ГлобальныйИдентификаторТорговойЕдиницы;
		//СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.СерийныйНомер = СтрокаТЧ.СерийныйНомер;
		
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	КонецЦикла;
	
	// Итоги
	ДополнитьОбщиеПараметрыЧека(ОбщиеПараметры);
	
	// Подготовка таблицы оплат
	Для Каждого СтрокаТО Из Объект.Оплата Цикл
		СтрокаОплаты  = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
		СтрокаОплаты.ТипОплаты = СтрокаТО.ВидОплаты;
		СтрокаОплаты.Сумма = СтрокаТО.СуммаОплаты;
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЦикла;
	
	//ОбщиеПараметры.ПризнакАгента = Объект.ПризнакАгента;
	//ОбщиеПараметры.ДанныеПоставщика.Телефон       = Объект.ДанныеПоставщикаТелефон;
	//ОбщиеПараметры.ДанныеПоставщика.Наименование  = Объект.ДанныеПоставщикаНаименование;
	//ОбщиеПараметры.ДанныеПоставщика.ИНН           = Объект.ДанныеПоставщикаИНН;
	//ОбщиеПараметры.ДанныеАгента.ПлатежныйАгент.Операция = Объект.ПлатежныйАгентОперация;
	//ОбщиеПараметры.ДанныеАгента.ПлатежныйАгент.Телефон  = Объект.ПлатежныйАгентТелефон;
	//ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Телефон      = Объект.ОператорПереводаТелефон;
	//ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Наименование = Объект.ОператорПереводаНаименование;
	//ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Адрес        = Объект.ОператорПереводаАдрес;
	//ОбщиеПараметры.ДанныеАгента.ОператорПеревода.ИНН          = Объект.ОператорПереводаИНН;
	//ОбщиеПараметры.ДанныеАгента.ОператорПоПриемуПлатежей.Телефон = Объект.ОператорПоПриемуПлатежейТелефон;
	
	// Общие реквизиты для всех типов оборудования.
	ОбщиеПараметры.ТипРасчета          = Объект.ТипОперации;
	ОбщиеПараметры.Кассир              = Объект.Кассир;
	ОбщиеПараметры.ОрганизацияНазвание = Объект.Организация.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН      = Объект.Организация.ИНН;
	ОбщиеПараметры.ОрганизацияКПП      = "";
	//ОбщиеПараметры.АдресРасчетов       = "г.Москва, Дмитровское ш. д.9";
	//ОбщиеПараметры.МестоРасчетов       = "Северное крыло, комната 9441";
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.НомерКассы = "";
	ОбщиеПараметры.НомерЧека  = Объект.Номер;
	ОбщиеПараметры.НомерСмены = 1;
	// Новые параметры для ККТ по ФЗ-54
	//ОбщиеПараметры.ОтправительEmail  = "info@1c.ru";
	Если ПараметрыОперации <> Неопределено Тогда
		ОбщиеПараметры.Электронно = НЕ ПараметрыОперации.Печать;
		Если ПараметрыОперации.Свойство("ПокупательEmail") И Не ПустаяСтрока(ПараметрыОперации.Свойство("ПокупательEmail")) Тогда
			ОбщиеПараметры.ПокупательEmail   = ПараметрыОперации.ПокупательEmail;
			ОбщиеПараметры.Отправляет1СEmail = ПараметрыОперации.ОтправлятьСредствами1С;
		КонецЕсли;
		Если ПараметрыОперации.Свойство("ПокупательНомер") И Не ПустаяСтрока(ПараметрыОперации.Свойство("ПокупательНомер")) Тогда
			ОбщиеПараметры.ПокупательНомер = ПараметрыОперации.ПокупательНомер;
			ОбщиеПараметры.Отправляет1СSMS = ПараметрыОперации.ОтправлятьСредствами1С;
		КонецЕсли;
	Иначе
		ОбщиеПараметры.Электронно = Ложь;
	КонецЕсли;
	
	//ОбщиеПараметры.СистемаНалогообложения = Объект.СистемаНалогообложения;
	ОбщиеПараметры.ИндивидуальныйРежимПодготовкиДанныхКПередачеВОФД = Истина;
	
	//Если ИдентификаторУстройства <> Неопределено Тогда
	//	РеквизитыОборудования  = ФорматноЛогическийКонтрольВызовСервера.СтруктураДанныхФорматноЛогическогоКонтроля(ИдентификаторУстройства);
	//	ОбщиеПараметры.СпособФорматноЛогическогоКонтроля = РеквизитыОборудования.СпособФорматноЛогическогоКонтроля;
	//	ОбщиеПараметры.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = РеквизитыОборудования.ДопустимоеРасхождениеФорматноЛогическогоКонтроля;
	//Иначе
	//	ОбщиеПараметры.СпособФорматноЛогическогоКонтроля = Перечисления.СпособыФорматноЛогическогоКонтроля.РазделятьСтроки;
	//КонецЕсли;
	
	Возврат ОбщиеПараметры;
	
КонецФункции

&НаКлиенте
Процедура ФискализацияЧека_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыполнения.ПродолжитьПечать = Истина;
	
	АдресЧека = "21341234123412341234123412341232134123412341234123412341234123";
	// ПодписьЧека = "1234132412341233465447656546415466546965466535454312341324123412334654476565464154665469654665354543";
 	ПодписьЧека = АдресЧека;
 
	ПараметрыВыполнения.Вставить("АдресЧека", АдресЧека);
	ПараметрыВыполнения.Вставить("ПодписьЧека", ПодписьЧека);
	ПараметрыВыполнения.Вставить("ИНН", "23452352");
	ПараметрыВыполнения.Вставить("КПП", "23452352");
	ПараметрыВыполнения.Вставить("НаименованиеОрганизации", "ООО ""РОСИЙСКИЕ ТЕХНОЛОГИИ""");
	
	Если Не ПараметрыВыполнения.ПродолжитьПечать Тогда 
		ПараметрыВыполнения.ОписаниеОшибки = НСтр("ru = 'При подписи чека произошла ошибка.'");
	КонецЕсли;
		
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФискализацияЧека_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Доступность = Ложь;
	
	Расчет = Истина;
	ВывестиИнформациюНаДисплейПокупателя();
	
	ОбщиеПараметры = ПолучитьДанныеЧека(Параметры, ИдентификаторУстройства);
	
	Если Объект.ЕГАИС Тогда
		ПослеОткрытияЧека = Новый ОписаниеОповещения("ФискализацияЧека_ПослеОткрытияЧека", ЭтотОбъект, ОбщиеПараметры);
	Иначе
		ПослеОткрытияЧека = Неопределено;
	КонецЕсли;
	
	ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры, ИдентификаторУстройства);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ФискализацияЧека_Завершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(ОписаниеОповещения, УникальныйИдентификатор, ОбщиеПараметры, ИдентификаторУстройства, , ПослеОткрытияЧека);
	
КонецПроцедуры

&НаКлиенте
Процедура ФискализацияЧека(Параметры) Экспорт
	
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
	//ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
	
	ПослеВыбратьУстройство = Новый ОписаниеОповещения("ФискализацияЧека_ВыбратьУстройствоЗавершение", ЭтотОбъект, Параметры);
	МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ПослеВыбратьУстройство, ПоддерживаемыеТипыВО,
			НСтр("ru='Выберите фискальное устройство'"),
			НСтр("ru='Фискальное устройство не подключено.'"), 
			НСтр("ru='Фискальное устройство не выбрано.'"), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ФискализацияЧека_Завершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		// Установить полученное значение номера чека реквизиту документа.
		Объект.НомерСменыККМ = РезультатВыполнения.ВыходныеПараметры[0];
		Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		
		Объект.Статус = ПредопределенноеЗначение("Перечисление._ДемоСтатусыЧековККМ.Фискализирован");
		Объект.Дата = МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса();
		Если Не ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Объект.НомерЧекаККМ = 1;
		КонецЕсли;
			
		ПараметрыЗаписи = Новый Структура("РежимЗаписи, РежимПроведения",
		РежимЗаписиДокумента.Проведение,
		РежимПроведенияДокумента.Оперативный);
		Если ЗаписатьДокументНаСервере(ПараметрыЗаписи) Тогда
			Оповестить("ОбновитьСписок");
			Элементы.ГруппаШапка.ТолькоПросмотр = Истина;
			Элементы.Страницы.ТолькоПросмотр = Истина;
			Элементы.ФискализацияЧека.Доступность = Ложь;
			Элементы.Отложить.Доступность = Ложь;
			Элементы.АннулироватьЧек.Доступность = Ложь;
			Элементы.ТоварыГруппаКнопок.Видимость = Ложь; 
			Элементы.ОплатаНаличныеБезСдачи.Видимость= Ложь; 
		Иначе
			ТекстСообщения = НСтр("ru = 'Ошибка записи документа'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	Иначе
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Дата", ДатаДокумента);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("СуммаВключаетНалоги", Истина);
	СтруктураДанные.Вставить("СтавкаНДС", СтрокаТабличнойЧасти.СтавкаНДС);
	СтруктураДанные.Вставить("СтавкаНСП", СтрокаТабличнойЧасти.СтавкаНСП);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

	// Заполнение по данным номенклатуры
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента, 
		Объект.Организация, 
		Истина, 
		СтрокаТабличнойЧасти.СтавкаНДС, 
		СтрокаТабличнойЧасти.СтавкаНСП, 
		Объект.БезналичныйРасчет);
КонецПроцедуры	

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Цены 
	СтруктураДанные.Вставить("ТипЦен", Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию("Розничная"));
	СтруктураДанные.Вставить("ВалютаДокумента", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Цена = БухгалтерскийУчетСервер.ПолучитьЦенуНоменклатуры(СтруктураДанные);
	СтруктураДанные.Вставить("Цена", Цена);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Процедура рассчитывает сумму ручной скидки по проценту.
//
&НаКлиенте
Процедура РассчитатьСуммуРучнойСкидки()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока.Цена * ТекущаяСтрока.Количество * (ТекущаяСтрока.ПроцентРучнойСкидки/100),2);
	ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.Количество - ТекущаяСтрока.СуммаРучнойСкидки;
	
	РассчитатьСуммуНалогов();
	
КонецПроцедуры

// Процедура рассчитывает процент ручной скидки по сумме скидки.
//
&НаКлиенте
Процедура РассчитатьПроцентРучнойСкидки()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СуммаСтр = ТекущаяСтрока.Цена * ТекущаяСтрока.Количество;
	Если ТекущаяСтрока.СуммаРучнойСкидки > СуммаСтр Тогда
		ТекущаяСтрока.СуммаРучнойСкидки = 0;
		ТекущаяСтрока.ПроцентРучнойСкидки = 0;
		ТекущаяСтрока.Сумма = СуммаСтр;
		Текст = НСтр("ru = 'Сумма ручной скидки не может превышать стоимость'");
		ПоказатьПредупреждение(, Текст, 10);
	Иначе
		ТекущаяСтрока.ПроцентРучнойСкидки = (ТекущаяСтрока.СуммаРучнойСкидки/СуммаСтр)*100;
		ТекущаяСтрока.Сумма = СуммаСтр - ТекущаяСтрока.СуммаРучнойСкидки;
	КонецЕсли;
	
	РассчитатьСуммуНалогов();
	
КонецПроцедуры

// Процедура обновляет информацию о текущем состоянии документа.
//
&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма");
	Объект.СуммаСкидки = Объект.Товары.Итог("СуммаРучнойСкидки");
	Объект.СуммаБезСкидки = Объект.СуммаДокумента + Объект.СуммаСкидки;
	Объект.СуммаНДС = Объект.Товары.Итог("СуммаНДС");
	Объект.СуммаНСП = Объект.Товары.Итог("СуммаНСП");
	Объект.СуммаОплаты = Объект.Оплата.Итог("СуммаОплаты");
	
	Сдача = Объект.СуммаОплаты - Объект.СуммаДокумента;
	Если Сдача > 0 Тогда
		Объект.Сдача = Сдача;
	Иначе
		Объект.Сдача = 0;
	КонецЕсли;
	
	ВывестиИнформациюНаДисплейПокупателя();
	
КонецПроцедуры

// Процедура вывода информации на дисплей покупателя.
//
&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателя()
	
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда
		Возврат;
	КонецЕсли;
	
	ФорматнаяСтрока = "ЧДЦ=2; ЧРГ=' '; ЧН=0.00; ЧГ=0";
	ДлинаТекста     = 20;
	
	ДПТекст1 = "";
	ДПТекст2 = "";
	
	Если Расчет Тогда
		
		ДПТекст1 = ?(
		Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		"",
		Лев(" К ОПЛАТЕ: " + Формат(Объект.СуммаДокумента, ФорматнаяСтрока), ДлинаТекста));
		
		Доплата = Объект.СуммаДокумента - Объект.СуммаОплаты;
		
		ДПТекст2 = ?(
		Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		"",
		Лев(НСтр("ru='    СДАЧА: '") + Формат(Объект.Сдача, ФорматнаяСтрока), ДлинаТекста));
		
	Иначе
		
		ДПТекст1 = ?(
		Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		"",
		Лев(СтрокаДисплеяПокупателя, ДлинаТекста));
		
		ДПТекст2 = ?(
		Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		"",
		Лев(НСтр("ru='ИТОГО: '") + Формат(Объект.СуммаДокумента, ФорматнаяСтрока), ДлинаТекста));
		
	КонецЕсли;
	
	Пока СтрДлина(ДПТекст1) < ДлинаТекста Цикл
		ДПТекст1 = ДПТекст1 + " ";
	КонецЦикла;
		
	Пока СтрДлина(ДПТекст2) < ДлинаТекста Цикл
		ДПТекст2 = ДПТекст2 + " ";
	КонецЦикла;
	
	МенеджерОборудованияКлиент.НачатьВыводИнформацииНаДисплейПокупателя(,УникальныйИдентификатор,, ДПТекст1 + Символы.ПС + ДПТекст2);
	
	//Если НЕ Результат Тогда
	//		ТекстСообщения = НСтр("ru = 'При использовании дисплея покупателя произошла ошибка.
	//			|Дополнительное описание: %ДополнительноеОписание%'");
	//		ТекстСообщения = СтрЗаменить(ТекстСообщения,
	//			"%ДополнительноеОписание%",
	//			ВыходныеПараметры[1]);
	//		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	//КонецЕсли;
	
КонецПроцедуры

// Процедура выводит предупреждение о невозможности повторной печати чека.
//
&НаКлиенте
Процедура ОшибкаПовторнаяФискализацияЧека()
	
	ТекстПредупреждения = НСтр("ru = 'Чек уже фискализирован на фискальном устройстве'");
	ПоказатьПредупреждение(, ТекстПредупреждения, 10);
	
КонецПроцедуры

// Функция записывает чек в базу со статусом Отложен и закрывает документ.
//
&НаКлиенте
Функция ОтложитьЧек()
	
	Результат = Истина;
	Если НЕ Объект.Проведен Тогда
		Объект.СуммаОплаты = 0;
		Объект.Статус = ПредопределенноеЗначение("Перечисление._ДемоСтатусыЧековККМ.Отложен");
		ПараметрыЗаписи = Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Запись);
		Если НЕ ЗаписатьДокументНаСервере(ПараметрыЗаписи) Тогда
			Результат = Ложь;
			ТекстСообщения = НСтр("ru = 'Ошибка записи документа'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Оповестить("ОбновитьСписок");
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		ОшибкаПовторнаяФискализацияЧека();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура рассчитывает сумму налогов по ставке для текущей строки в ТЧ Товары.
//
&НаКлиенте
Процедура РассчитатьСуммуНалогов(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента, 
		Объект.Организация, 
		Истина, 
		СтрокаТабличнойЧасти.СтавкаНДС, 
		СтрокаТабличнойЧасти.СтавкаНСП, 
		Объект.БезналичныйРасчет);
	
КонецПроцедуры

// Процедура устанавливает функциональные опции формы документа.
//
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма, Объект.Организация, ДатаДокумента);
КонецПроцедуры

&НаСервере
Процедура ДополнитьОбщиеПараметрыЧека(ОбщиеПараметры)

	ТаблицаНалоги = Объект.Товары.Выгрузить(,"СтавкаНДС, СтавкаНСП, СуммаНДС, СуммаНСП");
	
	// Добавление НДС.
	ТаблицаНДС = ТаблицаНалоги.Скопировать(,"СтавкаНДС, СуммаНДС");
	ТаблицаНДС.Свернуть("СтавкаНДС", "СуммаНДС"); 
	
	МассивИтогНДС = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаНДС Цикл
		Если НЕ СтрокаТаблицы.СуммаНДС = 0 Тогда
			ЗначениеСтавкиНДС = УчетНДСВызовСервера.ПолучитьСтавкуНДС(ДатаДокумента, СтрокаТаблицы.СтавкаНДС);

			Текст = НСтр("ru = 'В том числе НДС %СтавкаНДС%% %СуммаНДС%'");
			Текст = СтрЗаменить(Текст, "%СтавкаНДС%", ЗначениеСтавкиНДС); 
			Текст = СтрЗаменить(Текст, "%СуммаНДС%", СтрокаТаблицы.СуммаНДС); 
			СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека(Текст);
			ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);			
		КонецЕсли;	
	КонецЦикла;	
	
	// Добавление НСП.
	ТаблицаНСП = ТаблицаНалоги.Скопировать(,"СтавкаНСП, СуммаНСП");
	ТаблицаНСП.Свернуть("СтавкаНСП", "СуммаНСП"); 
	МассивИтогНСП = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаНСП Цикл 
		Если НЕ СтрокаТаблицы.СуммаНСП = 0 Тогда 
			ЗначениеСтавкиНСП = УчетНДСВызовСервера.ПолучитьСтавкуНСП(ДатаДокумента, Объект.Организация, СтрокаТаблицы.СтавкаНСП);	
			
			Текст = НСтр("ru = 'В том числе НСП %СтавкаНСП%% %СуммаНСП%'");
			Текст = СтрЗаменить(Текст, "%СтавкаНСП%", ЗначениеСтавкиНСП); 
			Текст = СтрЗаменить(Текст, "%СуммаНСП%", СтрокаТаблицы.СуммаНСП); 
			СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека(Текст);
			ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);			
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры // ДополнитьОбщиеПараметрыЧека()

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Функция записи и проведения документа.
//
&НаСервере
Функция ЗаписатьДокументНаСервере(ПараметрыЗаписи)
	
	Попытка
		Результат = Записать(ПараметрыЗаписи);
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось провести документ'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция заполняет ТЧ Товары данными из справочника Номенклатура.
//
&НаСервере
Функция ЗаполнитьДемоДаннымиНаСервере()
	
	Результат = _ДемоПодключаемоеОборудованиеВызовСервера.ВыбратьДемоДанные(ДатаДокумента, Объект.Организация, Объект.БезналичныйРасчет);
	Если Результат.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Объект.Товары.Загрузить(Результат);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура НаличныеБезСдачи(Команда)
	
	Объект.Оплата.Очистить();
	Строка = Объект.Оплата.Добавить();
	Строка.ВидОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные");
	Строка.СуммаОплаты = Объект.Товары.Итог("Сумма");
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

#КонецОбласти