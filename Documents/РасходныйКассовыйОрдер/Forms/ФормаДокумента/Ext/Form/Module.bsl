#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Контрагент = Объект.Контрагент;
	ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	// Курсы взаиморасчетов.
	ВалютаРасчетовКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаРасчетов, ДатаДокумента);
	КурсВзаиморасчетов = ВалютаРасчетовКурсКратность.Курс;
	КратностьВзаиморасчетов = ВалютаРасчетовКурсКратность.Кратность;
	
	// Одной строкой / Списком.
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Объект.РасшифровкаПлатежа.Добавить();
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = КурсВзаиморасчетов;
		СтрокаТабличнойЧасти.КратностьВзаиморасчетов = КратностьВзаиморасчетов;
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
	Иначе
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	// Связь Субконто со счетом.
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПрочиеПлатежи Цикл							 
		БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетРасчетов", "ПрочиеПлатежи", СтрокаТабличнойЧасти, ПоляОбъекта);
	КонецЦикла;
	
	УстановитьДополнительныеСвязиПараметровВыбора();
	УстановитьФункциональныеОпцииФормы();	
	БухгалтерскийУчетСервер.ОпределитьТипПоследнегоОткрытогоДокумента(Объект);	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
									"Субконто1", "Субконто2", "Субконто3");
									
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПрочиеПлатежи Цикл							 
		БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетРасчетов", "ПрочиеПлатежи", СтрокаТабличнойЧасти, ПоляОбъекта);
	КонецЦикла;		
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ОповещениеОбИзмененииДолга");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды РедактироватьСписком.
//
&НаКлиенте
Процедура РедактироватьСписком(Команда)
	
	УстановитьВозможностьРедактированияСписком();
	
КонецПроцедуры // РедактироватьСписком()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если НЕ Объект.ВалютаРасчетов = Объект.ВалютаДокумента Тогда 
			ТекстСообщение = НСтр("ru = 'Изменилась дата документа.
					|Возможно, необходимо обновить курсы и пересчитать сумму документа.'") + Символы.ПС + Символы.ПС;
			ТекстСообщение = ТекстСообщение + НСтр("ru = 'Пересчитать документ?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ОтветНаВопросДатаПриИзменении", ЭтотОбъект), ТекстСообщение, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер = "";
	Объект.Касса = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнуюКассуОрганизации(Объект.Организация);
	ОбработатьИзменениеКассы();
	
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	УстановитьФункциональныеОпцииФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Вид операции.
//
&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	ОбновитьРеквизиты();
	УстановитьВидимостьДоступностьЭлементов(); 
	УстановитьДополнительныеСвязиПараметровВыбора();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении();
		
		Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
		ОбработатьИзменениеДоговора();
		
	Иначе
		Объект.ДоговорКонтрагента = ДоговорКонтрагента; // Восстанавливаем автоматически очищеный договор.
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов()
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор контрагента.
//
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ОбработатьИзменениеДоговора();
	УстановитьВидимостьДоступностьЭлементов()
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Касса.
//
&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	ОбработатьИзменениеКассы();
	УстановитьВидимостьДоступностьЭлементов()
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ФизЛицо.
//
&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	ДанныеДляПечати = ПолучитьДанныеДляПечати(Объект.ФизЛицо, Объект.Организация, ДатаДокумента);
	Объект.Выдать = ДанныеДляПечати.Выдать;
	Объект.ПоДокументу = ДанныеДляПечати.ПоДокументу;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Банковский счет.
//
&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	ДанныеДляПечати = ПолучитьДанныеДляПечати(Объект.БанковскийСчет);
	Объект.Выдать = ДанныеДляПечати.Выдать;
	Объект.ПоДокументу = ДанныеДляПечати.ПоДокументу;
	
	ОбработатьИзменениеБанковскогоСчетаОрганизации();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	ДанныеВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаРасчетов, СтрокаТабличнойЧасти.КурсВзаиморасчетов, СтрокаТабличнойЧасти.КратностьВзаиморасчетов);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти,
		ДанныеДокумента,
		ДанныеВзаиморасчетов,
		ВалютаРегламентированногоУчета);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	ДанныеВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаРасчетов, СтрокаТабличнойЧасти.КурсВзаиморасчетов, СтрокаТабличнойЧасти.КратностьВзаиморасчетов);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти,
		ДанныеДокумента,
		ДанныеВзаиморасчетов,
		ВалютаРегламентированногоУчета);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКратностьВзаиморасчетовПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	ДанныеВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаРасчетов, СтрокаТабличнойЧасти.КурсВзаиморасчетов, СтрокаТабличнойЧасти.КратностьВзаиморасчетов);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти,
		ДанныеДокумента,
		ДанныеВзаиморасчетов,
		ВалютаРегламентированногоУчета);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	ДанныеВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаРасчетов, СтрокаТабличнойЧасти.КурсВзаиморасчетов, СтрокаТабличнойЧасти.КратностьВзаиморасчетов);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьКурсВзаиморасчетовСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти,
		ДанныеДокумента,
		ДанныеВзаиморасчетов,
		ВалютаРегламентированногоУчета);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежа1ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	ДанныеВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаРасчетов, СтрокаТабличнойЧасти.КурсВзаиморасчетов, СтрокаТабличнойЧасти.КратностьВзаиморасчетов);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти,
		ДанныеДокумента,
		ДанныеВзаиморасчетов,
		ВалютаРегламентированногоУчета);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетов1ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	ДанныеВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаРасчетов, СтрокаТабличнойЧасти.КурсВзаиморасчетов, СтрокаТабличнойЧасти.КратностьВзаиморасчетов);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти,
		ДанныеДокумента,
		ДанныеВзаиморасчетов,
		ВалютаРегламентированногоУчета);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКратностьВзаиморасчетов1ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	ДанныеВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаРасчетов, СтрокаТабличнойЧасти.КурсВзаиморасчетов, СтрокаТабличнойЧасти.КратностьВзаиморасчетов);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти,
		ДанныеДокумента,
		ДанныеВзаиморасчетов,
		ВалютаРегламентированногоУчета);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетов1ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	ДанныеВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаРасчетов, СтрокаТабличнойЧасти.КурсВзаиморасчетов, СтрокаТабличнойЧасти.КратностьВзаиморасчетов);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьКурсВзаиморасчетовСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти,
		ДанныеДокумента,
		ДанныеВзаиморасчетов,
		ВалютаРегламентированногоУчета);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрочиеПлатежи

&НаКлиенте
Процедура ПрочиеПлатежиПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеПлатежиСуммаПлатежаПриИзменении(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеПлатежиСчетРасчетовПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ПрочиеПлатежи.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "Субконто1", "Субконто2", "Субконто3");
	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетРасчетов", "ПрочиеПлатежи", СтрокаТабличнойЧасти, ПоляОбъекта);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеПлатежиСубконто1ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ПрочиеПлатежи.ТекущиеДанные;
	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетРасчетов", "ПрочиеПлатежи", СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеПлатежиСубконто2ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ПрочиеПлатежи.ТекущиеДанные;
	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетРасчетов", "ПрочиеПлатежи", СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеПлатежиСубконто3ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ПрочиеПлатежи.ТекущиеДанные;
	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетРасчетов", "ПрочиеПлатежи", СтрокаТабличнойЧасти);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыплатаЗаработнойПлаты

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыСуммаПлатежаПриИзменении(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросУстановитьВозможностьРедактированияСписком(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Элементы.РедактироватьСписком.Пометка = Истина;
        Возврат;
    КонецЕсли;
	
	КоличествоСтрок = ДополнительныеПараметры.КоличествоСтрок;
	
	// удаление строк в обратном порядке
    Пока КоличествоСтрок > 1 Цикл
        Объект.РасшифровкаПлатежа.Удалить(Объект.РасшифровкаПлатежа[КоличествоСтрок - 1]);
        КоличествоСтрок = КоличествоСтрок - 1;
    КонецЦикла;
    Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
    
    УстановитьВозможностьРедактированияСпискомФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросДатаПриИзменении(Результат, ДополнительныеПараметры) Экспорт
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
		УстановитьКурсВалютыДокумента();
    КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()
	// Одной строкой / Списком.
	КоличествоСтрок = Объект.РасшифровкаПлатежа.Количество();
	Элементы.РедактироватьСписком.Пометка = КоличествоСтрок > 1;
	УстановитьВозможностьРедактированияСпискомФрагмент();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоЗаймам") Тогда 
		
		Элементы.Контрагент.Видимость = Истина;
		Элементы.ДоговорКонтрагента.Видимость = Истина;
		Элементы.СчетРасчетов.Видимость = Истина;
		Элементы.БанковскийСчет.Видимость = Ложь;
		Элементы.БанковскийСчетСчетУчета.Видимость = Ложь;
		Элементы.ФизЛицо.Видимость = Ложь;
		
		Элементы.РедактироватьСписком.Видимость = Истина;
		Элементы.СтраницаРасшифровкаПлатежа.Видимость = Истина;
		Элементы.СтраницаВыплатаЗаработнойПлаты.Видимость = Ложь;
		Элементы.СтраницаПрочиеПлатежи.Видимость = Ложь;
		
		Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств.Видимость = Истина;		
		Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств1.Видимость = Истина;		
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаПодотчетнику") Тогда 
		
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.СчетРасчетов.Видимость = Истина;
		Элементы.БанковскийСчет.Видимость = Ложь;
		Элементы.БанковскийСчетСчетУчета.Видимость = Ложь;
		Элементы.ФизЛицо.Видимость = Истина;
		
		Элементы.РедактироватьСписком.Видимость = Истина;
		Элементы.СтраницаРасшифровкаПлатежа.Видимость = Истина;
		Элементы.СтраницаВыплатаЗаработнойПлаты.Видимость = Ложь;
		Элементы.СтраницаПрочиеПлатежи.Видимость = Ложь;
		
		Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств.Видимость = Истина;		
		Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств1.Видимость = Истина;		
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗП") Тогда 
		
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.СчетРасчетов.Видимость = Ложь;
		Элементы.БанковскийСчет.Видимость = Ложь;
		Элементы.БанковскийСчетСчетУчета.Видимость = Ложь;
		Элементы.ФизЛицо.Видимость = Ложь;
		
		Элементы.РедактироватьСписком.Видимость = Ложь;
		Элементы.СтраницаРасшифровкаПлатежа.Видимость = Ложь;
		Элементы.СтраницаВыплатаЗаработнойПлаты.Видимость = Истина;
		Элементы.СтраницаПрочиеПлатежи.Видимость = Ложь;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносВБанк") Тогда
		
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.СчетРасчетов.Видимость = Ложь;
		Элементы.БанковскийСчет.Видимость = Истина;
		Элементы.БанковскийСчетСчетУчета.Видимость = Истина;
		Элементы.ФизЛицо.Видимость = Ложь;
		
		Элементы.СтраницаРасшифровкаПлатежа.Видимость = Истина;
		Элементы.СтраницаВыплатаЗаработнойПлаты.Видимость = Ложь;
		Элементы.СтраницаПрочиеПлатежи.Видимость = Ложь;
		
		Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств.Видимость = Ложь;		
		Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств1.Видимость = Ложь;		
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.Инкассация") Тогда
		
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.СчетРасчетов.Видимость = Ложь;
		Элементы.БанковскийСчет.Видимость = Ложь;
		Элементы.БанковскийСчетСчетУчета.Видимость = Ложь;
		Элементы.ФизЛицо.Видимость = Ложь;
		
		Элементы.СтраницаРасшифровкаПлатежа.Видимость = Истина;
		Элементы.СтраницаВыплатаЗаработнойПлаты.Видимость = Ложь;
		Элементы.СтраницаПрочиеПлатежи.Видимость = Ложь;
		
		Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств.Видимость = Ложь;		
		Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств1.Видимость = Ложь;		

	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ПрочийРасход") Тогда
		
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.СчетРасчетов.Видимость = Ложь;
		Элементы.БанковскийСчет.Видимость = Ложь;
		Элементы.БанковскийСчетСчетУчета.Видимость = Ложь;
		Элементы.ФизЛицо.Видимость = Ложь;
		
		Элементы.СтраницаРасшифровкаПлатежа.Видимость = Ложь;
		Элементы.СтраницаВыплатаЗаработнойПлаты.Видимость = Ложь;
		Элементы.СтраницаПрочиеПлатежи.Видимость = Истина;
		
	КонецЕсли;
	
	// Расчет не в валюте договора.	
	Если ЗначениеЗаполнено(Объект.ВалютаДокумента)
		И ЗначениеЗаполнено(Объект.ВалютаРасчетов)
		И ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И НЕ Объект.ВалютаРасчетов = Объект.ВалютаДокумента Тогда		
		Элементы.РасшифровкаПлатежаКурсВзаиморасчетов.Видимость = Истина;		
		Элементы.РасшифровкаПлатежаКратностьВзаиморасчетов.Видимость = Истина;
		Элементы.РасшифровкаПлатежаКурсВзаиморасчетов1.Видимость = Истина;		
		Элементы.РасшифровкаПлатежаКратностьВзаиморасчетов1.Видимость = Истина;
		Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость = Истина;		
		Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов1.Видимость = Истина;
		Элементы.ВалютаРасчетов.Видимость = Истина;
	Иначе 
		Элементы.РасшифровкаПлатежаКурсВзаиморасчетов.Видимость = Ложь;		
		Элементы.РасшифровкаПлатежаКратностьВзаиморасчетов.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаКурсВзаиморасчетов1.Видимость = Ложь;		
		Элементы.РасшифровкаПлатежаКратностьВзаиморасчетов1.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость = Ложь;		
		Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов1.Видимость = Ложь;
		Элементы.ВалютаРасчетов.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Итог("КратностьВзаиморасчетов") > Объект.РасшифровкаПлатежа.Количество() Тогда
		Элементы.РасшифровкаПлатежаКратностьВзаиморасчетов.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаКратностьВзаиморасчетов1.Видимость = Ложь;
	Иначе 
		Элементы.РасшифровкаПлатежаКратностьВзаиморасчетов.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаКратностьВзаиморасчетов1.Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()  

// Процедура устанавливает функциональные опции формы документа.
//
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма, Объект.Организация, ДатаДокумента);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизиты()

	Объект.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	Объект.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	Объект.БанковскийСчет = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
	Объект.ФизЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
	Объект.ВалютаРасчетов = Объект.ВалютаДокумента;

	КурсВзаиморасчетов = Объект.Курс;
	КратностьВзаиморасчетов = Объект.Кратность;
	
	// Заполнение по умолчанию.
	ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоУмолчанию(Объект.ВидОперации);	
	Объект.СчетРасчетов = ДанныеДляЗаполнения.СчетРасчетов;
КонецПроцедуры // ОбновитьРеквизиты()

// Получает набор данных с сервера для процедуры ОбновитьРеквизиты.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДляЗаполненияПоУмолчанию(ВидОперации)
	
	СтруктураДанные = Новый Структура;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетнику Тогда 
		СтруктураДанные.Вставить(
			"СчетРасчетов",
			ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоЗаймам Тогда 	
		СтруктураДанные.Вставить(
			"СчетРасчетов",
			ПланыСчетов.Хозрасчетный.НачисленныеОбязательстваПоОплатеТоваровИУслуг); // 3510
	Иначе 	
		СтруктураДанные.Вставить(
			"СчетРасчетов",
			ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДляЗаполненияПоУмолчанию()

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Устанавливает дополнительные связи параметров выбора.
//
&НаСервере
Процедура УстановитьДополнительныеСвязиПараметровВыбора()
	// Договор контрагента.
	Если БухгалтерскийУчетСервер.УчетРасчетовВВалютеДоговора() Тогда 
		НовыйМассив = Новый Массив();
		
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент");	    
		НовыйМассив.Добавить(НоваяСвязь);			
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация");	    
		НовыйМассив.Добавить(НоваяСвязь);		
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.ВалютаРасчетов", "Объект.ВалютаДокумента");	    
		НовыйМассив.Добавить(НоваяСвязь);		

		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ДоговорКонтрагента.СвязиПараметровВыбора = НовыеСвязи;	
	КонецЕсли;
КонецПроцедуры // УстановитьДополнительныеСвязиПараметровВыбора()

// Процедура - устанавливает возможность редактирования списком.
//
&НаКлиенте
Процедура УстановитьВозможностьРедактированияСписком()
	
	Элементы.РедактироватьСписком.Пометка = НЕ Элементы.РедактироватьСписком.Пометка;
	
	КоличествоСтрок = Объект.РасшифровкаПлатежа.Количество();
	
	Если НЕ Элементы.РедактироватьСписком.Пометка
		И КоличествоСтрок > 1 Тогда
		  
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросУстановитьВозможностьРедактированияСписком", ЭтотОбъект, Новый Структура("КоличествоСтрок", КоличествоСтрок));
		ТекстВопроса = НСтр("ru = 'Все строки кроме первой будут удалены! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		УстановитьВозможностьРедактированияСпискомФрагмент();
	КонецЕсли;
КонецПроцедуры

// Процедура - устанавливает возможность редактирования списком (продолжение).
//
&НаКлиенте
Процедура УстановитьВозможностьРедактированияСпискомФрагмент()
    Если Элементы.РедактироватьСписком.Пометка Тогда
        Элементы.СтраницыСтрокойСписком.ТекущаяСтраница = Элементы.Списком;
    Иначе
        Элементы.СтраницыСтрокойСписком.ТекущаяСтраница = Элементы.ОднаСтрока;
    КонецЕсли;
КонецПроцедуры // УстановитьВозможностьРедактированияСписком()

// Процедура - устанавливает курс документа на дату.
//
&НаСервере
Процедура УстановитьКурсВалютыДокумента()
	Объект.Курс = 1;	
	Объект.Кратность = 1;	

	ВалютаДокумента = Объект.БанковскийСчет.ВалютаДенежныхСредств;
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
		Объект.Курс = КурсВалюты.Курс;
		Объект.Кратность = КурсВалюты.Кратность;
			
		Если НЕ ЗначениеЗаполнено(Объект.Курс) Тогда
			Объект.Курс = 1;	
			Объект.Кратность = 1;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВалютаРасчетов) Тогда
			КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаРасчетов, ДатаДокумента);
			Курс = КурсВалюты.Курс;	
			Кратность = КурсВалюты.Кратность;	
			Если НЕ ЗначениеЗаполнено(Курс) Тогда
				Курс = 1;	
				Кратность = 1;	
			КонецЕсли;
			
			ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность", 
				Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
			ДанныеВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", 
				Объект.ВалютаРасчетов, Курс, Кратность);
			
			ОбработкаТабличныхЧастейКлиентСервер.УстановитьКурсыВзаиморасчетовТабличнойЧасти(
				Объект,
				"РасшифровкаПлатежа",
				ДанныеДокумента,
				ДанныеВзаиморасчетов,
				ВалютаРегламентированногоУчета);
				
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовТабличнойЧасти(
				Объект, 
				"РасшифровкаПлатежа",
				ДанныеДокумента,
				ДанныеВзаиморасчетов,
				ВалютаРегламентированногоУчета);
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры // УстановитьКурсВалютыДокумента()

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении()
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанию.
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеДоговора()
	
	ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(ДатаДокумента, Объект.ДоговорКонтрагента, Объект.ВидОперации);

	// Обработка изменения валюты.
	СтруктураКурсыПред = Новый Структура("Валюта", Объект.ВалютаРасчетов);
	Объект.ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
	КурсВзаиморасчетов = СтруктураДанные.ВалютаРасчетовКурсКратность.Курс;
	КратностьВзаиморасчетов = СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность;
	СтруктураКурсы = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаРасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов);
	
	// Обработка изменения отражения в учете.
	Объект.СчетРасчетов = СтруктураДанные.СчетРасчетов;
	
	// Вопрос изменения
	ИзмениласьВалютаРасчетов = СтруктураКурсыПред.Валюта <> СтруктураДанные.ВалютаРасчетов
		И ЗначениеЗаполнено(Объект.ВалютаРасчетов); 
	ПересчетНеобходим = (Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа") > 0);	
	
	// Обновление курса взаиморасчетов.
	Если ИзмениласьВалютаРасчетов Тогда 
		ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность", 
			Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);

		ОбработкаТабличныхЧастейКлиентСервер.УстановитьКурсыВзаиморасчетовТабличнойЧасти(
			Объект, "РасшифровкаПлатежа", ДанныеДокумента, СтруктураКурсы, ВалютаРегламентированногоУчета);
	КонецЕсли;	
	
	// Пересчет суммы взаиморасчетов.
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И ИзмениласьВалютаРасчетов
		И ПересчетНеобходим Тогда
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовТабличнойЧасти(
			Объект, "РасшифровкаПлатежа", ДанныеДокумента, СтруктураКурсы, ВалютаРегламентированногоУчета);
			
		ОбновитьПодвалФормы();
	КонецЕсли;	
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Период, ДоговорКонтрагента, ВидОперации)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорКонтрагента.ВалютаРасчетов);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаРасчетов, Период));
	
	СчетаУчета = БухгалтерскийУчетВызовСервера.ПолучитьСчетаРасчетовСКонтрагентом(ДоговорКонтрагента.Организация, ДоговорКонтрагента.Владелец, ДоговорКонтрагента);
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда 
		СтруктураДанные.Вставить(
			"СчетРасчетов",
			СчетаУчета.СчетРасчетовПоставщика);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю Тогда 
		СтруктураДанные.Вставить(
			"СчетРасчетов",
			СчетаУчета.СчетАвансовПокупателя);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоЗаймам Тогда 	
		СтруктураДанные.Вставить(
			"СчетРасчетов",
			ПланыСчетов.Хозрасчетный.НачисленныеОбязательстваПоОплатеТоваровИУслуг); // 3510
	Иначе 	
		СтруктураДанные.Вставить(
			"СчетРасчетов",
			ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаКлиенте
Процедура ОбработатьИзменениеКассы()
	
	СтруктураДанные = ПолучитьДанныеКассыПриИзменении(ДатаДокумента, Объект.Касса);

	// Обработка изменения валюты.
	СтруктураКурсыПред = Новый Структура("Валюта", Объект.ВалютаДокумента);
	Объект.ВалютаДокумента = СтруктураДанные.ВалютаДокумента;
	Объект.Курс      = СтруктураДанные.ВалютаДокументаКурсКратность.Курс;
	Объект.Кратность = СтруктураДанные.ВалютаДокументаКурсКратность.Кратность;
	СтруктураКурсы = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	
	// Вопрос изменения
	ИзмениласьВалютаРасчетов = СтруктураКурсыПред.Валюта <> СтруктураДанные.ВалютаДокумента
		И ЗначениеЗаполнено(Объект.ВалютаДокумента); 
	ПересчетНеобходим = (Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа") > 0);	
	
	// Обновление курса взаиморасчетов.
	Если ИзмениласьВалютаРасчетов Тогда 
		ДанныеВзаиморасчетов = ПолучитьКурсВалюты(Объект.ВалютаРасчетов, ДатаДокумента);

		ОбработкаТабличныхЧастейКлиентСервер.УстановитьКурсыВзаиморасчетовТабличнойЧасти(
			Объект, "РасшифровкаПлатежа", СтруктураКурсы, ДанныеВзаиморасчетов, ВалютаРегламентированногоУчета);
	КонецЕсли;	

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) 
		И ИзмениласьВалютаРасчетов
		И ПересчетНеобходим Тогда
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовТабличнойЧасти(
			Объект, "РасшифровкаПлатежа", СтруктураКурсы, ДанныеВзаиморасчетов, ВалютаРегламентированногоУчета);
			
		ОбновитьПодвалФормы();	
	КонецЕсли;		
КонецПроцедуры

// Получает набор данных с сервера для процедуры ОбработатьИзменениеКассы.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеКассыПриИзменении(Период, Касса)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаДокумента",
		Касса.ВалютаДенежныхСредств);
		
	СтруктураДанные.Вставить(
		"ВалютаДокументаКурсКратность",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(Касса.ВалютаДенежныхСредств, Период));

	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКассыПриИзменении()

&НаКлиенте
Процедура ОбработатьИзменениеБанковскогоСчетаОрганизации()
	
	СтруктураДанные = ПолучитьДанныеБанковскийСчетПриИзменении(ДатаДокумента, Объект.БанковскийСчет);

	// Обработка изменения валюты.
	СтруктураКурсыПред = Новый Структура("Валюта", Объект.ВалютаРасчетов);
	Объект.ВалютаРасчетов 	= СтруктураДанные.ВалютаРасчетов;
	КурсВзаиморасчетов 		= ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
	КратностьВзаиморасчетов = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	СтруктураКурсы = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаРасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов);
	
	// Вопрос изменения
	ИзмениласьВалютаРасчетов = СтруктураКурсыПред.Валюта <> СтруктураДанные.ВалютаРасчетов
		И ЗначениеЗаполнено(Объект.ВалютаРасчетов); 
	ПересчетНеобходим = (Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа") > 0);	
	
	// Обновление курса взаиморасчетов.
	Если ИзмениласьВалютаРасчетов Тогда 
		ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность", 
			Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);

		ОбработкаТабличныхЧастейКлиентСервер.УстановитьКурсыВзаиморасчетовТабличнойЧасти(
			Объект, "РасшифровкаПлатежа", ДанныеДокумента, СтруктураКурсы, ВалютаРегламентированногоУчета);
	КонецЕсли;	

	Если ЗначениеЗаполнено(Объект.БанковскийСчет) 
		И ИзмениласьВалютаРасчетов
		И ПересчетНеобходим Тогда
		
		ДанныеВзаиморасчетов = ПолучитьКурсВалюты(Объект.ВалютаРасчетов, ДатаДокумента);

		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовТабличнойЧасти(
			Объект, "РасшифровкаПлатежа", ДанныеДокумента, СтруктураКурсы, ВалютаРегламентированногоУчета);
			
		ОбновитьПодвалФормы();	
	КонецЕсли;		
КонецПроцедуры

// Получает набор данных с сервера для процедуры БанковскийСчетОрганизацииПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеБанковскийСчетПриИзменении(Период, БанковскийСчет)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		БанковскийСчет.ВалютаДенежныхСредств);
		
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(БанковскийСчет.ВалютаДенежныхСредств, Период));

	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеБанковскийСчетПриИзменении()

// Процедура рассчитывает итоги для подвала формы.
//
&НаКлиенте
Процедура ОбновитьПодвалФормы()
	ИтогСуммаПлатежа = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа") 
		+ Объект.ВыплатаЗаработнойПлаты.Итог("СуммаПлатежа")
		+ Объект.ПрочиеПлатежи.Итог("СуммаПлатежа");
	ИтогСуммаВзаиморасчетов = Объект.РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов"); 
КонецПроцедуры // ОбновитьПодвалФормы()

&НаСервереБезКонтекста
Функция ПолучитьКурсВалюты(Валюта, ДатаДокумента)
	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, ДатаДокумента);
КонецФункции // ПолучитьКурсВалюты()

// Функция - Получить данные для печати
//
// Параметры:
//  ОбъектОбработки	 - СправочникСсылка	 - Оюрабатываемая ссылка (физ.лицо, банковский счет)
// 
// Возвращаемое значение:
//  ДанныеДляПечати - Структура
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДляПечати(ОбъектОбработки, Организация = Неопределено, Период = Неопределено)
	ДанныеДляПечати = Новый Структура("Выдать, ПоДокументу", "", "");
	
	Если ТипЗнч(ОбъектОбработки) = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
		ДанныеДляПечати.Выдать = ОбъектОбработки.Наименование;
		
		ДанныеФизЛица = БухгалтерскийУчетСервер.ДанныеФизЛица(Организация, ОбъектОбработки, Период);	
		СтрокаПоДокументу = СтрШаблон("%1 Серия %2 №%3 выдан %4 от %5",
			ДанныеФизЛица.ДокументВид,
			ДанныеФизЛица.ДокументСерия,
			ДанныеФизЛица.ДокументНомер,
			ДанныеФизЛица.ДокументКемВыдан,
			Формат(ДанныеФизЛица.ДокументДатаВыдачи, "ДЛФ=DD"));
			
		ДанныеДляПечати.ПоДокументу = СтрокаПоДокументу;
	ИначеЕсли ТипЗнч(ОбъектОбработки) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		ДанныеДляПечати.Выдать = ОбъектОбработки.НомерСчета;
	КонецЕсли;
		
	Возврат ДанныеДляПечати;
КонецФункции // ПолучитьДанныеДляПечати()

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
