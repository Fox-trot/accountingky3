#Область ОбработчикиСлужебные

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервереБезКонтекста
Функция ПроверкаАктуальностиКурсаВалютНаСервере()
	Возврат РаботаСКурсамиВалют.КурсыАктуальны(); 
КонецФункции

&НаКлиенте
Процедура ОповеститьЧтоКурсывалютНеАктуальны()
	ВалютаКон = ПолучитьВалютуКассы(Объект.Касса);
	Если НЕ Объект.Проведен И НЕ БылоОповещениеКурсыВалютУстарели И 
		(ВалютаКон <> ВалютаРегламентированногоУчета ИЛИ ВалютаКон <> ВалютаРегламентированногоУчета) 
		И ПроверкаАктуальностиКурсаВалютНаСервере() Тогда
		РаботаСКурсамиВалютКлиент.ОповеститьКурсыУстарели();
		БылоОповещениеКурсыВалютУстарели = Истина;
	КонецЕсли;
КонецПроцедуры // ОповеститьЧтоКурсывалютНеАктуальны()

&НаСервере
Процедура УстановитьКурсВалютыДокумента()

	ВалютаДокумента = Объект.Касса.ВалютаДенежныхСредств;
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		Возврат;	
	КонецЕсли;
	КурсСтруктура		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	Объект.КурсКассы	= КурсСтруктура.Курс;
	Если НЕ ЗначениеЗаполнено(Объект.КурсКассы) Тогда
		Объект.КурсКассы = 1;	
	КонецЕсли;
	КурсВзаиморасчетов	= Окр(КурсСтруктура.Курс / Объект.КурсДоговора, 4);	
	
КонецПроцедуры // УстановитьКурсВалютыДокумента()

&НаСервере
Процедура УстановитьКурсДоговора()
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДоговора) Тогда
		Возврат;	
	КонецЕсли;

	КурсСтруктура		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДоговора, ДатаДокумента);
	Объект.КурсДоговора	= КурсСтруктура.Курс;
	Если НЕ ЗначениеЗаполнено(Объект.КурсДоговора) Тогда
		Объект.КурсДоговора = 1;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКурсВзаиморасчетов()
	СложныйКурс = 1;
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		КурсВзаиморасчетов 	= 1;
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
		Если Объект.КурсКассы >= Объект.КурсДоговора Тогда
			СложныйКурс	= Окр(Объект.КурсКассы / Объект.КурсДоговора, 4);
			ПрямойКурс  = Ложь;	
		Иначе
			СложныйКурс	= Окр(Объект.КурсДоговора / Объект.КурсКассы, 4);
			ПрямойКурс  = Истина;
		КонецЕсли;
		КурсВзаиморасчетов 	= СложныйКурс;
	Иначе
		КурсВзаиморасчетов 	= 1;
	КонецЕсли;
			
КонецПроцедуры // 

&НаКлиенте
Процедура УстановитьКурсВзаиморасчетовТабличнойЧастиРасшифровкаПлатежа()

	Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = КурсВзаиморасчетов;
	КонецЦикла;	

КонецПроцедуры // ()

// Установка знанчений счетов учета с контрагентами
//
&НаКлиенте
Процедура УстановитьСчетаУчетаРасчетовСКонтрагентом(СтрокаТабличнойЧасти = Неопределено)
	
	ДоговорКонтрагента 	= СтрокаТабличнойЧасти.ДоговорКонтрагента;
	СчетаУчета			= БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента); //ПолучитьСчетаУчетаСКонтрагентами(Объект);			                                                       					
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику") тогда
		СтрокаТабличнойЧасти.СчетУчета    = СчетаУчета.СчетРасчетовПоставщика;
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю") тогда			
		СтрокаТабличнойЧасти.СчетУчета    = СчетаУчета.СчетРасчетовПокупателя;							
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоЗаймам") тогда			
		СтрокаТабличнойЧасти.СчетУчета    = СчетаУчета.СчетРасчетовПоЗаймам;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСчетУчетаОперацииНаСервере(БС)
	
	Возврат БС.СчетУчета;

КонецФункции // ()

&НаСервереБезКонтекста
Функция ПолучитьСчетУчетаБСНаСервере(Операция)
	
	Возврат Операция.СчетУчета;

КонецФункции // ()

&НаСервереБезКонтекста
Функция ПолучитьВидДоговораПоОперацииНаСервере(Операция) 
	Если Операция.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;	
		
	ИначеЕсли Операция.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;	
		
	ИначеЕсли Операция.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоЗаймам Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // ПолучитьВидДоговораПоОперации()

&НаСервереБезКонтекста
Функция ПолучитьВалютуКассы(Касса)

	Возврат	Касса.ВалютаДенежныхСредств;

КонецФункции // ()

&НаСервереБезКонтекста
Функция ПолучитьВалютуБанковскогоСчета(БанковскийСчет)

	Возврат	БанковскийСчет.ВалютаДенежныхСредств;

КонецФункции // ()

&НаСервереБезКонтекста
Функция ПолучитьСтатьюДДСИзОперации(Операция)

	Возврат	Операция.СтатьяДвиженияДенежныхСредств;

КонецФункции // ПолучитьСтатьюДДСИзОперации()

&НаСервереБезКонтекста
Функция ПолучитьВалютуДоговораНаСервере(Договор)

	Возврат	Договор.ВалютаРасчетов;

КонецФункции // ПолучитьСтатьюДДСИзОперации()

&НаСервереБезКонтекста
Функция ПолучитьВидОперации(Операция)

	Возврат	Операция.ВидОперации;

КонецФункции // ПолучитьСтатьюДДСИзОперации()

&НаСервереБезКонтекста
Функция ПолучитьДокументФизЛица(Организация, ФизЛицо, Дата)
	
	СтруктураФизЛицо 	= БухгалтерскийУчетСервер.ДанныеФизЛица(Организация, ФизЛицо, Дата);	
	СтрокаДокумент 		= "" + СтруктураФизЛицо.ДокументВид 
						+ ", Серия " + СтруктураФизЛицо.ДокументСерия 
						+ ", №" + СтруктураФизЛицо.ДокументНомер 
						+ ", выдан " + СтруктураФизЛицо.ДокументКемВыдан 
						+ ", от " + Формат(СтруктураФизЛицо.ДокументДатаВыдачи, "ДЛФ=DD");
	
	Возврат СтрокаДокумент;
	
КонецФункции // ПолучитьДокументФизЛица(ФизЛицо)

&НаСервереБезКонтекста
Функция ПолучитьПолноеНаименованиеКонтрагента(Контрагент)

	Возврат Контрагент.НаименованиеПолное;	

КонецФункции // ПолучитьПолноеНаименованиеКонтрагента(Объект.Контрагент)()

//Установка доступности субконто для существующих строк табличной части
&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "Субконто1", "Субконто2", "Субконто3");
		
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПрочиеРасходы Цикл		
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СтрокаТабличнойЧасти.СчетУчета, СтрокаТабличнойЧасти, ПоляОбъекта, Истина);
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТабличнойЧасти, "Субконто" + "%Индекс%", "СчетУчета");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТабличнойЧасти, "Субконто" + "%Индекс%", "ПрочиеРасходыСубконто" + "%Индекс%", ПараметрыДокумента);			
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Изменить параметры выбора полей субконто
//
// Параметры:
//  Форма	 - 	 - 
//  Суффикс	 - 	 - 
//  ИмяСчета - 	 - 
&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Форма.Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, "Субконто" + Суффикс + "%Индекс%", "ПрочиеРасходыСубконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета",   ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", ДанныеОбъекта.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	БухгалтерскийУчетКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоФизЛицо(Контрагент)

	Возврат Контрагент.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;	

КонецФункции // ЭтоФизЛицо()

&НаСервереБезКонтекста
Функция ПолучитьФизЛицоКонтрагента(Контрагент)
	
	Возврат Контрагент.ФизЛицо;
	
КонецФункции // ПолучитьФизЛицоКонтрагента(Контрагент)()

&НаКлиенте
Процедура УстановкаОтбораДоговораКонтрагента()
	Если Объект.РасшифровкаПлатежа.Количество() = 1 И ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
		НовыйМассив = Новый Массив();

		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВалютаРасчетов", ВалютаДоговораКонтрагентаРасшифровкаПлатежа);	    
	    НовыйМассив.Добавить(НовыйПараметр);
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику") Тогда
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));	    
		    НовыйМассив.Добавить(НовыйПараметр);			
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю") Тогда			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));	    
		    НовыйМассив.Добавить(НовыйПараметр);			
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоЗаймам") Тогда			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));	    
		    НовыйМассив.Добавить(НовыйПараметр);			
		КонецЕсли;
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = НовыеПараметры;

	ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
		НовыйМассив = Новый Массив();
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));	    
	    НовыйМассив.Добавить(НовыйПараметр);
		
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = НовыеПараметры;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановкаОтбораДоговораКонтрагентаВТекущейстроке()
	НомерСтроки = Элементы.РасшифровкаПлатежа.ТекущиеДанные.НомерСтроки;
	НовыйМассив = Новый Массив();
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));	    
	    НовыйМассив.Добавить(НовыйПараметр);			
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю") Тогда			
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));	    
	    НовыйМассив.Добавить(НовыйПараметр);			
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоЗаймам") Тогда			
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));	    
	    НовыйМассив.Добавить(НовыйПараметр);			
	КонецЕсли;	
	
	Если НомерСтроки > 1 Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВалютаРасчетов", ВалютаДоговораКонтрагентаРасшифровкаПлатежа);	    
	    НовыйМассив.Добавить(НовыйПараметр);		
	КонецЕсли;

	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКурсВалютыНаСервере(Валюта, Дата)

	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Дата);	

КонецФункции // ()

&НаКлиенте
Процедура ОчисткаРеквизитовИТабличныхЧастей()
	
	ДоговорВПервойСтроке = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	ВалютаДоговораКонтрагентаРасшифровкаПлатежа = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
		
	Объект.СуммаДокумента = 0;		
	
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		Объект.РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	Если Объект.ПрочиеРасходы.Количество() > 0 Тогда
		Объект.ПрочиеРасходы.Очистить();
	КонецЕсли;
	Если Объект.ВыдачаВПодотчет.Количество() > 0 Тогда
		Объект.ВыдачаВПодотчет.Очистить();
	КонецЕсли;
	Если Объект.ВыплатаЗаработнойПлаты.Количество() > 0 Тогда
		Объект.ВыплатаЗаработнойПлаты.Очистить();
	КонецЕсли;
	
	Объект.СтатьяДвиженияДенежныхСредств 	= ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка");
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоЗаймам") Тогда
				
		
		Объект.БанковскийСчет 					= ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
		Объект.ФизЛицо 							= ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");				
		СтрокаТабличнойЧасти 									= Объект.РасшифровкаПлатежа.Добавить();		
		СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   	= ПолучитьСтатьюДДСИзОперации(Операция);
		
		ВидДоговораПоОперации = ПолучитьВидДоговораПоОперацииНаСервере(Объект.Операция);
		СтруктураДоговор = БухгалтерскийУчетСервер.ПолучитьДоговорКонтрагента(Объект.Организация, Объект.Контрагент, ВалютаДенежныхСредств, ВидДоговораПоОперации);
		Объект.ВалютаДоговора = СтруктураДоговор.ВалютаДоговора;
		УстановитьКурсДоговора();
				
		СтрокаТабличнойЧасти.ДоговорКонтрагента 	= СтруктураДоговор.ДоговорКонтрагента;
		ПолучитьКурсВзаиморасчетов();
		СтрокаТабличнойЧасти.КурсВзаиморасчетов 	= КурсВзаиморасчетов;
		СтрокаТабличнойЧасти.ПрямойКурс 			= ПрямойКурс;
		ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти);
		УстановитьСчетаУчетаРасчетовСКонтрагентом(СтрокаТабличнойЧасти);
		ВалютаДоговораКонтрагентаРасшифровкаПлатежа = СтруктураДоговор.ВалютаДоговора;
		ДоговорВПервойСтроке 						= СтрокаТабличнойЧасти.ДоговорКонтрагента;
		УстановкаОтбораДоговораКонтрагента();
				
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ПрочийРасход") Тогда
		Объект.БанковскийСчет 					= ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
		Объект.Контрагент						= ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		Объект.ФизЛицо 							= ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");				
		СтрокаТабличнойЧасти 									= Объект.ПрочиеРасходы.Добавить();	
		СтрокаТабличнойЧасти.СчетУчета 							= ПолучитьСчетУчетаОперацииНаСервере(Операция);
		СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   	= ПолучитьСтатьюДДСИзОперации(Операция);

	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗП") Тогда		
		Объект.БанковскийСчет 					= ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
		Объект.Контрагент						= ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		Объект.ФизЛицо 							= ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");				
		СтрокаТабличнойЧасти 									= Объект.ВыплатаЗаработнойПлаты.Добавить();
		СтрокаТабличнойЧасти.Ведомость							= "";
		СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   	= ПолучитьСтатьюДДСИзОперации(Операция);
				
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаПодотчетнику") Тогда		
		Объект.БанковскийСчет 						= ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
		Объект.Контрагент						= ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");					
		СтрокаТабличнойЧасти 									= Объект.ВыдачаВПодотчет.Добавить();	
		СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   	= ПолучитьСтатьюДДСИзОперации(Операция);

	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносВБанк") Тогда				
		Объект.Контрагент						= ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		Объект.ФизЛицо 							= ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.Инкассация") Тогда
		Объект.БанковскийСчет 						= ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
		Объект.Контрагент						= ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПересчетТабличнойЧастиРасшифровкаПлатежа()
	
	Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = КурсВзаиморасчетов;
		СтрокаТабличнойЧасти.ПрямойКурс 		= ПрямойКурс;
		УстановитьСчетаУчетаРасчетовСКонтрагентом(СтрокаТабличнойЧасти);
		ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти)
	КонецЦикла;
	
КонецПроцедуры

// ПересчетИзСуммыПлатежа = Истина, если вводится сумма платежа.
// ПересчетИзСуммыПлатежа = Ложь, если вводится сумма взаиморасчетов.
//
&НаКлиенте
Процедура ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти, ПересчетОтСуммыВзаиморасчетов = Ложь)
	Если ПересчетОтСуммыВзаиморасчетов Тогда
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаВзаиморасчетов) Тогда
			СтрокаТабличнойЧасти.КурсВзаиморасчетов 	= Окр(СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.СуммаВзаиморасчетов, 2);
			СтрокаТабличнойЧасти.ПрямойКурс = Истина;
		КонецЕсли;
		Если СтрокаТабличнойЧасти.КурсВзаиморасчетов < 1 Тогда
			СтрокаТабличнойЧасти.КурсВзаиморасчетов 	= Окр(СтрокаТабличнойЧасти.СуммаВзаиморасчетов / СтрокаТабличнойЧасти.СуммаПлатежа, 2);
			СтрокаТабличнойЧасти.ПрямойКурс = Ложь;		
		КонецЕсли;
				
	Иначе
		Если СтрокаТабличнойЧасти.ПрямойКурс Тогда
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.КурсВзаиморасчетов) Тогда
				СтрокаТабличнойЧасти.СуммаВзаиморасчетов 	= Окр(СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.КурсВзаиморасчетов, 2);
			КонецЕсли;		
		Иначе
			СтрокаТабличнойЧасти.СуммаВзаиморасчетов 	= Окр(СтрокаТабличнойЧасти.СуммаПлатежа * СтрокаТабличнойЧасти.КурсВзаиморасчетов, 2);
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СообщенияПользователюПриИзмененииДоговора(СтрокаТабличнойЧасти)
	
	Отказ = Ложь;
		
	РасчетыНеВВалютеДоговора = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьНастройкуРасчетыНеВВалютеДоговора();
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента) 
		И НЕ РасчетыНеВВалютеДоговора  
		И НЕ ПолучитьВалютуДоговораНаСервере(СтрокаТабличнойЧасти.ДоговорКонтрагента) = ВалютаДенежныхСредств Тогда				
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
			"Валюта выбранного договора должна соответствовать валюте кассы, т.е. " + ВалютаДенежныхСредств,
			,
			"РасшифровкаПлатежа",
			СтрокаТабличнойЧасти.НомерСтроки,
			"ДоговорКонтрагента",
			Отказ);			
			СтрокаТабличнойЧасти.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
		ВалютаДоговораВПервойСтроке = ПолучитьВалютуДоговораНаСервере(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
		Если НЕ ЗначениеЗаполнено(ВалютаДоговораВПервойСтроке) Тогда
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
			"У договора в первой строке не установлена валюта!",
			,
			"РасшифровкаПлатежа",
			СтрокаТабличнойЧасти.НомерСтроки,
			"ДоговорКонтрагента",
			Отказ);			
			СтрокаТабличнойЧасти.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		КонецЕсли;
		
		Если НЕ ВалютаДоговораВПервойСтроке = ПолучитьВалютуДоговораНаСервере(СтрокаТабличнойЧасти.ДоговорКонтрагента) Тогда
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
			"Валюта выбранного договора должна быть, как в первой строке табличной части, т.е. " + ВалютаДоговораВПервойСтроке,
			,
			"РасшифровкаПлатежа",
			СтрокаТабличнойЧасти.НомерСтроки,
			"ДоговорКонтрагента",
			Отказ);			
			СтрокаТабличнойЧасти.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // СообщенияПользователюПриИзмененииДоговора(СтрокаТабличнойЧасти)

&НаСервере
Функция ПересчетСуммыДокумента()
	Сумма 		= Объект.СуммаДокумента;
	ВалютаНач 	= ВалютаДенежныхСредств;
	ВалютаКон 	= Объект.Касса.ВалютаДенежныхСредств;
	
	ВидОперации = Объект.Операция.ВидОперации;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоЗаймам") Тогда			
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗП") Тогда
		Объект.СуммаДокумента = Объект.ВыплатаЗаработнойПлаты.Итог("СуммаПлатежа");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаПодотчетнику") Тогда		
		Объект.СуммаДокумента = Объект.ВыдачаВПодотчет.Итог("СуммаПлатежа");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ПрочийРасход") Тогда		
		Объект.СуммаДокумента = Объект.ПрочиеРасходы.Итог("СуммаПлатежа");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносВБанк") Тогда		
		//для полноты картины	
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.Инкассация") Тогда
		//для полноты картины 		
	КонецЕсли;

КонецФункции // ПересчетСуммыДокумента()

&НаСервере
Процедура ПеречислениеЗПЧерезПодтчетникаНаСервере(Ведомость, Сумма)
	Сумма = Ведомость.Зарплата.Итог("СуммаКВыплате");
КонецПроцедуры

&НаСервере
Процедура ПеречислениеЗПБезПодтчетникаНаСервере(Ведомость)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыплаченнаяЗарплатаОбороты.Физлицо,
		|	СУММА(ВыплаченнаяЗарплатаОбороты.СуммаОборот) КАК Сумма
		|ПОМЕСТИТЬ УжеВыплаченоПоЭтойВедомости
		|ИЗ
		|	РегистрНакопления.ВыплаченнаяЗарплата.Обороты(
		|			,
		|			,
		|			Авто,
		|			Организация = &Организация
		|				И Ведомость = &Ведомость) КАК ВыплаченнаяЗарплатаОбороты
		|ГДЕ
		|	НЕ ВыплаченнаяЗарплатаОбороты.Регистратор = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыплаченнаяЗарплатаОбороты.Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВедомостьЗПЗарплата.ФизЛицо,
		|	ВедомостьЗПЗарплата.СуммаКВыплате - ЕСТЬNULL(УжеВыплаченоПоЭтойВедомости.Сумма, 0) КАК СуммаПлатежа,
		|	&Ведомость,
		|	ВедомостьЗПЗарплата.Ссылка.СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ВедомостьЗП.Зарплата КАК ВедомостьЗПЗарплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ УжеВыплаченоПоЭтойВедомости КАК УжеВыплаченоПоЭтойВедомости
		|		ПО ВедомостьЗПЗарплата.ФизЛицо = УжеВыплаченоПоЭтойВедомости.Физлицо
		|ГДЕ
		|	ВедомостьЗПЗарплата.Ссылка = &Ведомость";
	
	Запрос.УстановитьПараметр("Ведомость", 		Ведомость);
	Запрос.УстановитьПараметр("Организация", 	Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", 		Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = Объект.ВыплатаЗаработнойПлаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ОбработкаЗаполнения(ДокОснование, );
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаСервереБезКонтекста
Функция ПаспортныеДанныеАлименты(Контрагент, Дата)
	СтрокаПаспортныеДанные = "";
	Если ЗначениеЗаполнено(Контрагент) 
		И Контрагент.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо 
		И ЗначениеЗаполнено(Контрагент.ФизЛицо) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДокументыФизическихЛицСрезПоследних.Представление
			|ИЗ
			|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
			|			&Дата,
			|			Физлицо = &ФизЛицо
			|				И ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.Паспорт)) КАК ДокументыФизическихЛицСрезПоследних";
		
		Запрос.УстановитьПараметр("Дата", 		Дата);
		Запрос.УстановитьПараметр("Физлицо", 	Контрагент.Физлицо);
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			СтрокаПаспортныеДанные = ВыборкаДетальныеЗаписи.Представление;
		КонецЕсли;
		
		Возврат СтрокаПаспортныеДанные;
	
	КонецЕсли;
	

КонецФункции // ПаспортныеДанныеАлименты()
 
#КонецОбласти

#Область УправлениеВнешнимВидом

&НаКлиенте
// Видимость и доступность всех элементов формы
//
Процедура УстановитьВидимостьДоступностьЭлементов() Экспорт
	
	ВалютаРегламентированногоУчета 									= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Элементы.Получатель.Видимость 									= Истина;
	Элементы.ФизЛицо.Видимость										= Ложь;
	Элементы.СчетУчета.Заголовок									= "Счет учета поставщика";
	Элементы.СчетУчета.Видимость 									= Истина;
	Элементы.БанковскийСчет.Видимость								= Ложь;
	Элементы.СчетУчетаБанковскогоСчета.Видимость 					= Ложь;
	Элементы.СуммаДокумента.Заголовок 								= "Сумма";
	Элементы.СуммаДокумента.ТолькоПросмотр 							= Истина;
	Элементы.Статья.Видимость 										= Ложь;
	Элементы.ЧерезПодотчетника.Видимость 							= Ложь;
	Элементы.Ведомость.Видимость									= Ложь;
	
	Элементы.СтраницыПанель.ТекущаяСтраница	 						= Элементы.СтраницаРасшифровкаПлатежа;
	Элементы.СтраницаРасшифровкаПлатежа.Видимость 					= Ложь;
	Элементы.СтраницаВыплатаЗП.Видимость 							= Ложь;
	Элементы.СтраницаВыдачаВПодотчет.Видимость						= Ложь;
	Элементы.СтраницаПрочиеРасходы.Видимость						= Ложь;
	Элементы.СтраницаИнкассацияБанк.Видимость						= Ложь;
	Элементы.Курс.Видимость											= Ложь;
	Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость		= Ложь;
	
	ВидОперации = ПолучитьВидОперации(Объект.Операция);
	
	Если НЕ ЗначениеЗаполнено(Объект.Операция) ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику") Тогда	
		//Видимость ТЧ
		Элементы.СтраницаРасшифровкаПлатежа.Видимость 				= Истина;
		Элементы.РасшифровкаПлатежаДокументРасчетов.Видимость       = Ложь;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю") Тогда
		Элементы.Получатель.Заголовок								= "Покупатель";
		//Видимость ТЧ
		Элементы.СтраницаРасшифровкаПлатежа.Видимость 				= Истина;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоЗаймам") Тогда
		Элементы.Получатель.Заголовок								= "Контрагент";
		//Видимость ТЧ
		Элементы.СтраницаРасшифровкаПлатежа.Видимость 				= Истина;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносВБанк") Тогда
		Элементы.Получатель.Видимость 								= Ложь;
		Элементы.СтраницаИнкассацияБанк.Видимость					= Истина;
		Элементы.БанковскийСчет.Видимость 							= Истина;
		Элементы.СчетУчетаБанковскогоСчета.Видимость 				= Истина;
		Элементы.СчетУчета.Видимость 								= Ложь;
		Элементы.СуммаДокумента.ТолькоПросмотр 						= Ложь;
		//Видимость ТЧ
		Элементы.СтраницыПанель.ТекущаяСтраница	 					= Элементы.СтраницаДополнительно;
				
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.Инкассация") Тогда
		Элементы.Получатель.Видимость 								= Ложь;
		Элементы.ФизЛицо.Видимость 									= Истина;
		Элементы.ФизЛицо.Заголовок									= "Подотчетник";
		Элементы.СчетУчета.Заголовок								= "Счет учета";
		Элементы.СуммаДокумента.ТолькоПросмотр 						= Ложь;
		
		Элементы.СтраницаИнкассацияБанк.Видимость					= Истина;
		Элементы.СтраницыПанель.ТекущаяСтраница	 					= Элементы.СтраницаДополнительно;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ПрочийРасход") Тогда
		Элементы.Получатель.Видимость 								= Ложь;
		//Видимость ТЧ
		Элементы.СтраницаПрочиеРасходы.Видимость					= Истина;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗП") Тогда
		Элементы.СчетУчета.Заголовок								= "Счет учета ЗП";
		Элементы.Получатель.Видимость 								= Ложь;
		Элементы.ПеречислениеЗаработнойПлатыФизЛицо.Видимость		= НЕ Объект.ЧерезПодотчетника;		
		Элементы.ФизЛицо.Видимость									= Объект.ЧерезПодотчетника;
		Элементы.ФизЛицо.Заголовок									= "Подотчетник";
		
		Элементы.ЧерезПодотчетника.Видимость 						= Ложь;  
		Элементы.Ведомость.Видимость								= НЕ Объект.ЧерезПодотчетника И Ложь;  				
		Элементы.ПеречислениеЗаработнойПлатыВедомость.Видимость 	= Объект.ЧерезПодотчетника И Ложь;    
		//Видимость ТЧ
		Элементы.СтраницаВыплатаЗП.Видимость 						= Истина;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаПодотчетнику") Тогда
		Элементы.Получатель.Видимость 								= Ложь;
		Элементы.СчетУчета.Заголовок								= "Счет учета подотчетника";
		Элементы.ФизЛицо.Видимость									= Истина;
		Элементы.ФизЛицо.Заголовок									= "Подотчетник";
		//Видимость ТЧ
		Элементы.СтраницаВыдачаВПодотчет.Видимость 					= Истина;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Операция) ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику") 
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю") 
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоЗаймам") Тогда
		
		Элементы.РасшифровкаПлатежаВалютаДоговора.Видимость 		= Ложь;
		Элементы.РасшифровкаПлатежаКурс.Видимость 					= Ложь;
		Если Объект.ВалютаДоговора <> ВалютаДенежныхСредств Тогда
			Элементы.РасшифровкаПлатежаКурс.Видимость 			= Истина;
			Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость = Истина;
		КонецЕсли;
		
		Если ВалютаДенежныхСредств <> ВалютаРегламентированногоУчета Тогда		
			Элементы.Курс.Видимость									= Истина;		
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()  

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	// Установка реквизитов формы.
	Организация             = Объект.Организация;	
	ВалютаДенежныхСредств 	= Объект.Касса.ВалютаДенежныхСредств;	
	Операция 				= Объект.Операция;			
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		ВалютаДоговораКонтрагентаРасшифровкаПлатежа = ПолучитьВалютуДоговораНаСервере(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
		ДоговорВПервойСтроке = Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента;
	КонецЕсли;
	//Установить доступность субконто в табличной части ПрочиеРасходы
	УстановитьДоступностьСубконто();
	
	БухгалтерскийУчетСервер.ОпределитьТипПоследнегоОткрытогоДокумента(Объект); 
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаВажныеКоманды);
	// Конец СтандартныеПодсистемы.Печать	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПолучитьКурсВзаиморасчетов();
	//Установить отбора в табличной части РасшифровкаПлатежа
	УстановкаОтбораДоговораКонтрагента();	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьДоступностьСубконто();
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	// ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ОповещениеОбИзмененииДолга");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура вызывается при нажатии кнопки "ЗаполнитьПоОснованию" 
//
&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Документ будет полностью перезаполнен по ""Основанию""! Продолжить выполнение операции?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

// Изменение значений реквизитов формы, видимости полей в зависимости от вида операции
//
&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	Операция 			= Объект.Операция;
	ВидОперации 		= ПолучитьВидОперации(Операция);
	Объект.Основание 	= Строка(Объект.Операция);
	
	ОчисткаРеквизитовИТабличныхЧастей();	
	УстановитьДоступностьСубконто();	
	Объект.СчетУчета = ПолучитьСчетУчетаОперацииНаСервере(Объект.Операция);
		 
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.Инкассация") Тогда
		Объект.СтатьяДвиженияДенежныхСредств = ПолучитьСтатьюДДСИзОперации(Операция);
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносВБанк") тогда		
		СчетУчетаБС = ПолучитьСчетУчетаБСНаСервере(Объект.БанковскийСчет);
		Если ЗначениеЗаполнено(СчетУчетаБС) Тогда
			Объект.СчетУчета = СчетУчетаБС;					
		Иначе
			Объект.СчетУчета = ПолучитьСчетУчетаОперацииНаСервере(Объект.Операция);			
		КонецЕсли;		
	КонецЕсли;

	УстановитьВидимостьДоступностьЭлементов();	 

КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
	УстановитьКурсВалютыДокумента();
	УстановитьКурсВзаиморасчетовТабличнойЧастиРасшифровкаПлатежа();
	ПересчетТабличнойЧастиРасшифровкаПлатежа();
	ПересчетСуммыДокумента();
	
КонецПроцедуры

//Процедура - обработчик события ПриИзменении поля ввода Организация
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Если Объект.Организация = Организация Тогда
		Возврат;
	КонецЕсли;
	Организация = Объект.Организация;
	ОчисткаРеквизитовИТабличныхЧастей();
	
	Объект.Номер = "";
	БухгалтерскийУчетСервер.ПроверитьСуществованиеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	Объект.Касса = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнуюКассуОрганизации(Объект.Организация, ВалютаРегламентированногоУчета);
	
	ПересчетТабличнойЧастиРасшифровкаПлатежа();
		
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Получатель
//
&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	ОчисткаРеквизитовИТабличныхЧастей();
	ПересчетТабличнойЧастиРасшифровкаПлатежа();
	Объект.Выдать 		= ПолучитьПолноеНаименованиеКонтрагента(Объект.Контрагент);
	Если ЭтоФизЛицо(Объект.Контрагент) Тогда	
		Объект.ПоДокументу 	= ПолучитьДокументФизЛица(Объект.Организация, ПолучитьФизЛицоКонтрагента(Объект.Контрагент), Объект.Дата);
	КонецЕсли;
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	ВалютаДенежныхСредств 			= ПолучитьВалютуКассы(Объект.Касса);
	Объект.ВалютаДенежныхСредств 	= ВалютаДенежныхСредств;	
	УстановитьКурсВалютыДокумента();
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоЗаймам") Тогда			
		ПолучитьКурсВзаиморасчетов();
		УстановитьКурсВзаиморасчетовТабличнойЧастиРасшифровкаПлатежа();
		ПересчетТабличнойЧастиРасшифровкаПлатежа();	
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносВБанк") Тогда
		Если ЗначениеЗаполнено(Объект.БанковскийСчет) И НЕ ПолучитьВалютуБанковскогоСчета(Объект.БанковскийСчет) = ВалютаДенежныхСредств Тогда
			Объект.БанковскийСчет = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");	
		КонецЕсли;
		
	КонецЕсли;
	ПересчетСуммыДокумента();
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ЧерезПодотчетникаПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов()
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	Объект.Выдать 		= Объект.ФизЛицо;
	Объект.ПоДокументу 	= ПолучитьДокументФизЛица(Объект.Организация, Объект.ФизЛицо, Объект.Дата);
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	Объект.Выдать 		= ?(ЗначениеЗаполнено(Объект.БанковскийСчет),  "на р/с " + Объект.БанковскийСчет, "");
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТабличныхЧастей

// ТЧ РасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Отказ = СообщенияПользователюПриИзмененииДоговора(СтрокаТабличнойЧасти);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 И Объект.РасшифровкаПлатежа.Количество() = 1 И ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
		ВалютаДоговораКонтрагентаРасшифровкаПлатежа = ПолучитьВалютуДоговораНаСервере(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
		ДоговорВПервойСтроке = Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента;
		Объект.ВалютаДоговора = ВалютаДоговораКонтрагентаРасшифровкаПлатежа;
		УстановитьКурсДоговора();
		ПолучитьКурсВзаиморасчетов();
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = КурсВзаиморасчетов;
		СтрокаТабличнойЧасти.ПрямойКурс 		= ПрямойКурс;
		ПересчетТабличнойЧастиРасшифровкаПлатежа();
	ИначеЕсли СтрокаТабличнойЧасти.НомерСтроки = 1 И Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
		Если ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
			Если ПолучитьВалютуДоговораНаСервере(СтрокаТабличнойЧасти.ДоговорКонтрагента) <> ВалютаДоговораКонтрагентаРасшифровкаПлатежа Тогда		
				ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросПоменяласьВалютаТабличнойЧасти", ЭтотОбъект);
				ТекстВопроса = НСтр("ru = 'В первой строке табличная часть выбран договор с другой валютой! Табличная часть будет пересчитана! Продолжить выполнение операции?'");
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
			КонецЕсли;	
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросПоменяласьВалютаТабличнойЧасти", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'В первой строке табличной части не выбран договор контрагента! Табличная часть будет пересчитана! Продолжить выполнение операции?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);			
		КонецЕсли;

	КонецЕсли;
		
	ОповеститьЧтоКурсывалютНеАктуальны();
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти, Истина)
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)	
	Если НоваяСтрока Тогда						
		СтрокаТабличнойЧасти 									= Элемент.ТекущиеДанные;	
	    СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   	= ПолучитьСтатьюДДСИзОперации(Операция);
		
		Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			ВидДоговораПоОперации 					= ПолучитьВидДоговораПоОперацииНаСервере(Объект.Операция);
			СтруктураДоговорКонтрагента             = БухгалтерскийУчетСервер.ПолучитьДоговорКонтрагента(Объект.Организация, 
																										Объект.Контрагент, 
																										ВалютаДенежныхСредств, 
																										ВидДоговораПоОперации);
			Если ЗначениеЗаполнено(СтруктураДоговорКонтрагента) Тогда
				СтрокаТабличнойЧасти.ДоговорКонтрагента = СтруктураДоговорКонтрагента.ДоговорКонтрагента;
			КонецЕсли;
			ДоговорВПервойСтроке = Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента;
			ВалютаДоговораКонтрагентаРасшифровкаПлатежа = ПолучитьВалютуДоговораНаСервере(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
			Если ЗначениеЗаполнено(ВалютаДоговораКонтрагентаРасшифровкаПлатежа) И Объект.ВалютаДоговора <> ВалютаДоговораКонтрагентаРасшифровкаПлатежа Тогда
				Объект.ВалютаДоговора = ВалютаДоговораКонтрагентаРасшифровкаПлатежа;
			Иначе
				Объект.ВалютаДоговора = ВалютаРегламентированногоУчета;
			КонецЕсли;
			ПолучитьКурсВзаиморасчетов();
		Иначе
			СтрокаТабличнойЧасти.ДоговорКонтрагента 	= Объект.РасшифровкаПлатежа[СтрокаТабличнойЧасти.НомерСтроки - 2].ДоговорКонтрагента;			
		КонецЕсли;
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = КурсВзаиморасчетов;
		СтрокаТабличнойЧасти.ПрямойКурс 		= ПрямойКурс;

		УстановитьСчетаУчетаРасчетовСКонтрагентом(СтрокаТабличнойЧасти);
		ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти);
		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.КурсВзаиморасчетов) Тогда
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = ПолучитьКурсВалютыНаСервере(Объект.ВалютаДоговора, ДатаДокумента).Курс;	
	КонецЕсли;
	ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриИзменении(Элемент)
	
	ПересчетСуммыДокумента();

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УстановкаОтбораДоговораКонтрагентаВТекущейстроке();
КонецПроцедуры

// ТЧ ПеречислениеЗаработнойПлаты

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыПриИзменении(Элемент)
	ПересчетСуммыДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если НЕ Объект.ЧерезПодотчетника
		И Объект.ВыплатаЗаработнойПлаты.Количество() >= 1 
		И НЕ ЗначениеЗаполнено(Объект.ВыплатаЗаработнойПлаты[0].Ведомость) Тогда
		
		Отказ = Истина;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
														"Без указания Ведомости заполняется только первая строка табличной части",
														,
														"Операция",
														"Объект",
														)
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыВедомостьПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ПеречислениеЗаработнойПлаты.ТекущиеДанные;
	Ведомость = СтрокаТабличнойЧасти.Ведомость;
	Если ТипЗнч(Ведомость) = Тип("Строка") Тогда
		Возврат;	
	КонецЕсли;	
	Если ЗначениеЗаполнено(Ведомость) Тогда
		Если Объект.ЧерезПодотчетника Тогда
			ПеречислениеЗПЧерезПодтчетникаНаСервере(Ведомость, СтрокаТабличнойЧасти.СуммаПлатежа);
		Иначе
			Объект.ВыплатаЗаработнойПлаты.Удалить(СтрокаТабличнойЧасти.НомерСтроки - 1);
			ПеречислениеЗПБезПодтчетникаНаСервере(Ведомость)
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти 								= Элемент.ТекущиеДанные;	
	    СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   = ПолучитьСтатьюДДСИзОперации(Операция);
		СтрокаТабличнойЧасти.Ведомость   					= "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыФизЛицоПриИзменении(Элемент)
	Если Объект.ВыплатаЗаработнойПлаты.Количество() > 0 Тогда
	Объект.Выдать 		= Объект.ВыплатаЗаработнойПлаты[0].ФизЛицо;
	Объект.ПоДокументу 	= ПолучитьДокументФизЛица(Объект.Организация, Объект.ВыплатаЗаработнойПлаты[0].ФизЛицо, Объект.Дата);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПересчетСуммыДокумента();
КонецПроцедуры

// ТЧ ВыдачаВПодотчет

&НаКлиенте
Процедура ВыдачаВПодотчетПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти 								= Элемент.ТекущиеДанные;	
	    СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств  = ПолучитьСтатьюДДСИзОперации(Операция);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыдачаВПодотчетПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПересчетСуммыДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ВыдачаВПодотчетПриИзменении(Элемент)
	ПересчетСуммыДокумента();
КонецПроцедуры

// ТЧ ПрочиеРасходы

&НаКлиенте
Процедура ПрочиеРасходыПриИзменении(Элемент)
	ПересчетСуммыДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.ПрочиеРасходы.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "Субконто", 1, "СчетУчета", СтрокаТабличнойЧасти, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСубконто1ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетУчета");
	Субконто1 = Элементы.ПрочиеРасходы.ТекущиеДанные.Субконто1;
	Если ТипЗнч(Субконто1) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Объект.Выдать 		= Субконто1;
		Объект.ПоДокументу	= ПолучитьДокументФизЛица(Объект.Организация, Субконто1, Объект.Дата);
	ИначеЕсли ТипЗнч(Субконто1) = Тип("СправочникСсылка.Контрагенты") Тогда
		Объект.Выдать	 		= Субконто1;
		Если ЭтоФизЛицо(Субконто1) Тогда
			Объект.ПоДокументу	= ПолучитьДокументФизЛица(Объект.Организация, ПолучитьФизЛицоКонтрагента(Субконто1), Объект.Дата);
		КонецЕсли;
	КонецЕсли;
							  
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСубконто2ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ПрочиеРасходы.ТекущиеДанные;
	Если ТипЗнч(СтрокаТабличнойЧасти.Субконто2) = ТИП("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Субконто2) Тогда
		ДанныеПаспорта =  ПаспортныеДанныеАлименты(СтрокаТабличнойЧасти.Субконто2, ДатаДокумента); 
		Если ЗначениеЗаполнено(ДанныеПаспорта) Тогда 
			Объект.ПоДокументу = ДанныеПаспорта;			
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти 								= Элемент.ТекущиеДанные;	
		СтрокаТабличнойЧасти.СчетУчета 						= ПолучитьСчетУчетаОперацииНаСервере(Операция);
	    СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств  = ПолучитьСтатьюДДСИзОперации(Операция);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСчетУчетаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "Субконто1", "Субконто2", "Субконто3");

	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетУчета, СтрокаТабличнойЧасти, ПоляОбъекта, Истина);
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетУчета");
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств) Тогда
		СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств = ПолучитьСтатьюДДСИзОперации(Операция);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПересчетСуммыДокумента();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоДокументу(Объект.ДокументОснование);
        УстановитьВидимостьДоступностьЭлементов();
    КонецЕсли;
КонецПроцедуры // ЗаполнитьПоОснованию()

&НаКлиенте
Процедура ОтветНаВопросПоменяласьВалютаТабличнойЧасти(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВалютаДоговораКонтрагентаРасшифровкаПлатежа = ПолучитьВалютуДоговораНаСервере(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
		ДоговорВПервойСтроке = Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента;
		Объект.ВалютаДоговора = ВалютаДоговораКонтрагентаРасшифровкаПлатежа;
		УстановитьКурсДоговора();		
		ПолучитьКурсВзаиморасчетов();
		Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТабличнойЧасти.ДоговорКонтрагента = ДоговорВПервойСтроке;
		КонецЦикла;
		ПересчетТабличнойЧастиРасшифровкаПлатежа();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// Стандартная подсистема: Запрет редактирования реквизитов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтаФорма);
  	ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = ТИП("ДокументСсылка.ВедомостьЗП") Тогда
		Объект.Ведомость = ВыбранноеЗначение;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

