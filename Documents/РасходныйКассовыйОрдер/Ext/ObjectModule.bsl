#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ЗаполненияДокумента

Процедура ЗаполнитьПоСтруктуре(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("ВедомостьЗП") Тогда 
		ЗаполнитьПоВедомостиЗП(ДанныеЗаполнения);
	ИначеЕсли ДанныеЗаполнения.Свойство("Командировка") Тогда
		ЗаполнитьДокументПоДокументуКомандировка(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоВедомостиЗП(ДанныеЗаполнения) Экспорт
	// Общий 	
	Если НЕ ТипЗнч(ДанныеЗаполнения)= Тип("Структура") Тогда 
		ДокументОснование = ДанныеЗаполнения;
		Операция = Справочники.ОперацииРКО.ВыплатаЗаработнойПлатыПоВедомостям; 
		
		// Заполнение шапки
		Организация = ДанныеЗаполнения.Организация;
		Касса = ДанныеЗаполнения.Касса;
		СуммаДокумента = ДанныеЗаполнения.Зарплата.Итог("СуммаКВыплате");
		ПоВедомости = Ложь;
		СчетУчета = ПланыСчетов.Хозрасчетный.НачисленнаяЗаработнаяПлата;
		Выдать = НСтр("ru = 'На зарплату'");
		
		НазваниеДокумента = НСтр("ru = 'Ведомость ЗП'");
		НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеЗаполнения.Номер);
		Основание = СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),НазваниеДокумента, НомерНаПечать, Формат(ДанныеЗаполнения.Дата, "ДЛФ=DD"));
		
		// Заполнение Табличной части
		ВыплатаЗаработнойПлаты.Очистить();
		Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Зарплата Цикл 
			Если СтрокаТабличнойЧасти.ВыплаченностьЗарплаты = ПредопределенноеЗначение("Перечисление.ВыплаченностьЗарплаты.Выплачено") Тогда
				СтрокаТабличнойЧастиТабличнойЧасти = ВыплатаЗаработнойПлаты.Добавить();
				СтрокаТабличнойЧастиТабличнойЧасти.ФизЛицо = СтрокаТабличнойЧасти.ФизЛицо;
				СтрокаТабличнойЧастиТабличнойЧасти.СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
				СтрокаТабличнойЧастиТабличнойЧасти.СуммаПлатежа = СтрокаТабличнойЧасти.СуммаКВыплате;
				СтрокаТабличнойЧастиТабличнойЧасти.Ведомость = ДанныеЗаполнения;
			КонецЕсли;
		КонецЦикла;	
		                  
	// Индивидуальные	
	Иначе 
		ДокументОснование = ДанныеЗаполнения.Ведомость;
		Операция = Справочники.ОперацииРКО.ВыплатаЗаработнойПлатыСотруднику; 
		
		// Заполнение шапки
		ФизЛицо = ДанныеЗаполнения.ФизЛицо;
		Организация = ДанныеЗаполнения.Организация;
		Касса = ДанныеЗаполнения.Касса;
		СуммаДокумента = ДанныеЗаполнения.СуммаКВыплате;
		ПоВедомости = Ложь;
		СчетУчета = ПланыСчетов.Хозрасчетный.НачисленнаяЗаработнаяПлата;
		
		НазваниеДокумента = НСтр("ru = 'Ведомость ЗП'");
		НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеЗаполнения.Ведомость.Номер);
		Основание = СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),НазваниеДокумента, НомерНаПечать, Формат(ДанныеЗаполнения.Ведомость.Дата, "ДЛФ=DD"));
		
		Выдать = ДанныеЗаполнения.ФизЛицо;
		
		ВыплатаЗаработнойПлаты.Очистить();
		СтрокаТабличнойЧастиТабличнойЧасти = ВыплатаЗаработнойПлаты.Добавить();
		СтрокаТабличнойЧастиТабличнойЧасти.ФизЛицо = ДанныеЗаполнения.ФизЛицо;
		СтрокаТабличнойЧастиТабличнойЧасти.СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
		СтрокаТабличнойЧастиТабличнойЧасти.СуммаПлатежа = ДанныеЗаполнения.СуммаКВыплате;
		СтрокаТабличнойЧастиТабличнойЧасти.Ведомость = ДанныеЗаполнения.Ведомость;
	КонецЕсли;	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоВыплатеЗП(ДанныеЗаполнения) Экспорт
	// Общий 	
	Если ДанныеЗаполнения.Свойство("ТаблицаЗначений") Тогда 
		ДокументОснование = ДанныеЗаполнения.ВыплатаЗП;
		Операция = Справочники.ОперацииРКО.ВыплатаЗП; 
		
		// Заполнение шапки
		Организация = ДанныеЗаполнения.Организация;
		Касса = ДанныеЗаполнения.Касса;
		ПоВедомости = Ложь;
		СчетУчета = ПланыСчетов.Хозрасчетный.НачисленнаяЗаработнаяПлата;
		Выдать = НСтр("ru = 'На зарплату'");
		
		НазваниеДокумента = НСтр("ru = 'Ведомость ЗП'");
		НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеЗаполнения.НомерВыплаты);
		Основание = СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),НазваниеДокумента, НомерНаПечать, Формат(ДанныеЗаполнения.Дата, "ДЛФ=DD"));
		
		ОбщаяСуммаДокумента = 0;
		// Заполнение Табличной части
		ВыплатаЗаработнойПлаты.Очистить();
		Для Каждого СтрокаТаблицы Из ДанныеЗаполнения.ТаблицаЗначений Цикл 
			СтрокаТабличнойЧасти = ВыплатаЗаработнойПлаты.Добавить();
			СтрокаТабличнойЧасти.ФизЛицо = СтрокаТаблицы.ФизЛицо;
			СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
			СтрокаТабличнойЧасти.СуммаПлатежа = СтрокаТаблицы.СуммаКВыплате;
			СтрокаТабличнойЧасти.Ведомость = ДанныеЗаполнения;
			ОбщаяСуммаДокумента = ОбщаяСуммаДокумента + СтрокаТаблицы.СуммаКВыплате;
		КонецЦикла;
		СуммаДокумента = ОбщаяСуммаДокумента;
		                  
	// Индивидуальные	
	Иначе 
		ДокументОснование = ДанныеЗаполнения.ВыплатаЗП;
		Операция = Справочники.ОперацииРКО.ВыплатаЗП;
		ИндивидуальныРКО = Истина;
		
		// Заполнение шапки
		ФизЛицо = ДанныеЗаполнения.ФизЛицо;
		Организация = ДанныеЗаполнения.Организация;
		Касса = ДанныеЗаполнения.Касса;
		СуммаДокумента = ДанныеЗаполнения.СуммаКВыплате;
		ПоВедомости = Ложь;
		СчетУчета = ПланыСчетов.Хозрасчетный.НачисленнаяЗаработнаяПлата;
		
		НазваниеДокумента = НСтр("ru = 'Ведомость ЗП'");
		НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеЗаполнения.НомерВыплаты);
		Основание = СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),НазваниеДокумента, НомерНаПечать, Формат(ДанныеЗаполнения.Дата, "ДЛФ=DD"));
		
		Выдать = ДанныеЗаполнения.ФизЛицо;
		
		ВыплатаЗаработнойПлаты.Очистить();
		СтрокаТабличнойЧасти = ВыплатаЗаработнойПлаты.Добавить();
		СтрокаТабличнойЧасти.ФизЛицо = ДанныеЗаполнения.ФизЛицо;
		СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
		СтрокаТабличнойЧасти.СуммаПлатежа = ДанныеЗаполнения.СуммаКВыплате;
		СтрокаТабличнойЧасти.Ведомость = ДанныеЗаполнения.ВыплатаЗП;
	КонецЕсли;	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьДокументПоДокументуКомандировка(ДанныеЗаполнения) Экспорт
	ДокументОснование 		= ДанныеЗаполнения.ДокументОснование;
	СуммаДокумента			= ДанныеЗаполнения.СуммаДокумента;
	Касса                   = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнуюКассуОрганизации(ДанныеЗаполнения.Организация);
	ВалютаДенежныхСредств 	= Касса.ВалютаДенежныхСредств;
	ФизЛицо 				= ФизЛицоКомандировки(ДанныеЗаполнения);
	Операция                = Справочники.ОперацииРКО.ВыдачаДенежныхСредствПодотчетнику;
	СчетУчета               = ?(ЗначениеЗаполнено(Операция), Операция.СчетУчета, ПланыСчетов.Хозрасчетный.ПустаяСсылка());	
	
	ВыдачаВПодотчет.Очистить();

	Для каждого СтрокаКомандировка Из ДанныеЗаполнения.Сотрудники Цикл
		СтрокаТабличнойЧасти 	= ВыдачаВПодотчет.Добавить();
		СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств = ?(ЗначениеЗаполнено(Операция), Операция.СтатьяДвиженияДенежныхСредств, Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());	
		СтрокаТабличнойЧасти.СуммаПлатежа 	= СтрокаКомандировка.СуммаВсего;	
	КонецЦикла;
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоПоступлениюТоваровУслуг(ДанныеЗаполнения) Экспорт
	Контрагент 	= ДанныеЗаполнения.Контрагент;
	Организация = ДанныеЗаполнения.Организация;
	Касса = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнуюКассуОрганизации(Организация);
	ДокументОснование = ДанныеЗаполнения;
	
	РасшифровкаПлатежа.Очистить();
	
	СтрокаТабличнойЧасти = РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеЗаполнения);
	
	УстановитьКурсВзаиморасчетов(ТекущаяДатаСеанса(), СтрокаТабличнойЧасти);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = ДанныеЗаполнения.Товары.Итог("Всего") + ДанныеЗаполнения.Услуги.Итог("Всего");
	СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Выплаты поставщикам и сотрудникам");
	
	СчетаРасчетовСКонтрагентом = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента);
	СтрокаТабличнойЧасти.СчетУчета = СчетаРасчетовСКонтрагентом.СчетРасчетовПоставщика;
	
	ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти)
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоДополнительнымРасходам(ДанныеЗаполнения) Экспорт
	
	ДокументОснование = ДанныеЗаполнения;
	
	// Шапка
	Организация = ДанныеЗаполнения.Организация;
	Операция = Справочники.ОперацииРКО.ОплатаПоставщику;			
	Контрагент 	= ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	Касса = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнуюКассуОрганизации(Организация);
	ВалютаДоговора = ДоговорКонтрагента.ВалютаРасчетов;
	СуммаДокумента = ДанныеЗаполнения.Услуги.Итог("Сумма");
	
	// Расшифровка платежа
	РасшифровкаПлатежа.Очистить();
	
	СтрокаТабличнойЧасти = РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеЗаполнения);
	СтрокаТабличнойЧасти.ДоговорКонтрагента = ДоговорКонтрагента;
	
	УстановитьКурсВзаиморасчетов(ТекущаяДатаСеанса(), СтрокаТабличнойЧасти);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.КурсВзаиморасчетов) Тогда
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоговора, Дата).Курс;
	КонецЕсли;	
	
	СтрокаТабличнойЧасти.СуммаПлатежа = СуммаДокумента;
	
	СчетаРасчетовСКонтрагентом = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента);
	СтрокаТабличнойЧасти.СчетУчета = СчетаРасчетовСКонтрагентом.СчетРасчетовПоставщика;
	
	ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти)
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоВозвратуОтПокупателя(ДанныеЗаполнения) Экспорт
	
	Операция = ПредопределенноеЗначение("Справочник.ОперацииРКО.ВозвратДенежныхСредствПокупателю");
	Контрагент 	= ДанныеЗаполнения.Контрагент;
	Организация = ДанныеЗаполнения.Организация;
	Касса = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнуюКассуОрганизации(Организация);
	ДокументОснование = ДанныеЗаполнения;
	Основание = Операция.Наименование;
	СчетУчета = Операция.СчетУчета;
	Выдать = ДанныеЗаполнения.Контрагент.Наименование;
	СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
	
	РасшифровкаПлатежа.Очистить();
	
	СтрокаТабличнойЧасти = РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеЗаполнения);
	СтрокаТабличнойЧасти.СчетУчета = ДанныеЗаполнения.СчетРасчетов;
	СтрокаТабличнойЧасти.ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	СтрокаТабличнойЧасти.СуммаПлатежа = ДанныеЗаполнения.СуммаДокумента;
	СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств = Операция.СтатьяДвиженияДенежныхСредств;
	СтрокаТабличнойЧасти.ДокументРасчетов = ДанныеЗаполнения; 
		
	ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("Структура")] = "ЗаполнитьПоСтруктуре";
	СтратегияЗаполнения[Тип("ДокументСсылка.ВедомостьЗП")] = "ЗаполнитьПоВедомостиЗП";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПоступлениеТоваровУслуг")] = "ЗаполнитьПоПоступлениюТоваровУслуг";
	СтратегияЗаполнения[Тип("ДокументСсылка.Командировка")] = "ЗаполнитьДокументПоДокументуКомандировка";
	СтратегияЗаполнения[Тип("ДокументСсылка.ДополнительныеРасходы")] = "ЗаполнитьПоДополнительнымРасходам";
	СтратегияЗаполнения[Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")] = "ЗаполнитьПоВозвратуОтПокупателя";
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(Операция) Тогда
		Операция = Справочники.ОперацииРКО.ОплатаПоставщику;			
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Касса) Тогда		
		Касса = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнуюКассуОрганизации(Организация);		
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ВалютаДенежныхСредств) И ЗначениеЗаполнено(Касса) Тогда
		ВалютаДенежныхСредств = Касса.ВалютаДенежныхСредств;
	КонецЕсли;
	
	ДатаДокумента = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	Если НЕ ЗначениеЗаполнено(Курс) Тогда
		КурсСтруктура		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДенежныхСредств, ДатаДокумента);
		Если ЗначениеЗаполнено(КурсСтруктура.Курс) Тогда
			Курс 	= КурсСтруктура.Курс;
		Иначе
			Курс 	= 1;
		КонецЕсли;		
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(КурсДоговора)
		И РасшифровкаПлатежа.Количество() > 0 
		И ЗначениеЗаполнено(РасшифровкаПлатежа[0].ДоговорКонтрагента) 
		И ЗначениеЗаполнено(РасшифровкаПлатежа[0].ДоговорКонтрагента.ВалютаРасчетов) Тогда
			
		КурсСтруктура = РаботаСКурсамиВалют.ПолучитьКурсВалюты(РасшифровкаПлатежа[0].ДоговорКонтрагента.ВалютаРасчетов, ДатаДокумента);
		КурсДоговора = КурсСтруктура.Курс;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(КурсДоговора) Тогда
		КурсДоговора = 1;	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.РасходныйКассовыйОрдер.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьВыплаченнаяЗарплата(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьДДС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьДанныеРеестраГТД(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьАвансыПодотчетника(ДополнительныеСвойства, Движения, Отказ);

	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ВидОперации = Операция.ВидОперации;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоЗаймам") Тогда
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ФизЛицо");
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаПодотчетнику") Тогда
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		ПроверяемыеРеквизиты.Добавить("ВыдачаВПодотчет");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.Инкассация") Тогда
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		ПроверяемыеРеквизиты.Добавить("СуммаДокумента");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносВБанк") Тогда
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ФизЛицо");
		ПроверяемыеРеквизиты.Добавить("СуммаДокумента");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗП") Тогда	
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		Если НЕ ЧерезПодотчетника Тогда
			БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ФизЛицо");
			БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ВыплатаЗаработнойПлаты.Ведомость");
		КонецЕсли;
		Если ВыплатаЗаработнойПлаты.Количество() > 0 И ЗначениеЗаполнено(ВыплатаЗаработнойПлаты[0].Ведомость) Тогда
			Для каждого СтрокаТабличнойЧасти Из ВыплатаЗаработнойПлаты Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Ведомость) Тогда
					Отказ = Истина;
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Необходимо заполнить Ведомость'");
					Сообщение.Поле = "ВыплатаЗаработнойПлаты[" + (СтрокаТабличнойЧасти.НомерСтроки-1) + "].Ведомость";
					Сообщение.УстановитьДанные(ЭтотОбъект);
					Сообщение.Сообщить();				
				КонецЕсли;			
			
			КонецЦикла;	
		
		КонецЕсли;
		ПроверяемыеРеквизиты.Добавить("ВыплатаЗаработнойПлаты");		
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ПрочийРасход") Тогда	
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ФизЛицо");
		ПроверяемыеРеквизиты.Добавить("ПрочиеРасходы");
			
	КонецЕсли;	                  
			     
	//Контроль заполнения СчетДт и СчетКт перед проводкой по РБ
	Если ЗначениеЗаполнено(Касса) И НЕ ЗначениеЗаполнено(Касса.СчетУчета) Тогда
		
		ТекстСообщения = НСтр("ru = 'У выбранной кассы организации не установлен счет учета'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстСообщения,
		,
		"Объект.Касса", 
		,
		Отказ);
	КонецЕсли;	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПересчетСуммыДокумента()					
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПересчетСуммыДокумента()
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Сумма 		= СуммаДокумента;	
	ВидОперации = Операция.ВидОперации;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоЗаймам") Тогда			
		Если РасшифровкаПлатежа.Количество() > 0 Тогда
			Сумма = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		КонецЕсли;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗП") Тогда
		Если ВыплатаЗаработнойПлаты.Количество() > 0 Тогда
			Сумма = ВыплатаЗаработнойПлаты.Итог("СуммаПлатежа");
		КонецЕсли;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаПодотчетнику") Тогда		
		Если ВыдачаВПодотчет.Количество() > 0 Тогда 
			Сумма = ВыдачаВПодотчет.Итог("СуммаПлатежа");
		КонецЕсли;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ПрочийРасход") Тогда		
		Если ПрочиеРасходы.Количество() > 0 Тогда
			Сумма = ПрочиеРасходы.Итог("СуммаПлатежа");
		КонецЕсли;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносВБанк") Тогда		
		//для полноты картины
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.Инкассация") Тогда
		//для полноты картины 
		
	КонецЕсли;
 
	СуммаДокумента = Сумма;

КонецФункции

Процедура ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти.ПрямойКурс Тогда
		СтрокаТабличнойЧасти.СуммаВзаиморасчетов 	= Окр(СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.КурсВзаиморасчетов, 2);
	Иначе
		СтрокаТабличнойЧасти.СуммаВзаиморасчетов 	= Окр(СтрокаТабличнойЧасти.СуммаПлатежа * СтрокаТабличнойЧасти.КурсВзаиморасчетов, 2);
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьКурсВзаиморасчетов(Дата, СтрокаТабличнойЧасти)
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента) Тогда
		СложныйКурс = 0;
		Если ЗначениеЗаполнено(Организация.ОсновнаяКасса) Тогда
			ДанныеКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Организация.ОсновнаяКасса.ВалютаДенежныхСредств, Дата);
			Курс = ДанныеКурса.Курс;
		Иначе
			Курс = 1;
		КонецЕсли;
				
		Если ЗначениеЗаполнено(ВалютаДоговора) Тогда
			КурсСтруктура 		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоговора, Дата);
			КурсДоговора	= КурсСтруктура.Курс;
		    Если ЗначениеЗаполнено(КурсДоговора) Тогда
				СложныйКурс		= Окр(Курс / КурсДоговора, 4);
				ПрямойКурс      = Ложь;
				Если СложныйКурс < 1 Тогда
					СложныйКурс		= Окр(КурсДоговора / Курс, 4);
					ПрямойКурс      = Истина;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;

		СтрокаТабличнойЧасти.КурсВзаиморасчетов = СложныйКурс;
		СтрокаТабличнойЧасти.ПрямойКурс 		= ПрямойКурс;	
	КонецЕсли;
		
КонецПроцедуры // УстановитьКурсВзаиморасчетов()

Функция ФизЛицоКомандировки(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КомандировкаСотрудники.ФизЛицо
		|ИЗ
		|	Документ.Командировка.Сотрудники КАК КомандировкаСотрудники
		|ГДЕ
		|	КомандировкаСотрудники.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	КомандировкаСотрудники.ФизЛицо";
	
	Запрос.Параметры.Вставить("Ссылка", ДокументСсылка);	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.ФизЛицо;
	Иначе	
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;	

КонецФункции // ()

#КонецОбласти

#КонецЕсли