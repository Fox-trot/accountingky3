#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	ВычетНАПриМодернизации = Константы.ВычетНАПриМодернизации.Получить();
	
	СоздатьПараметрыУчетаОС();	
	
	Если ЗначениеЗаполнено(Объект.ОсновноеСредство) Тогда
		ЗаполнитьПараметрыУчетаОС();
	КонецЕсли;

	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	КонтрольВеденияУчета.ПослеЗаписиНаСервере(ТекущийОбъект);
КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора.
//
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Объект.ОсновноеСредство = ВыбранноеЗначение;
	
	Если ЗначениеЗаполнено(Объект.ОсновноеСредство) Тогда
		ЗаполнитьПараметрыУчетаОС();
	
		Для Каждого СтрокаТабличнойЧасти Из Объект.ПараметрыОС Цикл 
			ЗаполнитьСтароеЗначение(СтрокаТабличнойЧасти);
			
			Если СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СчетУчета") 
				И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Значение) Тогда
				ПодставитьСчетУчетаМодернизации(СтрокаТабличнойЧасти.Значение);	
			КонецЕсли;	
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Объект.ОсновноеСредство) Тогда
			РасчетАмортизацииИОстаточнойСтоимости();
		Иначе
			Для Каждого СтрокаТабличнойЧасти Из Объект.ПараметрыОС Цикл
				СтрокаТабличнойЧасти.Значение = Неопределено;
				СтрокаТабличнойЧасти.СтароеЗначение = Неопределено;
			КонецЦикла;	
		КонецЕсли;		
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
	БухгалтерскийУчетВызовСервераПовтИсп.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	Если ЗначениеЗаполнено(Объект.ОсновноеСредство) Тогда
		ЗаполнитьПараметрыУчетаОС();
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.ПараметрыОС Цикл 
			ЗаполнитьСтароеЗначение(СтрокаТабличнойЧасти);
		КонецЦикла;
		
		РасчетАмортизацииИОстаточнойСтоимости();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервераПовтИсп.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода ОсновноеСредство.
//
&НаКлиенте
Процедура ОсновноеСредствоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отборы = Новый Структура;
	Отборы.Вставить("Организация", Объект.Организация);
	Отборы.Вставить("Непринятые", Ложь);
	Отборы.Вставить("ДатаПримененияОтбора", Объект.Дата);
	Отборы.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.ВидыСостоянийОС.ПринятоКУчету"));
	
	ОткрытьФорму("Справочник.ОсновныеСредства.Форма.ФормаВыбора", Новый Структура("Отбор", Отборы), ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОсновноеСредство.
//
&НаКлиенте
Процедура ОсновноеСредствоПриИзменении(Элемент)
	ЗаполнитьПараметрыУчетаОС();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПараметрыОС Цикл 
		ЗаполнитьСтароеЗначение(СтрокаТабличнойЧасти);
		
		Если СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СчетУчета") 
			И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Значение) Тогда
			ПодставитьСчетУчетаМодернизации(СтрокаТабличнойЧасти.Значение);	
		КонецЕсли;	
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.ОсновноеСредство) Тогда
		РасчетАмортизацииИОстаточнойСтоимости();
	Иначе
		Для Каждого СтрокаТабличнойЧасти Из Объект.ПараметрыОС Цикл
			СтрокаТабличнойЧасти.Значение = Неопределено;
			СтрокаТабличнойЧасти.СтароеЗначение = Неопределено;
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Параметры.
//
&НаКлиенте
Процедура ПараметрыПриИзменении(Элемент)
	РасчетАмортизацииИОстаточнойСтоимости();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Событие.
//
&НаКлиенте
Процедура СобытиеПриИзменении(Элемент)
	Если Объект.ПараметрыОС.Количество() = 0 Тогда
		Для Каждого СтрокаСписка Из Элементы.ПараметрыПараметр.СписокВыбора Цикл	
			СтрокаТабличнойЧасти = Объект.ПараметрыОС.Добавить();
			
			СтрокаТабличнойЧасти.Параметр = СтрокаСписка.Значение;
			
			Если ЗначениеЗаполнено(Объект.ОсновноеСредство) Тогда
				УстановитьТипПараметраВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);	
				ЗаполнитьСтароеЗначение(СтрокаТабличнойЧасти);
				РасчетЛиквидационнойСтоимости(СтрокаТабличнойЧасти);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Событие = ПредопределенноеЗначение("Перечисление.ВидыСобытийОС.ИзменениеПараметров") Тогда 
		Объект.СтоимостьМодернизации = 0;
	КонецЕсли;	
		
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СтоимостьМодернизации.
//
&НаКлиенте
Процедура СтоимостьМодернизацииПриИзменении(Элемент)
	Объект.СтоимостьПослеМодернизации = ПервоначальнаяСтоимость + Объект.СтоимостьМодернизации;
	РасчетАмортизацииИОстаточнойСтоимости();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыОС

&НаКлиенте
Процедура ПараметрыОСПриАктивизацииСтроки(Элемент)
	// Получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.ПараметрыОС.ТекущиеДанные;
	
	// Не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьТипПараметраВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОСПараметр.
//
&НаКлиенте
Процедура ОСПараметрПриИзменении(Элемент)
	// Получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.ПараметрыОС.ТекущиеДанные;
	
	// Не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьТипПараметраВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);	
	ЗаполнитьСтароеЗначение(СтрокаТабличнойЧасти);
	РасчетЛиквидационнойСтоимости(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗначениеПриИзменении(Элемент)
	
	Если Объект.Событие = ПредопределенноеЗначение("Перечисление.ВидыСобытийОС.ИзменениеПараметров") Тогда
	
		ТекущаяСтрока = Элементы.ПараметрыОС.ТекущиеДанные;
		
		Если ТекущаяСтрока <> Неопределено Тогда
			
			Если ТекущаяСтрока.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ЛиквидационнаяСтоимость") Тогда
				
				Если ТекущаяСтрока.Значение <> ТекущаяСтрока.СтароеЗначение Тогда
					Объект.БазаАмортизацииПослеМодернизации = ?(ВычетНАПриМодернизации,
						ПервоначальнаяСтоимость - ТекущаяСтрока.Значение - Объект.НакопленнаяАмортизацияПослеМодернизации,
						ПервоначальнаяСтоимость - ТекущаяСтрока.Значение);																		
				КонецЕсли;
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РассчитатьСуммы(Команда)
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ОсновноеСредство) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено Основное средство. Расчет документа отменено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.ОсновноеСредство",,Отказ)		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаМодернизации) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен Счет учета модернизации. Расчет документа отменено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.СчетУчетаМодернизации",,Отказ)		
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат
	КонецЕсли;	
	
	Если Объект.ПараметрыОС.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросРассчитатьСтоимостьМодернизации", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Стоимость модернизации будет перерасчитана. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		ЗаполнитьПараметрыУчетаОС();
		Для Каждого СтрокаТабличнойЧасти Из Объект.ПараметрыОС Цикл 
			ЗаполнитьСтароеЗначение(СтрокаТабличнойЧасти);
		КонецЦикла;
		
		РасчетАмортизацииИОстаточнойСтоимости();
		РассчитатьСтоимостьМодернизации();
	КонецЕсли;
КонецПроцедуры      

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросРассчитатьСтоимостьМодернизации(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПараметрыУчетаОС();
		Для Каждого СтрокаТабличнойЧасти Из Объект.ПараметрыОС Цикл 
			ЗаполнитьСтароеЗначение(СтрокаТабличнойЧасти);
		КонецЦикла;
		
		РасчетАмортизацииИОстаточнойСтоимости();
		РассчитатьСтоимостьМодернизации();
	КонецЕсли; 
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()

	Если Объект.Событие = Перечисления.ВидыСобытийОС.Модернизация Тогда 
		Элементы.СчетУчетаМодернизации.Видимость 			= Истина;
		Элементы.СтоимостьМодернизации.Видимость 			= Истина;
		Элементы.ГруппаСтоимость.Видимость 					= Истина;
		Элементы.ГруппаАмортизацияЗаМесяц.Видимость 		= Истина;
		Элементы.ГруппаОстаточнаяСтоимость.Видимость 		= Истина;
		Элементы.ГруппаБазаАмортизации.Видимость 			= Истина;
		Элементы.ГруппаНакопленнаяАмортизация.Видимость		= Истина;
		Элементы.РассчитатьСтоимостьМодернизации.Видимость 	= Истина;
		Элементы.СтоимостьПослеМодернизации.Видимость		= Истина;
	Иначе 
		Элементы.СчетУчетаМодернизации.Видимость 			= НЕ ДанныеУчетнойПолитики.НачислениеАмортизацииОСПоМесяцам;
		Элементы.СтоимостьМодернизации.Видимость 			= Ложь;
		Элементы.ГруппаСтоимость.Видимость 					= НЕ ДанныеУчетнойПолитики.НачислениеАмортизацииОСПоМесяцам;
		Элементы.ГруппаАмортизацияЗаМесяц.Видимость 		= НЕ ДанныеУчетнойПолитики.НачислениеАмортизацииОСПоМесяцам;
		Элементы.ГруппаОстаточнаяСтоимость.Видимость 		= НЕ ДанныеУчетнойПолитики.НачислениеАмортизацииОСПоМесяцам;
		Элементы.ГруппаБазаАмортизации.Видимость 			= НЕ ДанныеУчетнойПолитики.НачислениеАмортизацииОСПоМесяцам;
		Элементы.ГруппаНакопленнаяАмортизация.Видимость		= НЕ ДанныеУчетнойПолитики.НачислениеАмортизацииОСПоМесяцам;
		Элементы.РассчитатьСтоимостьМодернизации.Видимость 	= Ложь;
		Элементы.СтоимостьПослеМодернизации.Видимость		= Ложь;
	КонецЕсли;	
	
	Элементы.АмортизацияЗаМесяц.Заголовок = ?(ДанныеУчетнойПолитики.НачислениеАмортизацииОСПоМесяцам, 
												НСтр("ru = 'Амортизация за месяц'"), НСтр("ru = 'Амортизация по дату'"));
												
												
	Если  ДанныеУчетнойПолитики.НачислениеАмортизацииОСПоМесяцам Тогда
		Элементы.АмортизацияЗаМесяц.ЦветТекста =  Новый Цвет(255, 255, 255);
	КонецЕсли;
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура - Создать параметры учета ОС
//
&НаСервере
Процедура СоздатьПараметрыУчетаОС()

	ПараметрыУчетаОС = Новый Структура();
	ПараметрыУчетаОС.Вставить("ИнвентарныйНомер", "");
	ПараметрыУчетаОС.Вставить("НакопленныйИзнос", "");
	ПараметрыУчетаОС.Вставить("ПервоначальнаяСтоимость", "");
	ПараметрыУчетаОС.Вставить("СрокСлужбы", "");
	ПараметрыУчетаОС.Вставить("ГруппаНУ", "");
	ПараметрыУчетаОС.Вставить("ОбъемПродукции", "");
	ПараметрыУчетаОС.Вставить("СпособОтраженияРасходовПоАмортизации", "");
	ПараметрыУчетаОС.Вставить("СпособНачисленияАмортизации", "");
	ПараметрыУчетаОС.Вставить("СчетУчета", "");
	ПараметрыУчетаОС.Вставить("ЛиквидационнаяСтоимость", "");
	ПараметрыУчетаОС.Вставить("МатериалСтен", "");
	ПараметрыУчетаОС.Вставить("ЖилаяПлощадь", "");
	ПараметрыУчетаОС.Вставить("НежилаяПлощадь", "");
	ПараметрыУчетаОС.Вставить("РегиональныйКоэффициент", "");
	ПараметрыУчетаОС.Вставить("ЗональныйКоэффициент", "");
	ПараметрыУчетаОС.Вставить("ОтраслевойКоэффициент", "");
	ПараметрыУчетаОС.Вставить("КодИмущества", "");
	ПараметрыУчетаОС.Вставить("ГруппаИмущества", "");
	ПараметрыУчетаОС.Вставить("КодНазначенияИмущества", "");
	ПараметрыУчетаОС.Вставить("КодПользователяИмущества", "");
	ПараметрыУчетаОС.Вставить("Консервация", "");

КонецПроцедуры // СоздатьПараметрыУчетаОС()

// Процедура - Заполнить параметры учета ОС
//
&НаСервере
Процедура ЗаполнитьПараметрыУчетаОС()
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПараметрыУчетаОССрезПоследних.ИнвентарныйНомер,
		|	ПараметрыУчетаОССрезПоследних.ПервоначальнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.СрокСлужбы КАК СрокСлужбы,
		|	ПараметрыУчетаОССрезПоследних.ОбъемПродукции,
		|	ПараметрыУчетаОССрезПоследних.СпособОтраженияРасходовПоАмортизации,
		|	ПараметрыУчетаОССрезПоследних.СчетУчета,
		|	ПараметрыУчетаОССрезПоследних.ЛиквидационнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации,
		|	ПараметрыУчетаОССрезПоследних.ГруппаНУ,
		|	ПараметрыУчетаОССрезПоследних.Консервация,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК НакопленныйИзнос,
		|	СведенияОбИмуществеСрезПоследних.МатериалСтен,
		|	СведенияОбИмуществеСрезПоследних.ЖилаяПлощадь,
		|	СведенияОбИмуществеСрезПоследних.НежилаяПлощадь,
		|	СведенияОбИмуществеСрезПоследних.РегиональныйКоэффициент,
		|	СведенияОбИмуществеСрезПоследних.ЗональныйКоэффициент,
		|	СведенияОбИмуществеСрезПоследних.ОтраслевойКоэффициент,
		|	СведенияОбИмуществеСрезПоследних.КодИмущества,
		|	СведенияОбИмуществеСрезПоследних.КодНазначенияИмущества,
		|	СведенияОбИмуществеСрезПоследних.КодПользователяИмущества,
		|	СведенияОбИмуществеСрезПоследних.ГруппаИмущества
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(&Период, ОсновноеСредство = &ОсновноеСредство) КАК ПараметрыУчетаОССрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Субконто1 = &ОсновноеСредство) КАК ХозрасчетныйОстатки
		|		ПО ПараметрыУчетаОССрезПоследних.ОсновноеСредство = ХозрасчетныйОстатки.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИмуществе.СрезПоследних(&Период, ОсновноеСредство = &ОсновноеСредство) КАК СведенияОбИмуществеСрезПоследних
		|		ПО ПараметрыУчетаОССрезПоследних.ОсновноеСредство = СведенияОбИмуществеСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОС.СрезПоследних(&Период, Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)) КАК СостоянияОССрезПоследних
		|		ПО ПараметрыУчетаОССрезПоследних.ОсновноеСредство = СостоянияОССрезПоследних.ОсновноеСредство";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Период", ДатаДокумента - 1);
	Запрос.УстановитьПараметр("ОсновноеСредство", Объект.ОсновноеСредство);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ПараметрыУчетаОС, Выборка);
	ПервоначальнаяСтоимость = Выборка.ПервоначальнаяСтоимость;
КонецПроцедуры // ЗаполнитьПараметрыУчетаОС()

// Процедура - Рассчитать стоимость модернизации
//
&НаСервере
Процедура РассчитатьСтоимостьМодернизации()	

	ЛиквидационнаяСтоимость = ПараметрыУчетаОС.ЛиквидационнаяСтоимость;
	ПараметрыОтбора = Новый Структура("Параметр", Перечисления.ПараметрыМодернизацииОС.ЛиквидационнаяСтоимость);
	Массив = Объект.ПараметрыОС.НайтиСтроки(ПараметрыОтбора);
	Если Массив.Количество() > 0 Тогда
		ЛиквидационнаяСтоимость = Массив[0].Значение;	
	КонецЕсли;	
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстаток, 0) КАК СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Период,
		|			Счет = &Счет,
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И Субконто1 = &ОсновноеСредство) КАК ХозрасчетныйОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыУчетаОССрезПоследних.СтоимостьДляРасчетаАмортизации КАК СтоимостьДляРасчетаАмортизации
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство
		|				И Регистратор <> &Ссылка) КАК ПараметрыУчетаОССрезПоследних";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", ДатаДокумента);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Счет", Объект.СчетУчетаМодернизации);
	Запрос.УстановитьПараметр("ОсновноеСредство", Объект.ОсновноеСредство);
		
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаХозрасчетный = МассивРезультатов[0].Выбрать();	
	ВыборкаХозрасчетный.Следующий();
	Объект.СтоимостьМодернизации = ВыборкаХозрасчетный.СуммаОстаток;
	
	ВыборкаПараметрыУчета = МассивРезультатов[1].Выбрать();	
	ВыборкаПараметрыУчета.Следующий();
	Объект.БазаАмортизации = ВыборкаПараметрыУчета.СтоимостьДляРасчетаАмортизации;
	
	Объект.СтоимостьПослеМодернизации = ПервоначальнаяСтоимость + Объект.СтоимостьМодернизации;
	Объект.ОстаточнаяСтоимостьОСПослеМодернизации = Объект.СтоимостьПослеМодернизации - Объект.НакопленнаяАмортизацияПослеМодернизации;
	
	Объект.БазаАмортизацииПослеМодернизации = ?(ВычетНАПриМодернизации,
		Объект.СтоимостьПослеМодернизации - ЛиквидационнаяСтоимость - Объект.НакопленнаяАмортизацияПослеМодернизации,
		Объект.СтоимостьПослеМодернизации - ЛиквидационнаяСтоимость);
КонецПроцедуры

// Процедура - Установить тип параметра в строке табличной части
//
// Параметры:
//  СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - Строка табличной части
//
&НаКлиенте
Процедура УстановитьТипПараметраВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти)

	Если СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СпособОтраженияРасходовПоАмортизации") Тогда
		ТипПоля = "СправочникСсылка.СпособыОтраженияРасходовПоАмортизации";	
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.МатериалСтен") Тогда
		ТипПоля = "СправочникСсылка.ВидыМатериаловСтенНалогНаИмущество";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.РегиональныйКоэффициент") Тогда
		ТипПоля = "СправочникСсылка.РегиональныеКоэффициентыНалогНаИмущество";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ЗональныйКоэффициент") Тогда
		ТипПоля = "СправочникСсылка.ЗональныеКоэффициентыНалогНаИмущество";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.КодНазначенияИмущества") Тогда
		ТипПоля = "СправочникСсылка.ОтраслевыеКоэффициентыНалогНаИмущество";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.КодПользователяИмущества") Тогда
		ТипПоля = "СправочникСсылка.КодыПользователейИмущества";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СчетУчета") Тогда
		ТипПоля = "ПланСчетовСсылка.Хозрасчетный";			
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ГруппаИмущества") Тогда
		ТипПоля = "СправочникСсылка.ГруппыИмущества";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.КодИмущества") Тогда
		ТипПоля = "СправочникСсылка.КодыИмущества";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ГруппаНУ") Тогда
		ТипПоля = "СправочникСсылка.ГруппыНалоговогоУчетаОС";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СпособНачисленияАмортизации") Тогда
		ТипПоля = "ПеречислениеСсылка.СпособыНачисленияАмортизацииОС";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ИнвентарныйНомер") Тогда
		ТипПоля = "Строка";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.Консервация") Тогда
		ТипПоля = "Булево";	
	Иначе
		ТипПоля = "Число";	
	КонецЕсли;
	
	Элементы.ПараметрыЗначение.ОграничениеТипа = Новый ОписаниеТипов(ТипПоля); 
	Элементы.ПараметрыЗначение.ОграничениеТипа.ПривестиЗначение(ТипПоля);		

КонецПроцедуры // УстановитьТипПоляСтрокиТабличнойЧасти()

// Процедура - Заполнить старое значение
//
// Параметры:
//  СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - Строка табличной части
//
&НаКлиенте
Процедура ЗаполнитьСтароеЗначение(СтрокаТабличнойЧасти)
	Если СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ИнвентарныйНомер") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.ИнвентарныйНомер;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.НакопленныйИзнос") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.НакопленныйИзнос;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СрокСлужбы") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.СрокСлужбы;		
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ОбъемПродукцииРабот") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.ОбъемПродукции;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СпособОтраженияРасходовПоАмортизации") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.СпособОтраженияРасходовПоАмортизации;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СчетУчета") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.СчетУчета;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ЛиквидационнаяСтоимость") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.ЛиквидационнаяСтоимость;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.МатериалСтен") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.МатериалСтен;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ЖилаяПлощадь") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.ЖилаяПлощадь;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.НежилаяПлощадь") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.НежилаяПлощадь;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.РегиональныйКоэффициент") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.РегиональныйКоэффициент;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ЗональныйКоэффициент") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.ЗональныйКоэффициент;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ГруппаИмущества") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.ГруппаИмущества;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.КодИмущества") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.КодИмущества;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.КодНазначенияИмущества") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.КодНазначенияИмущества;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.КодПользователяИмущества") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.КодПользователяИмущества;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СпособНачисленияАмортизации") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.СпособНачисленияАмортизации;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ГруппаНУ") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.ГруппаНУ;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.Консервация") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.Консервация;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Значение = СтрокаТабличнойЧасти.СтароеЗначение;

КонецПроцедуры // ЗаполнитьСтароеЗначение()

// Процедура - Расчет амортизации
//
&НаСервере
Процедура РасчетАмортизацииИОстаточнойСтоимости()
	Объект.АмортизацияЗаМесяц = 0;   
	
	// Выбираем последний документ изменения параметров расчета.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СобытияОССрезПоследних.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВременнаяТаблицаСобытияОС
		|ИЗ
		|	РегистрСведений.СобытияОС.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство
		|				И Событие В (&ВидыСобытийОС)
		|				И Регистратор <> &Ссылка) КАК СобытияОССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыУчетаОССрезПоследних.Период КАК Период,
		|	ПараметрыУчетаОССрезПоследних.СчетУчета.ПарныйСчет КАК ПарныйСчетУчета,
		|	ПараметрыУчетаОССрезПоследних.СтоимостьДляРасчетаАмортизации КАК БазаАмортизации
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство
		|				И Регистратор В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаСобытияОС.Регистратор КАК Регистратор
		|					ИЗ
		|						ВременнаяТаблицаСобытияОС КАК ВременнаяТаблицаСобытияОС)) КАК ПараметрыУчетаОССрезПоследних";
	Запрос.УстановитьПараметр("Период", ДатаДокумента);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ОсновноеСредство", Объект.ОсновноеСредство);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	ВидыСобытийОС = Новый СписокЗначений;
	ВидыСобытийОС.Добавить(Перечисления.ВидыСобытийОС.ПринятиеКУчету);
	ВидыСобытийОС.Добавить(Перечисления.ВидыСобытийОС.Модернизация);
	ВидыСобытийОС.Добавить(Перечисления.ВидыСобытийОС.ИзменениеПараметров);
	ВидыСобытийОС.Добавить(Перечисления.ВидыСобытийОС.Прочее);
	Запрос.УстановитьПараметр("ВидыСобытийОС", ВидыСобытийОС);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Отказ = Ложь;
	
	Если Выборка.Следующий() Тогда
		Объект.БазаАмортизации = Выборка.БазаАмортизации;
		ДатаПринятияОС = Выборка.Период;
		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СУММА(ХозрасчетныйОбороты.СуммаОборот) КАК Сумма
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(
			|			,
			|			&КонецПериода,
			|			Регистратор,
			|			,
			|			,
			|			Организация = &Организация
			|				И КорСубконто1 = &ОсновноеСредство,
			|			КорСчет = &Счет,
			|			) КАК ХозрасчетныйОбороты
			|ГДЕ
			|	(ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
			|	ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.МодернизацияОС)
			|	И ХозрасчетныйОбороты.Регистратор <> &Ссылка";
		Запрос.УстановитьПараметр("КонецПериода", ДатаДокумента);
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("ОсновноеСредство", Объект.ОсновноеСредство);
		Запрос.УстановитьПараметр("Счет", Выборка.ПарныйСчетУчета);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Объект.НакопленнаяАмортизация = Выборка.Сумма;
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Выбранное основное средство не принято к учету. Расчет отменен.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.ОсновноеСредство",,Отказ);
	КонецЕсли;	
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли;			
	
	Объект.АмортизацияЗаМесяц = УправлениеВнеоборотнымиАктивамиВызовСервера.РасчетАмортизацииОсновногоСредства(Макс(НачалоМесяца(ДатаДокумента), НачалоДня(ДатаПринятияОС)), 
									КонецДня(ДатаДокумента), Объект.Организация, Объект.ОсновноеСредство, 
									ДанныеУчетнойПолитики.НачислениеАмортизацииОСПоМесяцам);																		
									
	ЛиквидационнаяСтоимость = ЗначениеЛиквидационнойСтоимости();
	Объект.ОстаточнаяСтоимостьОС = ПервоначальнаяСтоимость - Объект.НакопленнаяАмортизация;
	Объект.НакопленнаяАмортизацияПослеМодернизации = Объект.НакопленнаяАмортизация + Объект.АмортизацияЗаМесяц;
	Объект.ОстаточнаяСтоимостьОСПослеМодернизации = ПервоначальнаяСтоимость - Объект.НакопленнаяАмортизацияПослеМодернизации;
	
	//Если ДанныеУчетнойПолитики.НачислениеАмортизацииОСПоМесяцам Тогда
		Объект.АмортизацияЗаМесяцПослеМодернизации = УправлениеВнеоборотнымиАктивамиВызовСервера.РасчетАмортизацииОсновногоСредства(Макс(НачалоМесяца(ДатаДокумента), НачалоДня(ДатаПринятияОС)), 
										КонецДня(ДатаДокумента), Объект.Организация, Объект.ОсновноеСредство, 
										ДанныеУчетнойПолитики.НачислениеАмортизацииОСПоМесяцам, Объект.СтоимостьМодернизации);
	//Иначе
	//	Объект.АмортизацияЗаМесяцПослеМодернизации = Объект.АмортизацияЗаМесяц;
	//КонецЕсли;
	
	Если Объект.Событие = Перечисления.ВидыСобытийОС.ИзменениеПараметров Тогда
		
		Объект.БазаАмортизацииПослеМодернизации = ?(ВычетНАПриМодернизации,
			ПервоначальнаяСтоимость - ЛиквидационнаяСтоимость - Объект.НакопленнаяАмортизацияПослеМодернизации,
			ПервоначальнаяСтоимость - ЛиквидационнаяСтоимость);	
	КонецЕсли;	
КонецПроцедуры // РасчетАмортизацииИОстаточнойСтоимости()

&НаКлиенте
Процедура РасчетЛиквидационнойСтоимости(СтрокаТабличнойЧасти)
	Если СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ЛиквидационнаяСтоимость") Тогда
	  СтрокаТабличнойЧасти.Значение = (Объект.СтоимостьМодернизации + ПервоначальнаяСтоимость) / 100;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗначениеЛиквидационнойСтоимости()
	ЛиквидационнаяСтоимость = 0;
	ПараметрыОтбора = Новый Структура("Параметр", Перечисления.ПараметрыМодернизацииОС.ЛиквидационнаяСтоимость);
	Массив = Объект.ПараметрыОС.НайтиСтроки(ПараметрыОтбора);
	
	Если Массив.Количество() > 0 Тогда
	 	ЛиквидационнаяСтоимость = Массив[0].Значение;
	КонецЕсли;	
	
	Возврат ЛиквидационнаяСтоимость;
КонецФункции // ()

&НаСервере
Процедура ПодставитьСчетУчетаМодернизации(Счет)

	Если Счет.Родитель = ПланыСчетов.Хозрасчетный.ОсновныеСредства Тогда
		Объект.СчетУчетаМодернизации = ПланыСчетов.Хозрасчетный.МодернизацияОС;
	Иначе
		Объект.СчетУчетаМодернизации = ПланыСчетов.Хозрасчетный.МодернизацияНМА;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

