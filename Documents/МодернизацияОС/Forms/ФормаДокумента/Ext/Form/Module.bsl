#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	СоздатьПараметрыУчетаОС();	
	
	Если ЗначениеЗаполнено(Объект.ОсновноеСредство) Тогда
		ЗаполнитьПараметрыУчетаОС();
	КонецЕсли;

	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьДоступностьЭлементов();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПараметрыУчетаОС();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПараметрыОС Цикл 
		ЗаполнитьСтароеЗначение(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	РасчетАмортизацииИОстаточнойСтоимости();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервераПовтИсп.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОсновноеСредство.
//
&НаКлиенте
Процедура ОсновноеСредствоПриИзменении(Элемент)
	ЗаполнитьПараметрыУчетаОС();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПараметрыОС Цикл 
		ЗаполнитьСтароеЗначение(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	РасчетАмортизацииИОстаточнойСтоимости();
	
	//ПолучитьОстаточнуюСтоимость();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Параметры.
//
&НаКлиенте
Процедура ПараметрыПриИзменении(Элемент)
	РасчетАмортизацииИОстаточнойСтоимости();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Событие.
//
&НаКлиенте
Процедура СобытиеПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
	
	Если Объект.Событие = ПолучитьВидСобытияМодернизацияОС() Тогда
		
		Если Объект.ПараметрыОС.Количество() = 0 Тогда
			Для Каждого СтрокаСписка Из Элементы.ПараметрыПараметр.СписокВыбора Цикл	
				СтрокаТабличнойЧасти = Объект.ПараметрыОС.Добавить();
				
				СтрокаТабличнойЧасти.Параметр = СтрокаСписка.Значение;
				
				УстановитьТипПараметраВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);	
				ЗаполнитьСтароеЗначение(СтрокаТабличнойЧасти);
				РасчетЛиквидационнойСтоимости(СтрокаТабличнойЧасти);
			КонецЦикла;
		КонецЕсли;
		//Объект.ПараметрыОС.Очистить();
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СтоимостьМодернизацииБУ.
//
&НаКлиенте
Процедура СтоимостьМодернизацииБУПриИзменении(Элемент)
	Объект.СтоимостьПослеМодернизации = ПервоначальнаяСтоимость + Объект.СтоимостьМодернизации;
	//Объект.ОстаточнаяСтоимостьОС + Объект.СтоимостьМодернизации;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыОС

&НаКлиенте
Процедура ПараметрыОСПриАктивизацииСтроки(Элемент)
	// Получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.ПараметрыОС.ТекущиеДанные;
	
	// Не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьТипПараметраВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОСПараметр.
//
&НаКлиенте
Процедура ОСПараметрПриИзменении(Элемент)
	// Получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.ПараметрыОС.ТекущиеДанные;
	
	// Не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьТипПараметраВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);	
	ЗаполнитьСтароеЗначение(СтрокаТабличнойЧасти);
	РасчетЛиквидационнойСтоимости(СтрокаТабличнойЧасти);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РассчитатьСуммы(Команда)
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ОсновноеСредство) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено Основное средство! Расчет документа отменено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ОсновноеСредство",,Отказ)		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаМодернизации) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен Счет учета модернизации! Расчет документа отменено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.СчетУчетаМодернизации",,Отказ)		
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат
	КонецЕсли;	
	
	Если Объект.ПараметрыОС.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросРассчитатьСтоимостьМодернизации", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Стоимость модернизации будет перерасчитана! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		РасчетАмортизацииИОстаточнойСтоимости();
		РасчитатьСтоимостьМодернизации();
	КонецЕсли;
КонецПроцедуры      

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросРассчитатьСтоимостьМодернизации(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РасчетАмортизацииИОстаточнойСтоимости();
		РасчитатьСтоимостьМодернизации();
	КонецЕсли; 
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()

	МодернизацияОС = Объект.Событие = ПолучитьВидСобытияМодернизацияОС();
	
	Элементы.СчетУчетаМодернизации.Видимость 				  = МодернизацияОС;
	Элементы.СтоимостьМодернизацииБУ.Видимость 				  = МодернизацияОС;
	Элементы.ПервоначальнаяСтоимость.Видимость 				  = МодернизацияОС;
	Элементы.АмортизацияЗаМесяц.Видимость 					  = МодернизацияОС;
	Элементы.ОстаточнаяСтоимостьОС.Видимость 				  = МодернизацияОС;
	Элементы.СтоимостьПослеМодернизации.Видимость 			  = МодернизацияОС;
	Элементы.РассчитатьСтоимостьМодернизации.Видимость 		  = МодернизацияОС;
	Элементы.СпособОтраженияРасходовПоАмортизации.Видимость   = МодернизацияОС;
	//Элементы.ПараметрыОС.Видимость 							  = НЕ МодернизацияОС;

КонецПроцедуры

// Получает значение "Модернизация" перечисления "ВидыСобытийОС".
//
&НаСервере
Функция ПолучитьВидСобытияМодернизацияОС()

	Возврат Перечисления.ВидыСобытийОС.Модернизация;	

КонецФункции // ПолучитьВидСобытияОС()

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура - Создать параметры учета ОС
//
&НаСервере
Процедура СоздатьПараметрыУчетаОС()

	ПараметрыУчетаОС = Новый Структура();
	ПараметрыУчетаОС.Вставить("ИнвентарныйНомер", "");
	ПараметрыУчетаОС.Вставить("НакопленныйИзнос", "");
	ПараметрыУчетаОС.Вставить("ПервоначальнаяСтоимость", "");
	ПараметрыУчетаОС.Вставить("СрокСлужбы", "");
	ПараметрыУчетаОС.Вставить("СрокСлужбыОстаток", "");
	ПараметрыУчетаОС.Вставить("ГруппаНУ", "");
	ПараметрыУчетаОС.Вставить("ОбъемПродукции", "");
	ПараметрыУчетаОС.Вставить("СпособОтраженияРасходовПоАмортизации", "");
	ПараметрыУчетаОС.Вставить("СпособНачисленияАмортизации", "");
	ПараметрыУчетаОС.Вставить("СчетУчета", "");
	ПараметрыУчетаОС.Вставить("ЛиквидационнаяСтоимость", "");
	ПараметрыУчетаОС.Вставить("МатериалСтен", "");
	ПараметрыУчетаОС.Вставить("ЖилаяПлощадь", "");
	ПараметрыУчетаОС.Вставить("НежилаяПлощадь", "");
	ПараметрыУчетаОС.Вставить("РегиональныйКоэффициент", "");
	ПараметрыУчетаОС.Вставить("ЗональныйКоэффициент", "");
	ПараметрыУчетаОС.Вставить("ОтраслевойКоэффициент", "");
	ПараметрыУчетаОС.Вставить("КодИмущества", "");
	ПараметрыУчетаОС.Вставить("ГруппаИмущества", "");
	ПараметрыУчетаОС.Вставить("КодНазначенияИмущества", "");
	ПараметрыУчетаОС.Вставить("КодПользователяИмущества", ""); 

КонецПроцедуры // СоздатьПараметрыУчетаОС()

// Процедура - Заполнить параметры учета ОС
//
&НаСервере
Процедура ЗаполнитьПараметрыУчетаОС()
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПараметрыУчетаОССрезПоследних.ИнвентарныйНомер,
		|	ПараметрыУчетаОССрезПоследних.ПервоначальнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.СрокСлужбы КАК СрокСлужбы,
		|	ПараметрыУчетаОССрезПоследних.СрокСлужбы - ВЫБОР
		|		КОГДА НЕ СостоянияОССрезПоследних.Период ЕСТЬ NULL 
		|				И &Период > СостоянияОССрезПоследних.Период
		|			ТОГДА РАЗНОСТЬДАТ(СостоянияОССрезПоследних.Период, &Период, МЕСЯЦ)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СрокСлужбыОстаток,		
		|	ПараметрыУчетаОССрезПоследних.ОбъемПродукции,
		|	ПараметрыУчетаОССрезПоследних.СпособОтраженияРасходовПоАмортизации,
		|	ПараметрыУчетаОССрезПоследних.СчетУчета,
		|	ПараметрыУчетаОССрезПоследних.ЛиквидационнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации,
		|	ПараметрыУчетаОССрезПоследних.ГруппаНУ,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК НакопленныйИзнос,
		|	СведенияОбИмуществеСрезПоследних.МатериалСтен,
		|	СведенияОбИмуществеСрезПоследних.ЖилаяПлощадь,
		|	СведенияОбИмуществеСрезПоследних.НежилаяПлощадь,
		|	СведенияОбИмуществеСрезПоследних.РегиональныйКоэффициент,
		|	СведенияОбИмуществеСрезПоследних.ЗональныйКоэффициент,
		|	СведенияОбИмуществеСрезПоследних.ОтраслевойКоэффициент,
		|	СведенияОбИмуществеСрезПоследних.КодИмущества,
		|	СведенияОбИмуществеСрезПоследних.КодНазначенияИмущества,
		|	СведенияОбИмуществеСрезПоследних.КодПользователяИмущества,
		|	СведенияОбИмуществеСрезПоследних.ГруппаИмущества
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(&Период, ОсновноеСредство = &ОсновноеСредство) КАК ПараметрыУчетаОССрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Субконто1 = &ОсновноеСредство) КАК ХозрасчетныйОстатки
		|		ПО ПараметрыУчетаОССрезПоследних.ОсновноеСредство = ХозрасчетныйОстатки.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИмуществе.СрезПоследних(&Период, ОсновноеСредство = &ОсновноеСредство) КАК СведенияОбИмуществеСрезПоследних
		|		ПО ПараметрыУчетаОССрезПоследних.ОсновноеСредство = СведенияОбИмуществеСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОС.СрезПоследних(&Период, Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)) КАК СостоянияОССрезПоследних
		|		ПО ПараметрыУчетаОССрезПоследних.ОсновноеСредство = СостоянияОССрезПоследних.ОсновноеСредство";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Период", ДатаДокумента - 1);
	Запрос.УстановитьПараметр("ОсновноеСредство", Объект.ОсновноеСредство);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ПараметрыУчетаОС, Выборка);
	ПервоначальнаяСтоимость = Выборка.ПервоначальнаяСтоимость;
	СпособОтраженияРасходовПоАмортизации = Выборка.СпособОтраженияРасходовПоАмортизации;
КонецПроцедуры // ЗаполнитьПараметрыУчетаОС()

// Процедура - Расчитать стоимость модернизации
//
&НаСервере
Процедура РасчитатьСтоимостьМодернизации()
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстаток, 0) КАК СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Период,
		|			Счет = &Счет,
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И Субконто1 = &ОсновноеСредство) КАК ХозрасчетныйОстатки";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Период", ДатаДокумента);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Счет", Объект.СчетУчетаМодернизации);
	Запрос.УстановитьПараметр("ОсновноеСредство", Объект.ОсновноеСредство);
		
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();	
	ВыборкаДетальныеЗаписи.Следующий();
	Объект.СтоимостьМодернизации = ВыборкаДетальныеЗаписи.СуммаОстаток;
	Объект.СтоимостьПослеМодернизации = ПервоначальнаяСтоимость + Объект.СтоимостьМодернизации;
	//Объект.ОстаточнаяСтоимостьОС + Объект.СтоимостьМодернизации;
КонецПроцедуры

// Процедура - Установить тип параметра в строке табличной части
//
// Параметры:
//  СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - Строка табличной части
//
&НаКлиенте
Процедура УстановитьТипПараметраВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти)

	Если СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СпособОтраженияРасходовПоАмортизации") Тогда
		ТипПоля = "СправочникСсылка.СпособыОтраженияРасходовПоАмортизации";	
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.МатериалСтен") Тогда
		ТипПоля = "СправочникСсылка.ВидыМатериаловСтенНалогНаИмущество";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.РегиональныйКоэффициент") Тогда
		ТипПоля = "СправочникСсылка.РегиональныеКоэффициентыНалогНаИмущество";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ЗональныйКоэффициент") Тогда
		ТипПоля = "СправочникСсылка.ЗональныеКоэффициентыНалогНаИмущество";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.КодНазначенияИмущества") Тогда
		ТипПоля = "СправочникСсылка.ОтраслевыеКоэффициентыНалогНаИмущество";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.КодПользователяИмущества") Тогда
		ТипПоля = "СправочникСсылка.КодыПользователейИмущества";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СчетУчета") Тогда
		ТипПоля = "ПланСчетовСсылка.Хозрасчетный";			
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ГруппаИмущества") Тогда
		ТипПоля = "СправочникСсылка.ГруппыИмущества";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.КодИмущества") Тогда
		ТипПоля = "СправочникСсылка.КодыИмущества";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ГруппаНУ") Тогда
		ТипПоля = "СправочникСсылка.ГруппыНалоговогоУчетаОС";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СпособНачисленияАмортизации") Тогда
		ТипПоля = "ПеречислениеСсылка.СпособыНачисленияАмортизацииОС";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ИнвентарныйНомер") Тогда
		ТипПоля = "Строка";
	Иначе
		ТипПоля = "Число";	
	КонецЕсли;
	
	Элементы.ПараметрыЗначение.ОграничениеТипа = Новый ОписаниеТипов(ТипПоля); 
	Элементы.ПараметрыЗначение.ОграничениеТипа.ПривестиЗначение(ТипПоля);		

КонецПроцедуры // УстановитьТипПоляСтрокиТабличнойЧасти()

// Процедура - Заполнить старое значение
//
// Параметры:
//  СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - Строка табличной части
//
&НаКлиенте
Процедура ЗаполнитьСтароеЗначение(СтрокаТабличнойЧасти)
	Если СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ИнвентарныйНомер") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.ИнвентарныйНомер;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.НакопленныйИзнос") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.НакопленныйИзнос;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СрокСлужбы") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.СрокСлужбы;		
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ОбъемПродукцииРабот") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.ОбъемПродукции;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СпособОтраженияРасходовПоАмортизации") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.СпособОтраженияРасходовПоАмортизации;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СчетУчета") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.СчетУчета;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ЛиквидационнаяСтоимость") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.ЛиквидационнаяСтоимость;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.МатериалСтен") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.МатериалСтен;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ЖилаяПлощадь") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.ЖилаяПлощадь;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.НежилаяПлощадь") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.НежилаяПлощадь;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.РегиональныйКоэффициент") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.РегиональныйКоэффициент;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ЗональныйКоэффициент") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.ЗональныйКоэффициент;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ГруппаИмущества") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.ГруппаИмущества;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.КодИмущества") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.КодИмущества;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.КодНазначенияИмущества") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.КодНазначенияИмущества;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.КодПользователяИмущества") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.КодПользователяИмущества;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СпособНачисленияАмортизации") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.СпособНачисленияАмортизации;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ГруппаНУ") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.ГруппаНУ;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СрокСлужбы") Тогда
		СтрокаТабличнойЧасти.Значение = ПараметрыУчетаОС.СрокСлужбыОстаток;
	Иначе	
		СтрокаТабличнойЧасти.Значение = СтрокаТабличнойЧасти.СтароеЗначение;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСтароеЗначение()

// Процедура - Расчет амортизации
//
&НаСервере
Процедура РасчетАмортизацииИОстаточнойСтоимости()
	Объект.АмортизацияЗаМесяц = 0;   
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПараметрыУчетаОССрезПоследних.Период КАК Период,
		|	ПараметрыУчетаОССрезПоследних.СчетУчета.ПарныйСчет КАК ПарныйСчетУчета
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство
		|				И (Регистратор ССЫЛКА Документ.ПринятиеКУчетуОС
		|					ИЛИ Регистратор ССЫЛКА Документ.МодернизацияОС)
		|				И Регистратор <> &Ссылка) КАК ПараметрыУчетаОССрезПоследних";
	Запрос.УстановитьПараметр("Период", ДатаДокумента);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ОсновноеСредство", Объект.ОсновноеСредство);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Отказ = Ложь;
	
	Если Выборка.Следующий() Тогда
		ДатаПринятияОС = Выборка.Период;
		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СУММА(ХозрасчетныйОбороты.СуммаОборот) КАК Сумма
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(
			|			,
			|			&КонецПериода,
			|			Регистратор,
			|			,
			|			,
			|			Организация = &Организация
			|				И КорСубконто1 = &ОсновноеСредство,
			|			КорСчет = &Счет,
			|			) КАК ХозрасчетныйОбороты
			|ГДЕ
			|	(ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
			|	ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.МодернизацияОС)
			|	И ХозрасчетныйОбороты.Регистратор <> &Ссылка";
		Запрос.УстановитьПараметр("КонецПериода", ДатаДокумента);
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("ОсновноеСредство", Объект.ОсновноеСредство);
		Запрос.УстановитьПараметр("Счет", Выборка.ПарныйСчетУчета);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Объект.НакопленнаяАмортизация = Выборка.Сумма;
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Выбранное основное средство не принято к учету! Рассчет отменен.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ОсновноеСредство",,Отказ);
	КонецЕсли;	
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли;			
	
	Объект.АмортизацияЗаМесяц = УправлениеВнеоборотнымиАктивамиВызовСервера.РасчетАмортизацииОсновногоСредства(ДатаПринятияОС, 
								ДатаДокумента, Объект.Организация, Объект.ОсновноеСредство, ДанныеУчетнойПолитики.НачислениеАмортизацииОСПоМесяцам);
	
	//Если НЕ ДанныеУчетнойПолитики.НачислениеАмортизацииОСПоМесяцам Тогда 
		//Объект.АмортизацияЗаМесяц = УправлениеВнеоборотнымиАктивамиВызовСервера.РасчетАмортизацииОсновногоСредства(ДатаДокумента - 1, 
		//							Объект.Организация, Объект.ОсновноеСредство);
	//КонецЕсли;
								
	Объект.ОстаточнаяСтоимостьОС = ПервоначальнаяСтоимость - Объект.НакопленнаяАмортизация - Объект.АмортизацияЗаМесяц;
КонецПроцедуры // РасчетАмортизацииИОстаточнойСтоимости()

&НаКлиенте
Процедура РасчетЛиквидационнойСтоимости(СтрокаТабличнойЧасти)
	Если СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ЛиквидационнаяСтоимость") тогда
	  СтрокаТабличнойЧасти.Значение = (Объект.СтоимостьМодернизации + ПервоначальнаяСтоимость) / 100;
	КонецЕсли;
КонецПроцедуры

//// Процедура для получения остаточной стоимости ОС
////
//&НаСервере
//Процедура ПолучитьОстаточнуюСтоимость()

//	Запрос = Новый Запрос();
//	Запрос.Текст =
//		"ВЫБРАТЬ
//		|	ПараметрыУчетаОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
//		|	ПараметрыУчетаОССрезПоследних.СчетУчета.ПарныйСчет КАК Счет,
//		|	ПараметрыУчетаОССрезПоследних.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость
//		|ПОМЕСТИТЬ ВременнаяТаблицаПервоначальнаяСтоимость
//		|ИЗ
//		|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
//		|			&Период,
//		|			Организация = &Организация
//		|				И ОсновноеСредство = &ОсновноеСредство) КАК ПараметрыУчетаОССрезПоследних
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ТаблицаПервоначальнаяСтоимость.ПервоначальнаяСтоимость - ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК ОстаточнаяСтоимостьОС
//		|ИЗ
//		|	ВременнаяТаблицаПервоначальнаяСтоимость КАК ТаблицаПервоначальнаяСтоимость
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
//		|				&КонецПериода,
//		|				Счет В
//		|					(ВЫБРАТЬ
//		|						ТаблицаПервоначальнаяСтоимость.Счет
//		|					ИЗ
//		|						ВременнаяТаблицаПервоначальнаяСтоимость КАК ТаблицаПервоначальнаяСтоимость),
//		|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
//		|				Организация = &Организация
//		|					И Субконто1 = &ОсновноеСредство) КАК ХозрасчетныйОстатки
//		|		ПО ТаблицаПервоначальнаяСтоимость.ОсновноеСредство = ХозрасчетныйОстатки.Субконто1";
//	Запрос.УстановитьПараметр("Организация", Объект.Организация);
//	Запрос.УстановитьПараметр("Период", Объект.Дата);
//	Запрос.УстановитьПараметр("КонецПериода", Объект.Дата + 1);
//	Запрос.УстановитьПараметр("ОсновноеСредство", Объект.ОсновноеСредство);
//	Результат = Запрос.Выполнить().Выбрать();
//	
//	Если Результат.Следующий() Тогда
//		Объект.ОстаточнаяСтоимостьОС = Результат.ОстаточнаяСтоимостьОС;
//	Иначе
//		Объект.ОстаточнаяСтоимостьОС = 0;
//	КонецЕсли;
//	
//КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

