
#Область ОбработчикиСлужебные

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Создать параметры учета ОС
//
&НаСервере
Процедура СоздатьПараметрыУчетаОС()

	ПараметрыУчетаОС = Новый Структура();
	ПараметрыУчетаОС.Вставить("ИнвентарныйНомер", "");
	ПараметрыУчетаОС.Вставить("НакопленныйИзнос", "");
	ПараметрыУчетаОС.Вставить("ПервоначальнаяСтоимость", "");
	ПараметрыУчетаОС.Вставить("СрокСлужбы", "");
	ПараметрыУчетаОС.Вставить("СрокСлужбыОстаток", "");
	ПараметрыУчетаОС.Вставить("ГруппаНУ", "");
	ПараметрыУчетаОС.Вставить("ОбъемПродукцииРабот", "");
	ПараметрыУчетаОС.Вставить("СпособОтраженияРасходовПоАмортизации", "");
	ПараметрыУчетаОС.Вставить("СпособНачисленияАмортизации", "");
	ПараметрыУчетаОС.Вставить("СчетУчета", "");
	ПараметрыУчетаОС.Вставить("ЛиквидационнаяСтоимость", "");
	ПараметрыУчетаОС.Вставить("МатериалСтен", "");
	ПараметрыУчетаОС.Вставить("ЖилаяПлощадь", "");
	ПараметрыУчетаОС.Вставить("НежилаяПлощадь", "");
	ПараметрыУчетаОС.Вставить("РегиональныйКоэффициент", "");
	ПараметрыУчетаОС.Вставить("ЗональныйКоэффициент", "");
	ПараметрыУчетаОС.Вставить("ОтраслевойКоэффициент", "");
	ПараметрыУчетаОС.Вставить("КодИмущества", "");
	ПараметрыУчетаОС.Вставить("ГруппаИмущества", "");
	ПараметрыУчетаОС.Вставить("КодНазначенияИмущества", "");
	ПараметрыУчетаОС.Вставить("КодПользователяИмущества", ""); 
	ПараметрыУчетаОС.Вставить("НормаАмортизации", ""); 

КонецПроцедуры // СоздатьПараметрыУчетаОС()

// Процедура - Заполнить параметры учета ОС
//
&НаСервере
Процедура ЗаполнитьПараметрыУчетаОС()
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПараметрыУчетаОССрезПоследних.ИнвентарныйНомер,
		|	ПараметрыУчетаОССрезПоследних.ПервоначальнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.СрокСлужбы КАК СрокСлужбы,
		|	ПараметрыУчетаОССрезПоследних.СрокСлужбы - ВЫБОР
		|		КОГДА НЕ СостоянияОССрезПоследних.Период ЕСТЬ NULL 
		|				И &Период > СостоянияОССрезПоследних.Период
		|			ТОГДА РАЗНОСТЬДАТ(СостоянияОССрезПоследних.Период, &Период, МЕСЯЦ)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СрокСлужбыОстаток,		
		|	ПараметрыУчетаОССрезПоследних.ОбъемПродукцииРабот,
		|	ПараметрыУчетаОССрезПоследних.СпособОтраженияРасходовПоАмортизации,
		|	ПараметрыУчетаОССрезПоследних.СчетУчета,
		|	ПараметрыУчетаОССрезПоследних.ЛиквидационнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации,
		|	ПараметрыУчетаОССрезПоследних.ГруппаНУ,
		|	ПараметрыУчетаОССрезПоследних.НормаАмортизации,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК НакопленныйИзнос,
		|	СведенияОбИмуществеСрезПоследних.МатериалСтен,
		|	СведенияОбИмуществеСрезПоследних.ЖилаяПлощадь,
		|	СведенияОбИмуществеСрезПоследних.НежилаяПлощадь,
		|	СведенияОбИмуществеСрезПоследних.РегиональныйКоэффициент,
		|	СведенияОбИмуществеСрезПоследних.ЗональныйКоэффициент,
		|	СведенияОбИмуществеСрезПоследних.ОтраслевойКоэффициент,
		|	СведенияОбИмуществеСрезПоследних.КодИмущества,
		|	СведенияОбИмуществеСрезПоследних.КодНазначенияИмущества,
		|	СведенияОбИмуществеСрезПоследних.КодПользователяИмущества,
		|	СведенияОбИмуществеСрезПоследних.ГруппаИмущества
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(&Период, ОсновноеСредство = &ОсновноеСредство) КАК ПараметрыУчетаОССрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Субконто1 = &ОсновноеСредство) КАК ХозрасчетныйОстатки
		|		ПО ПараметрыУчетаОССрезПоследних.ОсновноеСредство = ХозрасчетныйОстатки.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИмуществе.СрезПоследних(&Период, ОсновноеСредство = &ОсновноеСредство) КАК СведенияОбИмуществеСрезПоследних
		|		ПО ПараметрыУчетаОССрезПоследних.ОсновноеСредство = СведенияОбИмуществеСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОС.СрезПоследних(&Период, Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)) КАК СостоянияОССрезПоследних
		|		ПО ПараметрыУчетаОССрезПоследних.ОсновноеСредство = СостоянияОССрезПоследних.ОсновноеСредство";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Период", ДатаДокумента - 1);
	Запрос.УстановитьПараметр("ОсновноеСредство", Объект.ОсновноеСредство);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ПараметрыУчетаОС, Выборка);
	ПервоначальнаяСтоимость = Выборка.ПервоначальнаяСтоимость; 
КонецПроцедуры // ЗаполнитьПараметрыУчетаОС()

// Процедура - Расчитать стоимость модернизации
//
&НаСервере
Процедура РасчитатьСтоимостьМодернизации()
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстаток, 0) КАК СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Период,
		|			Счет = &Счет,
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И Субконто1 = &ОсновноеСредство) КАК ХозрасчетныйОстатки";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Период", ДатаДокумента);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Счет", Объект.СчетУчетаМодернизации);
	Запрос.УстановитьПараметр("ОсновноеСредство", Объект.ОсновноеСредство);
		
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();	
	ВыборкаДетальныеЗаписи.Следующий();
	Объект.СтоимостьМодернизации = ВыборкаДетальныеЗаписи.СуммаОстаток;
КонецПроцедуры

// Процедура - Установить тип параметра в строке табличной части
//
// Параметры:
//  СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - Строка табличной части
//
&НаКлиенте
Процедура УстановитьТипПараметраВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти)

	Если СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СпособОтраженияРасходовПоАмортизации") Тогда
		ТипПоля = "СправочникСсылка.СпособыОтраженияРасходовПоАмортизации";	
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.МатериалСтен") Тогда
		ТипПоля = "СправочникСсылка.ВидыМатериаловСтен";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.РегиональныйКоэффициент") Тогда
		ТипПоля = "СправочникСсылка.РегиональныеКоэффициентыНИ";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ЗональныйКоэффициент") Тогда
		ТипПоля = "СправочникСсылка.ЗональныеКоэффициентыНИ";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.КодНазначенияИмущества") Тогда
		ТипПоля = "СправочникСсылка.КлассификаторОтраслевойПринадлежностиНИ";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.КодПользователяИмущества") Тогда
		ТипПоля = "СправочникСсылка.КодыПользователейИмущества";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СчетУчета") Тогда
		ТипПоля = "ПланСчетовСсылка.Хозрасчетный";			
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ГруппаИмущества") Тогда
		ТипПоля = "СправочникСсылка.ГруппыИмущества";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.КодИмущества") Тогда
		ТипПоля = "СправочникСсылка.КодыИмущества";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ГруппаНУ") Тогда
		ТипПоля = "СправочникСсылка.ГруппыНалоговогоУчетаОС";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СпособНачисленияАмортизации") Тогда
		ТипПоля = "ПеречислениеСсылка.СпособыНачисленияАмортизацииОС";
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ИнвентарныйНомер") Тогда
		ТипПоля = "Строка";
	Иначе
		ТипПоля = "Число";	
	КонецЕсли;
	
	Элементы.ПараметрыЗначение.ОграничениеТипа = Новый ОписаниеТипов(ТипПоля); 
	Элементы.ПараметрыЗначение.ОграничениеТипа.ПривестиЗначение(ТипПоля);		

КонецПроцедуры // УстановитьТипПоляСтрокиТабличнойЧасти()

// Процедура - Заполнить старое значение
//
// Параметры:
//  СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - Строка табличной части
//
&НаКлиенте
Процедура ЗаполнитьСтароеЗначение(СтрокаТабличнойЧасти)
	Если СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ИнвентарныйНомер") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.ИнвентарныйНомер;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.НакопленныйИзнос") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.НакопленныйИзнос;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СрокСлужбы") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.СрокСлужбы;		
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ОбъемПродукцииРабот") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.ОбъемПродукцииРабот;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СпособОтраженияРасходовПоАмортизации") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.СпособОтраженияРасходовПоАмортизации;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СчетУчета") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.СчетУчета;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ЛиквидационнаяСтоимость") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.ЛиквидационнаяСтоимость;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.МатериалСтен") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.МатериалСтен;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ЖилаяПлощадь") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.ЖилаяПлощадь;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.НежилаяПлощадь") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.НежилаяПлощадь;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.РегиональныйКоэффициент") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.РегиональныйКоэффициент;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ЗональныйКоэффициент") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.ЗональныйКоэффициент;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ГруппаИмущества") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.ГруппаИмущества;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.КодИмущества") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.КодИмущества;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.КодНазначенияИмущества") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.КодНазначенияИмущества;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.КодПользователяИмущества") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.КодПользователяИмущества;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СпособНачисленияАмортизации") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.СпособНачисленияАмортизации;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ГруппаНУ") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.ГруппаНУ;
	ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.НормаАмортизации") Тогда
		СтрокаТабличнойЧасти.СтароеЗначение = ПараметрыУчетаОС.НормаАмортизации;		
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СрокСлужбы") Тогда
		СтрокаТабличнойЧасти.Значение = ПараметрыУчетаОС.СрокСлужбыОстаток;
	Иначе	
		СтрокаТабличнойЧасти.Значение = СтрокаТабличнойЧасти.СтароеЗначение;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСтароеЗначение()

// Процедура - Расчет амортизации
//
&НаСервере
Процедура РасчетАмортизации()
Объект.СуммаАмортизации = 0;
	Объект.Процент = 1;
	Если Объект.СобытиеОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.ИзменениеПараметров Тогда 
		//проверяем есть ли параметр "Способ отражения расходов по амортизации" и если занчение старое и новое различсется тогда делаем расчет амортизации
		РасчетСуммаАмортизации =  ПровекаПараметровТЧ();
		Если не РасчетСуммаАмортизации Тогда 
			Возврат;
		КонецЕсли;   
	КонецЕсли;
	
	Если НЕ УПП.РасчетАмортизационныхОтчисленийПоМесяцам Тогда 
		Объект.СуммаАмортизации = УправлениеВнеоборотнымиАктивамиВызовСервера.РасчетАмортизацииОсновногоСредства(ДатаДокумента - 1, 
		Объект.Организация, Объект.ОсновноеСредство);
	КонецЕсли;		
КонецПроцедуры // РасчетАмортизации()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ПровекаПараметровТЧ()
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Параметр", Перечисления.ПараметрыМодернизацииОС.СпособОтраженияРасходовПоАмортизации);
	СтрокаПоиска = Объект.ПараметрыОС.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокаПоиска.Количество() <>  0  Тогда 
		Расчитывать = Истина;
	иначе	
        Расчитывать = Ложь;
	КонецЕсли;	
Возврат Расчитывать;	
КонецФункции // ПроверкаПараметрвТЧ()



#КонецОбласти

#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	УПП = БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	СоздатьПараметрыУчетаОС();	
	
	Если ЗначениеЗаполнено(Объект.ОсновноеСредство) Тогда
		ЗаполнитьПараметрыУчетаОС();
	КонецЕсли;

	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
КонецПроцедуры // ПриЧтенииНаСервере()

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетСервер.ПроверитьСуществованиеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеСредствоПриИзменении(Элемент)
	ЗаполнитьПараметрыУчетаОС();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПараметрыОС Цикл 
		ЗаполнитьСтароеЗначение(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	РасчетАмортизации();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПриИзменении(Элемент)
	РасчетАмортизации();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РассчитатьСуммы(Команда)
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ОсновноеСредство) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено Основное средство! Расчет документа отменено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ОсновноеСредство",,Отказ)		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаМодернизации) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен Счет учета модернизации! Расчет документа отменено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.СчетУчетаМодернизации",,Отказ)		
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат
	КонецЕсли;	
	
	Если Объект.ПараметрыОС.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросРассчитатьСтоимостьМодернизации", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Стоимость модернизации будет перерасчитана! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		РасчитатьСтоимостьМодернизации();
		РасчетАмортизации();
	КонецЕсли;
КонецПроцедуры      

#КонецОбласти

#Область ОбработчикиТабличныхЧастей

&НаКлиенте
Процедура ОСПараметрПриИзменении(Элемент)
	// Получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.ПараметрыОС.ТекущиеДанные;
	
	// Не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьТипПараметраВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);	
	ЗаполнитьСтароеЗначение(СтрокаТабличнойЧасти);
	РасчетЛиквидационнойСтоимости(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура РасчетЛиквидационнойСтоимости(СтрокаТабличнойЧасти)
	Если СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ЛиквидационнаяСтоимость") тогда
	  СтрокаТабличнойЧасти.Значение = (Объект.СтоимостьМодернизации + ЭтотОбъект.ПервоначальнаяСтоимость) * Объект.Процент / 100;
	КонецЕсли;
КонецПроцедуры 


#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросРассчитатьСтоимостьМодернизации(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РасчитатьСтоимостьМодернизации();
		РасчетАмортизации();
	КонецЕсли; 
КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

