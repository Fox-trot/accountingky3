#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПроцедурыПроведенияДокумента

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаХозрасчетный(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаПараметрыУчетаОССрезПоследних.СчетУчета КАК СчетДт,
		|	ВременнаяТаблицаШапка.СчетУчетаМодернизации КАК СчетКт,
		|	ВременнаяТаблицаШапка.ОсновноеСредство КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ВременнаяТаблицаШапка.ОсновноеСредство КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВременнаяТаблицаШапка.СтоимостьМодернизации КАК Сумма,
		|	""Стоимость модернизации"" КАК Содержание
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаПараметрыУчетаОССрезПоследних КАК ВременнаяТаблицаПараметрыУчетаОССрезПоследних
		|		ПО (ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаПараметры КАК ВременнаяТаблицаПараметры
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВременнаяТаблицаШапка.СтоимостьМодернизации <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаПараметры.СчетУчета,
		|	ВременнаяТаблицаПараметрыУчетаОССрезПоследних.СчетУчета,
		|	ВременнаяТаблицаШапка.ОсновноеСредство,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаШапка.ОсновноеСредство,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаПараметрыУчетаОССрезПоследних.ПервоначальнаяСтоимость + ВременнаяТаблицаШапка.СтоимостьМодернизации,
		|	""Модернизация - Перенос первоначальной стоимости на новый счет учета""
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаПараметрыУчетаОССрезПоследних КАК ВременнаяТаблицаПараметрыУчетаОССрезПоследних
		|		ПО (ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаПараметры КАК ВременнаяТаблицаПараметры
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВременнаяТаблицаПараметры.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|	И ВременнаяТаблицаПараметры.СчетУчета <> ВременнаяТаблицаПараметрыУчетаОССрезПоследних.СчетУчета
		|	И ВременнаяТаблицаПараметрыУчетаОССрезПоследних.ПервоначальнаяСтоимость + ВременнаяТаблицаШапка.СтоимостьМодернизации <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаПараметрыУчетаОССрезПоследних.СчетЗатратПоАмортизации,
		|	ВременнаяТаблицаПараметрыУчетаОССрезПоследних.СчетУчетаАмортизации,
		|	ВременнаяТаблицаШапка.ОсновноеСредство,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаШапка.ОсновноеСредство,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаПараметры.НакопленныйИзносРазница,
		|	""Накопленный износ""
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаПараметрыУчетаОССрезПоследних КАК ВременнаяТаблицаПараметрыУчетаОССрезПоследних
		|		ПО (ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаПараметры КАК ВременнаяТаблицаПараметры
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВременнаяТаблицаПараметры.НакопленныйИзносРазница <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаПараметры.СчетУчета.ПарныйСчет,
		|	ВременнаяТаблицаПараметрыУчетаОССрезПоследних.СчетУчетаАмортизации,
		|	ВременнаяТаблицаШапка.ОсновноеСредство,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаШапка.ОсновноеСредство,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаНакопленныйИзнос.НакопленныйИзнос + ВременнаяТаблицаПараметры.НакопленныйИзносРазница,
		|	""Модернизация - Перенос накопленного износа на новый счет учета""
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаПараметрыУчетаОССрезПоследних КАК ВременнаяТаблицаПараметрыУчетаОССрезПоследних
		|		ПО (ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаПараметры КАК ВременнаяТаблицаПараметры
		|		ПО (ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаНакопленныйИзнос КАК ВременнаяТаблицаНакопленныйИзнос
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВременнаяТаблицаПараметры.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|	И ВременнаяТаблицаПараметры.СчетУчета <> ВременнаяТаблицаПараметрыУчетаОССрезПоследних.СчетУчета
		|	И ВременнаяТаблицаНакопленныйИзнос.НакопленныйИзнос + ВременнаяТаблицаПараметры.НакопленныйИзносРазница <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаПараметрыУчетаОССрезПоследних.СчетЗатратПоАмортизации,
		|	ВременнаяТаблицаПараметрыУчетаОССрезПоследних.СчетУчетаАмортизации,
		|	ВременнаяТаблицаПараметрыУчетаОССрезПоследних.СпособОтраженияРасходовПоАмортизации.Субконто1,
		|	ВременнаяТаблицаПараметрыУчетаОССрезПоследних.СпособОтраженияРасходовПоАмортизации.Субконто2,
		|	ВременнаяТаблицаПараметрыУчетаОССрезПоследних.СпособОтраженияРасходовПоАмортизации.Субконто3,
		|	ВременнаяТаблицаШапка.ОсновноеСредство,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаШапка.СуммаАмортизации,
		|	""Начисление амортизации""
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаПараметрыУчетаОССрезПоследних КАК ВременнаяТаблицаПараметрыУчетаОССрезПоследних
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаШапка.СуммаАмортизации = 0";
	РезультатЗапроса = Запрос.Выполнить(); 
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", РезультатЗапроса.Выгрузить());
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПараметрыУчетаОС(ДокументСсылка, СтруктураДополнительныеСвойства)
	 	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.ОсновноеСредство,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.ИнвентарныйНомер = """"
		|			ТОГДА ВременнаяТаблицаПараметрыУчетаОССрезПоследних.ИнвентарныйНомер
		|		ИНАЧЕ ТаблицаДокумента.ИнвентарныйНомер
		|	КОНЕЦ КАК ИнвентарныйНомер,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|			ТОГДА ВременнаяТаблицаПараметрыУчетаОССрезПоследних.СчетУчета
		|		ИНАЧЕ ТаблицаДокумента.СчетУчета
		|	КОНЕЦ КАК СчетУчета,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.ГруппаНУ = ЗНАЧЕНИЕ(Справочник.ГруппыНалоговогоУчетаОС.ПустаяСсылка)
		|			ТОГДА ВременнаяТаблицаПараметрыУчетаОССрезПоследних.ГруппаНУ
		|		ИНАЧЕ ТаблицаДокумента.ГруппаНУ
		|	КОНЕЦ КАК ГруппаНУ,
		|	ВременнаяТаблицаПараметрыУчетаОССрезПоследних.ПервоначальнаяСтоимость + ВременнаяТаблицаШапка.СтоимостьМодернизации КАК ПервоначальнаяСтоимость,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.ЛиквидационнаяСтоимость = 0
		|			ТОГДА ВременнаяТаблицаПараметрыУчетаОССрезПоследних.ЛиквидационнаяСтоимость
		|		ИНАЧЕ ТаблицаДокумента.ЛиквидационнаяСтоимость
		|	КОНЕЦ КАК ЛиквидационнаяСтоимость,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.СрокСлужбы = 0
		|			ТОГДА ВременнаяТаблицаПараметрыУчетаОССрезПоследних.СрокСлужбы
		|		ИНАЧЕ ТаблицаДокумента.СрокСлужбы
		|	КОНЕЦ КАК СрокСлужбы,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка)
		|			ТОГДА ВременнаяТаблицаПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации
		|		ИНАЧЕ ТаблицаДокумента.СпособНачисленияАмортизации
		|	КОНЕЦ КАК СпособНачисленияАмортизации,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.СпособОтраженияРасходовПоАмортизации = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка)
		|			ТОГДА ВременнаяТаблицаПараметрыУчетаОССрезПоследних.СпособОтраженияРасходовПоАмортизации
		|		ИНАЧЕ ТаблицаДокумента.СпособОтраженияРасходовПоАмортизации
		|	КОНЕЦ КАК СпособОтраженияРасходовПоАмортизации,
		|	ВременнаяТаблицаПараметрыУчетаОССрезПоследних.ПараметрВыработки КАК ПараметрВыработки,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.ОбъемПродукцииРабот = 0
		|			ТОГДА ВременнаяТаблицаПараметрыУчетаОССрезПоследних.ОбъемПродукцииРабот
		|		ИНАЧЕ ТаблицаДокумента.ОбъемПродукцииРабот
		|	КОНЕЦ КАК ОбъемПродукцииРабот,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.НормаАмортизации = 0
		|			ТОГДА ВременнаяТаблицаПараметрыУчетаОССрезПоследних.НормаАмортизации
		|		ИНАЧЕ ТаблицаДокумента.НормаАмортизации
		|	КОНЕЦ КАК НормаАмортизации
		|ИЗ
		|	ВременнаяТаблицаПараметры КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаПараметрыУчетаОССрезПоследних КАК ВременнаяТаблицаПараметрыУчетаОССрезПоследних
		|			ПО (ИСТИНА)
		|		ПО (ИСТИНА)
		|ГДЕ
		|	(НЕ ВременнаяТаблицаШапка.СтоимостьМодернизации = 0
		|			ИЛИ ТаблицаДокумента.ФормироватьПараметрыУчетаОС)";
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(ДокументСсылка.МоментВремени(),ВидГраницы.Исключая));
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПараметрыУчетаОС", РезультатЗапроса.Выгрузить()); 
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСобытияОС(ДокументСсылка, СтруктураДополнительныеСвойства) 
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.ОсновноеСредство,
		|	ВременнаяТаблицаШапка.СобытиеОС КАК Событие,
		|	ВременнаяТаблицаШапка.Номер КАК НомерДокумента,
		|	""Модернизация ОС"" КАК НазваниеДокумента
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСобытияОС", РезультатЗапроса.Выгрузить());
КонецПроцедуры 

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДвижениеОСНУ(ДокументСсылка, СтруктураДополнительныеСвойства) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.ОсновноеСредство,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.ГруппаНУ = ЗНАЧЕНИЕ(Справочник.ГруппыНалоговогоУчетаОС.ПустаяСсылка)
		|			ТОГДА ПараметрыУчетаОССрезПоследних.ГруппаНУ
		|		ИНАЧЕ ТаблицаДокумента.ГруппаНУ
		|	КОНЕЦ КАК ГруппаНУ,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаШапка.СтоимостьМодернизации > 0
		|			ТОГДА ВременнаяТаблицаШапка.СтоимостьМодернизации
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Поступление,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаШапка.СтоимостьМодернизации > 0
		|			ТОГДА ВременнаяТаблицаШапка.СтоимостьМодернизации * (12 - МЕСЯЦ(ВременнаяТаблицаШапка.Дата) + 0.5) / 12
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ТекущееПоступление
		|ИЗ
		|	ВременнаяТаблицаПараметры КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыУчетаОС.СрезПоследних(&МоментВремени, ) КАК ПараметрыУчетаОССрезПоследних
		|			ПО ВременнаяТаблицаШапка.ОсновноеСредство = ПараметрыУчетаОССрезПоследних.ОсновноеСредство
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВременнаяТаблицаШапка.СтоимостьМодернизации <> 0";
				
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(ДокументСсылка.МоментВремени(),ВидГраницы.Исключая));	
		
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвижениеОСНУ", РезультатЗапроса.Выгрузить());
		
КонецПроцедуры 

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСведенияОбИмуществе(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.ОсновноеСредство,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.ГруппаИмущества = ЗНАЧЕНИЕ(Справочник.ГруппыИмущества.ПустаяСсылка)
		|			ТОГДА СведенияОбИмуществеСрезПоследних.ГруппаИмущества
		|		ИНАЧЕ ТаблицаДокумента.ГруппаИмущества
		|	КОНЕЦ КАК ГруппаИмущества,
		|	СведенияОбИмуществеСрезПоследних.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.МатериалСтен = ЗНАЧЕНИЕ(Справочник.ВидыМатериаловСтен.ПустаяСсылка)
		|			ТОГДА СведенияОбИмуществеСрезПоследних.МатериалСтен
		|		ИНАЧЕ ТаблицаДокумента.МатериалСтен
		|	КОНЕЦ КАК МатериалСтен,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.ЖилаяПлощадь = 0
		|			ТОГДА СведенияОбИмуществеСрезПоследних.ЖилаяПлощадь
		|		ИНАЧЕ ТаблицаДокумента.ЖилаяПлощадь
		|	КОНЕЦ КАК ЖилаяПлощадь,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.НежилаяПлощадь = 0
		|			ТОГДА СведенияОбИмуществеСрезПоследних.НежилаяПлощадь
		|		ИНАЧЕ ТаблицаДокумента.НежилаяПлощадь
		|	КОНЕЦ КАК НежилаяПлощадь,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.РегиональныйКоэффициент = ЗНАЧЕНИЕ(Справочник.РегиональныеКоэффициентыНИ.ПустаяСсылка)
		|			ТОГДА СведенияОбИмуществеСрезПоследних.РегиональныйКоэффициент
		|		ИНАЧЕ ТаблицаДокумента.РегиональныйКоэффициент
		|	КОНЕЦ КАК РегиональныйКоэффициент,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.ЗональныйКоэффициент = ЗНАЧЕНИЕ(Справочник.ЗональныеКоэффициентыНИ.ПустаяСсылка)
		|			ТОГДА СведенияОбИмуществеСрезПоследних.ЗональныйКоэффициент
		|		ИНАЧЕ ТаблицаДокумента.ЗональныйКоэффициент
		|	КОНЕЦ КАК ЗональныйКоэффициент,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.ОтраслевойКоэффициент = 0
		|			ТОГДА СведенияОбИмуществеСрезПоследних.ОтраслевойКоэффициент
		|		ИНАЧЕ ТаблицаДокумента.ОтраслевойКоэффициент
		|	КОНЕЦ КАК ОтраслевойКоэффициент,
		|	СведенияОбИмуществеСрезПоследних.КатегорияОбъектаИмущества КАК КатегорияОбъектаИмущества,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.КодНазначенияИмущества = ЗНАЧЕНИЕ(Справочник.КлассификаторОтраслевойПринадлежностиНИ.ПустаяСсылка)
		|			ТОГДА СведенияОбИмуществеСрезПоследних.КодНазначенияИмущества
		|		ИНАЧЕ ТаблицаДокумента.КодНазначенияИмущества
		|	КОНЕЦ КАК КодНазначенияИмущества,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.КодПользователяИмущества = ЗНАЧЕНИЕ(Справочник.КодыПользователейИмущества.ПустаяСсылка)
		|			ТОГДА СведенияОбИмуществеСрезПоследних.КодПользователяИмущества
		|		ИНАЧЕ ТаблицаДокумента.КодПользователяИмущества
		|	КОНЕЦ КАК КодПользователяИмущества,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.КодИмущества = ЗНАЧЕНИЕ(Справочник.КодыИмущества.ПустаяСсылка)
		|			ТОГДА СведенияОбИмуществеСрезПоследних.КодИмущества
		|		ИНАЧЕ ТаблицаДокумента.КодИмущества
		|	КОНЕЦ КАК КодИмущества
		|ИЗ
		|	ВременнаяТаблицаПараметры КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИмуществе.СрезПоследних(&МоментВремени, ) КАК СведенияОбИмуществеСрезПоследних
		|			ПО ВременнаяТаблицаШапка.ОсновноеСредство = СведенияОбИмуществеСрезПоследних.ОсновноеСредство
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаДокумента.ФормироватьСведенияОбИмуществе";
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(ДокументСсылка.МоментВремени(),ВидГраницы.Исключая));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСведенияОбИмуществе", РезультатЗапроса.Выгрузить());
КонецПроцедуры // СформироватьТаблицаСведенияОбИмуществе

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	// Предварительно свернутая таблица параметров
	ТаблицаПараметров = ПолучитьВсеПараметры(ДокументСсылка);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =	
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Дата,
		|	ТаблицаДокумента.Номер,
		|	ТаблицаДокумента.СобытиеОС,
		|	ТаблицаДокумента.ОсновноеСредство,
		|	ТаблицаДокумента.Организация,
		|	ТаблицаДокумента.СтоимостьМодернизации,
		|	ТаблицаДокумента.СуммаАмортизации,
		|	ТаблицаДокумента.СчетУчетаМодернизации
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.МодернизацияОС КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.ФормироватьПараметрыУчетаОС,
		|	ТаблицаДокумента.ФормироватьСведенияОбИмуществе,
		|	ТаблицаДокумента.ИнвентарныйНомер,
		|	ТаблицаДокумента.ГруппаНУ,
		|	ТаблицаДокумента.НакопленныйИзносРазница,
		|	ТаблицаДокумента.СрокСлужбы,
		|	ТаблицаДокумента.ОбъемПродукцииРабот,
		|	ТаблицаДокумента.СпособНачисленияАмортизации,
		|	ТаблицаДокумента.СпособОтраженияРасходовПоАмортизации,
		|	ТаблицаДокумента.СчетУчета,
		|	ТаблицаДокумента.ЛиквидационнаяСтоимость,
		|	ТаблицаДокумента.МатериалСтен,
		|	ТаблицаДокумента.ЖилаяПлощадь,
		|	ТаблицаДокумента.НежилаяПлощадь,
		|	ТаблицаДокумента.РегиональныйКоэффициент,
		|	ТаблицаДокумента.ЗональныйКоэффициент,
		|	ТаблицаДокумента.ОтраслевойКоэффициент,
		|	ТаблицаДокумента.ГруппаИмущества,
		|	ТаблицаДокумента.КодИмущества,
		|	ТаблицаДокумента.КодНазначенияИмущества,
		|	ТаблицаДокумента.КодПользователяИмущества,
		|	ТаблицаДокумента.НормаАмортизации
		|ПОМЕСТИТЬ ВременнаяТаблицаПараметры
		|ИЗ
		|	&ТаблицаПараметров КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыУчетаОССрезПоследних.ИнвентарныйНомер,
		|	ПараметрыУчетаОССрезПоследних.СчетУчета,
		|	ПараметрыУчетаОССрезПоследних.СчетУчета.ПарныйСчет КАК СчетУчетаАмортизации,
		|	ПараметрыУчетаОССрезПоследних.ГруппаНУ,
		|	ПараметрыУчетаОССрезПоследних.ПервоначальнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.ЛиквидационнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.СрокСлужбы,
		|	ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации,
		|	ПараметрыУчетаОССрезПоследних.СпособОтраженияРасходовПоАмортизации,
		|	ПараметрыУчетаОССрезПоследних.ПараметрВыработки,
		|	ПараметрыУчетаОССрезПоследних.ОбъемПродукцииРабот,
		|	ПараметрыУчетаОССрезПоследних.КоэффициентАмортизации,
		|	ПараметрыУчетаОССрезПоследних.КоэффициентУскорения,
		|	ПараметрыУчетаОССрезПоследних.СпособПоступления,
		|	ПараметрыУчетаОССрезПоследних.НормаАмортизации,
		|	ПараметрыУчетаОССрезПоследних.ДатаВводаВЭксплуатацию,
		|	ПараметрыУчетаОССрезПоследних.СпособОтраженияРасходовПоАмортизации.СчетЗатрат КАК СчетЗатратПоАмортизации
		|ПОМЕСТИТЬ ВременнаяТаблицаПараметрыУчетаОССрезПоследних
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаШапка.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка)
		|				И НЕ Регистратор = &Ссылка) КАК ПараметрыУчетаОССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК НакопленныйИзнос
		|ПОМЕСТИТЬ ВременнаяТаблицаНакопленныйИзнос
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), ) КАК ХозрасчетныйОстатки";
	Запрос.УстановитьПараметр("Период", СтруктураДополнительныеСвойства.ДляПроведения.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ТаблицаПараметров", ТаблицаПараметров);
	Запрос.Выполнить();    		
			
	СформироватьТаблицаПараметрыУчетаОС(ДокументСсылка, СтруктураДополнительныеСвойства); 
	СформироватьТаблицаСобытияОС(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаСведенияОбИмуществе(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДвижениеОСНУ(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаХозрасчетный(ДокументСсылка, СтруктураДополнительныеСвойства);	
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

Функция ПолучитьВсеПараметры(ДокументСсылка)
	МассивСтрока = Новый Массив;
	МассивСтрока.Добавить(Тип("Строка"));
	КвалификаторСтроки9	= Новый КвалификаторыСтроки(9);
	
	МассивЧисло = Новый Массив;
	МассивЧисло.Добавить(Тип("Число"));
	КвалификаторЧисла152 	= Новый КвалификаторыЧисла(15, 2);	
	КвалификаторЧисла102 	= Новый КвалификаторыЧисла(10, 2);
	КвалификаторЧисла10 	= Новый КвалификаторыЧисла(10, 0);
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("ФормироватьПараметрыУчетаОС",			Новый ОписаниеТипов("Булево"));
	ТаблицаПараметров.Колонки.Добавить("ФормироватьСведенияОбИмуществе",		Новый ОписаниеТипов("Булево"));
	ТаблицаПараметров.Колонки.Добавить("ИнвентарныйНомер", 						Новый ОписаниеТипов(МассивСтрока, КвалификаторСтроки9));
	ТаблицаПараметров.Колонки.Добавить("НакопленныйИзносРазница", 				Новый ОписаниеТипов(МассивЧисло, КвалификаторЧисла152));
	ТаблицаПараметров.Колонки.Добавить("ГруппаНУ", 								Новый ОписаниеТипов("СправочникСсылка.ГруппыНалоговогоУчетаОС"));
	ТаблицаПараметров.Колонки.Добавить("СрокСлужбы", 							Новый ОписаниеТипов(МассивЧисло, КвалификаторЧисла10));
	ТаблицаПараметров.Колонки.Добавить("ОбъемПродукцииРабот", 					Новый ОписаниеТипов(МассивЧисло, КвалификаторЧисла10));
	ТаблицаПараметров.Колонки.Добавить("СпособНачисленияАмортизации", 			Новый ОписаниеТипов("ПеречислениеСсылка.СпособыНачисленияАмортизацииОС"));
	ТаблицаПараметров.Колонки.Добавить("СпособОтраженияРасходовПоАмортизации", 	Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаПараметров.Колонки.Добавить("СчетУчета", 							Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаПараметров.Колонки.Добавить("ЛиквидационнаяСтоимость", 				Новый ОписаниеТипов(МассивЧисло, КвалификаторЧисла152));
	ТаблицаПараметров.Колонки.Добавить("МатериалСтен", 							Новый ОписаниеТипов("СправочникСсылка.ВидыМатериаловСтен"));
	ТаблицаПараметров.Колонки.Добавить("ЖилаяПлощадь", 							Новый ОписаниеТипов(МассивЧисло, КвалификаторЧисла102));
	ТаблицаПараметров.Колонки.Добавить("НежилаяПлощадь", 						Новый ОписаниеТипов(МассивЧисло, КвалификаторЧисла102));
	ТаблицаПараметров.Колонки.Добавить("РегиональныйКоэффициент", 				Новый ОписаниеТипов("СправочникСсылка.РегиональныеКоэффициентыНИ"));
	ТаблицаПараметров.Колонки.Добавить("ЗональныйКоэффициент", 					Новый ОписаниеТипов("СправочникСсылка.ЗональныеКоэффициентыНИ"));
	ТаблицаПараметров.Колонки.Добавить("ОтраслевойКоэффициент", 				Новый ОписаниеТипов(МассивЧисло, КвалификаторЧисла102));
	ТаблицаПараметров.Колонки.Добавить("ГруппаИмущества", 						Новый ОписаниеТипов("СправочникСсылка.ГруппыИмущества"));
	ТаблицаПараметров.Колонки.Добавить("КодИмущества", 							Новый ОписаниеТипов("СправочникСсылка.КодыИмущества"));
	ТаблицаПараметров.Колонки.Добавить("КодНазначенияИмущества",	 			Новый ОписаниеТипов("СправочникСсылка.КлассификаторОтраслевойПринадлежностиНИ"));	
	ТаблицаПараметров.Колонки.Добавить("КодПользователяИмущества", 				Новый ОписаниеТипов("СправочникСсылка.КодыПользователейИмущества"));	
	ТаблицаПараметров.Колонки.Добавить("НормаАмортизации", 						Новый ОписаниеТипов(МассивЧисло, КвалификаторЧисла152));
	
	СтрокаПараметров = ТаблицаПараметров.Добавить();
	
	Для каждого СтрокаТабличнойЧасти Из ДокументСсылка.ПараметрыОС Цикл
		Если СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ИнвентарныйНомер") Тогда
			СтрокаПараметров.ФормироватьПараметрыУчетаОС = Истина;
			СтрокаПараметров.ИнвентарныйНомер = СтрокаТабличнойЧасти.Значение;
		ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.НакопленныйИзнос") Тогда
			СтрокаПараметров.НакопленныйИзносРазница = СтрокаТабличнойЧасти.Значение - СтрокаТабличнойЧасти.СтароеЗначение;
		ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ГруппаНУ") Тогда
			СтрокаПараметров.ФормироватьПараметрыУчетаОС = Истина;
			СтрокаПараметров.ГруппаНУ = СтрокаТабличнойЧасти.Значение;
		ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СрокСлужбы") Тогда
			СтрокаПараметров.ФормироватьПараметрыУчетаОС = Истина;
			СтрокаПараметров.СрокСлужбы = СтрокаТабличнойЧасти.Значение;		
		ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ОбъемПродукцииРабот") Тогда
			СтрокаПараметров.ФормироватьПараметрыУчетаОС = Истина;
			СтрокаПараметров.ОбъемПродукцииРабот = СтрокаТабличнойЧасти.Значение;
		ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СпособНачисленияАмортизации") Тогда
			СтрокаПараметров.ФормироватьПараметрыУчетаОС = Истина;
			СтрокаПараметров.СпособНачисленияАмортизации = СтрокаТабличнойЧасти.Значение;
		ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СпособОтраженияРасходовПоАмортизации") Тогда
			СтрокаПараметров.ФормироватьПараметрыУчетаОС = Истина;
			СтрокаПараметров.СпособОтраженияРасходовПоАмортизации = СтрокаТабличнойЧасти.Значение;
		ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.СчетУчета") Тогда
			СтрокаПараметров.ФормироватьПараметрыУчетаОС = Истина;
			СтрокаПараметров.СчетУчета = СтрокаТабличнойЧасти.Значение;
		ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ЛиквидационнаяСтоимость") Тогда
			СтрокаПараметров.ФормироватьПараметрыУчетаОС = Истина;
			СтрокаПараметров.ЛиквидационнаяСтоимость = СтрокаТабличнойЧасти.Значение;
		ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.НормаАмортизации") Тогда
			СтрокаПараметров.ФормироватьПараметрыУчетаОС = Истина;
			СтрокаПараметров.НормаАмортизации = СтрокаТабличнойЧасти.Значение;
			
		//////////////////////////////////////////////////	
		
		ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.МатериалСтен") Тогда
			СтрокаПараметров.ФормироватьСведенияОбИмуществе = Истина;
			СтрокаПараметров.МатериалСтен = СтрокаТабличнойЧасти.Значение;
		ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ЖилаяПлощадь") Тогда
			СтрокаПараметров.ФормироватьСведенияОбИмуществе = Истина;
			СтрокаПараметров.ЖилаяПлощадь = СтрокаТабличнойЧасти.Значение;
		ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.НежилаяПлощадь") Тогда
			СтрокаПараметров.ФормироватьСведенияОбИмуществе = Истина;
			СтрокаПараметров.НежилаяПлощадь = СтрокаТабличнойЧасти.Значение;
		ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.РегиональныйКоэффициент") Тогда
			СтрокаПараметров.ФормироватьСведенияОбИмуществе = Истина;
			СтрокаПараметров.РегиональныйКоэффициент = СтрокаТабличнойЧасти.Значение;
		ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ЗональныйКоэффициент") Тогда
			СтрокаПараметров.ФормироватьСведенияОбИмуществе = Истина;
			СтрокаПараметров.ЗональныйКоэффициент = СтрокаТабличнойЧасти.Значение;
		ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ОтраслевойКоэффициент") Тогда
			СтрокаПараметров.ФормироватьСведенияОбИмуществе = Истина;
			СтрокаПараметров.ОтраслевойКоэффициент = СтрокаТабличнойЧасти.Значение;			
		ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.ГруппаИмущества") Тогда
			СтрокаПараметров.ФормироватьСведенияОбИмуществе = Истина;
			СтрокаПараметров.ГруппаИмущества = СтрокаТабличнойЧасти.Значение;
		ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.КодИмущества") Тогда
			СтрокаПараметров.ФормироватьСведенияОбИмуществе = Истина;
			СтрокаПараметров.КодИмущества = СтрокаТабличнойЧасти.Значение;
		ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.КодНазначенияИмущества") Тогда
			СтрокаПараметров.ФормироватьСведенияОбИмуществе = Истина;
			СтрокаПараметров.КодНазначенияИмущества = СтрокаТабличнойЧасти.Значение;
		ИначеЕсли СтрокаТабличнойЧасти.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыМодернизацииОС.КодПользователяИмущества") Тогда
			СтрокаПараметров.ФормироватьСведенияОбИмуществе = Истина;
			СтрокаПараметров.КодПользователяИмущества = СтрокаТабличнойЧасти.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПараметров;
	
КонецФункции // ПолучитьВсеПараметры()()

#КонецОбласти

#КонецЕсли