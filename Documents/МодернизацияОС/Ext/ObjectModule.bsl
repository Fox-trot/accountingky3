#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(СобытиеОС) Тогда
		СобытиеОС = ПолучитьСобытиеОС();	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.МодернизацияОС.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьПараметрыУчетаОС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСобытияОС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСведенияОбИмуществе(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьДвижениеОСНУ(ДополнительныеСвойства, Движения, Отказ);     	
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	ПроверяемыеРеквизиты.Добавить("ПараметрыОС");
	
	Если СтоимостьМодернизации = 0 
		И СобытиеОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.Модернизация Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать событие ОС с видом события ""Изменение параметров""!'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.СобытиеОС",
			Отказ);
	ИначеЕсли СтоимостьМодернизации <> 0 
		И СобытиеОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.ИзменениеПараметров Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать событие ОС с видом события ""Модернизация""!'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.СобытиеОС",
			Отказ);
	КонецЕсли;
	
	// Предварительный контроль
	ВыполнитьПредварительныйКонтроль(Отказ);	
КонецПроцедуры

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

// Выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияОССрезПоследних.ОсновноеСредство,
		|	СостоянияОССрезПоследних.Состояние,
		|	СостоянияОССрезПоследних.Регистратор
		|ИЗ
		|	РегистрСведений.СостоянияОС.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство
		|				И НЕ Регистратор = &Ссылка) КАК СостоянияОССрезПоследних";
	Запрос.Параметры.Вставить("Период", Дата);	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);	
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("ОсновноеСредство", ОсновноеСредство);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Снято с учета или передано
		Если ВыборкаДетальныеЗаписи.Состояние = Перечисления.ВидыСостоянийОС.СнятоСУчета
			Или ВыборкаДетальныеЗаписи.Состояние = Перечисления.ВидыСостоянийОС.Передано Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Основное средство ""%1"" снято с учета документом ""%2"".'"), 
				ВыборкаДетальныеЗаписи.ОсновноеСредство, ВыборкаДетальныеЗаписи.Регистратор);		
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
				ЭтотОбъект,   
				ТекстСообщения,
				,
				,
				"ОсновноеСредство",
				Отказ);
		КонецЕсли;		
	Иначе
		// Не принято к учету 
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Основное средство ""%1"" не принято к учету.'"), ВыборкаДетальныеЗаписи.ОсновноеСредство);		
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			ЭтотОбъект,   
			ТекстСообщения,
			,
			,
			"ОсновноеСредство",
			Отказ);
	КонецЕсли;
КонецПроцедуры

// Функция - Получить событие ОС
//
// Возвращаемое значение:
//   СобытиеОС - Справочник.СобытияОС - Событие ОС Модернизация
//
Функция ПолучитьСобытиеОС()
	СобытиеОС = Справочники.СобытияОС.ПустаяСсылка();
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СобытияОС.Ссылка КАК СобытиеОС
		|ИЗ
		|	Справочник.СобытияОС КАК СобытияОС
		|ГДЕ
		|	СобытияОС.ВидСобытияОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Модернизация)
		|	И НЕ СобытияОС.ПометкаУдаления";
	Запрос = Новый Запрос(ТекстЗапроса);	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СобытиеОС = ВыборкаДетальныеЗаписи.СобытиеОС
	КонецЕсли;

	Возврат СобытиеОС;	
КонецФункции // ПолучитьСобытиеОС()

#КонецОбласти

#КонецЕсли