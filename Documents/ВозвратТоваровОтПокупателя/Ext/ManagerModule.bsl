#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыПроведенияДокумента

// Формирует таблицу значений, содержащую данные для проведения по регистру бухгалтерии Хозрасчетный.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаХозрасчетный(ДокументСсылка,СтруктураДополнительныеСвойства, Отказ)
	
	// Подготовка данных	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Ссылка КАК Регистратор,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.Склад КАК Склад,
		|	ВременнаяТаблицаШапка.УказанДокументОтгрузки КАК УказанДокументОтгрузки,
		|	ВременнаяТаблицаШапка.ДатаДокументаРеализации КАК ДатаДокументаРеализации,
		|	ВременнаяТаблицаШапка.ДокументОснование КАК Сделка,
		|	&Содержание КАК Содержание
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаТовары.СчетУчета КАК СчетУчета
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимСписка КАК СинонимСписка,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаШапка.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаШапка.УказанДокументОтгрузки
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ВременнаяТаблицаШапка.Ссылка
		|	КОНЕЦ КАК Партия,
		|	ВременнаяТаблицаТовары.Себестоимость КАК Себестоимость,
		|	ВременнаяТаблицаТовары.Количество КАК Количество,
		|	ВременнаяТаблицаТовары.СчетСебестоимости КАК КорСчетСписания,
		|	ВременнаяТаблицаТовары.СтатьяРасхода КАК КорСубконто1,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ВременнаяТаблицаТовары.Себестоимость КАК СуммаСписания
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимСписка КАК СинонимСписка,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаШапка.Склад КАК Склад,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
		|	-ВременнаяТаблицаТовары.Себестоимость КАК Себестоимость,
		|	-ВременнаяТаблицаТовары.Количество КАК Количество,
		|	ВременнаяТаблицаТовары.СчетСебестоимости КАК КорСчетСписания,
		|	ВременнаяТаблицаТовары.СтатьяРасхода КАК КорСубконто1,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Запрос.УстановитьПараметр("Содержание", НСтр("ru = 'Возврат товаров'")); 
	Запрос.УстановитьПараметр("СинонимСписка", НСтр("ru = 'Товары'"));
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизиты = МассивРезультатов[0].Выгрузить();
	ТаблицаСчетаУчетаТоваров = МассивРезультатов[1].Выгрузить();
	ТаблицаСписокНоменклатуры = МассивРезультатов[2].Выгрузить();
	ТаблицаТовары = МассивРезультатов[3].Выгрузить();
	
	//ТаблицаМБП = МассивРезультатов[4].Выгрузить();
	
	ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуВозвращенныеСписанныеТовары(ТаблицаТовары, ТаблицаСчетаУчетаТоваров, ТаблицаСписокНоменклатуры, ТаблицаРеквизиты, Отказ);
	
	// СТОРНО
	СтруктураПолейДляСторно = Новый Структура("Количество, Себестоимость, СуммаСписания");
	УчетТоваров.ПроставитьСторноТаблицы(ТаблицаСписанныеТовары, СтруктураПолейДляСторно, -1);
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСписанныеТовары", ТаблицаСписанныеТовары);
	//СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСписанныеМБП", ТаблицаСписанныеМБП);
	
	// 1. Доход от реализации товаров
	// 2. НДС товары
	// 3. НСП товары
	// 4. Скидки товары
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетДт,
		|	ВременнаяТаблицаТовары.СчетДохода КАК СчетКт,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.СчетДохода = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаОтРеализацииТоваровИУслуг)
		|			ТОГДА ВременнаяТаблицаТовары.Номенклатура
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	-(ВЫРАЗИТЬ((ВременнаяТаблицаТовары.Всего - ВременнаяТаблицаТовары.СуммаНДС - ВременнаяТаблицаТовары.СуммаНСП) * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2))) КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,
		|	-(ВременнаяТаблицаТовары.Всего - ВременнаяТаблицаТовары.СуммаНДС - ВременнаяТаблицаТовары.СуммаНСП) КАК ВалютнаяСуммаДт,
		|	-(ВременнаяТаблицаТовары.Всего - ВременнаяТаблицаТовары.СуммаНДС - ВременнаяТаблицаТовары.СуммаНСП) КАК ВалютнаяСуммаКт,
		|	&СодержаниеТоварыДоход КАК Содержание
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.Всего = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов,
		|	ВременнаяТаблицаШапка.СчетУчетаНДС,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	-(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.СуммаНДС * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2))),
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	-ВременнаяТаблицаТовары.СуммаНДС,
		|	-ВременнаяТаблицаТовары.СуммаНДС,
		|	&СодержаниеТоварыНДС
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.СуммаНДС = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов,
		|	ВременнаяТаблицаШапка.СчетУчетаНСП,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	-(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.СуммаНСП * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2))),
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	-ВременнаяТаблицаТовары.СуммаНСП,
		|	-ВременнаяТаблицаТовары.СуммаНСП,
		|	&СодержаниеТоварыНСП
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.СуммаНСП = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СчетУчетаСкидок,
		|	ВременнаяТаблицаШапка.СчетРасчетов,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	НЕОПРЕДЕЛЕНО,
		|	-(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.СуммаСкидки * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2))),
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	-ВременнаяТаблицаТовары.СуммаСкидки,
		|	-ВременнаяТаблицаТовары.СуммаСкидки,
		|	&СодержаниеТоварыСкидка
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.СуммаСкидки = 0";
	Запрос.УстановитьПараметр("СодержаниеТоварыДоход", НСтр("ru = 'Доход от реализации товаров (сторно)'")); 
	Запрос.УстановитьПараметр("СодержаниеТоварыНДС", НСтр("ru = 'НДС (товары) (сторно)'")); 
	Запрос.УстановитьПараметр("СодержаниеТоварыНСП", НСтр("ru = 'НСП (товары) (сторно)'")); 
	Запрос.УстановитьПараметр("СодержаниеТоварыСкидка", НСтр("ru = 'Скидка на товары (сторно)'")); 
	
	РезультатЗапроса = Запрос.Выполнить();	
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", РезультатЗапроса.Выгрузить());	
		
КонецПроцедуры // СформироватьТаблицаХозрасчетный()

// Формирует таблицу значений, содержащую данные для проведения по регистру бухгалтерии Хозрасчетный.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажи(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.Ссылка КАК ДокументРеализации,
		|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК Договор,
		|	ВременнаяТаблицаШапка.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаШапка.СтавкаНСП КАК СтавкаНСП,
		|	ЛОЖЬ КАК БезналичныйРасчет,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Количество * -1 КАК Количество,
		|	-(ВЫРАЗИТЬ((ВременнаяТаблицаТовары.Всего - ВременнаяТаблицаТовары.СуммаНДС - ВременнаяТаблицаТовары.СуммаНСП) * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2))) КАК Сумма,
		|	-(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.СуммаНДС * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2))) КАК СуммаНДС,
		|	-(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.СуммаНСП * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2))) КАК СуммаНСП,
		|	-(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.СуммаСкидки * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2))) КАК СуммаСкидки,
		|	-(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.СуммаДохода * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2))) КАК СуммаДохода,
		|	-ВременнаяТаблицаТовары.Себестоимость КАК Себестоимость
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.Всего = 0";
	РезультатЗапроса = Запрос.Выполнить();	
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажи", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаРеализацияТоваров(ДокументСсылка, СтруктураДополнительныеСвойства) 

// Формирует таблицу значений, содержащую данные для проведения по регистру бухгалтерии Хозрасчетный.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаНДС(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =	
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВременнаяТаблицаШапка.СтавкаНДС КАК СтавкаНДС,
		|	-(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.СуммаНДС * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2))) КАК СуммаНДС,
		|	-(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.СуммаНСП * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2))) КАК СуммаНСП,
		|	-(ВЫРАЗИТЬ((ВременнаяТаблицаТовары.Всего - ВременнаяТаблицаТовары.СуммаНДС - ВременнаяТаблицаТовары.СуммаНСП) * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2))) КАК СуммаБезНДС
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.Всего = 0";
	РезультатЗапроса = Запрос.Выполнить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаНДС", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру бухгалтерии Хозрасчетный.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаБланкиСчетовФактур(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СерияБланкаСФ,
		|	ВременнаяТаблицаШапка.НомерБланкаСФ,
		|	1 КАК Количество,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|ГДЕ
		|	НЕ ВременнаяТаблицаШапка.СерияБланкаСФ = """"
		|	И НЕ ВременнаяТаблицаШапка.НомерБланкаСФ = """"";		
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаБланкиСчетовФактур", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаСотрудники()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСчетаФактурыВыписанные(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;	
	Запрос.Текст =	
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Дата КАК ДатаПоставки,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.Ссылка КАК Документ,
		|	ВременнаяТаблицаШапка.СерияБланкаСФ КАК СерияБланкаСФ,
		|	ВременнаяТаблицаШапка.НомерБланкаСФ КАК НомерБланкаСФ,
		|	ВременнаяТаблицаШапка.КорректировкаСерияБланкаСФ КАК КорСерияБланкаСФ,
		|	ВременнаяТаблицаШапка.КорректировкаНомерБланкаСФ КАК КорНомерБланкаСФ,
		|	ВременнаяТаблицаШапка.Контрагент.ПризнакСтраны КАК ПризнакСтраны,
		|	ВременнаяТаблицаШапка.ВидПоставкиНДС КАК ВидПоставкиНДС,
		|	ВременнаяТаблицаШапка.ДатаСФ КАК ДатаСФ,
		|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВременнаяТаблицаШапка.СтавкаНДС КАК СтавкаНДС,
		|	ИСТИНА КАК ВозвратТоваров,
		|	-СУММА(ВЫРАЗИТЬ((ВременнаяТаблицаТовары.Всего - ВременнаяТаблицаТовары.СуммаНДС - ВременнаяТаблицаТовары.СуммаНСП) * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2))) КАК СуммаБезНДС,
		|	-СУММА(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.СуммаНДС * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2))) КАК СуммаНДС,
		|	-СУММА(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.СуммаНСП * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2))) КАК СуммаНеоблагаемая
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.Всего = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаШапка.ВидПоставкиНДС,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.НомерБланкаСФ,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.СтавкаНДС,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	ВременнаяТаблицаШапка.Контрагент.ПризнакСтраны,
		|	ВременнаяТаблицаШапка.ДатаСФ,
		|	ВременнаяТаблицаШапка.Ссылка,
		|	ВременнаяТаблицаШапка.СерияБланкаСФ,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.КорректировкаСерияБланкаСФ,
		|	ВременнаяТаблицаШапка.КорректировкаНомерБланкаСФ";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСчетаФактурыВыписанные", РезультатЗапроса.Выгрузить());	
КонецПроцедуры

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства, Отказ) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Номер КАК Номер,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Склад КАК Склад,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаДокумента.СчетРасчетов КАК СчетРасчетов,
		|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.КурсВозврата <> 0
		|			ТОГДА ТаблицаДокумента.КурсВозврата
		|		ИНАЧЕ ТаблицаДокумента.Курс
		|	КОНЕЦ КАК Курс,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.КурсВозврата <> 0
		|			ТОГДА 1
		|		ИНАЧЕ ТаблицаДокумента.Кратность
		|	КОНЕЦ КАК Кратность,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСКОплате) КАК СчетУчетаНДС,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НалогСПродаж) КАК СчетУчетаНСП,
		|	ТаблицаДокумента.ДокументОснование КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА НЕ ДанныеПервичныхДокументов.Документ ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УказанДокументОтгрузки,
		|	ДанныеПервичныхДокументов.Дата КАК ДатаДокументаРеализации,
		|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаДокумента.СтавкаНСП КАК СтавкаНСП,
		|	ТаблицаДокумента.СуммаВключаетНалоги КАК СуммаВключаетНалоги,
		|	ТаблицаДокумента.СчетУчетаСкидок КАК СчетУчетаСкидок,
		|	ТаблицаДокумента.СерияБланкаСФ КАК СерияБланкаСФ,
		|	ТаблицаДокумента.НомерБланкаСФ КАК НомерБланкаСФ,
		|	ТаблицаДокумента.ДатаСФ КАК ДатаСФ,
		|	ТаблицаДокумента.ВидПоставкиНДС КАК ВидПоставкиНДС,
		|	ТаблицаДокумента.КорректировкаСерияБланкаСФ КАК КорректировкаСерияБланкаСФ,
		|	ТаблицаДокумента.КорректировкаНомерБланкаСФ КАК КорректировкаНомерБланкаСФ
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|		ПО ТаблицаДокумента.ДокументОснование = ДанныеПервичныхДокументов.Документ
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Количество КАК Количество,
		|	ТаблицаДокумента.Всего КАК Всего,
		|	ТаблицаДокумента.Сумма КАК Сумма,
		|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
		|	ТаблицаДокумента.СуммаНСП КАК СуммаНСП,
		|	ТаблицаДокумента.СуммаСкидки КАК СуммаСкидки,
		|	ТаблицаДокумента.Себестоимость КАК Себестоимость,
		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
		|	ТаблицаДокумента.СчетДохода КАК СчетДохода,
		|	ТаблицаДокумента.СчетСебестоимости КАК СчетСебестоимости,
		|	ТаблицаДокумента.СтатьяРасхода КАК СтатьяРасхода,
		|	ТаблицаДокумента.СуммаДохода КАК СуммаДохода
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	СформироватьТаблицаХозрасчетный(ДокументСсылка, СтруктураДополнительныеСвойства, Отказ);
	СформироватьТаблицаПродажи(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаНДС(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаБланкиСчетовФактур(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаСчетаФактурыВыписанные(ДокументСсылка, СтруктураДополнительныеСвойства);
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Функция формирует табличный документ с печатной формой ПечатьНакладной
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьНакладной(МассивОбъектов, ОбъектыПечати)
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателя.Ссылка,
		|	ВозвратТоваровОтПокупателя.Номер,
		|	ВозвратТоваровОтПокупателя.Дата,
		|	ВозвратТоваровОтПокупателя.Организация,
		|	ВозвратТоваровОтПокупателя.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	ВозвратТоваровОтПокупателя.Склад,
		|	ПРЕДСТАВЛЕНИЕ(ВозвратТоваровОтПокупателя.Склад) КАК СкладПредставление,
		|	ВозвратТоваровОтПокупателя.Контрагент,
		|	ВозвратТоваровОтПокупателя.Контрагент.НаименованиеПолное КАК КонтрагентПредставление,
		|	ВозвратТоваровОтПокупателя.Товары.(
		|		НомерСтроки,
		|		Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		ПРЕДСТАВЛЕНИЕ(ВозвратТоваровОтПокупателя.Товары.Номенклатура.ЕдиницаИзмерения) КАК ЕИ,
		|		Количество,
		|		Цена,
		|		Сумма,
		|		СуммаНДС,
		|		СуммаНСП,
		|		СуммаСкидки,
		|		Всего
		|	)
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		|ГДЕ
		|	ВозвратТоваровОтПокупателя.Ссылка В(&СписокДокументов)";		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ВозвратТоваровОтПокупателя_Накладная";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВозвратТоваровОтПокупателя.ПФ_MXL_Накладная");
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;
		
		ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, НСтр("ru = 'Накладная на возврат от покупателя'"));
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДанныеПечати.Вставить("ОрганизацияПредставление", Шапка.ОрганизацияПредставление);
		ДанныеПечати.Вставить("СкладПредставление", Шапка.СкладПредставление);
		ДанныеПечати.Вставить("ПолучательПредставление", Шапка.КонтрагентПредставление);

		ТаблицаТовары = Шапка.Товары.Выгрузить();
		
		Всего = ТаблицаТовары.Итог("Всего");
		ВсегоНДС = ТаблицаТовары.Итог("СуммаНДС");
		ВсегоНСП = ТаблицаТовары.Итог("СуммаНСП");
		КоличествоНаименований = ТаблицаТовары.Количество();		
		
		ВсегоСкидка = ТаблицаТовары.Итог("СуммаСкидки");
		ЕстьСкидка = ВсегоСкидка <> 0;
		
		ДанныеПечати.Вставить("Всего", Всего);
		ДанныеПечати.Вставить("ВсегоНДС", ВсегоНДС);
		ДанныеПечати.Вставить("ВсегоНСП", ВсегоНСП);
		ДанныеПечати.Вставить("ИтоговаяСтрока", 
			СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"), 
			Формат(КоличествоНаименований, "ЧН=0; ЧГ=0"), Формат(ДанныеПечати.Всего, "ЧЦ=15; ЧДЦ=2")));
		ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(ДанныеПечати.Всего));

		// Области
		МассивОбластейМакета = Новый Массив;
		МассивОбластейМакета.Добавить("Заголовок");
		Если ЕстьСкидка Тогда 
			МассивОбластейМакета.Добавить("ШапкаТаблицыСоСкидкой");
			МассивОбластейМакета.Добавить("СтрокаСоСкидкой");
		Иначе 
			МассивОбластейМакета.Добавить("ШапкаТаблицы");
			МассивОбластейМакета.Добавить("Строка");
		КонецЕсли;	
		МассивОбластейМакета.Добавить("Подвал");
		МассивОбластейМакета.Добавить("Итоги");
		МассивОбластейМакета.Добавить("ИтогиНДС");
		МассивОбластейМакета.Добавить("ИтогиНСП");
		Если ЕстьСкидка Тогда 
			МассивОбластейМакета.Добавить("ИтогиСкидка");
		КонецЕсли;	
		МассивОбластейМакета.Добавить("СуммаПрописью");
		МассивОбластейМакета.Добавить("Подписи");
	
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			Если ИмяОбласти <> "Строка" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			ИначеЕсли ИмяОбласти = "Строка" Тогда 
				Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
			КонецЕсли;	
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует табличный документ с печатной формой Счет-фактура
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, КоличествоСтрокСчетаФактуры)
	Перем Ошибки, ПервыйДокумент, НомерСтрокиНачало;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ВозвратТоваровОтПокупателя_СчетФактура";

	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщиеМакеты.СчетФактура");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателя.Ссылка,
		|	ВозвратТоваровОтПокупателя.Номер,
		|	ВозвратТоваровОтПокупателя.Дата,
		|	ВЫБОР
		|		КОГДА ВозвратТоваровОтПокупателя.КурсВозврата <> 0
		|			ТОГДА ВозвратТоваровОтПокупателя.КурсВозврата
		|		ИНАЧЕ ВозвратТоваровОтПокупателя.Курс
		|	КОНЕЦ КАК Курс,
		|	ВЫБОР
		|		КОГДА ВозвратТоваровОтПокупателя.КурсВозврата <> 0
		|			ТОГДА 1
		|		ИНАЧЕ ВозвратТоваровОтПокупателя.Кратность
		|	КОНЕЦ КАК Кратность,	
		|	ВозвратТоваровОтПокупателя.СуммаВключаетНалоги,
		|	ВозвратТоваровОтПокупателя.ВалютаДокумента,
		|	ВозвратТоваровОтПокупателя.ПечатьВРегламентированнойВалюте,
		|	ВозвратТоваровОтПокупателя.ПечататьКурсИСуммуВРегламентированнойВалюте,
		|	ВозвратТоваровОтПокупателя.ВыводитьКомментарийВНаименование,
		|	ВозвратТоваровОтПокупателя.Комментарий,
		|	ВозвратТоваровОтПокупателя.ПричиныКорректировки,
		|	ВозвратТоваровОтПокупателя.ВидПоставкиНДС.Код КАК ВидПоставкиНДС,
		|	ВозвратТоваровОтПокупателя.Организация,
		|	ВозвратТоваровОтПокупателя.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	ВозвратТоваровОтПокупателя.Организация.ИНН КАК ИННОрганизации,
		|	ВозвратТоваровОтПокупателя.Организация.ГНС КАК ГНСОрганизации,
		|	ВозвратТоваровОтПокупателя.Организация.ГНС.Код КАК КодГНСОрганизации,
		|	ВозвратТоваровОтПокупателя.Организация.ФайлЛоготип КАК ФайлЛоготип,
		|	ВозвратТоваровОтПокупателя.Организация.ФайлФаксимильнаяПечать КАК ФайлФаксимильнаяПечать,
		|	ВозвратТоваровОтПокупателя.ЭкспортнаяПоставка КАК ЭкспортнаяПоставка,
		|	ВозвратТоваровОтПокупателя.Организация.ОсновнойБанковскийСчет КАК БанковскийСчет,
		|	ВозвратТоваровОтПокупателя.Организация.ОсновнойБанковскийСчет.Наименование КАК НаименованиерБанковскогоСчетаОрганизации,
		|	ВозвратТоваровОтПокупателя.Организация.ОсновнойБанковскийСчет.НомерСчета КАК НомерБанковскогоСчетаОрганизации,
		|	ВозвратТоваровОтПокупателя.Организация.ОсновнойБанковскийСчет.Банк.Наименование КАК НаименованиеБанкаОрганизации,
		|	ВозвратТоваровОтПокупателя.Организация.ОсновнойБанковскийСчет.Банк.Код КАК БИКБанкаОрганизации,
		// Сведения о контрегенте
		|	ВЫБОР
		|		КОГДА &ПечататьСчетаФактурыСГоловнымКонтрагентом
		|				И НЕ ВозвратТоваровОтПокупателя.Контрагент.ГоловнойКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ВозвратТоваровОтПокупателя.Контрагент.ГоловнойКонтрагент
		|		ИНАЧЕ ВозвратТоваровОтПокупателя.Контрагент
		|	КОНЕЦ КАК Контрагент,
		|	ВозвратТоваровОтПокупателя.СерияБланкаСФ,
		|	ВозвратТоваровОтПокупателя.НомерБланкаСФ,
		|	ВозвратТоваровОтПокупателя.ДатаСФ,
		|	ВозвратТоваровОтПокупателя.КорректировкаСерияБланкаСФ,
		|	ВозвратТоваровОтПокупателя.КорректировкаНомерБланкаСФ,
		|	ВозвратТоваровОтПокупателя.КорректировкаДатаСФ,
		|	ВозвратТоваровОтПокупателя.БезналичныйРасчет,
		|	ВозвратТоваровОтПокупателя.СтавкаНДС,
		|	ВозвратТоваровОтПокупателя.СтавкаНСП
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка               
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		|ГДЕ
		|	ВозвратТоваровОтПокупателя.Ссылка В(&СписокДокументов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаШапка.СуммаВключаетНалоги КАК СуммаВключаетНалоги,
		|	ВременнаяТаблицаШапка.Курс КАК Курс,
		|	ВременнаяТаблицаШапка.Кратность КАК Кратность
		|ПОМЕСТИТЬ ВременнаяТаблицаДокументыДляПересчета
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|ГДЕ
		|	(ВременнаяТаблицаШапка.ПечатьВРегламентированнойВалюте
		|			ИЛИ ВременнаяТаблицаШапка.ПечататьКурсИСуммуВРегламентированнойВалюте)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаШапка.СуммаВключаетНалоги КАК СуммаВключаетНалоги
		|ПОМЕСТИТЬ ВременнаяТаблицаДокументыСИсходнымиСуммами
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|ГДЕ
		|	НЕ ВременнаяТаблицаШапка.ПечатьВРегламентированнойВалюте
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка КАК Ссылка,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.Цена КАК Цена,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.СуммаНСП КАК СуммаНСП,
		|	ТаблицаТовары.Всего КАК Всего,
		|	ТаблицаТовары.СуммаДохода КАК СуммаДохода,
		|	ТаблицаТовары.СуммаСкидки КАК СуммаСкидки,
		|	ТаблицаТовары.Номенклатура.КодТНВЭД КАК КодТНВЭД
		|ПОМЕСТИТЬ ВременнаяТаблицаСтроки
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка В(&СписокДокументов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСтроки.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаСтроки.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаСтроки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВременнаяТаблицаСтроки.Количество КАК Количество,
		|	-ВременнаяТаблицаСтроки.Цена КАК Цена,
		|	-ВременнаяТаблицаСтроки.СуммаНДС КАК СуммаНДС,
		|	-ВременнаяТаблицаСтроки.СуммаНСП КАК СуммаНСП,
		|	-ВременнаяТаблицаСтроки.Всего КАК Всего,
		|	-ВременнаяТаблицаСтроки.СуммаДохода КАК Стоимость,
		|	-ВременнаяТаблицаСтроки.СуммаСкидки КАК СуммаСкидки,
		|	ВременнаяТаблицаСтроки.КодТНВЭД КАК КодТНВЭД
		|ИЗ
		|	ВременнаяТаблицаСтроки КАК ВременнаяТаблицаСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументыСИсходнымиСуммами КАК ВременнаяТаблицаДокументыСИсходнымиСуммами
		|		ПО ВременнаяТаблицаСтроки.Ссылка = ВременнаяТаблицаДокументыСИсходнымиСуммами.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСтроки.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаДокументыДляПересчета.Курс КАК Курс,
		|	ВременнаяТаблицаДокументыДляПересчета.Кратность КАК Кратность,
		|	ВременнаяТаблицаСтроки.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаСтроки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВременнаяТаблицаСтроки.Количество КАК Количество,
		|	-ВЫРАЗИТЬ(ВременнаяТаблицаСтроки.Цена * ВременнаяТаблицаДокументыДляПересчета.Курс / ВременнаяТаблицаДокументыДляПересчета.Кратность КАК ЧИСЛО(15, 2)) КАК Цена,
		|	-ВЫРАЗИТЬ(ВременнаяТаблицаСтроки.СуммаНДС * ВременнаяТаблицаДокументыДляПересчета.Курс / ВременнаяТаблицаДокументыДляПересчета.Кратность КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
		|	-ВЫРАЗИТЬ(ВременнаяТаблицаСтроки.СуммаНСП * ВременнаяТаблицаДокументыДляПересчета.Курс / ВременнаяТаблицаДокументыДляПересчета.Кратность КАК ЧИСЛО(15, 2)) КАК СуммаНСП,
		|	-ВЫРАЗИТЬ(ВременнаяТаблицаСтроки.Всего * ВременнаяТаблицаДокументыДляПересчета.Курс / ВременнаяТаблицаДокументыДляПересчета.Кратность КАК ЧИСЛО(15, 2)) КАК Всего,
		|	-ВЫРАЗИТЬ(ВременнаяТаблицаСтроки.СуммаДохода * ВременнаяТаблицаДокументыДляПересчета.Курс / ВременнаяТаблицаДокументыДляПересчета.Кратность КАК ЧИСЛО(15, 2)) КАК Стоимость,
		|	-ВЫРАЗИТЬ(ВременнаяТаблицаСтроки.СуммаСкидки * ВременнаяТаблицаДокументыДляПересчета.Курс / ВременнаяТаблицаДокументыДляПересчета.Кратность КАК ЧИСЛО(15, 2)) КАК СуммаСкидки,
		|	ВременнаяТаблицаСтроки.КодТНВЭД КАК КодТНВЭД
		|ИЗ
		|	ВременнаяТаблицаСтроки КАК ВременнаяТаблицаСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументыДляПересчета КАК ВременнаяТаблицаДокументыДляПересчета
		|		ПО ВременнаяТаблицаСтроки.Ссылка = ВременнаяТаблицаДокументыДляПересчета.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаШапка.Номер КАК Номер,
		|	ВременнаяТаблицаШапка.Дата КАК Дата,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДокумента,
		|	ВременнаяТаблицаШапка.Курс КАК Курс,
		|	ВременнаяТаблицаШапка.Кратность КАК Кратность,
		|	ВременнаяТаблицаШапка.ЭкспортнаяПоставка КАК ЭкспортнаяПоставка,
		|	ВременнаяТаблицаШапка.СуммаВключаетНалоги КАК СуммаВключаетНалоги,
		|	ВременнаяТаблицаШапка.ПечатьВРегламентированнойВалюте КАК ПечатьВРегламентированнойВалюте,
		|	ВременнаяТаблицаШапка.ПечататьКурсИСуммуВРегламентированнойВалюте КАК ПечататьКурсИСуммуВРегламентированнойВалюте,
		|	ВременнаяТаблицаШапка.ВыводитьКомментарийВНаименование КАК ВыводитьКомментарийВНаименование,
		|	ВременнаяТаблицаШапка.Комментарий КАК Комментарий,
		|	ВременнаяТаблицаШапка.ПричиныКорректировки КАК ПричиныКорректировки,
		|	ВременнаяТаблицаШапка.ВидПоставкиНДС КАК ВидПоставкиНДС,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.ОрганизацияПредставление КАК ОрганизацияПредставление,
		|	ВременнаяТаблицаШапка.ИННОрганизации КАК ИННОрганизации,
		|	ВременнаяТаблицаШапка.ГНСОрганизации КАК ГНСОрганизации,
		|	ВременнаяТаблицаШапка.КодГНСОрганизации КАК КодГНСОрганизации,
		|	ВременнаяТаблицаШапка.ФайлЛоготип КАК ФайлЛоготип,
		|	ВременнаяТаблицаШапка.ФайлФаксимильнаяПечать КАК ФайлФаксимильнаяПечать,
		|	ВременнаяТаблицаШапка.НомерБанковскогоСчетаОрганизации КАК НомерБанковскогоСчетаОрганизации,
		|	ВременнаяТаблицаШапка.БикБанкаОрганизации КАК БикБанкаОрганизации,
		|	ВременнаяТаблицаШапка.НаименованиеБанкаОрганизации КАК НаименованиеБанкаОрганизации,
		|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаШапка.НомерБланкаСФ КАК НомерБланкаСФ,
		|	ВременнаяТаблицаШапка.СерияБланкаСФ КАК СерияБланкаСФ,
		|	ВременнаяТаблицаШапка.ДатаСФ КАК ДатаСФ,
		|	ВременнаяТаблицаШапка.КорректировкаСерияБланкаСФ КАК КорректировкаСерияБланкаСФ,
		|	ВременнаяТаблицаШапка.КорректировкаНомерБланкаСФ КАК КорректировкаНомерБланкаСФ,
		|	ВременнаяТаблицаШапка.КорректировкаДатаСФ КАК КорректировкаДатаСФ,
		|	ВременнаяТаблицаШапка.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ВременнаяТаблицаШапка.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаШапка.СтавкаНСП КАК СтавкаНСП
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПечататьСчетаФактурыСГоловнымКонтрагентом", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьЗначениеКонстанты("ПечататьСчетаФактурыСГоловнымКонтрагентом"));
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Шапка = РезультатЗапроса[6].Выбрать();
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ДанныеПечати = Новый Структура;
		ДанныеПечати.Вставить("НомерОтчета", ?(КоличествоСтрокСчетаФактуры = 20,"001","002"));
		ДанныеПечати.Вставить("НомерПриложения", ?(КоличествоСтрокСчетаФактуры = 20,"2","3"));
		ДанныеПечати.Вставить("НомерБланкаСФ", Шапка.НомерБланкаСФ);
		ДанныеПечати.Вставить("СерияБланкаСФ", Шапка.СерияБланкаСФ);
		ДанныеПечати.Вставить("ТипПоставки", ?(Шапка.ЭкспортнаяПоставка, "Экспорт", "Внутренняя"));
		ДанныеПечати.Вставить("ВидПлатежа", ?(Шапка.БезналичныйРасчет, "Безналичный", "Наличный"));
		ДанныеПечати.Вставить("ПричинаКорректировки", Шапка.ПричиныКорректировки);
		ДанныеПечати.Вставить("ВидПоставки", Шапка.ВидПоставкиНДС);
		
		ДанныеПечати.Вставить("ТекстЗаголовка", НСтр("ru = 'Возвратная счет-фактура'"));
		ДанныеПечати.Вставить("ДатаПоставки", Формат(Шапка.Дата,"ДЛФ=DD"));
		ДанныеПечати.Вставить("БанкПоставщика", Шапка.НаименованиеБанкаОрганизации);		
		
		ДанныеПечати.Вставить("ФайлЛоготип", Шапка.ФайлЛоготип);
		ДанныеПечати.Вставить("ФайлФаксимильнаяПечать", Шапка.ФайлФаксимильнаяПечать);

		ДанныеПечати.Вставить("СерияБланкаСФКор", Шапка.КорректировкаСерияБланкаСФ);
		ДанныеПечати.Вставить("НомерБланкаСФКор", Шапка.КорректировкаНомерБланкаСФ);
		
		ПредставлениеПоставщика = "";
		Организация = Шапка.Организация;
		ИНН = Шапка.ИННОрганизации;
	    ГНС = Шапка.ГНСОрганизации;
	    КодГНС = Шапка.КодГНСОрганизации;
		
		ПредставлениеПоставщика = Шапка.ОрганизацияПредставление;
		
		ДатаСФ = Формат(Шапка.ДатаСФ, "ДЛФ=D");
		ДанныеПечати.Вставить("Дата1", Сред(ДатаСФ,1,1));
		ДанныеПечати.Вставить("Дата2", Сред(ДатаСФ,2,1));
		ДанныеПечати.Вставить("Дата3", Сред(ДатаСФ,4,1));
		ДанныеПечати.Вставить("Дата4", Сред(ДатаСФ,5,1));
		ДанныеПечати.Вставить("Дата5", Сред(ДатаСФ,7,1));
		ДанныеПечати.Вставить("Дата6", Сред(ДатаСФ,8,1));
		ДанныеПечати.Вставить("Дата7", Сред(ДатаСФ,9,1));
		ДанныеПечати.Вставить("Дата8", Сред(ДатаСФ,10,1));
		
		ДатаСФКор = Формат(Шапка.КорректировкаДатаСФ, "ДЛФ=D");
		ДанныеПечати.Вставить("ДатаСФКор1", Сред(ДатаСФКор,1,1));
		ДанныеПечати.Вставить("ДатаСФКор2", Сред(ДатаСФКор,2,1));
		ДанныеПечати.Вставить("ДатаСФКор3", Сред(ДатаСФКор,4,1));
		ДанныеПечати.Вставить("ДатаСФКор4", Сред(ДатаСФКор,5,1));
		ДанныеПечати.Вставить("ДатаСФКор5", Сред(ДатаСФКор,7,1));
		ДанныеПечати.Вставить("ДатаСФКор6", Сред(ДатаСФКор,8,1));
		ДанныеПечати.Вставить("ДатаСФКор7", Сред(ДатаСФКор,9,1));
		ДанныеПечати.Вставить("ДатаСФКор8", Сред(ДатаСФКор,10,1));
		
		ДанныеПечати.Вставить("ИННПост1", Сред(ИНН,1,1));
		ДанныеПечати.Вставить("ИННПост2", Сред(ИНН,2,1));
		ДанныеПечати.Вставить("ИННПост3", Сред(ИНН,3,1));
		ДанныеПечати.Вставить("ИННПост4", Сред(ИНН,4,1));
		ДанныеПечати.Вставить("ИННПост5", Сред(ИНН,5,1));
		ДанныеПечати.Вставить("ИННПост6", Сред(ИНН,6,1));
		ДанныеПечати.Вставить("ИННПост7", Сред(ИНН,7,1));
		ДанныеПечати.Вставить("ИННПост8", Сред(ИНН,8,1));
		ДанныеПечати.Вставить("ИННПост9", Сред(ИНН,9,1));
		ДанныеПечати.Вставить("ИННПост10", Сред(ИНН,10,1));
		ДанныеПечати.Вставить("ИННПост11", Сред(ИНН,11,1));
		ДанныеПечати.Вставить("ИННПост12", Сред(ИНН,12,1));
		ДанныеПечати.Вставить("ИННПост13", Сред(ИНН,13,1));
		ДанныеПечати.Вставить("ИННПост14", Сред(ИНН,14,1));

        БИК = Шапка.БикБанкаОрганизации;
		ДанныеПечати.Вставить("КодБанкаПоставщика1", Сред(БИК,1,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика2", Сред(БИК,2,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика3", Сред(БИК,3,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика4", Сред(БИК,4,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика5", Сред(БИК,5,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика6", Сред(БИК,6,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика7", Сред(БИК,7,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика8", Сред(БИК,8,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика9", Сред(БИК,9,1));		
		
		НомерСчета = Шапка.НомерБанковскогоСчетаОрганизации;
		ДанныеПечати.Вставить("СчетПоставщика1", Сред(НомерСчета,1,1));		
		ДанныеПечати.Вставить("СчетПоставщика2", Сред(НомерСчета,2,1));		
		ДанныеПечати.Вставить("СчетПоставщика3", Сред(НомерСчета,3,1));		
		ДанныеПечати.Вставить("СчетПоставщика4", Сред(НомерСчета,4,1));		
		ДанныеПечати.Вставить("СчетПоставщика5", Сред(НомерСчета,5,1));		
		ДанныеПечати.Вставить("СчетПоставщика6", Сред(НомерСчета,6,1));		
		ДанныеПечати.Вставить("СчетПоставщика7", Сред(НомерСчета,7,1));		
		ДанныеПечати.Вставить("СчетПоставщика8", Сред(НомерСчета,8,1));		
		ДанныеПечати.Вставить("СчетПоставщика9", Сред(НомерСчета,9,1));		
		ДанныеПечати.Вставить("СчетПоставщика10", Сред(НомерСчета,10,1));		
		ДанныеПечати.Вставить("СчетПоставщика11", Сред(НомерСчета,11,1));		
		ДанныеПечати.Вставить("СчетПоставщика12", Сред(НомерСчета,12,1));		
		ДанныеПечати.Вставить("СчетПоставщика13", Сред(НомерСчета,13,1));		
		ДанныеПечати.Вставить("СчетПоставщика14", Сред(НомерСчета,14,1));		
		ДанныеПечати.Вставить("СчетПоставщика15", Сред(НомерСчета,15,1));		
		ДанныеПечати.Вставить("СчетПоставщика16", Сред(НомерСчета,16,1));		
		
		ДанныеПечати.Вставить("ГНСПоставщика1", Сред(КодГНС,1,1));		
		ДанныеПечати.Вставить("ГНСПоставщика2", Сред(КодГНС,2,1));		
		ДанныеПечати.Вставить("ГНСПоставщика3", Сред(КодГНС,3,1));		

		ДанныеПечати.Вставить("НаименованиеГНСПоставщика", ГНС);		
		ДанныеПечати.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);		
		
		АдресПоставщика = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Шапка.Дата); 
		ДанныеПечати.Вставить("АдресПоставщика", АдресПоставщика);		

		// Данные по контрагенту
		СведенияОКонтрагенте = БухгалтерскийУчетСервер.ПолучитьСведенияОКонтрагенте(Шапка.Контрагент);
		
		ДанныеПечати.Вставить("НаименованиеГНСПокупателя", СведенияОКонтрагенте.ГНСНаименование);		
		ДанныеПечати.Вставить("ПредставлениеПокупателя", СведенияОКонтрагенте.НаименованиеПолное);
		ДанныеПечати.Вставить("АдресПокупателя", СведенияОКонтрагенте.АдрЮР);		
		
		ИННКонтрагента = СведенияОКонтрагенте.ИНН;
		ДанныеПечати.Вставить("ИННПок1", Сред(ИННКонтрагента,1,1));		
		ДанныеПечати.Вставить("ИННПок2", Сред(ИННКонтрагента,2,1));		
		ДанныеПечати.Вставить("ИННПок3", Сред(ИННКонтрагента,3,1));		
		ДанныеПечати.Вставить("ИННПок4", Сред(ИННКонтрагента,4,1));		
		ДанныеПечати.Вставить("ИННПок5", Сред(ИННКонтрагента,5,1));		
		ДанныеПечати.Вставить("ИННПок6", Сред(ИННКонтрагента,6,1));		
		ДанныеПечати.Вставить("ИННПок7", Сред(ИННКонтрагента,7,1));		
		ДанныеПечати.Вставить("ИННПок8", Сред(ИННКонтрагента,8,1));		
		ДанныеПечати.Вставить("ИННПок9", Сред(ИННКонтрагента,9,1));		
		ДанныеПечати.Вставить("ИННПок10", Сред(ИННКонтрагента,10,1));		
		ДанныеПечати.Вставить("ИННПок11", Сред(ИННКонтрагента,11,1));		
		ДанныеПечати.Вставить("ИННПок12", Сред(ИННКонтрагента,12,1));		
		ДанныеПечати.Вставить("ИННПок13", Сред(ИННКонтрагента,13,1));		
		ДанныеПечати.Вставить("ИННПок14", Сред(ИННКонтрагента,14,1));		
		
		КодГНСКонтрагента = СведенияОКонтрагенте.ГНСКод;
		ДанныеПечати.Вставить("ГНСПокупателя1", Сред(КодГНСКонтрагента,1,1));		
		ДанныеПечати.Вставить("ГНСПокупателя2", Сред(КодГНСКонтрагента,2,1));		
		ДанныеПечати.Вставить("ГНСПокупателя3", Сред(КодГНСКонтрагента,3,1));		
		
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.НомерСчета) Тогда 
			НомерСчетаКонтрагента = СведенияОКонтрагенте.НомерСчета;
			ДанныеПечати.Вставить("СчетПокупателя1", Сред(НомерСчетаКонтрагента,1,1));		
			ДанныеПечати.Вставить("СчетПокупателя2", Сред(НомерСчетаКонтрагента,2,1));		
			ДанныеПечати.Вставить("СчетПокупателя3", Сред(НомерСчетаКонтрагента,3,1));		
			ДанныеПечати.Вставить("СчетПокупателя4", Сред(НомерСчетаКонтрагента,4,1));		
			ДанныеПечати.Вставить("СчетПокупателя5", Сред(НомерСчетаКонтрагента,5,1));		
			ДанныеПечати.Вставить("СчетПокупателя6", Сред(НомерСчетаКонтрагента,6,1));		
			ДанныеПечати.Вставить("СчетПокупателя7", Сред(НомерСчетаКонтрагента,7,1));		
			ДанныеПечати.Вставить("СчетПокупателя8", Сред(НомерСчетаКонтрагента,8,1));		
			ДанныеПечати.Вставить("СчетПокупателя9", Сред(НомерСчетаКонтрагента,9,1));		
			ДанныеПечати.Вставить("СчетПокупателя10", Сред(НомерСчетаКонтрагента,10,1));		
			ДанныеПечати.Вставить("СчетПокупателя11", Сред(НомерСчетаКонтрагента,11,1));		
			ДанныеПечати.Вставить("СчетПокупателя12", Сред(НомерСчетаКонтрагента,12,1));		
			ДанныеПечати.Вставить("СчетПокупателя13", Сред(НомерСчетаКонтрагента,13,1));		
			ДанныеПечати.Вставить("СчетПокупателя14", Сред(НомерСчетаКонтрагента,14,1));
			ДанныеПечати.Вставить("СчетПокупателя15", Сред(НомерСчетаКонтрагента,15,1));		
			ДанныеПечати.Вставить("СчетПокупателя16", Сред(НомерСчетаКонтрагента,16,1));
			
			БикБанкаКонтрагента = СведенияОКонтрагенте.БИКБанка;
			ДанныеПечати.Вставить("КодБанкаПокупателя1", Сред(БикБанкаКонтрагента,1,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя2", Сред(БикБанкаКонтрагента,2,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя3", Сред(БикБанкаКонтрагента,3,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя4", Сред(БикБанкаКонтрагента,4,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя5", Сред(БикБанкаКонтрагента,5,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя6", Сред(БикБанкаКонтрагента,6,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя7", Сред(БикБанкаКонтрагента,7,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя8", Сред(БикБанкаКонтрагента,8,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя9", Сред(БикБанкаКонтрагента,9,1));		
			
			ДанныеПечати.Вставить("БанкПокупателя", СведенияОКонтрагенте.Банк);
		Иначе 	
			// Отсутствует
			ДанныеПечати.Вставить("СчетПокупателя1","о");
			ДанныеПечати.Вставить("СчетПокупателя2","т");
			ДанныеПечати.Вставить("СчетПокупателя3","с");
			ДанныеПечати.Вставить("СчетПокупателя4","у");
			ДанныеПечати.Вставить("СчетПокупателя5","т");
			ДанныеПечати.Вставить("СчетПокупателя6","с");
			ДанныеПечати.Вставить("СчетПокупателя7","т");
			ДанныеПечати.Вставить("СчетПокупателя8","в");
			ДанныеПечати.Вставить("СчетПокупателя9","у");
			ДанныеПечати.Вставить("СчетПокупателя10","е");
			ДанныеПечати.Вставить("СчетПокупателя11","т");	

			ДанныеПечати.Вставить("БанкПокупателя", "отсутствует");
		КонецЕсли;	
		
		ПараметрыОтбора = Новый Структура("Ссылка", Шапка.Ссылка);
		
		ТаблицаИсходныеДанные 		= РезультатЗапроса[4].Выгрузить();
		ТаблицаПересчитанныеДанные 	= РезультатЗапроса[5].Выгрузить();
		ТаблицаИсходныеДанные.Индексы.Добавить("Ссылка");
		ТаблицаПересчитанныеДанные.Индексы.Добавить("Ссылка");
		
		ПересчитаннаяТаблица = Неопределено;
		ИсходнаяТаблица = Неопределено;
		
		Если Шапка.ПечатьВРегламентированнойВалюте ИЛИ Шапка.ПечататьКурсИСуммуВРегламентированнойВалюте Тогда
			ПересчитаннаяТаблица = ТаблицаПересчитанныеДанные.Скопировать(ПараметрыОтбора);
			ПересчитаннаяТаблица.Индексы.Добавить("Ссылка");
			ПересчитаннаяТаблица.Индексы.Добавить("Номенклатура");
			ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		КонецЕсли;	
		
		Если НЕ Шапка.ПечатьВРегламентированнойВалюте Тогда
			ИсходнаяТаблица = ТаблицаИсходныеДанные.Скопировать(ПараметрыОтбора);
			ИсходнаяТаблица.Индексы.Добавить("Ссылка");
			ИсходнаяТаблица.Индексы.Добавить("Номенклатура");
		КонецЕсли;
		
		КоличествоСтрок = 0;
		
		ВсегоСуммаСкидкиИсходная = 0;
		ВсегоСуммаСкидкиПересчитанная = 0;
		
		// Итоги по исходным суммам
		Если ИсходнаяТаблица <> Неопределено Тогда		
			ВсегоСтоимостьИсходная = ИсходнаяТаблица.Итог("Стоимость");
			ВсегоИсходная = ИсходнаяТаблица.Итог("Всего");
			ВсегоНДСИсходная = ИсходнаяТаблица.Итог("СуммаНДС");
			ВсегоНСПИсходная = ИсходнаяТаблица.Итог("СуммаНСП");
			ВсегоСуммаСкидкиИсходная = ИсходнаяТаблица.Итог("СуммаСкидки");
			КоличествоСтрок = ИсходнаяТаблица.Количество();
			
			// Если пересчитанных сумм нет, то итоговая строка будет одна,
			// поэтому используется строка итогов, которая находится в области "Подвал" и 
			// названия параметров задаются соответственно этой области. 
			// Если пересчитанные суммы есть, то итоговых строки будет две 
			// (с исходными суммами и с пересчитанными), поэтому будет задействована область
			// "ИсходныйИтог" и параметры соответственно именуем как они указаны в данной области.
			Если ПересчитаннаяТаблица = Неопределено Тогда
				ДанныеПечати.Вставить("ВсегоСтоимость", ВсегоСтоимостьИсходная);
				ДанныеПечати.Вставить("Всего", ВсегоИсходная);
				ДанныеПечати.Вставить("ВсегоНДС", ВсегоНДСИсходная);
				ДанныеПечати.Вставить("ВсегоНСП", ВсегоНСПИсходная);
				
				Если Шапка.ПечатьВРегламентированнойВалюте Тогда 
					ДанныеПечати.Вставить("Валюта", " (" + ВалютаРегламентированногоУчета + ")");
				Иначе
					ДанныеПечати.Вставить("Валюта", " (" + Шапка.ВалютаДокумента + ")");
				КонецЕсли;
			Иначе
				ДанныеПечати.Вставить("ВсегоСтоимостьИсходная", ВсегоСтоимостьИсходная);
				ДанныеПечати.Вставить("ВсегоИсходная", ВсегоИсходная);
				ДанныеПечати.Вставить("ВсегоНДСИсходная", ВсегоНДСИсходная);
				ДанныеПечати.Вставить("ВсегоНСПИсходная", ВсегоНСПИсходная);
				
				ДанныеПечати.Вставить("ВалютаИсходная", " (" + Шапка.ВалютаДокумента + ")");
			КонецЕсли;
		КонецЕсли;
		
		// Итоги по пересчитанным суммам
		Если ПересчитаннаяТаблица <> Неопределено Тогда
			ВсегоСтоимостьПересчитанная = ПересчитаннаяТаблица.Итог("Стоимость");
			ВсегоПересчитанная = ПересчитаннаяТаблица.Итог("Всего");
			ВсегоНДСПересчитанная = ПересчитаннаяТаблица.Итог("СуммаНДС");
			ВсегоНСППересчитанная = ПересчитаннаяТаблица.Итог("СуммаНСП");
			ВсегоСуммаСкидкиПересчитанная = ПересчитаннаяТаблица.Итог("СуммаСкидки");
			КоличествоСтрок = КоличествоСтрок + ПересчитаннаяТаблица.Количество();
			
			ДанныеПечати.Вставить("ВсегоСтоимость", ВсегоСтоимостьПересчитанная);
			ДанныеПечати.Вставить("Всего", ВсегоПересчитанная);
			ДанныеПечати.Вставить("ВсегоНДС", ВсегоНДСПересчитанная);
			ДанныеПечати.Вставить("ВсегоНСП", ВсегоНСППересчитанная);
			
			ДанныеПечати.Вставить("Валюта", " (" + ВалютаРегламентированногоУчета + ")");
		КонецЕсли;
		
		// Ставки
		Если Шапка.БезналичныйРасчет Тогда 
			ЗначениеСтавкиНСП = "0";
		Иначе 
			ЗначениеСтавкиНСП = УчетНДСВызовСервера.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, Шапка.СтавкаНСП);
		КонецЕсли;
		
		ЗначениеСтавкиНДС = УчетНДСВызовСервера.ПолучитьСтавкуНДС(Шапка.Дата, Шапка.СтавкаНДС);
		ДанныеПечати.Вставить("СтавкаНДС", ?(ЗначениеЗаполнено(ЗначениеСтавкиНДС), Строка(ЗначениеСтавкиНДС) + "%",""));
		ДанныеПечати.Вставить("СтавкаНСП", ?(ЗначениеЗаполнено(ЗначениеСтавкиНСП), Строка(ЗначениеСтавкиНСП) + "%",""));
		
		// Скидка
		ЕстьСкидка = Ложь;
		Если ВсегоСуммаСкидкиИсходная > 0 Тогда								
			ЕстьСкидка = Истина;
			ВсегоИсходная = ВсегоИсходная - ВсегоСуммаСкидкиИсходная;
			ДанныеПечати.Вставить("СтоимостьСкидка", -ВсегоИсходная);
			ДанныеПечати.Вставить("СуммаНДССкидка", -ВсегоНДСИсходная);
			ДанныеПечати.Вставить("ВсегоСкидка", -ВсегоИсходная -ВсегоНДСИсходная);
		КонецЕсли;
		
		ЕстьПересчитаннаяСкидка = Ложь;
		Если ВсегоСуммаСкидкиПересчитанная > 0 Тогда								
			ЕстьПересчитаннаяСкидка = Истина;
			ВсегоПересчитанная = ВсегоПересчитанная - ВсегоСуммаСкидкиПересчитанная;
			ДанныеПечати.Вставить("СтоимостьСкидкаПересчитанная", -ВсегоПересчитанная);
			ДанныеПечати.Вставить("СуммаНДССкидкаПересчитанная", -ВсегоНДСПересчитанная);
			ДанныеПечати.Вставить("ВсегоСкидкаПересчитанная", -ВсегоПересчитанная -ВсегоНДСПересчитанная);
		КонецЕсли;
		
		// Информация подвала
		ТекстОКоличестве = СтрШаблон("%1 %2", КоличествоСтрокСчетаФактуры, ?(КоличествоСтрокСчетаФактуры = 20,"(двадцати)","(семи)"));
		ДанныеПечати.Вставить("РазрешенноеКолвоСтрок", ТекстОКоличестве);
		ДанныеПечати.Вставить("НомерОтчета", ?(КоличествоСтрокСчетаФактуры = 20,"001","002"));
		
		ОтветственныеЛица = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата);
		ДанныеПечати.Вставить("ФаксимилеРуководителя", ОтветственныеЛица.ФаксимилеРуководителя);
		ДанныеПечати.Вставить("ФаксимилеГлавногоБухгалтера", ОтветственныеЛица.ФаксимилеГлавногоБухгалтера);

		// Области
		МассивОбластейМакета = Новый Массив;
		МассивОбластейМакета.Добавить("Шапка");
		МассивОбластейМакета.Добавить("Строка");
		
		Если ЕстьСкидка Тогда 
			МассивОбластейМакета.Добавить("СтрокаСоСкидкой");
		КонецЕсли;
		
		Если ЕстьПересчитаннаяСкидка Тогда 
			МассивОбластейМакета.Добавить("ВалютнаяСтрокаСоСкидкой");
		КонецЕсли;
		
		Если ДанныеПечати.Свойство("ВалютаИсходная") Тогда
			МассивОбластейМакета.Добавить("ИсходныйИтог");
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Шапка.ФайлФаксимильнаяПечать) Тогда 
			МассивОбластейМакета.Добавить("ПодвалСФаксимиле");
		Иначе 
			МассивОбластейМакета.Добавить("Подвал");
		КонецЕсли;	
		
		ДанныеПечатиСтроки = Новый Структура("КодТовара1, КодТовара2, КодТовара3, КодТовара4","0","0","0","0");
		ДанныеПечатиПустаяСтрока = Новый Структура();
		ДанныеПечатиПустаяСтрока.Вставить("КодТовара1", 		"");
		ДанныеПечатиПустаяСтрока.Вставить("КодТовара2", 		"");
		ДанныеПечатиПустаяСтрока.Вставить("КодТовара3", 		"");
		ДанныеПечатиПустаяСтрока.Вставить("КодТовара4", 		"");
		ДанныеПечатиПустаяСтрока.Вставить("Количество", 		"Х");
		ДанныеПечатиПустаяСтрока.Вставить("СтавкаНДС", 			"Х");
		ДанныеПечатиПустаяСтрока.Вставить("СтавкаНСП", 			"Х");
		ДанныеПечатиПустаяСтрока.Вставить("Стоимость", 			"Х");	
		ДанныеПечатиПустаяСтрока.Вставить("СуммаНДС", 			"Х");
		ДанныеПечатиПустаяСтрока.Вставить("СуммаНСП", 			"Х");
		ДанныеПечатиПустаяСтрока.Вставить("Номенклатура", 		"Х");
		ДанныеПечатиПустаяСтрока.Вставить("ЕдиницаИзмерения",	"Х");
		ДанныеПечатиПустаяСтрока.Вставить("Цена", 				"Х");
		ДанныеПечатиПустаяСтрока.Вставить("Всего", 				"Х");
		
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			
			Если ИмяОбласти = "ПодвалСФаксимиле" Тогда 
				ПодписиИФаксимиле = Новый Соответствие; // Ключ - имя каринки в области, Значение - имя реквизита
				ПодписиИФаксимиле.Вставить("ПодписьРуководителя", "ФаксимилеРуководителя");
				ПодписиИФаксимиле.Вставить("ПодписьГлавногоБухгалтера", "ФаксимилеГлавногоБухгалтера");
				ПодписиИФаксимиле.Вставить("ПечатьОрганизации", "ФайлФаксимильнаяПечать");
				ЗаполнитьЛоготипФаксимилеВОбластиМакета(ОбластьМакета, ДанныеПечати, ПодписиИФаксимиле, Ошибки);
			КонецЕсли;
			
			Если ИмяОбласти <> "Строка" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			ИначеЕсли ИмяОбласти = "Строка" Тогда
				
				СтруктураНоменклатура = Новый Структура();
				СтруктураНоменклатура.Вставить("Номенклатура", "");
				
				Если (ИсходнаяТаблица <> Неопределено И ПересчитаннаяТаблица <> Неопределено)
					ИЛИ ИсходнаяТаблица <> Неопределено Тогда
					
					ОбластьМакетаДопСтрока = Неопределено;
					
					// Заготовка необходимых структур
					Если ПересчитаннаяТаблица <> Неопределено Тогда
						ОбластьМакетаДопСтрока = Макет.ПолучитьОбласть("ПересчитаннаяСтрока");
						СтруктураОтбора = Новый Структура();
						СтруктураОтбора.Вставить("Ссылка", );
						СтруктураОтбора.Вставить("Номенклатура", );
					КонецЕсли;
						
					Для Каждого СтрокаТаблицы Из ИсходнаяТаблица Цикл
						КодТНВЭД = ?(ЗначениеЗаполнено(СтрокаТаблицы.КодТНВЭД), СтрокаТаблицы.КодТНВЭД, "0000");
						ДанныеПечатиСтроки.КодТовара1 = Сред(КодТНВЭД,1,1);
						ДанныеПечатиСтроки.КодТовара2 = Сред(КодТНВЭД,2,1);
						ДанныеПечатиСтроки.КодТовара3 = Сред(КодТНВЭД,3,1);
						ДанныеПечатиСтроки.КодТовара4 = Сред(КодТНВЭД,4,1);
						
						Если ОбластьМакетаДопСтрока = Неопределено Тогда
							ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
							ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
							ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСтроки);
							
							Если Шапка.ВыводитьКомментарийВНаименование Тогда
								СтруктураНоменклатура.Номенклатура = СтрШаблон(НСтр("ru = '%1 %2'"),
									СтрокаТаблицы.Номенклатура,
									Шапка.Комментарий);
									
								ОбластьМакета.Параметры.Заполнить(СтруктураНоменклатура);
							КонецЕсли;
							
							ТабличныйДокумент.Вывести(ОбластьМакета);
							
						// Вывод основной строки с исходной суммой (к номенклатуре добавляется курс),
						// а затем вывод дополнительной строки с пересчитанными суммами.
						Иначе
							Если Шапка.ВыводитьКомментарийВНаименование Тогда
								СтруктураНоменклатура.Номенклатура = СтрШаблон(НСтр("ru = '%1 %2 курс %3'"),
									СтрокаТаблицы.Номенклатура,
									Шапка.Комментарий,
									Шапка.Курс);
							Иначе
								СтруктураНоменклатура.Номенклатура = СтрШаблон(НСтр("ru = '%1 курс %2'"),
									СтрокаТаблицы.Номенклатура,
									Шапка.Курс);		
							КонецЕсли;	
														
							ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
							ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
							ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСтроки);
							ОбластьМакета.Параметры.Заполнить(СтруктураНоменклатура);
							ТабличныйДокумент.Вывести(ОбластьМакета);
							
							ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы);
							
							Строки = ПересчитаннаяТаблица.НайтиСтроки(СтруктураОтбора);
							Если Строки.Количество() > 0 Тогда
								Данные = Строки[0];
								
								КодТНВЭД = ?(ЗначениеЗаполнено(Данные.КодТНВЭД), Данные.КодТНВЭД, "0000");
								ДанныеПечатиСтроки.КодТовара1 = Сред(КодТНВЭД,1,1);
								ДанныеПечатиСтроки.КодТовара2 = Сред(КодТНВЭД,2,1);
								ДанныеПечатиСтроки.КодТовара3 = Сред(КодТНВЭД,3,1);
								ДанныеПечатиСтроки.КодТовара4 = Сред(КодТНВЭД,4,1);
								
								ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
								ОбластьМакета.Параметры.Заполнить(Данные);
								ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСтроки);
								
								Если Шапка.ВыводитьКомментарийВНаименование Тогда
									СтруктураНоменклатура.Номенклатура = СтрШаблон(НСтр("ru = '%1 %2'"),
										Данные.Номенклатура,
										Шапка.Комментарий);
										
									ОбластьМакета.Параметры.Заполнить(СтруктураНоменклатура);
								КонецЕсли;
								
								ТабличныйДокумент.Вывести(ОбластьМакета);
							КонецЕсли;
						КонецЕсли;	
					КонецЦикла;
					
				Иначе
					Для Каждого СтрокаТаблицы Из ПересчитаннаяТаблица Цикл 
						КодТНВЭД = ?(ЗначениеЗаполнено(СтрокаТаблицы.КодТНВЭД), СтрокаТаблицы.КодТНВЭД, "0000");
						ДанныеПечатиСтроки.КодТовара1 = Сред(КодТНВЭД,1,1);
						ДанныеПечатиСтроки.КодТовара2 = Сред(КодТНВЭД,2,1);
						ДанныеПечатиСтроки.КодТовара3 = Сред(КодТНВЭД,3,1);
						ДанныеПечатиСтроки.КодТовара4 = Сред(КодТНВЭД,4,1);
						
						ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
						ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
						ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСтроки);
						
						Если Шапка.ВыводитьКомментарийВНаименование Тогда
							СтруктураНоменклатура.Номенклатура = СтрШаблон(НСтр("ru = '%1 %2'"),
								СтрокаТаблицы.Номенклатура,
								Шапка.Комментарий);
								
							ОбластьМакета.Параметры.Заполнить(СтруктураНоменклатура);
						КонецЕсли;
						
						ТабличныйДокумент.Вывести(ОбластьМакета);
					КонецЦикла;
				КонецЕсли;
						
				// Добавление пустых строк
				Если КоличествоСтрокСчетаФактуры > КоличествоСтрок Тогда 
					Для Счетчик = 1 По КоличествоСтрокСчетаФактуры - КоличествоСтрок Цикл
						ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПустаяСтрока);
						ТабличныйДокумент.Вывести(ОбластьМакета);		
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
		
КонецФункции

// Функция формирует табличный документ с печатной формой Счет-фактура
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьСчетФактураБезНДС(МассивОбъектов, ОбъектыПечати)
	Перем Ошибки, ПервыйДокумент, НомерСтрокиНачало;

	ТабличныйДокумент = Новый ТабличныйДокумент;	
	ТабличныйДокумент.КлючПараметровПечати = "ВозвратТоваровОтПокупателя_СчетФактураБезНДС";

	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщиеМакеты.СчетФактураБезНДС");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателя.Ссылка КАК Ссылка,
		|	ВозвратТоваровОтПокупателя.Номер КАК Номер,
		|	ВозвратТоваровОтПокупателя.Дата КАК Дата,
		|	ВозвратТоваровОтПокупателя.Организация КАК Организация,
		|	ВозвратТоваровОтПокупателя.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	ВозвратТоваровОтПокупателя.Организация.ФайлЛоготип КАК ФайлЛоготип,
		|	ВозвратТоваровОтПокупателя.Организация.ФайлФаксимильнаяПечать КАК ФайлФаксимильнаяПечать,
		|	ВЫБОР
		|		КОГДА &ПечататьСчетаФактурыСГоловнымКонтрагентом
		|				И НЕ РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент.НаименованиеПолное
		|		ИНАЧЕ РеализацияТоваровУслуг.Контрагент.НаименованиеПолное
		|	КОНЕЦ КАК КонтрагентПредставление,
		|	ВозвратТоваровОтПокупателя.Организация.ИНН КАК ИНН,
		|	ВозвратТоваровОтПокупателя.Организация.ОсновнойБанковскийСчет.Наименование КАК РассчетныйСчетПредставление,
		|	ВозвратТоваровОтПокупателя.Организация.ОсновнойБанковскийСчет.Банк.Наименование КАК БанкПредставление,
		|	ВозвратТоваровОтПокупателя.Организация.ОсновнойБанковскийСчет.Банк.Код КАК БИКБанка,
		|	ВозвратТоваровОтПокупателя.СтавкаНДС КАК СтавкаНДС,
		|	ВозвратТоваровОтПокупателя.СтавкаНСП КАК СтавкаНСП,
		|	ВозвратТоваровОтПокупателя.ЭкспортнаяПоставка КАК ЭкспортнаяПоставка,
		|	ВозвратТоваровОтПокупателя.Товары.(
		|		НомерСтроки,
		|		Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		Количество,
		|		Цена,
		|		СуммаДохода КАК Сумма,
		|		СуммаНДС,
		|		СуммаНСП,
		|		Всего
		|	) КАК Товары
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		|ГДЕ
		|	ВозвратТоваровОтПокупателя.Ссылка В(&СписокДокументов)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПечататьСчетаФактурыСГоловнымКонтрагентом", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьЗначениеКонстанты("ПечататьСчетаФактурыСГоловнымКонтрагентом"));
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ДанныеПечати = Новый Структура;
		
		ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, НСтр("ru = 'Счет-фактура'"));
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДанныеПечати.Вставить("Дата", Шапка.Дата);
		ДанныеПечати.Вставить("ОрганизацияПредставление", Шапка.ОрганизацияПредставление);
		ДанныеПечати.Вставить("ФайлЛоготип", Шапка.ФайлЛоготип);
		ДанныеПечати.Вставить("ФайлФаксимильнаяПечать", Шапка.ФайлФаксимильнаяПечать);
		ДанныеПечати.Вставить("ПолучательПредставление", Шапка.КонтрагентПредставление);
		ДанныеПечати.Вставить("Адрес", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Шапка.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Шапка.Дата));
			
		ДанныеПечати.Вставить("ИНН", Шапка.ИНН);
		ДанныеПечати.Вставить("БанкПредставление", Шапка.БанкПредставление);
		ДанныеПечати.Вставить("РассчетныйСчетПредставление", Шапка.РассчетныйСчетПредставление);
		ДанныеПечати.Вставить("БИКБанка", Шапка.БИКБанка);
		
		ДанныеПечати.Вставить("ТипПоставки", ?(Шапка.ЭкспортнаяПоставка, НСтр("ru = 'Экспорт'"), НСтр("ru = 'Внутренняя'")));
		
		ДанныеПечати.Вставить("ЗначениеСтавкиНДС", УчетНДСВызовСервера.ПолучитьСтавкуНДС(Шапка.Дата, Шапка.СтавкаНДС));
		ДанныеПечати.Вставить("ЗначениеСтавкиНСП", УчетНДСВызовСервера.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, Шапка.СтавкаНСП));
		
		ТаблицаТовары = Шапка.Товары.Выгрузить();
		
		Всего = ТаблицаТовары.Итог("Всего");
		Сумма = ТаблицаТовары.Итог("Сумма");
		ВсегоНДС = ТаблицаТовары.Итог("СуммаНДС");
		ВсегоНСП = ТаблицаТовары.Итог("СуммаНСП");
		КоличествоНаименований = ТаблицаТовары.Количество();		
		
		// Подвал.
		ДанныеПечати.Вставить("Всего", Всего);
		ДанныеПечати.Вставить("Сумма", Сумма);
		ДанныеПечати.Вставить("ВсегоНДС", ВсегоНДС);
		ДанныеПечати.Вставить("ВсегоНСП", ВсегоНСП);
		ДанныеПечати.Вставить("ИтоговаяСтрока", 
			СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"), 
			Формат(КоличествоНаименований, "ЧН=0; ЧГ=0"), Формат(ДанныеПечати.Всего, "ЧЦ=15; ЧДЦ=2")));
		ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(ДанныеПечати.Всего));
		
		// Подписи.
		РасшифровкаПодписиРуководителя = "";
		РасшифровкаПодписиГлавногоБухгалтера = "";
		ОтветственныеЛица = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата);
		БухгалтерскийУчетСервер.ФамилияИнициалыПоНаименованию(РасшифровкаПодписиРуководителя, ОтветственныеЛица.Руководитель);
		БухгалтерскийУчетСервер.ФамилияИнициалыПоНаименованию(РасшифровкаПодписиГлавногоБухгалтера, ОтветственныеЛица.ГлавныйБухгалтер);
		
		ДанныеПечати.Вставить("РасшифровкаПодписиРуководителя", РасшифровкаПодписиРуководителя);
		ДанныеПечати.Вставить("РасшифровкаПодписиГлавногоБухгалтера", РасшифровкаПодписиГлавногоБухгалтера);
		ДанныеПечати.Вставить("ФаксимилеРуководителя", ОтветственныеЛица.ФаксимилеРуководителя);
		ДанныеПечати.Вставить("ФаксимилеГлавногоБухгалтера", ОтветственныеЛица.ФаксимилеГлавногоБухгалтера);
		
		// Области.
		МассивОбластейМакета = Новый Массив;
		МассивОбластейМакета.Добавить("Заголовок");
		МассивОбластейМакета.Добавить("ШапкаТаблицы");
		МассивОбластейМакета.Добавить("СтрокаТаблицы");
		МассивОбластейМакета.Добавить("Подвал");
		МассивОбластейМакета.Добавить("СуммаПрописью");
		Если ЗначениеЗаполнено(Шапка.ФайлФаксимильнаяПечать) Тогда 
			МассивОбластейМакета.Добавить("ПодписиСФаксимиле");
		Иначе 
			МассивОбластейМакета.Добавить("ПодписиБезФаксимиле");
		КонецЕсли;	
		
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			
			Если ИмяОбласти = "ЗаголовокСЛоготипом" Тогда
				Логотип = Новый Соответствие; // Ключ - имя каринки в области, Значение - имя реквизита
				Логотип.Вставить("Логотип", "ФайлЛоготип");
				ЗаполнитьЛоготипФаксимилеВОбластиМакета(ОбластьМакета, ДанныеПечати, Логотип, Ошибки);
			ИначеЕсли ИмяОбласти = "ПодписиСФаксимиле" Тогда 
				ПодписиИФаксимиле = Новый Соответствие; // Ключ - имя каринки в области, Значение - имя реквизита
				ПодписиИФаксимиле.Вставить("ПодписьРуководителя", "ФаксимилеРуководителя");
				ПодписиИФаксимиле.Вставить("ПодписьГлавногоБухгалтера", "ФаксимилеГлавногоБухгалтера");
				ПодписиИФаксимиле.Вставить("ПечатьОрганизации", "ФайлФаксимильнаяПечать");
				ЗаполнитьЛоготипФаксимилеВОбластиМакета(ОбластьМакета, ДанныеПечати, ПодписиИФаксимиле, Ошибки);
			КонецЕсли;	

			Если ИмяОбласти <> "СтрокаТаблицы" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			ИначеЕсли ИмяОбласти = "СтрокаТаблицы" Тогда 
				Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
					ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
 			
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
		
КонецФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;

	// Проверяем, нужно ли для макета формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"Накладная", НСтр("ru = 'Накладная'"), ПечатьНакладной(МассивОбъектов, ОбъектыПечати),,
			"Документ.ВозвратТоваровПоставщику.ПФ_MXL_Накладная");
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура001") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"СчетФактура001", НСтр("ru = 'Счет-фактура НДС 001'"), ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, 20));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура002") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"СчетФактура002", НСтр("ru = 'Счет-фактура НДС 002'"), ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, 7));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактураБезНДС") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"СчетФактураБезНДС", НСтр("ru = 'Счет-фактура без бланка НДС'"), ПечатьСчетФактураБезНДС(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
		
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru = 'Накладная'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура001";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура НДС 001'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 2;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура002";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура НДС 002'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 3;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактураБезНДС";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура без бланка НДС'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 4;
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "РеестрВозвратТоваровОтПокупателя";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Возврат товаров от покупателя""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает заголовок документа для печатной формы.
//
// Параметры:
//  Шапка - любая структура с полями:
//           Номер         - Строка или Число - номер документа;
//           Дата          - Дата - дата документа;
//           Представление - Строка - (необязательный) платформенное представление ссылки на документ.
//                                    Если параметр НазваниеДокумента не задан, то название документа будет вычисляться
//                                    из этого параметра.
//  НазваниеДокумента - Строка - название документа (например, "Счет на оплату").
//
// Возвращаемое значение:
//  Строка - заголовок документа.
//
Функция СформироватьЗаголовокДокумента(Шапка, Знач НазваниеДокумента = "")
	
	ДанныеДокумента = Новый Структура("Номер,Дата,Представление");
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, Шапка);
	
	// Если название документа не передано, получим название по представлению документа.
	Если ПустаяСтрока(НазваниеДокумента) И ЗначениеЗаполнено(ДанныеДокумента.Представление) Тогда
		ПоложениеНомера = СтрНайти(ДанныеДокумента.Представление, ДанныеДокумента.Номер);
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(ДанныеДокумента.Представление, ПоложениеНомера - 1));
		КонецЕсли;
	КонецЕсли;

	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.Номер);
	Возврат СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),
		НазваниеДокумента, НомерНаПечать, Формат(ДанныеДокумента.Дата, "ДЛФ=DD"));
	
КонецФункции

Процедура ЗаполнитьЛоготипФаксимилеВОбластиМакета(ОбластьМакета, ДанныеОбъекта, ПодписиИФаксимиле, Ошибки) Экспорт
	
	Для каждого ЭлементСоответствия Из ПодписиИФаксимиле Цикл
		
		ПлашкаПодписи = ПолучитьПлашкуПодписиБезопасно(ОбластьМакета, ЭлементСоответствия.Ключ, , Ошибки);
		Если ПлашкаПодписи = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеОбъекта[ЭлементСоответствия.Значение]) Тогда
			                 
			ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ДанныеОбъекта[ЭлементСоответствия.Значение]);
			Если ЗначениеЗаполнено(ДвоичныеДанные) Тогда
				
				ПлашкаПодписи.Картинка = Новый Картинка(ДвоичныеДанные);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПлашкуПодписиБезопасно(ОбластьМакета, ИмяПлашки, ПредставлениеПодписи, Ошибки) Экспорт
	
	ПлашкаПодписи = ОбластьМакета.Области.Найти(ИмяПлашки);
	Если ПлашкаПодписи = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Нет места для картинки %1. Возможно используется пользовательский макет.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ?(ПустаяСтрока(ПредставлениеПодписи), ИмяПлашки, ПредставлениеПодписи));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстСообщения, Неопределено);
		
	КонецЕсли;
	
	ПлашкаПодписи.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
	
	Возврат ПлашкаПодписи;
	
КонецФункции

#КонецОбласти

#КонецЕсли
