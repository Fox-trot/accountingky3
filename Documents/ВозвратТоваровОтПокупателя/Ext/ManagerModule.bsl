#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыПроведенияДокумента

// Формирует таблицу значений, содержащую данные для проведения по регистру бухгалтерии Хозрасчетный.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаХозрасчетный(ДокументСсылка,СтруктураДополнительныеСвойства)
	
	// Подготовка данных
	// 1. Таблица Реквизиты
	// 2. Таблица Товары
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Ссылка КАК Регистратор,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.Склад КАК Склад,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаВзаиморасчетов
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ВременнаяТаблицаТовары.Номенклатура,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Сумма * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2)) КАК Сумма,
		|	ВременнаяТаблицаТовары.Сумма КАК СуммаВзаиморасчетов,
		|	ВременнаяТаблицаТовары.Количество,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК КорСчет,
		|	ВременнаяТаблицаШапка.Контрагент КАК КорСубконто1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	&Содержание КАК Содержание
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.Сумма = 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Запрос.УстановитьПараметр("Содержание", НСтр("ru = 'Возврат товаров от покупателя'")); 
	МассивРезультатов = Запрос.ВыполнитьПакет();

	ТаблицаРеквизиты = МассивРезультатов[0].Выгрузить();
	ТаблицаТовары = МассивРезультатов[1].Выгрузить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаТовары", ТаблицаТовары);

	// 1. Доход от реализации товаров
	// 2. НДС товары
	// 3. НСП товары
	// 4. Скидки товары
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаТовары.СчетДохода КАК СчетДт,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетКт,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоКт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВЫРАЗИТЬ((ВременнаяТаблицаТовары.Всего - ВременнаяТаблицаТовары.СуммаНДС - ВременнаяТаблицаТовары.СуммаНСП) * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2)) КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,
		|	ВременнаяТаблицаТовары.Всего - ВременнаяТаблицаТовары.СуммаНДС - ВременнаяТаблицаТовары.СуммаНСП КАК ВалютнаяСуммаДт,
		|	ВременнаяТаблицаТовары.Всего - ВременнаяТаблицаТовары.СуммаНДС - ВременнаяТаблицаТовары.СуммаНСП КАК ВалютнаяСуммаКт,
		|	&СодержаниеТоварыДоход КАК Содержание
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.Всего = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СчетУчетаНДС,
		|	ВременнаяТаблицаШапка.СчетРасчетов,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.СуммаНДС * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2)),
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаТовары.СуммаНДС,
		|	ВременнаяТаблицаТовары.СуммаНДС,
		|	&СодержаниеТоварыНДС
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.СуммаНДС = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СчетУчетаНСП,
		|	ВременнаяТаблицаШапка.СчетРасчетов,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.СуммаНСП * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2)),
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаТовары.СуммаНСП,
		|	ВременнаяТаблицаТовары.СуммаНСП,
		|	&СодержаниеТоварыНСП
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.СуммаНСП = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов,
		|	ВременнаяТаблицаШапка.СчетУчетаСкидок,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.СуммаСкидки * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2)),
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаТовары.СуммаСкидки,
		|	ВременнаяТаблицаТовары.СуммаСкидки,
		|	&СодержаниеТоварыСкидка
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.СуммаСкидки = 0";
	Запрос.УстановитьПараметр("СодержаниеТоварыДоход", НСтр("ru = 'Доход от реализации товаров (сторно)'")); 
	Запрос.УстановитьПараметр("СодержаниеТоварыНДС", НСтр("ru = 'НДС (товары) (сторно)'")); 
	Запрос.УстановитьПараметр("СодержаниеТоварыНСП", НСтр("ru = 'НСП (товары) (сторно)'")); 
	Запрос.УстановитьПараметр("СодержаниеТоварыСкидка", НСтр("ru = 'Скидка на товары (сторно)'")); 
	
	РезультатЗапроса = Запрос.Выполнить();	
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", РезультатЗапроса.Выгрузить());	
		
КонецПроцедуры // СформироватьТаблицаХозрасчетный()

// Формирует таблицу значений, содержащую данные для проведения по регистру бухгалтерии Хозрасчетный.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРеализацияТоваров(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.Ссылка КАК ДокументРеализации,
		|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК Договор,
		|	ВременнаяТаблицаШапка.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаШапка.СтавкаНСП КАК СтавкаНСП,
		|	ЛОЖЬ КАК БезналичныйРасчет,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Количество * -1 КАК Количество,
		|	(ВЫРАЗИТЬ((ВременнаяТаблицаТовары.Всего - ВременнаяТаблицаТовары.СуммаНДС - ВременнаяТаблицаТовары.СуммаНСП) * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2))) * -1 КАК Доход,
		|	(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.СуммаНДС * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2))) * -1 КАК СуммаНДС,
		|	(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.СуммаНСП * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2))) * -1 КАК СуммаНСП,
		|	(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.СуммаСкидки * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2))) * -1 КАК СуммаСкидки,
		|	0 КАК Себестоимость
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.Всего = 0";
	РезультатЗапроса = Запрос.Выполнить();	
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРеализацияТоваров", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаРеализацияТоваров(ДокументСсылка, СтруктураДополнительныеСвойства) 

// Формирует таблицу значений, содержащую данные для проведения по регистру бухгалтерии Хозрасчетный.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаНДС(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =	
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВременнаяТаблицаШапка.СтавкаНДС КАК СтавкаНДС,
		|	(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.СуммаНДС * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2))) * -1 КАК СуммаНДС,
		|	(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.СуммаНСП * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2))) * -1 КАК СуммаНСП,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаШапка.СуммаВключаетНалоги
		|			ТОГДА ВЫРАЗИТЬ((ВременнаяТаблицаТовары.Всего - ВременнаяТаблицаТовары.СуммаНДС - ВременнаяТаблицаТовары.СуммаНСП) * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Всего * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность КАК ЧИСЛО(15, 2))
		|	КОНЕЦ * -1 КАК СуммаБезНДС
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.Всего = 0";
	РезультатЗапроса = Запрос.Выполнить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаНДС", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка,
		|	ТаблицаДокумента.Дата,
		|	ТаблицаДокумента.Номер,
		|	ТаблицаДокумента.Организация,
		|	ТаблицаДокумента.Склад,
		|	ТаблицаДокумента.Контрагент,
		|	ТаблицаДокумента.ДоговорКонтрагента,
		|	ТаблицаДокумента.СчетРасчетов,
		|	ТаблицаДокумента.ВалютаДокумента,
		|	ТаблицаДокумента.Курс,
		|	ТаблицаДокумента.Кратность,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСКОплате) КАК СчетУчетаНДС,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НалогСПродаж) КАК СчетУчетаНСП,
		|	ТаблицаДокумента.СтавкаНДС,
		|	ТаблицаДокумента.СтавкаНСП,
		|	ТаблицаДокумента.СуммаВключаетНалоги,
		|	ТаблицаДокумента.СчетУчетаСкидок
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки,
		|	ТаблицаДокумента.Номенклатура,
		|	ТаблицаДокумента.Количество,
		|	ТаблицаДокумента.Всего,
		|	ТаблицаДокумента.Сумма,
		|	ТаблицаДокумента.СуммаНДС,
		|	ТаблицаДокумента.СуммаНСП,
		|	ТаблицаДокумента.СуммаСкидки,
		|	ТаблицаДокумента.СчетУчета,
		|	ТаблицаДокумента.СчетДохода,
		|	ТаблицаДокумента.СчетСебестоимости,
		|	ТаблицаДокумента.СтатьяРасхода
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	СформироватьТаблицаХозрасчетный(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаРеализацияТоваров(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаНДС(ДокументСсылка, СтруктураДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Функция формирует табличный документ с печатной формой ПечатьНакладной
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьНакладной(МассивОбъектов, ОбъектыПечати)
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателя.Ссылка,
		|	ВозвратТоваровОтПокупателя.Номер,
		|	ВозвратТоваровОтПокупателя.Дата,
		|	ВозвратТоваровОтПокупателя.Организация,
		|	ВозвратТоваровОтПокупателя.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	ВозвратТоваровОтПокупателя.Склад,
		|	ПРЕДСТАВЛЕНИЕ(ВозвратТоваровОтПокупателя.Склад) КАК СкладПредставление,
		|	ВозвратТоваровОтПокупателя.Контрагент,
		|	ВозвратТоваровОтПокупателя.Контрагент.НаименованиеПолное КАК КонтрагентПредставление,
		|	ВозвратТоваровОтПокупателя.Товары.(
		|		НомерСтроки,
		|		Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		ПРЕДСТАВЛЕНИЕ(ВозвратТоваровОтПокупателя.Товары.Номенклатура.ЕдиницаИзмерения) КАК ЕИ,
		|		Количество,
		|		Цена,
		|		Сумма,
		|		СуммаНДС,
		|		СуммаНСП,
		|		СуммаСкидки,
		|		Всего
		|	)
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		|ГДЕ
		|	ВозвратТоваровОтПокупателя.Ссылка В(&СписокДокументов)";		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ВозвратТоваровОтПокупателя_Накладная";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВозвратТоваровОтПокупателя.ПФ_MXL_Накладная");
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;
		
		ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, НСтр("ru = 'Накладная на возврат от покупателя'"));
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДанныеПечати.Вставить("ОрганизацияПредставление", Шапка.ОрганизацияПредставление);
		ДанныеПечати.Вставить("СкладПредставление", Шапка.СкладПредставление);
		ДанныеПечати.Вставить("ПолучательПредставление", Шапка.КонтрагентПредставление);

		ТаблицаТовары = Шапка.Товары.Выгрузить();
		
		Всего = ТаблицаТовары.Итог("Всего");
		ВсегоНДС = ТаблицаТовары.Итог("СуммаНДС");
		ВсегоНСП = ТаблицаТовары.Итог("СуммаНСП");
		КоличествоНаименований = ТаблицаТовары.Количество();		
		
		ВсегоСкидка = ТаблицаТовары.Итог("СуммаСкидки");
		ЕстьСкидка = ВсегоСкидка <> 0;
		
		ДанныеПечати.Вставить("Всего", Всего);
		ДанныеПечати.Вставить("ВсегоНДС", ВсегоНДС);
		ДанныеПечати.Вставить("ВсегоНСП", ВсегоНСП);
		ДанныеПечати.Вставить("ИтоговаяСтрока", 
			СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"), 
			Формат(КоличествоНаименований, "ЧН=0; ЧГ=0"), Формат(ДанныеПечати.Всего, "ЧЦ=15; ЧДЦ=2")));
		ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(ДанныеПечати.Всего));

		// Области
		МассивОбластейМакета = Новый Массив;
		МассивОбластейМакета.Добавить("Заголовок");
		Если ЕстьСкидка Тогда 
			МассивОбластейМакета.Добавить("ШапкаТаблицыСоСкидкой");
			МассивОбластейМакета.Добавить("СтрокаСоСкидкой");
		Иначе 
			МассивОбластейМакета.Добавить("ШапкаТаблицы");
			МассивОбластейМакета.Добавить("Строка");
		КонецЕсли;	
		МассивОбластейМакета.Добавить("Подвал");
		МассивОбластейМакета.Добавить("Итоги");
		МассивОбластейМакета.Добавить("ИтогиНДС");
		МассивОбластейМакета.Добавить("ИтогиНСП");
		Если ЕстьСкидка Тогда 
			МассивОбластейМакета.Добавить("ИтогиСкидка");
		КонецЕсли;	
		МассивОбластейМакета.Добавить("СуммаПрописью");
		МассивОбластейМакета.Добавить("Подписи");
	
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			Если ИмяОбласти <> "Строка" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			ИначеЕсли ИмяОбласти = "Строка" Тогда 
				Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
			КонецЕсли;	
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует табличный документ с печатной формой Счет-фактура
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.КлючПараметровПечати = "ВозвратТоваровОтПокупателя_СчетФактура";

	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщиеМакеты.СчетФактура");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Номер,
	|	ВозвратТоваровОтПокупателя.Дата,
	|	ВозвратТоваровОтПокупателя.Организация,
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	ВозвратТоваровОтПокупателя.Контрагент,
	|	ВозвратТоваровОтПокупателя.Склад,
	|	ВозвратТоваровОтПокупателя.Товары.(
	|		Номенклатура,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Количество,
	|		Цена,
	|		Сумма,
	|		СуммаНДС,
	|		СуммаНСП,
	|		НомерСтроки,
	|		СуммаСкидки
	|	),
	|	ВозвратТоваровОтПокупателя.Организация.ИНН КАК ИНН,
	|	ВозвратТоваровОтПокупателя.Организация.ОсновнойБанковскийСчет КАК ОснБанкСчет,
	|	ВозвратТоваровОтПокупателя.Организация.ГНС КАК ГНС ,                        //ГНСГоловнойОрганизации КАК ГНС,
	|	ВозвратТоваровОтПокупателя.Организация.НаименованиеПолное КАК НаименованиеПолное,
	|	НЕОПРЕДЕЛЕНО КАК Поле1,
	|	ВозвратТоваровОтПокупателя.Контрагент.ОсновнойБанковскийСчет КАК ОснБанкСчет_Пок,
	|	НЕОПРЕДЕЛЕНО КАК Поле2,
	|	ВозвратТоваровОтПокупателя.Контрагент.КонтактнаяИнформация.(
	|		Ссылка КАК Поле1,
	|		НомерСтроки КАК Поле2,
	|		Тип КАК Поле3,
	|		Вид КАК Поле4,
	|		Представление КАК Поле5,
	|		ЗначенияПолей КАК Поле6,
	|		Страна КАК Поле7,
	|		Регион КАК Поле8,
	|		Город КАК Поле9,
	|		АдресЭП КАК Поле10,
	|		ДоменноеИмяСервера КАК Поле11,
	|		НомерТелефона КАК Поле12,
	|		НомерТелефонаБезКодов КАК Поле13
	|	) КАК Контрагент1,
	|	ВозвратТоваровОтПокупателя.ДоговорКонтрагента.СтавкаНДС,
	|	СтавкиНДССрезПоследних.Ставка,
	|	СтавкиНСПСрезПоследних.СтавкаПлательщикНДС КАК СтавкаНСП,
	|	СтавкиНСПСрезПоследних.СтавкаНеПлательщикНДС КАК СтавкаНСПне,
	|	ВозвратТоваровОтПокупателя.СуммаДокумента,
	|	ВозвратТоваровОтПокупателя.Организация.ОсновнойБанковскийСчет КАК БанковскийСчет,
	|	ВозвратТоваровОтПокупателя.ДокументОснование.ПроцентСкидкиНаценки КАК ПроцентСкидки,
	|	ВозвратТоваровОтПокупателя.ДокументОснование.СтавкаНСП
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДС.СрезПоследних(, ) КАК СтавкиНДССрезПоследних
	|		ПО ВозвратТоваровОтПокупателя.ДоговорКонтрагента.СтавкаНДС = СтавкиНДССрезПоследних.СтавкаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНСП.СрезПоследних(, ) КАК СтавкиНСПСрезПоследних
	|		ПО ВозвратТоваровОтПокупателя.ДокументОснование.СтавкаНСП = СтавкиНСПСрезПоследних.СтавкаНСП
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Ссылка В(&СписокДокументов)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ДанныеПечати = Новый Структура;
		
		ВременнаяТаблицаТовары = Выборка.Товары.Выгрузить();                                        
		
		ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
		
		//////////////////////Данные поставщика НАЧАЛО/////////////////////////////////////
		
		ОбластьМакетаШапка.Параметры.Номер                     = Выборка.Номер;
		ДатаСФ                         					 	   = Строка(Выборка.Дата);
		ОбластьМакетаШапка.Параметры.Дата1                     = Сред(ДатаСФ,1,1);
		ОбластьМакетаШапка.Параметры.Дата2                     = Сред(ДатаСФ,2,1);
		ОбластьМакетаШапка.Параметры.Дата4                     = Сред(ДатаСФ,4,1);
		ОбластьМакетаШапка.Параметры.Дата5                     = Сред(ДатаСФ,5,1);
		ОбластьМакетаШапка.Параметры.Дата7                     = Сред(ДатаСФ,7,1);
		ОбластьМакетаШапка.Параметры.Дата8                     = Сред(ДатаСФ,8,1);
		ОбластьМакетаШапка.Параметры.Дата9                     = Сред(ДатаСФ,9,1);
		ОбластьМакетаШапка.Параметры.Дата10                    = Сред(ДатаСФ,10,1);
		
		ОбластьМакетаШапка.Параметры.ДП1                       = Сред(ДатаСФ,1,1);
		ОбластьМакетаШапка.Параметры.ДП2                       = Сред(ДатаСФ,2,1);
		ОбластьМакетаШапка.Параметры.ДП4                       = Сред(ДатаСФ,4,1);
		ОбластьМакетаШапка.Параметры.ДП5                       = Сред(ДатаСФ,5,1);
		ОбластьМакетаШапка.Параметры.ДП7                       = Сред(ДатаСФ,7,1);
		ОбластьМакетаШапка.Параметры.ДП8                       = Сред(ДатаСФ,8,1);
		ОбластьМакетаШапка.Параметры.ДП9                       = Сред(ДатаСФ,9,1);
		ОбластьМакетаШапка.Параметры.ДП10                      = Сред(ДатаСФ,10,1);
		
		ИННнаш = Выборка.ИНН;	
		ОбластьМакетаШапка.Параметры.ИННПост1					= Сред(ИННнаш,1,1);	
		ОбластьМакетаШапка.Параметры.ИННПост2					= Сред(ИННнаш,2,1);	
		ОбластьМакетаШапка.Параметры.ИННПост3					= Сред(ИННнаш,3,1);
		ОбластьМакетаШапка.Параметры.ИННПост4					= Сред(ИННнаш,4,1);
		ОбластьМакетаШапка.Параметры.ИННПост5					= Сред(ИННнаш,5,1);
		ОбластьМакетаШапка.Параметры.ИННПост6					= Сред(ИННнаш,6,1);
		ОбластьМакетаШапка.Параметры.ИННПост7					= Сред(ИННнаш,7,1);
		ОбластьМакетаШапка.Параметры.ИННПост8					= Сред(ИННнаш,8,1);
		ОбластьМакетаШапка.Параметры.ИННПост9					= Сред(ИННнаш,9,1);
		ОбластьМакетаШапка.Параметры.ИННПост10					= Сред(ИННнаш,10,1);
		ОбластьМакетаШапка.Параметры.ИННПост11					= Сред(ИННнаш,11,1);
		ОбластьМакетаШапка.Параметры.ИННПост12					= Сред(ИННнаш,12,1);
		ОбластьМакетаШапка.Параметры.ИННПост13					= Сред(ИННнаш,13,1);
		ОбластьМакетаШапка.Параметры.ИННПост14					= Сред(ИННнаш,14,1);
		
		БанкНашСсылка  	= Выборка.БанковскийСчет;
		БИКнаш	 = БанкНашСсылка.Банк.Код;
		ОбластьМакетаШапка.Параметры.БИКПоставщика1				= Сред(БИКнаш,1,1);
		ОбластьМакетаШапка.Параметры.БИКПоставщика2				= Сред(БИКнаш,2,1);
		ОбластьМакетаШапка.Параметры.БИКПоставщика3		        = Сред(БИКнаш,3,1);
		ОбластьМакетаШапка.Параметры.БИКПоставщика4				= Сред(БИКнаш,4,1);
		ОбластьМакетаШапка.Параметры.БИКПоставщика5				= Сред(БИКнаш,5,1);	
		ОбластьМакетаШапка.Параметры.БИКПоставщика6				= Сред(БИКнаш,6,1);
		ОбластьМакетаШапка.Параметры.БИКПоставщика7				= Сред(БИКнаш,7,1);
		ОбластьМакетаШапка.Параметры.БИКПоставщика8				= Сред(БИКнаш,8,1);
		ОбластьМакетаШапка.Параметры.БИКПоставщика9				= Сред(БИКнаш,9,1);
		
		
		РСчетНаш = ?(не ЗначениеЗаполнено(БанкНашСсылка.НомерСчета),БанкНашСсылка.Наименование,БанкНашСсылка.НомерСчета);
		ОбластьМакетаШапка.Параметры.СчетПоставщика1			= Сред(РСчетНаш,1,1);
		ОбластьМакетаШапка.Параметры.СчетПоставщика2			= Сред(РСчетНаш,2,1);
		ОбластьМакетаШапка.Параметры.СчетПоставщика3			= Сред(РСчетНаш,3,1);
		ОбластьМакетаШапка.Параметры.СчетПоставщика4			= Сред(РСчетНаш,4,1);
		ОбластьМакетаШапка.Параметры.СчетПоставщика5			= Сред(РСчетНаш,5,1);
		ОбластьМакетаШапка.Параметры.СчетПоставщика6			= Сред(РСчетНаш,6,1);
		ОбластьМакетаШапка.Параметры.СчетПоставщика7			= Сред(РСчетНаш,7,1);
		ОбластьМакетаШапка.Параметры.СчетПоставщика8			= Сред(РСчетНаш,8,1);
		ОбластьМакетаШапка.Параметры.СчетПоставщика9			= Сред(РСчетНаш,9,1);
		ОбластьМакетаШапка.Параметры.СчетПоставщика10			= Сред(РСчетНаш,10,1);
		ОбластьМакетаШапка.Параметры.СчетПоставщика11			= Сред(РСчетНаш,11,1);
		ОбластьМакетаШапка.Параметры.СчетПоставщика12			= Сред(РСчетНаш,12,1);
		ОбластьМакетаШапка.Параметры.СчетПоставщика13			= Сред(РСчетНаш,13,1);
		ОбластьМакетаШапка.Параметры.СчетПоставщика14			= Сред(РСчетНаш,14,1);
		ОбластьМакетаШапка.Параметры.СчетПоставщика15			= Сред(РСчетНаш,15,1);
		ОбластьМакетаШапка.Параметры.СчетПоставщика16			= Сред(РСчетНаш,16,1);
		ОбластьМакетаШапка.Параметры.СчетПоставщика17			= Сред(РСчетНаш,17,1);
		ОбластьМакетаШапка.Параметры.СчетПоставщика18			= Сред(РСчетНаш,18,1);
		ОбластьМакетаШапка.Параметры.СчетПоставщика19			= Сред(РСчетНаш,19,1);
		
		ОбластьМакетаШапка.Параметры.БанкПост    			    = БанкНашСсылка.Банк.Наименование;
		
		ГНСнаш 													= Выборка.ГНС;
		
		ОбластьМакетаШапка.Параметры.ГНСПоставщика1				= Сред(ГНСнаш.Код,1,1);
		ОбластьМакетаШапка.Параметры.ГНСПоставщика2				= Сред(ГНСнаш.Код,2,1);
		ОбластьМакетаШапка.Параметры.ГНСПоставщика3				= Сред(ГНСнаш.Код,3,1);
		
		ОбластьМакетаШапка.Параметры.НаименованиеГНСПоставщика  = ГНСнаш.Наименование;
		ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика    = СокрЛП(Выборка.НаименованиеПолное);
		
		ОбластьМакетаШапка.Параметры.АдресПоставщика 			= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Выборка.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации); 			
		//////////////////////Данные поставщика КОНЕЦ/////////////////////////////////////
		
		//////////////////////Данные покупателя НАЧАЛО/////////////////////////////////////
		ОбластьМакетаШапка.Параметры.АдресПокупателя 			= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Выборка.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента); 
		
		ИННпокупателя 											= Выборка.Контрагент.ИНН;
		ОбластьМакетаШапка.Параметры.ИННПок1					= Сред(ИННпокупателя,1,1);
		ОбластьМакетаШапка.Параметры.ИННПок2					= Сред(ИННпокупателя,2,1);
		ОбластьМакетаШапка.Параметры.ИННПок3					= Сред(ИННпокупателя,3,1);
		ОбластьМакетаШапка.Параметры.ИННПок4					= Сред(ИННпокупателя,4,1);
		ОбластьМакетаШапка.Параметры.ИННПок5					= Сред(ИННпокупателя,5,1);
		ОбластьМакетаШапка.Параметры.ИННПок6					= Сред(ИННпокупателя,6,1);
		ОбластьМакетаШапка.Параметры.ИННПок7					= Сред(ИННпокупателя,7,1);
		ОбластьМакетаШапка.Параметры.ИННПок8					= Сред(ИННпокупателя,8,1);
		ОбластьМакетаШапка.Параметры.ИННПок9					= Сред(ИННпокупателя,9,1);
		ОбластьМакетаШапка.Параметры.ИННПок10					= Сред(ИННпокупателя,10,1);
		ОбластьМакетаШапка.Параметры.ИННПок11					= Сред(ИННпокупателя,11,1);
		ОбластьМакетаШапка.Параметры.ИННПок12					= Сред(ИННпокупателя,12,1);
		ОбластьМакетаШапка.Параметры.ИННПок13					= Сред(ИННпокупателя,13,1);
		ОбластьМакетаШапка.Параметры.ИННПок14					= Сред(ИННпокупателя,14,1);
		
		ОбластьМакетаШапка.Параметры.ПредставлениеПокупателя    = СокрЛП(Выборка.Контрагент.НаименованиеПолное);
		
		КодГНСПок          										= Выборка.Контрагент.ГНС.Код;
		ОбластьМакетаШапка.Параметры.ГНСПок1					= Сред(КодГНСПок,1,1);
		ОбластьМакетаШапка.Параметры.ГНСПок2					= Сред(КодГНСПок,2,1);
		ОбластьМакетаШапка.Параметры.ГНСПок3					= Сред(КодГНСПок,3,1);
		
		ОбластьМакетаШапка.Параметры.НаименованиеГНСПок 		 = Выборка.Контрагент.ГНС.Наименование;
		
		БанкСсылкаПок  											= Выборка.ОснБанкСчет_Пок;
		СчетПок 												= ?(не ЗначениеЗаполнено(БанкСсылкаПок.НомерСчета),
																БанкСсылкаПок.Наименование,БанкСсылкаПок.НомерСчета);
		ОбластьМакетаШапка.Параметры.СчетПок1					= Сред(СчетПок,1,1);
		ОбластьМакетаШапка.Параметры.СчетПок2					= Сред(СчетПок,2,1);
		ОбластьМакетаШапка.Параметры.СчетПок3					= Сред(СчетПок,3,1);
		ОбластьМакетаШапка.Параметры.СчетПок4					= Сред(СчетПок,4,1);
		ОбластьМакетаШапка.Параметры.СчетПок5					= Сред(СчетПок,5,1);
		ОбластьМакетаШапка.Параметры.СчетПок6					= Сред(СчетПок,6,1);
		ОбластьМакетаШапка.Параметры.СчетПок7					= Сред(СчетПок,7,1);
		ОбластьМакетаШапка.Параметры.СчетПок8					= Сред(СчетПок,8,1);
		ОбластьМакетаШапка.Параметры.СчетПок9					= Сред(СчетПок,9,1);
		ОбластьМакетаШапка.Параметры.СчетПок10	  				= Сред(СчетПок,10,1);
		ОбластьМакетаШапка.Параметры.СчетПок11					= Сред(СчетПок,11,1);
		ОбластьМакетаШапка.Параметры.СчетПок12					= Сред(СчетПок,12,1);
		ОбластьМакетаШапка.Параметры.СчетПок13					= Сред(СчетПок,13,1);
		ОбластьМакетаШапка.Параметры.СчетПок14					= Сред(СчетПок,14,1);
		ОбластьМакетаШапка.Параметры.СчетПок15					= Сред(СчетПок,15,1);
		ОбластьМакетаШапка.Параметры.СчетПок16					= Сред(СчетПок,16,1);
		ОбластьМакетаШапка.Параметры.СчетПок17					= Сред(СчетПок,17,1);
		ОбластьМакетаШапка.Параметры.СчетПок18					= Сред(СчетПок,18,1);
		ОбластьМакетаШапка.Параметры.СчетПок19					= Сред(СчетПок,19,1);
		
		БИКПок = БанкСсылкаПок.Банк.Код;   
		ОбластьМакетаШапка.Параметры.БИКПок1					= Сред(БИКПок,1,1);
		ОбластьМакетаШапка.Параметры.БИКПок2					= Сред(БИКПок,2,1);
		ОбластьМакетаШапка.Параметры.БИКПок3					= Сред(БИКПок,3,1);
		ОбластьМакетаШапка.Параметры.БИКПок4					= Сред(БИКПок,4,1);
		ОбластьМакетаШапка.Параметры.БИКПок5					= Сред(БИКПок,5,1);
		ОбластьМакетаШапка.Параметры.БИКПок6					= Сред(БИКПок,6,1);
		ОбластьМакетаШапка.Параметры.БИКПок7					= Сред(БИКПок,7,1);
		ОбластьМакетаШапка.Параметры.БИКПок8					= Сред(БИКПок,8,1);
		ОбластьМакетаШапка.Параметры.БИКПок9					= Сред(БИКПок,9,1);
		
		ОбластьМакетаШапка.Параметры.БанкПок     	= БанкСсылкаПок.Банк.Наименование;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);  
		
		ОбластьМакетаЗаголовоТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");	                             
		ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовоТаблицы);
		//////////////////////Данные покупателя КОНЕЦ/////////////////////////////////////
		
		//////////////////////ТабЧасть НАЧАЛО/////////////////////////////////////
		
		ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");	 
		ВыборкаТовары = Выборка.Товары.Выбрать();
		
		СуммаБезНДСПоДокументу = 0;
		Пока ВыборкаТовары.Следующий()Цикл  
			
			ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаТовары);
			ОбластьМакетаСтрока.Параметры.Доход  = ВыборкаТовары.Сумма - ВыборкаТовары.СуммаНДС;
			ОбластьМакетаСтрока.Параметры.СтавкаНДС = Выборка.Ставка; 
			
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
			
			СуммаБезНДСПоДокументу = СуммаБезНДСПоДокументу + ВыборкаТовары.Сумма - ВыборкаТовары.СуммаНДС;

		КонецЦикла; 
		
		ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
		
		ОбластьМакетаСтрока.Параметры.Номенклатура = "Скидка" + Выборка.ПроцентСкидки + "%";
		ОбластьМакетаСтрока.Параметры.Доход  = ВыборкаТовары.СуммаСкидки;
		ОбластьМакетаСтрока.Параметры.Всего = ВыборкаТовары.СуммаСкидки;
			
		ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
			
		СуммаБезНДСПоДокументу = СуммаБезНДСПоДокументу - ВыборкаТовары.СуммаСкидки;
		
		ОбластьМакетаИтого 			= Макет.ПолучитьОбласть("Итого");
		ОбластьМакетаИтогоНСП		= Макет.ПолучитьОбласть("ИтогоНСП");
		ОбластьМакетаИтогоВсего	 	= Макет.ПолучитьОбласть("ИтогоВсего");
		
		СуммаКоличестоПоДокументу 	= Выборка.Товары.Выгрузить().Итог("Количество");
		СуммаНДСПоДокументу 		= Выборка.Товары.Выгрузить().Итог("СуммаНДС");
		СуммаВсегоПоДокументу 		= Выборка.Товары.Выгрузить().Итог("Сумма") - ВыборкаТовары.СуммаСкидки;
		СуммаНСППоДокументу 		= Выборка.Товары.Выгрузить().Итог("СуммаНСП");
		СуммаПоДокументуСНСП    	= СуммаВсегоПоДокументу;
		
		СуммаДокументаПрописью 		= БухгалтерскийУчетСервер.СформироватьСуммуПрописью(СуммаПоДокументуСНСП);
		
		ОбластиМакетаИтоговДляЗаполнения = Новый Структура();
		ОбластиМакетаИтоговДляЗаполнения.Вставить("ИтогоКоличество", СуммаКоличестоПоДокументу);
		ОбластиМакетаИтоговДляЗаполнения.Вставить("ИтогоСумма", СуммаБезНДСПоДокументу);
		ОбластиМакетаИтоговДляЗаполнения.Вставить("ИтогоСуммаНДС", СуммаНДСПоДокументу);
		ОбластиМакетаИтоговДляЗаполнения.Вставить("ИтогоСндс", СуммаВсегоПоДокументу);
		ОбластиМакетаИтоговДляЗаполнения.Вставить("СтавкаНСП", "" + Выборка.СтавкаНСП + "%");
		ОбластиМакетаИтоговДляЗаполнения.Вставить("ИтогоНСП", СуммаНСППоДокументу);
		ОбластиМакетаИтоговДляЗаполнения.Вставить("ИтогоВсего", СуммаПоДокументуСНСП);
		ОбластиМакетаИтоговДляЗаполнения.Вставить("СуммаПрописью", СуммаДокументаПрописью);

		ОбластьМакетаИтого.Параметры.Заполнить(ОбластиМакетаИтоговДляЗаполнения);
		ОбластьМакетаИтогоНСП.Параметры.Заполнить(ОбластиМакетаИтоговДляЗаполнения);
		ОбластьМакетаИтогоВсего.Параметры.Заполнить(ОбластиМакетаИтоговДляЗаполнения);
		
		ТабличныйДокумент.Вывести(ОбластьМакетаИтого);
		ТабличныйДокумент.Вывести(ОбластьМакетаИтогоНСП);
		ТабличныйДокумент.Вывести(ОбластьМакетаИтогоВсего);
		
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
		Руководители 	= БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизаций(Выборка.Организация, КонецДня(Выборка.Дата));
		ОбластьМакетаПодвал.Параметры.ФИОРуководителя 	= Руководители.Руководитель;
		ОбластьМакетаПодвал.Параметры.ФИОГлавногоБухгалтера    	= Руководители.ГлавныйБухгалтер;
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);   
	
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
		
КонецФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;

	// Проверяем, нужно ли для макета формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"Накладная", НСтр("ru = 'Накладная'"), ПечатьНакладной(МассивОбъектов, ОбъектыПечати),,
			"Документ.ВозвратТоваровПоставщику.ПФ_MXL_Накладная");
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"СчетФактура", НСтр("ru = 'Счет-фактура'"), ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
		
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати – ТаблицаЗначений – состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru = 'Накладная'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 2;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает заголовок документа для печатной формы.
//
// Параметры:
//  Шапка - любая структура с полями:
//           Номер         - Строка или Число - номер документа;
//           Дата          - Дата - дата документа;
//           Представление - Строка - (необязательный) платформенное представление ссылки на документ.
//                                    Если параметр НазваниеДокумента не задан, то название документа будет вычисляться
//                                    из этого параметра.
//  НазваниеДокумента - Строка - название документа (например, "Счет на оплату").
//
// Возвращаемое значение:
//  Строка - заголовок документа.
//
Функция СформироватьЗаголовокДокумента(Шапка, Знач НазваниеДокумента = "")
	
	ДанныеДокумента = Новый Структура("Номер,Дата,Представление");
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, Шапка);
	
	// Если название документа не передано, получим название по представлению документа.
	Если ПустаяСтрока(НазваниеДокумента) И ЗначениеЗаполнено(ДанныеДокумента.Представление) Тогда
		ПоложениеНомера = СтрНайти(ДанныеДокумента.Представление, ДанныеДокумента.Номер);
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(ДанныеДокумента.Представление, ПоложениеНомера - 1));
		КонецЕсли;
	КонецЕсли;

	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.Номер);
	Возврат СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),
		НазваниеДокумента, НомерНаПечать, Формат(ДанныеДокумента.Дата, "ДЛФ=DD"));
	
КонецФункции

#КонецОбласти

#КонецЕсли

