#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоРеализацияТоваровУслуг(ДанныеЗаполнения) Экспорт
	ДокументОснование = ДанныеЗаполнения;
	
	Организация				= ДанныеЗаполнения.Организация;
	Склад               	= ДанныеЗаполнения.Склад;
	БезналичныйРасчет		= ДанныеЗаполнения.БезналичныйРасчет;
	// Сведения о контрагенте
	Контрагент          	= ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента  	= ДанныеЗаполнения.ДоговорКонтрагента;
	СчетРасчетов 			= ДанныеЗаполнения.СчетРасчетов;			
	// Валюта
	ВалютаДокумента     	= ДанныеЗаполнения.ВалютаДокумента;
	Курс					= ДанныеЗаполнения.Курс;
	Кратность				= ДанныеЗаполнения.Кратность;
	// Налоги
	СтавкаНДС				= ДанныеЗаполнения.СтавкаНДС;
	СтавкаНСП				= ДанныеЗаполнения.СтавкаНСП;
	СтавкаНСПУслуги			= ДанныеЗаполнения.СтавкаНСПУслуги;
	СуммаВключаетНалоги		= ДанныеЗаполнения.СуммаВключаетНалоги;
	// Скидки
	ВидСкидкиНаценки    	= ДанныеЗаполнения.ВидСкидкиНаценки;
	ПроцентСкидкиНаценки 	= ДанныеЗаполнения.ПроцентСкидкиНаценки;
	СчетУчетаСкидок 		= ПланыСчетов.Хозрасчетный.ВозвратПроданныхТоваровИСкидки;
	
	ЗаполнитьДанныеКорректировкиСФ(ДанныеЗаполнения);	
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
	КонецЦикла;

	//// Дозаполнить себестоимость.
	//ЗаполнитьСебестоимость(ДокументОснование);
	
	СуммаДокумента = Товары.Итог("Всего");
КонецПроцедуры

//// Процедура заполняет себестоимость номенклатуры.
////
//Процедура ЗаполнитьСебестоимость(ДокументОснование, ДатаДокумента = Неопределено)
//	
//	Если ЗначениеЗаполнено(ДокументОснование) Тогда 
//		// Получение себестоимости из документа основания.	
//		Запрос = Новый Запрос;
//		Запрос.Текст = 
//			"ВЫБРАТЬ
//			|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
//			|	ВременнаяТаблицаТовары.СчетУчета КАК СчетУчета
//			|ПОМЕСТИТЬ ВременнаяТаблицаТовары
//			|ИЗ
//			|	&ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
//			|;
//			|
//			|////////////////////////////////////////////////////////////////////////////////
//			|ВЫБРАТЬ
//			|	ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетУчета,
//			|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Номенклатура,
//			|	СУММА(ВЫБОР
//			|			КОГДА ХозрасчетныйДвиженияССубконто.КоличествоКт = 0
//			|				ТОГДА 0
//			|			ИНАЧЕ ХозрасчетныйДвиженияССубконто.Сумма / ХозрасчетныйДвиженияССубконто.КоличествоКт
//			|		КОНЕЦ) КАК Себестоимость
//			|ИЗ
//			|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
//			|			,
//			|			,
//			|			(СубконтоКт1, СчетКт) В
//			|					(ВЫБРАТЬ
//			|						ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
//			|						ВременнаяТаблицаТовары.СчетУчета КАК СчетУчета
//			|					ИЗ
//			|						ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары)
//			|				И Регистратор = &ДокументОснование,
//			|			,
//			|			) КАК ХозрасчетныйДвиженияССубконто
//			|
//			|СГРУППИРОВАТЬ ПО
//			|	ХозрасчетныйДвиженияССубконто.СчетКт,
//			|	ХозрасчетныйДвиженияССубконто.СубконтоКт1";
//		Запрос.УстановитьПараметр("ВременнаяТаблицаТовары", Товары.Выгрузить());
//		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
//	
//		РезультатЗапроса = Запрос.Выполнить();
//		
//		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//		
//		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//			// Поиск строк.
//			ПараметрыОтбора = Новый Структура;
//			ПараметрыОтбора.Вставить("СчетУчета", ВыборкаДетальныеЗаписи.СчетУчета);
//			ПараметрыОтбора.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
//			
//			НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);	
//			
//			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
//				НайденнаяСтрока.Себестоимость = ВыборкаДетальныеЗаписи.Себестоимость;		
//			КонецЦикла;	
//		КонецЦикла;
//	Иначе
//		// Заполнение по остаткам.
//		Запрос = Новый Запрос;
//		Запрос.Текст = 
//			"ВЫБРАТЬ
//			|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
//			|	ВременнаяТаблицаТовары.СчетУчета КАК СчетУчета
//			|ПОМЕСТИТЬ ВременнаяТаблицаТовары
//			|ИЗ
//			|	&ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
//			|;
//			|
//			|////////////////////////////////////////////////////////////////////////////////
//			|ВЫБРАТЬ
//			|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
//			|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
//			|	ВЫБОР
//			|		КОГДА ХозрасчетныйОстатки.КоличествоОстаток = 0
//			|			ТОГДА 0
//			|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток / ХозрасчетныйОстатки.КоличествоОстаток
//			|	КОНЕЦ КАК Себестоимость
//			|ИЗ
//			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
//			|			&Период,
//			|			Счет В
//			|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
//			|					ВременнаяТаблицаТовары.СчетУчета КАК СчетУчета
//			|				ИЗ
//			|					ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары),
//			|			&Субконто,
//			|			Организация = &Организация
//			|				И Субконто1 В
//			|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//			|						ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура
//			|					ИЗ
//			|						ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары)) КАК ХозрасчетныйОстатки";
//		Запрос.УстановитьПараметр("ВременнаяТаблицаТовары", Товары.Выгрузить());
//		Запрос.УстановитьПараметр("Период", ДатаДокумента);
//		Запрос.УстановитьПараметр("Субконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
//		Запрос.УстановитьПараметр("Организация", Организация);
//		РезультатЗапроса = Запрос.Выполнить();
//		
//		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//		
//		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//			// Поиск строк.
//			ПараметрыОтбора = Новый Структура;
//			ПараметрыОтбора.Вставить("СчетУчета", ВыборкаДетальныеЗаписи.СчетУчета);
//			ПараметрыОтбора.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
//			
//			НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);	
//			
//			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
//				НайденнаяСтрока.Себестоимость = ВыборкаДетальныеЗаписи.Себестоимость;		
//			КонецЦикла;	
//		КонецЦикла;
//	КонецЕсли;	
//	
//КонецПроцедуры 

#КонецОбласти
	
#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.РеализацияТоваровУслуг")] = "ЗаполнитьПоРеализацияТоваровУслуг";
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	// Проверка заполнения табличных частей
	ПроверяемыеРеквизиты.Добавить("Товары");

	// Указан документ реализации.
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Себестоимость");
	КонецЕсли;
	
	// Проверка заполнения Скидки/Наценки
	Если НЕ ЗначениеЗаполнено(ВидСкидкиНаценки) Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаСкидок");
	КонецЕсли;
	
	Если БезналичныйРасчет Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтавкаНСП");	
	КонецЕсли;	

	Если Курс = 0 Или Кратность = 0 Тогда 
		ТекстСообщения = НСтр("ru = 'Не заполнен курс валюты ""%1"". Откройте список валют (Банк и касса - Валюты) и проверьте,
			|что у валюты ""%1"" установлен курс на дату %2 или ранее.
			|Перевыберите договор и заново проведите документ.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ВалютаДокумента, Формат(Дата, "ДЛФ=D"));	
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;

	ОбщегоНазначенияБПСервер.ДобавитьНепроверяемыеРеквизитыПоПараметрамФункциональныхОпций(МассивНепроверяемыхРеквизитов, Организация, Дата);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	// Выполнение предварительного контроля.
	ВыполнитьПредварительныйКонтроль(Отказ);
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Товары.Итог("Всего");
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ВозвратТоваровОтПокупателя.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	УчетТоваров.СформироватьДвиженияСписаниеТоваров(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСписанныеТовары, 
		ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты, Движения, Отказ);
	//УчетМБП.СформироватьДвиженияСписаниеМБП(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьНДС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьБланкиСчетовФактур(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСчетаФактурыВыписанные(ДополнительныеСвойства, Движения, Отказ);

	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.Номенклатура,
		|	ТаблицаДокумента.СчетУчета
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	&ТаблицаДокумента КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаДокумента1.НомерСтроки) КАК НомерСтроки,
		|	ТаблицаДокумента1.Номенклатура
		|ИЗ
		|	ТаблицаДокумента КАК ТаблицаДокумента1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокумента КАК ТаблицаДокумента2
		|		ПО ТаблицаДокумента1.НомерСтроки <> ТаблицаДокумента2.НомерСтроки
		|			И ТаблицаДокумента1.Номенклатура = ТаблицаДокумента2.Номенклатура
		|			И ТаблицаДокумента1.СчетУчета = ТаблицаДокумента2.СчетУчета
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента1.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Запрос.УстановитьПараметр("ТаблицаДокумента", Товары);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Дубли строк.
	Если НЕ МассивРезультатов[1].Пустой() Тогда
		ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Номенклатура указывается повторно в строке %1 списка ""Товары"".'"), 
							ВыборкаИзРезультатаЗапроса.НомерСтроки);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				"Товары",
				ВыборкаИзРезультатаЗапроса.НомерСтроки,
				"Номенклатура",
				Отказ);
		КонецЦикла;
	КонецЕсли;		
	
КонецПроцедуры

// Процедура заполнения реквизитов "КорректировкаСерияБланкаСФ",
// "КорректировкаНомерБланкаСФ" и "КорректировкаДатаСФ".
Процедура ЗаполнитьДанныеКорректировкиСФ(ДокументРеализации) Экспорт

	Если ДокументРеализации.СерияБланкаСФ <> "" Тогда
		КорректировкаСерияБланкаСФ 	= ДокументРеализации.СерияБланкаСФ;
		КорректировкаНомерБланкаСФ 	= ДокументРеализации.НомерБланкаСФ;
		КорректировкаДатаСФ 		= ДокументРеализации.ДатаСФ;
		
	Иначе
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетаФактурыВыписанныеСрезПоследних.Регистратор КАК Регистратор
			|ИЗ
			|	РегистрСведений.СчетаФактурыВыписанные.СрезПоследних(, Документ = &Документ) КАК СчетаФактурыВыписанныеСрезПоследних";
		Запрос.УстановитьПараметр("Документ", ДокументРеализации);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			КорректировкаСерияБланкаСФ 	= Выборка.Регистратор.СерияБланкаСФ;
			КорректировкаНомерБланкаСФ 	= Выборка.Регистратор.НомерБланкаСФ;
			КорректировкаДатаСФ 		= Выборка.Регистратор.ДатаСФ;	
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти	

#КонецЕсли