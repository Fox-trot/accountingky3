
#Область ОбработчикиСлужебные

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

#КонецОбласти

#Область УправлениеВнешнимВидом

&НаСервере
// Процедура устанавливает видимость и доступность элементов.
//
Процедура УстановитьВидимостьДоступностьЭлементов()	
	
	Элементы.ДоговорКонтрагентаВалютаРасчетов.Видимость = НЕ Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	Элементы.Курс.Видимость 							= НЕ Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;

КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()    

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервереБезКонтекста
Функция ПолучитьСчетаРасчетовСКонтрагентами(СтруктураДанные)
	Возврат БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(СтруктураДанные.Организация, СтруктураДанные.Контрагент, СтруктураДанные.ДоговорКонтрагента);
КонецФункции

&НаКлиенте
Процедура ПриИзмененииДоговораКонтрагента()
	
	Объект.Товары.Очистить();
		
	УстановитьСчетаРасчетовСКонтрагентами();
	
	ДанныеДоговора 				= БухгалтерскийУчетВызовСервераПовтИсп.ДанныеДоговора(Объект.ДоговорКонтрагента);
	Объект.ВалютаДокумента 		= ДанныеДоговора.ВалютаРасчетов;	
	УстановитьКурсВалютыДокумента(ДатаДокумента, Объект.ВалютаДокумента, Объект.Курс);
	ЗаполнитьПараметрыОбъекта(ПараметрыОбъекта);

	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСчетаРасчетовСКонтрагентами()
		
	СтруктураДанные 	= Новый Структура("Организация, Контрагент, ДоговорКонтрагента", Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	СчетаУчета 			= ПолучитьСчетаРасчетовСКонтрагентами(СтруктураДанные);
	Объект.СчетРасчетов	= СчетаУчета.СчетРасчетовПокупателя;		
	
КонецПроцедуры // УстановитьСчетаРасчетовСКонтрагентами()

&НаСервереБезКонтекста
Процедура УстановитьКурсВалютыДокумента(ДатаДокумента, ВалютаДокумента, Курс)

	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		КурсСтруктура	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
		Курс 			= КурсСтруктура.Курс;
	Иначе
		Курс 			= 1;	
	КонецЕсли;
	
КонецПроцедуры // УстановитьКурсВалютыДокумента()

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьТовары(Параметр)
	
	ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
	Объект.СуммаДокумента = Объект.Товары.Итог("Итого");	
	Объект.ДокументОснование = Параметр.ДокументРеализации;
	ЗаполнитьПараметрыОбъекта(ПараметрыОбъекта);
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл		
		ЗаполнитьДанныеСТЧ(ДанныеСТЧ, СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиРеализации(ДанныеСТЧ, ПараметрыОбъекта);
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСТЧ);
		ПересчетНезаполненногоПроцентаСкидки(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Если Объект.Товары.Количество() = 0 Тогда 
		ТекстСообщения = НСтр("ru = 'Нет данных для заполнения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Товары")		
	КонецЕсли;

КонецПроцедуры // 

&НаКлиенте
Процедура ПересчетНезаполненногоПроцентаСкидки(СтрокаТабличнойЧасти)
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СкидкаПроцент) 
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Всего) Тогда
		СтрокаТабличнойЧасти.СкидкаПроцент = Окр(СтрокаТабличнойЧасти.СуммаСкидки / СтрокаТабличнойЧасти.Всего, 2);
	КонецЕсли;					
КонецПроцедуры // ПересчетПроцентаСкидки(СтрокаТабличнойЧасти)

&НаКлиенте
Процедура ЗаполнитьПараметрыОбъекта(ПараметрыОбъекта)
	
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Дата 				= ДатаДокумента;
	ПараметрыОбъекта.СкидкаПроцент 		= 0;
	ПараметрыОбъекта.ВидСкидки			= ПредопределенноеЗначение("Перечисление.ВидыСкидок.ПроцентПоСтроке");
	ПараметрыОбъекта.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	ПараметрыОбъекта.Склад 				= Объект.Склад;
	ДанныеДоговора 						= БухгалтерскийУчетВызовСервераПовтИсп.ДанныеДоговора(Объект.ДоговорКонтрагента);
	ПараметрыОбъекта.СтавкаНДС 			= ?(ЗначениеЗаполнено(ДанныеДоговора.СтавкаНДС), ДанныеДоговора.СтавкаНДС, УПП.СтавкаНДСПоУмолчанию);
	ПараметрыОбъекта.ЗначСтавкаНДС 		= БухгалтерскийУчетСервер.ПолучитьСтавкуНДСПоДоговору(Объект.Дата, Объект.ДоговорКонтрагента);
	ПараметрыОбъекта.ПлательщикНДС 		= УПП.ПлательщикНДС;
	ПараметрыОбъекта.ПлательщикНСП 		= УПП.ПлательщикНСП;
	ПараметрыОбъекта.ВозвратТовара      = Истина;
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеСТЧ(ДанныеСТЧ, СтрокаТабличнойЧасти)
	
	ЗаполнитьЗначенияСвойств(ДанныеСТЧ, СтрокаТабличнойЧасти);		
	СтруктураСчетовУчета 	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТабличнойЧасти.Номенклатура);
	ДанныеСТЧ.СтавкаНСП 	= ?(ЗначениеЗаполнено(СтруктураСчетовУчета.СтавкаНСП), СтруктураСчетовУчета.СтавкаНСП, УПП.СтавкаНСППоУмолчанию);
	ЗначСтавкаНСП 			= ПолучитьЗначениеСтавкиНСП(ДатаДокумента, УПП.ПлательщикНДС, ДанныеСТЧ.СтавкаНСП);
	ДанныеСТЧ.ЗначСтавкаНСП = ЗначСтавкаНСП;	

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеСтавкиНСП(Дата, ПлательщикНДС, СтавкаНСП)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ПлательщикНДС
	|			ТОГДА СтавкиНСПСрезПоследних.СтавкаПлательщикНДС
	|		ИНАЧЕ СтавкиНСПСрезПоследних.СтавкаНеПлательщикНДС
	|	КОНЕЦ КАК Ставка
	|ИЗ
	|	РегистрСведений.СтавкиНСП.СрезПоследних(&Дата, СтавкаНСП = &СтавкаНСП) КАК СтавкиНСПСрезПоследних";	
	Запрос.УстановитьПараметр("Дата", 			Дата);	
	Запрос.УстановитьПараметр("СтавкаНСП", 		СтавкаНСП);	
	Запрос.УстановитьПараметр("ПлательщикНДС", 	ПлательщикНДС);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ставка;
	Иначе		
		Возврат 0;
	КонецЕсли;	

КонецФункции // ПолучитьЗначениеСтавкиНСП(СтавкаНСП)

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресПодобраннойНоменклатурыВХранилище);
	
	Для каждого СтрокаПодбора Из ТаблицаОбработки Цикл
		ОтборСтруктура = Новый Структура;
		ОтборСтруктура.Вставить("Номенклатура", 	СтрокаПодбора.Номенклатура);
		ОтборСтруктура.Вставить("СчетУчета", 		СтрокаПодбора.СчетУчета);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ОтборСтруктура);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + СтрокаПодбора.Количество;
		Иначе
			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаПодбора);
		КонецЕсли;
		
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Объект, Параметры.ДокументРеализации,,"Товары");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьТоварыНаСервере()

	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ОбработкаЗаполнения(Объект.ДокументОснование, Ложь);
	ЗначениеВРеквизитФормы(Документ, "Объект");	

КонецПроцедуры // ЗаполнитьТабличнуюЧастьТоварыНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	УПП 							= БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
		
	ПараметрыОбъекта 	= Новый Структура("Организация, 
											|Дата,  
											|ДоговорКонтрагента,
											|Склад,
											|СтавкаНДС,  
											|ЗначСтавкаНДС, 
											|ПлательщикНДС,
											|ПлательщикНСП,
											|ВидСкидки,
											|СкидкаПроцент,
											|ВозвратТовара");
											
	ДанныеСТЧ 			= Новый Структура("Номенклатура, 
											|Количество,
											|Цена, 
											|Всего,
											|Доход,												
											|Итого,
											|Себестоимость,
											|СтавкаНДС,											
											|СуммаНДС,
											|СтавкаНСП,
											|ЗначСтавкаНСП,											 
											|СуммаНСП,
											|СкидкаПроцент,
											|СуммаСкидки, 
											|СчетУчета, 
											|СчетДохода,
											|СчетСебестоимости,
											|СпособОценки");
											
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
    УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаВажныеКоманды);
    // Конец СтандартныеПодсистемы.Печать
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Инициатор") Тогда
		Если Параметр.Инициатор = "Подбор" Тогда
			Объект.Товары.Очистить();
			ЗаполнитьТабличнуюЧастьТовары(Параметр);
		ИначеЕсли Параметр.Инициатор = "ИзменениеДокументаОснования" Тогда
			Объект.ДокументОснование = Параметр.ДокументРеализации;
			ЗаполнитьТабличнуюЧастьТоварыНаСервере()
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда	
		ЗаполнитьПараметрыОбъекта(ПараметрыОбъекта);	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подбор(Команда)

	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Контрагент", 				Объект.Контрагент);
	ПараметрыОтбора.Вставить("ДоговорКонтрагента", 		Объект.ДоговорКонтрагента);
	ПараметрыОтбора.Вставить("Организация", 			Объект.Организация);
	ПараметрыОтбора.Вставить("ДоступнаТабличнаяЧасть", 	Истина);
	ПараметрыОтбора.Вставить("Инициатор", 				"Подбор");
	ОткрытьФорму("Документ.ВозвратТоваровОтПокупателя.Форма.ФормаПодбораДокументовРеализации", ПараметрыОтбора, ЭтаФорма)

КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьПараметрыОбъекта(ПараметрыОбъекта);
	Если Объект.Товары.Количество() = 0 Тогда
		ЗаполнитьТабличнуюЧастьТоварыНаСервере()		
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьТабличнуюЧасть", ЭтотОбъект,Объект.ДокументОснование);
		ТекстВопроса = НСтр("ru = 'Табличная часть будет очищена и заполнена новыми данными! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьТабличнуюЧасть(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда		
		ЗаполнитьТабличнуюЧастьТоварыНаСервере()		
	КонецЕсли; 
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиРеквизитовШапки

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетСервер.ПроверитьСуществованиеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	СтруктураДоговор 			= БухгалтерскийУчетСервер.ПолучитьДоговорКонтрагента(
								Объект.Организация, 
								Объект.Контрагент, 
								ВалютаРегламентированногоУчета, 
								ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	Объект.ДоговорКонтрагента 	= СтруктураДоговор.ДоговорКонтрагента;	
	
	ПриИзмененииДоговораКонтрагента();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ПриИзмененииДоговораКонтрагента()
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Контрагент", 				Объект.Контрагент);
	ПараметрыОтбора.Вставить("ДоговорКонтрагента", 		Объект.ДоговорКонтрагента);
	ПараметрыОтбора.Вставить("Организация", 			Объект.Организация);
	ПараметрыОтбора.Вставить("ДоступнаТабличнаяЧасть", 	Ложь);	
	ПараметрыОтбора.Вставить("Инициатор", 				"ИзменениеДокументаОснования");

	ОткрытьФорму("Документ.ВозвратТоваровОтПокупателя.Форма.ФормаПодбораДокументовРеализации", ПараметрыОтбора, ЭтаФорма)

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТабличныхЧастей

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
    СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ЗаполнитьДанныеСТЧ(ДанныеСТЧ, СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейВызовСервера.ЗаполнитьСебестоимостьСтрокиТабличнойЧасти(ДанныеСТЧ, ПараметрыОбъекта);
	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиРеализации(ДанныеСТЧ, ПараметрыОбъекта);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСТЧ);
	Объект.СуммаДокумента = Объект.Товары.Итог("Итого");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
    УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти
