#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Установка реквизитов формы.	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();	
	ТипЦен = Объект.ДоговорКонтрагента.ТипЦен;	
	СуммаСкидкиПоСтроке = Объект.ВидСкидкиНаценки = Перечисления.ВидыСкидокНаценок.СуммаПоСтроке;
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	УстановитьФункциональныеОпцииФормы();

	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Товары");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Услуги");
	// Конец КопированиеСтрокТабличныхЧастей
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеБППовтИсп.ИспользоватьПодключаемоеОборудование();
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьТекущуюСтраницу();
	ОбновитьПодвалФормы();
		
	СформироватьСериюСчетаФактуры();
	СформироватьНомераСчетФактур();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "МодифицированДоговораКонтрагента" Тогда
		ОбработатьИзменениеДоговора(Истина);
		
	ИначеЕсли ИмяСобытия = "ПодборНоменклатурыПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище);

	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Товары");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Услуги");
	КонецЕсли;
	// Конец КопированиеСтрокТабличныхЧастей
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату.
			Если Параметр[1] = Неопределено Тогда
				ТекШтрихкод = Параметр[0]; // Достаем штрихкод из основных данных
			Иначе
				ТекШтрихкод = Параметр[1][1]; // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			ПоискПоШтрихкодуЗавершение(ТекШтрихкод, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары"));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением, Объект.ВалютаДокумента);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные);
		КонецЕсли;	
	КонецЕсли;
	
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	УстановитьФункциональныеОпцииФормы();
	
	ОбработатьИзменениеУчетнойПолитики();
	ОбработатьИзменениеДоговора();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер = "";
	
	СформироватьСериюСчетаФактуры();
	СформироватьНомераСчетФактур();
	
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	УстановитьФункциональныеОпцииФормы();
	
	ОбработатьИзменениеУчетнойПолитики();
	ОбработатьИзменениеДоговора();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ОбработатьИзменениеДоговора();	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор контрагента.
//
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ОбработатьИзменениеДоговора();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Документ основания.
//
&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ЗаполнитьДанныеКорректировкиСФ();
		ЗаполнитьТабличнуюЧастьПоРеализации("Заполнить");
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Вид скидки.
//
&НаКлиенте
Процедура ВидСкидкиПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();

	// Заполнение счета учета отражения скидок
	Если НЕ ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда 
		Объект.СчетУчетаСкидок = Неопределено;
		
		// Очистка скидок
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;		
			СтрокаТабличнойЧасти.СуммаСкидки = 0;		
		КонецЦикла;	
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;		
			СтрокаТабличнойЧасти.СуммаСкидки = 0;		
		КонецЦикла;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.СчетУчетаСкидок) Тогда  
		Объект.СчетУчетаСкидок = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ВозвратПроданныхТоваровИСкидки");
	КонецЕсли;	

	СуммаСкидкиПоСтроке = Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке");
	ВидСкидкиПриИзмененииНаКлиенте();	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Скидка процент.
//
&НаКлиенте
Процедура ПроцентСкидкиНаценкиПриИзменении(Элемент)
	ВидСкидкиПриИзмененииНаКлиенте()
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НДС.
//
&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(
		Объект,
		ДатаДокумента,
		Объект.Организация,
		"Товары",
		Объект.СуммаВключаетНалоги, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет);
		
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(
		Объект,
		ДатаДокумента,
		Объект.Организация,
		"Услуги",
		Объект.СуммаВключаетНалоги, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет);		
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НСП.
//
&НаКлиенте
Процедура СтавкаНСППриИзменении(Элемент)
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(
		Объект,
		ДатаДокумента,
		Объект.Организация,
		"Товары",
		Объект.СуммаВключаетНалоги, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет);
		
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(
		Объект,
		ДатаДокумента,
		Объект.Организация,
		"Услуги",
		Объект.СуммаВключаетНалоги, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет);		
КонецПроцедуры

&НаКлиенте
Процедура БезналичныйРасчетПриИзменении(Элемент)
	
	Если Объект.БезналичныйРасчет Тогда
		Объект.СтавкаНСП = Неопределено;	
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(
		Объект,
		ДатаДокумента,
		Объект.Организация,
		"Товары",
		Объект.СуммаВключаетНалоги, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет);
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(
		Объект,
		ДатаДокумента,
		Объект.Организация,
		"Услуги",
		Объект.СуммаВключаетНалоги, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет);
		
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СерияБланкаСФПриИзменении(Элемент)
	СформироватьНомераСчетФактур();
		
	Если ЗначениеЗаполнено(Объект.СерияБланкаСФ) 
		И (НЕ ЗначениеЗаполнено(Объект.ДатаСФ)) Тогда
		Объект.ДатаСФ 			= ДатаДокумента;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НомерБланкаСФОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = "000000" Тогда
		СтандартнаяОбработка = Ложь;
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("НомерБланкаСФОбработкаВыбораЗавершение", ЭтотОбъект);
		ПоказатьВводСтроки(ОбработчикОповещенияОЗакрытии, "", НСтр("ru = 'Укажите номер'"), 6);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура НомерБланкаСФОбработкаВыбораЗавершение(НомерБланкаСФ, ДополнительныеПараметры) Экспорт
	Если НомерБланкаСФ <> Неопределено Тогда
		СформироватьНомераСчетФактур(НомерБланкаСФ);
		
		Если НЕ Элементы.НомерБланкаСФ.СписокВыбора.НайтиПоЗначению(НомерБланкаСФ) = Неопределено Тогда 
			Объект.НомерБланкаСФ = НомерБланкаСФ;	
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Процедура - обработчик события ПередНачаломДобавления таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;
		
		ИтогСуммаСкидки = Объект.Товары.Итог("СуммаСкидки") + Объект.Услуги.Итог("СуммаСкидки") + Элемент.ТекущиеДанные.СуммаСкидки;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработатьИзменениеНоменклатуры("Товары", СтрокаТабличнойЧасти);	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,,СуммаСкидкиПоСтроке);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, ДатаДокумента, Объект.Организация, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП, Объект.БезналичныйРасчет);
		
	ОбновитьПодвалФормы();		
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыЦена.
//
&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,,СуммаСкидкиПоСтроке);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, ДатаДокумента, Объект.Организация, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП, Объект.БезналичныйРасчет);
		
	ОбновитьПодвалФормы();		
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, ДатаДокумента, Объект.Организация, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП, Объект.БезналичныйРасчет);
		
	ОбновитьПодвалФормы();		
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаНДС.
//
&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыСуммаНСП.
//
&НаКлиенте
Процедура ТоварыСуммаНСППриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);	
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыПроцентСкидкиНаценки.
//
&НаКлиенте
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, ДатаДокумента, Объект.Организация, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП, Объект.БезналичныйРасчет);
		
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыСуммаСкидки.
//
&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,,СуммаСкидкиПоСтроке);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, ДатаДокумента, Объект.Организация, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП, Объект.БезналичныйРасчет);
		
	ОбновитьПодвалФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

// Процедура - обработчик события ПередНачаломДобавления таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;
		
		ИтогСуммаСкидки = Объект.Товары.Итог("СуммаСкидки") + Объект.Услуги.Итог("СуммаСкидки") + Элемент.ТекущиеДанные.СуммаСкидки;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ОбработатьИзменениеНоменклатуры("Услуги", СтрокаТабличнойЧасти);	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,,СуммаСкидкиПоСтроке);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, ДатаДокумента, Объект.Организация, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП, Объект.БезналичныйРасчет);
		
	ОбновитьПодвалФормы();		
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыЦена.
//
&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,,СуммаСкидкиПоСтроке);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, ДатаДокумента, Объект.Организация, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП, Объект.БезналичныйРасчет);
		
	ОбновитьПодвалФормы();		
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, ДатаДокумента, Объект.Организация, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП, Объект.БезналичныйРасчет);
		
	ОбновитьПодвалФормы();		
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаНДС.
//
&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);	
	
	ОбновитьПодвалФормы();	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыСуммаНСП.
//
&НаКлиенте
Процедура УслугиСуммаНСППриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);	
	
	ОбновитьПодвалФормы();	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыПроцентСкидкиНаценки.
//
&НаКлиенте
Процедура УслугиПроцентСкидкиНаценкиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, ДатаДокумента, Объект.Организация, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП, Объект.БезналичныйРасчет);
	
	ОбновитьПодвалФормы();		
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыСуммаСкидки.
//
&НаКлиенте
Процедура УслугиСуммаСкидкиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,,СуммаСкидкиПоСтроке);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, ДатаДокумента, Объект.Организация, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП, Объект.БезналичныйРасчет);
		
	ОбновитьПодвалФормы();		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоРеализации(Команда)
	
	ЗаполнитьТабличнуюЧастьПоРеализации("Заполнить");
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзРеализации(Команда)

	ЗаполнитьТабличнуюЧастьПоРеализации("Добавить");
	ОбновитьПодвалФормы();
	
КонецПроцедуры

// Процедура - обработчик события действия команды Подбор в табличную часть Товары.
// Открывает форму подбора.
//
&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	РаботаСПодборомНоменклатурыКлиент.ОткрытьПодбор(ЭтаФорма, "Товары", "Поступление");
КонецПроцедуры

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкодуТовары(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", 
		ЭтотОбъект, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары")), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
		
КонецПроцедуры
	
&НаКлиенте
Процедура ПоискПоШтрихкодуУслуги(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", 
		ЭтотОбъект, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Услуги")), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
		
КонецПроцедуры	
	
&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
    
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
        ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1), ДополнительныеПараметры.ИмяТабличнойЧасти);
	КонецЕсли;	

КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	ПодключаемоеОборудованиеБПКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, "Товары");
КонецПроцедуры // ЗагрузитьДанныеИзТСД()
// Конец ПодключаемоеОборудование

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьТовары(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
		Объект.Услуги.Очистить();
		ДополнитьТабличнуюЧастьПоРеализации(ДополнительныеПараметры.СпособЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()	
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда 
		Элементы.ПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.СчетУчетаСкидок.Видимость = Ложь;
		Элементы.ТоварыПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ТоварыСуммаСкидки.Видимость = Ложь;
		Элементы.ИтогСуммаСкидки.Видимость = Ложь;
	ИначеЕсли Объект.ВидСкидкиНаценки = Перечисления.ВидыСкидокНаценок.ПроцентПоСтроке Тогда 
		Элементы.ПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.СчетУчетаСкидок.Видимость = Истина;
		Элементы.ТоварыПроцентСкидкиНаценки.Видимость = Истина;
		Элементы.ТоварыСуммаСкидки.Видимость = Истина;
		Элементы.ИтогСуммаСкидки.Видимость = Истина;		
		Элементы.ТоварыСуммаСкидки.ТолькоПросмотр = Истина;
	ИначеЕсли Объект.ВидСкидкиНаценки = Перечисления.ВидыСкидокНаценок.СуммаПоСтроке Тогда 
		Элементы.ПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.СчетУчетаСкидок.Видимость = Истина;
		Элементы.ТоварыПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ТоварыСуммаСкидки.Видимость = Истина;
		Элементы.ИтогСуммаСкидки.Видимость = Истина;		
		Элементы.ТоварыСуммаСкидки.ТолькоПросмотр = Ложь;
	ИначеЕсли Объект.ВидСкидкиНаценки = Перечисления.ВидыСкидокНаценок.ПроцентОбщий Тогда 
		Элементы.ПроцентСкидкиНаценки.Видимость = Истина;
		Элементы.СчетУчетаСкидок.Видимость = Истина;
		Элементы.ТоварыПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ТоварыСуммаСкидки.Видимость = Истина;
		Элементы.ИтогСуммаСкидки.Видимость = Истина;		
		Элементы.ТоварыСуммаСкидки.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ВалютаРегламентированногоУчета = Объект.ВалютаДокумента Тогда
		Элементы.КурсВозврата.Видимость = Ложь;
		Элементы.ПечататьКурсИСуммуВРегламентированнойВалюте.Видимость = Ложь; 
	Иначе
		Элементы.КурсВозврата.Видимость = Истина;
		Элементы.ПечататьКурсИСуммуВРегламентированнойВалюте.Видимость = Истина;
	КонецЕсли;
	
	Если Объект.СуммаВключаетНалоги Тогда
		Элементы.ТоварыСумма.Видимость 	= Истина;
		Элементы.ТоварыСуммаДохода1.Видимость = Ложь;
		Элементы.ТоварыВсего.Видимость 	= Ложь;
		Элементы.ТоварыСуммаДохода2.Видимость = Истина;	
	Иначе
		Элементы.ТоварыСумма.Видимость 	= Ложь;
		Элементы.ТоварыСуммаДохода1.Видимость = Истина;
		Элементы.ТоварыВсего.Видимость 	= Истина;		
		Элементы.ТоварыСуммаДохода2.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.БезналичныйРасчет Тогда
		Элементы.ТоварыСуммаНСП.Видимость 	= Ложь;
		Элементы.СтавкаНСП.Видимость 		= Ложь;
	Иначе
		Элементы.ТоварыСуммаНСП.Видимость 	= Истина;
		Элементы.СтавкаНСП.Видимость 		= Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда 
		Элементы.ТоварыСебестоимость.Видимость = Ложь;
	Иначе 
		Элементы.ТоварыСебестоимость.Видимость = Истина;
	КонецЕсли;	
КонецПроцедуры 

// Процедура устанавливает функциональные опции формы документа.
//
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма, Объект.Организация, ДатаДокумента);
КонецПроцедуры

// Процедура устанавливает текущую страницу при открытии формы.
//
&НаКлиенте
Процедура УстановитьТекущуюСтраницу()	
	Если Объект.Товары.Количество() > 0 Тогда 
		Возврат;
	ИначеЕсли Объект.Услуги.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаУслуги;
	КонецЕсли;	
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением, ВалютаДокумента)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	ВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаНовая);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура - Пересчитать курс кратность валюты расчетов
//
// Параметры:
//  СтруктураДанные	- Структура - 
//		* ВалютаКурсКратность - Структура
//			* Курс - Число
//			* Кратность - Число
//
&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		Или Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(Объект.Курс) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(КурсНовый) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'На дату документа у валюты расчетов %1 был задан курс.
									|Установить курс расчетов %2 в соответствии с курсом валюты?'"),
									КурсВалютыСтрокой, КурсНовыйВалютыСтрокой);
		
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПересчитатьКурсКратностьВалютыДокументаЗавершение", ЭтотОбъект, Новый Структура("КратностьНовый, КурсНовый", КратностьНовый, КурсНовый)), ТекстСообщения, Режим, 0);
		Возврат;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КратностьНовый = ДополнительныеПараметры.КратностьНовый;
	КурсНовый = ДополнительныеПараметры.КурсНовый;
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Курс = КурсНовый;
		Объект.Кратность = КратностьНовый;
	КонецЕсли;
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанию
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Период, ВалютаДокумента, ДоговорКонтрагента)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорКонтрагента.ВалютаРасчетов);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаРасчетов, Период));
	
	СтруктураДанные.Вставить(
		"ТипЦен",
		ДоговорКонтрагента.ТипЦен);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНалоги",
		ДоговорКонтрагента.СуммаВключаетНалоги);
	
	СтруктураДанные.Вставить(
		"СтавкаНДС",
		ДоговорКонтрагента.СтавкаНДС);
		
	СтруктураДанные.Вставить(
		"ВидПоставкиНДС",
		ДоговорКонтрагента.ВидПоставкиНДС);	
		
	СчетаУчета = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(ДоговорКонтрагента.Организация, ДоговорКонтрагента.Владелец, ДоговорКонтрагента);

	СтруктураДанные.Вставить(
		"СчетРасчетов",
		СчетаУчета.СчетРасчетовПокупателя);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаКлиенте
Процедура ОбработатьИзменениеДоговора(МодифицированДоговор = Ложь)
			
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(ДатаДокумента, Объект.ВалютаДокумента, Объект.ДоговорКонтрагента);

	// Обработка изменения валюты
	СтруктураКурсыПред = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	
	Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
	Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
	Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	
	СтруктураКурсы = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	
	// Обработка изменения налогооблажения
	Объект.СуммаВключаетНалоги = СтруктураДанные.СуммаВключаетНалоги;
	
	Объект.СтавкаНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, СтруктураДанные.СтавкаНДС, 
							ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));
	
	Объект.ВидПоставкиНДС = СтруктураДанные.ВидПоставкиНДС;
	
	// Обработка изменения отражения в учете
	Объект.СчетРасчетов = СтруктураДанные.СчетРасчетов;
	
	ТипЦенПередИзменением = ТипЦен;
	ТипЦен = СтруктураДанные.ТипЦен;
	
	// Вопрос изменения
	ИзменилсяТипЦен = ТипЦенПередИзменением <> ТипЦен
		И ЗначениеЗаполнено(ТипЦен);
	ИзмениласьВалютаРасчетов = СтруктураКурсыПред.Валюта <> СтруктураДанные.ВалютаРасчетов
		И ЗначениеЗаполнено(Объект.ВалютаДокумента); 
	ПересчетНеобходим = Объект.Товары.Количество() > 0;	
		
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) 
		И (ИзменилсяТипЦен Или ИзмениласьВалютаРасчетов)
		И ПересчетНеобходим Тогда
		
		ТекстСообщение = "";
		
		Если ИзменилсяТипЦен Тогда 
			ТекстСообщение = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, 
				|отличные от установленных в документе! 
				|Возможно, необходимо перезаполнить цены.'") + Символы.ПС + Символы.ПС;
		КонецЕсли;
		
		Если ИзмениласьВалютаРасчетов Тогда 
			ТекстСообщение = ТекстСообщение + НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом!
				|Возможно, необходимо перезаполнить цены.'") + Символы.ПС + Символы.ПС;
		КонецЕсли;

		ТекстСообщение = ТекстСообщение + НСтр("ru = 'Пересчитать документ в соответствии с договором?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьИзменениеДоговораФрагментЗавершение", ЭтотОбъект, 
		
		Новый Структура("СтруктураКурсыПред, СтруктураКурсы", СтруктураКурсыПред, СтруктураКурсы)), 
			ТекстСообщение,
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;	
		
	// Пересчет табличной части
	// Цена, Сумма
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Товары");
	// Налоги
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(
		Объект, ДатаДокумента, Объект.Организация, "Товары", Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП, Объект.БезналичныйРасчет);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеУчетнойПолитики()	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);	
	
	Если НЕ ДанныеУчетнойПолитики.ПлательщикНСП Тогда
		Объект.СтавкаНСП = ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговораФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СтруктураКурсыПред = ДополнительныеПараметры.СтруктураКурсыПред;
		СтруктураКурсы = ДополнительныеПараметры.СтруктураКурсы;
		
		// Цена, Сумма
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Товары");
	КонецЕсли;	
	
	// Налоги
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(
		Объект, ДатаДокумента, Объект.Организация, "Товары", Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП, Объект.БезналичныйРасчет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеНоменклатуры(ИмяТабличнойЧасти, СтрокаТабличнойЧасти)
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Дата", ДатаДокумента);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Контрагент", Объект.Контрагент);
	СтруктураДанные.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНалоги", Объект.СуммаВключаетНалоги);
	СтруктураДанные.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	СтруктураДанные.Вставить("СтавкаНСП", Объект.СтавкаНСП);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

	// Заполнение по данным номенклатуры
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.СчетДохода = СтруктураДанные.СчетДохода;
	Если ИмяТабличнойЧасти = "Товары" Тогда
		СтрокаТабличнойЧасти.СчетУчета = СтруктураДанные.СчетУчета;
		СтрокаТабличнойЧасти.СчетСебестоимости = СтруктураДанные.СчетРасхода;
		СтрокаТабличнойЧасти.СтатьяРасхода = СтруктураДанные.СтатьяРасхода;		
	КонецЕсли;
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,,СуммаСкидкиПоСтроке);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, ДатаДокумента, Объект.Организация, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП, Объект.БезналичныйРасчет);
КонецПроцедуры	

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Счета учета
	СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(СтруктураДанные.Организация, СтруктураДанные.Номенклатура);
	СтруктураДанные.Вставить("СчетУчета", СчетаУчетаНоменклатуры.СчетУчета);
	СтруктураДанные.Вставить("СчетДохода", СчетаУчетаНоменклатуры.СчетДохода);
	СтруктураДанные.Вставить("СчетРасхода", СчетаУчетаНоменклатуры.СчетРасхода);
	СтруктураДанные.Вставить("СтатьяРасхода", СчетаУчетаНоменклатуры.СтатьяРасхода);
	
	// Цены 
	СтруктураДанные.Вставить("ТипЦен", СтруктураДанные.ДоговорКонтрагента.ТипЦен);
	Цена = БухгалтерскийУчетСервер.ПолучитьЦенуНоменклатуры(СтруктураДанные);
	СтруктураДанные.Вставить("Цена", Цена);
	
	Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе	
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Производит расчет суммы скидки/наценки
//
&НаКлиенте
Процедура ВидСкидкиПриИзмененииНаКлиенте()
	
	// Товары
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл 
		Если НЕ ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда 
			Объект.ПроцентСкидкиНаценки = 0;
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
		ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентОбщий") Тогда 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
		ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентПоСтроке") Тогда 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
		ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда 
			Объект.ПроцентСкидкиНаценки = 0;
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,,СуммаСкидкиПоСтроке);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
			СтрокаТабличнойЧасти, ДатаДокумента, Объект.Организация, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП, Объект.БезналичныйРасчет);
	КонецЦикла;
		
	// Услуги
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл 
		Если НЕ ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда 
			Объект.ПроцентСкидкиНаценки = 0;
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
		ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентОбщий") Тогда 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
		ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентПоСтроке") Тогда 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
		ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда 
			Объект.ПроцентСкидкиНаценки = 0;
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,,СуммаСкидкиПоСтроке);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
			СтрокаТабличнойЧасти, ДатаДокумента, Объект.Организация, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП, Объект.БезналичныйРасчет);
	КонецЦикла;		
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры // ВидСкидкиПриИзмененииНаКлиенте()

// Процедура - обработчик подбора товаров.
//
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаЗагрузки.Номенклатура));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,,СуммаСкидкиПоСтроке);	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
			СтрокаТабличнойЧасти, ДатаДокумента, Объект.Организация, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП, Объект.БезналичныйРасчет);
			
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Дата", ДатаДокумента);
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Контрагент", Объект.Контрагент);
		СтруктураДанные.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНалоги", Объект.СуммаВключаетНалоги);
		СтруктураДанные.Вставить("СтавкаНДС", Объект.СтавкаНДС);
		СтруктураДанные.Вставить("СтавкаНСП", Объект.СтавкаНСП);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

		// Заполнение по данным номенклатуры
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.СчетУчета = СтруктураДанные.СчетУчета;
		СтрокаТабличнойЧасти.СчетДохода = СтруктураДанные.СчетДохода;
		СтрокаТабличнойЧасти.СчетСебестоимости = СтруктураДанные.СчетРасхода;
		СтрокаТабличнойЧасти.СтатьяРасхода = СтруктураДанные.СтатьяРасхода;
	КонецЦикла;
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// ПодключаемоеОборудование

// Процедура - Получены штрихкоды
//
// Параметры:
//  ДанныеШтрикодов	 - Структура/Массив - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов, ИмяТабличнойЧасти) Экспорт
	
	Модифицированность = Истина;
	
	НедобавленныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов, ИмяТабличнойЧасти);
	
	// Неизвестные штрихкоды.
	Если НедобавленныеШтрихкоды.НеизвестныеШтрихкоды.Количество() > 0 Тогда
		Для Каждого СтруктураДанные Из НедобавленныеШтрихкоды.НеизвестныеШтрихкоды Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Данные по штрихкоду не найдены: %1'"), СтруктураДанные.Штрихкод);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	// Штрихкоды некорректного типа.
	ИначеЕсли НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа.Количество() > 0 Тогда 
		Для Каждого СтруктураДанные Из НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Найденная по штрихкоду %1 номенклатура: ""%2"", не подходит для этой табличной части'"),
				СтруктураДанные.ТекШтрихкод, СтруктураДанные.Номенклатура);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоШтрихкоду(ТекШтрихкод)
	
	Номенклатура = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьНоменклатуруПоШтрихкоду(ТекШтрихкод);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", Номенклатура);
	СтруктураДанные.Вставить("ТипНоменклатурыУслуга", ?(ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура"), Номенклатура.Услуга, Ложь));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПоШтрихкоду()

// Функция - Заполнить по данным штрихкодов
//
// Параметры:
//  ДанныеШтрикодов		 - 	 - Структура/Массив	 - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
// 
// Возвращаемое значение:
//  Структура - Массивы неизвестных штрих кодов
//
&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов, ИмяТабличнойЧасти) 
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	Для каждого ТекШтрихкод Из МассивШтрихкодов Цикл
		СтруктураДанные = ПолучитьДанныеПоШтрихкоду(ТекШтрихкод);
		
		Если НЕ ЗначениеЗаполнено(СтруктураДанные.Номенклатура) Тогда 
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ТипНоменклатурыУслуга Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("ТекШтрихкод, Номенклатура", ТекШтрихкод, СтруктураДанные.Номенклатура));
		Иначе 
			СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
			СтрокаТабличнойЧасти.Номенклатура = СтруктураДанные.Номенклатура;
			СтрокаТабличнойЧасти.Количество = ТекШтрихкод.Количество;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",
		НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);

КонецФункции // ЗаполнитьПоДаннымШтрихкодов()
// Конец ПодключаемоеОборудование

&НаСервере
Процедура ЗаполнитьДанныеКорректировкиСФ()

	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьДанныеКорректировкиСФ(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");

КонецПроцедуры

// Процедура рассчитывает итоги для подвала формы.
//
&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего");
	ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС");
	ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП");
	
	ИтогСуммаСкидки = Объект.Товары.Итог("СуммаСкидки") + Объект.Услуги.Итог("СуммаСкидки");
	
КонецПроцедуры // ОбновитьПодвалФормы()

// Процедура - Заполнить табличные части остатками на сервере по документу-основанию
//
&НаСервере
Процедура ЗаполнитьТабличнуюЧастьОстаткамиНаСервере()
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьТабличныеЧастиПоОснованию(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
КонецПроцедуры // ЗаполнитьТабличнуюЧастьОстаткамиНаСервере()

#КонецОбласти

#Область ОбработчикиЗаполнения

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоРеализации(СпособЗаполнения)
	Отказ = Ложь;

	// Перед заполнением договор должен быть выбран.
	Если Не ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран договор контрагента.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ДоговорКонтрагента",, Отказ);
	КонецЕсли;

	Если Отказ Тогда 
		Возврат
	КонецЕсли;	
	
	// Если заполняем, то почистим ТЧ
	Если СпособЗаполнения = "Заполнить"
		И (Объект.Товары.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0) Тогда 
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СпособЗаполнения", СпособЗаполнения);

		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьТовары", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличные части будут очищены. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		ДополнитьТабличнуюЧастьПоРеализации(СпособЗаполнения);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьТабличнуюЧастьПоРеализации(СпособЗаполнения)

	Если (СпособЗаполнения = "Заполнить" И Не ЗначениеЗаполнено(Объект.ДокументОснование))
		ИЛИ (СпособЗаполнения = "Добавить") Тогда

		// Теперь нужно выбрать документ, по которому будем заполнять
		ПараметрыФормы = Новый Структура;
		Отбор = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Проведен",
			Объект.Организация,
			Объект.Контрагент,  
			Объект.ДоговорКонтрагента, 
			Истина);

		ПараметрыФормы.Вставить("Отбор", Отбор);
		ПараметрыФормы.Вставить("ДокументВозвратаТоваров", Истина);

		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СпособЗаполнения", СпособЗаполнения);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьТабличнуюЧастьПоРеализацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаВыбора", ПараметрыФормы,ЭтаФорма,,,,ОповещениеОЗакрытии);	
	Иначе
		ДокументРеализации = Объект.ДокументОснование;
		ЗаполнитьТабличнуюЧастьПоРеализацииПослеПолученияДокумента(ДокументРеализации, СпособЗаполнения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоРеализацииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ДокументРеализации = РезультатЗакрытия;
	
	Если Не ЗначениеЗаполнено(ДокументРеализации) Тогда
		Возврат; // ничего не выбрали.
	КонецЕсли;

	СпособЗаполнения = ДополнительныеПараметры.СпособЗаполнения;
	
	Если СпособЗаполнения = "Заполнить" Тогда
		Объект.ДокументОснование = ДокументРеализации;
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьПоРеализацииПослеПолученияДокумента(ДокументРеализации, СпособЗаполнения);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоРеализацииПослеПолученияДокумента(ДокументРеализации, СпособЗаполнения)
	
	// Вызываем процедуру заполнения.
	Если СпособЗаполнения = "Заполнить" Тогда
		
		ЗаполнитьТоварыПоОснованию(ДокументРеализации);
		
	Иначе // При добавлении надо сворачивать дубли строк, аналогично подбору

		ДобавитьСтрокиТабличнойЧастиИзДокументаРеализации(ДокументРеализации);

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование)

	ОбъектДокумента = РеквизитФормыВЗначение("Объект");
	ОбъектДокумента.ЗаполнитьДанныеКорректировкиСФ(ДокументОснование);                           	
	ЗначениеВРеквизитФормы(ОбъектДокумента, "Объект");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",  ДокументОснование);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
		|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
		|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	РеализацияТоваровУслугТовары.Количество КАК Количество,
		|	РеализацияТоваровУслугТовары.Цена КАК Цена,
		|	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
		|	РеализацияТоваровУслугТовары.Всего КАК Всего,
		|	РеализацияТоваровУслугТовары.СуммаДохода КАК СуммаДохода,
		|	РеализацияТоваровУслугТовары.СуммаНСП КАК СуммаНСП,
		|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
		|	РеализацияТоваровУслугТовары.СчетУчета КАК СчетУчета
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугУслуги.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
		|	РеализацияТоваровУслугУслуги.НомерСтроки КАК НомерСтроки,
		|	РеализацияТоваровУслугУслуги.Номенклатура КАК Номенклатура,
		|	РеализацияТоваровУслугУслуги.Количество КАК Количество,
		|	РеализацияТоваровУслугУслуги.Цена КАК Цена,
		|	РеализацияТоваровУслугУслуги.Сумма КАК Сумма,
		|	РеализацияТоваровУслугУслуги.Всего КАК Всего,
		|	РеализацияТоваровУслугУслуги.СуммаДохода КАК СуммаДохода,
		|	РеализацияТоваровУслугУслуги.СуммаНСП КАК СуммаНСП,
		|	РеализацияТоваровУслугУслуги.СуммаНДС КАК СуммаНДС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Дата", ДатаДокумента);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Контрагент", Объект.Контрагент);
	СтруктураДанные.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНалоги", Объект.СуммаВключаетНалоги);
	СтруктураДанные.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	СтруктураДанные.Вставить("СтавкаНСП", Объект.СтавкаНСП);
	СтруктураДанные.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());

	// Табличная часть Товары
	Выборка = РезультатЗапроса[0].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка); 
		
		СтруктураДанные.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
	
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

		// Заполнение по данным номенклатуры
		СтрокаТабличнойЧасти.СчетДохода = СтруктураДанные.СчетДохода;
		СтрокаТабличнойЧасти.СчетСебестоимости = СтруктураДанные.СчетРасхода;
		СтрокаТабличнойЧасти.СтатьяРасхода = СтруктураДанные.СтатьяРасхода;
		
		Валюта = Выборка.ВалютаДокумента;
	КонецЦикла;	

	Если ЗначениеЗаполнено(Объект.ВалютаДокумента)
		И НЕ (Объект.ВалютаДокумента = Валюта) Тогда

		Курс         = ЗаполнениеОбъектовБП.Курс(Объект, ВалютаРегламентированногоУчета);
		КурсОсн      = ЗаполнениеОбъектовБП.Курс(ДокументОснование, ВалютаРегламентированногоУчета);
		Кратность    = ЗаполнениеОбъектовБП.Кратность(Объект, ВалютаРегламентированногоУчета);
		КратностьОсн = ЗаполнениеОбъектовБП.Кратность(ДокументОснование, ВалютаРегламентированногоУчета);

		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СтрокаТабличнойЧасти.Цена, 
				Новый Структура("Валюта, Курс, Кратность", Валюта, Курс, Кратность),
				Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, КурсОсн, КратностьОсн));
				
			СтрокаТабличнойЧасти.Цена = Цена;

			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
				СтрокаТабличнойЧасти, ДатаДокумента, Объект.Организация, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП, Объект.БезналичныйРасчет);

			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);
		КонецЦикла;
	КонецЕсли;	
	
	// Табличная часть Услуги
	Выборка = РезультатЗапроса[1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТабличнойЧасти = Объект.Услуги.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка); 
		
		СтруктураДанные.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
	
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

		// Заполнение по данным номенклатуры
		СтрокаТабличнойЧасти.СчетДохода = СтруктураДанные.СчетДохода;
		
		Валюта = Выборка.ВалютаДокумента;
	КонецЦикла;	

	Если ЗначениеЗаполнено(Объект.ВалютаДокумента)
		И НЕ (Объект.ВалютаДокумента = Валюта) Тогда

		Курс         = ЗаполнениеОбъектовБП.Курс(Объект, ВалютаРегламентированногоУчета);
		КурсОсн      = ЗаполнениеОбъектовБП.Курс(ДокументОснование, ВалютаРегламентированногоУчета);
		Кратность    = ЗаполнениеОбъектовБП.Кратность(Объект, ВалютаРегламентированногоУчета);
		КратностьОсн = ЗаполнениеОбъектовБП.Кратность(ДокументОснование, ВалютаРегламентированногоУчета);

		Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
			// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СтрокаТабличнойЧасти.Цена, 
				Новый Структура("Валюта, Курс, Кратность", Валюта, Курс, Кратность),
				Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, КурсОсн, КратностьОсн));
				
			СтрокаТабличнойЧасти.Цена = Цена;

			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
				СтрокаТабличнойЧасти, ДатаДокумента, Объект.Организация, Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП, Объект.БезналичныйРасчет);

			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиТабличнойЧастиИзДокументаРеализации(ДокументРеализации)

	МассивРезультатовЗапроса = ПолучитьДанныеДляКопирования(ДокументРеализации);
		
	ДобавитьСтрокиТабличнойЧасти("Товары", ДокументРеализации, МассивРезультатовЗапроса[0].Выбрать());
	ДобавитьСтрокиТабличнойЧасти("Услуги", ДокументРеализации, МассивРезультатовЗапроса[1].Выбрать());

КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиТабличнойЧасти(ИмяТабличнойЧасти, ДокументРеализации, Выборка)
	ВалютаДокументаРеализации = ДокументРеализации.ВалютаДокумента;
	КурсДокументаРеализации = ДокументРеализации.Курс;
	КратностьДокументаРеализации = ДокументРеализации.Кратность;
	СуммаВключаетНалогиДокументаРеализации = ДокументРеализации.СуммаВключаетНалоги;
	
	// Обход строк Реализации в табличной части Товары
	СтруктураОтбора = Новый Структура();
	Пока Выборка.Следующий() Цикл

		// Поиск текущей позиции основания в табличной части документа возврата.
		// Если найден - увеличение количества; не найден - добавление новой строки.
		СтруктураОтбора.Вставить("Номенклатура", Выборка.Номенклатура);

		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабличнойЧасти(Объект, ИмяТабличнойЧасти, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> неопределено Тогда

			// Найдена, увеличение количества в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Выборка.Количество;
			
		Иначе
			// Не Найдена - добавление новой строки.
			СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
			СтрокаТабличнойЧасти.Номенклатура = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество = Выборка.Количество;									

			// Пересчет цены в валюту документа.
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(Выборка.Цена, 
				Новый Структура("Валюта, Курс, Кратность", ВалютаДокументаРеализации, КурсДокументаРеализации, КратностьДокументаРеализации),
				Новый Структура("Валюта, Курс, Кратность", 
					Объект.ВалютаДокумента, 
					ЗаполнениеОбъектовБП.Курс(Объект, ВалютаРегламентированногоУчета),  
					ЗаполнениеОбъектовБП.Кратность(Объект, ВалютаРегламентированногоУчета)));

			СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СуммаВключаетНалогиДокументаРеализации,
			                                                 Объект.СуммаВключаетНалоги,
			                                                 УчетНДСВызовСервера.ПолучитьСтавкуНДС(ДатаДокумента, Объект.СтавкаНДС),
															 УчетНДСВызовСервера.ПолучитьСтавкуНСП(ДатаДокумента, Объект.Организация, Объект.СтавкаНСП));

			СтрокаТабличнойЧасти.СчетУчета = Выборка.СчетУчета;
		КонецЕсли;

		// Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
			СтрокаТабличнойЧасти, 
			ДатаДокумента,
			Объект.Организация, 
			Объект.СуммаВключаетНалоги, 
			Объект.СтавкаНДС, 
			Объект.СтавкаНСП,
			Объект.БезналичныйРасчет);
			
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Дата", ДатаДокумента);
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Контрагент", Объект.Контрагент);
		СтруктураДанные.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНалоги", Объект.СуммаВключаетНалоги);
		СтруктураДанные.Вставить("СтавкаНДС", Объект.СтавкаНДС);
		СтруктураДанные.Вставить("СтавкаНСП", Объект.СтавкаНСП);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

		// Заполнение по данным номенклатуры
		СтрокаТабличнойЧасти.СчетДохода = СтруктураДанные.СчетДохода;
		Если ИмяТабличнойЧасти = "Товары" Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчета) Тогда
				СтрокаТабличнойЧасти.СчетУчета = СтруктураДанные.СчетУчета;
			КонецЕсли;			
			СтрокаТабличнойЧасти.СчетСебестоимости = СтруктураДанные.СчетРасхода;
			СтрокаТабличнойЧасти.СтатьяРасхода = СтруктураДанные.СтатьяРасхода;		
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры // ДобавитьСтрокиТабличнойЧасти()

&НаСервере
Функция ПолучитьДанныеДляКопирования(ДокументСсылка)

	// Получение нужной информаций по документу Реализации
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
		|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	РеализацияТоваровУслугТовары.Количество КАК Количество,
		|	РеализацияТоваровУслугТовары.СчетУчета КАК СчетУчета,
		|	РеализацияТоваровУслугТовары.Цена КАК Цена
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеализацияТоваровУслугТовары.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугУслуги.НомерСтроки КАК НомерСтроки,
		|	РеализацияТоваровУслугУслуги.Номенклатура КАК Номенклатура,
		|	РеализацияТоваровУслугУслуги.Количество КАК Количество,
		|	РеализацияТоваровУслугУслуги.Цена КАК Цена
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеализацияТоваровУслугУслуги.НомерСтроки";
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылка);	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();

	Возврат МассивРезультатовЗапроса;

КонецФункции

// Процедура формирования списка серий счетов-фактур.
//
&НаКлиенте
Процедура СформироватьСериюСчетаФактуры()
		
	Элементы.СерияБланкаСФ.СписокВыбора.Очистить();
	СписокСерийБланковСФ = БухгалтерскийУчетВызовСервера.СформироватьСписокСерийСФ(Объект.Организация);
	Элементы.СерияБланкаСФ.СписокВыбора.ЗагрузитьЗначения(СписокСерийБланковСФ);
	
КонецПроцедуры	

// Процедура формирования списка номеров серии счет фактуры.
//
&НаКлиенте
Процедура СформироватьНомераСчетФактур(НомерБланкаСФ = "0")
	
	Элементы.НомерБланкаСФ.СписокВыбора.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.СерияБланкаСФ) Тогда 
		Возврат;
	КонецЕсли;
	
	СписокНомеров = БухгалтерскийУчетВызовСервера.СформироватьСписокНомеровБланковСФ(Объект.Организация, Объект.СерияБланкаСФ, НомерБланкаСФ);
	
	Для Каждого НомерБланка Из СписокНомеров Цикл
		Элементы.НомерБланкаСФ.СписокВыбора.Добавить(НомерБланка.Значение, НомерБланка.Представление);
	КонецЦикла;
КонецПроцедуры	

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура ТоварыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКопироватьСтроки(Команда)
	
	КопироватьСтроки("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВставитьСтроки(Команда)
	
	ВставитьСтроки("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиВставитьСтроки(Команда)
	
	ВставитьСтроки("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
