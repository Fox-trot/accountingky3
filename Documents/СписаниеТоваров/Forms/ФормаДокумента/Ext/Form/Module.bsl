#Область ОбработчикиСлужебные

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы, ОбщийПодбор = Истина)
	
	ДатаРасчетов		= ДатаДокумента;
	
	ЗаголовокПодбора	= НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Товары'");
	КонецЕсли;
	ЗаголовокПодбора = СтрШаблон(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов", ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация" , Объект.Организация);
	ПараметрыФормы.Вставить("Склад"       , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"   , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"  , "");
	ПараметрыФормы.Вставить("ИмяТаблицы"  , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"      , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
	ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("ОбщийПодбор", 	ОбщийПодбор);
	ПараметрыФормы.Вставить("ПодборНоменклатурыПоПартии", Объект.ПодборНоменклатурыПоПартии);
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если НЕ ОбщийПодбор И СтрокаТабличнойЧасти.НомерСтроки = 1 Тогда
		ПараметрыФормы.Вставить("СпособОценки", ПредопределенноеЗначение("Перечисление.СпособыОценки.ПустаяСсылка"));
	Иначе
		ПараметрыФормы.Вставить("СпособОценки", СпособОценки);
	КонецЕсли;	
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресПодобраннойНоменклатурыВХранилище);	
	
	Для каждого СтрокаПодбора Из ТаблицаОбработки Цикл
		ОтборСтруктура = Новый Структура;
		ОтборСтруктура.Вставить("Номенклатура", СтрокаПодбора.Номенклатура);
		Если Объект.ПодборНоменклатурыПоПартии Тогда
			ОтборСтруктура.Вставить("Партия", СтрокаПодбора.Партия);
		КонецЕсли;
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ОтборСтруктура);
		Если Объект.ОбъединениеСтрок И НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + СтрокаПодбора.Количество;	
			НайденныеСтроки[0].Сумма = НайденныеСтроки[0].Сумма + СтрокаПодбора.Сумма;
		Иначе
			СтрокаТабличнойЧасти 					= Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаПодбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияПодборВСтрокуТабличнойЧастиТоварыНаСервере(Параметры, НомерСтроки)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресПодобраннойНоменклатурыВХранилище);
	// Вообще-то, в данном случае в таблице ТаблицаОбработки всегда будет одна строка
	Если ТаблицаОбработки.Количество() > 0 Тогда
		СтрокаПодбора = ТаблицаОбработки[0];
		СтрокаТабличнойЧасти = Объект.Товары[НомерСтроки - 1];
	    ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаПодбора);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСпособОценки()

	Если Объект.Товары.Количество() > 0 Тогда
		СпособОценки_Временный = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСпособОценкиЗапасов(Объект.Товары[0].СчетУчета, ПредопределенноеЗначение("Перечисление.СпособыОценки.ПоСредней"));
		Если НЕ ЗначениеЗаполнено(Объект.Товары[0].СпособОценки) ИЛИ Объект.Товары[0].СпособОценки <> СпособОценки_Временный Тогда
			Объект.Товары[0].СпособОценки = СпособОценки_Временный;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(СпособОценки) Тогда
			СпособОценки = ПредопределенноеЗначение("Перечисление.СпособыОценки.ПустаяСсылка");
		КонецЕсли;		
		Возврат;		
	КонецЕсли;		
	
	Если НЕ ЗначениеЗаполнено(СпособОценки) 
			ИЛИ СпособОценки <> Объект.Товары[0].СпособОценки Тогда
		
		СпособОценки = Объект.Товары[0].СпособОценки;
	Иначе
	КонецЕсли;	

КонецПроцедуры // УстановитьСпособОценки()

&НаКлиенте
Процедура КонтрольОстаткаНоменклатурыВТекущейСтроке(Отказ, СтрокаТабличнойЧасти)

	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары", СтрокаТабличнойЧасти);
	КоличествоОстаток = БухгалтерскийУчетСервер.ПолучитьОстатокПоНоменклатуреИСчетуУчета(ДанныеСТЧ, ПараметрыОбъекта);
	Если СтрокаТабличнойЧасти.Количество > КоличествоОстаток Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Количество для ""%1"" и счета учета ""%2"" указано больше, чем есть в остатке. Остаток составляет %3 %4'"), 
			СтрокаТабличнойЧасти.Номенклатура,
			СтрокаТабличнойЧасти.СчетУчета,
			КоличествоОстаток,
			ПолучитьЕдиницуИзмерения(СтрокаТабличнойЧасти.Номенклатура));
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
				Объект.Ссылка,   
				ТекстСообщения,
				"Товары",
				СтрокаТабличнойЧасти.НомерСтроки,
				"Количество",
				);
		
			Отказ = Ложь;
	КонецЕсли;	
	
КонецПроцедуры // ()

&НаКлиенте
Процедура ЗаполнениеТабличнойЧастиПослеПодбораНоменклатуры()
	// В этой процедуре заполняем в каждой СТЧ Цену, СчетУчета и СпособОценки
	Отказ = Ложь;
	
	УстановитьСпособОценки();
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл			
		СтрокаТабличнойЧасти.СпособОценки = СпособОценки;
		ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары", СтрокаТабличнойЧасти);
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетЗатрат) Тогда
			СтрокаТабличнойЧасти.СчетЗатрат = ДанныеСТЧ.СчетЗатрат;
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.СпособОценки = ПредопределенноеЗначение("Перечисление.СпособыОценки.ПоСредней") 
				ИЛИ СтрокаТабличнойЧасти.СпособОценки = ПредопределенноеЗначение("Перечисление.СпособыОценки.ФИФО") И НЕ Объект.ПодборНоменклатурыПоПартии Тогда
				
			Если КоличественныйСчетУчета(СтрокаТабличнойЧасти.СчетУчета) Тогда
				СтрокаТабличнойЧасти.Цена = БухгалтерскийУчетСервер.ПолучитьЦенуНоменклатурыПоСпособуОценки(ДанныеСТЧ, ПараметрыОбъекта);
				СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
			Иначе	
				СтрокаТабличнойЧасти.Количество = 0;
			КонецЕсли;	
			
		ИначеЕсли СтрокаТабличнойЧасти.СпособОценки = ПредопределенноеЗначение("Перечисление.СпособыОценки.ПоФиксированной") Тогда
			СтрокаТабличнойЧасти.Количество = 0;	
		КонецЕсли;
		
		КонтрольОстаткаНоменклатурыВТекущейСтроке(Отказ, СтрокаТабличнойЧасти);
		
		Если ЗначениеЗаполнено(Объект.СчетЗатрат) Тогда
			СтрокаТабличнойЧасти.СчетЗатрат 		= Объект.СчетЗатрат;	
			СтрокаТабличнойЧасти.СубконтоЗатрат1 	= Объект.СтатьяЗатрат;
		КонецЕсли;
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоЗатрат1", "СубконтоЗатрат2", "СубконтоЗатрат3");
		БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетЗатрат, СтрокаТабличнойЧасти, ПоляОбъекта, Истина);
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Затрат", "СчетЗатрат");
		
		Если ЗначениеЗаполнено(Объект.Подразделение) Тогда 
			СтрокаТабличнойЧасти.СубконтоЗатрат2 = Объект.Подразделение;	
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнениеТабличнойЧастиПослеПодбораНоменклатуры()

&НаКлиенте
Процедура ПриИзмененииНоменклатурыИСчетаУчета()
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.СпособОценки = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСпособОценкиЗапасов(СтрокаТабличнойЧасти.СчетУчета, ПредопределенноеЗначение("Перечисление.СпособыОценки.ПоСредней"));
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары", СтрокаТабличнойЧасти);	
	КоличествоОстаток = БухгалтерскийУчетСервер.ПолучитьОстатокПоНоменклатуреИСчетуУчета(ДанныеСТЧ, ПараметрыОбъекта);
	Если СтрокаТабличнойЧасти.СпособОценки = ПредопределенноеЗначение("Перечисление.СпособыОценки.ФИФО")
		ИЛИ СтрокаТабличнойЧасти.СпособОценки = ПредопределенноеЗначение("Перечисление.СпособыОценки.ПоСредней") Тогда
	
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда  
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчета) Тогда
				СтруктураСчетовУчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТабличнойЧасти.Номенклатура);
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураСчетовУчета);
				СтрокаТабличнойЧасти.СчетУчета = СтруктураСчетовУчета.СчетБУ;
				ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары", СтрокаТабличнойЧасти);	
				КоличествоОстаток = БухгалтерскийУчетСервер.ПолучитьОстатокПоНоменклатуреИСчетуУчета(ДанныеСТЧ, ПараметрыОбъекта);
			КонецЕсли;
			СтрокаТабличнойЧасти.Количество = КоличествоОстаток;
			ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары", СтрокаТабличнойЧасти);
			СтрокаТабличнойЧасти.Цена = БухгалтерскийУчетСервер.ПолучитьЦенуНоменклатурыПоСпособуОценки(ДанныеСТЧ, ПараметрыОбъекта);	
		КонецЕсли;
	ИначеЕсли СтрокаТабличнойЧасти.СпособОценки = ПредопределенноеЗначение("Перечисление.СпособыОценки.ПоФиксированной") Тогда
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчета) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена) Тогда
			СтрокаТабличнойЧасти.Количество = КоличествоОстаток;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле Склад.'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.Склад",
			Истина);
			
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена номенклатура.'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.Товары[" + (СтрокаТабличнойЧасти.НомерСтроки -1) + "].Номенклатура",
			Истина);
			
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчета) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен счет учета номенклатуры.'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.Товары[" + (СтрокаТабличнойЧасти.НомерСтроки -1) + "].СчетУчета",
			Истина);
			
	ИначеЕсли СтрокаТабличнойЧасти.Количество = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нулевой остаток для выбранных номенклатуры и счета учета!'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.Товары[" + (СтрокаТабличнойЧасти.НомерСтроки -1) + "].Количество",
			Истина);		
		
	ИначеЕсли СтрокаТабличнойЧасти.Количество > КоличествоОстаток Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Количество для ""%1"" и счета учета ""%2"" указано больше, чем есть в остатке. Остаток составляет %3 %4'"), 
				СтрокаТабличнойЧасти.Номенклатура,
				СтрокаТабличнойЧасти.СчетУчета,
				КоличествоОстаток,
				ПолучитьЕдиницуИзмерения(СтрокаТабличнойЧасти.Номенклатура));
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.Товары[" + (СтрокаТабличнойЧасти.НомерСтроки -1) + "].Количество",
			Истина);	
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СчетЗатрат) Тогда
		СтрокаТабличнойЧасти.СчетЗатрат 		= Объект.СчетЗатрат;	
		СтрокаТабличнойЧасти.СубконтоЗатрат1 	= Объект.СтатьяЗатрат;
	Иначе
		СтруктураСчетовУчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТабличнойЧасти.Номенклатура);
		СтрокаТабличнойЧасти.СчетЗатрат 		= СтруктураСчетовУчета.СчетРасхода;	
		СтрокаТабличнойЧасти.СубконтоЗатрат1 	= СтруктураСчетовУчета.СубконтоРасходов1;

	КонецЕсли;
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоЗатрат1", "СубконтоЗатрат2", "СубконтоЗатрат3");

	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетЗатрат, СтрокаТабличнойЧасти, ПоляОбъекта, Истина);
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Затрат", "СчетЗатрат");

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);	
	
КонецПроцедуры // ПриИзмененииНоменклатурыИСчета()

&НаКлиенте
Процедура ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, ИмяТЧ, СТЧ = Неопределено)
	
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Вставить("Склад", 	Объект.Склад);
	
	СтрокаТабличнойЧасти = ?(СТЧ = Неопределено, Элементы[ИмяТЧ].ТекущиеДанные, СТЧ);
	ЗаполнитьЗначенияСвойств(ДанныеСТЧ, СтрокаТабличнойЧасти);
	Если СтрокаТабличнойЧасти.СпособОценки <> СпособОценки Тогда
		ДанныеСТЧ.Вставить("СпособОценки", СпособОценки);
	КонецЕсли;
	СтруктураСчетовУчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТабличнойЧасти.Номенклатура);
	ДанныеСТЧ.Вставить("СчетЗатрат", СтруктураСчетовУчета.СчетРасхода);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТаблицуФиксированныхЦенНоменклатуры(ДанныеСТЧ, ПараметрыОбъекта)

	ВременнаяТаблицаЗначений = БухгалтерскийУчетСервер.ПолучитьЦенуНоменклатурыПоСпособуОценки(ДанныеСТЧ, ПараметрыОбъекта);	
	ТаблицаФиксированныхЦенНоменклатуры.Очистить();
	Для каждого СтрокаТаблицыЗначений Из ВременнаяТаблицаЗначений Цикл
		НоваяСтрока = ТаблицаФиксированныхЦенНоменклатуры.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыЗначений);	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСписокВыбораФиксированныхЦен(ДанныеСТЧ, ПараметрыОбъекта)
	ПолучитьТаблицуФиксированныхЦенНоменклатуры(ДанныеСТЧ, ПараметрыОбъекта);
	Элементы.ТоварыЦена.СписокВыбора.Очистить();
	Для каждого СтрокаТаблицыЗначений Из ТаблицаФиксированныхЦенНоменклатуры Цикл
		Элементы.ТоварыЦена.СписокВыбора.Добавить(	"" 	+ СтрокаТаблицыЗначений.Цена
													+ " " + ВалютаРегламентированногоУчета
													+ " " + СтрокаТаблицыЗначений.Количество 
													+ " " + ПолучитьЕдиницуИзмерения(ДанныеСТЧ.Номенклатура));
	КонецЦикла;	

КонецПроцедуры // СформироватьСписокВыбораФиксированныхЦен()

&НаКлиенте
Функция ИзвлечьЦенуИзСтроки(Строка)
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, " ");
	Если Массив.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Цена = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Массив[0]);
	
	Возврат Цена;

КонецФункции // ИзвлечьЦенуИзСтроки()

&НаСервереБезКонтекста
Функция ПолучитьЕдиницуИзмерения(Номенклатура)

	Возврат Номенклатура.ЕдиницаИзмерения;

КонецФункции // ПолучитьЕдиницуИзмерения(Номенклатура)

//Установка доступности субконто для существующих строк табличной части
&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоЗатрат1", "СубконтоЗатрат2", "СубконтоЗатрат3");
		
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл		
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СтрокаТабличнойЧасти.СчетЗатрат, СтрокаТабличнойЧасти, ПоляОбъекта, Истина);
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТабличнойЧасти, "СубконтоЗатрат" + "%Индекс%", "СчетЗатрат");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТабличнойЧасти, "СубконтоЗатрат" + "%Индекс%", "ТоварыСубконтоЗатрат" + "%Индекс%", ПараметрыДокумента);			
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Изменить параметры выбора полей субконто
//
// Параметры:
//  Форма	 - 	 - 
//  Суффикс	 - 	 - 
//  ИмяСчета - 	 - 
&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Форма.Элементы.Товары.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, "Субконто" + Суффикс + "%Индекс%", "ТоварыСубконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);			
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета",   ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", ДанныеОбъекта.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаСервереБезКонтекста
Функция КоличественныйСчетУчета(СчетУчета)

	Возврат СчетУчета.Количественный;		

КонецФункции // КоличественныйСчетУчета()

#КонецОбласти

#Область УправлениеВнешнимВидом

&НаКлиенте
// Процедура устанавливает видимость и доступность элементов.
//
Процедура УстановитьВидимостьДоступностьЭлементов()	
	
	Элементы.ЕстьОсновноеСредство.Видимость 		= Истина;
	Элементы.ТоварыОсновноеСредство.Видимость 	= НЕ ЗначениеЗаполнено(Объект.ОсновноеСредство);
	Элементы.ОсновноеСредство.Видимость 		= Объект.ЕстьОсновноеСредство;
	Элементы.ТоварыОсновноеСредство.Видимость 	= Объект.ЕстьОсновноеСредство;
	Элементы.ТоварыОсновноеСредство.Доступность	= НЕ ЗначениеЗаполнено(Объект.ОсновноеСредство);	
	
	Элементы.ТоварыПартия.Видимость = Объект.ПодборНоменклатурыПоПартии;	
	 
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()    

&НаКлиенте
Процедура УстановитьВидимостьДоступностьВСтрокеТабличнойЧасти(СтрокаТаблицыТовары)
	Элементы.ТоварыЦена.КнопкаВыпадающегоСписка = СтрокаТаблицыТовары.СпособОценки = ПредопределенноеЗначение("Перечисление.СпособыОценки.ПоФиксированной");
	Элементы.ТоварыЦена.КнопкаВыбора 			= НЕ СтрокаТаблицыТовары.СпособОценки = ПредопределенноеЗначение("Перечисление.СпособыОценки.ПоФиксированной");
КонецПроцедуры // ()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	УПП = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
	Если НЕ ЗначениеЗаполнено(СпособОценки) И Объект.Товары.Количество() > 0 Тогда
		СпособОценки = Объект.Товары[0].СпособОценки;	
	КонецЕсли;
	
	ПараметрыОбъекта 	= Новый Структура("Организация, Дата, Склад");
	ДанныеСТЧ 			= Новый Структура("Номенклатура, Количество, СчетУчета, СчетЗатрат, СпособОценки, Цена");	
	
	//Установить доступность субконто в табличной части ПрочиеРасходы
	УстановитьДоступностьСубконто();

	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);		
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсисте.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаВажныеКоманды);
	// Конец СтандартныеПодсистемы.Печать
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьДоступностьЭлементов()
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	УстановитьДоступностьСубконто();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") Тогда		
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
		ЗаполнениеТабличнойЧастиПослеПодбораНоменклатуры();
				
	ИначеЕсли ИмяСобытия = "ПодборВСтрокуТабличнойЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		Если НЕ СтрокаТабличнойЧасти = Неопределено Тогда
			ОбработкаОповещенияПодборВСтрокуТабличнойЧастиТоварыНаСервере(Параметр, СтрокаТабличнойЧасти.НомерСтроки);
			ЗаполнениеТабличнойЧастиПослеПодбораНоменклатуры();
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подбор(Команда)
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура Заполнить(Команда)
	Если ТипЗнч(Объект.ДокументОснование) = ТИП("Строка") Тогда
		ТекстСообщения = НСтр("ru = 'Документ-основание указан не как ссылка на документ, а как строка! Операция заполнения отменена.'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			,
			,
			"ДокументОснование",
			Истина);
		
		Возврат;
		
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОснованию",ЭтотОбъект),"Перед заполнением табличная часть будет очищены." "Продолжить выполнение команды?",РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокОснование.Ссылка,
		|	ДокОснование.НомерСтроки,
		|	ДокОснование.Номенклатура,
		|	ДокОснование.Отклонение,
		|	ДокОснование.Количество,
		|	ДокОснование.УчетноеКоличество,
		|	ДокОснование.Цена,
		|	ДокОснование.Сумма,
		|	ДокОснование.УчетнаяСумма,
		|	ДокОснование.СчетУчета
		|ИЗ
		|	Документ.ИнвентаризацияТоваров.Товары КАК ДокОснование
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ДокОснование.Ссылка ССЫЛКА Документ.ИнвентаризацияТоваров
		|				ТОГДА ДокОснование.Отклонение > 0
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	И ДокОснование.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокОснование.Ссылка,
		|	ДокОснование.НомерСтроки,
		|	ДокОснование.Номенклатура,
		|	ДокОснование.Количество,
		|	ДокОснование.Количество,
		|	ДокОснование.Количество,
		|	ДокОснование.Цена,
		|	ДокОснование.Сумма,
		|	ДокОснование.Сумма,
		|	Значение(ПланСчетов.Хозрасчетный.МБП)
		|ИЗ
		|	Документ.ДвижениеМБП.Товары КАК ДокОснование
		|ГДЕ
		|	ДокОснование.Ссылка = &Ссылка
		|	И ДокОснование.Ссылка ССЫЛКА Документ.ДвижениеМБП
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокОснование.Ссылка,
		|	ДокОснование.НомерСтроки,
		|	ДокОснование.Номенклатура,
		|	ДокОснование.Количество,
		|	ДокОснование.Количество,
		|	ДокОснование.Количество,
		|	ДокОснование.Цена,
		|	ДокОснование.Сумма,
		|	ДокОснование.Сумма,
		|	ДокОснование.СчетУчета
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ДокОснование
		|ГДЕ
		|	ДокОснование.Ссылка = &Ссылка
		|	И ДокОснование.Ссылка ССЫЛКА Документ.ПоступлениеТоваровУслуг";
		
	Запрос.УстановитьПараметр("Ссылка", Объект.ДокументОснование);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		// Заполнение шапки
		Объект.Автор 			= Объект.ДокументОснование.Автор;
		Объект.Комментарий 		= Объект.ДокументОснование.Комментарий;
		Объект.Склад 			= Объект.ДокументОснование.Склад;
		
		Объект.Товары.Очистить();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрока 				= Объект.Товары.Добавить();
			НоваяСтрока.Количество 		= ВыборкаДетальныеЗаписи.Отклонение;
			НоваяСтрока.Номенклатура 	= ВыборкаДетальныеЗаписи.Номенклатура;
			НоваяСтрока.СчетУчета		= ВыборкаДетальныеЗаписи.СчетУчета;
			СчетаУчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, ВыборкаДетальныеЗаписи.Номенклатура);
			НоваяСтрока.СчетЗатрат		= СчетаУчета.СчетРасхода;
			
			ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоЗатрат1", "СубконтоЗатрат2", "СубконтоЗатрат3");
			БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(НоваяСтрока.СчетЗатрат, НоваяСтрока, ПоляОбъекта, Истина);
		КонецЦикла;
		
		Если ТипЗнч(Объект.ДокументОснование) = ТИП("ДокументСсылка.ИнвентаризацияТоваров") Тогда
			Объект.Комиссия.Очистить();
			Для Каждого ТекСтрокаКомиссия Из Объект.ДокументОснование.Комиссия Цикл
				НоваяСтрока 			 = Объект.Комиссия.Добавить();
				НоваяСтрока.Председатель = ТекСтрокаКомиссия.Председатель;
				НоваяСтрока.ФизЛицо = ТекСтрокаКомиссия.ФизЛицо;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованию(РезультатВопроса,ДополнительныеСвойства) Экспорт 
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		ЗаполнитьНаСервере();
	КонецЕсли;
		
	УстановитьДоступностьСубконто();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетСервер.ПроверитьСуществованиеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ЕстьОсновноеСредствоПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов()
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеСредствоПриИзменении(Элемент)
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СтрокаТабличнойЧасти.ОсновноеСредство = Объект.ОсновноеСредство;
	КонецЦикла;
	УстановитьВидимостьДоступностьЭлементов()
КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СтрокаТабличнойЧасти.СчетЗатрат 		= Объект.СчетЗатрат;	
		СтрокаТабличнойЧасти.СубконтоЗатрат1 	= Объект.СтатьяЗатрат;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СтатьяЗатратПриИзменении(Элемент)
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СтрокаТабличнойЧасти.СчетЗатрат 		= Объект.СчетЗатрат;	
		СтрокаТабличнойЧасти.СубконтоЗатрат1 	= Объект.СтатьяЗатрат;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТабличныхЧастей

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ПриИзмененииНоменклатурыИСчетаУчета();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары", Ложь);
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары", СтрокаТабличнойЧасти);
	КоличествоОстаток = БухгалтерскийУчетСервер.ПолучитьОстатокПоНоменклатуреИСчетуУчета(ДанныеСТЧ, ПараметрыОбъекта);
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда		
		СтрокаТабличнойЧасти.Количество = КоличествоОстаток;		
	КонецЕсли;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	УстановитьСпособОценки();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары", СтрокаТабличнойЧасти);
	УстановитьВидимостьДоступностьВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	Если СтрокаТабличнойЧасти.СпособОценки = ПредопределенноеЗначение("Перечисление.СпособыОценки.ПоФиксированной") Тогда		
		СформироватьСписокВыбораФиксированныхЦен(ДанныеСТЧ, ПараметрыОбъекта);
	Иначе		            
		Элементы.ТоварыЦена.СписокВыбора.Очистить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда 
		СтрокаТабличнойЧасти.СубконтоЗатрат2 = Объект.Подразделение;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетЗатратПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоЗатрат1", "СубконтоЗатрат2", "СубконтоЗатрат3");

	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетЗатрат, СтрокаТабличнойЧасти, ПоляОбъекта, Истина);
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Затрат", "СчетЗатрат");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Цена = ИзвлечьЦенуИзСтроки(ВыбранноеЗначение);
	ПриИзмененииНоменклатурыИСчетаУчета();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ПриИзмененииНоменклатурыИСчетаУчета();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаПриИзменении(Элемент)
	ПриИзмененииНоменклатурыИСчетаУчета()
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоЗатрат1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТипСтрокой = "СправочникСсылка.СтатьиЗатратИДоходов"; 
	Элемент.ОграничениеТипа = Новый ОписаниеТипов(ТипСтрокой);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоЗатрат1ПриИзменении(Элемент)
	Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоЗатрат2ПриИзменении(Элемент)
	Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоЗатрат3ПриИзменении(Элемент)
	Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииКомиссия

// Процедура - Подбор физических лиц
//
// Параметры:
//  Команда	 - 	 - 
&НаКлиенте
Процедура ПодборФизическихЛиц(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, Элементы.Комиссия);

КонецПроцедуры

// Процедура - комиссия перед удалением
//
// Параметры:
//  Элемент	 - 	 - 
//  Отказ	 - 	 - 
&НаКлиенте
Процедура КомиссияПередУдалением(Элемент, Отказ)

	ТекущаяСтрокаТЧ = Элементы.Комиссия.ТекущиеДанные;
	Если ТекущаяСтрокаТЧ.Председатель Тогда
		ИндексУдаляемойСтроки = Объект.Комиссия.Индекс(ТекущаяСтрокаТЧ);
		КоличествоСтрок = Объект.Комиссия.Количество() - 1;

		Если КоличествоСтрок > 0 Тогда
			Если ИндексУдаляемойСтроки <= КоличествоСтрок - 1 Тогда
				ИндексНовогоПредседателя = ИндексУдаляемойСтроки + 1;
			Иначе
				ИндексНовогоПредседателя = КоличествоСтрок - 1;
			КонецЕсли;
			Объект.Комиссия[ИндексНовогоПредседателя].Председатель = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура - комиссия при начале редактирования
//
// Параметры:
//  Элемент		 - 	 - 
//  НоваяСтрока	 - 	 - 
//  Копирование	 - 	 - 
&НаКлиенте
Процедура КомиссияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если Копирование Тогда
		ТекущаяСтрокаТЧ = Элементы.Комиссия.ТекущиеДанные;
		ТекущаяСтрокаТЧ.ФизЛицо = Неопределено;
		ТекущаяСтрокаТЧ.Председатель = Ложь;
	Иначе // Создание заново
		Если Объект.Комиссия.Количество() = 1 Тогда
			Объект.Комиссия[0].Председатель = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - комиссия обработка выбора
//
// Параметры:
//  Элемент				 - 	 - 
//  ВыбранноеЗначение	 - 	 - 
//  СтандартнаяОбработка - 	 - 
&НаКлиенте
Процедура КомиссияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Строки = Объект.Комиссия.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение));

	Если Строки.Количество() > 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Физическое лицо ""%1"" уже подобрано!'"), ВыбранноеЗначение);
		ПоказатьПредупреждение(, ТекстСообщения, 60);
	Иначе
		НоваяСтрока = Объект.Комиссия.Добавить();
		НоваяСтрока.ФизЛицо = ВыбранноеЗначение;
		Если Объект.Комиссия.Количество() = 1 Тогда
			НоваяСтрока.Председатель = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - комиссия председатель при изменении
//
// Параметры:
//  Элемент	 - 	 - 
&НаКлиенте
Процедура КомиссияПредседательПриИзменении(Элемент)

	ТекущаяСтрокаТЧ = Элементы.Комиссия.ТекущиеДанные;

	Если НЕ ТекущаяСтрокаТЧ.Председатель Тогда
		// Снимать флажок нельзя
		ТекущаяСтрокаТЧ.Председатель = Истина;
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТЧ Из Объект.Комиссия Цикл
		Если СтрокаТЧ.НомерСтроки <> ТекущаяСтрокаТЧ.НомерСтроки Тогда
			СтрокаТЧ.Председатель = Ложь;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура - комиссия физ лицо при изменении
//
// Параметры:
//  Элемент	 - 	 - 
&НаКлиенте
Процедура КомиссияФизЛицоПриИзменении(Элемент)

	Если Объект.Комиссия.Количество() = 1 Тогда
		Объект.Комиссия[0].Председатель = Истина;
	КонецЕсли;

КонецПроцедуры

// Процедура - комиссия физ лицо обработка выбора
//
// Параметры:
//  Элемент				 - 	 - 
//  ВыбранноеЗначение	 - 	 - 
//  СтандартнаяОбработка - 	 - 
&НаКлиенте
Процедура КомиссияФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ТекущаяСтрокаТЧ = Элементы.Комиссия.ТекущиеДанные;

	Если ТекущаяСтрокаТЧ.ФизЛицо <> ВыбранноеЗначение Тогда

		СтрокиТабличнойЧасти = Объект.Комиссия.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение));

		Если СтрокиТабличнойЧасти.Количество() > 0 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Физическое лицо ""%1"" уже включено в состав комиссии!'"), ВыбранноеЗначение);
			ПоказатьПредупреждение(, ТекстСообщения, 60);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
КонецПроцедуры

#КонецОбласти
