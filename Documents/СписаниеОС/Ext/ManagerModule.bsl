#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыПроведенияДокумента

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаХозрасчетный(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	// ОС 
	// 1. Распределение расходов по амортизации за месяц
	// 2. Списание накопленной амортизации
	// 3. Списание остаточной стоимости
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	НЕОПРЕДЕЛЕНО КАК СчетДт,
		|	ВременнаяТаблицаОС.СчетУчета.ПарныйСчет КАК СчетКт,
		|	НЕОПРЕДЕЛЕНО КАК ЗначениеСубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК ЗначениеСубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК ЗначениеСубконтоДт3,
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ВременнаяТаблицаОС.АмортизацияЗаМесяц КАК Сумма,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
		|	0 КАК ВалютнаяСуммаДт,
		|	0 КАК ВалютнаяСуммаКт,
		|	&СодержаниеРасходыПоАмортизации КАК Содержание,
		|	0 КАК КоличествоДт,
		|	0 КАК КоличествоКт,
		|	ВременнаяТаблицаОС.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
		|	ИСТИНА КАК РаспределятьПоКоэффициентам
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаОС.АмортизацияЗаМесяц = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаОС.СчетУчета.ПарныйСчет,
		|	ВременнаяТаблицаОС.СчетУчета,
		|	ВременнаяТаблицаОС.ОсновноеСредство,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаОС.ОсновноеСредство,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаОС.НакопленнаяАмортизация + ВременнаяТаблицаОС.АмортизацияЗаМесяц,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	0,
		|	&СодержаниеСписаниеАмортизации,
		|	0,
		|	0,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаОС.НакопленнаяАмортизация + ВременнаяТаблицаОС.АмортизацияЗаМесяц = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаОС.СчетРасхода,
		|	ВременнаяТаблицаОС.СчетУчета,
		|	ВременнаяТаблицаОС.СтатьяЗатрат,
		|	ВременнаяТаблицаШапка.Подразделение,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаОС.ОсновноеСредство,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаОС.ПервоначальнаяСтоимость - ВременнаяТаблицаОС.НакопленнаяАмортизация - ВременнаяТаблицаОС.АмортизацияЗаМесяц,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	0,
		|	&СодержаниеСписаниеОстаточнойСтоимости,
		|	0,
		|	0,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВременнаяТаблицаОС.ПервоначальнаяСтоимость - ВременнаяТаблицаОС.НакопленнаяАмортизация - ВременнаяТаблицаОС.АмортизацияЗаМесяц > 0";
	Запрос.УстановитьПараметр("СодержаниеРасходыПоАмортизации", НСтр("ru = 'Расходы по амортизации ОС за месяц'")); 
	Запрос.УстановитьПараметр("СодержаниеСписаниеАмортизации", НСтр("ru = 'Расходы по амортизации'")); 
	Запрос.УстановитьПараметр("СодержаниеСписаниеОстаточнойСтоимости", НСтр("ru = 'Списание стоимости ОС'")); 
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаДвижений = РезультатЗапроса.Выгрузить();
	
	// Добавление колонк в таблицу для записи в рег. бухг.
	ТаблицаДвижений.Колонки.Добавить("СубконтоДт1");
	ТаблицаДвижений.Колонки.Добавить("СубконтоДт2");
	ТаблицаДвижений.Колонки.Добавить("СубконтоДт3");
	
	ТаблицаХозрасчетный = УправлениеВнеоборотнымиАктивами.РаспределениеПоСпособуОтраженияРасходовПоАмортизации(ТаблицаДвижений);
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", ТаблицаХозрасчетный);	
КонецПроцедуры 

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСостоянияОС(ДокументСсылка, СтруктураДополнительныеСвойства)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ТаблицаДокумента.ОсновноеСредство,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета) КАК Состояние
		|ИЗ
		|	ВременнаяТаблицаОС КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСостоянияОС", РезультатЗапроса.Выгрузить()); 
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСобытияОС(ДокументСсылка, СтруктураДополнительныеСвойства) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Списание) КАК Событие,
		|	ВременнаяТаблицаШапка.Номер КАК НомерДокумента,
		|	""Списание ОС"" КАК НазваниеДокумента
		|ИЗ
		|	ВременнаяТаблицаОС КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСобытияОС", РезультатЗапроса.Выгрузить());
КонецПроцедуры     

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДвижениеОСНУ(ДокументСсылка, СтруктураДополнительныеСвойства) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ПараметрыУчетаОССрезПоследних.ГруппаНУ КАК ГруппаНУ,
		|	ТаблицаДокумента.ОсновноеСредство,
		|	ТаблицаДокумента.ПервоначальнаяСтоимость КАК Выбытие,
		|	ТаблицаДокумента.ПервоначальнаяСтоимость * (12 - МЕСЯЦ(ВременнаяТаблицаШапка.Дата) + 0.5) / 12 КАК ТекущееВыбытие
		|ИЗ
		|	ВременнаяТаблицаОС КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
		|				&Период,
		|				Организация = &Организация
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ
		|							ТаблицаДокумента.ОсновноеСредство
		|						ИЗ
		|							ВременнаяТаблицаОС КАК ТаблицаДокумента)) КАК ПараметрыУчетаОССрезПоследних
		|		ПО ТаблицаДокумента.ОсновноеСредство = ПараметрыУчетаОССрезПоследних.ОсновноеСредство";
	Запрос.УстановитьПараметр("Период", СтруктураДополнительныеСвойства.ДляПроведения.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвижениеОСНУ", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры 

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаКорректировкиНУ(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет,
		|	Хозрасчетный.Вид
		|ПОМЕСТИТЬ ВременнаяТаблицаСчетов
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Временный = ИСТИНА
		|	И (Хозрасчетный.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
		|			ИЛИ Хозрасчетный.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаХозрасчетный.Период,
		|	ТаблицаХозрасчетный.Организация,
		|	ТаблицаХозрасчетный.СчетДт,
		|	ТаблицаХозрасчетный.СчетКт,
		|	ТаблицаХозрасчетный.Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаХозрасчетный
		|ИЗ
		|	&ТаблицаХозрасчетный КАК ТаблицаХозрасчетный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаХозрасчетный.Период КАК Период,
		|	ВременнаяТаблицаХозрасчетный.Организация КАК Организация,
		|	ВременнаяТаблицаХозрасчетный.СчетДт КАК Счет,
		|	ВЫБОР                                                                               
		|		КОГДА ВременнаяТаблицаСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПризнакСчета.Расходный)
		|		КОГДА ВременнаяТаблицаСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПризнакСчета.Доходный)
		|	КОНЕЦ КАК ДоходРасход,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыУчета.ПР) КАК ВидУчета,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
		|			ТОГДА ВременнаяТаблицаХозрасчетный.Сумма
		|		КОГДА ВременнаяТаблицаСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
		|			ТОГДА -ВременнаяТаблицаХозрасчетный.Сумма
		|	КОНЕЦ КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаКорректировкиНУ
		|ИЗ
		|	ВременнаяТаблицаХозрасчетный КАК ВременнаяТаблицаХозрасчетный
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСчетов КАК ВременнаяТаблицаСчетов
		|		ПО ВременнаяТаблицаХозрасчетный.СчетДт = ВременнаяТаблицаСчетов.Счет
		|ГДЕ
		|   ВременнаяТаблицаХозрасчетный.СчетДт В (
		|										ВЫБРАТЬ
		|											ВременнаяТаблицаСчетов.Счет
		|										ИЗ
		|											ВременнаяТаблицаСчетов КАК ВременнаяТаблицаСчетов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаХозрасчетный.Период,
		|	ВременнаяТаблицаХозрасчетный.Организация,
		|	ВременнаяТаблицаХозрасчетный.СчетКт,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПризнакСчета.Расходный)
		|		КОГДА ВременнаяТаблицаСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПризнакСчета.Доходный)
		|	КОНЕЦ,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыУчета.ПР),
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
		|			ТОГДА -ВременнаяТаблицаХозрасчетный.Сумма
		|		КОГДА ВременнаяТаблицаСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
		|			ТОГДА ВременнаяТаблицаХозрасчетный.Сумма
		|	КОНЕЦ		
		|ИЗ
		|	ВременнаяТаблицаХозрасчетный КАК ВременнаяТаблицаХозрасчетный
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСчетов КАК ВременнаяТаблицаСчетов
		|		ПО ВременнаяТаблицаХозрасчетный.СчетКт = ВременнаяТаблицаСчетов.Счет
		|ГДЕ
		|   ВременнаяТаблицаХозрасчетный.СчетКт В (
		|										ВЫБРАТЬ
		|											ВременнаяТаблицаСчетов.Счет
		|										ИЗ
		|											ВременнаяТаблицаСчетов КАК ВременнаяТаблицаСчетов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаКорректировкиНУ.Период,
		|	ВременнаяТаблицаКорректировкиНУ.Организация,
		|	ВременнаяТаблицаКорректировкиНУ.Счет,
		|	ВременнаяТаблицаКорректировкиНУ.ДоходРасход,
		|	ВременнаяТаблицаКорректировкиНУ.ВидУчета,
		|	СУММА(ВременнаяТаблицаКорректировкиНУ.Сумма) КАК Сумма
		|ИЗ
		|	ВременнаяТаблицаКорректировкиНУ КАК ВременнаяТаблицаКорректировкиНУ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаКорректировкиНУ.Счет,
		|	ВременнаяТаблицаКорректировкиНУ.ДоходРасход,
		|	ВременнаяТаблицаКорректировкиНУ.ВидУчета,
		|	ВременнаяТаблицаКорректировкиНУ.Организация,
		|	ВременнаяТаблицаКорректировкиНУ.Период";
	Запрос.УстановитьПараметр("ТаблицаХозрасчетный", СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаХозрасчетный);
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаКорректировкиНУ", РезультатЗапроса.Выгрузить());
КонецПроцедуры

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Дата,
		|	ТаблицаДокумента.Организация,
		|	ТаблицаДокумента.Номер,
		|	ТаблицаДокумента.Подразделение
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.СписаниеОС КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.ОсновноеСредство,
		|	ТаблицаДокумента.ПервоначальнаяСтоимость,
		|	ТаблицаДокумента.ЛиквидационнаяСтоимость,
		|	ТаблицаДокумента.ОстаточнаяСтоимость,
		|	ТаблицаДокумента.НакопленнаяАмортизация,
		|	ТаблицаДокумента.АмортизацияЗаМесяц,
		|	ТаблицаДокумента.СчетУчета,
		|	ТаблицаДокумента.СпособОтраженияРасходовПоАмортизации,
		|	ТаблицаДокумента.СчетРасхода,
		|	ТаблицаДокумента.СтатьяЗатрат
		|ПОМЕСТИТЬ ВременнаяТаблицаОС
		|ИЗ
		|	Документ.СписаниеОС.ОС КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Выполнить();      	
	
	СформироватьТаблицаХозрасчетный(ДокументСсылка, СтруктураДополнительныеСвойства);			 
	СформироватьТаблицаСостоянияОС(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаСобытияОС(ДокументСсылка, СтруктураДополнительныеСвойства); 	
	СформироватьТаблицаДвижениеОСНУ(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаКорректировкиНУ(ДокументСсылка, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

Функция ПолучитьСписокКомиссии(ТаблицаЗначений)
	Если ТаблицаЗначений.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	Первый = Истина;
	СтрокаВозврата = "";
	Для каждого СтрокаТаблицыЗначений Из ТаблицаЗначений Цикл		
		СтрокаВозврата = СтрокаВозврата + ?(Первый, "", ", ") + СтрокаТаблицыЗначений.Должность + " " + СтрокаТаблицыЗначений.ФИО;		
		Первый = Ложь;
	КонецЦикла;	

	Возврат СтрокаВозврата;

КонецФункции // ПолучитьСписокКомиссии()

Функция ПолучитьТаблицуКомиссия(ВыгруженнаяТабличнаяЧасть, Шапка)
	НоваяТаблица = Новый ТаблицаЗначений;
	НоваяТаблица.Колонки.Добавить("ФИО");
	НоваяТаблица.Колонки.Добавить("Должность");	
	
	Если ВыгруженнаяТабличнаяЧасть.Количество() > 0 Тогда
		Для каждого СтрокаТаблицыЗначений Из ВыгруженнаяТабличнаяЧасть Цикл
			НоваяСтрока = НоваяТаблица.Добавить();
			СтруктураФизЛицо = БухгалтерскийУчетСервер.ДанныеФизЛица(Шапка.Организация, СтрокаТаблицыЗначений.ФизЛицо, Шапка.Дата);
			НоваяСтрока.ФИО 		= ?(ЗначениеЗаполнено(СтруктураФизЛицо.Представление), СтруктураФизЛицо.Представление, СтрокаТаблицыЗначений.ФизЛицоНаименование);
			НоваяСтрока.Должность 	= СтруктураФизЛицо.Должность;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат НоваяТаблица;
	
КонецФункции // ПолучитьСписокКомиссии()

Функция ПечатнаяФорма_СписаниеГосударственногоИмущества(МассивОбъектов, ОбъектыПечати)
	Перем Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати 	= "СписаниеОС_СписаниеГосударственногоимущества";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СписаниеОС.ПФ_MXL_СписаниеГосимущества");
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписаниеОС.Ссылка,
		|	СписаниеОС.Номер,
		|	СписаниеОС.Дата,
		|	СписаниеОС.Организация,
		|	СписаниеОС.ДокументОснованиеВид,
		|	СписаниеОС.ДокументОснованиеДата,
		|	СписаниеОС.ДокументОснованиеНомер,
		|	СписаниеОС.ТехническоеСостояние,
		|	СписаниеОС.Комментарий,
		|	СписаниеОС.ОС.(
		|		Ссылка,
		|		НомерСтроки,
		|		ОсновноеСредство,
		|		СписаниеОС.ОС.ПервоначальнаяСтоимость - СписаниеОС.ОС.ЛиквидационнаяСтоимость КАК ОстаточнаяСтоимостьОС,
		|		ИнвентарныйНомер,
		|		ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
		|		ОсновноеСредство.ДатаВыпуска КАК ГодВыпуска,
		|		СписаниеОС.ОС.ПервоначальнаяСтоимость - СписаниеОС.ОС.НакопленнаяАмортизация - СписаниеОС.ОС.ЛиквидационнаяСтоимость КАК ЗатратыНаСписание,
		|		1 КАК КоличествоОС,
		|		СписаниеОС.ОС.ПервоначальнаяСтоимость - СписаниеОС.ОС.ЛиквидационнаяСтоимость КАК ОбщаяСтоимостьОС
		|	),
		|	СписаниеОС.Комиссия.(
		|		Ссылка,
		|		НомерСтроки,
		|		ФизЛицо,
		|		Председатель
		|	),
		|	СписаниеОС.Организация.НаименованиеПолное
		|ИЗ
		|	Документ.СписаниеОС КАК СписаниеОС
		|ГДЕ
		|	СписаниеОС.Ссылка В (&МассивОбъектов)";
		
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);		
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ДатаНомер = СтрШаблон(НСтр("ru = 'Списание ОС № %1 от %2'"),
												ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер),
												Формат(Шапка.Дата, "ДЛФ=D"));
												
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ВременнаяТаблицаОС = Шапка.ОС.Выгрузить();
		Для каждого СтрокаТаблицы Из ВременнаяТаблицаОС Цикл		
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
			ОбластьМакета.Параметры.ИнвентарныйНомер = СокрЛП(СтрокаТаблицы.ИнвентарныйНомер);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		ВременнаяТаблицаОС.Свернуть(, "ЗатратыНаСписание, КоличествоОС, ОстаточнаяСтоимостьОС, ОбщаяСтоимостьОС");				
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоТаблицы");
		Если ВременнаяТаблицаОС.Количество() > 0 Тогда
			ОбластьМакета.Параметры.Заполнить(ВременнаяТаблицаОС[0]);
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьМакета);		
		
		ТаблицаКомиссия = Шапка.Комиссия.Выгрузить();
		Для каждого ЧленКомиссии Из ТаблицаКомиссия Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПодписи");
			СтруктураФизЛицо = БухгалтерскийУчетСервер.ДанныеФизЛица(Шапка.Организация, ЧленКомиссии.ФизЛицо, Шапка.Дата);
			ОбластьМакета.Параметры.ФИО 		= СтруктураФизЛицо.Представление;
			ОбластьМакета.Параметры.Должность 	= СтруктураФизЛицо.Должность;				
			ТабличныйДокумент.Вывести(ОбластьМакета);				
		КонецЦикла;	
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
		                                               НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
													   
	КонецЦикла;
	
	Если НЕ Ошибки = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;	
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	// Добавление дополнительных параметров
	БухгалтерскиеОтчетыКлиентСервер.ЗаполнитьДополнительныеПараметрыПечати(ТабличныйДокумент);
	
	Возврат ТабличныйДокумент;	
	
КонецФункции // ПечатнаяФорма()

Функция ПечатнаяФорма_ИмуществоПредлагаемоеКСписанию(МассивОбъектов, ОбъектыПечати)
	Перем Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати 	= "СписаниеОС_ИмуществоПредлагаемоеКСписанию";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СписаниеОС.ПФ_MXL_ИмуществоПредлагаемоеКСписанию");
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписаниеОС.Ссылка,
		|	СписаниеОС.Номер,
		|	СписаниеОС.Дата,
		|	СписаниеОС.Организация,
		|	СписаниеОС.ДокументОснованиеВид,
		|	СписаниеОС.ДокументОснованиеДата,
		|	СписаниеОС.ДокументОснованиеНомер,
		|	СписаниеОС.ТехническоеСостояние,
		|	СписаниеОС.Комментарий,
		|	СписаниеОС.ОС.(
		|		Ссылка,
		|		НомерСтроки,
		|		ОсновноеСредство,
		|		СписаниеОС.ОС.ПервоначальнаяСтоимость - СписаниеОС.ОС.ЛиквидационнаяСтоимость КАК ОстаточнаяСтоимость,
		|		ИнвентарныйНомер,
		|		ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
		|		ОсновноеСредство.ДатаВыпуска КАК ГодВыпуска,
		|		СписаниеОС.ОС.ПервоначальнаяСтоимость - СписаниеОС.ОС.НакопленнаяАмортизация - СписаниеОС.ОС.ЛиквидационнаяСтоимость КАК ЗатратыНаСписание,
		|		1 КАК КоличествоОС,
		|		СписаниеОС.ОС.ПервоначальнаяСтоимость - СписаниеОС.ОС.ЛиквидационнаяСтоимость КАК ОбщаяСтоимостьОС,
		|		ХозрасчетныйОстатки_Модернизация.СуммаОстатокКт КАК СуммаМодернизации,
		|		ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|		ХозрасчетныйОстатки_Износ.СуммаОстатокКт КАК СуммаИзноса,
		|		ОсновноеСредство.Наименование
		|	),
		|	СписаниеОС.Комиссия.(
		|		Ссылка,
		|		НомерСтроки,
		|		ФизЛицо,
		|		Председатель
		|	),
		|	СписаниеОС.Организация.НаименованиеПолное
		|ИЗ
		|	Документ.СписаниеОС КАК СписаниеОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МодернизацияОС), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), ) КАК ХозрасчетныйОстатки_Модернизация
		|		ПО СписаниеОС.ОС.ОсновноеСредство = ХозрасчетныйОстатки_Модернизация.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(, , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), ) КАК ХозрасчетныйОстатки_Износ
		|		ПО СписаниеОС.ОС.СчетУчета.ПарныйСчет = ХозрасчетныйОстатки_Износ.Счет
		|			И СписаниеОС.ОС.ОсновноеСредство = ХозрасчетныйОстатки_Износ.Субконто1
		|ГДЕ
		|	СписаниеОС.Ссылка В(&МассивОбъектов)";
		
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);		
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Шапка = РезультатЗапроса[0].Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		ОбластьМакета.Параметры.ДатаНомер = СтрШаблон(НСтр("ru = 'Списание ОС № %1 от %2'"),
												ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер),
												Формат(Шапка.Дата, "ДЛФ=D"));
		
		ОбластьМакета.Параметры.Год	= СтрЗаменить(Строка(Год(Шапка.Дата)), Символы.НПП, "");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ВременнаяТаблицаОС = Шапка.ОС.Выгрузить();
		Для каждого СтрокаТаблицы Из ВременнаяТаблицаОС Цикл		
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		ВременнаяТаблицаОС.Свернуть("ОсновноеСредство", "СуммаМодернизации, КоличествоОС, ПервоначальнаяСтоимость, СуммаИзноса, ОстаточнаяСтоимость");				
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоТаблицы");
		Если ВременнаяТаблицаОС.Количество() > 0 Тогда
			ОбластьМакета.Параметры.Заполнить(ВременнаяТаблицаОС[0]);
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ТаблицаКомиссия = Шапка.Комиссия.Выгрузить();
		Для каждого ЧленКомиссии Из ТаблицаКомиссия Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПодписи");
			СтруктураФизЛицо = БухгалтерскийУчетСервер.ДанныеФизЛица(Шапка.Организация, ЧленКомиссии.ФизЛицо, Шапка.Дата);
			ОбластьМакета.Параметры.ФИО 		= СтруктураФизЛицо.Представление;
			ОбластьМакета.Параметры.Должность 	= СтруктураФизЛицо.Должность;				
			ТабличныйДокумент.Вывести(ОбластьМакета);				
		КонецЦикла;
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
		                                               НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
													   
	КонецЦикла;
	
	Если НЕ Ошибки = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;	
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	// Добавление дополнительных параметров
	БухгалтерскиеОтчетыКлиентСервер.ЗаполнитьДополнительныеПараметрыПечати(ТабличныйДокумент);
	
	Возврат ТабличныйДокумент;	
	
КонецФункции // ПечатнаяФорма()

Функция ПечатнаяФорма_АктИинвентаризацииКСписанию(МассивОбъектов, ОбъектыПечати)
	Перем Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати 	= "СписаниеОС_АктИнвентаризацииКСписанию";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СписаниеОС.ПФ_MXL_АктИнвентаризацииКСписанию");
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписаниеОС.Ссылка,
		|	СписаниеОС.Номер,
		|	СписаниеОС.Дата,
		|	СписаниеОС.Организация,
		|	СписаниеОС.ТехническоеСостояние,
		|	СписаниеОС.Комментарий,
		|	СписаниеОС.ОС.(
		|		Ссылка,
		|		НомерСтроки,
		|		ОсновноеСредство,
		|		ИнвентарныйНомер,
		|		ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
		|		ОсновноеСредство.ДатаВыпуска КАК ГодВыпуска,
		|		1 КАК КоличествоОС,
		|		ОсновноеСредство.Наименование,
		|		ОсновноеСредство.НомерПаспорта КАК НомерПаспорта
		|	),
		|	СписаниеОС.Комиссия.(
		|		Ссылка,
		|		НомерСтроки,
		|		ФизЛицо,
		|		Председатель,
		|		ФизЛицо.Наименование
		|	),
		|	СписаниеОС.Организация.НаименованиеПолное,
		|	ИнвентаризацияОС.ДатаНачалаИнвентаризации,
		|	ИнвентаризацияОС.ДатаОкончанияИнвентаризации,
		|	ИнвентаризацияОС.ОС.(
		|		ВЫБОР
		|			КОГДА ИнвентаризацияОС.ОС.НаличиеПоДаннымУчета
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК НаличиеПоДаннымУчета,
		|		СтоимостьПоДаннымУчета,
		|		ВЫБОР
		|			КОГДА ИнвентаризацияОС.ОС.НаличиеФактическое
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК НаличиеФактическое,
		|		СтоимостьФактическая,
		|		ОсновноеСредство
		|	) КАК ИнвентаризацияОС,
		|	СписаниеОС.ДокументОснование,
		|	СписаниеОС.ДокументОснование.Номер,
		|	СписаниеОС.ДокументОснование.Дата
		|ИЗ
		|	Документ.СписаниеОС КАК СписаниеОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияОС КАК ИнвентаризацияОС
		|		ПО СписаниеОС.ДокументОснование = ИнвентаризацияОС.Ссылка
		|			И СписаниеОС.ОС.ОсновноеСредство = ИнвентаризацияОС.ОС.ОсновноеСредство
		|ГДЕ
		|	СписаниеОС.Ссылка В(&МассивОбъектов)";
		
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);		
	РезультатЗапроса = Запрос.Выполнить();
	Шапка = РезультатЗапроса.Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		ОбластьМакета.Параметры.ДатаНомер = СтрШаблон(НСтр("ru = 'Списание ОС № %1 от %2'"),
												ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер),
												Формат(Шапка.Дата, "ДЛФ=D"));
												
		ОбластьМакета.Параметры.Год	= СтрЗаменить(Строка(Год(Шапка.Дата)), Символы.НПП, "");
		//ОбластьМакета.Параметры.СписокСчетов = ПолучитьСписокСчетовОС(Шапка.Ссылка);
		
		ОбластьМакета.Параметры.ДокументОснованиеНомер = ?(ЗначениеЗаполнено(Шапка.ДокументОснованиеНомер), Шапка.ДокументОснованиеНомер, "___");
		ОбластьМакета.Параметры.ДокументОснованиеДата = ?(ЗначениеЗаполнено(Шапка.ДокументОснованиеДата), Формат(Шапка.ДокументОснованиеДата, "ДЛФ=D"), "___");
		
		ТаблицаКомиссия = ПолучитьТаблицуКомиссия(Шапка.Комиссия.Выгрузить(), Шапка);
		ОбластьМакета.Параметры.СписокКомиссии = ПолучитьСписокКомиссии(ТаблицаКомиссия);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ВременнаяТаблицаОС = Шапка.ОС.Выгрузить();
		ТаблицаИнвентаризацияОС = Шапка.ИнвентаризацияОС.Выгрузить();
		ТаблицаИнвентаризацияОС_Временный = ТаблицаИнвентаризацияОС.СкопироватьКолонки("ОсновноеСредство, НаличиеПоДаннымУчета, СтоимостьПоДаннымУчета, НаличиеФактическое, СтоимостьФактическая");
		Для каждого СтрокаТаблицы Из ВременнаяТаблицаОС Цикл		

			СтрокаИнвентаризацияОС = ТаблицаИнвентаризацияОС.Найти(СтрокаТаблицы.ОсновноеСредство, "ОсновноеСредство");
			Если СтрокаИнвентаризацияОС = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрокаВременнойТаблицы =  ТаблицаИнвентаризацияОС_Временный.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаВременнойТаблицы, СтрокаИнвентаризацияОС);
			НоваяСтрокаВременнойТаблицы.ОсновноеСредство = Справочники.ОсновныеСредства.ПустаяСсылка();
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);			
			ОбластьМакета.Параметры.Заполнить(СтрокаИнвентаризацияОС);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		ТаблицаИнвентаризацияОС_Временный.Свернуть(,"НаличиеПоДаннымУчета, СтоимостьПоДаннымУчета, НаличиеФактическое, СтоимостьФактическая");				
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоТаблицы");
		Если ТаблицаИнвентаризацияОС_Временный.Количество() > 0 Тогда
			ОбластьМакета.Параметры.Заполнить(ТаблицаИнвентаризацияОС_Временный[0]);
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммыПрописью");
		НаличиеПоДаннымУчета 	= ?(ТаблицаИнвентаризацияОС_Временный.Количество() > 0, ТаблицаИнвентаризацияОС_Временный[0].НаличиеПоДаннымУчета, 	0);
		СтоимостьПоДаннымУчета 	= ?(ТаблицаИнвентаризацияОС_Временный.Количество() > 0, ТаблицаИнвентаризацияОС_Временный[0].СтоимостьПоДаннымУчета,0);
		НаличиеФактическое 		= ?(ТаблицаИнвентаризацияОС_Временный.Количество() > 0, ТаблицаИнвентаризацияОС_Временный[0].НаличиеФактическое, 	0);
		СтоимостьФактическая 	= ?(ТаблицаИнвентаризацияОС_Временный.Количество() > 0, ТаблицаИнвентаризацияОС_Временный[0].СтоимостьФактическая, 	0);
		
		ПараметрыПредметаИсчисления = " , , , , , , , , 0";
		
		ОбластьМакета.Параметры.ВсегоПоАкту = СтрШаблон(НСтр("ru = 'Количество %1 (%2 ед.), на сумму %3 (%4)'"),
												НаличиеПоДаннымУчета,
												ЧислоПрописью(НаличиеПоДаннымУчета,, ПараметрыПредметаИсчисления),
												СтоимостьПоДаннымУчета,
												БухгалтерскийУчетСервер.СформироватьСуммуПрописью(СтоимостьПоДаннымУчета));
		
		ОбластьМакета.Параметры.КоличествоФактически = СтрШаблон(НСтр("ru = '%1 (%2)'"),
														НаличиеФактическое,
														ЧислоПрописью(НаличиеФактическое,, ПараметрыПредметаИсчисления));
					
		ОбластьМакета.Параметры.СуммаФактически = СтрШаблон(НСтр("ru = '%1 (%2 ед.)'"),
													СтоимостьФактическая,
													БухгалтерскийУчетСервер.СформироватьСуммуПрописью(СтоимостьФактическая));
						
		ТабличныйДокумент.Вывести(ОбластьМакета);
						
		Для каждого ЧленКомиссии Из ТаблицаКомиссия Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПодписи");
			ОбластьМакета.Параметры.ФИО 		= ЧленКомиссии.ФИО;
			ОбластьМакета.Параметры.Должность 	= ЧленКомиссии.Должность;				
			ТабличныйДокумент.Вывести(ОбластьМакета);				
		КонецЦикла;
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
		                                               НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
													   
	КонецЦикла;
	
	Если НЕ Ошибки = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;	
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	// Добавление дополнительных параметров
	БухгалтерскиеОтчетыКлиентСервер.ЗаполнитьДополнительныеПараметрыПечати(ТабличныйДокумент);
	
	Возврат ТабличныйДокумент;	
	
КонецФункции // ПечатнаяФорма()

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СписаниеГосударственногоИмущества") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"СписаниеГосударственногоИмущества", НСтр("ru = 'Списание государственного имущества'"), 
			ПечатнаяФорма_СписаниеГосударственногоИмущества(МассивОбъектов, ОбъектыПечати),,
			"Документ.СписаниеОС.ПФ_MXL_СписаниеГосимущества");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИмуществоПредлагаемоеКСписанию") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ИмуществоПредлагаемоеКСписанию", НСтр("ru = 'Имущество, предлагаемое к списанию'"), 
			ПечатнаяФорма_ИмуществоПредлагаемоеКСписанию(МассивОбъектов, ОбъектыПечати),,
			"Документ.СписаниеОС.ПФ_MXL_ИмуществоПредлагаемоеКСписанию");
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктИнвентаризацииКСписанию") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"АктИнвентаризацииКСписанию", НСтр("ru = 'Акт инвентаризации имущества,предлагаемого к списанию'"), 
			ПечатнаяФорма_АктИинвентаризацииКСписанию(МассивОбъектов, ОбъектыПечати),,
			"Документ.СписаниеОС.ПФ_MXL_АктИнвентаризацииКСписанию");
	КонецЕсли;

КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СписаниеГосударственногоИмущества";
	КомандаПечати.Представление = НСтр("ru = 'Списание государственного имущества'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИмуществоПредлагаемоеКСписанию";
	КомандаПечати.Представление = НСтр("ru = 'Имущество, предлагаемое к списанию'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 2;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктИнвентаризацииКСписанию";
	КомандаПечати.Представление = НСтр("ru = 'Акт инвентаризации имущества,предлагаемого к списанию'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 3;
	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли