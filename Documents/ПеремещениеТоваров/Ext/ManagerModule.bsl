#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыПроведенияДокумента


// Формирует таблицу значений, содержащую данные для проведения по регистру бухгалтерии Хозрасчетный.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаХозрасчетный(ДокументСсылка, СтруктураДополнительныеСвойства)
		
	Если СтруктураДополнительныеСвойства.ДляПроведения.СпособОценки = Перечисления.СпособыОценки.ФИФО 
		И СтруктураДополнительныеСвойства.ДляПроведения.ПодборНоменклатурыПоПартии Тогда
		
		БухгалтерскийУчетСервер.ПолучитьПроводкиСписанияСебестоимостиПоРБХПоПартии(ДокументСсылка, СтруктураДополнительныеСвойства, Истина, "Перемещение ТМЗ"); 		
	Иначе
		БухгалтерскийУчетСервер.ПолучитьПроводкиСписанияСебестоимостиПоРБХ(ДокументСсылка, СтруктураДополнительныеСвойства, Истина, "Перемещение ТМЗ"); 	
	КонецЕсли;	
КонецПроцедуры // СформироватьТаблицаХозрасчетный()

Процедура СформироватьТаблицаЗапасы(ДокументСсылка, СтруктураДополнительныеСвойства)	
	
	Если СтруктураДополнительныеСвойства.ДляПроведения.СпособОценки = Перечисления.СпособыОценки.ФИФО 
		И СтруктураДополнительныеСвойства.ДляПроведения.ПодборНоменклатурыПоПартии Тогда
		
		БухгалтерскийУчетСервер.СформироватьТаблицаЗапасыСписаниеПоПартии(ДокументСсылка, СтруктураДополнительныеСвойства, Истина); 		
	Иначе
		БухгалтерскийУчетСервер.СформироватьТаблицаЗапасыСписание(ДокументСсылка, СтруктураДополнительныеСвойства, Истина);  
	КонецЕсли;
	
КонецПроцедуры 

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка,
	|	ПеремещениеТоваров.Дата КАК Период,
	|	ПеремещениеТоваров.Организация,
	|	ПеремещениеТоваров.СкладОтправитель КАК СкладРасход,
	|	ПеремещениеТоваров.СкладПолучатель КАК СкладПриход,
	|	ПеремещениеТоваров.Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоСписанияСебестоимости,
	|	ПеремещениеТоваров.Список
	|ПОМЕСТИТЬ ВременнаяТаблицаШапка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещениеТоваровТовары.Ссылка,
	|	ПеремещениеТоваровТовары.НомерСтроки,
	|	ПеремещениеТоваровТовары.Номенклатура,
	|	ПеремещениеТоваровТовары.Количество,
	|	ПеремещениеТоваровТовары.СчетУчета,
	|	ПеремещениеТоваровТовары.Цена,
	|	ПеремещениеТоваровТовары.Сумма,
	|	ПеремещениеТоваровТовары.СпособОценки,
	|	ПеремещениеТоваровТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПеремещениеТоваровТовары.СчетУчета КАК СчетСебестоимости,
	|	ПеремещениеТоваровТовары.Номенклатура КАК СубконтоСписанияСебестоимости1,
	|	ВЫБОР
	|		КОГДА ПеремещениеТоваровТовары.Ссылка.Список
	|			ТОГДА ПеремещениеТоваровТовары.СкладПолучатель
	|		ИНАЧЕ ПеремещениеТоваровТовары.Ссылка.СкладПолучатель
	|	КОНЕЦ КАК СубконтоСписанияСебестоимости2,
	|	ПеремещениеТоваровТовары.Номенклатура КАК СубконтоСписанияСебестоимости3,
	|	ПеремещениеТоваровТовары.СкладПолучатель,
	|	ПеремещениеТоваровТовары.Партия
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|ГДЕ
	|	ПеремещениеТоваровТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	СформироватьТаблицаЗапасы(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаХозрасчетный(ДокументСсылка, СтруктураДополнительныеСвойства);
	

КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсПечати

// Функция формирует табличный документ с печатной формой НакладнаяНаПеремещение
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьНакладнойНаПеремещение(МассивОбъектов, ОбъектыПечати)
	Перем Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати 	= "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_НакладнаяНаПеремещение";
	ТабличныйДокумент.ИмяПараметровПечати 	= "ПеремещениеТоваров_НакладнаяНаПеремещение";
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПеремещениеТоваров.Ссылка,
		|	ПеремещениеТоваров.ВерсияДанных,
		|	ПеремещениеТоваров.ПометкаУдаления,
		|	ПеремещениеТоваров.Номер,
		|	ПеремещениеТоваров.Дата,
		|	ПеремещениеТоваров.Проведен,
		|	ПеремещениеТоваров.Организация,
		|	ПеремещениеТоваров.ДокументОснование,
		|	ПеремещениеТоваров.СкладОтправитель,
		|	ПеремещениеТоваров.СкладПолучатель,
		|	ПеремещениеТоваров.Комментарий,
		|	ПеремещениеТоваров.Автор,
		|	ПеремещениеТоваров.Контрагент,
		|	ПеремещениеТоваров.Товары.(
		|		Ссылка,
		|		НомерСтроки,
		|		Номенклатура,
		|		Количество,
		|		СчетУчета,
		|		Цена,
		|		Сумма,
		|		СпособОценки,
		|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		СкладПолучатель.Наименование КАК СкладПолучательНаименование
		|	) КАК Товары,
		|	ПеремещениеТоваров.Организация.НаименованиеПолное,
		|	ПеремещениеТоваров.СкладОтправитель.Представление КАК ОтправительПредставление,
		|	ПеремещениеТоваров.СкладПолучатель.Представление КАК ПолучательПредставление,
		|	ПеремещениеТоваров.Список
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|ГДЕ
		|	ПеремещениеТоваров.Ссылка В(&МассивОбъектов)";
		
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);		
	Шапка 	= Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		Если Шапка.Список Тогда
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПеремещениеТоваров.ПФ_MXL_СписокНакладнаяНаПеремещение");
		Иначе
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПеремещениеТоваров.ПФ_MXL_НакладнаяНаПеремещение");
		КонецЕсли;

		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ТекстЗаголовка	= "Накладная на перемещение" + " № " + ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.Номер);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ВременнаяТаблицаТовары = Шапка.Товары.Выгрузить();
		
		Для каждого СтрокаТаблицы Из ВременнаяТаблицаТовары Цикл		
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");		
		ТабличныйДокумент.Вывести(ОбластьМакета);		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");		
		ТабличныйДокумент.Вывести(ОбластьМакета);		
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
		                                               НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
													   
	КонецЦикла;
	
	Если НЕ Ошибки = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;	
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	// Добавление дополнительных параметров
	БухгалтерскиеОтчетыКлиентСервер.ЗаполнитьДополнительныеПараметрыПечати(ТабличныйДокумент);
	
	Возврат ТабличныйДокумент;	
	
КонецФункции

// Функция формирует табличный документ с печатной формой НакладнаяНаПеремещение
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьНакладнойПоПартиям(МассивОбъектов, ОбъектыПечати)
	Перем Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати 	= "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_НакладнаяПоПартиям";
	ТабличныйДокумент.ИмяПараметровПечати 	= "ПеремещениеТоваров_НакладнаяПоПартиям";
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Запасы.Период КАК Период,
		|	Запасы.Регистратор КАК Ссылка,
		|	Запасы.НомерСтроки КАК НомерСтроки,
		|	Запасы.Активность,
		|	Запасы.ВидДвижения,
		|	Запасы.Организация КАК Организация,
		|	Запасы.Склад КАК Склад,
		|	Запасы.СчетУчета,
		|	Запасы.Номенклатура,
		|	Запасы.Партия,
		|	Запасы.Количество,
		|	Запасы.Сумма / Запасы.Количество КАК Цена,
		|	Запасы.Сумма КАК Сумма,
		|	Запасы.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	ВЫРАЗИТЬ(Запасы.Регистратор КАК Документ.ПеремещениеТоваров).СкладОтправитель.Наименование КАК ОтправительПредставление,
		|	Запасы.Склад.Наименование КАК ПолучательПредставление,
		|	ВЫРАЗИТЬ(Запасы.Регистратор КАК Документ.ПеремещениеТоваров).Номер КАК Номер,
		|	Запасы.Партия.Представление,
		|	Запасы.Партия.Номер,
		|	Запасы.Партия.Дата,
		|	Запасы.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
		|	ВЫБОР
		|		КОГДА Запасы.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
		|			ТОГДА Запасы.Регистратор.Список
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Список
		|ИЗ
		|	РегистрНакопления.Запасы КАК Запасы
		|ГДЕ
		|	Запасы.Регистратор В(&МассивОбъектов)
		|	И Запасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|ИТОГИ
		|	МАКСИМУМ(Период),
		|	МАКСИМУМ(ОрганизацияНаименованиеПолное),
		|	МАКСИМУМ(ОтправительПредставление),
		|	МАКСИМУМ(ПолучательПредставление),
		|	МАКСИМУМ(Номер)
		|ПО
		|	Ссылка";	
		
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);	
	
	РезультатЗапроса	= Запрос.Выполнить();
	Шапка  				= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;		
		Если Шапка.Список Тогда
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПеремещениеТоваров.ПФ_MXL_СписокНакладнаяПоПартиям");
		Иначе
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПеремещениеТоваров.ПФ_MXL_НакладнаяПоПартиям");
		КонецЕсли;		
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ТекстЗаголовка	= "Накладная на перемещение по партиям " + " № " + ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.Номер);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		НомерСтроки = 0;
		СтрокаТаблицы  = Шапка.Выбрать();
		
		Пока СтрокаТаблицы.Следующий() Цикл	
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			НомерСтроки = НомерСтроки + 1;
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
			ОбластьМакета.Параметры.ПартияПредставление = Строка(ТипЗнч(СтрокаТаблицы.Партия));
			ОбластьМакета.Параметры.ПартияНомер 		= ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрокаТаблицы.ПартияНомер);
			ОбластьМакета.Параметры.ПартияДата 			= Формат(СтрокаТаблицы.ПартияДата, "ДФ=dd.MM.yyyy");
			ОбластьМакета.Параметры.НомерСтроки 		= НомерСтроки;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
			
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");		
		ТабличныйДокумент.Вывести(ОбластьМакета);		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");		
		ТабличныйДокумент.Вывести(ОбластьМакета);		
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
		                                               НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);													   
	КонецЦикла;
	
	Если НЕ Ошибки = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;	
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	// Добавление дополнительных параметров
	БухгалтерскиеОтчетыКлиентСервер.ЗаполнитьДополнительныеПараметрыПечати(ТабличныйДокумент);
	
	Возврат ТабличныйДокумент;
		
КонецФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	// Проверяем, нужно ли для макета ПеремещениеТоваров формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяНаПеремещение") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"НакладнаяНаПеремещение", НСтр("ru = 'Накладная на перемещение'"), ПечатьНакладнойНаПеремещение(МассивОбъектов, ОбъектыПечати),,
			"Документ.ПеремещениеТоваров.ПФ_MXL_НакладнаяНаПеремещение");
	КонецЕсли;
	
	// Проверяем, нужно ли для макета ППеремещениеТоваровКО формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяПоПартиям") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"НакладнаяПоПартиям", НСтр("ru = 'Накладная по партиям'"), ПечатьНакладнойПоПартиям(МассивОбъектов, ОбъектыПечати),,
			"Документ.ПеремещениеТоваров.ПФ_MXL_НакладнаяПоПартиям");
	КонецЕсли;	
					
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяНаПеремещение";
	КомандаПечати.Представление = НСтр("ru = 'Накладная на перемещение'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяПоПартиям";
	КомандаПечати.Представление = НСтр("ru = 'Накладная по партиям'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 2;	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
