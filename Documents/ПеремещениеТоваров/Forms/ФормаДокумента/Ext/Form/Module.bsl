#Область ОбработчикиСлужебные

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

#КонецОбласти

#Область УправлениеВнешнимВидом
&НаКлиенте
// Процедура устанавливает видимость и доступность элементов.
//
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	Элементы.Получатель.Видимость 				= НЕ Объект.Список; 
	Элементы.Список.Видимость					= Истина ;  	
	Элементы.Декорация2.Видимость				= ПолучитьФункциональнуюОпциюУчетПоНесколькимОрганизациям(); 
	Элементы.ТоварыСкладПолучатель.Видимость	= Объект.Список;	
	Элементы.ТоварыПартия.Видимость 			= Объект.ПодборНоменклатурыПоПартии;
	
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()    

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения


&НаСервереБезКонтекста
Функция ПолучитьФункциональнуюОпциюУчетПоНесколькимОрганизациям()

	Возврат ПолучитьФункциональнуюОпцию("УчетПоНесколькимОрганизациям")	

КонецФункции // ПолучитьФункциональнуюОпциюУчетПоНесколькимОрганизациям()

&НаСервереБезКонтекста
Функция ПолучитьЕдиницуИзмерения(Номенклатура)

	Возврат Номенклатура.ЕдиницаИзмерения;

КонецФункции // ПолучитьЕдиницуИзмерения(Номенклатура)

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы, ОбщийПодбор = Истина)

	ДатаРасчетов		= ДатаДокумента;
	
	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Товары'");
	КонецЕсли;
	ЗаголовокПодбора = СтрШаблон(НСтр("ru = 'Подбор номенклатуры в %1 (%2)'"), Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов", ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация" , Объект.Организация);
	ПараметрыФормы.Вставить("Склад"       , Объект.СкладОтправитель);
	ПараметрыФормы.Вставить("Заголовок"   , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"  , "");
	ПараметрыФормы.Вставить("ИмяТаблицы"  , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"      , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
	ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("ОбщийПодбор", 	ОбщийПодбор);
	ПараметрыФормы.Вставить("ПодборНоменклатурыПоПартии", Объект.ПодборНоменклатурыПоПартии);
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если НЕ ОбщийПодбор И СтрокаТабличнойЧасти.НомерСтроки = 1 Тогда
		ПараметрыФормы.Вставить("СпособОценки", ПредопределенноеЗначение("Перечисление.СпособыОценки.ПустаяСсылка"));
	Иначе
		ПараметрыФормы.Вставить("СпособОценки", СпособОценки);
	КонецЕсли;	
	
	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Процедура ЗаполнениеТабличнойЧастиПослеПодбораНоменклатуры()
	// В этой процедуре заполняем в каждой СТЧ Цену, СчетУчета и СпособОценки
	УстановитьСпособОценки();
	Отказ = Ложь;
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл			
		СтрокаТабличнойЧасти.СпособОценки = СпособОценки;
		ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары", СтрокаТабличнойЧасти);
		
		Если СтрокаТабличнойЧасти.СпособОценки = ПредопределенноеЗначение("Перечисление.СпособыОценки.ПоСредней") 
				ИЛИ СтрокаТабличнойЧасти.СпособОценки = ПредопределенноеЗначение("Перечисление.СпособыОценки.ФИФО") И НЕ Объект.ПодборНоменклатурыПоПартии Тогда
				
			СтрокаТабличнойЧасти.Цена = БухгалтерскийУчетСервер.ПолучитьЦенуНоменклатурыПоСпособуОценки(ДанныеСТЧ, ПараметрыОбъекта);
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		ИначеЕсли СтрокаТабличнойЧасти.СпособОценки = ПредопределенноеЗначение("Перечисление.СпособыОценки.ПоФиксированной") Тогда
			СтрокаТабличнойЧасти.Количество = 0;	
		КонецЕсли;
		ПроверитьОстаткиВСтрокеТабличнойЧасти(Отказ, СтрокаТабличнойЧасти);
	КонецЦикла;

КонецПроцедуры // ЗаполнениеТабличнойЧастиПослеПодбораНоменклатуры()

&НаКлиенте
Процедура УстановитьСпособОценки()

	Если Объект.Товары.Количество() > 0 Тогда
		СпособОценки_Временный = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСпособОценкиЗапасов(Объект.Товары[0].СчетУчета, ПредопределенноеЗначение("Перечисление.СпособыОценки.ПоСредней"));
		Если НЕ ЗначениеЗаполнено(Объект.Товары[0].СпособОценки) ИЛИ Объект.Товары[0].СпособОценки <> СпособОценки_Временный Тогда
			Объект.Товары[0].СпособОценки = СпособОценки_Временный;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(СпособОценки) Тогда
			СпособОценки = ПредопределенноеЗначение("Перечисление.СпособыОценки.ПустаяСсылка");
		КонецЕсли;		
		Возврат;		
	КонецЕсли;		
	
	Если НЕ ЗначениеЗаполнено(СпособОценки) 
			ИЛИ СпособОценки <> Объект.Товары[0].СпособОценки Тогда
		
		СпособОценки = Объект.Товары[0].СпособОценки;
	Иначе
	КонецЕсли;	

КонецПроцедуры // УстановитьСпособОценки()

&НаКлиенте
Процедура ПриИзмененииНоменклатурыИСчетаУчета()
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчета) Тогда
		СтруктураСчетов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТабличнойЧасти.Номенклатура);	
		СтрокаТабличнойЧасти.СчетУчета = СтруктураСчетов.СчетБУ;	
	КонецЕсли;
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары", СтрокаТабличнойЧасти);	
	КоличествоОстаток = БухгалтерскийУчетСервер.ПолучитьОстатокПоНоменклатуреИСчетуУчета(ДанныеСТЧ, ПараметрыОбъекта);
	Если СтрокаТабличнойЧасти.СпособОценки = ПредопределенноеЗначение("Перечисление.СпособыОценки.ФИФО")
		ИЛИ СтрокаТабличнойЧасти.СпособОценки = ПредопределенноеЗначение("Перечисление.СпособыОценки.ПоСредней") Тогда
	
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчета) Тогда
			СтрокаТабличнойЧасти.Количество = КоличествоОстаток;
			ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары", СтрокаТабличнойЧасти);
			СтрокаТабличнойЧасти.Цена = БухгалтерскийУчетСервер.ПолучитьЦенуНоменклатурыПоСпособуОценки(ДанныеСТЧ, ПараметрыОбъекта);	
		КонецЕсли;
	ИначеЕсли СтрокаТабличнойЧасти.СпособОценки = ПредопределенноеЗначение("Перечисление.СпособыОценки.ПоФиксированной") Тогда
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчета) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена) Тогда
			СтрокаТабличнойЧасти.Количество = КоличествоОстаток;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле Склад-отправитель.'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.СкладОтправитель",
			Истина);
			
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена номенклатура.'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.Товары[" + (СтрокаТабличнойЧасти.НомерСтроки -1) + "].Номенклатура",
			Истина);
			
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчета) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен счет учета номенклатуры.'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.Товары[" + (СтрокаТабличнойЧасти.НомерСтроки -1) + "].СчетУчета",
			Истина);
			
	ИначеЕсли СтрокаТабличнойЧасти.Количество = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нулевой остаток для выбранных номенклатуры и счета учета!'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.Товары[" + (СтрокаТабличнойЧасти.НомерСтроки -1) + "].Количество",
			Истина);		
		
	ИначеЕсли СтрокаТабличнойЧасти.Количество > КоличествоОстаток Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Количество для выбранных номенклатуры и счета учета указано больше, чем есть в остатке. Остаток составляет  %1 %2'"), КоличествоОстаток, ПолучитьЕдиницуИзмерения(СтрокаТабличнойЧасти.Номенклатура));
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.Товары[" + (СтрокаТабличнойЧасти.НомерСтроки -1) + "].Количество",
			Истина);	
		
	КонецЕсли;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);	
	
КонецПроцедуры // ПриИзмененииНоменклатурыИСчета()

&НаКлиенте
Процедура ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, ИмяТЧ, СТЧ = Неопределено)
	
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Вставить("Склад", 	Объект.СкладОтправитель);
	ПараметрыОбъекта.Вставить("Дата", 	ДатаДокумента);
	
	СтрокаТабличнойЧасти = ?(СТЧ = Неопределено, Элементы[ИмяТЧ].ТекущиеДанные, СТЧ);
	ЗаполнитьЗначенияСвойств(ДанныеСТЧ, СтрокаТабличнойЧасти);
	Если СтрокаТабличнойЧасти.СпособОценки <> СпособОценки Тогда
		ДанныеСТЧ.Вставить("СпособОценки", СпособОценки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ИзвлечьЦенуИзСтроки(Строка)
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, " ");
	Если Массив.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Цена = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Массив[0]);
	
	Возврат Цена;

КонецФункции // ИзвлечьЦенуИзСтроки()

&НаСервере
Процедура РедактироватьСписокКомандПечати()
	
	ГруппаВажныеКоманды = ЭтаФорма.Элементы.ГруппаВажныеКомандыПодменюПечать.ПодчиненныеЭлементы;
	
	//Инициализация команд на форме
	Для каждого ЭлементКоманда Из ГруппаВажныеКоманды Цикл
		ЭлементКоманда.Видимость = Истина;
	КонецЦикла;
	
	АдресКомандПечатиВоВременномХранилище = "АдресКомандПечатиВоВременномХранилище";
	КомандаФормы = ЭтаФорма.Команды.Найти(АдресКомандПечатиВоВременномХранилище);
	ОбщийСписокКомандПечатиФормы = ПолучитьИзВременногоХранилища(КомандаФормы.Действие);
			
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы
 
// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Установка реквизитов формы.
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ДатаДокумента = Объект.Дата;
	УПП = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СпособОценки) И Объект.Товары.Количество() > 0 Тогда
		СпособОценки = Объект.Товары[0].СпособОценки;	
	КонецЕсли;
	
	ПараметрыОбъекта 	= Новый Структура("Организация, Дата, Склад");
	ДанныеСТЧ 			= Новый Структура("Номенклатура, Количество, СчетУчета, СпособОценки, Цена");	
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаВажныеКоманды);
	// Конец СтандартныеПодсистемы.Печать	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	РедактироватьСписокКомандПечати();
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") Тогда		
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
		ЗаполнениеТабличнойЧастиПослеПодбораНоменклатуры();
				
	ИначеЕсли ИмяСобытия = "ПодборВСтрокуТабличнойЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		ОбработкаОповещенияПодборВСтрокуТабличнойЧастиТоварыНаСервере(Параметр, Элементы.Товары.ТекущиеДанные.НомерСтроки);
		ЗаполнениеТабличнойЧастиПослеПодбораНоменклатуры();
		
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресПодобраннойНоменклатурыВХранилище);
		
	Для каждого СтрокаПодбора Из ТаблицаОбработки Цикл
		ОтборСтруктура = Новый Структура;
		ОтборСтруктура.Вставить("Номенклатура", СтрокаПодбора.Номенклатура);
		Если Объект.ПодборНоменклатурыПоПартии Тогда
			ОтборСтруктура.Вставить("Партия", СтрокаПодбора.Партия);
		КонецЕсли;		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ОтборСтруктура);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + СтрокаПодбора.Количество;
			НайденныеСтроки[0].Сумма = НайденныеСтроки[0].Сумма + СтрокаПодбора.Сумма;
		Иначе
			Если Объект.Товары.Количество() > 0 И НЕ ЗначениеЗаполнено(Объект.Товары[Объект.Товары.Количество() - 1].Номенклатура) Тогда
			 	СтрокаТабличнойЧасти = Объект.Товары[Объект.Товары.Количество() - 1];
			Иначе
				СтрокаТабличнойЧасти = Объект.Товары.Добавить();			
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаПодбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияПодборВСтрокуТабличнойЧастиТоварыНаСервере(Параметры, НомерСтроки)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресПодобраннойНоменклатурыВХранилище);
	// Вообще-то, в данном случае в таблице ТаблицаОбработки всегда будет одна строка
	Если ТаблицаОбработки.Количество() > 0 Тогда
		СтрокаПодбора = ТаблицаОбработки[0];
		СтрокаТабличнойЧасти = Объект.Товары[НомерСтроки - 1];
	    ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаПодбора);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОстаткиВСтрокеТабличнойЧасти(Отказ, СтрокаТабличнойЧасти)

	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары", СтрокаТабличнойЧасти);
	КоличествоОстаток = БухгалтерскийУчетСервер.ПолучитьОстатокПоНоменклатуреИСчетуУчета(ДанныеСТЧ, ПараметрыОбъекта);
	Если СтрокаТабличнойЧасти.Количество > КоличествоОстаток Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Количество для выбранных номенклатуры и счета учета указано больше, чем есть в остатке. Остаток составляет %1 %2'"), ПолучитьЕдиницуИзмерения(СтрокаТабличнойЧасти.Номенклатура));
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.Товары[" + (СтрокаТабличнойЧасти.НомерСтроки -1) + "].Количество",
			);
			Отказ = Ложь;
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	УПП = БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетСервер.ПроверитьСуществованиеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	УПП = БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатурыПоПартииПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов()
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТабличныхЧастей

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары", Ложь);
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ПриИзмененииНоменклатурыИСчетаУчета();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчета) Тогда
		СтрокаТабличнойЧасти.СпособОценки = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСпособОценкиЗапасов(СтрокаТабличнойЧасти.СчетУчета, ПредопределенноеЗначение("Перечисление.СпособыОценки.ПоСредней"));
		УстановитьСпособОценки();
	КонецЕсли;
	ПриИзмененииНоменклатурыИСчетаУчета();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ПриИзмененииНоменклатурыИСчетаУчета();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Цена = ИзвлечьЦенуИзСтроки(ВыбранноеЗначение);
	ПриИзмененииНоменклатурыИСчетаУчета();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	УстановитьСпособОценки();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары", СтрокаТабличнойЧасти);
	КоличествоОстаток = БухгалтерскийУчетСервер.ПолучитьОстатокПоНоменклатуреИСчетуУчета(ДанныеСТЧ, ПараметрыОбъекта);
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда		
		СтрокаТабличнойЧасти.Количество = КоличествоОстаток;		
	КонецЕсли;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	Отказ = Ложь;	
	Если НЕ ЗначениеЗаполнено(Объект.СкладПолучатель) Тогда
		ТекстСообщения = НСтр("ru = 'Склад-получатель не указан!'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.СкладПолучатель",
			);
	ИначеЕсли Объект.СкладПолучатель = Объект.СкладОтправитель Тогда
		ТекстСообщения = НСтр("ru = ' Склад-получатель и склад-отправитель не могут быть одинаковые!'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.СкладПолучатель",
			Отказ);
	КонецЕсли;	
	
	Если Отказ Тогда
		Объект.СкладПолучатель = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПриИзменении(Элемент)
	Отказ = Ложь;	
	Если НЕ ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
		ТекстСообщения = НСтр("ru = 'Склад-отправитель не указан!'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.СкладОтправитель",
			);
	ИначеЕсли Объект.СкладПолучатель = Объект.СкладОтправитель Тогда
		ТекстСообщения = НСтр("ru = ' Склад-получатель и склад-отправитель не могут быть одинаковые!'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.СкладОтправитель",
			Отказ);
	КонецЕсли;	
	
	Если Отказ Тогда
		Объект.СкладОтправитель = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Отказ = Ложь;
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ПроверитьОстаткиВСтрокеТабличнойЧасти(Отказ, СтрокаТабличнойЧасти)
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подбор(Команда)
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура Пересчитать(Команда)
	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле Склад-отправитель.'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.СкладОтправитель",
			Отказ);
		Возврат;
	КонецЕсли;	
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке %1 не заполнена номенклатура'"), СтрокаТабличнойЧасти.НомерСтроки);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
				Объект.Ссылка,   
				ТекстСообщения,
				,
				,
				"Объект.Товары[" + (СтрокаТабличнойЧасти.НомерСтроки -1) + "].Номенклатура",
				Отказ);
		КонецЕсли;					
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчета) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке %1 не заполнен счет учета'"), СтрокаТабличнойЧасти.НомерСтроки);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
				Объект.Ссылка,   
				ТекстСообщения,
				,
				,
				"Объект.Товары[" + (СтрокаТабличнойЧасти.НомерСтроки -1) + "].СчетУчета",
				Отказ);				
		КонецЕсли;	
			
		ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары", СтрокаТабличнойЧасти);		
		КоличествоОстаток = БухгалтерскийУчетСервер.ПолучитьОстатокПоНоменклатуреИСчетуУчета(ДанныеСТЧ, ПараметрыОбъекта);
		
		Если СтрокаТабличнойЧасти.СпособОценки = ПредопределенноеЗначение("Перечисление.СпособыОценки.ФИФО")
					ИЛИ СтрокаТабличнойЧасти.СпособОценки = ПредопределенноеЗначение("Перечисление.СпособыОценки.ПоСредней") Тогда						
			СтрокаТабличнойЧасти.Цена = БухгалтерскийУчетСервер.ПолучитьЦенуНоменклатурыПоСпособуОценки(ДанныеСТЧ, ПараметрыОбъекта);
			Если СтрокаТабличнойЧасти.Количество > КоличествоОстаток Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Перерасход номенклатуры составляет %1 %2'"), СтрокаТабличнойЧасти.Количество - КоличествоОстаток, СтрокаТабличнойЧасти.ЕдиницаИзмерения);
				БухгалтерскийУчетСервер.СообщитьОбОшибке(
					Объект.Ссылка,   
					ТекстСообщения,
					,
					,
					"Объект.Товары[" + (СтрокаТабличнойЧасти.НомерСтроки -1) + "].Количество",
					Отказ);
			КонецЕсли;
			
		ИначеЕсли СтрокаТабличнойЧасти.СпособОценки = ПредопределенноеЗначение("Перечисление.СпособыОценки.ПоФиксированной") Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке %1 не заполнена цена'"), СтрокаТабличнойЧасти.НомерСтроки);
				БухгалтерскийУчетСервер.СообщитьОбОшибке(
					Объект.Ссылка,   
					ТекстСообщения,
					,
					,
					"Объект.Товары[" + (СтрокаТабличнойЧасти.НомерСтроки -1) + "].Цена",
					Отказ);
			
			ИначеЕсли СтрокаТабличнойЧасти.Количество > КоличествоОстаток Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Перерасход номенклатуры по указанной цене составляет %1 %2'"), СтрокаТабличнойЧасти.Количество - КоличествоОстаток, ПолучитьЕдиницуИзмерения(СтрокаТабличнойЧасти.Номенклатура));
				БухгалтерскийУчетСервер.СообщитьОбОшибке(
					Объект.Ссылка,   
					ТекстСообщения,
					,
					,
					"Объект.Товары[" + (СтрокаТабличнойЧасти.НомерСтроки -1) + "].Количество",
					Отказ);

			КонецЕсли;
			
		КонецЕсли;
		
		Если Отказ Тогда 
			Возврат
		КонецЕсли;	
				
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросПересчитатьТабличнуюЧасть", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Табличная часть документа будет пересчитана! Продолжить выполнение операции?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросПересчитатьТабличнуюЧасть(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);	
		КонецЦикла;
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
КонецПроцедуры

#КонецОбласти

