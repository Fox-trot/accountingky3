#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Установка реквизитов формы.
    ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	//УПП 							= БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);

	Если Не ЗначениеЗаполнено(Объект.СтавкаНДС) Тогда 		
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда	
			ДанныеДоговора 		= БухгалтерскийУчетВызовСервераПовтИсп.ДанныеДоговора(Объект.ДоговорКонтрагента);		
			Объект.СтавкаНДС 	= ?(ЗначениеЗаполнено(ДанныеДоговора.СтавкаНДС), ДанныеДоговора.СтавкаНДС, УПП.СтавкаНДСПоУмолчанию);
		КонецЕсли;
	КонецЕсли;
	
	СтавкаНДС 		= Объект.СтавкаНДС;
	СтавкаНСП 		= Объект.СтавкаНСП;

	//ПараметрыОбъекта	= Новый Структура("Организация, 
	//										|Дата, 
	//										|Ссылка,
	//										|ДоговорКонтрагента,
	//										|СтавкаНДС,  
	//										|СтавкаНСП,
	//										|ЗначСтавкаНДС, 
	//										|ЗначСтавкаНСП");		

	//ДанныеСТЧ	 		= Новый Структура("ОсновноеСредство, 
	//										|Сумма,
	//										|СуммаНДС,  
	//										|СуммаНСП");	
	 
	 
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьДоступностьЭлементов();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПодборОСПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		ПолучитьОСИзХранилища(АдресЗапасовВХранилище, "ОС");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервераПовтИсп.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	//СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент);
	//
	//СтруктураДоговор 			= БухгалтерскийУчетСервер.ПолучитьДоговорКонтрагента(
	//							Объект.Организация, 
	//							Объект.Контрагент, 
	//							ВалютаРегламентированногоУчета, 
	//							ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	//Объект.ДоговорКонтрагента 	= СтруктураДоговор.ДоговорКонтрагента;	
	//
	//ПриИзмененииДоговораКонтрагента();
	//
	//УстановитьСчетаРасчетовСКонтрагентами();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговораКонтрагента();

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДоговораКонтрагента()
			
	ДанныеДоговора 				= БухгалтерскийУчетВызовСервераПовтИсп.ДанныеДоговора(Объект.ДоговорКонтрагента);	
	Объект.СуммаВключаетНалоги 	= ДанныеДоговора.СуммаВключаетНалоги;
	
	Если ЗначениеЗаполнено(Объект.СтавкаНДС) Тогда  
		Если Объект.СтавкаНДС <> ДанныеДоговора.СтавкаНДС 
			И Объект.ОС.Количество() > 0 Тогда		
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросПриИзмененииСтавкиНДСПоДоговору", ЭтотОбъект, ДанныеДоговора);
			ТекстВопроса = НСтр("ru = 'Ставка НДС по договору отличается от установленной. Документ будет пересчитан. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
		КонецЕсли;
	Иначе 
		Объект.СтавкаНДС 	= ?(ЗначениеЗаполнено(ДанныеДоговора.СтавкаНДС), ДанныеДоговора.СтавкаНДС, УПП.СтавкаНДСПоУмолчанию);		
		//Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл 
		//	РассчитатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти);
		//КонецЦикла;
		
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ДатаДокумента, "ОС", Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП);

	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура БезналичныйРасчетПриИзменении(Элемент)
	
	//Для каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл
	//	РассчитатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти);		
	//КонецЦикла;
	ПоказатьПредупреждение(, "В разработке", 30, "ВНИМАНИЕ");
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	Если СтавкаНДС <> Объект.СтавкаНДС И Объект.ОС.Количество() > 0 Тогда				
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросПриИзмененииСтавкиНДС", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Изменена ставка НДС. Документ будет пересчитан. Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе 
		СтавкаНДС = Объект.СтавкаНДС;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНСППриИзменении(Элемент)
	
	Если СтавкаНСП <> Объект.СтавкаНСП И Объект.ОС.Количество() > 0 Тогда				
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросПриИзмененииСтавкиНСП", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Изменена ставка НСП. Документ будет пересчитан. Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе 
		СтавкаНСП = Объект.СтавкаНСП;
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)
	
	//СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	//РассчитатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти);
	//
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ДатаДокумента, "ОС", Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура ПодборОС(Команда)
	УправлениеВнеоборотнымиАктивамиКлиент.ОткрытьПодбор(ЭтаФорма, "ОС");  
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДляСписка(Команда)
	Отказ = Ложь;
	
	Если Объект.ОС.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть ""ОС""! Операция отменена.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ОС",,Отказ);		
	КонецЕсли;

	Если Отказ Тогда 
		Возврат
	КонецЕсли;		
	
	Если Объект.ОС.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьДляСписка", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные табличной части документа будут перезаполнены! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		ДополнитьСтрокиНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНаименованию(Команда)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	Отказ = Ложь;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана строка для заполнения! Операция отменена.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ОС",,Отказ);		
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОсновноеСредство) Тогда
		ТекстСообщения = НСтр("ru = 'В выбранной строке не заполнено основное средство! Операция отменена.'");
		ПолеСообщения = СтрШаблон("Объект.ОС[%1].ОсновноеСредство", СтрокаТабличнойЧасти.НомерСтроки-1);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,ПолеСообщения,,Отказ);		
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат
	КонецЕсли;		
	
	ДополнительныеПараметры = Новый Структура("ОсновноеСредство", СтрокаТабличнойЧасти.ОсновноеСредство);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьПоНаименованию", ЭтотОбъект, ДополнительныеПараметры);
	ТекстВопроса = НСтр("ru = 'Табличная часть документа будет дозаполнена! Продолжить выполнение операции?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьДляСписка(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДополнитьСтрокиНаСервере();
	КонецЕсли; 
КонецПроцедуры	

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьПоНаименованию(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоНаименованиюНаСервере(ДополнительныеПараметры.ОсновноеСредство);
	КонецЕсли; 
КонецПроцедуры	

&НаКлиенте
Процедура ОтветНаВопросПриИзмененииСтавкиНДСПоДоговору(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.СтавкаНДС = ДополнительныеПараметры.СтавкаНДС;	
		//Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл 
		//	РассчитатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти);
		//КонецЦикла;
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ДатаДокумента, "ОС", Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП);
	Иначе 
		// Отмена изменения - возврат прежних значений
		Объект.СтавкаНДС = СтавкаНДС;		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросПриИзмененииСтавкиНДС(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		//Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл 
		//	РассчитатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти);
		//КонецЦикла;
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ДатаДокумента, "ОС", Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП);

	Иначе 
		// Отмена изменения - возврат прежних значений
		Объект.СтавкаНДС = СтавкаНДС;		
	КонецЕсли; 
	//
КонецПроцедуры	

&НаКлиенте
Процедура ОтветНаВопросПриИзмененииСтавкиНСП(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		//Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл 
		//	РассчитатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти);
		//КонецЦикла;
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ДатаДокумента, "ОС", Объект.СуммаВключаетНалоги, Объект.СтавкаНДС, Объект.СтавкаНСП);

	Иначе
		// Отмена изменения - возврат прежних значений
		Объект.СтавкаНСП = СтавкаНСП;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()	
	Элементы.ДоговорКонтрагента.Видимость = Истина; 
	
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()    

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	//РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	//
	//СтруктураДанные = Новый Структура;
	//СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	//
	//Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура получает список ОС из временного хранилища
//
&НаСервере
Процедура ПолучитьОСИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	МассивОсновныхСредств = Новый Массив;
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект.ОС.НайтиСтроки(Новый Структура("ОсновноеСредство", СтрокаЗагрузки.ОсновноеСредство));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Объект.ОС.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
		МассивОсновныхСредств.Добавить(СтрокаТабличнойЧасти.ОсновноеСредство);
	КонецЦикла;
	
	ДополнитьСтрокиНаСервере(МассивОсновныхСредств);
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// Процедура заполняет строки
//
// Параметры:
//  МассивОсновныхСредств  - Массив - массив ОС, по которым нужно заполнить строки, если не указано- заполняются все строки
//
&НаСервере
Процедура ДополнитьСтрокиНаСервере(МассивОсновныхСредств = Неопределено)
	Если МассивОсновныхСредств = Неопределено Тогда 
		МассивОсновныхСредств = Объект.ОС.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	КонецЕсли;		
	
	Если МассивОсновныхСредств.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;	
	
	УправлениеВнеоборотнымиАктивами.ЗаполнитьДанныеОсновныхСредствВТабличнойЧасти(Объект.Ссылка, ДатаДокумента, Объект.Организация, Объект.ОС, МассивОсновныхСредств);
КонецПроцедуры // ДополнитьСтрокиНаСервере()

// Процедура - Заполнить по наименованию на сервере
//
// Параметры:
//  СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - строка, по данным которой нужно выполнить заполнение
//
&НаСервере
Процедура ЗаполнитьПоНаименованиюНаСервере(ОсновноеСредство)
	НаименованиеОС = ОсновноеСредство.Наименование;
	
	МассивОсновныхСредств = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	РегистрСведений.СостоянияОС.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ОсновноеСредство.Наименование = &НаименованиеОС
		|				И НЕ Регистратор = &Ссылка) КАК СостоянияОССрезПоследних
		|ГДЕ
		|	СостоянияОССрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)";
	Запрос.УстановитьПараметр("Период", ДатаДокумента);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("НаименованиеОС", НаименованиеОС);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокиТабличнойЧасти = Объект.ОС.НайтиСтроки(Новый Структура("ОсновноеСредство", ВыборкаДетальныеЗаписи.ОсновноеСредство));
		
		Если СтрокиТабличнойЧасти.Количество() > 0 Тогда 
			Продолжить;	
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Объект.ОС.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи);
		
		МассивОсновныхСредств.Добавить(СтрокаТабличнойЧасти.ОсновноеСредство);
	КонецЦикла;

	ДополнитьСтрокиНаСервере(МассивОсновныхСредств);
КонецПроцедуры // ЗаполнитьПоНаименованиюНаСервере()

//&НаКлиенте
//Процедура ЗаполнитьПараметрыОбъектаИСТЧ(СтрокаТабличнойЧасти)
//	
//	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
//	ЗаполнитьЗначенияСвойств(ДанныеСТЧ, СтрокаТабличнойЧасти);
//	
//	ПараметрыОбъекта.ЗначСтавкаНДС 		= БухгалтерскийУчетСервер.ПолучитьСтавкуНДС(ДатаДокумента, Объект.СтавкаНДС).Ставка;

//	Если Объект.БезналичныйРасчет Тогда
//		ПараметрыОбъекта.ЗначСтавкаНСП 	= 0;		
//	Иначе						
//		ПараметрыОбъекта.ЗначСтавкаНСП = БухгалтерскийУчетСервер.ПолучитьСтавкуНСП(ДатаДокумента, Объект.СтавкаНДС, Объект.СтавкаНСП).Ставка;
//	КонецЕсли;
//	
//КонецПроцедуры	

//&НаКлиенте
//Процедура РассчитатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти)
//	
//	ЗаполнитьПараметрыОбъектаИСТЧ(СтрокаТабличнойЧасти);
//	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиРеализации(ДанныеСТЧ, ПараметрыОбъекта, "ОС");		
//	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСТЧ);
//	
//КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ПроцедурыИФункцииКомиссия

// Процедура - Подбор физических лиц
//
// Параметры:
//  Команда	 - 	 - 
&НаКлиенте
Процедура ПодборФизическихЛиц(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, Элементы.Комиссия);

КонецПроцедуры

// Процедура - комиссия перед удалением
//
// Параметры:
//  Элемент	 - 	 - 
//  Отказ	 - 	 - 
&НаКлиенте
Процедура КомиссияПередУдалением(Элемент, Отказ)

	ТекущаяСтрокаТЧ = Элементы.Комиссия.ТекущиеДанные;
	Если ТекущаяСтрокаТЧ.Председатель Тогда
		ИндексУдаляемойСтроки = Объект.Комиссия.Индекс(ТекущаяСтрокаТЧ);
		КоличествоСтрок = Объект.Комиссия.Количество() - 1;

		Если КоличествоСтрок > 0 Тогда
			Если ИндексУдаляемойСтроки <= КоличествоСтрок - 1 Тогда
				ИндексНовогоПредседателя = ИндексУдаляемойСтроки + 1;
			Иначе
				ИндексНовогоПредседателя = КоличествоСтрок - 1;
			КонецЕсли;
			Объект.Комиссия[ИндексНовогоПредседателя].Председатель = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура - комиссия при начале редактирования
//
// Параметры:
//  Элемент		 - 	 - 
//  НоваяСтрока	 - 	 - 
//  Копирование	 - 	 - 
&НаКлиенте
Процедура КомиссияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если Копирование Тогда
		ТекущаяСтрокаТЧ = Элементы.Комиссия.ТекущиеДанные;
		ТекущаяСтрокаТЧ.ФизЛицо = Неопределено;
		ТекущаяСтрокаТЧ.Председатель = Ложь;
	Иначе // Создание заново
		Если Объект.Комиссия.Количество() = 1 Тогда
			Объект.Комиссия[0].Председатель = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - комиссия обработка выбора
//
// Параметры:
//  Элемент				 - 	 - 
//  ВыбранноеЗначение	 - 	 - 
//  СтандартнаяОбработка - 	 - 
&НаКлиенте
Процедура КомиссияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Строки = Объект.Комиссия.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение));

	Если Строки.Количество() > 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Физическое лицо ""%1"" уже подобрано!'"), ВыбранноеЗначение);
		ПоказатьПредупреждение(, ТекстСообщения, 60);
	Иначе
		НоваяСтрока = Объект.Комиссия.Добавить();
		НоваяСтрока.ФизЛицо = ВыбранноеЗначение;
		Если Объект.Комиссия.Количество() = 1 Тогда
			НоваяСтрока.Председатель = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - комиссия председатель при изменении
//
// Параметры:
//  Элемент	 - 	 - 
&НаКлиенте
Процедура КомиссияПредседательПриИзменении(Элемент)

	ТекущаяСтрокаТЧ = Элементы.Комиссия.ТекущиеДанные;

	Если НЕ ТекущаяСтрокаТЧ.Председатель Тогда
		// Снимать флажок нельзя
		ТекущаяСтрокаТЧ.Председатель = Истина;
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТЧ Из Объект.Комиссия Цикл
		Если СтрокаТЧ.НомерСтроки <> ТекущаяСтрокаТЧ.НомерСтроки Тогда
			СтрокаТЧ.Председатель = Ложь;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура - комиссия физ лицо при изменении
//
// Параметры:
//  Элемент	 - 	 - 
&НаКлиенте
Процедура КомиссияФизЛицоПриИзменении(Элемент)

	Если Объект.Комиссия.Количество() = 1 Тогда
		Объект.Комиссия[0].Председатель = Истина;
	КонецЕсли;

КонецПроцедуры

// Процедура - комиссия физ лицо обработка выбора
//
// Параметры:
//  Элемент				 - 	 - 
//  ВыбранноеЗначение	 - 	 - 
//  СтандартнаяОбработка - 	 - 
&НаКлиенте
Процедура КомиссияФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ТекущаяСтрокаТЧ = Элементы.Комиссия.ТекущиеДанные;

	Если ТекущаяСтрокаТЧ.ФизЛицо <> ВыбранноеЗначение Тогда

		СтрокиТабличнойЧасти = Объект.Комиссия.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение));

		Если СтрокиТабличнойЧасти.Количество() > 0 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Физическое лицо ""%1"" уже включено в состав комиссии!'"), ВыбранноеЗначение);
			ПоказатьПредупреждение(, ТекстСообщения, 60);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

#КонецОбласти





