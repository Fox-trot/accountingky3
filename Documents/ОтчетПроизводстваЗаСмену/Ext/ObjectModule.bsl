#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет табличную часть Материалы на основании данных табличных частей Продукция и Услуги.
// Процедура добавляет строки, не очищая табличную часть перед заполнением.
// Счета учета не заполняются. При необходимости, об этом должен позаботиться вызывающий код.
// 
Процедура ЗаполнитьМатериалыПоПродукцииУслугам() Экспорт
	
	// Получим данные о сырье для заполнения табличной части
	ЭлементыТекстаЗапроса = Новый Массив;
	// Исходные данные
	ЭлементыТекстаЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Продукция.НомерСтроки КАК НомерСтроки,
		|	Продукция.Номенклатура КАК НоменклатураПродукции,
		|	Продукция.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	Продукция.Спецификация КАК Спецификация,
		|	Продукция.Количество КАК Количество
		|ПОМЕСТИТЬ Продукция
		|ИЗ
		|	&Продукция КАК Продукция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Услуги.НомерСтроки КАК НомерСтроки,
		|	Услуги.Номенклатура КАК НоменклатураУслуги,
		|	Услуги.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	Услуги.Спецификация КАК Спецификация,
		|	Услуги.Количество КАК Количество
		|ПОМЕСТИТЬ Услуги
		|ИЗ
		|	&Услуги КАК Услуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	0 КАК НомерСписка,
		|	Продукция.НомерСтроки КАК НомерСтрокиВыпуск,
		|	Продукция.НоменклатураПродукции КАК НоменклатураПродукции,
		|	Продукция.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	Продукция.Спецификация КАК Спецификация,
		|	Продукция.Количество КАК КоличествоПродукции
		|ПОМЕСТИТЬ Выпуск
		|ИЗ
		|	Продукция КАК Продукция
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1,
		|	Услуги.НомерСтроки,
		|	Услуги.НоменклатураУслуги,
		|	Услуги.НоменклатурнаяГруппа,
		|	Услуги.Спецификация,
		|	Услуги.Количество
		|ИЗ
		|	Услуги КАК Услуги");
	
	// Данные о расходе сырья
	ЭлементыТекстаЗапроса.Добавить(УправлениеПроизводством.ТекстЗапросаВременнаяТаблицаЗатратыСырья());
	
	// Преобразуем в формат получателя
	ЭлементыТекстаЗапроса.Добавить(
		"ВЫБРАТЬ
		|	МАКСИМУМ(ЗатратыСырья.НомерСтрокиСпецификации) КАК НомерСтрокиСпецификации,
		|	МИНИМУМ(ЗатратыСырья.НомерСписка) КАК НомерСписка,
		|	МИНИМУМ(ВЫБОР
		|		КОГДА &ПрямыеРасходыУчитываютсяПоПродукции ТОГДА
		|			ЗатратыСырья.НомерСтрокиВыпуск
		|		ИНАЧЕ 
		|			0
		|	КОНЕЦ) КАК НомерСтрокиВыпуск,
		|	ВЫБОР
		|		КОГДА &ПрямыеРасходыУчитываютсяПоПродукции ТОГДА
		|			ЗатратыСырья.НоменклатураПродукции
		|		ИНАЧЕ 
		|			ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	КОНЕЦ КАК Продукция,
		|	ЗатратыСырья.НоменклатурнаяГруппа,
		|	ЗатратыСырья.НоменклатурнаяГруппа.СпособУчетаНДС КАК СпособУчетаНДС,
		|	ЗатратыСырья.Номенклатура,
		|	ЗатратыСырья.Номенклатура.Наименование КАК НоменклатураПредставление,
		|	СУММА(ЗатратыСырья.Количество) КАК Количество,
		|	ЗатратыСырья.ЕдиницаИзмерения,
		|	1 КАК Коэффициент,
		|	ЗатратыСырья.СтатьяЗатрат
		|ИЗ
		|	ЗатратыСырья КАК ЗатратыСырья
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗатратыСырья.Номенклатура,
		|	ЗатратыСырья.Номенклатура.Наименование,
		|	ВЫБОР
		|		КОГДА &ПрямыеРасходыУчитываютсяПоПродукции ТОГДА
		|			ЗатратыСырья.НоменклатураПродукции
		|		ИНАЧЕ 
		|			ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	КОНЕЦ,
		|	ЗатратыСырья.НоменклатурнаяГруппа,
		|	ЗатратыСырья.НоменклатурнаяГруппа.СпособУчетаНДС,
		|	ЗатратыСырья.ЕдиницаИзмерения,
		|	ЗатратыСырья.СтатьяЗатрат
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСписка,
		|	НомерСтрокиВыпуск,
		|	НомерСтрокиСпецификации,
		|	НоменклатураПредставление");
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Продукция", Продукция.Выгрузить());
	Запрос.Параметры.Вставить("Услуги",    Услуги.Выгрузить());
	//Запрос.Параметры.Вставить("ПрямыеРасходыУчитываютсяПоПродукции",
	//	ЗначениеЗаполнено(ПланыСчетов.Хозрасчетный.ПрямыеРасходыУчитываютсяПоПродукции()));
	Запрос.Параметры.Вставить("ПрямыеРасходыУчитываютсяПоПродукции", Ложь);
	Запрос.Текст = СтрСоединить(ЭлементыТекстаЗапроса, ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета());
	
	Материалы.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

#КонецОбласти
	
#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
		
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НоменклатурнаяГруппаВТаблице Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("НоменклатурнаяГруппа");
	Иначе 
		МассивНепроверяемыхРеквизитов.Добавить("Продукция.НоменклатурнаяГруппа");
	КонецЕсли;	
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

	// Предварительный контроль	
	ВыполнитьПредварительныйКонтроль(Отказ);
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Продукция.Итог("СуммаПлановая");
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	//// Инициализация дополнительных свойств для проведения документа.
	//БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	// 	
	//// Инициализация данных документа.
	//Документы.ОприходованиеТоваров.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	//
	//// Подготовка наборов записей.
	//БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	//
	//// Отражение в разделах учета.
	//// ТМЗ.
	//УчетТоваров.СформироватьДвиженияОприходованиеТоваров(ДополнительныеСвойства, Движения, Отказ);
	//УчетМБП.СформироватьДвиженияОприходованиеМБП(ДополнительныеСвойства, Движения, Отказ);
	//
	//// Запись наборов записей.
	//БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	//ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)

	// Инициализация дополнительных свойств для проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.Номенклатура,
		|	ТаблицаДокумента.СчетУчета
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	&ТаблицаДокумента КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаДокумента1.НомерСтроки) КАК НомерСтроки,
		|	ТаблицаДокумента1.Номенклатура
		|ИЗ
		|	ТаблицаДокумента КАК ТаблицаДокумента1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокумента КАК ТаблицаДокумента2
		|		ПО ТаблицаДокумента1.НомерСтроки <> ТаблицаДокумента2.НомерСтроки
		|			И ТаблицаДокумента1.Номенклатура = ТаблицаДокумента2.Номенклатура
		|			И ТаблицаДокумента1.СчетУчета = ТаблицаДокумента2.СчетУчета
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента1.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Запрос.УстановитьПараметр("ТаблицаДокумента", Продукция);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Дубли строк.
	Если НЕ МассивРезультатов[1].Пустой() Тогда
		ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Номенклатура указывается повторно в строке %1 списка ""Продукция"".'"), 
							ВыборкаИзРезультатаЗапроса.НомерСтроки);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				"Продукция",
				ВыборкаИзРезультатаЗапроса.НомерСтроки,
				"Номенклатура",
				Отказ);
		КонецЦикла;
	КонецЕсли;		

КонецПроцедуры

#КонецОбласти
	
#КонецЕсли