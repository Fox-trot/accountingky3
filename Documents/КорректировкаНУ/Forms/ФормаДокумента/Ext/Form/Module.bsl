#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ПроверкаСоответствияПроводок();	

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов   
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПодборПроводокПроизведен"
		И ТипЗнч(Параметр) = Тип("Структура")
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище = Параметр.АдресЗапасовВХранилище;
		Если ЗначениеЗаполнено(АдресЗапасовВХранилище) Тогда
			
			ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище);
			
		КонецЕсли;
		
		ТекстОповещения = НСтр("ru = 'Заполнение'");
		ТекстПояснения = НСтр("ru = 'Табличная часть ""Проводки по документам"" заполнена.'");
		ПоказатьОповещениеПользователя(ТекстОповещения,, ТекстПояснения, БиблиотекаКартинок.Информация32);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервераПовтИсп.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТабличнаяЧастьПодобранныеПроводки

&НаКлиенте
Процедура ПодобранныеПроводкиСуммаКорректировкиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ПодобранныеПроводки.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.СуммаКорректировки > СтрокаТабличнойЧасти.СуммаПоСчету Тогда
		ТекстСообщения = НСтр("ru = 'Сумма корректировки не может быть больше суммы БУ'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,);
		СтрокаТабличнойЧасти.СуммаКорректировки = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодобранныеПроводкиПриИзменении(Элемент)
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Несоответствие", Истина);
	
	НайденныеСтроки = Объект.ПодобранныеПроводки.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Элементы.ГруппаСообщенияОНесоответствииПроводок.Видимость = Ложь;
	Иначе
		Элементы.ГруппаСообщенияОНесоответствииПроводок.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборПроводок(Команда)
	
	Если Объект.НачалоПериода > Объект.КонецПериода Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата начала периода не может быть больше даты окончания.'"));
		Возврат;	
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("НачалоПериода", 			 Объект.НачалоПериода);
	ПараметрыПодбора.Вставить("КонецПериода", 			 Объект.КонецПериода);
	ПараметрыПодбора.Вставить("Организация", 			 Объект.Организация);
	ПараметрыПодбора.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	Если Объект.ПодобранныеПроводки.Количество() > 0 Тогда
		ДанныеТабличнойЧасти(ПараметрыПодбора);
	КонецЕсли;
	
	ОткрытьФорму("Документ.КорректировкаНУ.Форма.ФормаПодбораПроводок", ПараметрыПодбора);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДанныеТабличнойЧасти(ПараметрыПодбора)

	АдресВХранилище = ПоместитьВоВременноеХранилище(Объект.ПодобранныеПроводки.Выгрузить());
	ПараметрыПодбора.Вставить("АдресВХранилище", АдресВХранилище); 
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект.ПодобранныеПроводки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

&НаСервере
Процедура ПроверкаСоответствияПроводок()

	Если Объект.ПодобранныеПроводки.Количество() < 0 Тогда
		Элементы.ГруппаСообщенияОНесоответствииПроводок.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	МассивДокументов = Объект.ПодобранныеПроводки.Выгрузить().ВыгрузитьКолонку("ДокументПодбора");
	                 
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет,
		|	Хозрасчетный.Вид
		|ПОМЕСТИТЬ ВременнаяТаблицаСчетов
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Временный
		|	И (Хозрасчетный.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
		|			ИЛИ Хозрасчетный.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйРБ.Регистратор КАК ДокументПодбора,
		|	ХозрасчетныйРБ.СчетДт КАК Счет,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
		|			ТОГДА ХозрасчетныйРБ.СуммаОборот
		|		КОГДА ВременнаяТаблицаСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
		|			ТОГДА -ХозрасчетныйРБ.СуммаОборот
		|	КОНЕЦ КАК СуммаПоСчету
		|ПОМЕСТИТЬ ТаблицаПроводок
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Авто,
		|			СчетДт В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаСчетов.Счет
		|				ИЗ
		|					ВременнаяТаблицаСчетов КАК ВременнаяТаблицаСчетов),
		|			,
		|			,
		|			,
		|			Организация = &Организация) КАК ХозрасчетныйРБ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСчетов КАК ВременнаяТаблицаСчетов
		|		ПО ХозрасчетныйРБ.СчетДт = ВременнаяТаблицаСчетов.Счет
		|ГДЕ
		|	ХозрасчетныйРБ.Регистратор В (&МассивДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйРБ.Регистратор,
		|	ХозрасчетныйРБ.СчетКт,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
		|			ТОГДА -ХозрасчетныйРБ.СуммаОборот
		|		КОГДА ВременнаяТаблицаСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
		|			ТОГДА ХозрасчетныйРБ.СуммаОборот
		|	КОНЕЦ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Авто,
		|			,
		|			,
		|			СчетКт В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаСчетов.Счет
		|				ИЗ
		|					ВременнаяТаблицаСчетов КАК ВременнаяТаблицаСчетов),
		|			,
		|			Организация = &Организация) КАК ХозрасчетныйРБ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСчетов КАК ВременнаяТаблицаСчетов
		|		ПО ХозрасчетныйРБ.СчетКт = ВременнаяТаблицаСчетов.Счет
		|ГДЕ
		|	ХозрасчетныйРБ.Регистратор В (&МассивДокументов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПроводок.ДокументПодбора,
		|	ТаблицаПроводок.Счет,
		|	СУММА(ТаблицаПроводок.СуммаПоСчету) КАК СуммаПоСчету
		|ИЗ
		|	ТаблицаПроводок КАК ТаблицаПроводок
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПроводок.Счет,
		|	ТаблицаПроводок.ДокументПодбора";
	Запрос.УстановитьПараметр("НачалоПериода",  	Объект.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 	 	Объект.КонецПериода);
	Запрос.УстановитьПараметр("Организация", 		Объект.Организация);
	Запрос.УстановитьПараметр("МассивДокументов", 	МассивДокументов);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	ПоказатьСообщениеПользователю = Ложь;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПодобранныеПроводки Цикл
		
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("ДокументПодбора", СтрокаТабличнойЧасти.ДокументПодбора);	
		ПараметрыОтбора.Вставить("Счет", 			СтрокаТабличнойЧасти.Счет);
		ПараметрыОтбора.Вставить("СуммаПоСчету", 	СтрокаТабличнойЧасти.СуммаПоСчету);
		
		МассивСтрок = ТЗ.НайтиСтроки(ПараметрыОтбора);
		                                                     
		Если МассивСтрок.Количество() = 0 Тогда
			СтрокаТабличнойЧасти.Несоответствие = Истина;
			ПоказатьСообщениеПользователю = Истина;
		КонецЕсли;
	КонецЦикла;

	Если ПоказатьСообщениеПользователю Тогда
		Элементы.ГруппаСообщенияОНесоответствииПроводок.Видимость = Истина;
	Иначе
		Элементы.ГруппаСообщенияОНесоответствииПроводок.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
