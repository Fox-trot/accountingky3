#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыПроведенияДокумента

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаХозрасчетный(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Дата КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Комментарий КАК Содержание,
	|	ТаблицаДокумента.Дебет КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,  
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	ТаблицаДокумента.Кредит КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	ТаблицаДокумента.СуммаСбора КАК Сумма
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", РезультатЗапроса.Выгрузить());
КонецПроцедуры

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НалогНаМусор.Дата,
		|	НалогНаМусор.Организация,
		|	НалогНаМусор.Комментарий,
		|	НалогНаМусор.Дебет,
		|	НалогНаМусор.Кредит,
		|	НалогНаМусор.СуммаСбора
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	Документ.НалогНаМусор КАК НалогНаМусор
		|ГДЕ
		|	НалогНаМусор.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Выполнить();
	
	СформироватьТаблицаХозрасчетный(ДокументСсылка, СтруктураДополнительныеСвойства);
КонецПроцедуры // ИнициализироватьДанныеДокумента()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает заголовок документа для печатной формы.
//
// Параметры:
//  Шапка - любая структура с полями:
//           Номер         - Строка или Число - номер документа;
//           Дата          - Дата - дата документа;
//           Представление - Строка - (необязательный) платформенное представление ссылки на документ.
//                                    Если параметр НазваниеДокумента не задан, то название документа будет вычисляться
//                                    из этого параметра.
//  НазваниеДокумента - Строка - название документа (например, "Счет на оплату").
//
// Возвращаемое значение:
//  Строка - заголовок документа.
//
Функция СформироватьЗаголовокДокумента(Шапка, Знач НазваниеДокумента = "") Экспорт
	
	ДанныеДокумента = Новый Структура("Номер,Дата,Представление");
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, Шапка);
	
	// Если название документа не передано, получим название по представлению документа.
	Если ПустаяСтрока(НазваниеДокумента) И ЗначениеЗаполнено(ДанныеДокумента.Представление) Тогда
		ПоложениеНомера = СтрНайти(ДанныеДокумента.Представление, ДанныеДокумента.Номер);
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(ДанныеДокумента.Представление, ПоложениеНомера - 1));
		КонецЕсли;
	КонецЕсли;

	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеДокумента.Номер);
	Возврат СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),
		НазваниеДокумента, НомерНаПечать, Формат(ДанныеДокумента.Дата, "ДЛФ=DD"));
	
КонецФункции

#КонецОбласти

#Область ИнтерфейсПечати

Функция ПечатьАктаСписания(МассивОбъектов, ОбъектыПечати)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НалогНаМусор.Дата,
		|	НалогНаМусор.СтавкаСбора,
		|	НалогНаМусор.Оплачено,
		|	НалогНаМусор.ЧисленностьСотрудников,
		|	НалогНаМусор.СуммаСбора
		|ИЗ
		|	Документ.НалогНаМусор КАК НалогНаМусор
		|ГДЕ
		|	НалогНаМусор.Ссылка В(&МассивОбъектов)";		
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НалогНаМусор_ПФ_MXL_НалогНаМусор";
	ТабличныйДокумент.Очистить();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.НалогНаМусор.ПФ_MXL_НалогНаМусор");
	
	Пока Выборка.Следующий() Цикл
		
		//Подготовка данных для извлечения из них необходимого
		Организация				= МассивОбъектов[0].Организация;
		КонтактныеДанные 		= ПолучитьКонтактнуюИнформацию(Организация);
		Руководители 			= БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизаций(Организация, КонецДня(Выборка.Дата));
		
		//Данные для заполнения
		ГНС 					= МассивОбъектов[0].Организация.ГНС;
		МестоРегистрации 		= МассивОбъектов[0].Организация.ГНС;
		НаименованиеОрганизации = МассивОбъектов[0].Организация.НаименованиеПолное;
		ИНН 					= МассивОбъектов[0].Организация.ИНН;
		Адрес	        		= КонтактныеДанные.Индекс + "," + КонтактныеДанные.АдрОбластьГород + ", " + КонтактныеДанные.АдресОрганизации;
		Руководитель 			= Руководители.Руководитель;
		Бухгалтер    			= Руководители.ГлавныйБухгалтер;
		ЗаголовокДаты			= "за " + Формат(Выборка.Дата, "ДФ = 'гггг'")+" г.";
		ОстатокСбора 			= Выборка.СуммаСбора - Выборка.Оплачено;
		
		ДанныеПечати = Новый Структура;
		ДанныеПечати.Вставить("ГНС", ГНС);
		ДанныеПечати.Вставить("МестоРегистрации", МестоРегистрации);
		ДанныеПечати.Вставить("НаименованиеОрганизации", НаименованиеОрганизации);
 		ДанныеПечати.Вставить("ИНН", ИНН);
		ДанныеПечати.Вставить("Адрес", Адрес);
		ДанныеПечати.Вставить("Руководитель", Руководитель);
		ДанныеПечати.Вставить("Бухгалтер", Бухгалтер);
		ДанныеПечати.Вставить("ЗаголовокДаты", ЗаголовокДаты);
		ДанныеПечати.Вставить("ОстатокСбора", ОстатокСбора);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Страница");
		
		ОбластьМакета.Параметры.Заполнить(Выборка);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
			
КонецФункции

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_НалогНаМусор") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
		"ПФ_MXL_НалогНаМусор", 
		"Налог на мусор", 
		ПечатьАктаСписания(МассивОбъектов, ОбъектыПечати),
		,
		"Документ.НалогНаМусор.ПФ_MXL_НалогНаМусор");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПФ_MXL_НалогНаМусор";
	КомандаПечати.Представление = НСтр("ru = 'Налог на мусор'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 1;
	
КонецПроцедуры

// Функция -ПолучитьКонтактнуюИнформацию
//
// Параметры:
//  Организация  - Спр.Ссылка - Спр.Органинизации 
// Возвращаемое значение:
//  Структура   - структура данных контактной информации
//
Функция ПолучитьКонтактнуюИнформацию(Организация)
	
	СтруктураКонтактнойИнформации = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураКонтактнойИнформацииПоТипу(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ТаблицаКонтактнойИнформации = УправлениеКонтактнойИнформацией.ТаблицаКонтактнойИнформацииОбъекта(Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	Если ТаблицаКонтактнойИнформации.Количество() > 0 Тогда 		
		СтруктураКонтактнойИнформации = ТаблицаКонтактнойИнформации[0].СтруктураПолей;
	КонецЕсли;
	Если СтруктураКонтактнойИнформации.Количество() > 3 Тогда 
		Индекс		    = СтруктураКонтактнойИнформации.Индекс; 
		ГородНасПункт   = ?(СтруктураКонтактнойИнформации.Город  = "",СтруктураКонтактнойИнформации.НаселенныйПункт,СтруктураКонтактнойИнформации.Город);
		АдрОбластьГород = ?(СтруктураКонтактнойИнформации.Регион = "","",СтруктураКонтактнойИнформации.Регион + ",")
		                + ?(СтруктураКонтактнойИнформации.Район  = "","", " " + СтруктураКонтактнойИнформации.Район + ",") 
						+ ?(ГородНасПункт = "",""," " + ГородНасПункт); 
		АдресОрганизации = ?(СтруктураКонтактнойИнформации.Улица    = "","",СтруктураКонтактнойИнформации.Улица + ",")
						 + ?(СтруктураКонтактнойИнформации.Дом      = "",""," " + СтруктураКонтактнойИнформации.Дом + ",")
						 + ?(СтруктураКонтактнойИнформации.Корпус   = "",""," " + СтруктураКонтактнойИнформации.Корпус + ",")
						 + ?(СтруктураКонтактнойИнформации.Квартира = "",""," " + СтруктураКонтактнойИнформации.Квартира);
		
	Иначе
		Индекс			 = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации); 
		АдрОбластьГород  = ""; 
		АдресОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);		
	КонецЕсли;	
	
	Телефон		= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	
	Структура = Новый Структура("Индекс,АдрОбластьГород,АдресОрганизации,Телефон", Индекс,АдрОбластьГород,АдресОрганизации,Телефон);
	
	Возврат Структура;
	
КонецФункции // ПолучитьАдресОрганизации()

#КонецОбласти

#КонецЕсли