#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = КонецМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
		
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ДополнительныеСвойства.ДляПроведения.Вставить("ДанныеУчетнойПолитикиПоПерсоналу", БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиПоПерсоналу(Дата, Организация));

	// Инициализация данных документа.
	Документы.ЗакрытиеМесяцаЗП.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, ЭтотОбъект);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьУдержания(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьПодоходныйНалог(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСоциальныйФонд(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьНалогиПоЗаработнойПлате(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьОтчетПоПодоходному(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьОтчетЕжемесячныйСоцфонд(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьОтчетКвартальныйСоцфонд(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	// Предварительный контроль
	ВыполнитьПредварительныйКонтроль(Отказ);	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	// Проверка повторного закрытия месяца
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗакрытиеМесяцаЗП.Ссылка
		|ИЗ
		|	Документ.ЗакрытиеМесяцаЗП КАК ЗакрытиеМесяцаЗП
		|ГДЕ
		|	ЗакрытиеМесяцаЗП.Организация = &Организация
		|	И ЗакрытиеМесяцаЗП.Дата = &Дата
		|	И ЗакрытиеМесяцаЗП.Проведен
		|	И ЗакрытиеМесяцаЗП.Ссылка <> &Ссылка";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Документ закрытия месяца по заработной плате за выбранный период уже существует: %1.'"), 
			ВыборкаДетальныеЗаписи.Ссылка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиПоПерсоналу(Дата, Организация);
	
	// Проверка заполнения данных учетной политики.
	Если НЕ ЗначениеЗаполнено(ДанныеУчетнойПолитики.СчетУчетаРасходовПоДоплатеПН) Тогда 
		ТекстСообщения = НСтр("ru = 'В учетной политике по персоналу не заполнен счет учета расходов по доплате ПН.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ДанныеУчетнойПолитики.СчетУчетаРасходовПоКорректировкеСФ) Тогда 
		ТекстСообщения = НСтр("ru = 'В учетной политике по персоналу не заполнен счет учета расходов по корректировке СФ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;	

	Если НЕ ЗначениеЗаполнено(ДанныеУчетнойПолитики.СчетУчетаРасчетовПФР) Тогда 
		ТекстСообщения = НСтр("ru = 'В учетной политике по персоналу не заполнен счет учета расчетов ПФР.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ДанныеУчетнойПолитики.СчетУчетаРасчетовГНПФР) Тогда 
		ТекстСообщения = НСтр("ru = 'В учетной политике по персоналу не заполнен счет учета расчетов ГНПФР.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;	

	Если НЕ ЗначениеЗаполнено(ДанныеУчетнойПолитики.СчетУчетаРасчетовМСФ) Тогда 
		ТекстСообщения = НСтр("ru = 'В учетной политике по персоналу не заполнен счет учета расчетов МСФ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;	

	Если НЕ ЗначениеЗаполнено(ДанныеУчетнойПолитики.СчетУчетаРасчетовПФФ) Тогда 
		ТекстСообщения = НСтр("ru = 'В учетной политике по персоналу не заполнен счет учета расчетов ПФФ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;	

	Если НЕ ЗначениеЗаполнено(ДанныеУчетнойПолитики.СчетУчетаРасчетовФОТФ) Тогда 
		ТекстСообщения = НСтр("ru = 'В учетной политике по персоналу не заполнен счет учета расчетов ФОТФ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;	

	Если НЕ ЗначениеЗаполнено(ДанныеУчетнойПолитики.СчетУчетаРасчетовПрофВзнос) Тогда 
		ТекстСообщения = НСтр("ru = 'В учетной политике по персоналу не заполнен счет учета расчетов ПрофВзнос.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.ФизЛицо,
		|	Начисления.ВидРасчета,
		|	Начисления.СчетУчетаЗатрат,
		|	Начисления.СтатьяЗатрат
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Начисления.Организация = &Организация
		|	И НЕ Начисления.Результат = 0
		|	И (Начисления.СчетУчетаЗатрат = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|			ИЛИ Начисления.СтатьяЗатрат = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""Виды удержаний"",
		|	ВидыУдержаний.Ссылка,
		|	ВидыУдержаний.СчетУчета,
		|	""Без проверки""
		|ИЗ
		|	ПланВидовРасчета.ВидыУдержаний КАК ВидыУдержаний";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СчетУчетаЗатрат) Тогда 	
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнен счет учета (затраты) Сотрудник: %1 вид расчета: %2.'"), 
				ВыборкаДетальныеЗаписи.ФизЛицо, ВыборкаДетальныеЗаписи.ВидРасчета);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

// Процедура выполняет расчет налогов и удержаний
//
Процедура ВыполнитьЗакрытиеМесяца(ЕстьОшибки) Экспорт 
	
	// 1. Расчет налогов по заработной плате
	// 2. Расчет удержаний с учетом рассчитанных налогов
	// 3. Заполнение соответствующих табличных частей- итого удержано	
	// 4. Распределение сумм налогов с организации по счетам учета
	
	РассчитатьНалогиПоЗарплате();	
	РассчитатьПлановыеУдержания();
	ДозаполнитьНалогиПоЗарплате();
	РаспределитьНалогиСОрганизации();
	ДозаполнитьВыплату();
	
КонецПроцедуры // ЗаполнитьТабличнуюЧасть()

// Процедура - Рассчитать налоги по зарплате
//
Процедура РассчитатьНалогиПоЗарплате()
	
	// 1. Получение начислений за месяц, определение расчетных баз
	// 2. Получение списка сотрудников, принятых или уволенных в течении месяца- определение больше 15 дней
	// -если принят и уволен в этом месяце- пока не отработано
	// 3. Получение статусов сотрудников и ставок налогов по этим статусам
	// 4. Расчет налогов СФ
	// 5. Расчет налогов ПН
	// 6. Расчет налогов Проф.взнос
	// 7. Расчет налогов с организации
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	Начисления.ФизЛицо КАК ФизЛицо,
		|	Начисления.ФизЛицо.Наименование,
		|	СУММА(Начисления.ОтработаноДней) КАК ОтработаноДней,
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.ВидРасчета.ДополнительныйДоход
		|				ТОГДА 0
		|			ИНАЧЕ Начисления.Результат
		|		КОНЕЦ) КАК СуммаНачислено,
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.ВидРасчета.ДополнительныйДоход
		|				ТОГДА Начисления.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаДопДоход,
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.ВидРасчета.ОблагаетсяСФ
		|				ТОГДА Начисления.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОДСФ,
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.ВидРасчета.ОблагаетсяПН
		|				ТОГДА Начисления.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОДПН,
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.ВидРасчета.ОблагаетсяПрофВзнос
		|				ТОГДА Начисления.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОДПрофВзнос
		|ПОМЕСТИТЬ ВременнаяТаблицаНачисленияЗаМесяц
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Начисления.Организация = &Организация
		|	И НЕ Начисления.Результат = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.ФизЛицо,
		|	Начисления.ФизЛицо.Наименование
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	2 КАК Порядок,
		|	Сотрудники.ФизЛицо КАК ФизЛицо,
		|	ВЫБОР
		|		КОГДА Сотрудники.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)
		|				И ДЕНЬ(Сотрудники.Период) <= 15
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ВЫБОР
		|				КОГДА Сотрудники.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|						И ДЕНЬ(Сотрудники.Период) >= 15
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|	КОНЕЦ КАК Больше15дней
		|ПОМЕСТИТЬ ВременнаяТаблицаСотрудникиОтработаноДней
		|ИЗ
		|	РегистрСведений.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Сотрудники.Организация = &Организация
		|	И (Сотрудники.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)
		|			ИЛИ Сотрудники.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	3 КАК Порядок,
		|	СтатусыСотрудниковСрезПоследних.Физлицо КАК ФизЛицо,
		|	СтатусыСотрудниковСрезПоследних.Статус КАК Статус,
		|	ЕСТЬNULL(ВременнаяТаблицаСотрудникиОтработаноДней.Больше15дней, ИСТИНА) КАК ПрименятьВычет,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВременнаяТаблицаСотрудникиОтработаноДней.Больше15дней, ИСТИНА)
		|			ТОГДА ЕСТЬNULL(СтавкиНалоговЗаработнойПлатыСрезПоследних.Вычеты,0) + ЕСТЬNULL(СтатусыСотрудниковСрезПоследних.ДопВычет,0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Вычеты,
		|	СтавкиНалоговЗаработнойПлатыСрезПоследних.СтавкаПФР,
		|	СтавкиНалоговЗаработнойПлатыСрезПоследних.СтавкаГНПФР,
		|	СтавкиНалоговЗаработнойПлатыСрезПоследних.СтавкаПН,
		|	СтавкиНалоговЗаработнойПлатыСрезПоследних.СтавкаПФФ,
		|	СтавкиНалоговЗаработнойПлатыСрезПоследних.СтавкаМСФ,
		|	СтавкиНалоговЗаработнойПлатыСрезПоследних.СтавкаФОТФ,
		|	СтавкиНалоговЗаработнойПлатыСрезПоследних.НеВычитатьПФ,
		|	СтавкиНалоговЗаработнойПлатыСрезПоследних.СтавкаМСР
		|ПОМЕСТИТЬ ВременнаяТаблицаСтатусы
		|ИЗ
		|	РегистрСведений.СтатусыСотрудников.СрезПоследних(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И Физлицо В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВременнаяТаблицаНачисленияЗаМесяц.ФизЛицо
		|					ИЗ
		|						ВременнаяТаблицаНачисленияЗаМесяц КАК ВременнаяТаблицаНачисленияЗаМесяц)) КАК СтатусыСотрудниковСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНалоговЗаработнойПлаты.СрезПоследних(&КонецПериода, ) КАК СтавкиНалоговЗаработнойПлатыСрезПоследних
		|		ПО СтатусыСотрудниковСрезПоследних.Статус = СтавкиНалоговЗаработнойПлатыСрезПоследних.Статус
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСотрудникиОтработаноДней КАК ВременнаяТаблицаСотрудникиОтработаноДней
		|		ПО СтатусыСотрудниковСрезПоследних.Физлицо = ВременнаяТаблицаСотрудникиОтработаноДней.ФизЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	4 КАК Порядок,
		|	ВременнаяТаблицаНачисленияЗаМесяц.ФизЛицо КАК ФизЛицо,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(ВременнаяТаблицаСтатусы.СтавкаПФР, 0) = 0
		|				ТОГДА 0
		|			ИНАЧЕ ВременнаяТаблицаНачисленияЗаМесяц.ОДСФ * ВременнаяТаблицаСтатусы.СтавкаПФР / 100
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ПФР,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(ВременнаяТаблицаСтатусы.СтавкаГНПФР, 0) = 0
		|				ТОГДА 0
		|			ИНАЧЕ ВременнаяТаблицаНачисленияЗаМесяц.ОДСФ * ВременнаяТаблицаСтатусы.СтавкаГНПФР / 100
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ГНПФР,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(ВременнаяТаблицаСтатусы.СтавкаМСР, 0) = 0
		|				ТОГДА 0
		|			ИНАЧЕ ВременнаяТаблицаНачисленияЗаМесяц.ОДСФ * ВременнаяТаблицаСтатусы.СтавкаМСР / 100
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК МСР,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(ВременнаяТаблицаСтатусы.СтавкаПФФ, 0) = 0
		|				ТОГДА 0
		|			ИНАЧЕ ВременнаяТаблицаНачисленияЗаМесяц.ОДСФ * ВременнаяТаблицаСтатусы.СтавкаПФФ / 100
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ПФФ,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(ВременнаяТаблицаСтатусы.СтавкаМСФ, 0) = 0
		|				ТОГДА 0
		|			ИНАЧЕ ВременнаяТаблицаНачисленияЗаМесяц.ОДСФ * ВременнаяТаблицаСтатусы.СтавкаМСФ / 100
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК МСФ,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(ВременнаяТаблицаСтатусы.СтавкаФОТФ, 0) = 0
		|				ТОГДА 0
		|			ИНАЧЕ ВременнаяТаблицаНачисленияЗаМесяц.ОДСФ * ВременнаяТаблицаСтатусы.СтавкаФОТФ / 100
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ФОТФ
		|ПОМЕСТИТЬ ВременнаяТаблицаНалогиСФ
		|ИЗ
		|	ВременнаяТаблицаНачисленияЗаМесяц КАК ВременнаяТаблицаНачисленияЗаМесяц
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтатусы КАК ВременнаяТаблицаСтатусы
		|		ПО ВременнаяТаблицаНачисленияЗаМесяц.ФизЛицо = ВременнаяТаблицаСтатусы.ФизЛицо
		|ГДЕ
		|	ВременнаяТаблицаНачисленияЗаМесяц.ОДСФ > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	5 КАК Порядок,
		|	ВременнаяТаблицаНачисленияЗаМесяц.ФизЛицо КАК ФизЛицо,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(ВременнаяТаблицаСтатусы.СтавкаПН, 0) = 0
		|				ТОГДА 0
		|			ИНАЧЕ (ВременнаяТаблицаНачисленияЗаМесяц.ОДПН - ЕСТЬNULL(ВременнаяТаблицаНалогиСФ.ПФР, 0) - ЕСТЬNULL(ВременнаяТаблицаНалогиСФ.ГНПФР, 0) - ВременнаяТаблицаСтатусы.Вычеты * 100) * ВременнаяТаблицаСтатусы.СтавкаПН / 100
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ПН,
		|	ВременнаяТаблицаСтатусы.Вычеты КАК Вычеты,
		|	&МРД КАК МРД,
		|	&ДоплатаПНЗаСчетФирмы КАК ДоплатаПНЗаСчетФирмы
		|ПОМЕСТИТЬ ВременнаяТаблицаНалогиПН
		|ИЗ
		|	ВременнаяТаблицаНачисленияЗаМесяц КАК ВременнаяТаблицаНачисленияЗаМесяц
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтатусы КАК ВременнаяТаблицаСтатусы
		|		ПО ВременнаяТаблицаНачисленияЗаМесяц.ФизЛицо = ВременнаяТаблицаСтатусы.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНалогиСФ КАК ВременнаяТаблицаНалогиСФ
		|		ПО ВременнаяТаблицаНачисленияЗаМесяц.ФизЛицо = ВременнаяТаблицаНалогиСФ.ФизЛицо
		|ГДЕ
		|	ВременнаяТаблицаНачисленияЗаМесяц.ОДПН > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	6 КАК Порядок,
		|	ВременнаяТаблицаНачисленияЗаМесяц.ФизЛицо КАК ФизЛицо,
		|	ВЫРАЗИТЬ((ВременнаяТаблицаНачисленияЗаМесяц.ОДПрофВзнос - ВЫБОР
		|			КОГДА &ПрофВзносЗаВычетомПФРиГНПФР
		|				ТОГДА ЕСТЬNULL(ВременнаяТаблицаНалогиСФ.ПФР, 0) + ЕСТЬNULL(ВременнаяТаблицаНалогиСФ.ГНПФР, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ - ВЫБОР
		|			КОГДА &ПрофВзносЗаВычетомПН
		|				ТОГДА ЕСТЬNULL(ВременнаяТаблицаНалогиПН.ПН, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) * &СтавкаКорпОтчислений / 100 КАК ЧИСЛО(15, 2)) КАК ПрофВзнос
		|ПОМЕСТИТЬ ВременнаяТаблицаНалогиПрофВзнос
		|ИЗ
		|	ВременнаяТаблицаНачисленияЗаМесяц КАК ВременнаяТаблицаНачисленияЗаМесяц
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтатусы КАК ВременнаяТаблицаСтатусы
		|		ПО ВременнаяТаблицаНачисленияЗаМесяц.ФизЛицо = ВременнаяТаблицаСтатусы.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНалогиСФ КАК ВременнаяТаблицаНалогиСФ
		|		ПО ВременнаяТаблицаНачисленияЗаМесяц.ФизЛицо = ВременнаяТаблицаНалогиСФ.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНалогиПН КАК ВременнаяТаблицаНалогиПН
		|		ПО ВременнаяТаблицаНачисленияЗаМесяц.ФизЛицо = ВременнаяТаблицаНалогиПН.ФизЛицо
		|ГДЕ
		|	ВременнаяТаблицаНачисленияЗаМесяц.ОДПрофВзнос > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаНачисленияЗаМесяц.ФизЛицо,
		|	ВременнаяТаблицаНачисленияЗаМесяц.ФизЛицоНаименование,
		|	ВременнаяТаблицаСтатусы.Статус,
		|	ВременнаяТаблицаСтатусы.ПрименятьВычет,
		|	ВременнаяТаблицаНачисленияЗаМесяц.ОтработаноДней,
		|	ВременнаяТаблицаНачисленияЗаМесяц.СуммаНачислено,
		|	ВременнаяТаблицаНачисленияЗаМесяц.СуммаДопДоход,
		|	ВременнаяТаблицаНачисленияЗаМесяц.ОДСФ,
		|	ВременнаяТаблицаНачисленияЗаМесяц.ОДПН,
		|	ВременнаяТаблицаНачисленияЗаМесяц.ОДПрофВзнос,
		|	ВременнаяТаблицаНалогиСФ.ПФР,
		|	ВременнаяТаблицаНалогиСФ.ГНПФР,
		|	ВременнаяТаблицаНалогиСФ.МСР,
		|	ВременнаяТаблицаНалогиСФ.ПФФ,
		|	ВременнаяТаблицаНалогиСФ.МСФ,
		|	ВременнаяТаблицаНалогиСФ.ФОТФ,
		|	ВременнаяТаблицаНалогиПН.МРД,
		|	ВременнаяТаблицаНалогиПН.ПН,
		|	ВременнаяТаблицаНалогиПН.Вычеты,
		|	ВременнаяТаблицаНалогиПрофВзнос.ПрофВзнос
		|ИЗ
		|	ВременнаяТаблицаНачисленияЗаМесяц КАК ВременнаяТаблицаНачисленияЗаМесяц
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНалогиСФ КАК ВременнаяТаблицаНалогиСФ
		|		ПО ВременнаяТаблицаНачисленияЗаМесяц.ФизЛицо = ВременнаяТаблицаНалогиСФ.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНалогиПН КАК ВременнаяТаблицаНалогиПН
		|		ПО ВременнаяТаблицаНачисленияЗаМесяц.ФизЛицо = ВременнаяТаблицаНалогиПН.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНалогиПрофВзнос КАК ВременнаяТаблицаНалогиПрофВзнос
		|		ПО ВременнаяТаблицаНачисленияЗаМесяц.ФизЛицо = ВременнаяТаблицаНалогиПрофВзнос.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтатусы КАК ВременнаяТаблицаСтатусы
		|		ПО ВременнаяТаблицаНачисленияЗаМесяц.ФизЛицо = ВременнаяТаблицаСтатусы.ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВременнаяТаблицаНачисленияЗаМесяц.ФизЛицоНаименование";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	// По данным учетной политики
	ДанныеУчетнойПолитикиПоПерсоналу = БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиПоПерсоналу(Дата, Организация);
	// ПН
	Запрос.УстановитьПараметр("МРД", ДанныеУчетнойПолитикиПоПерсоналу.МинимальныйРасчетныйДоход);	
	Запрос.УстановитьПараметр("ДоплатаПНЗаСчетФирмы", ДанныеУчетнойПолитикиПоПерсоналу.ДоплатаПНЗаСчетФирмы);	
	// Корп.отчисления
	Запрос.УстановитьПараметр("СтавкаКорпОтчислений", ДанныеУчетнойПолитикиПоПерсоналу.СтавкаКорпОтчислений);
	Запрос.УстановитьПараметр("ПрофВзносЗаВычетомПН", ДанныеУчетнойПолитикиПоПерсоналу.ПрофВзносЗаВычетомПН);
	Запрос.УстановитьПараметр("ПрофВзносЗаВычетомПФРиГНПФР", ДанныеУчетнойПолитикиПоПерсоналу.ПрофВзносЗаВычетомПФРиГНПФР);
	
	НалогиПоЗарплате.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры // РассчитатьНалогиПоЗарплате()

// Процедура - Рассчитать удержания
//
Процедура РассчитатьПлановыеУдержания()
	
	// 1. Получение рассчитанных налогов для рассчета размера вычета
	// 2. Получение актуальных плановых удержаний
	// 3. Расчет удержаний
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВременнаяТаблицаНалоги.ФизЛицо КАК ФизЛицо,
		|	ВременнаяТаблицаНалоги.ПФР КАК ПФР,
		|	ВременнаяТаблицаНалоги.ГНПФР КАК ГНПФР,
		|	ВременнаяТаблицаНалоги.ПН КАК ПН,
		|	ВременнаяТаблицаНалоги.ПрофВзнос КАК ПрофВзнос
		|ПОМЕСТИТЬ ВременнаяТаблицаНалоги
		|ИЗ
		|	&ВременнаяТаблицаНалоги КАК ВременнаяТаблицаНалоги
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеУдержанияНачало.ФизЛицо,
		|	ПлановыеУдержанияНачало.ВидРасчета,
		|	ПлановыеУдержанияНачало.Размер,
		|	ВЫБОР
		|		КОГДА ПлановыеУдержанияНачало.ВидРасчета.РасчетЗаМинусомСФ
		|			ТОГДА ЕСТЬNULL(ВременнаяТаблицаНалоги.ПФР, 0) + ЕСТЬNULL(ВременнаяТаблицаНалоги.ГНПФР, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПлановыеУдержанияНачало.ВидРасчета.РасчетЗаМинусомПН
		|			ТОГДА ЕСТЬNULL(ВременнаяТаблицаНалоги.ПН, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ПлановыеУдержанияНачало.ВидРасчета.РасчетЗаМинусомПрофВзнос
		|			ТОГДА ЕСТЬNULL(ВременнаяТаблицаНалоги.ПрофВзнос, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РазмерВычета
		|ИЗ
		|	РегистрСведений.ПлановыеУдержанияНачало.СрезПоследних(&Период, Организация = &Организация) КАК ПлановыеУдержанияНачало
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержанияОкончание.СрезПоследних(&Период, Организация = &Организация) КАК ПлановыеУдержанияОкончание
		|		ПО ПлановыеУдержанияНачало.Организация = ПлановыеУдержанияОкончание.Организация
		|			И ПлановыеУдержанияНачало.ФизЛицо = ПлановыеУдержанияОкончание.ФизЛицо
		|			И ПлановыеУдержанияНачало.ВидРасчета = ПлановыеУдержанияОкончание.ВидРасчета
		|			И ПлановыеУдержанияНачало.Регистратор = ПлановыеУдержанияОкончание.ДокументСсылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНалоги КАК ВременнаяТаблицаНалоги
		|		ПО ПлановыеУдержанияНачало.ФизЛицо = ВременнаяТаблицаНалоги.ФизЛицо
		|ГДЕ
		|	ПлановыеУдержанияОкончание.Организация ЕСТЬ NULL";
	Запрос.УстановитьПараметр("ВременнаяТаблицаНалоги", НалогиПоЗарплате.Выгрузить());
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Нет плановых удержаний для расчета
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;	
	
	Удержания.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// Подготовка таблицы для движения в регистр
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаУдержания.ФизЛицо,
		|	ВременнаяТаблицаУдержания.ВидРасчета,
		|	ВременнаяТаблицаУдержания.Размер,
		|	ВременнаяТаблицаУдержания.РазмерВычета,
		|	ВременнаяТаблицаУдержания.Результат
		|ПОМЕСТИТЬ ВременнаяТаблицаУдержания
		|ИЗ
		|	&ВременнаяТаблицаУдержания КАК ВременнаяТаблицаУдержания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) КАК ПериодРегистрации,
		|	НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) КАК БазовыйПериодНачало,
		|	КОНЕЦПЕРИОДА(&Дата, ДЕНЬ) КАК БазовыйПериодКонец,
		|	ТаблицаДокумента.ВидРасчета,
		|	&Организация КАК Организация,
		|	ТаблицаДокумента.ФизЛицо,
		|	ТаблицаДокумента.Размер,
		|	ТаблицаДокумента.РазмерВычета,
		|	ТаблицаДокумента.Результат
		|ИЗ
		|	ВременнаяТаблицаУдержания КАК ТаблицаДокумента";
	Запрос.УстановитьПараметр("ВременнаяТаблицаУдержания", Удержания.Выгрузить());	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаУдержания", РезультатЗапроса.Выгрузить());
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьУдержания(ДополнительныеСвойства, Движения, Ложь);

	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	Ошибки = Неопределено;
	ПроведениеРасчетовПоЗарплатеСервер.РассчитатьЗаписиРегистраРасчета("Удержания", Движения.Удержания, Удержания, Ошибки);
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
КонецПроцедуры // РассчитатьПлановыеУдержания()

// Процедура - Дозаполнить налоги по зарплате
//
Процедура ДозаполнитьНалогиПоЗарплате()
	
	// 1. Получение рассчитанных удержаний
	// 2. Получение разовых удержаний
	// 3. Заполнение суммы удержано
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВременнаяТаблицаУдержания.ФизЛицо,
		|	ВременнаяТаблицаУдержания.Результат
		|ПОМЕСТИТЬ ВременнаяТаблицаУдержания
		|ИЗ
		|	&ВременнаяТаблицаУдержания КАК ВременнаяТаблицаУдержания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Удержания.ФизЛицо,
		|	Удержания.Результат
		|ПОМЕСТИТЬ ВременнаяТаблицаУдержанияЗаМесяц
		|ИЗ
		|	РегистрРасчета.Удержания КАК Удержания
		|ГДЕ
		|	Удержания.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Удержания.Организация = &Организация
		|	И НЕ Удержания.Результат = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ФизЛицо,
		|	СУММА(ВложенныйЗапрос.Результат) КАК Результат
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВременнаяТаблицаУдержания.ФизЛицо КАК ФизЛицо,
		|		ВременнаяТаблицаУдержания.Результат КАК Результат
		|	ИЗ
		|		ВременнаяТаблицаУдержания КАК ВременнаяТаблицаУдержания
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВременнаяТаблицаУдержанияЗаМесяц.ФизЛицо,
		|		ВременнаяТаблицаУдержанияЗаМесяц.Результат
		|	ИЗ
		|		ВременнаяТаблицаУдержанияЗаМесяц КАК ВременнаяТаблицаУдержанияЗаМесяц) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ФизЛицо";
	Запрос.УстановитьПараметр("ВременнаяТаблицаУдержания", Удержания.Выгрузить());		
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Для Каждого СтрокаТабличнойЧасти Из НалогиПоЗарплате Цикл 
		СуммаУдержано = 0;
		// Удержания
		Если ВыборкаДетальныеЗаписи.НайтиСледующий(Новый Структура("ФизЛицо", СтрокаТабличнойЧасти.ФизЛицо)) Тогда 
			СуммаУдержано = СуммаУдержано + ВыборкаДетальныеЗаписи.Результат;
			ВыборкаДетальныеЗаписи.Сбросить();
		КонецЕсли;	
		
		// Налоги
		СуммаУдержано = СуммаУдержано 
			+ СтрокаТабличнойЧасти.ПФР 
			+ СтрокаТабличнойЧасти.ГНПФР 
			+ СтрокаТабличнойЧасти.ПН 
			+ СтрокаТабличнойЧасти.ПрофВзнос;
			
		СтрокаТабличнойЧасти.СуммаУдержано = СуммаУдержано;	
	КонецЦикла;	
	
КонецПроцедуры // ДозаполнитьНалогиПоЗарплате()

// Процедура - Дозаполнить выплату
//
Процедура ДозаполнитьВыплату()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыплаченнаяЗарплатаОбороты.Физлицо,
		|	ВыплаченнаяЗарплатаОбороты.СуммаОборот КАК Выплачено
		|ИЗ
		|	РегистрНакопления.ВыплаченнаяЗарплата.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК ВыплаченнаяЗарплатаОбороты";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		НайденнаяСтрокаТабличнойЧасти = НалогиПоЗарплате.Найти(ВыборкаДетальныеЗаписи.Физлицо, "Физлицо");
		
		Если НайденнаяСтрокаТабличнойЧасти = Неопределено Тогда 
			Продолжить;
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(НайденнаяСтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи, "Выплачено");
	КонецЦикла;	
	
КонецПроцедуры // ДозаполнитьВыплату()

// Процедура - Распределить налоги с организации
//
Процедура РаспределитьНалогиСОрганизации()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.СчетУчетаЗатрат,
		|	Начисления.СтатьяЗатрат,
		|	СУММА(Начисления.Результат) КАК Результат
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Начисления.Организация = &Организация
		|	И НЕ Начисления.Результат = 0
		|	И Начисления.ВидРасчета.ОблагаетсяСФ
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.СчетУчетаЗатрат,
		|	Начисления.СтатьяЗатрат";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;	
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивКоэффициентов = Новый Массив;	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		СтрокаТабличнойЧасти = НалогиСОрганизации.Добавить();	
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи);
		МассивКоэффициентов.Добавить(ВыборкаДетальныеЗаписи.Результат);
	КонецЦикла;	

	ПФФ = НалогиПоЗарплате.Итог("ПФФ");
	МСФ = НалогиПоЗарплате.Итог("МСФ");
	ФОТФ = НалогиПоЗарплате.Итог("ФОТФ");
	
	МассивСуммПФФ = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(ПФФ, МассивКоэффициентов);
	МассивСуммМСФ = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(МСФ, МассивКоэффициентов);
	МассивСуммФОТФ = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(ФОТФ, МассивКоэффициентов);
	
	ИндексВМассиве = 0;
	Для Каждого СтрокаТабличнойЧасти Из НалогиСОрганизации Цикл 
		СтрокаТабличнойЧасти.ПФФ = МассивСуммПФФ[ИндексВМассиве];
		СтрокаТабличнойЧасти.МСФ = МассивСуммМСФ[ИндексВМассиве];
		СтрокаТабличнойЧасти.ФОТФ = МассивСуммФОТФ[ИндексВМассиве];
		
		ИндексВМассиве = ИндексВМассиве + 1;
	КонецЦикла;	
КонецПроцедуры // РаспределитьНалогиСОрганизации()

#КонецОбласти

#КонецЕсли
