#Область ОбработчикиСлужебные

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервереБезКонтекста
Функция ПроверкаАктуальностиКурсаВалютНаСервере()
	Возврат РаботаСКурсамиВалют.КурсыАктуальны(); 
КонецФункции

&НаКлиенте
Процедура ОповеститьЧтоКурсывалютНеАктуальны()
	ВалютаКон = ПолучитьВалютуБанковскогоСчета(Объект.БанковскийСчет);
	Если НЕ Объект.Проведен И НЕ БылоОповещениеКурсыВалютУстарели И 
		(ВалютаКон <> ВалютаРегламентированногоУчета ИЛИ ВалютаКон <> ВалютаРегламентированногоУчета) 
		И ПроверкаАктуальностиКурсаВалютНаСервере() Тогда
		РаботаСКурсамиВалютКлиент.ОповеститьКурсыУстарели();
		БылоОповещениеКурсыВалютУстарели = Истина;
	КонецЕсли;
КонецПроцедуры // ОповеститьЧтоКурсывалютНеАктуальны()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
Процедура УстановитьКурсВалютыДокумента()
	ВалютаДокумента = Объект.БанковскийСчет.ВалютаДенежныхСредств;
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		Возврат;	
	КонецЕсли;
	КурсСтруктура		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	Объект.Курс			= КурсСтруктура.Курс;
	Если НЕ ЗначениеЗаполнено(Объект.Курс) Тогда
		Объект.Курс = 1;	
	КонецЕсли;
	КурсВзаиморасчетов	= Окр(КурсСтруктура.Курс / Объект.КурсДоговора, 4);	
		
КонецПроцедуры // УстановитьКурсВалютыДокумента()

&НаСервере
Процедура УстановитьКурсДоговора()

	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДоговора) Тогда
		Возврат;	
	КонецЕсли;

	КурсСтруктура		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДоговора, ДатаДокумента);
	Объект.КурсДоговора	= КурсСтруктура.Курс;
	Если НЕ ЗначениеЗаполнено(Объект.КурсДоговора) Тогда
		Объект.КурсДоговора = 1;	
	КонецЕсли;
	
КонецПроцедуры // 

&НаКлиенте
Процедура ПолучитьКурсВзаиморасчетов()
	СложныйКурс = 1;
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		КурсВзаиморасчетов 	= 1;
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
		Если Объект.Курс >= Объект.КурсДоговора Тогда
			СложныйКурс	= Окр(Объект.Курс / Объект.КурсДоговора, 4);
			ПрямойКурс  = Ложь;	
		Иначе
			СложныйКурс	= Окр(Объект.КурсДоговора / Объект.Курс, 4);
			ПрямойКурс  = Истина;
		КонецЕсли;
		КурсВзаиморасчетов 	= СложныйКурс;
	Иначе
		КурсВзаиморасчетов 	= 1;
	КонецЕсли;
			
КонецПроцедуры // 

&НаКлиенте
Процедура УстановитьКурсВзаиморасчетовТабличнойЧастиРасшифровкаПлатежа()

	Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = КурсВзаиморасчетов;
	КонецЦикла;	

КонецПроцедуры // ()

// Установка знанчений счетов учета с контрагентами
//
&НаКлиенте
Процедура УстановитьСчетаУчетаРасчетовСКонтрагентом(СтрокаТабличнойЧасти = Неопределено)
	
	ДоговорКонтрагента 	= СтрокаТабличнойЧасти.ДоговорКонтрагента;
	СчетаУчета			= БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента); 		
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ВозвратОтПоставщика") тогда			
		СтрокаТабличнойЧасти.СчетУчета    = СчетаУчета.СчетРасчетовПоставщика;									
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ОплатаОтПокупателя") тогда
		
		СтрокаТабличнойЧасти.СчетУчета    = СчетаУчета.СчетРасчетовПокупателя;		
								
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.РасчетыПоЗаймам") тогда			
		СтрокаТабличнойЧасти.СчетУчета    = СчетаУчета.СчетРасчетовПоЗаймам;											
	КонецЕсли;		
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСчетУчетаОперацииНаСервере(Операция)
	
	Возврат Операция.СчетУчета;

КонецФункции // ()

&НаСервереБезКонтекста
Функция ПолучитьВидОперации(Операция)
	
	Возврат Операция.ВидОперации;

КонецФункции // ()

&НаСервереБезКонтекста
Функция ПолучитьВидДоговораПоОперацииНаСервере(Операция) 
	ВидОперации = Операция.ВидОперации;
	Если ВидОперации = Перечисления.ВидыОперацийППВ.ВозвратОтПоставщика Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;	
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППВ.ОплатаОтПокупателя Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;	
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППВ.РасчетыПоЗаймам Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // ПолучитьВидДоговораПоОперации()

&НаСервереБезКонтекста
Функция ПолучитьВалютуБанковскогоСчета(БанковскийСчет)

	Возврат	БанковскийСчет.ВалютаДенежныхСредств;

КонецФункции // ()

&НаСервереБезКонтекста
Функция ПолучитьСтатьюДДСИзОперации(Операция)

	Возврат	Операция.СтатьяДвиженияДенежныхСредств;

КонецФункции // ПолучитьСтатьюДДСИзОперации()

&НаСервереБезКонтекста
Функция ПолучитьВалютуДоговораНаСервере(Договор)

	Возврат	Договор.ВалютаРасчетов;

КонецФункции // ПолучитьСтатьюДДСИзОперации()

&НаСервереБезКонтекста
Функция ПроверкаСчета11хх(СчетУчета)

	Возврат СчетУчета = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВКассе ИЛИ СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ДенежныеСредстваВКассе);
	
КонецФункции // 

&НаКлиенте
Процедура УстановкаОтбораДоговораКонтрагента()
	Если Объект.РасшифровкаПлатежа.Количество() = 1 И ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
		НовыйМассив = Новый Массив();
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВалютаРасчетов", ВалютаДоговораКонтрагентаРасшифровкаПлатежа);	    
	    НовыйМассив.Добавить(НовыйПараметр);
			
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ВозвратОтПоставщика") Тогда
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));	    
		    НовыйМассив.Добавить(НовыйПараметр);			
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ОплатаОтПокупателя") Тогда			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));	    
		    НовыйМассив.Добавить(НовыйПараметр);			
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.РасчетыПоЗаймам") Тогда			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));	    
		    НовыйМассив.Добавить(НовыйПараметр);			
		КонецЕсли;
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = НовыеПараметры;

	ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
		НовыйМассив = Новый Массив();
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));	    
	    НовыйМассив.Добавить(НовыйПараметр);
		
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = НовыеПараметры;

	КонецЕсли;	

КонецПроцедуры
	
&НаКлиенте
Процедура УстановкаОтбораДоговораКонтрагентаВТекущейстроке()
	НомерСтроки = Элементы.РасшифровкаПлатежа.ТекущиеДанные.НомерСтроки;
	НовыйМассив = Новый Массив();
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ВозвратОтПоставщика") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));	    
	    НовыйМассив.Добавить(НовыйПараметр);			
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ОплатаОтПокупателя") Тогда			
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));	    
	    НовыйМассив.Добавить(НовыйПараметр);			
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.РасчетыПоЗаймам") Тогда			
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));	    
	    НовыйМассив.Добавить(НовыйПараметр);			
	КонецЕсли;	
	
	Если НомерСтроки > 1 Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВалютаРасчетов", ВалютаДоговораКонтрагентаРасшифровкаПлатежа);	    
	    НовыйМассив.Добавить(НовыйПараметр);		
	КонецЕсли;

	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКурсВалютыНаСервере(Валюта, Дата)

	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Дата);	

КонецФункции // ()

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ОбработкаЗаполнения(ДокОснование, );
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
КонецПроцедуры // ЗаполнитьПоДокументу()

#КонецОбласти

#Область УправлениеВнешнимВидом

// Видимость и доступность всех элементов формы
//
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	ВалютаРегламентированногоУчета 									= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Элементы.Получатель.Видимость 									= Истина;
	Элементы.Получатель.Заголовок                           		= "Покупатель";
	
	Элементы.ФизЛицо.Видимость										= Ложь;
	Элементы.СчетУчета.Заголовок									= "Счет учета покупателя";
	Элементы.СчетУчета.Видимость 									= Истина;
	Элементы.БанковскийСчетПлательщика.Видимость					= Истина;
	Элементы.БанковскийСчетПлательщика.Заголовок					= "Б/счет покупателя";
	Элементы.СуммаДокумента.Заголовок 								= "Сумма";
	Элементы.СуммаДокумента.ТолькоПросмотр 							= Истина;
	Элементы.Статья.Видимость 										= Ложь;
	Элементы.Курс.Видимость											= Ложь;	
	Элементы.КартСчет.Видимость										= Ложь;	
	Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость		= Ложь;	
	
	Элементы.СтраницыПанель.ТекущаяСтраница	 						= Элементы.СтраницаРасшифровкаПлатежа;
	Элементы.СтраницаРасшифровкаПлатежа.Видимость 					= Ложь;
	Элементы.СтраницаПрочиеПриходы.Видимость						= Ложь;
	
	ВидОперации = Объект.Операция.ВидОперации;
	
	Если НЕ ЗначениеЗаполнено(Объект.Операция) ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ОплатаОтПокупателя") Тогда
		//Видимость ТЧ
		Элементы.СтраницаРасшифровкаПлатежа.Видимость 				= Истина;
		Элементы.БанковскийСчетПлательщика.Заголовок				= "Б/счет покупателя";
		Элементы.СчетУчета.Видимость 								= Ложь;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ВозвратОтПоставщика") Тогда
		Элементы.Получатель.Заголовок								= "Поставщик";
		Элементы.БанковскийСчетПлательщика.Заголовок				= "Б/счет Поставщика";
		Элементы.СчетУчета.Видимость 								= Ложь;
		//Видимость ТЧ
		Элементы.СтраницаРасшифровкаПлатежа.Видимость 				= Истина;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.РасчетыПоЗаймам") Тогда
		Элементы.Получатель.Заголовок								= "Контрагент";
		Элементы.БанковскийСчетПлательщика.Заголовок				= "Б/счет контрагента";
		Элементы.СчетУчета.Видимость 								= Ложь;
		//Видимость ТЧ
		Элементы.СтраницаРасшифровкаПлатежа.Видимость 				= Истина;

	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ВозвратОтСорудника") Тогда
		Элементы.Получатель.Видимость 								= Ложь;
		Элементы.Статья.Видимость 									= Истина;
		Элементы.СчетУчета.Заголовок								= "Счет расчетов";
		Элементы.ФизЛицо.Видимость									= Истина;
		Элементы.ФизЛицо.Заголовок									= "Сотрудник";
		Элементы.СуммаДокумента.ТолькоПросмотр 						= Ложь;
		Элементы.КартСчет.Видимость									= Истина;
				
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ПрочийПриход") Тогда
		Элементы.Получатель.Видимость 								= Ложь;
		Элементы.БанковскийСчетПлательщика.Видимость				= Ложь;
		Элементы.СчетУчета.Видимость 								= Ложь;
		//Видимость ТЧ
		Элементы.СтраницаПрочиеПриходы.Видимость					= Истина;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Операция) ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ОплатаОтПокупателя") 
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ВозвратОтПоставщика") 
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.РасчетыПоЗаймам") Тогда
		
		Элементы.РасшифровкаПлатежаВалютаДоговора.Видимость 		= Ложь;
		Элементы.РасшифровкаПлатежаКурс.Видимость 					= Ложь;
		Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
			Если Объект.ВалютаДоговора <> ВалютаДенежныхСредств Тогда
				Элементы.РасшифровкаПлатежаВалютаДоговора.Видимость = Истина;
				Элементы.РасшифровкаПлатежаКурс.Видимость 			= Истина;
				Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ВалютаДенежныхСредств <> ВалютаРегламентированногоУчета Тогда		
			Элементы.Курс.Видимость									= Истина;		
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // УстановитьВидимость()  

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		ВалютаДоговораКонтрагентаРасшифровкаПлатежа = ПолучитьВалютуДоговораНаСервере(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
		ДоговорВПервойСтроке = Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента;
	КонецЕсли;
	
	// Установка реквизитов формы.
	Организация             = Объект.Организация;	
	ВалютаДенежныхСредств 	= Объект.БанковскийСчет.ВалютаДенежныхСредств;
	КурсВзаиморасчетов 		= Объект.Курс;
	Операция 				= Объект.Операция;	
	
	//Установить доступность субконто в табличной части ПрочиеРасходы
	УстановитьДоступностьСубконто();

	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);

	БухгалтерскийУчетСервер.ОпределитьТипПоследнегоОткрытогоДокумента(Объект); 
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Установка параметров формы и видимости полей формы
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПолучитьКурсВзаиморасчетов();
	// Установить отбора в табличной части РасшифровкаПлатежа
	УстановкаОтбораДоговораКонтрагента();
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьДоступностьСубконто();
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	// ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ОповещениеОбИзмененииДолга");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура вызывается при нажатии кнопки "ЗаполнитьПоОснованию" 
//
&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Документ будет полностью перезаполнен по ""Основанию""! Продолжить выполнение операции?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

// Изменение значений реквизитов формы, видимости полей в зависимости от вида операции
//
&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	Операция 			= Объект.Операция;
	ВидОперации 		= ПолучитьВидОперации(Операция);
	Объект.СчетУчета 	= ПолучитьСчетУчетаОперацииНаСервере(Объект.Операция);
	
	ОчисткаРеквизитовИТабличныхЧастей();	
	УстановитьДоступностьСубконто();
		
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ВозвратОтСорудника") Тогда
		Объект.СчетУчета = ПолучитьСчетУчетаОперацииНаСервере(Объект.Операция);
	КонецЕсли;	

	УстановитьВидимостьДоступностьЭлементов(); 

КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
	УстановитьКурсВалютыДокумента();
	УстановитьКурсВзаиморасчетовТабличнойЧастиРасшифровкаПлатежа();
	ПересчетТабличнойЧастиРасшифровкаПлатежа();
	ПересчетСуммыДокумента();
	
КонецПроцедуры

//Процедура - обработчик события ПриИзменении поля ввода Организация
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Если Объект.Организация = Организация Тогда
		Возврат;
	КонецЕсли;
	Организация = Объект.Организация;
	ОчисткаРеквизитовИТабличныхЧастей();
	
	Объект.Номер = "";
	БухгалтерскийУчетСервер.ПроверитьСуществованиеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	Объект.БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Объект.Организация, ВалютаРегламентированногоУчета);
	
	ПересчетТабличнойЧастиРасшифровкаПлатежа();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Получатель
//
&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	ОчисткаРеквизитовИТабличныхЧастей();
	ПересчетТабличнойЧастиРасшифровкаПлатежа();
	
	УстановитьВидимостьДоступностьЭлементов();	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	ВалютаДенежныхСредств 			= ПолучитьВалютуБанковскогоСчета(Объект.БанковскийСчет);
	Объект.ВалютаДенежныхСредств 	= ВалютаДенежныхСредств;
	
	УстановитьКурсВалютыДокумента();	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ОплатаОтПокупателя") 
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ВозвратОтПоставщика") 
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.РасчетыПоЗаймам") Тогда			
		ПолучитьКурсВзаиморасчетов();
		УстановитьКурсВзаиморасчетовТабличнойЧастиРасшифровкаПлатежа();
		ПересчетТабличнойЧастиРасшифровкаПлатежа();	
	КонецЕсли;	
	
	ПересчетСуммыДокумента();	
	УстановитьВидимостьДоступностьЭлементов()
		
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	Массив = ФизЛицоПриИзмененииНаСервере(Объект.ФизЛицо, ДатаДокумента);
	Элементы.КартСчет.СписокВыбора.ЗагрузитьЗначения(Массив);
	Если Массив.Количество() > 0 тогда
		Объект.КартСчет = Массив[0];	
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ФизЛицоПриИзмененииНаСервере(ФизЛицо, ДатаДокумента)
	Массив = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КартСчетаСотрудниковСрезПоследних.Банк,
		|	КартСчетаСотрудниковСрезПоследних.НомерСчета
		|ИЗ
		|	РегистрСведений.КартСчетаСотрудников.СрезПоследних(&Дата, ) КАК КартСчетаСотрудниковСрезПоследних
		|ГДЕ
		|	КартСчетаСотрудниковСрезПоследних.ФизЛицо = &ФизЛицо";
	
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.УстановитьПараметр("Дата", ДатаДокумента);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Массив.Добавить("" + Выборка.НомерСчета + ", " + Выборка.Банк);
	КонецЦикла;
	
	Возврат Массив;
КонецФункции

#КонецОбласти

#Область ОбработчикиТабличныхЧастей

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда						
		СтрокаТабличнойЧасти 									= Элемент.ТекущиеДанные;	
	    СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   	= ПолучитьСтатьюДДСИзОперации(Операция);
		
		Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			ВидДоговораПоОперации 					= ПолучитьВидДоговораПоОперацииНаСервере(Объект.Операция);
			СтруктураДоговорКонтрагента             = БухгалтерскийУчетСервер.ПолучитьДоговорКонтрагента(Объект.Организация, 
																										Объект.Контрагент, 
																										ВалютаДенежныхСредств, 
																										ВидДоговораПоОперации);
			Если ЗначениеЗаполнено(СтруктураДоговорКонтрагента) Тогда
				СтрокаТабличнойЧасти.ДоговорКонтрагента = СтруктураДоговорКонтрагента.ДоговорКонтрагента;
			КонецЕсли;
			ДоговорВПервойСтроке = Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента;
			ВалютаДоговораКонтрагентаРасшифровкаПлатежа = ПолучитьВалютуДоговораНаСервере(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
			Если ЗначениеЗаполнено(ВалютаДоговораКонтрагентаРасшифровкаПлатежа) И Объект.ВалютаДоговора <> ВалютаДоговораКонтрагентаРасшифровкаПлатежа Тогда
				Объект.ВалютаДоговора = ВалютаДоговораКонтрагентаРасшифровкаПлатежа;
			Иначе
				Объект.ВалютаДоговора = ВалютаРегламентированногоУчета;
			КонецЕсли;
			ПолучитьКурсВзаиморасчетов();
		Иначе
			СтрокаТабличнойЧасти.ДоговорКонтрагента 	= Объект.РасшифровкаПлатежа[СтрокаТабличнойЧасти.НомерСтроки - 2].ДоговорКонтрагента;			
		КонецЕсли;
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = КурсВзаиморасчетов;
		СтрокаТабличнойЧасти.ПрямойКурс 		= ПрямойКурс;

		УстановитьСчетаУчетаРасчетовСКонтрагентом(СтрокаТабличнойЧасти);
		ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти);
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПрочиеПриходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти 								= Элемент.ТекущиеДанные;	
		СтрокаТабличнойЧасти.СчетУчета 						= ПолучитьСчетУчетаОперацииНаСервере(Операция);
	    СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   = ПолучитьСтатьюДДСИзОперации(Операция);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеПриходыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПересчетСуммыДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРеквизитовИТабличныхЧастей()
	
	ДоговорВПервойСтроке = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	ВалютаДоговораКонтрагентаРасшифровкаПлатежа = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
	
	Объект.СуммаДокумента = 0;	
	
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		Объект.РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	Если Объект.ПрочиеПриходы.Количество() > 0 Тогда
		Объект.ПрочиеПриходы.Очистить();
	КонецЕсли;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ОплатаОтПокупателя") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ВозвратОтПоставщика") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.РасчетыПоЗаймам") Тогда
			
		Объект.СтатьяДвиженияДенежныхСредств 	= ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка");
		Объект.ФизЛицо 							= ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");				
		СтрокаТабличнойЧасти 									= Объект.РасшифровкаПлатежа.Добавить();		
	    СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   	= ПолучитьСтатьюДДСИзОперации(Операция);
		
		ВидДоговораПоОперации = ПолучитьВидДоговораПоОперацииНаСервере(Объект.Операция);
		СтруктураДоговор = БухгалтерскийУчетСервер.ПолучитьДоговорКонтрагента(Объект.Организация, Объект.Контрагент, ВалютаДенежныхСредств, ВидДоговораПоОперации);
		Объект.ВалютаДоговора = СтруктураДоговор.ВалютаДоговора;
		УстановитьКурсДоговора();
						
		СтрокаТабличнойЧасти.ДоговорКонтрагента 	= СтруктураДоговор.ДоговорКонтрагента;
		ПолучитьКурсВзаиморасчетов();
		СтрокаТабличнойЧасти.КурсВзаиморасчетов 	= КурсВзаиморасчетов;
		СтрокаТабличнойЧасти.ПрямойКурс 			= ПрямойКурс;
		ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти);
		УстановитьСчетаУчетаРасчетовСКонтрагентом(СтрокаТабличнойЧасти);
		ВалютаДоговораКонтрагентаРасшифровкаПлатежа = СтруктураДоговор.ВалютаДоговора;
		ДоговорВПервойСтроке 						= СтрокаТабличнойЧасти.ДоговорКонтрагента;
		УстановкаОтбораДоговораКонтрагента();
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ВозвратОтСорудника") Тогда
		Объект.СтатьяДвиженияДенежныхСредств 	= ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка");
		Объект.Контрагент						= ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");				
	    Объект.СтатьяДвиженияДенежныхСредств   	= ПолучитьСтатьюДДСИзОперации(Операция);
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ПрочийПриход") Тогда	
		Объект.СтатьяДвиженияДенежныхСредств 	= ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка");
		Объект.Контрагент						= ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		Объект.ФизЛицо 							= ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");				
		СтрокаТабличнойЧасти 									= Объект.ПрочиеПриходы.Добавить();	
		СтрокаТабличнойЧасти.СчетУчета 							= ПолучитьСчетУчетаОперацииНаСервере(Операция);
	    СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   	= ПолучитьСтатьюДДСИзОперации(Операция);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПересчетТабличнойЧастиРасшифровкаПлатежа()
	Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
		ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти)
	КонецЦикла;	
КонецПроцедуры

// ПересчетИзСуммыПлатежа = Истина, если вводится сумма платежа.
// ПересчетИзСуммыПлатежа = Ложь, если вводится сумма взаиморасчетов.
//
&НаКлиенте
Процедура ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти, ПересчетОтСуммыВзаиморасчетов = Ложь)
	Если ПересчетОтСуммыВзаиморасчетов Тогда
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаВзаиморасчетов) Тогда
			СтрокаТабличнойЧасти.КурсВзаиморасчетов 	= Окр(СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.СуммаВзаиморасчетов, 2);
			СтрокаТабличнойЧасти.ПрямойКурс = Истина;
		КонецЕсли;
		Если СтрокаТабличнойЧасти.КурсВзаиморасчетов < 1 Тогда
			СтрокаТабличнойЧасти.КурсВзаиморасчетов 	= Окр(СтрокаТабличнойЧасти.СуммаВзаиморасчетов / СтрокаТабличнойЧасти.СуммаПлатежа, 2);
			СтрокаТабличнойЧасти.ПрямойКурс = Ложь;		
		КонецЕсли;
				
	Иначе
		Если СтрокаТабличнойЧасти.ПрямойКурс Тогда
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.КурсВзаиморасчетов) Тогда
				СтрокаТабличнойЧасти.СуммаВзаиморасчетов 	= Окр(СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.КурсВзаиморасчетов, 2);
			КонецЕсли;		
		Иначе
			СтрокаТабличнойЧасти.СуммаВзаиморасчетов 	= Окр(СтрокаТабличнойЧасти.СуммаПлатежа * СтрокаТабличнойЧасти.КурсВзаиморасчетов, 2);
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеПриходыСчетУчетаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПрочиеПриходы.ТекущиеДанные;
	
	Принадлежит1100 = ПроверкаСчета11хх(СтрокаТабличнойЧасти.СчетУчета);
	Если Принадлежит1100 Тогда
		СтрокаТабличнойЧасти.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
		Сообщение = Новый СообщениеПользователю();
	    Сообщение.Текст = "В этой операции ППВ нельзя устанавливать счет учета по кассе! Для это используйте документ ПКО!";
	    Сообщение.Поле = "Объект.ПрочиеПриходы[" + (СтрокаТабличнойЧасти.НомерСтроки - 1) + "].СчетУчета";
	    Сообщение.УстановитьДанные(Объект);
	    Сообщение.Сообщить();				
	КонецЕсли;	
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "Субконто1", "Субконто2", "Субконто3");

	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетУчета, СтрокаТабличнойЧасти, ПоляОбъекта, Истина);
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетУчета");
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств) Тогда
		СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств = ПолучитьСтатьюДДСИзОперации(Операция);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Отказ = СообщенияПользователюПриИзмененииДоговора(СтрокаТабличнойЧасти);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 И Объект.РасшифровкаПлатежа.Количество() = 1 И ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
		ВалютаДоговораКонтрагентаРасшифровкаПлатежа = ПолучитьВалютуДоговораНаСервере(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
		ДоговорВПервойСтроке = Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента;
		Объект.ВалютаДоговора = ВалютаДоговораКонтрагентаРасшифровкаПлатежа;
		УстановитьКурсДоговора();
		ПолучитьКурсВзаиморасчетов();
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = КурсВзаиморасчетов;
		СтрокаТабличнойЧасти.ПрямойКурс 		= ПрямойКурс;
		ПересчетТабличнойЧастиРасшифровкаПлатежа();
	ИначеЕсли СтрокаТабличнойЧасти.НомерСтроки = 1 И Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
		Если ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
			Если ПолучитьВалютуДоговораНаСервере(СтрокаТабличнойЧасти.ДоговорКонтрагента) <> ВалютаДоговораКонтрагентаРасшифровкаПлатежа Тогда		
				ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросПоменяласьВалютаТабличнойЧасти", ЭтотОбъект);
				ТекстВопроса = НСтр("ru = 'В первой строке табличная часть выбран договор с другой валютой! Табличная часть будет пересчитана! Продолжить выполнение операции?'");
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
			КонецЕсли;	
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросПоменяласьВалютаТабличнойЧасти", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'В первой строке табличной части не выбран договор контрагента! Табличная часть будет пересчитана! Продолжить выполнение операции?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);			
		КонецЕсли;

	КонецЕсли;
		
	ОповеститьЧтоКурсывалютНеАктуальны();
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Функция СообщенияПользователюПриИзмененииДоговора(СтрокаТабличнойЧасти)
	
	Отказ = Ложь;
		
	РасчетыНеВВалютеДоговора = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьНастройкуРасчетыНеВВалютеДоговора();
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента) 
		И НЕ РасчетыНеВВалютеДоговора  
		И НЕ ПолучитьВалютуДоговораНаСервере(СтрокаТабличнойЧасти.ДоговорКонтрагента) = ВалютаДенежныхСредств Тогда				
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
			"Валюта выбранного договора должна соответствовать валюте кассы, т.е. " + ВалютаДенежныхСредств,
			,
			"РасшифровкаПлатежа",
			СтрокаТабличнойЧасти.НомерСтроки,
			"ДоговорКонтрагента",
			Отказ);			
			СтрокаТабличнойЧасти.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
		ВалютаДоговораВПервойСтроке = ПолучитьВалютуДоговораНаСервере(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
		Если НЕ ЗначениеЗаполнено(ВалютаДоговораВПервойСтроке) Тогда
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
			"У договора в первой строке не установлена валюта!",
			,
			"РасшифровкаПлатежа",
			СтрокаТабличнойЧасти.НомерСтроки,
			"ДоговорКонтрагента",
			Отказ);			
			СтрокаТабличнойЧасти.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		КонецЕсли;
		
		Если НЕ ВалютаДоговораВПервойСтроке = ПолучитьВалютуДоговораНаСервере(СтрокаТабличнойЧасти.ДоговорКонтрагента) Тогда
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
			"Валюта выбранного договора должна быть, как в первой строке табличной части, т.е. " + ВалютаДоговораВПервойСтроке,
			,
			"РасшифровкаПлатежа",
			СтрокаТабличнойЧасти.НомерСтроки,
			"ДоговорКонтрагента",
			Отказ);			
			СтрокаТабличнойЧасти.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Отказ;

КонецФункции // СообщенияПользователюПриИзмененииДоговора(СтрокаТабличнойЧасти)

&НаСервере
Функция ПересчетСуммыДокумента()
	
	ВидОперации = Объект.Операция.ВидОперации;	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ОплатаОтПокупателя") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ВозвратОтПоставщика") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.РасчетыПоЗаймам") Тогда			
			
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
				
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ПрочийПриход") Тогда		
		Объект.СуммаДокумента = Объект.ПрочиеПриходы.Итог("СуммаПлатежа");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ВозвратОтСорудника") Тогда		
		//Для полноты картины		
	КонецЕсли;

КонецФункции // ПересчетСуммыДокумента()

//Установка доступности субконто для существующих строк табличной части
&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "Субконто1", "Субконто2", "Субконто3");
	
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПрочиеПриходы Цикл
		
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СтрокаТабличнойЧасти.СчетУчета, СтрокаТабличнойЧасти, ПоляОбъекта, Истина);
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТабличнойЧасти, "Субконто" + "%Индекс%", "СчетУчета");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТабличнойЧасти, "Субконто" + "%Индекс%", "ПрочиеПриходыСубконто" + "%Индекс%", ПараметрыДокумента);	
		
	КонецЦикла;

	
КонецПроцедуры

// Процедура - Изменить параметры выбора полей субконто
//
// Параметры:
//  Форма	 - 	 - 
//  Суффикс	 - 	 - 
//  ИмяСчета - 	 - 
&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Форма.Элементы.ПрочиеПриходы.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	//ТекущиеДанные = Форма.Объект.Движения.Типовой.НайтиПоИдентификатору(ТекущаяСтрока);
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, "Субконто" + Суффикс + "%Индекс%", "ПрочиеПриходыСубконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета",   ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", ДанныеОбъекта.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	БухгалтерскийУчетКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеПриходыПриИзменении(Элемент)
	ПересчетСуммыДокумента()
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеПриходыСубконто1ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетУчета");
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеПриходыСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.ПрочиеПриходы.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "Субконто", 1, "СчетУчета", СтрокаТабличнойЧасти, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеПриходыСубконто2ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетУчета");
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеПриходыСубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.ПрочиеПриходы.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "Субконто", 2, "СчетУчета", СтрокаТабличнойЧасти, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеПриходыСубконто3ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетУчета");
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеПриходыСубконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.ПрочиеПриходы.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "Субконто", 3, "СчетУчета", СтрокаТабличнойЧасти, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.КурсВзаиморасчетов) Тогда
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = ПолучитьКурсВалютыНаСервере(Объект.ВалютаДоговора, ДатаДокумента).Курс;	
	КонецЕсли;
	ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриИзменении(Элемент)
	ПересчетСуммыДокумента();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УстановкаОтбораДоговораКонтрагентаВТекущейстроке();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти, Истина)
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросПоменяласьВалютаТабличнойЧасти(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВалютаДоговораКонтрагентаРасшифровкаПлатежа = ПолучитьВалютуДоговораНаСервере(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
		ДоговорВПервойСтроке = Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента;
		Объект.ВалютаДоговора = ВалютаДоговораКонтрагентаРасшифровкаПлатежа;
		УстановитьКурсДоговора();		
		ПолучитьКурсВзаиморасчетов();
		Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТабличнойЧасти.ДоговорКонтрагента = ДоговорВПервойСтроке;
		КонецЦикла;
		ПересчетТабличнойЧастиРасшифровкаПлатежа();
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоДокументу(Объект.ДокументОснование);
        УстановитьВидимостьДоступностьЭлементов();
    КонецЕсли;
КонецПроцедуры // ЗаполнитьПоОснованию()

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти
