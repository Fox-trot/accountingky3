#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Процедура ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти.ПрямойКурс Тогда
		СтрокаТабличнойЧасти.СуммаВзаиморасчетов 	= Окр(СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.КурсВзаиморасчетов, 2);
	Иначе
		СтрокаТабличнойЧасти.СуммаВзаиморасчетов 	= Окр(СтрокаТабличнойЧасти.СуммаПлатежа * СтрокаТабличнойЧасти.КурсВзаиморасчетов, 2);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКурсВалютыДоговора(Дата, СтрокаТабличнойЧасти)
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента) Тогда
		СложныйКурс = 0;
		ВалютаНач = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
		Если ЗначениеЗаполнено(Организация.ОсновнойБанковскийСчет) Тогда
			ДанныеКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств, Дата);
			Курс = ДанныеКурса.Курс;
		Иначе
			Курс = 1;
		КонецЕсли;
				
		Если РасшифровкаПлатежа.Количество() > 0 Тогда		
			ВалютаНач = СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаРасчетов;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВалютаНач) Тогда
			КурсСтруктура 		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаНач, Дата);
			КурсВалютыДоговора	= КурсСтруктура.Курс;
		    Если ЗначениеЗаполнено(КурсВалютыДоговора) Тогда
				СложныйКурс		= Окр(Курс / КурсВалютыДоговора, 4);
				ПрямойКурс      = Истина;
				Если СложныйКурс < 1 Тогда
					СложныйКурс		= Окр(КурсВалютыДоговора / Курс, 4);
					ПрямойКурс      = Ложь;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;

		Курс 							= СложныйКурс;
		СтрокаТабличнойЧасти.ПрямойКурс = ПрямойКурс;
		СтрокаТабличнойЧасти.КурсНБКР 	= СложныйКурс;	
	КонецЕсли;
	
КонецПроцедуры // УстановитьКурсВалютыДоговора()

#КонецОбласти

#Область ПроцедурыЗаполненияДокумента

Процедура ЗаполнитьПоСтруктуре(ДанныеЗаполнения) Экспорт
	Если ДанныеЗаполнения.Свойство("ОбъектИсточник")
		И ДанныеЗаполнения.ОбъектИсточник = "ОбработкаВыпискаБанка" Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;		
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоРеализацииТоваровУслуг(ДанныеЗаполнения) Экспорт
	ДокументОснование = ДанныеЗаполнения;

	// Шапка
	Организация = ДанныеЗаполнения.Организация;
	Контрагент 	= ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	ВалютаДоговора = ДоговорКонтрагента.ВалютаРасчетов;
	БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Организация);
	СуммаДокумента = ДанныеЗаполнения.Товары.Итог("Итого") + ДанныеЗаполнения.Услуги.Итог("Итого");
	
	// Расшифровка
	РасшифровкаПлатежа.Очистить();
	 
	СтрокаТабличнойЧасти = РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеЗаполнения);
	УстановитьКурсВалютыДоговора(ТекущаяДатаСеанса(), СтрокаТабличнойЧасти);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.КурсВзаиморасчетов) Тогда
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоговора, Дата).Курс;
	КонецЕсли;	
	
	СтрокаТабличнойЧасти.СуммаПлатежа = СуммаДокумента;
	
	СчетаРасчетовСКонтрагентом = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента);
	СтрокаТабличнойЧасти.СчетУчета = СчетаРасчетовСКонтрагентом.СчетРасчетовПокупателя;
	
	ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти)
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоСчетуНаОплатуПокупателю(ДанныеЗаполнения) Экспорт
	ДокументОснование = ДанныеЗаполнения;
	
	// Шапка
	Организация = ДанныеЗаполнения.Организация;
	Контрагент 	= ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	ВалютаДоговора = ДоговорКонтрагента.ВалютаРасчетов;
	БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Организация);
	СуммаДокумента = ДанныеЗаполнения.Товары.Итог("Итого") + ДанныеЗаполнения.Услуги.Итог("Итого");
	
	РасшифровкаПлатежа.Очистить();
	
	// Расшифровка
	РасшифровкаПлатежа.Очистить();
	 
	СтрокаТабличнойЧасти = РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеЗаполнения);
	УстановитьКурсВалютыДоговора(ТекущаяДатаСеанса(), СтрокаТабличнойЧасти);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.КурсВзаиморасчетов) Тогда
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоговора, Дата).Курс;
	КонецЕсли;	
	
	СтрокаТабличнойЧасти.СуммаПлатежа = СуммаДокумента;
	
	СчетаРасчетовСКонтрагентом = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента);
	СтрокаТабличнойЧасти.СчетУчета = СчетаРасчетовСКонтрагентом.СчетРасчетовПокупателя;
	
	ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти)
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("Структура")] = "ЗаполнитьПоСтруктуре";
	СтратегияЗаполнения[Тип("ДокументСсылка.РеализацияТоваровУслуг")] = "ЗаполнитьПоРеализацииТоваровУслуг";
	СтратегияЗаполнения[Тип("ДокументСсылка.СчетНаОплатуПокупателю")] = "ЗаполнитьПоСчетуНаОплатуПокупателю";
	
	ЗаполнениеОбъектов.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
		
	Если НЕ ЗначениеЗаполнено(Операция) Тогда
		Операция = Справочники.ОперацииППВ.ОплатаОтПокупателя;			
	КонецЕсли;		
	Если НЕ ЗначениеЗаполнено(БанковскийСчет) Тогда		
		БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Организация);		
	КонецЕсли;		
	Если НЕ ЗначениеЗаполнено(ВалютаДенежныхСредств) И ЗначениеЗаполнено(БанковскийСчет) Тогда
		ВалютаДенежныхСредств = БанковскийСчет.ВалютаДенежныхСредств;
	КонецЕсли;
	
	ДатаДокумента = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	Если НЕ ЗначениеЗаполнено(Курс) Тогда
		КурсСтруктура		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДенежныхСредств, ДатаДокумента);
		Если ЗначениеЗаполнено(КурсСтруктура.Курс) Тогда
			Курс 	= КурсСтруктура.Курс;
		Иначе
			Курс 	= 1;
		КонецЕсли;		
	КонецЕсли;		
	Если НЕ ЗначениеЗаполнено(КурсДоговора)
		И РасшифровкаПлатежа.Количество() > 0 
		И ЗначениеЗаполнено(РасшифровкаПлатежа[0].ДоговорКонтрагента) 
		И ЗначениеЗаполнено(РасшифровкаПлатежа[0].ДоговорКонтрагента.ВалютаРасчетов) Тогда
			
		КурсСтруктура = РаботаСКурсамиВалют.ПолучитьКурсВалюты(РасшифровкаПлатежа[0].ДоговорКонтрагента.ВалютаРасчетов, ДатаДокумента);
		КурсДоговора = КурсСтруктура.Курс;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(КурсДоговора) Тогда
		КурсДоговора = 1;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	ПересчетСуммыДокумента()
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ПлатежноеПоручениеВходящее.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьДДС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьВозвратПодотчетником(ДополнительныеСвойства, Движения, Отказ);


	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ВидОперации = Операция.ВидОперации;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ОплатаОтПокупателя") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ВозвратОтПоставщика") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.РасчетыПоЗаймам") Тогда
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ФизЛицо");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ВозвратОтСорудника") Тогда
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");	
		ПроверяемыеРеквизиты.Добавить("СуммаДокумента");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ПрочийПриход") Тогда	
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ФизЛицо");
		ПроверяемыеРеквизиты.Добавить("ПрочиеПриходы");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ПересчетСуммыДокумента()
	
	ВидОперации = Операция.ВидОперации;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ОплатаОтПокупателя") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ВозвратОтПоставщика") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.РасчетыПоЗаймам") Тогда			
						
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
				
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ПрочийПриход") Тогда		
		СуммаДокумента = ПрочиеПриходы.Итог("СуммаПлатежа");
				
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППВ.ВозвратОтСорудника") Тогда		
		//Для полноты картины
		
	КонецЕсли;

КонецФункции // ПересчетСуммыДокумента()

#КонецЕсли
