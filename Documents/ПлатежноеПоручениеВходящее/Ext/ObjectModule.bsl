#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ЗаполненияДокумента

Процедура ЗаполнитьПоСтруктуре(ДанныеЗаполнения) Экспорт
	Если ДанныеЗаполнения.Свойство("ОбъектИсточник")
		И ДанныеЗаполнения.ОбъектИсточник = "ОбработкаВыпискаБанка" Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;		
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоРеализацииТоваровУслуг(ДанныеЗаполнения) Экспорт
	ДокументОснование = ДанныеЗаполнения;

	// Шапка
	ВидОперации = Перечисления.ВидыОперацийППВ.ОплатаОтПокупателя;			
	
	// Реквизиты организации.
	Организация = ДанныеЗаполнения.Организация;
	БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Организация);
	ВалютаДокумента = БанковскийСчет.ВалютаДенежныхСредств;
	
	ДатаДокумента = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	КурсСтруктура = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	Если ЗначениеЗаполнено(КурсСтруктура.Курс) Тогда
		Курс = КурсСтруктура.Курс;
		Кратность = КурсСтруктура.Кратность; 
	Иначе
		Курс = 1;
		Кратность = 1;
	КонецЕсли;		
	
	// Реквизиты контрагента.
	Контрагент 	= ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	ВалютаРасчетов = ДоговорКонтрагента.ВалютаРасчетов;
	
	СчетаРасчетовСКонтрагентом = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	СчетРасчетов = СчетаРасчетовСКонтрагентом.СчетРасчетовПокупателя;

	СуммаДокумента = ДанныеЗаполнения.Товары.Итог("Всего") + ДанныеЗаполнения.Услуги.Итог("Всего")
					- ДанныеЗаполнения.Товары.Итог("СуммаСкидки") - ДанныеЗаполнения.Услуги.Итог("СуммаСкидки");

	// Расшифровка
	РасшифровкаПлатежа.Очистить();
	СтрокаТабличнойЧасти = РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеЗаполнения);
	
	Если ВалютаРасчетов = ВалютаДокумента Тогда 
		КурсВзаиморасчетов = Курс;
		КратностьВзаиморасчетов = Кратность;
		СтрокаТабличнойЧасти.СуммаПлатежа = СуммаДокумента;
		СтрокаТабличнойЧасти.СуммаВзаиморасчетов = СуммаДокумента;
	Иначе 
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		КурсСтруктура = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРасчетов, ДатаДокумента);

		ДанныеДокумента = Новый Структура();
		ДанныеДокумента.Вставить("Валюта", 		ВалютаДокумента);
		ДанныеДокумента.Вставить("Курс", 		Курс);
		ДанныеДокумента.Вставить("Кратность", 	Кратность);
		ДанныеДокумента.Вставить("ПрямойКурс", 	Ложь);
		
		ДанныВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", ВалютаРасчетов, КурсСтруктура.Курс, КурсСтруктура.Кратность);
		УчетДенежныхСредствКлиентСервер.УстановитьКурсыВзаиморасчетов(ЭтотОбъект, ДанныеДокумента, ДанныВзаиморасчетов);
			
		СтрокаТабличнойЧасти.СуммаПлатежа = ?(ВалютаДокумента = ВалютаРегламентированногоУчета,
			СуммаДокумента * КурсВзаиморасчетов / КратностьВзаиморасчетов,
			СуммаДокумента * КратностьВзаиморасчетов / КурсВзаиморасчетов);			
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовТабличнойЧасти(
			ЭтотОбъект, "РасшифровкаПлатежа", ДанныеДокумента, ДанныВзаиморасчетов, ВалютаРегламентированногоУчета);
	КонецЕсли;
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоСчетуНаОплатуПокупателю(ДанныеЗаполнения) Экспорт
	ДокументОснование = ДанныеЗаполнения;

	// Шапка
	ВидОперации = Перечисления.ВидыОперацийППВ.ОплатаОтПокупателя;			

	// Реквизиты организации.
	Организация = ДанныеЗаполнения.Организация;
	БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Организация);
	ВалютаДокумента = БанковскийСчет.ВалютаДенежныхСредств;
	
	ДатаДокумента = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	КурсСтруктура = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	Если ЗначениеЗаполнено(КурсСтруктура.Курс) Тогда
		Курс = КурсСтруктура.Курс;
		Кратность = КурсСтруктура.Кратность; 
	Иначе
		Курс = 1;
		Кратность = 1;
	КонецЕсли;		

	// Реквизиты контрагента.
	Контрагент 	= ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	ВалютаРасчетов = ДоговорКонтрагента.ВалютаРасчетов;
	
	СчетаРасчетовСКонтрагентом = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	СчетРасчетов = СчетаРасчетовСКонтрагентом.СчетРасчетовПокупателя;

	СуммаДокумента = ДанныеЗаполнения.Товары.Итог("Всего") + ДанныеЗаполнения.Услуги.Итог("Всего");

	// Расшифровка
	РасшифровкаПлатежа.Очистить();
	СтрокаТабличнойЧасти = РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеЗаполнения);
	
	Если ВалютаРасчетов = ВалютаДокумента Тогда 
		КурсВзаиморасчетов = Курс;
		КратностьВзаиморасчетов = Кратность;
		СтрокаТабличнойЧасти.СуммаПлатежа = СуммаДокумента;
		СтрокаТабличнойЧасти.СуммаВзаиморасчетов = СуммаДокумента;
	Иначе 
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		КурсСтруктура = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРасчетов, ДатаДокумента);

		ДанныеДокумента = Новый Структура();
		ДанныеДокумента.Вставить("Валюта", 		ВалютаДокумента);
		ДанныеДокумента.Вставить("Курс", 		Курс);
		ДанныеДокумента.Вставить("Кратность", 	Кратность);
		ДанныеДокумента.Вставить("ПрямойКурс", 	Ложь);
		
		ДанныВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", ВалютаРасчетов, КурсСтруктура.Курс, КурсСтруктура.Кратность);
		УчетДенежныхСредствКлиентСервер.УстановитьКурсыВзаиморасчетов(ЭтотОбъект, ДанныеДокумента, ДанныВзаиморасчетов);
			
		СтрокаТабличнойЧасти.СуммаПлатежа = ?(ВалютаДокумента = ВалютаРегламентированногоУчета,
			СуммаДокумента * КурсВзаиморасчетов / КратностьВзаиморасчетов,
			СуммаДокумента * КратностьВзаиморасчетов / КурсВзаиморасчетов);			
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовТабличнойЧасти(
			ЭтотОбъект, "РасшифровкаПлатежа", ДанныеДокумента, ДанныВзаиморасчетов, ВалютаРегламентированногоУчета);
	КонецЕсли;
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоВозвратуТоваровПоставщику(ДанныеЗаполнения) Экспорт
	ДокументОснование = ДанныеЗаполнения;

	// Шапка
	ВидОперации = Перечисления.ВидыОперацийППВ.ВозвратОтПоставщика;
	
	// Реквизиты организации.
	Организация = ДанныеЗаполнения.Организация;
	БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Организация);
	ВалютаДокумента = БанковскийСчет.ВалютаДенежныхСредств;
	
	ДатаДокумента = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	КурсСтруктура = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	Если ЗначениеЗаполнено(КурсСтруктура.Курс) Тогда
		Курс = КурсСтруктура.Курс;
		Кратность = КурсСтруктура.Кратность; 
	Иначе
		Курс = 1;
		Кратность = 1;
	КонецЕсли;		

	// Реквизиты контрагента.
	Контрагент 	= ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	ВалютаРасчетов = ДоговорКонтрагента.ВалютаРасчетов;
	
	СчетаРасчетовСКонтрагентом = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	СчетРасчетов = СчетаРасчетовСКонтрагентом.СчетРасчетовПокупателя;

	СуммаДокумента = ДанныеЗаполнения.Товары.Итог("Всего");

	// Расшифровка
	РасшифровкаПлатежа.Очистить();
	СтрокаТабличнойЧасти = РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеЗаполнения);
	
	Если ВалютаРасчетов = ВалютаДокумента Тогда 
		КурсВзаиморасчетов = Курс;
		КратностьВзаиморасчетов = Кратность;
		СтрокаТабличнойЧасти.СуммаПлатежа = СуммаДокумента;
		СтрокаТабличнойЧасти.СуммаВзаиморасчетов = СуммаДокумента;
	Иначе 
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		КурсСтруктура = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРасчетов, ДатаДокумента);

		ДанныеДокумента = Новый Структура();
		ДанныеДокумента.Вставить("Валюта", 		ВалютаДокумента);
		ДанныеДокумента.Вставить("Курс", 		Курс);
		ДанныеДокумента.Вставить("Кратность", 	Кратность);
		ДанныеДокумента.Вставить("ПрямойКурс", 	Ложь);
		
		ДанныВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", ВалютаРасчетов, КурсСтруктура.Курс, КурсСтруктура.Кратность);
		УчетДенежныхСредствКлиентСервер.УстановитьКурсыВзаиморасчетов(ЭтотОбъект, ДанныеДокумента, ДанныВзаиморасчетов);
			
		СтрокаТабличнойЧасти.СуммаПлатежа = ?(ВалютаДокумента = ВалютаРегламентированногоУчета,
			СуммаДокумента * КурсВзаиморасчетов / КратностьВзаиморасчетов,
			СуммаДокумента * КратностьВзаиморасчетов / КурсВзаиморасчетов);			
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовТабличнойЧасти(
			ЭтотОбъект, "РасшифровкаПлатежа", ДанныеДокумента, ДанныВзаиморасчетов, ВалютаРегламентированногоУчета);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("Структура")] = "ЗаполнитьПоСтруктуре";
	СтратегияЗаполнения[Тип("ДокументСсылка.РеализацияТоваровУслуг")] = "ЗаполнитьПоРеализацииТоваровУслуг";
	СтратегияЗаполнения[Тип("ДокументСсылка.СчетНаОплатуПокупателю")] = "ЗаполнитьПоСчетуНаОплатуПокупателю";
	СтратегияЗаполнения[Тип("ДокументСсылка.ВозвратТоваровПоставщику")] = "ЗаполнитьПоВозвратуТоваровПоставщику";

	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	Если ЗначениеЗаполнено(БанковскийСчет)
		И НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = БанковскийСчет.ВалютаДенежныхСредств;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(КурсВзаиморасчетов) 
		ИЛИ НЕ ЗначениеЗаполнено(КратностьВзаиморасчетов) Тогда 
		
		КурсВзаиморасчетов = 1;
		КратностьВзаиморасчетов = 1;
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа");

	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ВидОперации = Перечисления.ВидыОперацийППВ.ПрочийПриход Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("ВалютаРасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("СчетРасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("ФизЛицо");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		
		ПроверяемыеРеквизиты.Добавить("ПрочиеПлатежи");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППВ.ОплатаОтПокупателя
		Или ВидОперации = Перечисления.ВидыОперацийППВ.ВозвратОтПоставщика
		Или ВидОперации = Перечисления.ВидыОперацийППВ.РасчетыПоЗаймам Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ФизЛицо");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППВ.ВозвратОтСотрудника Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("ВалютаРасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("СчетРасчетов");
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППВ.ОплатаОтПокупателя Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ВидДеятельности");
	КонецЕсли;	
	
	ОбщегоНазначенияБПСервер.ДобавитьНепроверяемыеРеквизитыПоПараметрамФункциональныхОпций(МассивНепроверяемыхРеквизитов, Организация, Дата);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийППВ.ПрочийПриход
		И  РасшифровкаПлатежа.Количество() <> 0 Тогда 
		РасшифровкаПлатежа.Очистить();
	ИначеЕсли ВидОперации <> Перечисления.ВидыОперацийППВ.ПрочийПриход 
		И ПрочиеПлатежи.Количество() <> 0 Тогда
		ПрочиеПлатежи.Очистить();
	КонецЕсли;
	
	СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа") + ПрочиеПлатежи.Итог("СуммаПлатежа");
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Процедура - обработчик события ПриУстановкеНовогоНомера объекта.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПрефиксКассыИБанковскогоСчета") Тогда
		Префикс = ?(БанковскийСчет.Префикс = "", "0", БанковскийСчет.Префикс);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ПлатежноеПоручениеВходящее.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	УчетДенежныхСредств.СформироватьДвиженияОперационнаяКурсоваяРазница(ДополнительныеСвойства, Движения, Отказ, Истина);
	БухгалтерскийУчетСервер.ОтразитьДДС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьВозвратПодотчетником(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьОборотыПоДаннымЕдиногоНалога(ДополнительныеСвойства, Движения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли