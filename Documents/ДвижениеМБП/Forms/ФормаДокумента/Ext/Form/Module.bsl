
#Область ОбработчикиСлужебные

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы, ОбщийПодбор = Истина)
	
	ДатаРасчетов		= ДатаДокумента;
	
	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Товары'");
	КонецЕсли;
	ЗаголовокПодбора = СтрШаблон(НСтр("ru = 'Подбор номенклатуры в %1 (%2)'"), Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов", ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация" , Объект.Организация);
	ПараметрыФормы.Вставить("Склад"       , Объект.Склад);
	ПараметрыФормы.Вставить("Подразделение"  , Неопределено); 
	ПараметрыФормы.Вставить("МОЛ"  			, Объект.ФизЛицо);		
	ПараметрыФормы.Вставить("Заголовок"   , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("СтатусМБП"   , Неопределено);
	ПараметрыФормы.Вставить("ВидПодбора"  , ПолучитьВидПодбора(Объект.ВидОперации));
	ПараметрыФормы.Вставить("ИмяТаблицы"  , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"      , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
	ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("ОбщийПодбор", 	ОбщийПодбор);
	ПараметрыФормы.Вставить("СпособОценки", ПредопределенноеЗначение("Перечисление.СпособыОценки.ПустаяСсылка"));
	ПараметрыФормы.Вставить("ПодборНоменклатурыПоПартии", Объект.ПодборНоменклатурыПоПартии);
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция ПолучитьВидПодбора(ВидОперации)

	Если ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.ПеремещениеТоваровНаМБПВЭксплуатации 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.ПеремещениеТоваровНаМБП Тогда
		Возврат "";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.ВозвратНаСклад 
		Или ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.ПеремещениеМБПВЭксплуатации 
		Или ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.СписаниеИзЭксплуатации 
		Или ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.Реставрация И Объект.РеставрацияСоСклада <> 0 Тогда 
		Возврат "ПодборМБПЭксплуатация";	
	Иначе
		Возврат "ПодборМБПСклад"
	КонецЕсли;
	
КонецФункции // ПолучитьВидПодбора()

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыМБПНаСервере(Параметры)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресПодобраннойНоменклатурыВХранилище);	
	
	Для каждого СтрокаПодбора Из ТаблицаОбработки Цикл
		ОтборСтруктура = Новый Структура;
		ОтборСтруктура.Вставить("Номенклатура", СтрокаПодбора.Номенклатура);
		ОтборСтруктура.Вставить("ИндивидуальныйНомер", СтрокаПодбора.ИндивидуальныйНомер);
		ОтборСтруктура.Вставить("ДатаВыдачи", СтрокаПодбора.ДатаВыдачи);
		Если Объект.ПодборНоменклатурыПоПартии Тогда
			ОтборСтруктура.Вставить("Партия", СтрокаПодбора.Партия);
		КонецЕсли;		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ОтборСтруктура);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + СтрокаПодбора.Количество;	
		Иначе
			Если УПП.КоличественныйУчетМБП Тогда
				СтрокаТабличнойЧасти 					= Объект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаПодбора);
				СтрокаТабличнойЧасти.предСтатусМБП      = СтрокаПодбора.СтатусМБП;
			Иначе 
				Для Счетчик = 1 по СтрокаПодбора.Количество Цикл
					СтрокаТабличнойЧасти 					= Объект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаПодбора);
					СтрокаТабличнойЧасти.Количество    = 1;
					СтрокаТабличнойЧасти.предСтатусМБП = СтрокаПодбора.СтатусМБП;
					СтрокаТабличнойЧасти.Сумма         = СтрокаПодбора.Сумма/СтрокаПодбора.Количество;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияПодборТМЗНаСервере(Параметры)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресПодобраннойНоменклатурыВХранилище);	
	Для каждого СтрокаПодбора Из ТаблицаОбработки Цикл
		ОтборСтруктура = Новый Структура;
		ОтборСтруктура.Вставить("Номенклатура", СтрокаПодбора.Номенклатура);
		ОтборСтруктура.Вставить("СчетУчетаТоваров", СтрокаПодбора.СчетУчета);
		ОтборСтруктура.Вставить("Партия", 		СтрокаПодбора.Партия);		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ОтборСтруктура);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + СтрокаПодбора.Количество;	
		Иначе
			СтрокаТабличнойЧасти 				= Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаПодбора);
			СтрокаТабличнойЧасти.СчетУчетаТоваров   = СтрокаПодбора.СчетУчета;
			СтрокаТабличнойЧасти.предСтатусМБП  = ПредопределенноеЗначение("Перечисление.СтатусыМБП.Новый");
		КонецЕсли;
	КонецЦикла;                              
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораДляРеставрации()
	Элементы.РеставрацияМБП.СписокВыбора.ЗагрузитьЗначения(Объект.Товары.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура"));	
КонецПроцедуры // ()

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьТоварыНаСервере()
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДвижениеМБП.ПеремещениеМБПВЭксплуатации") Тогда	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	МБПЭксплуатацияОстатки.Организация,
			|	МБПЭксплуатацияОстатки.Номенклатура,
			|	МБПЭксплуатацияОстатки.Партия,
			|	МБПЭксплуатацияОстатки.ИнвНомер КАК ИндивидуальныйНомер,
			|	МБПЭксплуатацияОстатки.МОЛ,
			|	МБПЭксплуатацияОстатки.КоличествоОстаток КАК Количество,
			|	МБПЭксплуатацияОстатки.СуммаОстаток КАК Сумма,
			|	ЗНАЧЕНИЕ(Перечисление.СтатусыМБП.Эксплуатация) КАК предСтатусМБП,
			|	ВЫБОР
			|		КОГДА МБПЭксплуатацияОстатки.КоличествоОстаток = 0
			|			ТОГДА 0
			|		ИНАЧЕ МБПЭксплуатацияОстатки.СуммаОстаток / МБПЭксплуатацияОстатки.КоличествоОстаток
			|	КОНЕЦ КАК Цена,
			|	МБПЭксплуатацияОстатки.ДатаВыдачи
			|ИЗ
			|	РегистрНакопления.МБПЭксплуатация.Остатки(
			|			&Дата,
			|			МОЛ = &МОЛ
			|				И Организация = &Организация) КАК МБПЭксплуатацияОстатки";
		
		Запрос.УстановитьПараметр("Дата", 			ДатаДокумента);
		Запрос.УстановитьПараметр("МОЛ", 			Объект.ФизЛицо);
		Запрос.УстановитьПараметр("Организация", 	Объект.Организация);
		
		Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДвижениеМБП.ПеремещениеМБП") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	МБПСкладОстатки.Организация,
			|	МБПСкладОстатки.Номенклатура,
			|	МБПСкладОстатки.Партия,
			|	МБПСкладОстатки.ИнвНомер КАК ИндивидуальныйНомер,
			|	МБПСкладОстатки.КоличествоОстаток КАК Количество,
			|	МБПСкладОстатки.СуммаОстаток КАК Сумма,
			|	ЗНАЧЕНИЕ(Перечисление.СтатусыМБП.Склад) КАК предСтатусМБП,
			|	ВЫБОР
			|		КОГДА МБПСкладОстатки.КоличествоОстаток = 0
			|			ТОГДА 0
			|		ИНАЧЕ МБПСкладОстатки.СуммаОстаток / МБПСкладОстатки.КоличествоОстаток
			|	КОНЕЦ КАК Цена
			|ИЗ
			|	РегистрНакопления.МБПСклад.Остатки(
			|			&Дата,
			|			Склад = &Склад
			|				И Организация = &Организация) КАК МБПСкладОстатки";
		
		Запрос.УстановитьПараметр("Дата", 			ДатаДокумента);
		Запрос.УстановитьПараметр("Склад", 			Объект.Склад);
		Запрос.УстановитьПараметр("Организация", 	Объект.Организация);
		
		Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());			
	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьТоварыНаСервере()

&НаСервере
Процедура ДатьИнвентарныеНомераНаСервере()

	 // последний номер
	МаксНомерМБП = ПолучитьПоследнийНомерМБП();	
	
	// все мбп у которых флаг по номерам
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Количество КАК КоличествоНоменклатуры
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&Товары КАК Товары
	|ГДЕ
	|	Товары.ПоНомерам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.НомерСтроки,
	|	ВТ.Номенклатура,
	|	ВТ.КоличествоНоменклатуры
	|ИЗ
	|	ВТ КАК ВТ";
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		// обход выборки
		Пока Выборка.Следующий() Цикл
			
			СтрокиТЧ = Объект.Товары.НайтиСтроки(Новый Структура("НомерСтроки",Выборка.НомерСтроки));
			
			Если Не СтрокиТЧ = Неопределено Тогда
				НайденаяСтрока = СтрокиТЧ[0];	
			КонецЕсли;
			      		
			Обойти = Выборка.КоличествоНоменклатуры;
			
			Для Номер = 1 По Обойти Цикл
				// установка номеров для мбп
				// заполнение номеров в ТЧ
				Если Номер = 1 Тогда 
					НайденаяСтрока.ИндивидуальныйНомер = МаксНомерМБП + Номер;           
				ИначеЕсли Номер = Обойти Тогда 
					НайденаяСтрока.ИндивидуальныйНомерКонец = МаксНомерМБП + Номер;           
				КонецЕсли;
				  		
			КонецЦикла;
			
			МаксНомерМБП = МаксНомерМБП + Обойти;           
			
		КонецЦикла; 
   КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПоследнийНомерМБП()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(МБПЭксплуатацияОстаткиИОбороты.ИнвНомер) КАК ИнвНомер
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	РегистрНакопления.МБПЭксплуатация.ОстаткиИОбороты(, , Регистратор, Движения, ) КАК МБПЭксплуатацияОстаткиИОбороты
	|ГДЕ
	|	НЕ МБПЭксплуатацияОстаткиИОбороты.Регистратор = &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(МБПСкладОстаткиИОбороты.ИнвНомер)
	|ИЗ
	|	РегистрНакопления.МБПСклад.ОстаткиИОбороты(, , Регистратор, Движения, ) КАК МБПСкладОстаткиИОбороты
	|ГДЕ
	|	НЕ МБПСкладОстаткиИОбороты.Регистратор = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ.ИнвНомер, 0) КАК ИнвНомер
	|ИЗ
	|	ВТ КАК ВТ";
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда 	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.ИнвНомер;
	Иначе 
		Возврат 0
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	                                                                                   	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
    УПП = БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	УстановитьВидимостьДоступностьЭлементов();
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

	// СтандартныеПодсисте.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаВажныеКоманды);
	// Конец СтандартныеПодсистемы.Печать
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТоварыМБП" И ТипЗнч(Параметр) = Тип("Структура") Тогда		
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыМБПНаСервере(Параметр);
	ИначеЕсли  Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДвижениеМБП.ПеремещениеТоваровНаМБПВЭксплуатации") 
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДвижениеМБП.ПеремещениеТоваровНаМБП") Тогда
		ОбработкаОповещенияПодборТМЗНаСервере(Параметр);
	КонецЕсли;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДвижениеМБП.Реставрация") Тогда
		ЗаполнитьСписокВыбораДляРеставрации();		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетСервер.ПроверитьСуществованиеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	Объект.Товары.Очистить();
	Объект.Реставрация.Очистить();
	Объект.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	
	Объект.СчетЗатрат = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДвижениеМБП.Реставрация") Тогда
		Объект.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДвижениеМБП.ПеремещениеТоваровНаМБПВЭксплуатации") Тогда
		Объект.СкладПолучатель = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		Объект.ПодборНоменклатурыПоПартии = Истина;		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДвижениеМБП.ПеремещениеТоваровНаМБП") Тогда
		Объект.ПодборНоменклатурыПоПартии = Истина;
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборМБПДляРеставрацииПриИзменении(Элемент)
	Если Объект.РеставрацияСоСклада = 0 Тогда
		Объект.ФизЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");	
	Иначе
		Объект.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");	
	КонецЕсли;
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатурыПоПартииПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подбор(Команда)
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатьИнвентарныеНомера(Команда)
	ДатьИнвентарныеНомераНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРеставрация(Команда)
	Для каждого СтрокаРеставрация Из Объект.Реставрация Цикл
		ВыбранныйМБП = СтрокаРеставрация.МБП;
		Если ЗначениеЗаполнено(ВыбранныйМБП) И Объект.Товары.Количество() >= 0 Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("Номенклатура", ВыбранныйМБП);
			МассивСтрок = Объект.Товары.НайтиСтроки(Отбор);
			Если МассивСтрок.Количество() = 0 Тогда
				СтрокаРеставрация.НомерСтрокиМБП = 0;
				СтрокаРеставрация.Цена = 0;
				СтрокаРеставрация.Сумма = 0;
				СтрокаРеставрация.предСтатусМБП = ПредопределенноеЗначение("Перечисление.СтатусыМБП.ПустаяСсылка");
				СтрокаРеставрация.МБП = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
			Иначе	
				СтрокаРеставрация.НомерСтрокиМБП = МассивСтрок[0].НомерСтроки;
				СтрокаРеставрация.Сумма = МассивСтрок[0].Сумма;
				Если ЗначениеЗаполнено(СтрокаРеставрация.Количество) Тогда
					СтрокаРеставрация.Цена =  СтрокаРеставрация.Сумма / СтрокаРеставрация.Количество;
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	Если Объект.Товары.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьТабличнуюЧастьТовары", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет очищена! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);	
	Иначе
		ЗаполнитьТабличнуюЧастьТоварыНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборЧленаКомиссии(Команда)
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("МножественныйВыбор", Истина);
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыПодбора, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ПодборТМЗ(Команда)
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьТабличнуюЧастьТовары(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
        ЗаполнитьТабличнуюЧастьТоварыНаСервере();
    КонецЕсли;
КонецПроцедуры // ЗаполнитьПоОснованию()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = ТИП("СправочникСсылка.ФизическиеЛица") Тогда
		СтрокаТабличнойЧасти = Элементы.Комиссия.ТекущиеДанные;
		Если СтрокаТабличнойЧасти = Неопределено ИЛИ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ФизЛицо) Тогда
			СтрокаТабличнойЧасти = Объект.Комиссия.Добавить();	
		КонецЕсли;	
		СтрокаТабличнойЧасти.ФизЛицо = ВыбранноеЗначение;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = ТИП("Массив") Тогда
		СтрокаТабличнойЧасти = Элементы.Комиссия.ТекущиеДанные;
		Для каждого ЭлементПодбора Из ВыбранноеЗначение Цикл
			Если СтрокаТабличнойЧасти = Неопределено ИЛИ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ФизЛицо) Тогда
				СтрокаТабличнойЧасти = Объект.Комиссия.Добавить();	
			КонецЕсли;	
			СтрокаТабличнойЧасти.ФизЛицо = ЭлементПодбора;
			ДанныеФизЛица 			= БухгалтерскийУчетСервер.ДанныеФизЛица(Объект.Организация, ЭлементПодбора, ДатаДокумента);
			СтрокаТабличнойЧасти.Должность 	= ДанныеФизЛица.Должность;			
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТабличныхЧастей
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти 		= Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Сумма	= СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДвижениеМБП.Реставрация") Тогда
		ЗаполнитьСписокВыбораДляРеставрации()
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РеставрацияНомерСтрокиМБППриИзменении(Элемент)	
	СтрокаРеставрация = Элементы.Реставрация.ТекущиеДанные;
	НомерСтрокиМБП = СтрокаРеставрация.НомерСтрокиМБП;
	Если ЗначениеЗаполнено(НомерСтрокиМБП) И Объект.Товары.Количество() >= НомерСтрокиМБП Тогда
		СтрокаРеставрация.МБП = Объект.Товары[НомерСтрокиМБП - 1].Номенклатура;
		СтрокаРеставрация.предСтатусМБП = Объект.Товары[НомерСтрокиМБП - 1].предСтатусМБП;
		СтрокаРеставрация.Сумма = Объект.Товары[НомерСтрокиМБП - 1].Сумма;
		Если ЗначениеЗаполнено(СтрокаРеставрация.Количество) Тогда
			СтрокаРеставрация.Цена =  СтрокаРеставрация.Сумма / СтрокаРеставрация.Количество;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РеставрацияМБППриИзменении(Элемент)
	СтрокаРеставрация = Элементы.Реставрация.ТекущиеДанные;
	ВыбранныйМБП = СтрокаРеставрация.МБП;
	Если ЗначениеЗаполнено(ВыбранныйМБП) И Объект.Товары.Количество() >= 0 Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", ВыбранныйМБП);
		МассивСтрок = Объект.Товары.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() = 0 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Выбранное МБП ""%1"" не найдено в таблице МБП'"), СтрокаРеставрация.МБП);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
				Объект.Ссылка,   
				ТекстСообщения,
				"Реставрация",
				СтрокаРеставрация.НомерСтроки,
				"МБП",
				Истина);					
			Иначе
				СтрокаРеставрация.предСтатусМБП = МассивСтрок[0].предСтатусМБП;
				СтрокаРеставрация.Сумма = МассивСтрок[0].Сумма;
				Если ЗначениеЗаполнено(СтрокаРеставрация.Количество) Тогда
					СтрокаРеставрация.Цена =  СтрокаРеставрация.Сумма / СтрокаРеставрация.Количество;
				КонецЕсли;				
				СтрокаРеставрация.НомерСтрокиМБП = МассивСтрок[0].НомерСтроки;
		КонецЕсли;			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РеставрацияКоличествоПриИзменении(Элемент)
	СтрокаРеставрация = Элементы.Реставрация.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаРеставрация);
КонецПроцедуры

#КонецОбласти

#Область УправлениеВнешнимВидом
&НаСервере
// Процедура устанавливает видимость и доступность элементов.
//
Процедура УстановитьВидимостьДоступностьЭлементов()	
	
	Элементы.ГруппаРеставрация.Видимость 			= Ложь;	
	Элементы.ПодборМБПДляРеставрации.Видимость 		= Ложь;          
	Элементы.ТоварыЗаполнить.Видимость          	= Ложь;
	Элементы.ТоварыДатаВыдачи.Видимость             = Ложь;
	Элементы.СтраницаКомиссия.Видимость				= Ложь;
	Элементы.ТоварыСчетУчетаТоваров.Видимость			= Ложь;
	Элементы.ПодборТМЗ.Видимость                    = Ложь;
	Элементы.ТоварыПодбор.Видимость                 = Истина;
	Элементы.ТоварыЗаполнить.Видимость              = Истина;
	Элементы.ПодборНоменклатурыПоПартии.Доступность = Истина;
	
	Если НЕ УПП.КоличественныйУчетМБП Тогда 
		Элементы.ТоварыДатьИнвентарныеНомера.Видимость = Объект.ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.ВводМБПВЭксплуатацию;
		Элементы.ТоварыПоНомерам.Видимость             = Объект.ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.ВводМБПВЭксплуатацию;
		Элементы.ТоварыИндивидуальныйНомер.Видимость   = Истина;
		Элементы.ТоварыКоличество.Доступность = Ложь;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.ВводМБПВЭксплуатацию Тогда
		Элементы.Физлицо.Видимость					= Истина;
		Элементы.ФизЛицоПолучатель.Видимость	 	= Ложь;
		Элементы.СкладПолучатель.Видимость			= Ложь;
		Элементы.Склад.Видимость			   		= Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.ВозвратНаСклад Тогда
		Элементы.Физлицо.Видимость					= Истина;
		Элементы.ФизЛицоПолучатель.Видимость	 	= Ложь;
		Элементы.СкладПолучатель.Видимость			= Ложь;
		Элементы.Склад.Видимость			   		= Истина;
		Элементы.ТоварыДатаВыдачи.Видимость         = Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.ПеремещениеМБП Тогда
		Элементы.Физлицо.Видимость					= Ложь;
		Элементы.ФизЛицоПолучатель.Видимость	 	= Ложь;
		Элементы.СкладПолучатель.Видимость			= Истина;
		Элементы.Склад.Видимость			   		= Истина;
		Элементы.ТоварыЗаполнить.Видимость          = Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.СписаниеСоСклада Тогда		
		Элементы.Физлицо.Видимость					= Ложь;
		Элементы.ФизЛицоПолучатель.Видимость	 	= Ложь;
		Элементы.СкладПолучатель.Видимость			= Истина;
		Элементы.Склад.Видимость			   		= Истина;		
		Элементы.СкладПолучатель.Видимость			= Ложь;
		Элементы.СтраницаКомиссия.Видимость			= Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.ПеремещениеМБПВЭксплуатации Тогда 
		Элементы.Физлицо.Видимость					= Истина;
		Элементы.ФизЛицоПолучатель.Видимость	 	= Истина;
		Элементы.СкладПолучатель.Видимость			= Ложь;
		Элементы.Склад.Видимость			   		= Ложь;
		Элементы.ТоварыЗаполнить.Видимость          = Истина;
		Элементы.ТоварыДатаВыдачи.Видимость         = Истина;
				
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.СписаниеИзЭксплуатации Тогда  		
		Элементы.Физлицо.Видимость					= Истина;
		Элементы.ФизЛицоПолучатель.Видимость	 	= Истина;
		Элементы.СкладПолучатель.Видимость			= Ложь;
		Элементы.Склад.Видимость			   		= Ложь;
		Элементы.ТоварыДатаВыдачи.Видимость         = Истина;
		Элементы.ФизЛицоПолучатель.Видимость	 	= Ложь;
		Элементы.СтраницаКомиссия.Видимость			= Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.Реставрация Тогда  
		Элементы.Физлицо.Видимость					= НЕ Объект.РеставрацияСоСклада = 0;
		Элементы.ФизЛицоПолучатель.Видимость	 	= Ложь;
		Элементы.СкладПолучатель.Видимость			= Ложь;
		Элементы.Склад.Видимость			   		= Объект.РеставрацияСоСклада = 0;
		Элементы.ГруппаРеставрация.Видимость 		= Истина;
		Элементы.ПодборМБПДляРеставрации.Видимость 	= Истина;
		Элементы.ТоварыДатаВыдачи.Видимость         = Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.ПеремещениеТоваровНаМБПВЭксплуатации Тогда 
		Элементы.Физлицо.Видимость					= Ложь;
		Элементы.ФизЛицоПолучатель.Видимость	 	= Истина;
		Элементы.СкладПолучатель.Видимость			= Ложь;
		Элементы.Склад.Видимость			   		= Истина;
		Элементы.ТоварыЗаполнить.Видимость          = Истина;
		Элементы.ТоварыДатаВыдачи.Видимость         = Истина;
		Элементы.ТоварыСчетУчетаТоваров.Видимость		= Истина;
		Элементы.ПодборТМЗ.Видимость                = Истина;
		Элементы.ТоварыПодбор.Видимость             = Ложь;
		Элементы.ТоварыЗаполнить.Видимость          = Ложь;
		Элементы.ПодборНоменклатурыПоПартии.Доступность = Ложь;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.ПеремещениеТоваровНаМБП Тогда 
		Элементы.Физлицо.Видимость					= Ложь;
		Элементы.ФизЛицоПолучатель.Видимость	 	= Ложь;
		Элементы.СкладПолучатель.Видимость			= Истина;
		Элементы.Склад.Видимость			   		= Истина;
		Элементы.ТоварыЗаполнить.Видимость          = Истина;
		Элементы.ТоварыДатаВыдачи.Видимость         = Истина;
		Элементы.ТоварыСчетУчетаТоваров.Видимость		= Истина;
		Элементы.ПодборТМЗ.Видимость                = Истина;
		Элементы.ТоварыПодбор.Видимость             = Ложь;
		Элементы.ТоварыЗаполнить.Видимость          = Ложь;
		Элементы.ПодборНоменклатурыПоПартии.Доступность = Ложь;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.ПеремещениеМБПНаТовары Тогда 
		Элементы.Физлицо.Видимость					= Ложь;
		Элементы.ФизЛицоПолучатель.Видимость	 	= Ложь;
		Элементы.СкладПолучатель.Видимость			= Истина;
		Элементы.Склад.Видимость			   		= Истина;
		Элементы.ТоварыЗаполнить.Видимость          = Истина;
		Элементы.ТоварыДатаВыдачи.Видимость         = Истина;
		Элементы.ТоварыСчетУчетаТоваров.Видимость		= Истина;
		Элементы.ПодборТМЗ.Видимость                = Ложь;
		Элементы.ТоварыПодбор.Видимость             = Истина;
		Элементы.ТоварыЗаполнить.Видимость          = Ложь;
		Элементы.ПодборНоменклатурыПоПартии.Доступность = Ложь;
		
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.ВводМБПВЭксплуатацию 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.СписаниеСоСклада 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.ПеремещениеМБПВЭксплуатации 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.ПеремещениеТоваровНаМБПВЭксплуатации Тогда
		Элементы.ГруппаЗатрат.Видимость = Истина;
	Иначе 
		Элементы.ГруппаЗатрат.Видимость = Ложь;
	КонецЕсли;
	
	
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()    

#КонецОбласти

#Область ПроцедурыИФункцииКомиссия

// Процедура - комиссия перед удалением
//
// Параметры:
//  Элемент	 - 	 - 
//  Отказ	 - 	 - 
&НаКлиенте
Процедура КомиссияПередУдалением(Элемент, Отказ)

	ТекущаяСтрокаТЧ = Элементы.Комиссия.ТекущиеДанные;
	Если ТекущаяСтрокаТЧ.Председатель Тогда
		ИндексУдаляемойСтроки = Объект.Комиссия.Индекс(ТекущаяСтрокаТЧ);
		КоличествоСтрок = Объект.Комиссия.Количество() - 1;

		Если КоличествоСтрок > 0 Тогда
			Если ИндексУдаляемойСтроки <= КоличествоСтрок - 1 Тогда
				ИндексНовогоПредседателя = ИндексУдаляемойСтроки + 1;
			Иначе
				ИндексНовогоПредседателя = КоличествоСтрок - 1;
			КонецЕсли;
			Объект.Комиссия[ИндексНовогоПредседателя].Председатель = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура - комиссия при начале редактирования
//
// Параметры:
//  Элемент		 - 	 - 
//  НоваяСтрока	 - 	 - 
//  Копирование	 - 	 - 
&НаКлиенте
Процедура КомиссияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если Копирование Тогда
		ТекущаяСтрокаТЧ = Элементы.Комиссия.ТекущиеДанные;
		ТекущаяСтрокаТЧ.ФизЛицо = Неопределено;
		ТекущаяСтрокаТЧ.Председатель = Ложь;
	Иначе // Создание заново
		Если Объект.Комиссия.Количество() = 1 Тогда
			Объект.Комиссия[0].Председатель = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - комиссия обработка выбора
//
// Параметры:
//  Элемент				 - 	 - 
//  ВыбранноеЗначение	 - 	 - 
//  СтандартнаяОбработка - 	 - 
&НаКлиенте
Процедура КомиссияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Строки = Объект.Комиссия.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение));

	Если Строки.Количество() > 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Физическое лицо ""%1"" уже подобрано!'"), ВыбранноеЗначение);
		ПоказатьПредупреждение(, ТекстСообщения, 60);
	Иначе
		НоваяСтрока = Объект.Комиссия.Добавить();
		НоваяСтрока.ФизЛицо 	= ВыбранноеЗначение;		
		Если Объект.Комиссия.Количество() = 1 Тогда
			НоваяСтрока.Председатель = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - комиссия председатель при изменении
//
// Параметры:
//  Элемент	 - 	 - 
&НаКлиенте
Процедура КомиссияПредседательПриИзменении(Элемент)

	ТекущаяСтрокаТЧ = Элементы.Комиссия.ТекущиеДанные;

	Если НЕ ТекущаяСтрокаТЧ.Председатель Тогда
		// Снимать флажок нельзя
		ТекущаяСтрокаТЧ.Председатель = Истина;
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТЧ Из Объект.Комиссия Цикл
		Если СтрокаТЧ.НомерСтроки <> ТекущаяСтрокаТЧ.НомерСтроки Тогда
			СтрокаТЧ.Председатель = Ложь;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура - комиссия физ лицо при изменении
//
// Параметры:
//  Элемент	 - 	 - 
&НаКлиенте
Процедура КомиссияФизЛицоПриИзменении(Элемент)

	Если Объект.Комиссия.Количество() = 1 Тогда
		Объект.Комиссия[0].Председатель = Истина;
	КонецЕсли;
	// получаем текущую строку
	СтрокаТабличнойЧасти 		= Элементы.Комиссия.ТекущиеДанные;	
	ДанныеФизЛица 				= БухгалтерскийУчетСервер.ДанныеФизЛица(Объект.Организация, СтрокаТабличнойЧасти.ФизЛицо, ДатаДокумента);
	СтрокаТабличнойЧасти.Должность 	= ДанныеФизЛица.Должность;
КонецПроцедуры

// Процедура - комиссия физ лицо обработка выбора
//
// Параметры:
//  Элемент				 - 	 - 
//  ВыбранноеЗначение	 - 	 - 
//  СтандартнаяОбработка - 	 - 
&НаКлиенте
Процедура КомиссияФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ТекущаяСтрокаТЧ = Элементы.Комиссия.ТекущиеДанные;

	Если ТекущаяСтрокаТЧ.ФизЛицо <> ВыбранноеЗначение Тогда

		СтрокиТабличнойЧасти = Объект.Комиссия.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение));

		Если СтрокиТабличнойЧасти.Количество() > 0 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Физическое лицо ""%1"" уже включено в состав комиссии!'"), ВыбранноеЗначение);
			ПоказатьПредупреждение(, ТекстСообщения, 60);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

