#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

// Выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеОбъектов.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.ВводМБПВЭксплуатацию;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ДвижениеМБП.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьМБПСклад(ДополнительныеСвойства,Движения,Отказ);
	БухгалтерскийУчетСервер.ОтразитьМБПЭксплуатация(ДополнительныеСвойства,Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьЗапасы(ДополнительныеСвойства,Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства,Движения, Отказ);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	Если ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.Свойство("ДвиженияМБПСкладИзменение") Тогда 
		БухгалтерскийУчетСервер.ВыполнитьКонтрольМБПСклад(Ссылка,ДополнительныеСвойства, Отказ);
	КонецЕсли;
	Если ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.Свойство("ДвиженияМБПЭксплуатацияИзменение") Тогда 
		БухгалтерскийУчетСервер.ВыполнитьКонтрольМБПЭксплуатация(Ссылка,ДополнительныеСвойства, Отказ);
	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		
КонецПроцедуры

// В обработчике события ОбработкаПроверкиЗаполнения документа выполняется
// копирование и обнуление проверяемых реквизитов для исключения стандартной
// проверки заполнения платформой и последующей проверки средствами встроенного языка.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.ВводМБПВЭксплуатацию 
		Или ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.ВозвратНаСклад Тогда  
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ФизЛицоПолучатель"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СкладПолучатель"));
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.ПеремещениеМБП Тогда		
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ФизЛицо"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ФизЛицоПолучатель"));		
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.СписаниеСоСклада Тогда		
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ФизЛицо"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ФизЛицоПолучатель"));		
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СкладПолучатель")); 				
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.ПеремещениеМБПВЭксплуатации Тогда  
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СкладПолучатель")); 
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Склад"));
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.СписаниеИзЭксплуатации Тогда  
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СкладПолучатель")); 
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Склад"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ФизЛицоПолучатель"));
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.Реставрация Тогда		
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ФизЛицо"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ФизЛицоПолучатель"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СкладПолучатель")); 
		ПроверяемыеРеквизиты.Добавить("Реставрация");
		Если РеставрацияСоСклада <> 0 Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Склад")); 
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.ПеремещениеТоваровНаМБПВЭксплуатации Тогда  
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ФизЛицо"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СкладПолучатель"));
		ПроверяемыеРеквизиты.Добавить("Товары.Номенклатура");
		ПроверяемыеРеквизиты.Добавить("Товары.СчетУчетаТоваров");
		ПроверяемыеРеквизиты.Добавить("СчетЗатрат");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.ПеремещениеТоваровНаМБП 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийДвижениеМБП.ПеремещениеМБПНаТовары Тогда		
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ФизЛицо"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ФизЛицоПолучатель"));		
		ПроверяемыеРеквизиты.Добавить("Товары.Номенклатура");
		ПроверяемыеРеквизиты.Добавить("Товары.СчетУчетаТоваров");
		
	КонецЕсли;	
	
	// Предварительный контроль
	ВыполнитьПредварительныйКонтроль(Отказ);	
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти

#КонецЕсли