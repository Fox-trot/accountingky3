#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоПоступлениюТоваровУслуг(ДанныеЗаполнения) Экспорт
	Курс = ДанныеЗаполнения.Курс;
		
	Товары.Очистить();
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		НоваяСтрока.Цена = СтрокаТабличнойЧасти.Цена * Курс; 
		НоваяСтрока.ФактурнаяСтоимость = СтрокаТабличнойЧасти.Сумма * Курс;
		НоваяСтрока.СуммаНДС = 0;
		НоваяСтрока.ДокументПоступления = ДанныеЗаполнения.Ссылка;
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.ОС Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		НоваяСтрока.Номенклатура = СтрокаТабличнойЧасти.ОсновноеСредство;
		НоваяСтрока.ДокументПоступления = ДанныеЗаполнения.Ссылка;
		НоваяСтрока.ЭтоОС = Истина;
		НоваяСтрока.Цена = СтрокаТабличнойЧасти.Сумма * Курс; 
		НоваяСтрока.ФактурнаяСтоимость = СтрокаТабличнойЧасти.Сумма * Курс;
		НоваяСтрока.СуммаНДС = 0;		
		НоваяСтрока.Количество = 1;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ПоступлениеТоваровУслуг")] = "ЗаполнитьПоПоступлениюТоваровУслуг";

	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(СпособРаспределенияАкциза) Тогда
		СпособРаспределенияАкциза = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ГТДПоИмпорту.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьНДСГТДИмпорт(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьНДСНаИмпорт(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьРеестрВвезенных(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	ПроверяемыеРеквизиты.Добавить("Товары");		
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

Процедура ПолноеРаспределениеПоДокументу(ПараметрыОбъекта) Экспорт

	РаспределитьСуммуАкциза();
	РаспределитьСуммуСопровождения();
	РаспределитьСуммыДоставки();
	РаспределитьСуммуДопрасходов();
	ПересчетСборовПошлинНалогов(ПараметрыОбъекта);
	
КонецПроцедуры // РассчитатьИРаспределить()

Процедура РаспределитьСуммуАкциза()
	
	Если СпособРаспределенияАкциза = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству Тогда
		МассивКоэффициентов = Товары.ВыгрузитьКолонку("Количество");
	ИначеЕсли СпособРаспределенияАкциза = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме Тогда
		МассивКоэффициентов = Товары.ВыгрузитьКолонку("ФактурнаяСтоимость");
	КонецЕсли;
	
	Если МассивКоэффициентов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСуммРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаАкциза, МассивКоэффициентов, 2);
	Если МассивСуммРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Товары.ЗагрузитьКолонку(МассивСуммРаспределения, "СуммаАкциза");
	
КонецПроцедуры // РаспределитьСуммуАкциза()

Процедура РаспределитьСуммуСопровождения()
	
	Если РаспределятьСопровождениеПоВесу Тогда
		МассивКоэффициентов = Товары.ВыгрузитьКолонку("Вес");
	Иначе
		МассивКоэффициентов = Товары.ВыгрузитьКолонку("ФактурнаяСтоимость");
	КонецЕсли;
	
	Если МассивКоэффициентов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСуммРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаСопровождения, МассивКоэффициентов, 2);
	Если МассивСуммРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Товары.ЗагрузитьКолонку(МассивСуммРаспределения, "СуммаСопровождения");
	
КонецПроцедуры // РаспределитьСуммуСопровождения()

Процедура РаспределитьСуммыДоставки()
	
	МассивКоэффициентов = Товары.ВыгрузитьКолонку("ФактурнаяСтоимость");
	
	Если МассивКоэффициентов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСуммРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаДоставки, МассивКоэффициентов, 2);
	Если МассивСуммРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Товары.ЗагрузитьКолонку(МассивСуммРаспределения, "СуммаДоставки");
	СуммаДоставки = Товары.Итог("СуммаДоставки");
	
КонецПроцедуры // РаспределитьСуммыДоставки()

Процедура РаспределитьСуммуДопрасходов()
	
	МассивКоэффициентов = Товары.ВыгрузитьКолонку("ФактурнаяСтоимость");
	
	Если МассивКоэффициентов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСуммРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаДопРасходы, МассивКоэффициентов, 2);
	Если МассивСуммРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Товары.ЗагрузитьКолонку(МассивСуммРаспределения, "СуммаДопРасходы");
	СуммаДопРасходы = Товары.Итог("СуммаДопРасходы");
	
КонецПроцедуры // РаспределитьСуммуДопрасходов()

Процедура ПересчетСборовПошлинНалогов(ПараметрыОбъекта)
	УПП = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ПараметрыОбъекта.Дата, Организация);
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		СтрокаТабличнойЧасти.ТаможеннаяСтоимость	= СтрокаТабличнойЧасти.ФактурнаяСтоимость + СтрокаТабличнойЧасти.СуммаДоставки + СтрокаТабличнойЧасти.СуммаАкциза;	
		СтрокаТабличнойЧасти.СуммаТаможенногоСбора	= Окр(СтрокаТабличнойЧасти.ТаможеннаяСтоимость * СтавкаТаможенногоСбора / 100, 2);
		СтрокаТабличнойЧасти.СуммаПошлины			= Окр(СтрокаТабличнойЧасти.ТаможеннаяСтоимость * СтавкаПошлины / 100, 2);
		Если СтрокаТабличнойЧасти.ЭтоОС Тогда
			СтрокаТабличнойЧасти.БазаНДС	 = СтрокаТабличнойЧасти.СуммаДоставки + СтрокаТабличнойЧасти.СуммаПошлины;
		Иначе	
			Если НДСТолькоНаПошлину Тогда
				СтрокаТабличнойЧасти.БазаНДС = СтрокаТабличнойЧасти.СуммаПошлины;
			Иначе
				СтрокаТабличнойЧасти.БазаНДС = СтрокаТабличнойЧасти.ФактурнаяСтоимость + СтрокаТабличнойЧасти.СуммаДоставки + СтрокаТабличнойЧасти.СуммаПошлины + СтрокаТабличнойЧасти.СуммаАкциза;	
			КонецЕсли;	
		КонецЕсли;
		СтрокаТабличнойЧасти.СуммаНДС		 = Окр(СтрокаТабличнойЧасти.БазаНДС * ПараметрыОбъекта.ЗначСтавкаНДС / 100, 2);
	
	КонецЦикла;
	СуммаНДС = Товары.Итог("СуммаНДС");
	БазаНДС = Товары.Итог("БазаНДС");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

