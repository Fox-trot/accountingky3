#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	УПП = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);	
	ПараметрыОбъекта 	= Новый Структура("Дата, ЗначСтавкаНДС");
	ПараметрыОбъекта.Вставить("Дата", ДатаДокумента);
	ЗначСтавкаНДС 				= ПолучитьЗначениеСтавкиНДСИзДоговора(ДатаДокумента, Объект.ДоговорКонтрагента);
	ЗначСтавкаНДССтрокой 		= Строка(ЗначСтавкаНДС) + "%";	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПараметрыОбъекта.Вставить("ЗначСтавкаНДС", ЗначСтавкаНДС);
	КонецЕсли;	
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьДоступностьЭлементов();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПодборДокументовПоступления" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		МассивДокументов = Параметр.МассивДокументов;
		ЗаполнениеТовары(МассивДокументов);
		РассчитатьИРаспределить();
		
	ИначеЕсли ИмяСобытия = "ПодборДокументовДопрасходов" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		МассивДокументов = Параметр.МассивДокументов;
		ЗаполнениеДопрасходы(МассивДокументов);
		ПересчетИтоговДопрасходы();
		РассчитатьИРаспределить();
		
	ИначеЕсли ИмяСобытия = "ПодборНоменклатурыПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище);			
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	УПП = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	ПараметрыОбъекта.Вставить("Дата", ДатаДокумента);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	УПП = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Допрасходы.
//
&НаКлиенте
Процедура ДопрасходыПриИзменении(Элемент)
	ПересчетИтоговДопрасходы();
	РассчитатьИРаспределить();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор контрагента.
//
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ПриИзмененииДоговора(ДатаДокумента, Объект.ДоговорКонтрагента)
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СтавкаТаможенногоСбора.
//
&НаКлиенте
Процедура СтавкаТаможенногоСбораПриИзменении(Элемент)
	РассчитатьИРаспределить();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СпособРаспределенияАкциза.
//
&НаКлиенте
Процедура СпособРаспределенияАкцизаПриИзменении(Элемент)
	РассчитатьИРаспределить();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаАкциза.
//
&НаКлиенте
Процедура СуммаАкцизаПриИзменении(Элемент)
	РассчитатьИРаспределить();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаСопровождения.
//
&НаКлиенте
Процедура СуммаСопровожденияПриИзменении(Элемент)
	РассчитатьИРаспределить();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РаспределятьСопровождениеПоВесу.
//
&НаКлиенте
Процедура РаспределятьСопровождениеПоВесуПриИзменении(Элемент)
	РассчитатьИРаспределить();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода НДСТолькоНаПошлину.
//
&НаКлиенте
Процедура НДСТолькоНаПошлинуПриИзменении(Элемент)
	ПересчетТабличнойЧастиТоварыНаСервере();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СтавкаПошлины.
//
&НаКлиенте
Процедура СтавкаПошлиныПриИзменении(Элемент)
	РассчитатьИРаспределить();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Процедура - обработчик события ПриИзменении поля ввода Товары.
//
&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	РассчитатьИРаспределить();
	ПроверкаНаличияОС();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Емкость.
//
&НаКлиенте
Процедура ТоварыЕмкостьПриИзменении(Элемент)
	ПересчитатьДополнительныеЕдиницыИзмерения()
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыКоличествоМест.
//
&НаКлиенте
Процедура ТоварыКоличествоМестПриИзменении(Элемент)
	ПересчитатьДополнительныеЕдиницыИзмерения()
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ЕстьОС И СтрокаТабличнойЧасти.ЭтоОС Тогда
		ТипПоля = "СправочникСсылка.ОсновныеСредства";
		Элементы.ТоварыНоменклатура.ОграничениеТипа = Новый ОписаниеТипов(ТипПоля); 
		Элементы.ТоварыНоменклатура.ОграничениеТипа.ПривестиЗначение(ТипПоля);		
	Иначе
		ТипПоля = "СправочникСсылка.Номенклатура";
		Элементы.ТоварыНоменклатура.ОграничениеТипа = Новый ОписаниеТипов(ТипПоля); 
		Элементы.ТоварыНоменклатура.ОграничениеТипа.ПривестиЗначение(ТипПоля);				
	КонецЕсли;
	Элементы.ТоварыНоменклатура.ВыбиратьТип = Ложь;
	УстановитьВидимостьДоступностьЭлементов();

КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыЭтоОС.
//
&НаКлиенте
Процедура ТоварыЭтоОСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = ТИП("СправочникСсылка.Номенклатура") И СтрокаТабличнойЧасти.ЭтоОС Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросУстановитьПризнакОС", ЭтотОбъект);
			ТекстВопроса = СтрШаблон(НСтр("ru = 'В строке ""%1"" находится Номенклатура. Если установить признак ""Это ОС"", то поле будет очищено. Продолжить установку признака ""Это ОС""?'"), СтрокаТабличнойЧасти.НомерСтроки);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
			
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = ТИП("СправочникСсылка.ОсновныеСредства") И НЕ СтрокаТабличнойЧасти.ЭтоОС Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросУстановитьПризнакНоменклатура", ЭтотОбъект);
			ТекстВопроса = СтрШаблон(НСтр("ru = 'В строке ""%1"" находится Основное средства. Если снять признак ""Это ОС"", то поле будет очищено. Продолжить снятие признака ""Это ОС""?'"), СтрокаТабличнойЧасти.НомерСтроки);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);

		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборДокументовДопрасходов(Команда)
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ДатаОтбора", ДатаДокумента);
	ОткрытьФорму("Документ.ГТДПоИмпорту.Форма.ФормаПодбораДокументовДопрасходов", ПараметрыОтбора, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросРассчитать", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Данные будут заново распределены и пересчитаны! Продолжить выполнение операции?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);

КонецПроцедуры

// Процедура - обработчик события действия команды Подбор в табличную часть Товары.
// Открывает форму подбора.
//
&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	РаботаСПодборомНоменклатурыКлиент.ОткрытьПодбор(ЭтаФорма, "Товары", "Поступление");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросРассчитать(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РассчитатьИРаспределить();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросУстановитьПризнакОС(РезультатВопроса, ДополнительныеПараметры) Экспорт
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СтрокаТабличнойЧасти.Номенклатура = ПредопределенноеЗначение("Справочник.ОсновныеСредства.ПустаяСсылка");
	Иначе
		СтрокаТабличнойЧасти.ЭтоОС = Ложь;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросУстановитьПризнакНоменклатура(РезультатВопроса, ДополнительныеПараметры) Экспорт
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		СтрокаТабличнойЧасти.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	Иначе
		СтрокаТабличнойЧасти.ЭтоОС = Истина;
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура устанавливает видимость и доступность элементов.
//
&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	Элементы.ТоварыЭтоОС.Доступность 		= Объект.ЕстьОС;
	Элементы.ТоварыЕмкость.Видимость 		= Объект.ИспользоватьДополнительныеЕдиницыИзмерения;
	Элементы.ТоварыКоличествоМест.Видимость = Объект.ИспользоватьДополнительныеЕдиницыИзмерения;
	Элементы.ТоварыВес.Видимость			= Объект.РаспределятьСопровождениеПоВесу;
	
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()    

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация, Объект.ВидОперации);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанию
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьДополнительныеЕдиницыИзмерения()
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоМест * СтрокаТабличнойЧасти.Емкость;	
КонецПроцедуры // ПересчитатьДополнительныеЕдиницыИзмерения()

&НаСервере
Процедура ЗаполнениеТовары(МассивДокументов)
	Для каждого ДокументПоступления Из МассивДокументов Цикл
		Для каждого СтрокаПоступления Из ДокументПоступления.Товары Цикл
			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаПоступления);
			СтрокаТабличнойЧасти.ДокументПоступления 	= ДокументПоступления;
			СтрокаТабличнойЧасти.ФактурнаяСтоимость		= Окр(СтрокаПоступления.Сумма * ДокументПоступления.Курс, 2);
			ПересчетСтрокиТабличнойЧастиНаСервере(СтрокаТабличнойЧасти);
		КонецЦикла;
		Для каждого СтрокаПоступления Из ДокументПоступления.ОС Цикл
			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаПоступления);
			СтрокаТабличнойЧасти.Номенклатура 			= СтрокаПоступления.ОсновноеСредство;
			СтрокаТабличнойЧасти.Количество 			= 1;
			СтрокаТабличнойЧасти.ЭтоОС 					= Истина;
			СтрокаТабличнойЧасти.ДокументПоступления 	= ДокументПоступления;
			СтрокаТабличнойЧасти.ФактурнаяСтоимость		= Окр(СтрокаПоступления.Сумма * ДокументПоступления.Курс, 2);
			СтрокаТабличнойЧасти.Цена					= СтрокаТабличнойЧасти.ФактурнаяСтоимость;
			ПересчетСтрокиТабличнойЧастиНаСервере(СтрокаТабличнойЧасти);
			Объект.ЕстьОС 								= Истина;			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры //

&НаСервере
Процедура ЗаполнениеДопрасходы(МассивДокументов)
	Для каждого ДокументДопрасходов Из МассивДокументов Цикл
		Для каждого СтрокаДопрасходы Из ДокументДопрасходов.Услуги Цикл
			СтрокаТабличнойЧасти = Объект.Допрасходы.Добавить();
			СтрокаТабличнойЧасти.ДокументДопрасходов 	= ДокументДопрасходов;
			СтрокаТабличнойЧасти.Номенклатура 			= СтрокаДопрасходы.Номенклатура;
			СтрокаТабличнойЧасти.СуммаДопрасходов		= Окр(СтрокаДопрасходы.Сумма * ДокументДопрасходов.Курс, 2);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры //

&НаСервере
Процедура ПересчетСтрокиТабличнойЧастиНаСервере(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.ТаможеннаяСтоимость	= СтрокаТабличнойЧасти.ФактурнаяСтоимость + СтрокаТабличнойЧасти.СуммаДоставки + СтрокаТабличнойЧасти.СуммаАкциза;	
	СтрокаТабличнойЧасти.СуммаТаможенногоСбора	= Окр(СтрокаТабличнойЧасти.ТаможеннаяСтоимость * Объект.СтавкаТаможенногоСбора / 100, 2);
	СтрокаТабличнойЧасти.СуммаПошлины			= Окр(СтрокаТабличнойЧасти.ТаможеннаяСтоимость * Объект.СтавкаПошлины / 100, 2);
	Если СтрокаТабличнойЧасти.ЭтоОС Тогда
		СтрокаТабличнойЧасти.БазаНДС	 = СтрокаТабличнойЧасти.СуммаДоставки + СтрокаТабличнойЧасти.СуммаПошлины;	
	Иначе	
		Если Объект.НДСТолькоНаПошлину Тогда
			СтрокаТабличнойЧасти.БазаНДС = СтрокаТабличнойЧасти.СуммаПошлины;
		Иначе
			СтрокаТабличнойЧасти.БазаНДС = СтрокаТабличнойЧасти.ФактурнаяСтоимость + СтрокаТабличнойЧасти.СуммаДоставки + СтрокаТабличнойЧасти.СуммаПошлины + СтрокаТабличнойЧасти.СуммаАкциза;	
		КонецЕсли;	
	КонецЕсли;
	СтрокаТабличнойЧасти.СуммаНДС		 = Окр(СтрокаТабличнойЧасти.БазаНДС * ЗначСтавкаНДС / 100, 2);

КонецПроцедуры // ()

&НаКлиенте
Процедура ПересчетИтоговДопрасходы()
	СуммаДопРасходы = 0;
	СуммаДоставки 	= 0;
	Для каждого СтрокаТабличнойЧасти Из Объект.Допрасходы Цикл
		Если СтрокаТабличнойЧасти.ВходитВТаможеннуюСтоимость Тогда
			СуммаДопРасходы = СуммаДопРасходы + СтрокаТабличнойЧасти.СуммаДопрасходов;
		Иначе			
		    СуммаДоставки 	= СуммаДоставки + СтрокаТабличнойЧасти.СуммаДопрасходов;
		КонецЕсли;
	КонецЦикла;
	Если НЕ Объект.СуммаДопРасходы = СуммаДопРасходы Тогда
		Объект.СуммаДопРасходы = СуммаДопРасходы;	
	КонецЕсли;
	Если НЕ Объект.СуммаДоставки = СуммаДоставки Тогда
		Объект.СуммаДоставки = СуммаДоставки;	
	КонецЕсли;

КонецПроцедуры // ПересчетИтоговДопрасходы()

&НаКлиенте
Процедура ПересчетИтоговСборыНалоги()
	Объект.СуммаТаможенногоСбора 	= Окр(Объект.Товары.Итог("ТаможеннаяСтоимость") * Объект.СтавкаТаможенногоСбора /100, 2);
	Объект.СуммаПошлины 			= Окр(Объект.Товары.Итог("ТаможеннаяСтоимость") * Объект.СтавкаПошлины /100, 2);
	Объект.СуммаНДС	                = Окр(Объект.БазаНДС * ЗначСтавкаНДС / 100, 2);

КонецПроцедуры // ПересчетИтоговСборыНалоги()

&НаСервереБезКонтекста
Функция ПолучитьЗначениеСтавкиНДСИзДоговора(Дата, Договор)
	СтавкаНДС = Договор.СтавкаНДС;
	Возврат УчетНДСВызовСервера.ПолучитьСтавкуНДС(Дата, СтавкаНДС)
КонецФункции // ПолучитьЗначениеСтавкиНДСИзДоговора(Дата, Договор)

&НаСервереБезКонтекста
Функция СтавкаНДСИзДоговора(Дата, Договор)
	Возврат Договор.СтавкаНДС;
КонецФункции 

&НаКлиенте
Процедура ПриИзмененииДоговора(ДатаДокумента, ДоговорКонтрагента)
	УстановитьСчетаРасчетовСКонтрагентами();
	ЗначСтавкаНДС 			= ПолучитьЗначениеСтавкиНДСИзДоговора(ДатаДокумента, ДоговорКонтрагента);
	Объект.СтавкаНДС 		= СтавкаНДСИзДоговора(ДатаДокумента, Объект.ДоговорКонтрагента);
	ЗначСтавкаНДССтрокой 	= Строка(ЗначСтавкаНДС) + "%";
	ПараметрыОбъекта.Вставить("ЗначСтавкаНДС", ЗначСтавкаНДС);
	ПересчетИтоговСборыНалоги()
КонецПроцедуры // ПриИзмененииДоговора(ДатаДокумента, ДоговорКонтрагента)

&НаКлиенте
Процедура УстановитьСчетаРасчетовСКонтрагентами()
	СтруктураДанные 				= Новый Структура("Организация, Контрагент, ДоговорКонтрагента", Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	СчетаУчета = ПолучитьСчетаРасчетовСКонтрагентами(СтруктураДанные);
	Объект.СчетРасчетовСКонтрагентом	= СчетаУчета.СчетРасчетовПоставщика;		
	
КонецПроцедуры // УстановитьСчетаРасчетовСКонтрагентами()

&НаСервереБезКонтекста
Функция ПолучитьСчетаРасчетовСКонтрагентами(СтруктураДанные)
	Возврат БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(СтруктураДанные.Организация, СтруктураДанные.Контрагент, СтруктураДанные.ДоговорКонтрагента);
КонецФункции

&НаСервере
Процедура РассчитатьИРаспределить()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ПолноеРаспределениеПоДокументу(ПараметрыОбъекта);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры // РаспределитьТабЧастьРасходыПоКоличеству()

&НаКлиенте
Процедура ПроверкаНаличияОС()
	НаличиеОС = Ложь;

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		Если СтрокаТабличнойЧасти.ЭтоОС Тогда
			НаличиеОС = Истина;
			Прервать;		
		КонецЕсли;	
	КонецЦикла;
	Если НЕ Объект.ЕстьОС = НаличиеОС Тогда
		Объект.ЕстьОС = НаличиеОС;
	КонецЕсли;	

КонецПроцедуры // ПроверкаНаличияОС()

&НаСервере
Процедура ПересчетТабличнойЧастиТоварыНаСервере()
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		ПересчетСтрокиТабличнойЧастиНаСервере(СтрокаТабличнойЧасти)
	КонецЦикла;	
КонецПроцедуры // ПересчетТабличнойЧастиТоварыНаСервере()

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        УстановитьВидимостьДоступностьЭлементов();
    КонецЕсли;
КонецПроцедуры // ЗаполнитьПоОснованию()

// Процедура - обработчик подбора товаров.
//
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаЗагрузки.Номенклатура));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
	КонецЦикла;
		
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

