#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);			
	
	// Одной строкой / Списком.
	Если Объект.Разделы.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Объект.Разделы.Добавить();
		СтрокаТабличнойЧасти.КлючСвязи = 1;
		СтрокаТабличнойЧасти.СтавкаСбора = ДанныеУчетнойПолитики.СтавкаТаможенногоСбора;
		СтрокаТабличнойЧасти.СтавкаНДС = УчетНДСВызовСервера.ПолучитьСтавкуНДС(ДатаДокумента, Справочники.СтавкиНДС.Стандарт);
		Элементы.Разделы.ТекущаяСтрока = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
	Иначе
		Элементы.Разделы.ТекущаяСтрока = Объект.Разделы[0].ПолучитьИдентификатор();
	КонецЕсли;	
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьДоступностьЭлементов();
	
	Если Объект.Товары.Количество() > 0 ИЛИ Объект.ОС.Количество() > 0 Тогда 
		ОписатьОтборДокументовПоступленияИКурс(Элементы.Разделы.ТекущиеДанные.КлючСвязи);
	КонецЕсли;
	
	Если Объект.Разделы.Количество() > 1 Тогда
		РазделыГТД = Истина;
		УстановитьВозможностьРедактированияСпискомФрагмент();
	КонецЕсли;	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПодборДокументаПоступления"  
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		МассивДокументов = Параметр.МассивДокументов;
		СтрокаТабличнойЧасти = Элементы.Разделы.ТекущиеДанные;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			ЗаполнениеПоПоступлению(МассивДокументов, СтрокаТабличнойЧасти.КлючСвязи);
			ОписатьОтборДокументовПоступленияИКурс(СтрокаТабличнойЧасти.КлючСвязи);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПодборДокументовДопрасходов" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		МассивДокументов = Параметр.МассивДокументов;
		СтрокаТабличнойЧасти = Элементы.Разделы.ТекущиеДанные;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			СуммаДопрасходов = ЗаполнитьДопрасходыИВернутьСумму(МассивДокументов, СтрокаТабличнойЧасти.КлючСвязи);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ДопРасходы = СтрокаТабличнойЧасти.ДопРасходы + СуммаДопрасходов;
		
	ИначеЕсли ИмяСобытия = "ПодборНоменклатурыПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище, Элементы.Разделы.ТекущиеДанные.КлючСвязи);			
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ПриИзмененииДоговора(ДатаДокумента, Объект.ДоговорКонтрагента)
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор контрагента.
//
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ПриИзмененииДоговора(ДатаДокумента, Объект.ДоговорКонтрагента)
КонецПроцедуры

&НаКлиенте
Процедура ВводСуммГТДВручнуюПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура РазделыГТДПриИзменении(Элемент)
	
	КоличествоСтрок = Объект.Разделы.Количество();	
	
	Если НЕ РазделыГТД И КоличествоСтрок > 1 Тогда
		  
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросУстановитьВозможностьРедактированияСписком", ЭтотОбъект, Новый Структура("КоличествоСтрок", КоличествоСтрок));
		ТекстВопроса = НСтр("ru = 'Все строки кроме первой будут удалены! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		УстановитьВозможностьРедактированияСпискомФрагмент();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СопровождениеПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРазделы

&НаКлиенте
Процедура РазделыПриАктивизацииСтроки(Элемент)
	
	ИмяТабличнойЧасти = "Разделы";
	БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "Товары");
	БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ОС");
	БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "Допрасходы");
	
	СтрокаТабличнойЧасти = Элементы.Разделы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		ОписатьОтборДокументовПоступленияИКурс(СтрокаТабличнойЧасти.КлючСвязи);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазделыПередУдалением(Элемент, Отказ)
	
	ИмяТабличнойЧасти = "Разделы";
	БухгалтерскийУчетКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Товары");
	БухгалтерскийУчетКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "ОС");
	БухгалтерскийУчетКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Допрасходы");
КонецПроцедуры

&НаКлиенте
Процедура РазделыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТабличнойЧасти = "Разделы";
	Если Элемент.ТекущиеДанные.КлючСвязи = 0 Тогда
		БухгалтерскийУчетКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект);
	КонецЕсли;
	БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "Товары");
	БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ОС");
	БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "Допрасходы");
	
	Элемент.ТекущиеДанные.СтавкаСбора = ДанныеУчетнойПолитики.СтавкаТаможенногоСбора;
	
	Элемент.ТекущиеДанные.СтавкаНДС = УчетНДСВызовСервера.ПолучитьСтавкуНДС(ДатаДокумента, ПредопределенноеЗначение("Справочник.СтавкиНДС.Стандарт"));
КонецПроцедуры

&НаКлиенте
Процедура РазделыРаспределениеАкциза1ПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьЭлементов();	
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыРаспределениеАкцизаПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьЭлементов();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Процедура - обработчик события ПередНачаломДобавления поля ввода Товары.
//
&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ИмяТабличнойЧасти = "Разделы";
	Отказ = БухгалтерскийУчетКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования поля ввода Товары.
//
&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ИмяТабличнойЧасти = "Товары";
		БухгалтерскийУчетКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Разделы.ТекущиеДанные;
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
	
	МассивСтрокТовары = Объект.Товары.НайтиСтроки(СтруктураОтбора);
	МассивСтрокОС = Объект.ОС.НайтиСтроки(СтруктураОтбора);
	
	Если МассивСтрокТовары.Количество() = 0 И МассивСтрокОС.Количество() = 0 Тогда
		
		Если Объект.Товары.Количество() = 0 И Объект.ОС.Количество() = 0 Тогда	
			КонтрагентОтбор = Неопределено;
		КонецЕсли;	
		
		Элементы.ДекорацияОписанияОтборовДокументовПоступления.Заголовок = 
			ПолучитьТекстОписания(КонтрагентОтбор, ДатаОтбор, ВалютаОтбор, ДоговорОтбор, ИспользоватьДопЕдиницыОтбор);
			
		Если НЕ ВалютаОтбор.Пустая() Тогда
			КурсКратность 	 = ПолучитьКурсИКратность(ВалютаОтбор, ДатаОтбор);
			Объект.Курс 	 = КурсКратность.Курс;
			Объект.Кратность = КурсКратность.Кратность;
		КонецЕсли;
		
		УстановитьВидимостьДоступностьЭлементов();
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

// Процедура - обработчик события ПередНачаломДобавления поля ввода ОС.
//
&НаКлиенте
Процедура ОСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ИмяТабличнойЧасти = "Разделы";
	Отказ = БухгалтерскийУчетКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования поля ввода ОС.
//
&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ИмяТабличнойЧасти = "ОС";
		БухгалтерскийУчетКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОСПослеУдаления(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Разделы.ТекущиеДанные;
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
	
	МассивСтрокТовары = Объект.Товары.НайтиСтроки(СтруктураОтбора);
	МассивСтрокОС = Объект.ОС.НайтиСтроки(СтруктураОтбора);
	
	Если МассивСтрокТовары.Количество() = 0 И МассивСтрокОС.Количество() = 0 Тогда
		
		Если Объект.Товары.Количество() = 0 И Объект.ОС.Количество() = 0 Тогда	
			КонтрагентОтбор = Неопределено;
		КонецЕсли;	
		
		Элементы.ДекорацияОписанияОтборовДокументовПоступления.Заголовок = 
			ПолучитьТекстОписания(КонтрагентОтбор, ДатаОтбор, ВалютаОтбор, ДоговорОтбор, ИспользоватьДопЕдиницыОтбор);
			
		Если НЕ ВалютаОтбор.Пустая() Тогда
			КурсКратность 	 = ПолучитьКурсИКратность(ВалютаОтбор, ДатаОтбор);
			Объект.Курс 	 = КурсКратность.Курс;
			Объект.Кратность = КурсКратность.Кратность;
		КонецЕсли;
		
		УстановитьВидимостьДоступностьЭлементов();
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДопрасходы

&НаКлиенте
Процедура ДопрасходыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ИмяТабличнойЧасти = "Разделы";
	Отказ = БухгалтерскийУчетКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДопрасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ИмяТабличнойЧасти = "Допрасходы";
		БухгалтерскийУчетКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьПоступление(Команда)	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ДатаДокумента", 							ДатаДокумента);
	ПараметрыОтбора.Вставить("Организация", 							Объект.Организация);
	ПараметрыОтбора.Вставить("Контрагент", 								КонтрагентОтбор);
	ПараметрыОтбора.Вставить("Договор", 								ДоговорОтбор);
	ПараметрыОтбора.Вставить("ИспользоватьДопЕдиницы", 					ИспользоватьДопЕдиницыОтбор);
	ПараметрыОтбора.Вставить("ДатаОтбор", 								ДатаОтбор);
	ПараметрыОтбора.Вставить("Валюта", 									ВалютаОтбор);
	ПараметрыОтбора.Вставить("УникальныйИдентификаторФормыВладельца", 	УникальныйИдентификатор);
	
	ОткрытьФорму("Документ.ГТДПоИмпорту.Форма.ФормаПодбораДокументовПоступления", ПараметрыОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ПодборДокументовДопрасходов(Команда)
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ДатаОтбора", 								ДатаДокумента);
	ПараметрыОтбора.Вставить("УникальныйИдентификаторФормыВладельца", 	УникальныйИдентификатор);
	
	ОткрытьФорму("Документ.ГТДПоИмпорту.Форма.ФормаПодбораДокументовДопрасходов", ПараметрыОтбора);
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	Отказ = ПроверитьЗаполнениеПередРасчетом();
	
	Если Отказ Тогда 
		Возврат
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросРассчитать", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Данные будут заново распределены и пересчитаны! Продолжить выполнение операции?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);

КонецПроцедуры

// Процедура - обработчик события действия команды Подбор в табличную часть Товары.
// Открывает форму подбора.
//
&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	РаботаСПодборомНоменклатурыКлиент.ОткрытьПодбор(ЭтаФорма, "Товары", "Поступление");
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	Если Объект.Товары.Количество() > 0 ИЛИ Объект.ОС.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросОчистить", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Закладки ""Товары"" и ""ОС"" будут очищены! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);	
	КонецЕсли;	
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросОчистить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
		Объект.ОС.Очистить();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросРассчитать(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РассчитатьИРаспределить();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросУстановитьВозможностьРедактированияСписком(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        РазделыГТД = Истина;
        Возврат;
    КонецЕсли;
	
	КоличествоСтрок = ДополнительныеПараметры.КоличествоСтрок;
	
	// Удаление строк ТЧ "Разделы" в обратном порядке.
	Пока КоличествоСтрок > 1 Цикл  
        Объект.Разделы.Удалить(Объект.Разделы[КоличествоСтрок - 1]);
        КоличествоСтрок = КоличествоСтрок - 1;
	КонецЦикла;
	
	СтрокаТабличнойЧастиРазделы = Объект.Разделы[0];
	
	КоличествоТовары = Объект.Товары.Количество();
	// Удаление строк ТЧ "Товары" в обратном порядке.
	Пока КоличествоТовары > 0 Цикл
		СтрокаТабличнойЧастиТовары = Объект.Товары[КоличествоТовары - 1];
		
		Если СтрокаТабличнойЧастиРазделы.КлючСвязи <> СтрокаТабличнойЧастиТовары.КлючСвязи Тогда
			Объект.Товары.Удалить(СтрокаТабличнойЧастиТовары);
		КонецЕсли;
		КоличествоТовары = КоличествоТовары - 1;
	КонецЦикла;
	
	КоличествоОС = Объект.ОС.Количество();
	// Удаление строк ТЧ "ОС" в обратном порядке.
	Пока КоличествоОС > 0 Цикл
		СтрокаТабличнойЧастиОС = Объект.ОС[КоличествоОС - 1];
		
		Если СтрокаТабличнойЧастиРазделы.КлючСвязи <> СтрокаТабличнойЧастиОС.КлючСвязи Тогда
			Объект.ОС.Удалить(СтрокаТабличнойЧастиОС);
		КонецЕсли;
		КоличествоОС = КоличествоОС - 1;
	КонецЦикла;
	
    Элементы.Разделы.ТекущаяСтрока = СтрокаТабличнойЧастиРазделы.ПолучитьИдентификатор();
    
    УстановитьВозможностьРедактированияСпискомФрагмент();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура устанавливает видимость и доступность элементов.
//
&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	СтрокаТабличнойЧасти = Элементы.Разделы.ТекущиеДанные;
	
	СопровождениеПоВесу 	= Объект.РаспределениеСопровождения = ПредопределенноеЗначение("Перечисление.СпособРаспределения.ПоВесу");
	АкцизНеНулевой 			= СтрокаТабличнойЧасти.Акциз <> 0;
	СопровождениеНеНулевое 	= Объект.Сопровождение <> 0;
	ДопрасходыНеНулевые 	= СтрокаТабличнойЧасти.ДопРасходы <> 0;
	
	Элементы.ТоварыКоличествоДопЕдиницы.Видимость = СтрокаТабличнойЧасти.РаспределениеАкциза = 
		ПредопределенноеЗначение("Перечисление.СпособыРаспределенияДопРасходов.ПоДопЕдиницам");
														
	Элементы.ТоварыВес.Видимость 						= СопровождениеПоВесу;													
	Элементы.ТоварыАкциз.Видимость 						= АкцизНеНулевой;
	Элементы.ТоварыСопровождение.Видимость 				= СопровождениеНеНулевое;
	Элементы.ТоварыДопРасходы.Видимость 				= ДопрасходыНеНулевые;
	
	Элементы.ОСВес.Видимость 							= СопровождениеПоВесу;
	Элементы.ОСАкциз.Видимость 							= АкцизНеНулевой;	
	Элементы.ОССопровождение.Видимость	 				= СопровождениеНеНулевое;	
	Элементы.ОСДопРасходы.Видимость 					= ДопрасходыНеНулевые;
	
	Элементы.ТоварыКоличество.ТолькоПросмотр 			= НЕ Объект.РаспределениеВручную;
	Элементы.ТоварыКоличествоДопЕдиницы.ТолькоПросмотр 	= НЕ Объект.РаспределениеВручную;
	Элементы.ТоварыВес.ТолькоПросмотр 					= НЕ Объект.РаспределениеВручную;	
	Элементы.ТоварыСумма.ТолькоПросмотр 				= НЕ Объект.РаспределениеВручную;
	Элементы.ТоварыПошлина.ТолькоПросмотр 				= НЕ Объект.РаспределениеВручную;
	Элементы.ТоварыТаможенныйСбор.ТолькоПросмотр 		= НЕ Объект.РаспределениеВручную;	
	Элементы.ТоварыАкциз.ТолькоПросмотр 				= НЕ Объект.РаспределениеВручную;
	Элементы.ТоварыСопровождение.ТолькоПросмотр 		= НЕ Объект.РаспределениеВручную;
	Элементы.ТоварыДопРасходы.ТолькоПросмотр 			= НЕ Объект.РаспределениеВручную;
	
	Элементы.ОСВес.ТолькоПросмотр 						= НЕ Объект.РаспределениеВручную;	
	Элементы.ОССумма.ТолькоПросмотр 					= НЕ Объект.РаспределениеВручную;
	Элементы.ОСПошлина.ТолькоПросмотр	 				= НЕ Объект.РаспределениеВручную;
	Элементы.ОСТаможенныйСбор.ТолькоПросмотр 			= НЕ Объект.РаспределениеВручную;	
	Элементы.ОСАкциз.ТолькоПросмотр 					= НЕ Объект.РаспределениеВручную;
	Элементы.ОССопровождение.ТолькоПросмотр 			= НЕ Объект.РаспределениеВручную;
	Элементы.ОСДопРасходы.ТолькоПросмотр 				= НЕ Объект.РаспределениеВручную;
	
	Элементы.РазделыФактурнаяСтоимость.ТолькоПросмотр	= НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыФактурнаяСтоимость1.ТолькоПросмотр	= НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыДопРасходы.ТолькоПросмотр			= НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыДопРасходы1.ТолькоПросмотр			= НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыТаможеннаяСтоимость.ТолькоПросмотр 	= НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыТаможеннаяСтоимость1.ТолькоПросмотр = НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыБазаНДС.ТолькоПросмотр 				= НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыБазаНДС1.ТолькоПросмотр 			= НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыНДС.ТолькоПросмотр 					= НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыНДС1.ТолькоПросмотр 				= НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыТаможенныйСбор.ТолькоПросмотр 		= НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыТаможенныйСбор1.ТолькоПросмотр 		= НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыПошлина.ТолькоПросмотр 				= НЕ Объект.ВводСуммГТДВручную;
	Элементы.РазделыПошлина1.ТолькоПросмотр 			= НЕ Объект.ВводСуммГТДВручную;
	
	Если НЕ ВалютаОтбор.Пустая() Тогда
		Элементы.Курс.Видимость = Истина;
		
		Если Объект.Кратность > 1 Тогда
			Элементы.Кратность.Видимость = Истина;
		Иначе 
			Элементы.Кратность.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.Курс.Видимость = Ложь;
		Элементы.Кратность.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()    

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанию
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаСервере
Процедура ЗаполнениеПоПоступлению(МассивДокументов, КлючСвязи)
	Для каждого ДокументПоступления Из МассивДокументов Цикл
		Для каждого СтрокаПоступления Из ДокументПоступления.Товары Цикл
			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаПоступления);
			СтрокаТабличнойЧасти.Вес 				 = 0;
			СтрокаТабличнойЧасти.ДокументПоступления = ДокументПоступления;
			СтрокаТабличнойЧасти.КлючСвязи 			 = КлючСвязи;	
		КонецЦикла;
		
		Для каждого СтрокаПоступления Из ДокументПоступления.ОС Цикл
			СтрокаТабличнойЧасти = Объект.ОС.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаПоступления);
			СтрокаТабличнойЧасти.ДокументПоступления = ДокументПоступления;
			СтрокаТабличнойЧасти.КлючСвязи 			 = КлючСвязи;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры //

&НаСервере
Функция ЗаполнитьДопрасходыИВернутьСумму(МассивДокументов, КлючСвязи)
	
	Сумма = 0;
	
	Для каждого ДокументДопрасходов Из МассивДокументов Цикл 
		СтрокаТабличнойЧасти = Объект.Допрасходы.Добавить();
		СтрокаТабличнойЧасти.ДокументДопрасходов = ДокументДопрасходов;
		
		КурсКратность = ПолучитьКурсИКратность(ДокументДопрасходов.ВалютаДокумента, ДатаДокумента);
		
		СтрокаТабличнойЧасти.СуммаДопрасходов	 = Окр(ДокументДопрасходов.СуммаДопРасходов * КурсКратность.Курс / КурсКратность.Кратность, 2);
		СтрокаТабличнойЧасти.КлючСвязи 			 = КлючСвязи;
		
		Сумма = Сумма + СтрокаТабличнойЧасти.СуммаДопрасходов; 
	КонецЦикла;
	
	Возврат Сумма;
КонецФункции //

&НаКлиенте
Процедура ПриИзмененииДоговора(ДатаДокумента, ДоговорКонтрагента)
	УстановитьСчетаРасчетовСКонтрагентами();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСчетаРасчетовСКонтрагентами()
	СтруктураДанные = Новый Структура("Организация, Контрагент, ДоговорКонтрагента", Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	СчетаУчета = ПолучитьСчетаРасчетовСКонтрагентами(СтруктураДанные);
	Объект.СчетРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПоставщика;		
	
КонецПроцедуры // УстановитьСчетаРасчетовСКонтрагентами()

&НаСервереБезКонтекста
Функция ПолучитьСчетаРасчетовСКонтрагентами(СтруктураДанные)
	Возврат БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(СтруктураДанные.Организация, СтруктураДанные.Контрагент, СтруктураДанные.ДоговорКонтрагента);
КонецФункции

&НаСервере
Процедура РассчитатьИРаспределить()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ПолноеРаспределениеПоДокументу();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры // РаспределитьТабЧастьРасходыПоКоличеству()

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        УстановитьВидимостьДоступностьЭлементов();
    КонецЕсли;
КонецПроцедуры // ЗаполнитьПоОснованию()

// Процедура - обработчик подбора товаров.
//
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище, КлючСвязи)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаЗагрузки.Номенклатура));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
		СтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
	КонецЦикла;
		
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// Процедура - устанавливает возможность редактирования списком (продолжение).
//
&НаКлиенте
Процедура УстановитьВозможностьРедактированияСпискомФрагмент()
    Если РазделыГТД Тогда
        Элементы.СтраницыРазделыСтрокойСписком.ТекущаяСтраница = Элементы.Списком;
    Иначе
        Элементы.СтраницыРазделыСтрокойСписком.ТекущаяСтраница = Элементы.ОднаСтрока;
    КонецЕсли;
КонецПроцедуры // УстановитьВозможностьРедактированияСписком()

&НаКлиенте
Процедура ОписатьОтборДокументовПоступленияИКурс(КлючСвязи)

	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("КлючСвязи", КлючСвязи);
	
	МассивТовары = Объект.Товары.НайтиСтроки(СтруктураОтбора);
	МассивОС 	 = Объект.ОС.НайтиСтроки(СтруктураОтбора);
	
	Если МассивТовары.Количество() > 0 Тогда
		Текст = ПолучитьТекстОписания(КонтрагентОтбор, ДатаОтбор, ВалютаОтбор, ДоговорОтбор, ИспользоватьДопЕдиницыОтбор, МассивТовары[0].ДокументПоступления);	
	ИначеЕсли МассивОС.Количество() > 0 Тогда
		Текст = ПолучитьТекстОписания(КонтрагентОтбор, ДатаОтбор, ВалютаОтбор, ДоговорОтбор, ИспользоватьДопЕдиницыОтбор, МассивОС[0].ДокументПоступления);
	Иначе
		Текст = ПолучитьТекстОписания(КонтрагентОтбор, ДатаОтбор, ВалютаОтбор, ДоговорОтбор, ИспользоватьДопЕдиницыОтбор);
	КонецЕсли;	
	
	Если НЕ ВалютаОтбор.Пустая() Тогда
		КурсКратность 	 = ПолучитьКурсИКратность(ВалютаОтбор, ДатаОтбор);
		Объект.Курс 	 = КурсКратность.Курс;
		Объект.Кратность = КурсКратность.Кратность;
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
	
	Элементы.ДекорацияОписанияОтборовДокументовПоступления.Заголовок = Текст;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстОписания(КонтрагентОтбор, ДатаОтбор, ВалютаОтбор, ДоговорОтбор, ИспользоватьДопЕдиницыОтбор, Документ = Неопределено)
	
	Если Документ = Неопределено И КонтрагентОтбор = Справочники.Контрагенты.ПустаяСсылка() Тогда
		ДоговорОтбор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ВалютаОтбор = Справочники.Валюты.ПустаяСсылка();
		Возврат "";
	Иначе	
		Если Документ = Неопределено Тогда
			ДоговорОтбор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Иначе	
			КонтрагентОтбор = Документ.Контрагент;
			ДоговорОтбор = Документ.ДоговорКонтрагента;
			ИспользоватьДопЕдиницыОтбор = Документ.ИспользоватьДопЕдиницы;
			ВалютаОтбор = Документ.ВалютаДокумента;
			ДатаОтбор = Документ.Дата; 
		КонецЕсли;
		
		Если ДоговорОтбор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
			Возврат СтрШаблон(НСтр("ru = 'Контрагент: %1; Дата: %2; Валюта: %3.'"), 
						КонтрагентОтбор.НаименованиеПолное,
						Формат(ДатаОтбор, "ДЛФ=DD"),
						ВалютаОтбор);
			
		Иначе
			Возврат СтрШаблон(НСтр("ru = 'Контрагент: %1; Дата: %2; Валюта: %3; Договор: %4; %5.'"), 
						КонтрагентОтбор.НаименованиеПолное,
						Формат(ДатаОтбор, "ДЛФ=DD"),
						ВалютаОтбор,
						ДоговорОтбор.Наименование,
						?(ИспользоватьДопЕдиницыОтбор, НСтр("ru = 'С использованием допединиц'"), НСтр("ru = 'Без использования допединиц'")));
		КонецЕсли;
	КонецЕсли;
					
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКурсИКратность(Валюта, Дата)

	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Дата);

КонецФункции // ПолучитьКурсИКратность()

&НаСервере
Функция ПроверитьЗаполнениеПередРасчетом()

	Отказ = Ложь;
	
	Если Объект.Сопровождение <> 0 И Объект.РаспределениеСопровождения = Перечисления.СпособРаспределения.ПустаяСсылка() Тогда
		ТекстСообщения = НСтр("ru = 'Сумма сопровождения заполнена, но не указан способ распределения! Рассчет отменен.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.РаспределениеСопровождения",,Отказ);
	КонецЕсли;
	
	Если Объект.Разделы.Количество() = 1 Тогда
		СтрокаТабличнойЧасти = Объект.Разделы[0];
		
		Если СтрокаТабличнойЧасти.Акциз <> 0 И 
			СтрокаТабличнойЧасти.РаспределениеАкциза = Перечисления.СпособыРаспределенияДопРасходов.ПустаяСсылка() Тогда
				
			ТекстСообщения = НСтр("ru = 'В разделе сумма акциза заполнена, но не указан способ распределения! Рассчет отменен.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
		
	Иначе	
		Для Каждого СтрокаТабличнойЧасти Из Объект.Разделы Цикл	
			Если СтрокаТабличнойЧасти.Акциз <> 0 И 
				СтрокаТабличнойЧасти.РаспределениеАкциза = Перечисления.СпособыРаспределенияДопРасходов.ПустаяСсылка() Тогда
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В разделе №%1 сумма акциза заполнена, но не указан способ распределения! Рассчет отменен.'"),
											СтрокаТабличнойЧасти.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Отказ;
КонецФункции // ПроверитьЗаполнениеПередРасчетом()


#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
