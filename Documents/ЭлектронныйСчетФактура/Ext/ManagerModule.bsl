#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Возвращает данные о файле xml.
// Параметры:
//	Параметры - Структура - данные для заполнения. 
//		* МассивСсылок - Массив - массив ссылок документов "ЭлектронныйСчетФактура"
//		* УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор.
//
// Возвращаемое значение:
//	Структура - реквизиты юридического лица.
//		* ИмяФайла - Строка - наименование сформированного файла.
//		* АдресВременногоХранилища - Строка - адерс в хранилище.
//
Функция ФормированиеФайлаXML(Параметры) Экспорт
	
	Реквизиты = РаботаСКонтрагентами.РеквизитыЭлектроннойСФ();
	
	Если ЗначениеЗаполнено(Реквизиты.ОписаниеОшибки) Тогда 
		ВызватьИсключение Реквизиты.ОписаниеОшибки;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИмяФайла", "");
	СтруктураДанных.Вставить("АдресВременногоХранилища", "");
			
	Дата = Формат(ТекущаяДатаСеанса(), "ДФ=yyyy-MM-dd-hh-mm-ss");	
	ШаблонИмениФайла = СтрШаблон(НСтр("ru = 'Счета-фактуры от %1'"), Дата);
	ИмяФайла = ШаблонИмениФайла + ".xml";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйСчетФактура.Ссылка КАК Ссылка,
		|	ЭлектронныйСчетФактура.ДоговорКонтрагента.ДатаДоговора КАК ДатаДоговора,
		|	ЭлектронныйСчетФактура.ДатаОформления КАК ДатаОформления,
		|	ЭлектронныйСчетФактура.ДоговорКонтрагента.КодПоставкиНДС.ВидПоставки.Код КАК ВидПоставкиНДСКод,
		|	ЭлектронныйСчетФактура.ДоговорКонтрагента.КодПоставкиНДС.Код КАК КодПоставкиНДСКод,
		|	ЭлектронныйСчетФактура.Организация.ИНН КАК ОрганизацияИНН,
		|	ЭлектронныйСчетФактура.Контрагент.ИНН КАК КонтрагентИНН,
		|	ЭлектронныйСчетФактура.ДоговорКонтрагента.ВалютаРасчетов.Код КАК ВалютаКод,
		|	ЭлектронныйСчетФактура.Контрагент.СтранаРезидентства.Код КАК КонтрагентСтранаРезидентстваКод,
		|	ЭлектронныйСчетФактура.КурсОбмена КАК КурсОбмена,
		|	ЭлектронныйСчетФактура.БанковскийСчет.Наименование КАК БанковскийСчетПоставщикаНаименование,
		|	ЭлектронныйСчетФактура.БанковскийСчетКонтрагента.Наименование КАК БанковскийСчетКонтрагентаНаименование,
		|	ЭлектронныйСчетФактура.ФормаОплаты КАК ФормаОплаты,
		|	ЭлектронныйСчетФактура.ВидОперации КАК ВидОперации,
		|	ЭлектронныйСчетФактура.Номер КАК Номер,
		|	ЭлектронныйСчетФактура.КорректировочнаяСчетФактура КАК КорректировочнаяСчетФактура,
		|	ЭлектронныйСчетФактура.НомерКорректировочнойЭлектроннойСФ КАК НомерКорректировочнойЭлектроннойСФ,
		|	ЭлектронныйСчетФактура.КодПричиныКорректировки КАК КодПричиныКорректировки,
		|	ЭлектронныйСчетФактура.ДоговорКонтрагента.НомерДоговора КАК НомерДоговора,
		|	ЭлектронныйСчетФактура.КодСпособаОтправки КАК КодСпособаОтправки,
		|	ЭлектронныйСчетФактура.Комментарий КАК Комментарий
		|ИЗ
		|	Документ.ЭлектронныйСчетФактура КАК ЭлектронныйСчетФактура
		|ГДЕ
		|	ЭлектронныйСчетФактура.Ссылка В (&МассивСсылок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Ссылка КАК Ссылка,
		|	Товары.СтавкаНДС КАК СтавкаНДС,
		|	Товары.СтавкаНСП КАК СтавкаНСП,
		|	Товары.СуммаНДС КАК СуммаНДС,
		|	Товары.СуммаНСП КАК СуммаНСП,
		|	Товары.Количество КАК Количество,
		|	Товары.Цена КАК Цена,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное
		|ИЗ
		|	Документ.ЭлектронныйСчетФактура.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка В (&МассивСсылок)";	
	Запрос.УстановитьПараметр("МассивСсылок", Параметры.МассивСсылок);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаДокументы = МассивРезультатов[0].Выбрать();
	
	ТаблицаНомеклатура = МассивРезультатов[1].Выгрузить();
	ТаблицаНомеклатура.Индексы.Добавить("Ссылка");
	
	ОбъектXDTO = СоздатьОбъектXDTO(Реквизиты, "receipts");
	
	Пока ВыборкаДокументы.Следующий() Цикл	
		ДатаДоговора 	= Формат(ВыборкаДокументы.ДатаДоговора, "ДФ=yyyy-MM-dd");
		ТекущаяДата 	= Формат(ВыборкаДокументы.ДатаОформления, "ДФ=yyyy-MM-dd");
		КодКодаПоставки = ВыборкаДокументы.КодПоставкиНДСКод;
		КодВидаПоставки = ВыборкаДокументы.ВидПоставкиНДСКод;
		ИННОрганизации 	= ВыборкаДокументы.ОрганизацияИНН;
		ИННКонтрагента 	= ВыборкаДокументы.КонтрагентИНН;
		КодВалюты 		= ВыборкаДокументы.ВалютаКод;
		КодСтраны 		= ВыборкаДокументы.КонтрагентСтранаРезидентстваКод;
		Курс			= Формат(ВыборкаДокументы.КурсОбмена, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0");
		БанковскийСчетПоставщика = ВыборкаДокументы.БанковскийСчетПоставщикаНаименование;
		БанковскийСчетКонтрагента = ВыборкаДокументы.БанковскийСчетКонтрагентаНаименование;
		
		Если ВыборкаДокументы.ФормаОплаты = Перечисления.ФормыОплаты.БезвозмезднаяПоставка Тогда
			КодФормыОплаты = 30;	
			
		ИначеЕсли ВыборкаДокументы.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
			КодФормыОплаты = 20;
			
		Иначе // Наличная
			КодФормыОплаты = 10;
		КонецЕсли;	
		
		Отбор = Новый Структура();
		Отбор.Вставить("Ссылка", ВыборкаДокументы.Ссылка); 
		
		НайденныеСтроки = ТаблицаНомеклатура.НайтиСтроки(Отбор);
		
		ОбъектXDTOreceipt = СоздатьОбъектXDTO(Реквизиты, "receipt");
		
		ОбъектXDTOreceipt.exchangeCode 			= Строка(ВыборкаДокументы.Ссылка.УникальныйИдентификатор()); // Уникальный идентификатор счет-фактуры
		ОбъектXDTOreceipt.receiptTypeCode 		= ?(ВыборкаДокументы.ВидОперации = Перечисления.ВидыОперацийЭСФ.АктОбОказанииУслуг, 20, 10); // Признак услуги или товара
		ОбъектXDTOreceipt.createdDate 			= ТекущаяДата; // Дата создания
		ОбъектXDTOreceipt.ownedCrmReceiptCode 	= ВыборкаДокументы.Номер; // Номер документа
		
		Если ВыборкаДокументы.КорректировочнаяСчетФактура Тогда
			ОбъектXDTOreceipt.correctedReceiptCode = ВыборкаДокументы.НомерКорректировочнойЭлектроннойСФ; // Номер корректируемой СФ
			ОбъектXDTOreceipt.correctionReasonCode = ВыборкаДокументы.КодПричиныКорректировки; // Код причины корректировочной СФ
		КонецЕсли;
		
		ОбъектXDTOreceipt.bankAccount 				= БанковскийСчетПоставщика; // Банковский счет организации
		ОбъектXDTOreceipt.contractorPin 			= ИННКонтрагента; // ИНН контрагента
		
		ОбъектXDTOreceipt.contractorDepartmentName 	= ""; // Подразделение контрагента
		
		ОбъектXDTOreceipt.contractorBankAccount 	= БанковскийСчетКонтрагента; // Банковский счет контрагента
		ОбъектXDTOreceipt.deliveryContractNumber 	= ВыборкаДокументы.НомерДоговора; // Номер договора
		ОбъектXDTOreceipt.deliveryContractDate 		= ДатаДоговора; // Дата договора
		ОбъектXDTOreceipt.goodsDeliveryTypeCode 	= ВыборкаДокументы.КодСпособаОтправки; // Код способа отправки
		ОбъектXDTOreceipt.paymentTypeCode 			= КодФормыОплаты; // Код формы оплаты
		ОбъектXDTOreceipt.invoiceDeliveryTypeCode 	= КодКодаПоставки; // Код кода поставки НДС
		ОбъектXDTOreceipt.vatDeliveryTypeCode 		= КодВидаПоставки; // Код вида поставки НДС
		ОбъектXDTOreceipt.currencyCode 				= КодВалюты; // Код валюты
		ОбъектXDTOreceipt.exchangeRate 				= Курс; // Курс
		ОбъектXDTOreceipt.contractorCitizenshipCode = КодСтраны; // Код страны
		ОбъектXDTOreceipt.note 						= ВыборкаДокументы.Комментарий; // Комментарий
		
		ОбъектXDTOgoods = goods(Реквизиты, НайденныеСтроки);	
		ОбъектXDTOreceipt.goods.Добавить(ОбъектXDTOgoods); // Запись данных о товарах
		
		ОбъектXDTO.receipt.Добавить(ОбъектXDTOreceipt);	
	КонецЦикла;	
			
	// Создание файла.
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML = Новый ЗаписьXML;
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь);	
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, ПараметрыЗаписиXML);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	Реквизиты.Прокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	ЗаписьXML.Закрыть();
	
	// Удаление лишнего текста из xml файла
	ТекстДокумент = Новый ТекстовыйДокумент;
	ТекстДокумент.Прочитать(ИмяВременногоФайла);
	ТекстФайла = ТекстДокумент.ПолучитьТекст();
	ТекстФайла = СтрЗаменить(
		ТекстФайла,
		" xmlns=""http://ws.electronicinvoice.company1c.com"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""",
		"");
	ТекстДокумент.УстановитьТекст(ТекстФайла);	
	ТекстДокумент.Записать(ИмяВременногоФайла);	
	
	Двоичное = Новый ДвоичныеДанные(ИмяВременногоФайла);
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Двоичное, Параметры.УникальныйИдентификатор);
	
	// Удаление временного файла
	ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	СтруктураДанных.ИмяФайла = ИмяФайла;
	СтруктураДанных.АдресВременногоХранилища = АдресВременногоХранилища;
	
	Возврат СтруктураДанных;
КонецФункции // ФормированиеФайла()

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает данные о файле xml.
// Параметры:
//	Реквизиты - Структура - данные для фабрики XDTO. 
//		* ИмяПакета - Строка - URI пространства имен.
//		* ОписаниеОшибки - Строка - описание ошибки.
//		* Прокси - WSПрокси - прокси для выбора сервиса.
//	ИмяТипаОбъекта - Строка - имя создаваемого типа объекта
//
// Возвращаемое значение:
//	ОбъектXDTO - созданный объект XDTO.
//
Функция СоздатьОбъектXDTO(Реквизиты, ИмяТипаОбъекта)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Реквизиты.Прокси.ФабрикаXDTO.Создать(Реквизиты.Прокси.ФабрикаXDTO.Тип(Реквизиты.ИмяПакета, ИмяТипаОбъекта));
	
КонецФункции

// Возвращает данные о файле xml.
// Параметры:
//	Реквизиты - Структура - данные для фабрики XDTO. 
//		* ИмяПакета - Строка - URI пространства имен.
//		* ОписаниеОшибки - Строка - описание ошибки.
//		* Прокси - WSПрокси - прокси для выбора сервиса.
//	ДанныеНоменклатуры - Массив - данные строк табличной части "Товары" документа ЭСФ.
//
// Возвращаемое значение:
//	ОбъектXDTO - созданный объект XDTO.
//
Функция goods(Реквизиты, ДанныеНоменклатуры)

	ОбъектXDTOgoods = СоздатьОбъектXDTO(Реквизиты, "goods");
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеНоменклатуры Цикл
		КодСтавкиНДС = "";
		
		Если СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.Стандарт Тогда
			КодСтавкиНДС = 10;
			
		ИначеЕсли СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.Нулевая Тогда
			КодСтавкиНДС = 20;
			
		ИначеЕсли СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.Освобожденная
			ИЛИ СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.Необлагаемая Тогда	
			КодСтавкиНДС = 30;
		КонецЕсли;	
			
		КодСтавкиНСП = "";
		
		Если СтрокаТабличнойЧасти.СтавкаНСП = Справочники.СтавкиНСП.Прочее Тогда
			КодСтавкиНСП = 70;
			
		ИначеЕсли СтрокаТабличнойЧасти.СтавкаНСП = Справочники.СтавкиНСП.СотоваяСвязь Тогда
			КодСтавкиНСП = 80;
			
		ИначеЕсли СтрокаТабличнойЧасти.СтавкаНСП = Справочники.СтавкиНСП.Торговля Тогда
			КодСтавкиНСП = 40;
			
		ИначеЕсли СтрокаТабличнойЧасти.СтавкаНСП = Справочники.СтавкиНСП.УслугиБанка Тогда
			КодСтавкиНСП = 60;
		КонецЕсли;
				
		ОбъектXDTOgood = СоздатьОбъектXDTO(Реквизиты, "good");
		
		ОбъектXDTOgood.vatCode 		= КодСтавкиНДС; // Код ставки НДС
		ОбъектXDTOgood.vatAmount 	= СтрокаТабличнойЧасти.СуммаНДС; // Сумма ставки НДС
		ОбъектXDTOgood.stCode 		= КодСтавкиНСП; // Код ставки НСП
		ОбъектXDTOgood.stAmount 	= СтрокаТабличнойЧасти.СуммаНСП; // Сумма ставки НСП
		ОбъектXDTOgood.goodsName 	= СтрокаТабличнойЧасти.Номенклатура.НаименованиеПолное; // Наименование товара/услуги
		ОбъектXDTOgood.baseCount 	= СтрокаТабличнойЧасти.Количество; // Количество
		ОбъектXDTOgood.price 		= СтрокаТабличнойЧасти.Цена; // Цена
		
		ОбъектXDTOgoods.good.Добавить(ОбъектXDTOgood);
	КонецЦикла;	
	
	Возврат ОбъектXDTOgoods;	
КонецФункции // goods()

#КонецОбласти

#КонецЕсли