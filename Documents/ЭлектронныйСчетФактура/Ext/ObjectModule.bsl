#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоРеализацияТоваровУслуг(ДанныеЗаполнения) Экспорт
	
	Организация	= ДанныеЗаполнения.Организация;
	
	ДатаПоставки = ДанныеЗаполнения.Дата;

	Если ДанныеЗаполнения.Услуги.Количество() > 0 Тогда 
		ВидОперации = Перечисления.ВидыОперацийЭСФ.АктОбОказанииУслуг;
	Иначе 
		ВидОперации = Перечисления.ВидыОперацийЭСФ.ПоставкаТоваров;
	КонецЕсли;	
	
	// Сведения о контрагенте
	Контрагент = ДанныеЗаполнения.Контрагент;	
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	БанковскийСчетКонтрагента = ДанныеЗаполнения.Контрагент.ОсновнойБанковскийСчет;
	
	// Форма оплаты.
	Если ДанныеЗаполнения.БезналичныйРасчет Тогда 
		ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	ИначеЕсли ДанныеЗаполнения.БезвозмезднаяПоставка Тогда	
		ФормаОплаты = Перечисления.ФормыОплаты.БезвозмезднаяПоставка;
	Иначе 
		ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
	КонецЕсли;	
	
	// Только для возврата.
	КорректировочнаяСчетФактура = Ложь;
	
	// Транспорт ж/д(10), Автомобильный(20), Воздушный(30), Иной(40).
	//КодСпособаОтправки = 40;
	
	КурсОбмена = ?(ДанныеЗаполнения.Курс = 0, 1, ДанныеЗаполнения.Курс);
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.КодТНВЭД = НоваяСтрокаТабличнойЧасти.Номенклатура.КодТНВЭД;
		НоваяСтрокаТабличнойЧасти.ЕдиницаИзмерения = НоваяСтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмерения;
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
		
		НоваяСтрокаТабличнойЧасти.СтавкаНДС = ДанныеЗаполнения.СтавкаНДС; 
		НоваяСтрокаТабличнойЧасти.СтавкаНСП = ДанныеЗаполнения.СтавкаНСП; 
	КонецЦикла;	
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Услуги Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.КодГКЭД = НоваяСтрокаТабличнойЧасти.Номенклатура.КодГКЭД;
		НоваяСтрокаТабличнойЧасти.ЕдиницаИзмерения = НоваяСтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмерения;
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
		
		НоваяСтрокаТабличнойЧасти.СтавкаНДС = ДанныеЗаполнения.СтавкаНДС; 
		НоваяСтрокаТабличнойЧасти.СтавкаНСП = ДанныеЗаполнения.СтавкаНСПУслуги; 
	КонецЦикла;	
		
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.ОС Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
		
		НоваяСтрокаТабличнойЧасти.СтавкаНДС = ДанныеЗаполнения.СтавкаНДС; 
		НоваяСтрокаТабличнойЧасти.СтавкаНСП = Справочники.СтавкиНСП.Прочее;
	КонецЦикла;	

	СуммаДокумента = Товары.Итог("Всего");	
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоВозвратТоваровОтПокупателя(ДанныеЗаполнения) Экспорт
	Организация	= ДанныеЗаполнения.Организация;
	
	ДатаПоставки = ДанныеЗаполнения.Дата;

	Если ДанныеЗаполнения.Услуги.Количество() > 0 Тогда 
		ВидОперации = Перечисления.ВидыОперацийЭСФ.АктОбОказанииУслуг;
	Иначе 
		ВидОперации = Перечисления.ВидыОперацийЭСФ.ПоставкаТоваров;
	КонецЕсли;	
	
	// Сведения о контрагенте
	Контрагент = ДанныеЗаполнения.Контрагент;	
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	БанковскийСчетКонтрагента = ДанныеЗаполнения.Контрагент.ОсновнойБанковскийСчет;
	
	// Форма оплаты.
	Если ДанныеЗаполнения.БезналичныйРасчет Тогда 
		ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	ИначеЕсли ДанныеЗаполнения.БезвозмезднаяПоставка Тогда	
		ФормаОплаты = Перечисления.ФормыОплаты.БезвозмезднаяПоставка;
	Иначе 
		ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
	КонецЕсли;	
	
	// Только для возврата.
	КорректировочнаяСчетФактура = Истина;
	НомерКорректировочнойЭлектроннойСФ = ДанныеЗаполнения.КорректировкаНомерБланкаСФ;
	// Корректировка по статье 266 НК КР (полный возврат)(10), Корректировка по статье 266 НК КР (частичный возврат)(30)
	КодПричиныКорректировки = 10;
	
	// Транспорт ж/д(10), Автомобильный(20), Воздушный(30), Иной(40).
	//КодСпособаОтправки = 40;
	
	КурсОбмена = ?(ДанныеЗаполнения.Курс = 0, 1, ДанныеЗаполнения.Курс);
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.КодТНВЭД = НоваяСтрокаТабличнойЧасти.Номенклатура.КодТНВЭД;
		НоваяСтрокаТабличнойЧасти.ЕдиницаИзмерения = НоваяСтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмерения;
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
		
		НоваяСтрокаТабличнойЧасти.СтавкаНДС = ДанныеЗаполнения.СтавкаНДС; 
		НоваяСтрокаТабличнойЧасти.СтавкаНСП = ДанныеЗаполнения.СтавкаНСП; 
	КонецЦикла;	
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Услуги Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.КодГКЭД = НоваяСтрокаТабличнойЧасти.Номенклатура.КодГКЭД;
		НоваяСтрокаТабличнойЧасти.ЕдиницаИзмерения = НоваяСтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмерения;
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
		
		НоваяСтрокаТабличнойЧасти.СтавкаНДС = ДанныеЗаполнения.СтавкаНДС; 
		НоваяСтрокаТабличнойЧасти.СтавкаНСП = ДанныеЗаполнения.СтавкаНСПУслуги; 
	КонецЦикла;	
		
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.ОС Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.ДокументОснование = ДанныеЗаполнения;
		
		НоваяСтрокаТабличнойЧасти.СтавкаНДС = ДанныеЗаполнения.СтавкаНДС; 
		НоваяСтрокаТабличнойЧасти.СтавкаНСП = Справочники.СтавкиНСП.Прочее;
	КонецЦикла;	

	СуммаДокумента = Товары.Итог("Всего");	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт 
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.РеализацияТоваровУслуг")] = "ЗаполнитьПоРеализацияТоваровУслуг";
	СтратегияЗаполнения[Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")] = "ЗаполнитьПоВозвратТоваровОтПокупателя";
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	Если БанковскийСчет.Пустая() Тогда 
		БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Организация);
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Товары");
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НЕ КорректировочнаяСчетФактура Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КодПричиныКорректировки");
		МассивНепроверяемыхРеквизитов.Добавить("НомерКорректировочнойЭлектроннойСФ");
	КонецЕсли;	
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = Товары.Итог("Всего");
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли