#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
	Если НЕ ЗначениеЗаполнено(ПорядокОкругления) Тогда
		ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр0_01;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПериодРегистрации) Тогда
		Если ЗначениеЗаполнено(Дата) Тогда
			ПериодРегистрации = НачалоМесяца(Дата);
		Иначе
			ПериодРегистрации = НачалоМесяца(ТекущаяДата());		
		КонецЕсли;
	КонецЕсли;		
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.удалитьВыплатаЗП.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ); 
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	ПроверяемыеРеквизиты.Добавить("Зарплата");
	
	// Предварительный контроль
	ВыполнитьПредварительныйКонтроль(Отказ);	
		
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Зарплата.Итог("СуммаКВыплате");
КонецПроцедуры

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

// Процедура заполняет табличную часть
//
Процедура ЗаполнитьТабличнуюЧасть() Экспорт 
	
	// 1. Получение сведений о сотрудниках, их карт счетах и подразделении
	// 2. Получение суммы к выплате
	// 3. Округление суммы, с учетом выплаты всего остатка при увольнении	
	
	ВидЗаполнения = ДополнительныеСвойства.ВидЗаполненияТабличнойЧасти;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Сотрудники, признак увольнения для выплаты всего остатка
	// Карт счета для определения банка
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	СотрудникиСрезПоследних.ФизЛицо,
		|	СотрудникиСрезПоследних.Подразделение,
		|	ВЫБОР
		|		КОГДА СотрудникиСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Уволен,
		|	КартСчетаСотрудников.Банк,
		|	КартСчетаСотрудников.НомерСчета КАК КартСчет
		|ПОМЕСТИТЬ ВременнаяТаблицаСотрудники
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПоследних(&КонецПериода, Организация = &Организация) КАК СотрудникиСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КартСчетаСотрудников КАК КартСчетаСотрудников
		|		ПО СотрудникиСрезПоследних.ФизЛицо = КартСчетаСотрудников.Владелец
		|ГДЕ
		|	СотрудникиСрезПоследних.Подразделение = &Подразделение";
	Если ЗначениеЗаполнено(Подразделение) Тогда  
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Иначе 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СотрудникиСрезПоследних.Подразделение = &Подразделение", "ИСТИНА");	
	КонецЕсли;	
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("Организация", Организация);
	РезультатЗапроса = Запрос.Выполнить();

	// Остатки по счету 3520
	Если ВидЗаполнения = "ЗаполнитьПоОстаткам" Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ХозрасчетныйОстатки.Субконто1 КАК ФизЛицо,
			|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаКВыплате
			|ПОМЕСТИТЬ ВременнаяТаблицаРассчитанныеСуммы
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&КонецПериода,
			|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НачисленнаяЗаработнаяПлата),
			|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СотрудникиОрганизаций),
			|			Организация = &Организация
			|				И Субконто1 В
			|					(ВЫБРАТЬ
			|						ВременнаяТаблицаСотрудники.ФизЛицо
			|					ИЗ
			|						ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники)) КАК ХозрасчетныйОстатки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники
			|		ПО ХозрасчетныйОстатки.Субконто1 = ВременнаяТаблицаСотрудники.ФизЛицо
			|ГДЕ
			|	ХозрасчетныйОстатки.СуммаОстатокКт > 0";
		
	// Обороты по счету 3520 для не уволенных
	// Остатки по счету 3520 для уволенных
	ИначеЕсли ВидЗаполнения = "ЗаполнитьПоОстаткамЗаМесяц" Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ХозрасчетныйОбороты.Субконто1 КАК ФизЛицо,
			|	ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаКВыплате
			|ПОМЕСТИТЬ ВременнаяТаблицаРассчитанныеСуммы
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(
			|			&НачалоПериода,
			|			&КонецПериода,
			|			,
			|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НачисленнаяЗаработнаяПлата),
			|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СотрудникиОрганизаций),
			|			Организация = &Организация
			|				И Субконто1 В
			|					(ВЫБРАТЬ
			|						ВременнаяТаблицаСотрудники.ФизЛицо
			|					ИЗ
			|						ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники
			|					ГДЕ
			|						НЕ ВременнаяТаблицаСотрудники.Уволен),
			|			,
			|			) КАК ХозрасчетныйОбороты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники
			|		ПО ХозрасчетныйОбороты.Субконто1 = ВременнаяТаблицаСотрудники.ФизЛицо
			|ГДЕ
			|	ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт > 0
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ХозрасчетныйОстатки.Субконто1,
			|	ХозрасчетныйОстатки.СуммаОстатокКт
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&КонецПериода,
			|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НачисленнаяЗаработнаяПлата),
			|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СотрудникиОрганизаций),
			|			Организация = &Организация
			|				И Субконто1 В
			|					(ВЫБРАТЬ
			|						ВременнаяТаблицаСотрудники.ФизЛицо
			|					ИЗ
			|						ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники
			|					ГДЕ
			|						ВременнаяТаблицаСотрудники.Уволен)) КАК ХозрасчетныйОстатки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники
			|		ПО ХозрасчетныйОстатки.Субконто1 = ВременнаяТаблицаСотрудники.ФизЛицо
			|ГДЕ
			|	ХозрасчетныйОстатки.СуммаОстатокКт > 0";			
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодРегистрации) + 1);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВременнаяТаблицаРассчитанныеСуммы.ФизЛицо КАК ФизЛицо,
		|	ВременнаяТаблицаСотрудники.Уволен,
		|	ВременнаяТаблицаРассчитанныеСуммы.СуммаКВыплате КАК СуммаКВыплате,
		|	БанковскиеСчета.Банк,
		|	ВременнаяТаблицаСотрудники.КартСчет,
		|	ВременнаяТаблицаСотрудники.Подразделение КАК Подразделение,
		|	БанковскиеСчета.Ссылка КАК БанковскийСчет,
		|	ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено) КАК ВыплаченностьЗарплаты
		|ИЗ
		|	ВременнаяТаблицаРассчитанныеСуммы КАК ВременнаяТаблицаРассчитанныеСуммы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники
		|		ПО ВременнаяТаблицаРассчитанныеСуммы.ФизЛицо = ВременнаяТаблицаСотрудники.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
		|		ПО ВременнаяТаблицаРассчитанныеСуммы.ФизЛицо = БанковскиеСчета.Владелец
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВременнаяТаблицаРассчитанныеСуммы.ФизЛицо.Наименование";
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаТабличнойЧасти = Зарплата.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи);
		
		Если ВыборкаДетальныеЗаписи.Уволен Тогда 
			Продолжить;
		КонецЕсли;
		
		// Округление
		СтрокаТабличнойЧасти.СуммаКВыплате = БухгалтерскийУчетСервер.ОкруглитьЦену(СтрокаТабличнойЧасти.СуммаКВыплате, ПорядокОкругления, Истина);
	КонецЦикла;
	
	МенеджерВременныхТаблиц.Закрыть();
КонецПроцедуры // ЗаполнитьТабличнуюЧасть()

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

// Процедура подготавливает данные для создания документов выплаты.
//
// Параметры:
//  НаименованиеКоманды - Строка, наименование процедуры из которой идет обращение.
//
//  МассивДокументовРКО - Массив, существующие документы РКО ранее созданные на основании "Выплаты ЗП".
//
//	МассивДокументовППИ - Массив, существующие документы ППИ ранее созданные на основании "Выплаты ЗП".
//
Процедура ПодготовитьДанныеДляДокументовВыплаты(НаименованиеКоманды, МассивДокументовРКО = Неопределено, МассивДокументовППИ = Неопределено) Экспорт
		
	МассивБанковДляОбщихППИ = Новый Массив();
	ИндексМассиваДокументовРКО = 0;
	ИндексМассиваДокументовППИ = 0;
	Для Каждого СтрокаТабличнойЧасти Из Зарплата.Выгрузить() Цикл
		
		// Условие для отбора банков у строк ТЧ с заполненными значениями "КартСчет",
		// для группирования строк в массив и создания на их основании общего ППИ.
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.КартСчет) Тогда
			Если МассивБанковДляОбщихППИ.Количество() = 0 Тогда
				МассивБанковДляОбщихППИ.Добавить(СтрокаТабличнойЧасти.Банк);
			Иначе
				НайденНовыйБанк = Истина;
				Для Каждого СтрокаСтруктуры Из МассивБанковДляОбщихППИ Цикл
					Если СтрокаСтруктуры = СтрокаТабличнойЧасти.Банк Тогда
						НайденНовыйБанк = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НайденНовыйБанк Тогда
					МассивБанковДляОбщихППИ.Добавить(СтрокаТабличнойЧасти.Банк);	
				КонецЕсли;		
			КонецЕсли;
			
		// Индивидуальные ППИ	
		ИначеЕсли ЗначениеЗаполнено(СтрокаТабличнойЧасти.БанковскийСчет) 
			И СтрокаТабличнойЧасти.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Выплачено Тогда
			
			СтруктураДляИндивППИ = Новый Структура();
			
			СтруктураДляИндивППИ.Вставить("ВыплатаЗП", 						Ссылка);
			СтруктураДляИндивППИ.Вставить("Организация", 					Организация);
			СтруктураДляИндивППИ.Вставить("Касса", 							Касса);
			СтруктураДляИндивППИ.Вставить("БанковскийСчет", 				БанковскийСчет);
			СтруктураДляИндивППИ.Вставить("Банк", 							СтрокаТабличнойЧасти.Банк);
			СтруктураДляИндивППИ.Вставить("БанковскийСчетПолучателя", 		СтрокаТабличнойЧасти.БанковскийСчет);
			СтруктураДляИндивППИ.Вставить("ФизЛицо", 						СтрокаТабличнойЧасти.ФизЛицо);
			СтруктураДляИндивППИ.Вставить("СуммаКВыплате", 					СтрокаТабличнойЧасти.СуммаКВыплате);
			СтруктураДляИндивППИ.Вставить("СтатьяДвиженияДенежныхСредств", 	СтатьяДвиженияДенежныхСредств);
												
			ДокументМенеджер = Документы.ПлатежноеПоручениеИсходящее;
			
			Если НЕ МассивДокументовППИ = Неопределено Тогда
				Если МассивДокументовППИ.Количество() > 0 И НЕ МассивДокументовППИ.Количество() = ИндексМассиваДокументовППИ Тогда
					СсылкаНаДокумент = МассивДокументовППИ[ИндексМассиваДокументовППИ].Ссылка;
					ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
					ИндексМассиваДокументовППИ = ИндексМассиваДокументовППИ + 1;
					СозданиеДокументовВыплаты(ДокументМенеджер, СтруктураДляИндивППИ, ДокументОбъект);
				Иначе
					СозданиеДокументовВыплаты(ДокументМенеджер, СтруктураДляИндивППИ);
				КонецЕсли;
			Иначе
				СозданиеДокументовВыплаты(ДокументМенеджер, СтруктураДляИндивППИ);
			КонецЕсли;
												
		// Индивидуальные РКО										
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Банк) И СформироватьРКО = 1 
			И СтрокаТабличнойЧасти.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Выплачено Тогда
			
			СтруктураДляИндивРКО = Новый Структура();
			
			СтруктураДляИндивРКО.Вставить("ВыплатаЗП", 						Ссылка);
			СтруктураДляИндивРКО.Вставить("НомерВыплаты", 					Номер);
			СтруктураДляИндивРКО.Вставить("Дата", 							Дата);
			СтруктураДляИндивРКО.Вставить("Организация", 					Организация);
			СтруктураДляИндивРКО.Вставить("Касса", 							Касса);
			СтруктураДляИндивРКО.Вставить("ФизЛицо", 						СтрокаТабличнойЧасти.ФизЛицо);
			СтруктураДляИндивРКО.Вставить("СуммаКВыплате", 					СтрокаТабличнойЧасти.СуммаКВыплате);
			СтруктураДляИндивРКО.Вставить("СтатьяДвиженияДенежныхСредств", 	СтатьяДвиженияДенежныхСредств);
												
			ДокументМенеджер = Документы.РасходныйКассовыйОрдер;
			
			Если НЕ МассивДокументовРКО = Неопределено Тогда
				Если МассивДокументовРКО.Количество() > 0 И НЕ МассивДокументовРКО.Количество() = ИндексМассиваДокументовРКО Тогда
					СсылкаНаДокумент = МассивДокументовРКО[ИндексМассиваДокументовРКО].Ссылка;
					ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
					ИндексМассиваДокументовРКО = ИндексМассиваДокументовРКО + 1;
					СозданиеДокументовВыплаты(ДокументМенеджер, СтруктураДляИндивРКО, ДокументОбъект);
				Иначе
					СозданиеДокументовВыплаты(ДокументМенеджер, СтруктураДляИндивРКО);
				КонецЕсли;
			Иначе
				СозданиеДокументовВыплаты(ДокументМенеджер, СтруктураДляИндивРКО);
			КонецЕсли;
		КонецЕсли;			                                         
	КонецЦикла;

	// Общие ППИ по каждому банку
	Если МассивБанковДляОбщихППИ.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВыплатаЗПЗарплата.ФизЛицо,
			|	ВыплатаЗПЗарплата.СуммаКВыплате,
			|	ВыплатаЗПЗарплата.КартСчет,
			|	ВыплатаЗПЗарплата.Банк,
			|	ВыплатаЗПЗарплата.БанковскийСчет
			|ИЗ
			|	Документ.ВыплатаЗП.Зарплата КАК ВыплатаЗПЗарплата
			|ГДЕ
			|	ВыплатаЗПЗарплата.Ссылка = &Ссылка
			|	И ВыплатаЗПЗарплата.Банк В (&МассивБанков)
			|	И ВыплатаЗПЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
			|	И НЕ ВыплатаЗПЗарплата.КартСчет = """"
			|
			|ИТОГИ ПО
			|	ВыплатаЗПЗарплата.Банк";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("МассивБанков", МассивБанковДляОбщихППИ); 
		ВыборкаПоИтогамБанков = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоИтогамБанков.Следующий() Цикл
			ВыборкаПоБанку = ВыборкаПоИтогамБанков.Выбрать();
			ТаблицаЗначений = Новый ТаблицаЗначений;
			ТаблицаЗначений.Колонки.Добавить("ФизЛицо",,"ФизЛицо");
			ТаблицаЗначений.Колонки.Добавить("СуммаКВыплате",,"СуммаКВыплате");
			ТаблицаЗначений.Колонки.Добавить("КартСчет",,"КартСчет");
			ТаблицаЗначений.Колонки.Добавить("Банк",,"Банк");
			ТаблицаЗначений.Колонки.Добавить("БанковскийСчет",,"БанковскийСчет");
			
			Пока ВыборкаПоБанку.Следующий() Цикл				
				Стр = ТаблицаЗначений.Добавить();
				Стр.ФизЛицо = ВыборкаПоБанку.ФизЛицо;
				Стр.СуммаКВыплате = ВыборкаПоБанку.СуммаКВыплате;
				Стр.КартСчет = ВыборкаПоБанку.КартСчет;
				Стр.Банк = ВыборкаПоБанку.Банк;
				Стр.БанковскийСчет = ВыборкаПоБанку.БанковскийСчет;				
			КонецЦикла;
			
			СтруктураДляОбщегоППИ = Новый Структура();
			
			СтруктураДляОбщегоППИ.Вставить("ВыплатаЗП", 					Ссылка);
			СтруктураДляОбщегоППИ.Вставить("Организация", 					Организация);
			СтруктураДляОбщегоППИ.Вставить("Касса", 						Касса);
			СтруктураДляОбщегоППИ.Вставить("БанковскийСчет", 				БанковскийСчет);
			СтруктураДляОбщегоППИ.Вставить("ТаблицаЗначений", 				ТаблицаЗначений);
			СтруктураДляОбщегоППИ.Вставить("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
																								
			ДокументМенеджер = Документы.ПлатежноеПоручениеИсходящее;
						
			Если НЕ МассивДокументовППИ = Неопределено Тогда
				Если МассивДокументовППИ.Количество() > 0 И НЕ МассивДокументовППИ.Количество() = ИндексМассиваДокументовППИ Тогда
					СсылкаНаДокумент = МассивДокументовППИ[ИндексМассиваДокументовППИ].Ссылка;
					ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
					ИндексМассиваДокументовППИ = ИндексМассиваДокументовППИ + 1;
					СозданиеДокументовВыплаты(ДокументМенеджер, СтруктураДляОбщегоППИ, ДокументОбъект);
				Иначе
					СозданиеДокументовВыплаты(ДокументМенеджер, СтруктураДляОбщегоППИ);
				КонецЕсли;
			Иначе
				СозданиеДокументовВыплаты(ДокументМенеджер, СтруктураДляОбщегоППИ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// Общий РКО
	Если СформироватьРКО = 2 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВыплатаЗПЗарплата.ФизЛицо,
			|	ВыплатаЗПЗарплата.СуммаКВыплате
			|ИЗ
			|	Документ.ВыплатаЗП.Зарплата КАК ВыплатаЗПЗарплата
			|ГДЕ
			|   ВыплатаЗПЗарплата.Ссылка = &Ссылка
			|	И ВыплатаЗПЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
			|	И ВыплатаЗПЗарплата.Банк = ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Результат = Запрос.Выполнить().Выгрузить();
		
		СтруктураДляОбщегоРКО = Новый Структура();
			
		СтруктураДляОбщегоРКО.Вставить("ВыплатаЗП", 					Ссылка);
		СтруктураДляОбщегоРКО.Вставить("НомерВыплаты", 					Номер);
		СтруктураДляОбщегоРКО.Вставить("Дата", 							Дата);
		СтруктураДляОбщегоРКО.Вставить("Организация", 					Организация);
		СтруктураДляОбщегоРКО.Вставить("Касса", 						Касса);
		СтруктураДляОбщегоРКО.Вставить("ТаблицаЗначений", 				Результат);
		СтруктураДляОбщегоРКО.Вставить("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
											
		ДокументМенеджер = Документы.РасходныйКассовыйОрдер;
		
		Если НЕ МассивДокументовРКО = Неопределено Тогда
			Если МассивДокументовРКО.Количество() > 0 И НЕ МассивДокументовРКО.Количество() = ИндексМассиваДокументовРКО Тогда
				СсылкаНаДокумент = МассивДокументовРКО[ИндексМассиваДокументовРКО].Ссылка;
				ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
				ИндексМассиваДокументовРКО = ИндексМассиваДокументовРКО + 1;
				СозданиеДокументовВыплаты(ДокументМенеджер, СтруктураДляОбщегоРКО, ДокументОбъект);
			Иначе
				СозданиеДокументовВыплаты(ДокументМенеджер, СтруктураДляОбщегоРКО);
			КонецЕсли;
		Иначе
			СозданиеДокументовВыплаты(ДокументМенеджер, СтруктураДляОбщегоРКО);
		КонецЕсли;								
	КонецЕсли;
	
КонецПроцедуры

// Процедура создает и проводит документы выплаты.
//
// Параметры:
//  ДокументМенеджер - ДокументМенеджер, документ менеджер.
//
//	СтруктураДанных - Структура, данные для заполнения документов выплаты.
//
//	ОбъектСозданногоДокумента - ДокументОбъект, в случае переформирования 
//								передается объект существующего документа РКО или ППИ.
//
Процедура СозданиеДокументовВыплаты(ДокументМенеджер, СтруктураДанных, ОбъектСозданногоДокумента = Неопределено)	
	Если ОбъектСозданногоДокумента = Неопределено Тогда
		ДокументОбъект = ДокументМенеджер.СоздатьДокумент();
	Иначе
		ДокументОбъект = ОбъектСозданногоДокумента;
	КонецЕсли;
	ДокументОбъект.Дата = Дата;
	ДокументОбъект.Заполнить(СтруктураДанных);			
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);	
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось завершить создание документа.
			|Техническая информация об ошибке: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		#Если Сервер Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить создание документа по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		#КонецЕсли	
	КонецПопытки;				
КонецПроцедуры

// Функция получает данные ТЧ по определенным условиям.
//
// Возвращаемое значение:
//		Структура - Структура, количество документов ППИ и РКО, которые возможно создать исходя из данных ТЧ.
//
Функция ДанныеДляПроверкиПередПереформированием() Экспорт

	МассивБанковДляОбщихППИ = Новый Массив();	
	Для Каждого СтрокаТабличнойЧасти Из Зарплата.Выгрузить() Цикл	
		// Условие для отбора банков у строк ТЧ с заполненными значениями "КартСчет",
		// для группирования строк в массив и создания на их основании общего ППИ.
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.КартСчет) Тогда
			Если МассивБанковДляОбщихППИ.Количество() = 0 Тогда
				МассивБанковДляОбщихППИ.Добавить(СтрокаТабличнойЧасти.Банк);
			Иначе
				НайденНовыйБанк = Истина;
				Для Каждого СтрокаСтруктуры Из МассивБанковДляОбщихППИ Цикл
					Если СтрокаСтруктуры = СтрокаТабличнойЧасти.Банк Тогда
						НайденНовыйБанк = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НайденНовыйБанк Тогда
					МассивБанковДляОбщихППИ.Добавить(СтрокаТабличнойЧасти.Банк);	
				КонецЕсли;		
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	ЗапросОбщихППИ = Новый Запрос;
	ЗапросОбщихППИ.Текст = 
		"ВЫБРАТЬ
		|	ВыплатаЗПЗарплата.ФизЛицо,
		|	ВыплатаЗПЗарплата.СуммаКВыплате,
		|	ВыплатаЗПЗарплата.КартСчет,
		|	ВыплатаЗПЗарплата.Банк,
		|	ВыплатаЗПЗарплата.БанковскийСчет
		|ИЗ
		|	Документ.ВыплатаЗП.Зарплата КАК ВыплатаЗПЗарплата
		|ГДЕ
		|	ВыплатаЗПЗарплата.Ссылка = &Ссылка
		|	И ВыплатаЗПЗарплата.Банк В (&МассивБанков)
		|	И ВыплатаЗПЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|	И НЕ ВыплатаЗПЗарплата.КартСчет = """"
		|
		|ИТОГИ ПО
		|	ВыплатаЗПЗарплата.Банк";
	ЗапросОбщихППИ.УстановитьПараметр("Ссылка", Ссылка);
	ЗапросОбщихППИ.УстановитьПараметр("МассивБанков", МассивБанковДляОбщихППИ); 
	КоличествоДокументовППИ = ЗапросОбщихППИ.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам).Количество();	
	
	ЗапросИндивППИ = Новый Запрос;
	ЗапросИндивППИ.Текст = 
		"ВЫБРАТЬ
		|	ВыплатаЗПЗарплата.ФизЛицо,
		|	ВыплатаЗПЗарплата.СуммаКВыплате,
		|	ВыплатаЗПЗарплата.КартСчет,
		|	ВыплатаЗПЗарплата.Банк,
		|	ВыплатаЗПЗарплата.БанковскийСчет
		|ИЗ
		|	Документ.ВыплатаЗП.Зарплата КАК ВыплатаЗПЗарплата
		|ГДЕ
		|	ВыплатаЗПЗарплата.Ссылка = &Ссылка
		|	И НЕ ВыплатаЗПЗарплата.БанковскийСчет = Значение(Справочник.БанковскиеСчета.ПустаяСсылка)
		|	И ВыплатаЗПЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|	И ВыплатаЗПЗарплата.КартСчет = """" ";
	ЗапросИндивППИ.УстановитьПараметр("Ссылка", Ссылка);
	КоличествоДокументовППИ = КоличествоДокументовППИ + ЗапросИндивППИ.Выполнить().Выбрать().Количество();
	
	ЗапросРКО = Новый Запрос;
	ЗапросРКО.Текст = 
		"ВЫБРАТЬ
		|	ВыплатаЗПЗарплата.ФизЛицо,
		|	ВыплатаЗПЗарплата.СуммаКВыплате
		|ИЗ
		|	Документ.ВыплатаЗП.Зарплата КАК ВыплатаЗПЗарплата
		|ГДЕ
		|   ВыплатаЗПЗарплата.Ссылка = &Ссылка
		|	И ВыплатаЗПЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|	И ВыплатаЗПЗарплата.Банк = ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)";
	ЗапросРКО.УстановитьПараметр("Ссылка", Ссылка);
	КоличествоДокументовРКО = ЗапросРКО.Выполнить().Выбрать().Количество();
	
	Структура = Новый Структура();
	Структура.Вставить("КоличествоППИ", КоличествоДокументовППИ); 
	Структура.Вставить("КоличествоРКО", КоличествоДокументовРКО);
	
	Возврат Структура;

КонецФункции // ТекстЗапросаДляРаботыСДокументамиВыплаты()

#КонецОбласти

#КонецЕсли