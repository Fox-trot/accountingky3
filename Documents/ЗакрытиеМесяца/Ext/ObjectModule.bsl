#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = КонецМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
			
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ЗакрытиеМесяца.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Ложь);	
	БухгалтерскийУчетСервер.ОтразитьАвансыДоотгрузка(ДополнительныеСвойства,Движения,Ложь);	
	БухгалтерскийУчетСервер.ОтразитьСведенияПоНалогуНаимущество(ДополнительныеСвойства,Движения,Ложь);
	БухгалтерскийУчетСервер.ОтразитьНалоговаяАмортизация(ДополнительныеСвойства, Движения, Ложь);
	БухгалтерскийУчетСервер.ОтразитьНалоговаяВыверка(ДополнительныеСвойства, Движения, Ложь);

	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	// Выполнение предварительного контроля.
	ВыполнитьПредварительныйКонтроль(Отказ);	
КонецПроцедуры

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

// Процедура - Выполнить закрытие месяца
//
Процедура ВыполнитьЗакрытиеМесяца(СтруктураПараметров) Экспорт
	перем Ошибки;
	
	НачатьТранзакцию();	
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Дата, Организация);
	
	// Расчет амортизации ОС
	Если РасчетАмортизацииОС Тогда 
		РассчитатьАмортизациюОсновныхСредств(ДанныеУчетнойПолитики, Ошибки);
	КонецЕсли;	
		
	// Расчет переоценки валютных средств
	Если РасчетПереоценкиВалютныхСредств Тогда 
		РассчитатьПереоценкуВалютныхСредств();
	КонецЕсли;	
	
	Если РасчетНДС Тогда 
		Если ДанныеУчетнойПолитики.УчетНДСНаАвансы Тогда 
			РассчитатьНДСНаАвансыДоотгрузку(ДанныеУчетнойПолитики);
		КонецЕсли;	
		РассчитатьНДС(ДанныеУчетнойПолитики);
	КонецЕсли;
	
	// Расчет налога на имущество
	Если РасчетНалогаНаИмущество Тогда 
		РассчитатьНалогНаИмущество(Ошибки);
	КонецЕсли;	
	
	// Расчет налога на имущество
	Если РасчетНалогаНаПрибыль Тогда 
		РассчитатьНалоговуюАмортизацию(ДанныеУчетнойПолитики);
		РасчитатьНалоговуюВыверку(ДанныеУчетнойПолитики);
	КонецЕсли;
	
	// Закрытие временных счетов учета
	Если ЗакрытьВременныеСчетаУчета Тогда 
		ВыполнитьЗакрытиеВременныхСчетовУчета();
	КонецЕсли;	
	
	// Закрытие парных счетов учета
	Если ЗакрытьПарныеСчетаУчета Тогда 
		ВыполнитьЗакрытиеПарныхСчетовУчета();
	КонецЕсли;
	
	// Расчет списания расходов будущих периодов
	Если РасчетСписанияРасходовБудущихПериодов Тогда 
		РассчитатьСписаниеРасходовБудущихПериодов();
	КонецЕсли;
	
	// Расчет себестоимости готовой продукции
	Если РасчетСебестоимостиГотовойПродукции Тогда 
		РасчсчитатьСебестоимостиГотовойПродукции();
	КонецЕсли;
		
	// Расчет единый налог
	Если РасчетЕдиногоНалога Тогда
		РассчитатьЕдиныйНалог(ДанныеУчетнойПолитики, СтруктураПараметров.РасчетЕдиногоНалогаЗаКвартал);
	КонецЕсли;

	СформироватьНадписи();
	
	Попытка
		Записать(РежимЗаписиДокумента.Запись);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru = 'Не удалось завершить запись документа.
			|Техническая информация об ошибке: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись документа по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка закрытия месяца'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	Если НЕ ПроверитьЗаполнение()
		Или НЕ Ошибки = Неопределено Тогда 
		Возврат;	
	КонецЕсли;		
	
	Попытка
		Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось завершить проведение документа.
			|Техническая информация об ошибке: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить проведение документа по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка закрытия месяца'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
КонецПроцедуры 

// Процедура - Рассчитать амортизацию основных средств валютных средств по коэффициентам.
//
Процедура РассчитатьАмортизациюОсновныхСредств1(ДанныеУчетнойПолитики)

	// 1. Список ОС принятых к учету
	// 2. События ОС: модернизация или изменение параметров
	// 3. Накопленная амортизация
	// 4. Получение параметров ОС по настройке НачислениеАмортизацииОСПоМесяцам
	//		* НачислениеАмортизацииОСПоМесяцам = Истина - все ОС до 15-го числа расчетного месяца
	//		* НачислениеАмортизацииОСПоМесяцам = Ложь - расчет по дням от последнего изменения параметров, 
	//			в случае когда месяц расчета и месяц изменения параметров совпадают
	// 5. Выработка ОС для производственного метода	
	// 6. Расчет амортизации	
	
	ТекстЗапроса = 		
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	СостоянияОССрезПоследних.Период КАК ДатаПринятияКУчету,
		|	СостоянияОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	СостоянияОССрезПоследних.Состояние КАК Состояние
		|ПОМЕСТИТЬ ВременнаяТаблицаСостоянияОС
		|ИЗ
		|	РегистрСведений.СостоянияОС.СрезПоследних(&КонецПериода, Организация = &Организация) КАК СостоянияОССрезПоследних
		|ГДЕ
		|	СостоянияОССрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1,
		|	СостоянияОССрезПоследних.Период,
		|	СостоянияОССрезПоследних.ОсновноеСредство,
		|	СостоянияОССрезПоследних.Состояние
		|ИЗ
		|	РегистрСведений.СостоянияОС.СрезПоследних(&КонецПериода, Организация = &Организация) КАК СостоянияОССрезПоследних
		|ГДЕ
		|	НЕ &НачислениеАмортизацииОСПоМесяцам
		|	И СостоянияОССрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)
		|	И СостоянияОССрезПоследних.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДатаПринятияКУчету,
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	2 КАК Порядок,
		|	СобытияОССрезПоследних.Период КАК Период,
		|	СобытияОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	СобытияОССрезПоследних.Событие КАК СобытиеОС
		|ПОМЕСТИТЬ ТаблицаСобытияОС
		|ИЗ
		|	РегистрСведений.СобытияОС.СрезПоследних(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаСостоянияОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС)
		|				И (Событие = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ИзменениеПараметров)
		|					ИЛИ Событие = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Модернизация))) КАК СобытияОССрезПоследних
		|ГДЕ
		|	СобытияОССрезПоследних.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	3 КАК Порядок,
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.СуммаОстаток < 0
		|			ТОГДА ХозрасчетныйОстатки.СуммаОстаток * -1
		|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
		|	КОНЕЦ КАК НакопленныйИзнос
		|ПОМЕСТИТЬ ТаблицаНакопленнаяАмортизация
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			Счет В (&СписокСчетовНакопленнойАмортизации),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаСостоянияОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС)) КАК ХозрасчетныйОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	4 КАК Порядок,
		|	ПараметрыУчетаОССрезПоследних.Период КАК Период,
		|	ПараметрыУчетаОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	ПараметрыУчетаОССрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ПараметрыУчетаОССрезПоследних.СчетУчета КАК СчетУчета,
		|	ПараметрыУчетаОССрезПоследних.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.СрокСлужбы КАК СрокСлужбы,
		|	ПараметрыУчетаОССрезПоследних.КоэффициентУскорения КАК КоэффициентУскорения,
		|	ПараметрыУчетаОССрезПоследних.ОбъемПродукции КАК ОбъемПродукции,
		|	ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
		|	ПараметрыУчетаОССрезПоследних.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
		|	ПараметрыУчетаОССрезПоследних.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию
		|ПОМЕСТИТЬ ТаблицаПараметрыУчетаОС
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
		|			&НачалоПериода,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаСостоянияОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС)) КАК ПараметрыУчетаОССрезПоследних
		|ГДЕ
		|	&НачислениеАмортизацииОСПоМесяцам
		|	И НЕ ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.НеНачислять)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4,
		|	ПараметрыУчетаОССрезПервых.Период,
		|	ПараметрыУчетаОССрезПервых.ОсновноеСредство,
		|	ПараметрыУчетаОССрезПервых.ИнвентарныйНомер,
		|	ПараметрыУчетаОССрезПервых.СчетУчета,
		|	ПараметрыУчетаОССрезПервых.ПервоначальнаяСтоимость,
		|	ПараметрыУчетаОССрезПервых.ЛиквидационнаяСтоимость,
		|	ПараметрыУчетаОССрезПервых.СрокСлужбы,
		|	ПараметрыУчетаОССрезПервых.КоэффициентУскорения,
		|	ПараметрыУчетаОССрезПервых.ОбъемПродукции,
		|	ПараметрыУчетаОССрезПервых.СпособНачисленияАмортизации,
		|	ПараметрыУчетаОССрезПервых.СпособОтраженияРасходовПоАмортизации,
		|	ПараметрыУчетаОССрезПервых.ДатаВводаВЭксплуатацию
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС.СрезПервых(
		|			&НачалоПериода,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаСостоянияОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС
		|					ГДЕ
		|						ВременнаяТаблицаСостоянияОС.ДатаПринятияКУчету МЕЖДУ &НачалоПериода И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, 15), ДЕНЬ))) КАК ПараметрыУчетаОССрезПервых
		|ГДЕ
		|	&НачислениеАмортизацииОСПоМесяцам
		|	И НЕ ПараметрыУчетаОССрезПервых.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.НеНачислять)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4,
		|	ПараметрыУчетаОССрезПоследних.Период,
		|	ПараметрыУчетаОССрезПоследних.ОсновноеСредство,
		|	ПараметрыУчетаОССрезПоследних.ИнвентарныйНомер,
		|	ПараметрыУчетаОССрезПоследних.СчетУчета,
		|	ПараметрыУчетаОССрезПоследних.ПервоначальнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.ЛиквидационнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.СрокСлужбы,
		|	ПараметрыУчетаОССрезПоследних.КоэффициентУскорения,
		|	ПараметрыУчетаОССрезПоследних.ОбъемПродукции,
		|	ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации,
		|	ПараметрыУчетаОССрезПоследних.СпособОтраженияРасходовПоАмортизации,
		|	ПараметрыУчетаОССрезПоследних.ДатаВводаВЭксплуатацию
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаСостоянияОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС)) КАК ПараметрыУчетаОССрезПоследних
		|ГДЕ
		|	НЕ &НачислениеАмортизацииОСПоМесяцам
		|	И НЕ ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.НеНачислять)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	5 КАК Порядок,
		|	ВыработкаОСОбороты.ОсновноеСредство КАК ОсновноеСредство,
		|	ВыработкаОСОбороты.КоличествоОборот КАК Количество
		|ПОМЕСТИТЬ ТаблицаВыработкаОС
		|ИЗ
		|	РегистрНакопления.ВыработкаОС.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаСостоянияОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС)) КАК ВыработкаОСОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаПараметрыУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаПараметрыУчетаОС.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ТаблицаПараметрыУчетаОС.СчетУчета КАК СчетУчета,
		|	ТаблицаПараметрыУчетаОС.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|	ТаблицаПараметрыУчетаОС.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
		|	ТаблицаПараметрыУчетаОС.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
		|	ВЫБОР
		|		КОГДА ТаблицаПараметрыУчетаОС.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Линейный)
		|				И ТаблицаПараметрыУчетаОС.СрокСлужбы = 0
		|			ТОГДА 0
		|		КОГДА ТаблицаПараметрыУчетаОС.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Линейный)
		|				И НЕ &НачислениеАмортизацииОСПоМесяцам
		|				И &КонецПериода = КОНЕЦПЕРИОДА(ТаблицаПараметрыУчетаОС.Период, МЕСЯЦ)
		|			ТОГДА ВЫРАЗИТЬ((ТаблицаПараметрыУчетаОС.ПервоначальнаяСтоимость - ТаблицаПараметрыУчетаОС.ЛиквидационнаяСтоимость - ВЫБОР
		|						КОГДА ТаблицаСобытияОС.СобытиеОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Модернизация)
		|							ТОГДА ЕСТЬNULL(ТаблицаНакопленнаяАмортизация.НакопленныйИзнос, 0)
		|						ИНАЧЕ 0
		|					КОНЕЦ) / ТаблицаПараметрыУчетаОС.СрокСлужбы / ДЕНЬ(КОНЕЦПЕРИОДА(ТаблицаПараметрыУчетаОС.Период, МЕСЯЦ)) * (ДЕНЬ(КОНЕЦПЕРИОДА(ТаблицаПараметрыУчетаОС.Период, МЕСЯЦ)) - (ДЕНЬ(ТаблицаПараметрыУчетаОС.Период) - 1)) КАК ЧИСЛО(15, 2))
		|		КОГДА ТаблицаПараметрыУчетаОС.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Линейный)
		|				И &КонецПериода = КОНЕЦПЕРИОДА(ТаблицаПараметрыУчетаОС.Период, МЕСЯЦ)
		|			ТОГДА ВЫБОР
		|					КОГДА &НачислениеАмортизацииОСПоМесяцам
		|						ТОГДА ВЫРАЗИТЬ((ТаблицаПараметрыУчетаОС.ПервоначальнаяСтоимость - ВЫБОР
		|									КОГДА ТаблицаСобытияОС.СобытиеОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Модернизация)
		|										ТОГДА ЕСТЬNULL(ТаблицаНакопленнаяАмортизация.НакопленныйИзнос, 0)
		|									ИНАЧЕ 0
		|								КОНЕЦ) / ТаблицаПараметрыУчетаОС.СрокСлужбы КАК ЧИСЛО(15, 2))
		|					ИНАЧЕ ВЫРАЗИТЬ((ТаблицаПараметрыУчетаОС.ПервоначальнаяСтоимость - ТаблицаПараметрыУчетаОС.ЛиквидационнаяСтоимость - ВЫБОР
		|								КОГДА ТаблицаСобытияОС.СобытиеОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Модернизация)
		|									ТОГДА ЕСТЬNULL(ТаблицаНакопленнаяАмортизация.НакопленныйИзнос, 0)
		|								ИНАЧЕ 0
		|							КОНЕЦ) / ТаблицаПараметрыУчетаОС.СрокСлужбы / ДЕНЬ(&КонецПериода) * (ДЕНЬ(&КонецПериода) - ДЕНЬ(ТаблицаПараметрыУчетаОС.Период) + 1) КАК ЧИСЛО(15, 2))
		|				КОНЕЦ
		|		КОГДА ТаблицаПараметрыУчетаОС.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Линейный)
		|			ТОГДА ВЫБОР
		|					КОГДА ВременнаяТаблицаСостоянияОС.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)
		|							И НЕ &НачислениеАмортизацииОСПоМесяцам
		|						ТОГДА (ВЫРАЗИТЬ((ТаблицаПараметрыУчетаОС.ПервоначальнаяСтоимость - ТаблицаПараметрыУчетаОС.ЛиквидационнаяСтоимость - ВЫБОР
		|									КОГДА ТаблицаСобытияОС.СобытиеОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Модернизация)
		|										ТОГДА ЕСТЬNULL(ТаблицаНакопленнаяАмортизация.НакопленныйИзнос, 0)
		|									ИНАЧЕ 0
		|								КОНЕЦ) / ТаблицаПараметрыУчетаОС.СрокСлужбы КАК ЧИСЛО(15, 2))) * ДЕНЬ(ВременнаяТаблицаСостоянияОС.ДатаПринятияКУчету) / ДЕНЬ(КОНЕЦПЕРИОДА(ВременнаяТаблицаСостоянияОС.ДатаПринятияКУчету, МЕСЯЦ))
		|					ИНАЧЕ ВЫРАЗИТЬ((ТаблицаПараметрыУчетаОС.ПервоначальнаяСтоимость - ТаблицаПараметрыУчетаОС.ЛиквидационнаяСтоимость - ВЫБОР
		|								КОГДА ТаблицаСобытияОС.СобытиеОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Модернизация)
		|									ТОГДА ЕСТЬNULL(ТаблицаНакопленнаяАмортизация.НакопленныйИзнос, 0)
		|								ИНАЧЕ 0
		|							КОНЕЦ) / ТаблицаПараметрыУчетаОС.СрокСлужбы КАК ЧИСЛО(15, 2))
		|				КОНЕЦ
		|		КОГДА ТаблицаПараметрыУчетаОС.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка)
		|				И ТаблицаПараметрыУчетаОС.СрокСлужбы = 0
		|			ТОГДА 0
		|		КОГДА ТаблицаПараметрыУчетаОС.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка)
		|			ТОГДА (ТаблицаПараметрыУчетаОС.ПервоначальнаяСтоимость - ЕСТЬNULL(ТаблицаНакопленнаяАмортизация.НакопленныйИзнос, 0)) * 100 / ТаблицаПараметрыУчетаОС.СрокСлужбы * ВЫБОР
		|					КОГДА ТаблицаПараметрыУчетаОС.КоэффициентУскорения = 0
		|						ТОГДА 2
		|					ИНАЧЕ ТаблицаПараметрыУчетаОС.КоэффициентУскорения
		|				КОНЕЦ
		|		КОГДА ТаблицаПараметрыУчетаОС.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Производственный)
		|				И (ТаблицаПараметрыУчетаОС.ОбъемПродукции = 0
		|					ИЛИ ЕСТЬNULL(ТаблицаВыработкаОС.Количество, 0) = 0)
		|			ТОГДА 0
		|		КОГДА ТаблицаПараметрыУчетаОС.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Производственный)
		|			ТОГДА ТаблицаПараметрыУчетаОС.ПервоначальнаяСтоимость * ЕСТЬNULL(ТаблицаВыработкаОС.Количество, 0) / ТаблицаПараметрыУчетаОС.ОбъемПродукции
		|		КОГДА ТаблицаПараметрыУчетаОС.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛет)
		|				И ТаблицаПараметрыУчетаОС.СрокСлужбы = 0
		|			ТОГДА 0
		|		КОГДА ТаблицаПараметрыУчетаОС.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛет)
		|			ТОГДА ТаблицаПараметрыУчетаОС.ПервоначальнаяСтоимость * ВЫБОР
		|					КОГДА ВЫБОР
		|							КОГДА (ВЫРАЗИТЬ(ТаблицаПараметрыУчетаОС.СрокСлужбы / 12 - 0.5 КАК ЧИСЛО(15, 0))) = 0
		|								ТОГДА 1
		|							ИНАЧЕ ВЫРАЗИТЬ(ТаблицаПараметрыУчетаОС.СрокСлужбы / 12 - 0.5 КАК ЧИСЛО(15, 0))
		|						КОНЕЦ - РАЗНОСТЬДАТ(&КонецПериода, ВременнаяТаблицаСостоянияОС.ДатаПринятияКУчету, ГОД) + 1 = 0
		|						ТОГДА 1
		|					ИНАЧЕ ВЫБОР
		|							КОГДА (ВЫРАЗИТЬ(ТаблицаПараметрыУчетаОС.СрокСлужбы / 12 - 0.5 КАК ЧИСЛО(15, 0))) = 0
		|								ТОГДА 1
		|							ИНАЧЕ ВЫРАЗИТЬ(ТаблицаПараметрыУчетаОС.СрокСлужбы / 12 - 0.5 КАК ЧИСЛО(15, 0))
		|						КОНЕЦ - РАЗНОСТЬДАТ(&КонецПериода, ВременнаяТаблицаСостоянияОС.ДатаПринятияКУчету, ГОД) + 1
		|				КОНЕЦ / ((ВЫБОР
		|					КОГДА (ВЫРАЗИТЬ(ТаблицаПараметрыУчетаОС.СрокСлужбы / 12 - 0.5 КАК ЧИСЛО(15, 0))) = 0
		|						ТОГДА 1
		|					ИНАЧЕ ВЫРАЗИТЬ(ТаблицаПараметрыУчетаОС.СрокСлужбы / 12 - 0.5 КАК ЧИСЛО(15, 0))
		|				КОНЕЦ + 1) * ВЫБОР
		|					КОГДА (ВЫРАЗИТЬ(ТаблицаПараметрыУчетаОС.СрокСлужбы / 12 - 0.5 КАК ЧИСЛО(15, 0))) = 0
		|						ТОГДА 1
		|					ИНАЧЕ ВЫРАЗИТЬ(ТаблицаПараметрыУчетаОС.СрокСлужбы / 12 - 0.5 КАК ЧИСЛО(15, 0))
		|				КОНЕЦ / 2)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК АмортизацияЗаМесяц,
		|	ТаблицаПараметрыУчетаОС.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации
		|ПОМЕСТИТЬ ТаблицаРасчетАмортизации
		|ИЗ
		|	ТаблицаПараметрыУчетаОС КАК ТаблицаПараметрыУчетаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС
		|		ПО ТаблицаПараметрыУчетаОС.ОсновноеСредство = ВременнаяТаблицаСостоянияОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСобытияОС КАК ТаблицаСобытияОС
		|		ПО ТаблицаПараметрыУчетаОС.ОсновноеСредство = ТаблицаСобытияОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНакопленнаяАмортизация КАК ТаблицаНакопленнаяАмортизация
		|		ПО ТаблицаПараметрыУчетаОС.ОсновноеСредство = ТаблицаНакопленнаяАмортизация.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВыработкаОС КАК ТаблицаВыработкаОС
		|		ПО ТаблицаПараметрыУчетаОС.ОсновноеСредство = ТаблицаВыработкаОС.ОсновноеСредство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаРасчетАмортизации.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаРасчетАмортизации.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ТаблицаРасчетАмортизации.СчетУчета КАК СчетУчета,
		|	ХозрасчетныйОстатки.Счет КАК СчетАмортизации,
		|	ТаблицаРасчетАмортизации.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
		|	ТаблицаРасчетАмортизации.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
		|	НЕОПРЕДЕЛЕНО КАК СчетЗатрат,
		|	НЕОПРЕДЕЛЕНО КАК ЗначениеСубконто1,
		|	НЕОПРЕДЕЛЕНО КАК ЗначениеСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК ЗначениеСубконто3,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) >= ТаблицаРасчетАмортизации.ПервоначальнаяСтоимость - ТаблицаРасчетАмортизации.ЛиквидационнаяСтоимость
		|			ТОГДА 0
		|		КОГДА ТаблицаРасчетАмортизации.ПервоначальнаяСтоимость - ТаблицаРасчетАмортизации.ЛиквидационнаяСтоимость - ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) < ТаблицаРасчетАмортизации.АмортизацияЗаМесяц
		|			ТОГДА ТаблицаРасчетАмортизации.ПервоначальнаяСтоимость - ТаблицаРасчетАмортизации.ЛиквидационнаяСтоимость - ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0)
		|		ИНАЧЕ ТаблицаРасчетАмортизации.АмортизацияЗаМесяц
		|	КОНЕЦ КАК Сумма
		|ИЗ
		|	ТаблицаРасчетАмортизации КАК ТаблицаРасчетАмортизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&КонецПериода,
		|				,
		|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|				Организация = &Организация
		|					И Субконто1 В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаСостоянияОС.ОсновноеСредство
		|						ИЗ
		|							ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС)) КАК ХозрасчетныйОстатки
		|		ПО ТаблицаРасчетАмортизации.ОсновноеСредство = ХозрасчетныйОстатки.Субконто1
		|ГДЕ
		|	НЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) >= ТаблицаРасчетАмортизации.ПервоначальнаяСтоимость - ТаблицаРасчетАмортизации.ЛиквидационнаяСтоимость
		|					ТОГДА 0
		|				КОГДА ТаблицаРасчетАмортизации.ПервоначальнаяСтоимость - ТаблицаРасчетАмортизации.ЛиквидационнаяСтоимость - ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) < ТаблицаРасчетАмортизации.АмортизацияЗаМесяц
		|					ТОГДА ТаблицаРасчетАмортизации.ПервоначальнаяСтоимость - ТаблицаРасчетАмортизации.ЛиквидационнаяСтоимость - ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0)
		|				ИНАЧЕ ТаблицаРасчетАмортизации.АмортизацияЗаМесяц
		|			КОНЕЦ = 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасчетАмортизации.ОсновноеСредство.Наименование";
	Запрос = Новый Запрос(ТекстЗапроса);
	СписокСчетовНаопленногоИзноса = Новый СписокЗначений;
	СписокСчетовНаопленногоИзноса.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияЗданияСооружения);
	СписокСчетовНаопленногоИзноса.Добавить(ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияОборудование);
	СписокСчетовНаопленногоИзноса.Добавить(ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияКонторскоеОборудование);
	СписокСчетовНаопленногоИзноса.Добавить(ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияМебельИПринадлежности);
	СписокСчетовНаопленногоИзноса.Добавить(ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияТранспортныеСредства);
	СписокСчетовНаопленногоИзноса.Добавить(ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияБлагоустройствоАрендованнойСобственности);
	СписокСчетовНаопленногоИзноса.Добавить(ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияБлагоустройствоЗемльныхУчастков);

	Запрос.УстановитьПараметр("СписокСчетовНакопленнойАмортизации",СписокСчетовНаопленногоИзноса);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачислениеАмортизацииОСПоМесяцам", ДанныеУчетнойПолитики.НачислениеАмортизацииОСПоМесяцам); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КэшДанныхСпрСпособыОтрРасхПоАморт = Новый Соответствие();
	
	// Данный цикл перебирает выборку, полученную из запроса.
	//
	// По строкам идет проверка способа отражения расходов по амортизации. Обращаемся к табличной части 
	// данного справочника и в зависимости от количества строк в ТЧ строка выборки дублируется и записывается 
	// в ТЧ документа. Записывается "СчетЗатрат" и в зависимости от коэффициентов в 
	// строках ТЧ распределяется сумма. А также заполняются колонки "Субконто".
	Пока Выборка.Следующий() Цикл
		
		// В соответствие записывается: 
		// Ключ - ссылка на справочник "СпособыОтраженияРасходовПоАмортизации".
		// Значение - ТЗ из запроса к данному элементу справочника.
		// При каждом шаге основного цикла проверяется наличие строки соответствия 
		// по ссылке на справочник, чтобы не обращаться к запросу каждый раз.
		ТЗСпособаОтражения = КэшДанныхСпрСпособыОтрРасхПоАморт.Получить(Выборка.СпособОтраженияРасходовПоАмортизации);
		
		Если ТЗСпособаОтражения = Неопределено Тогда
			ТЗСпособаОтражения = УправлениеВнеоборотнымиАктивамиПовтИсп.СпособыОтраженияРасходовПоАмортизации(Выборка.СпособОтраженияРасходовПоАмортизации); 
			КэшДанныхСпрСпособыОтрРасхПоАморт.Вставить(Выборка.СпособОтраженияРасходовПоАмортизации, ТЗСпособаОтражения);
		КонецЕсли;
		
		МассивКоэффициентов = ТЗСпособаОтражения.ВыгрузитьКолонку("Коэффициент");
		МассивСумм = Неопределено;
		Если Выборка.Сумма > 0 Тогда
			МассивСумм = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Выборка.Сумма, МассивКоэффициентов, 2);
		КонецЕсли;		
		Если МассивСумм = Неопределено Тогда 
			Продолжить;
		КонецЕсли;	
		
		ИндексМассива = 0;
		Для Каждого СуммаСУчетомКоэф Из МассивСумм Цикл
		
			СтрокаТЧАмортизация = АмортизацияОС.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаТЧАмортизация, Выборка);
			
			СтрокаТЧАмортизация.Сумма		= СуммаСУчетомКоэф;			
			СтрокаТЧАмортизация.СчетЗатрат	= ТЗСпособаОтражения[ИндексМассива].СчетЗатрат;
			СтрокаТЧАмортизация.Субконто1  	= ТЗСпособаОтражения[ИндексМассива].Субконто1;
			СтрокаТЧАмортизация.Субконто2   = ТЗСпособаОтражения[ИндексМассива].Субконто2;
			СтрокаТЧАмортизация.Субконто3   = ТЗСпособаОтражения[ИндексМассива].Субконто3;
			
			ИндексМассива = ИндексМассива + 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // РассчитатьАмортизациюОсновныхСредств()

// Процедура - Рассчитать амортизацию основных средств валютных средств по коэффициентам.
//
Процедура РассчитатьАмортизациюОсновныхСредств(ДанныеУчетнойПолитики, Ошибки)
	// 1. Список ОС принятых к учету на окончание месяца
	// 2. События ОС: модернизация или изменение параметров
	// 3. Накопленная амортизация
	// 4. Получение параметров ОС по настройке НачислениеАмортизацииОСПоМесяцам для всех (кроме производственного)
	//		* НачислениеАмортизацииОСПоМесяцам = Истина - все ОС на начало расчетного месяца
	//		* НачислениеАмортизацииОСПоМесяцам = Ложь - все ОС на окончание расчетного месяца
	//			расчет по дням от последнего изменения параметров, 
	//			в случае когда месяц расчета и месяц изменения параметров совпадают
	// 		* Все ОС на окончание расчетного месяца для производственного метода
	// 5. Выработка ОС для производственного метода	
	// 6. Дата модернизации ОС только в текущем месяце
	// 7. Данные для расчета амортизации	
	
	ТекстЗапроса = 		
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	СостоянияОССрезПоследних.Период КАК ДатаПринятияКУчету,
		|	СостоянияОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ ВременнаяТаблицаСостоянияОС
		|ИЗ
		|	РегистрСведений.СостоянияОС.СрезПоследних(&КонецПериода, Организация = &Организация) КАК СостоянияОССрезПоследних
		|ГДЕ
		|	СостоянияОССрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДатаПринятияКУчету,
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	2 КАК Порядок,
		|	СобытияОССрезПоследних.Период КАК Период,
		|	СобытияОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	СобытияОССрезПоследних.Событие КАК СобытиеОС
		|ПОМЕСТИТЬ ТаблицаСобытияОС
		|ИЗ
		|	РегистрСведений.СобытияОС.СрезПоследних(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаСостоянияОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС)
		|				И (Событие = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ИзменениеПараметров)
		|					ИЛИ Событие = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Модернизация))) КАК СобытияОССрезПоследних
		|ГДЕ
		|	СобытияОССрезПоследних.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	3 КАК Порядок,
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.СуммаОстаток < 0
		|			ТОГДА ХозрасчетныйОстатки.СуммаОстаток * -1
		|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
		|	КОНЕЦ КАК НакопленныйИзнос
		|ПОМЕСТИТЬ ТаблицаНакопленнаяАмортизация
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			Счет В (&СписокСчетовНакопленнойАмортизации),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаСостоянияОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС)) КАК ХозрасчетныйОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	4 КАК Порядок,
		|	ПараметрыУчетаОССрезПоследних.Период КАК Период,
		|	ПараметрыУчетаОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	ПараметрыУчетаОССрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ПараметрыУчетаОССрезПоследних.СчетУчета КАК СчетУчета,
		|	ПараметрыУчетаОССрезПоследних.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.СрокСлужбы КАК СрокСлужбы,
		|	ПараметрыУчетаОССрезПоследних.КоэффициентУскорения КАК КоэффициентУскорения,
		|	ПараметрыУчетаОССрезПоследних.ОбъемПродукции КАК ОбъемПродукции,
		|	ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
		|	ПараметрыУчетаОССрезПоследних.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
		|	ПараметрыУчетаОССрезПоследних.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
		|	1 КАК КоэффициентНачислениеАмортизацииОСПоМесяцам
		|ПОМЕСТИТЬ ТаблицаПараметрыУчетаОС
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
		|			ДОБАВИТЬКДАТЕ(&НачалоПериода, СЕКУНДА, -1),
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаСостоянияОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС)) КАК ПараметрыУчетаОССрезПоследних
		|ГДЕ
		|	&НачислениеАмортизацииОСПоМесяцам
		|	И (ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Линейный)
		|			ИЛИ ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛет)
		|			ИЛИ ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4,
		|	ПараметрыУчетаОССрезПоследних.Период,
		|	ПараметрыУчетаОССрезПоследних.ОсновноеСредство,
		|	ПараметрыУчетаОССрезПоследних.ИнвентарныйНомер,
		|	ПараметрыУчетаОССрезПоследних.СчетУчета,
		|	ПараметрыУчетаОССрезПоследних.ПервоначальнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.ЛиквидационнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.СрокСлужбы,
		|	ПараметрыУчетаОССрезПоследних.КоэффициентУскорения,
		|	ПараметрыУчетаОССрезПоследних.ОбъемПродукции,
		|	ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации,
		|	ПараметрыУчетаОССрезПоследних.СпособОтраженияРасходовПоАмортизации,
		|	ПараметрыУчетаОССрезПоследних.ДатаВводаВЭксплуатацию,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(&КонецПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВременнаяТаблицаСостоянияОС.ДатаПринятияКУчету, МЕСЯЦ)
		|			ТОГДА (ДЕНЬ(&КонецПериода) - ДЕНЬ(ВременнаяТаблицаСостоянияОС.ДатаПринятияКУчету) + 1) / ДЕНЬ(&КонецПериода)
		|		ИНАЧЕ 1
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаСостоянияОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС)) КАК ПараметрыУчетаОССрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС
		|		ПО ПараметрыУчетаОССрезПоследних.ОсновноеСредство = ВременнаяТаблицаСостоянияОС.ОсновноеСредство
		|ГДЕ
		|	НЕ &НачислениеАмортизацииОСПоМесяцам
		|	И (ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Линейный)
		|			ИЛИ ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛет)
		|			ИЛИ ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4,
		|	ПараметрыУчетаОССрезПоследних.Период,
		|	ПараметрыУчетаОССрезПоследних.ОсновноеСредство,
		|	ПараметрыУчетаОССрезПоследних.ИнвентарныйНомер,
		|	ПараметрыУчетаОССрезПоследних.СчетУчета,
		|	ПараметрыУчетаОССрезПоследних.ПервоначальнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.ЛиквидационнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.СрокСлужбы,
		|	ПараметрыУчетаОССрезПоследних.КоэффициентУскорения,
		|	ПараметрыУчетаОССрезПоследних.ОбъемПродукции,
		|	ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации,
		|	ПараметрыУчетаОССрезПоследних.СпособОтраженияРасходовПоАмортизации,
		|	ПараметрыУчетаОССрезПоследних.ДатаВводаВЭксплуатацию,
		|	1
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаСостоянияОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС)) КАК ПараметрыУчетаОССрезПоследних
		|ГДЕ
		|	ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Производственный)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	5 КАК Порядок,
		|	ВыработкаОСОбороты.ОсновноеСредство КАК ОсновноеСредство,
		|	ВыработкаОСОбороты.КоличествоОборот КАК Количество
		|ПОМЕСТИТЬ ТаблицаВыработкаОС
		|ИЗ
		|	РегистрНакопления.ВыработкаОС.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаСостоянияОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС)) КАК ВыработкаОСОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыУчетаОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	ПараметрыУчетаОССрезПоследних.Период КАК Период
		|ПОМЕСТИТЬ ВременнаяТаблицаПериодМодернизацииОС
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И Регистратор ССЫЛКА Документ.МодернизацияОС) КАК ПараметрыУчетаОССрезПоследних
		|ГДЕ
		|	ПараметрыУчетаОССрезПоследних.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И НЕ &НачислениеАмортизацииОСПоМесяцам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаПараметрыУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаПараметрыУчетаОС.ОсновноеСредство.Наименование КАК ОсновноеСредствоНаименование,
		|	ТаблицаПараметрыУчетаОС.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ТаблицаПараметрыУчетаОС.СчетУчета КАК СчетУчета,
		|	ТаблицаПараметрыУчетаОС.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|	ТаблицаПараметрыУчетаОС.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
		|	ТаблицаПараметрыУчетаОС.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
		|	ТаблицаПараметрыУчетаОС.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
		|	ТаблицаПараметрыУчетаОС.СрокСлужбы КАК СрокСлужбы,
		|	ТаблицаПараметрыУчетаОС.КоэффициентНачислениеАмортизацииОСПоМесяцам КАК КоэффициентНачислениеАмортизацииОСПоМесяцам,
		|	&НачислениеАмортизацииОСПоМесяцам КАК НачислениеАмортизацииОСПоМесяцам,
		|	ТаблицаПараметрыУчетаОС.ОбъемПродукции КАК ОбъемПродукции,
		|	ЕСТЬNULL(ТаблицаВыработкаОС.Количество, 0) КАК КоличествоПродукции,
		|	ЕСТЬNULL(ТаблицаНакопленнаяАмортизация.НакопленныйИзнос, 0) КАК НакопленныйИзнос,
		|	ВЫБОР
		|		КОГДА ТаблицаПараметрыУчетаОС.КоэффициентУскорения = 0
		|			ТОГДА 2
		|		ИНАЧЕ ТаблицаПараметрыУчетаОС.КоэффициентУскорения
		|	КОНЕЦ КАК КоэффициентУскорения,
		|	ВременнаяТаблицаСостоянияОС.ДатаПринятияКУчету КАК ДатаПринятияКУчету,
		|	ЕСТЬNULL(ВременнаяТаблицаПериодМодернизацииОС.Период, 0) КАК ДатаМодернизации
		|ИЗ
		|	ТаблицаПараметрыУчетаОС КАК ТаблицаПараметрыУчетаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС
		|		ПО ТаблицаПараметрыУчетаОС.ОсновноеСредство = ВременнаяТаблицаСостоянияОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНакопленнаяАмортизация КАК ТаблицаНакопленнаяАмортизация
		|		ПО ТаблицаПараметрыУчетаОС.ОсновноеСредство = ТаблицаНакопленнаяАмортизация.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВыработкаОС КАК ТаблицаВыработкаОС
		|		ПО ТаблицаПараметрыУчетаОС.ОсновноеСредство = ТаблицаВыработкаОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаПериодМодернизацииОС КАК ВременнаяТаблицаПериодМодернизацииОС
		|		ПО ТаблицаПараметрыУчетаОС.ОсновноеСредство = ВременнаяТаблицаПериодМодернизацииОС.ОсновноеСредство";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачислениеАмортизацииОСПоМесяцам", ДанныеУчетнойПолитики.НачислениеАмортизацииОСПоМесяцам); 
	
	СписокСчетовНакопленнойАмортизации = Новый СписокЗначений;
	СписокСчетовНакопленнойАмортизации.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияЗданияСооружения);
	СписокСчетовНакопленнойАмортизации.Добавить(ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияОборудование);
	СписокСчетовНакопленнойАмортизации.Добавить(ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияКонторскоеОборудование);
	СписокСчетовНакопленнойАмортизации.Добавить(ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияМебельИПринадлежности);
	СписокСчетовНакопленнойАмортизации.Добавить(ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияТранспортныеСредства);
	СписокСчетовНакопленнойАмортизации.Добавить(ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияБлагоустройствоАрендованнойСобственности);
	СписокСчетовНакопленнойАмортизации.Добавить(ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияБлагоустройствоЗемльныхУчастков);
	Запрос.УстановитьПараметр("СписокСчетовНакопленнойАмортизации",СписокСчетовНакопленнойАмортизации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	КэшДанныхСпрСпособыОтрРасхПоАморт = Новый Соответствие();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СуммаАмортизации = 0;
		ТекстСообщения = "";		
		СрокСлужбы = Выборка.СрокСлужбы;
		
		// Линейный. (ПервоначальнаяСтоимость - ЛиквидационнаяСтоимость) / СрокСлужбы * КоэффициентНачислениеАмортизацииОСПоМесяцам(только в месяце прима в остальных = 1).
		Если Выборка.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда 
			Если СрокСлужбы = 0 Тогда 			
				ТекстСообщения = НСтр("ru = 'Расчет амортизации ОС. Срок службы равен 0. Основное средство ""%1"".'");
			Иначе 
				Если Выборка.ДатаМодернизации = 0 Тогда 				
					СуммаАмортизации = (Выборка.ПервоначальнаяСтоимость - Выборка.ЛиквидационнаяСтоимость) / Выборка.СрокСлужбы * Выборка.КоэффициентНачислениеАмортизацииОСПоМесяцам;
				Иначе
					КоличествоДнейВМесяце = День(Дата);
					КоличествоДнейМодернизации = День(Выборка.ДатаМодернизации);
					ОставшеесяКоличествоДнейВМесяце = КоличествоДнейВМесяце - КоличествоДнейМодернизации;
					
					СуммаАмортизации = ((Выборка.ПервоначальнаяСтоимость - Выборка.ЛиквидационнаяСтоимость) / Выборка.СрокСлужбы)
										/ КоличествоДнейВМесяце * ОставшеесяКоличествоДнейВМесяце 
										* Выборка.КоэффициентНачислениеАмортизацииОСПоМесяцам;
				КонецЕсли;	
			КонецЕсли;	
				
		// Производственный. ПервоначальнаяСтоимость * КоличествоПродукции / ОбъемПродукции.
		ИначеЕсли Выборка.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда
			Если Выборка.ОбъемПродукции = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Расчет амортизации ОС. Объем продукции равен 0. Основное средство ""%1"".'");
			ИначеЕсли Выборка.КоличествоПродукции = 0 Тогда
				// Не ошибка. Просто не было выработки на данном ОС.
				Продолжить;
			Иначе 
				СуммаАмортизации = Выборка.ПервоначальнаяСтоимость * Выборка.КоличествоПродукции / Выборка.ОбъемПродукции;
			КонецЕсли;	
				
		// Уменьшаемого остатка	(ускоренный). (ПервоначальнаяСтоимость - НакопленныйИзнос) / СрокСлужбы * КоэффициентУскорения.
		ИначеЕсли Выборка.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
			Если СрокСлужбы = 0 Тогда 			
				ТекстСообщения = НСтр("ru = 'Расчет амортизации ОС. Срок службы равен 0. Основное средство ""%1"".'");
			ИначеЕсли Выборка.КоэффициентУскорения = 0 Тогда 
				ТекстСообщения = НСтр("ru = 'Расчет амортизации ОС. Коэффициент ускорения равен 0. Основное средство ""%1"".'");
			Иначе 
				СуммаАмортизации = (Выборка.ПервоначальнаяСтоимость - Выборка.НакопленныйИзнос) / Выборка.СрокСлужбы * Выборка.КоэффициентУскорения;
			КонецЕсли;	
				
		// По сумме чисел лет.
		ИначеЕсли Выборка.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛет Тогда
				
			// Расчет года использования.
			ДатаПринятияКУчету = НачалоМесяца(ДобавитьМесяц(Выборка.ДатаПринятияКУчету, 1)); 
			ГодИспользования = Год(Дата) - Год(ДатаПринятияКУчету);
			ГодовщинаНачалаИспользования = Дата(Год(Дата), Месяц(ДатаПринятияКУчету), День(ДатаПринятияКУчету));
				
			Если КонецМесяца(Дата) >= КонецМесяца(ГодовщинаНачалаИспользования) Тогда
				ГодИспользования = ГодИспользования + 1;
			КонецЕсли;    
				
			ГодИспользования = Макс(ГодИспользования, 1);
			
			// Расчет числа лет.			
			ЧислоЛет = Цел(Макс(1, Выборка.СрокСлужбы / 12));
			СуммаЧислеЛет = 0;
			
			// Формула суммы чисел от 1 до N.
			// S = (N + 1) * N / 2.
			СуммаЧислеЛет = (ЧислоЛет + 1) * ЧислоЛет / 2;
			
			ПроцентГодовойАмортизации = Макс((ЧислоЛет - ГодИспользования + 1), 1) / СуммаЧислеЛет;
			СуммаГодовойАмортизации	= Выборка.ПервоначальнаяСтоимость * ПроцентГодовойАмортизации;
			СуммаАмортизации = СуммаГодовойАмортизации / 12;
		КонецЕсли;
		
		Если НЕ ТекстСообщения = "" Тогда 
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.ОсновноеСредствоНаименование);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстСообщения, Неопределено);
		КонецЕсли;	
		
		// Корректировка суммы амортизации с учетом накопленного износа.
		ДоступнаяСуммаАмортизации = Выборка.ПервоначальнаяСтоимость - Выборка.ЛиквидационнаяСтоимость - Выборка.НакопленныйИзнос;
		Если ДоступнаяСуммаАмортизации <= 0 Тогда 
			// Не ошибка. Просто ОС уже самортизированно полностью.
			Продолжить;
		ИначеЕсли ДоступнаяСуммаАмортизации < СуммаАмортизации Тогда 
			СуммаАмортизации = ДоступнаяСуммаАмортизации;
		КонецЕсли;	
		
		// По строкам идет проверка способа отражения расходов по амортизации. Обращаемся к табличной части 
		// данного справочника и в зависимости от количества строк в табличной части строка выборки дублируется и записывается 
		// в ТЧ документа. Записывается "СчетЗатрат" и в зависимости от коэффициентов в 
		// строках табличной части распределяется сумма. А также заполняются колонки "Субконто".
			
		// В соответствие записывается: 
		// Ключ - ссылка на справочник "СпособыОтраженияРасходовПоАмортизации".
		// Значение - таблица значений из запроса к данному элементу справочника.
		// При каждом шаге основного цикла проверяется наличие строки соответствия 
		// по ссылке на справочник, чтобы не обращаться к запросу каждый раз.
		ТЗСпособаОтражения = КэшДанныхСпрСпособыОтрРасхПоАморт.Получить(Выборка.СпособОтраженияРасходовПоАмортизации);
		
		Если ТЗСпособаОтражения = Неопределено Тогда
			ТЗСпособаОтражения = УправлениеВнеоборотнымиАктивамиПовтИсп.СпособыОтраженияРасходовПоАмортизации(Выборка.СпособОтраженияРасходовПоАмортизации); 
			КэшДанныхСпрСпособыОтрРасхПоАморт.Вставить(Выборка.СпособОтраженияРасходовПоАмортизации, ТЗСпособаОтражения);
			
			Если ТЗСпособаОтражения.Количество() = 0 Тогда 
				ТекстСообщения = НСтр("ru = 'Расчет амортизации ОС. В способе отражения не заполнены коэффициенты распределения. Основное средство ""%1"".'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.ОсновноеСредствоНаименование);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстСообщения, Неопределено);
			КонецЕсли;
		КонецЕсли;
		
		МассивКоэффициентов = ТЗСпособаОтражения.ВыгрузитьКолонку("Коэффициент");
		МассивСумм = Неопределено;
		МассивСумм = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаАмортизации, МассивКоэффициентов, 2);

		// Не удалось распределить, следовательно сумма амортизации 0.
		// Добавление массива с одним элементом для корректрого заполнения строки табличной части.
		Если МассивСумм = Неопределено Тогда 
			МассивСумм = Новый Массив;
			МассивСумм.Добавить(0);
		КонецЕсли;	
			
		ИндексМассива = 0;
		Для Каждого СуммаСУчетомКоэф Из МассивСумм Цикл
		
			СтрокаТабличнойЧасти = АмортизацияОС.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
			
			СтрокаТабличнойЧасти.Сумма		= СуммаСУчетомКоэф;
			Если ТЗСпособаОтражения.Количество() > 0 Тогда 
				СтрокаТабличнойЧасти.СчетЗатрат	= ТЗСпособаОтражения[ИндексМассива].СчетЗатрат;
				СтрокаТабличнойЧасти.Субконто1  = ТЗСпособаОтражения[ИндексМассива].Субконто1;
				СтрокаТабличнойЧасти.Субконто2  = ТЗСпособаОтражения[ИндексМассива].Субконто2;
				СтрокаТабличнойЧасти.Субконто3  = ТЗСпособаОтражения[ИндексМассива].Субконто3;
			КонецЕсли;	
			
			ИндексМассива = ИндексМассива + 1;
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры // РассчитатьАмортизациюОсновныхСредств()

// Процедура - Рассчитать переоценку валютных средств.
//
Процедура РассчитатьПереоценкуВалютныхСредств()
	
	// Получение суммы остатков по счетам учета по условию
	//	* Валютный
	//	* Без СпособыПризнанияКурсовойРазницы Оперативно или НеРассчитывать	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Хозрасчетный.Ссылка КАК СчетУчета
		|ПОМЕСТИТЬ ТаблицаСчетаУчета
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаСОсобымПорядкомПереоценки КАК СчетаУчетаСОсобымПорядкомПереоценки
		|		ПО Хозрасчетный.Ссылка = СчетаУчетаСОсобымПорядкомПереоценки.СчетУчета
		|ГДЕ
		|	НЕ Хозрасчетный.Забалансовый
		|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
		|	И Хозрасчетный.Валютный
		|	И НЕ(ЕСТЬNULL(СчетаУчетаСОсобымПорядкомПереоценки.СпособПризнанияКурсовойРазницы, ЗНАЧЕНИЕ(Перечисление.СпособыПризнанияКурсовойРазницы.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СпособыПризнанияКурсовойРазницы.Оперативно)
		|				ИЛИ ЕСТЬNULL(СчетаУчетаСОсобымПорядкомПереоценки.СпособПризнанияКурсовойРазницы, ЗНАЧЕНИЕ(Перечисление.СпособыПризнанияКурсовойРазницы.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СпособыПризнанияКурсовойРазницы.НеРассчитывать))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
		|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
		|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
		|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
		|	ХозрасчетныйОстатки.Валюта КАК Валюта,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.СуммаОстаток - ХозрасчетныйОстатки.ВалютнаяСуммаОстаток * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) * ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) < 0
		|			ТОГДА (ХозрасчетныйОстатки.СуммаОстаток - ХозрасчетныйОстатки.ВалютнаяСуммаОстаток * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) * ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0)) * -1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаДоход,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.СуммаОстаток - ХозрасчетныйОстатки.ВалютнаяСуммаОстаток * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) * ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) > 0
		|			ТОГДА ХозрасчетныйОстатки.СуммаОстаток - ХозрасчетныйОстатки.ВалютнаяСуммаОстаток * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) * ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаУбыток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			ДОБАВИТЬКДАТЕ(&Период, СЕКУНДА, 1),
		|			Счет В
		|				(ВЫБРАТЬ
		|					ТаблицаСчетаУчета.СчетУчета
		|				ИЗ
		|					ТаблицаСчетаУчета КАК ТаблицаСчетаУчета),
		|			,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
		|		ПО ХозрасчетныйОстатки.Валюта = КурсыВалютСрезПоследних.Валюта
		|ГДЕ
		|	ХозрасчетныйОстатки.СуммаОстаток <> ХозрасчетныйОстатки.ВалютнаяСуммаОстаток * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) * ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0)
		|	И (ХозрасчетныйОстатки.СуммаОстаток - ХозрасчетныйОстатки.ВалютнаяСуммаОстаток * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) * ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) >= 0.005
		|			ИЛИ ХозрасчетныйОстатки.СуммаОстаток - ХозрасчетныйОстатки.ВалютнаяСуммаОстаток * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) * ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) <= -0.005)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ХозрасчетныйОстатки.Счет.Код";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Период", Дата); 
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ПереоценкаВалюты.Загрузить(Запрос.Выполнить().Выгрузить())
	
КонецПроцедуры // РассчитатьПереоценкуВалютныхСредств()

// Процедура - Рассчитать НДС на авансы и доотгрузку.
//
Процедура РассчитатьНДСНаАвансыДоотгрузку(ДанныеУчетнойПолитики)	
	
	ЗначениеСтавкиНСП = УчетНДСВызовСервера.ПолучитьСтавкуНСП(Дата, Организация, ДанныеУчетнойПолитики.СтавкаНСПДляРасчетаНДСНаАвансы);
		
	// Описание таблиц запроса:
	// 1. Основная таблица для выбора договоров и сумм оборотов для дальнейшей обработки этих данных;	
	// 2. Таблица из 1 пункта, с корректировкой знака у сумм документов "возврат от покупателя";
	// 3. Таблица отгрузка текущего месяца, выборка из пункта 1 с условием не суммы оборотов дт > 0 (страховка от возврата);
	// 4. Таблица сальдо Дт нач. - получает начальное (на начало месяца) сальдо Дт по договорам из пункта 1;
	// 5. Таблица списка контрагентов - выбока неповторяющихся строк пункта 1;
	// 6. Таблица остатков авансов на начало месяца;
	// 7. Таблица начальных остатков - к договорам (пункт 5) прибавляются данные пунктов 6, 4, а также значения ставок НДС и НСП;
	// 8. Таблица остатков авансов на начало месяца, по которым небыло доотгрузок;
	// 9. Упорядоченная таблица итогов пункта 7;
	// 10. Упорядоченная таблица по пункту 2 с проверкой на не нулевую сумму оплаты;
	// 11. Сгруппированная таблица по пункту 3.	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
		|	ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
		|	ХозрасчетныйОбороты.Период КАК ДатаДокумента,
		|	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		|	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт
		|ПОМЕСТИТЬ ВременнаяТаблицаОборотыРБ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНаАвансы),
		|			&ВидыСубконто,
		|			Организация = &Организация
		|				И Субконто2.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
		|				И Субконто2.СтавкаНДС <> ЗНАЧЕНИЕ(Справочник.СтавкиНДС.Нулевая)
		|				И Субконто2.СтавкаНДС <> ЗНАЧЕНИЕ(Справочник.СтавкиНДС.Освобожденная)
		|				И Субконто2 <> ЕСТЬNULL(Корсубконто2, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)),
		|			,
		|			) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.Регистратор <> &Ссылка
		// Документы аванса
		|	И (ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
		|	ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеВходящее
		|	ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер
		|	ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВводНачальныхОстатков
		// Документы доотгрузки
		|	ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
		|	ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеИсходящее
		|	ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
		|	ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОборотыРБ.Регистратор КАК Регистратор,
		|	ВременнаяТаблицаОборотыРБ.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаОборотыРБ.Договор КАК Договор,
		|	ВременнаяТаблицаОборотыРБ.ДатаДокумента КАК ДатаДокумента,
		|	ВременнаяТаблицаОборотыРБ.СуммаОборотКт - ВременнаяТаблицаОборотыРБ.СуммаОборотДт КАК Оплата
		|ПОМЕСТИТЬ ВременнаяТаблицаОплатаТекущегоМесяца
		|ИЗ
		|	ВременнаяТаблицаОборотыРБ КАК ВременнаяТаблицаОборотыРБ
		|ГДЕ
		|	ВременнаяТаблицаОборотыРБ.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОборотыРБ.Регистратор,
		|	ВременнаяТаблицаОборотыРБ.Контрагент,
		|	ВременнаяТаблицаОборотыРБ.Договор,
		|	ВременнаяТаблицаОборотыРБ.ДатаДокумента,
		|	ВременнаяТаблицаОборотыРБ.СуммаОборотКт
		|ИЗ
		|	ВременнаяТаблицаОборотыРБ КАК ВременнаяТаблицаОборотыРБ
		|ГДЕ
		|	НЕ ВременнаяТаблицаОборотыРБ.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
		|	И ВЫБОР
		|		КОГДА ВременнаяТаблицаОборотыРБ.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
		|			ТОГДА -ВременнаяТаблицаОборотыРБ.СуммаОборотДт < 0
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОборотыРБ.Регистратор КАК Регистратор,
		|	ВременнаяТаблицаОборотыРБ.ДатаДокумента КАК ДатаДокумента,
		|	ВременнаяТаблицаОборотыРБ.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаОборотыРБ.Договор КАК Договор,
		|	ВременнаяТаблицаОборотыРБ.СуммаОборотДт КАК Отгрузка
		|ПОМЕСТИТЬ ВременнаяТаблицаОтгрузкаТекущегоМесяца
		|ИЗ
		|	ВременнаяТаблицаОборотыРБ КАК ВременнаяТаблицаОборотыРБ
		|ГДЕ
		|	ВременнаяТаблицаОборотыРБ.СуммаОборотДт > 0
		|	И ВЫБОР
		|		КОГДА ВременнаяТаблицаОборотыРБ.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
		|			ТОГДА ВременнаяТаблицаОборотыРБ.СуммаОборотДт > 0 ИЛИ ВременнаяТаблицаОборотыРБ.СуммаОборотКт > 0
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОстатки.Субконто2 КАК Договор,
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СальдоДтНач
		|ПОМЕСТИТЬ ВременнаяТаблицаСальдоДтНач
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&НачалоПериода,
		|			Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНаАвансы),
		|			&ВидыСубконто,
		|			Субконто2 В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ВременнаяТаблицаОборотыРБ.Договор
		|				ИЗ
		|					ВременнаяТаблицаОборотыРБ КАК ВременнаяТаблицаОборотыРБ)) КАК ХозрасчетныйОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТиповойОбороты.Контрагент КАК Контрагент,
		|	ТиповойОбороты.Договор КАК Договор,
		|	ТиповойОбороты.Договор.СтавкаНДС КАК СтавкаНДС
		|ПОМЕСТИТЬ ВременнаяТаблицаСписокКонтрагентов
		|ИЗ
		|	ВременнаяТаблицаОборотыРБ КАК ТиповойОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АвансыДоотгрузкаОстатки.Контрагент КАК Контрагент,
		|	АвансыДоотгрузкаОстатки.Договор КАК Договор,
		|	АвансыДоотгрузкаОстатки.СуммаОстаток КАК СуммаОстаток,
		|	АвансыДоотгрузкаОстатки.СуммаНДСОстаток КАК СуммаНДСОстаток,
		|	АвансыДоотгрузкаОстатки.СуммаНСПОстаток КАК СуммаНСПОстаток,
		|	АвансыДоотгрузкаОстатки.ДокументА КАК ДокументАванса,
		|	АвансыДоотгрузкаОстатки.ДокументА.Дата КАК ДатаДокумента,
		|	АвансыДоотгрузкаОстатки.СуммаОстаток КАК СуммаАванса
		|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца
		|ИЗ
		|	РегистрНакопления.АвансыДоотгрузка.Остатки(
		|			&НачалоПериода,
		|			Организация = &Организация) КАК АвансыДоотгрузкаОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСписокКонтрагентов.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаСписокКонтрагентов.Договор КАК Договор,
		|	ЕСТЬNULL(ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца.СуммаОстаток, 0) КАК СуммаАванса,
		|	ЕСТЬNULL(ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца.СуммаНДСОстаток, 0) КАК СуммаНДСОстаток,
		|	ЕСТЬNULL(ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца.СуммаНСПОстаток, 0) КАК СуммаНСПОстаток,
		|	ЕСТЬNULL(СтавкиНДССрезПоследних.Ставка, 0) КАК ЗначениеСтавкиНДС,
		|	&ЗначениеСтавкиНСП КАК ЗначениеСтавкиНСП,
		|	ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца.ДокументАванса,
		|	ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца.ДатаДокумента,
		|	ЕСТЬNULL(ВременнаяТаблицаСальдоДтНач.СальдоДтНач, 0) КАК СальдоДтНач
		|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиНач
		|ИЗ
		|	ВременнаяТаблицаСписокКонтрагентов КАК ВременнаяТаблицаСписокКонтрагентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца КАК ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца
		|		ПО ВременнаяТаблицаСписокКонтрагентов.Договор = ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДС.СрезПоследних(&КонецПериода, ) КАК СтавкиНДССрезПоследних
		|		ПО ВременнаяТаблицаСписокКонтрагентов.СтавкаНДС = СтавкиНДССрезПоследних.СтавкаНДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСальдоДтНач КАК ВременнаяТаблицаСальдоДтНач
		|		ПО ВременнаяТаблицаСписокКонтрагентов.Договор = ВременнаяТаблицаСальдоДтНач.Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца.Договор КАК Договор,
		|	ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца.ДокументАванса КАК Документ,
		|	ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца.ДатаДокумента КАК ДатаДокумента,
		|	ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца.СуммаАванса КАК Сумма
		|ИЗ
		|	ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца КАК ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца
		|ГДЕ
		|	НЕ ВременнаяТаблицаОстаткиАвансовНаНачалоМесяца.Договор В
		|				(ВЫБРАТЬ
		|				    ВременнаяТаблицаСписокКонтрагентов.Договор
		|				ИЗ
		|					ВременнаяТаблицаСписокКонтрагентов КАК ВременнаяТаблицаСписокКонтрагентов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОстаткиНач.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаОстаткиНач.Договор КАК Договор,
		|	ВременнаяТаблицаОстаткиНач.СуммаАванса КАК СуммаАванса,
		|	ВременнаяТаблицаОстаткиНач.СуммаНДСОстаток КАК СуммаНДСОстаток,
		|	ВременнаяТаблицаОстаткиНач.СуммаНСПОстаток КАК СуммаНСПОстаток,
		|	ВременнаяТаблицаОстаткиНач.ЗначениеСтавкиНДС КАК ЗначениеСтавкиНДС,
		|	ВременнаяТаблицаОстаткиНач.ЗначениеСтавкиНСП КАК ЗначениеСтавкиНСП,
		|	ВременнаяТаблицаОстаткиНач.ДокументАванса КАК Документ,
		|	ВременнаяТаблицаОстаткиНач.ДатаДокумента КАК Период,
		|	ВременнаяТаблицаОстаткиНач.СальдоДтНач КАК СальдоДтНач
		|ИЗ
		|	ВременнаяТаблицаОстаткиНач КАК ВременнаяТаблицаОстаткиНач
		|
		|УПОРЯДОЧИТЬ ПО
		|	Договор
		|ИТОГИ
		|	МАКСИМУМ(Контрагент),
		|	МАКСИМУМ(СуммаНДСОстаток),
		|	МАКСИМУМ(СуммаНСПОстаток),
		|	МАКСИМУМ(ЗначениеСтавкиНДС),
		|	МАКСИМУМ(ЗначениеСтавкиНСП),
		|	МАКСИМУМ(СальдоДтНач)
		|ПО
		|	Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОплатаТекущегоМесяца.Регистратор КАК Документ,
		|	ВременнаяТаблицаОплатаТекущегоМесяца.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаОплатаТекущегоМесяца.Договор КАК Договор,
		|	ВременнаяТаблицаОплатаТекущегоМесяца.Оплата КАК Оплата,
		|	ВременнаяТаблицаОплатаТекущегоМесяца.ДатаДокумента КАК Период
		|ИЗ
		|	ВременнаяТаблицаОплатаТекущегоМесяца КАК ВременнаяТаблицаОплатаТекущегоМесяца
		|ГДЕ
		|	ВременнаяТаблицаОплатаТекущегоМесяца.Оплата <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОтгрузкаТекущегоМесяца.Регистратор,
		|	ВременнаяТаблицаОтгрузкаТекущегоМесяца.Контрагент,
		|	ВременнаяТаблицаОтгрузкаТекущегоМесяца.Договор КАК Договор,
		|	СУММА(ВременнаяТаблицаОтгрузкаТекущегоМесяца.Отгрузка) КАК Отгрузка,
		|	ВременнаяТаблицаОтгрузкаТекущегоМесяца.ДатаДокумента КАК Период
		|ИЗ
		|	ВременнаяТаблицаОтгрузкаТекущегоМесяца КАК ВременнаяТаблицаОтгрузкаТекущегоМесяца
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаОтгрузкаТекущегоМесяца.Регистратор,
		|	ВременнаяТаблицаОтгрузкаТекущегоМесяца.Контрагент,
		|	ВременнаяТаблицаОтгрузкаТекущегоМесяца.Договор,
		|	ВременнаяТаблицаОтгрузкаТекущегоМесяца.ДатаДокумента
		|
		|УПОРЯДОЧИТЬ ПО
		|	Договор,
		|	Период";
		
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);	
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос.УстановитьПараметр("КонецПериода", 		КонецМесяца(Дата));
	Запрос.УстановитьПараметр("НачалоПериода", 		НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ВидыСубконто",		ВидыСубконто);
	Запрос.УстановитьПараметр("Организация", 		Организация);          
	Запрос.УстановитьПараметр("ЗначениеСтавкиНСП", 	ЗначениеСтавкиНСП);
	Запрос.УстановитьПараметр("Ссылка", 			Ссылка);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаНеотгруженныхАвансов = РезультатЗапроса[7].Выгрузить();
	ВыборкаДоговор 				= РезультатЗапроса[8].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаОплат 				= РезультатЗапроса[9].Выгрузить();
	ТаблицаОтгрузок 			= РезультатЗапроса[10].Выгрузить();
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));                                     
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")); 
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер")); 
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ВводНачальныхОстатков"));	
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));                                     
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее")); 
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику")); 
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	
	ОписаниеТиповДокументов = Новый ОписаниеТипов(МассивТиповДокументов);
	
	ТЗАвансы = Новый ТаблицаЗначений;               
	ТЗАвансы.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТЗАвансы.Колонки.Добавить("Документ", ОписаниеТиповДокументов);
	ТЗАвансы.Колонки.Добавить("СуммаАванса", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТЗАвансы.Колонки.Добавить("СуммаНДСОстаток", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТЗАвансы.Колонки.Добавить("СуммаНСПОстаток", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТЗАвансы.Колонки.Добавить("ЗначениеСтавкиНДС", ОбщегоНазначения.ОписаниеТипаЧисло(10,2));
	ТЗАвансы.Колонки.Добавить("ЗначениеСтавкиНСП", ОбщегоНазначения.ОписаниеТипаЧисло(10,2));
	ТЗАвансы.Колонки.Добавить("СальдоНаНачало", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	// Заполнение авансов прошлого месяца, для которых нет доотгрузок.
	Для Каждого СтрокаТаблицы Из ТаблицаНеотгруженныхАвансов Цикл	
		СтрокаТабличнойЧасти = АвансыРасшифровка.Добавить(); 	
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы); 
		СтрокаТабличнойЧасти.Уровень = 1;
		
		СтрокаТабличнойЧасти = АвансыИДоотгрузка.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы);
		СтрокаТабличнойЧасти.СуммаАвансНачало 	= СтрокаТаблицы.Сумма;
		СтрокаТабличнойЧасти.СуммаАвансКонец 	= СтрокаТаблицы.Сумма;
	КонецЦикла;	
	
	Пока ВыборкаДоговор.Следующий() Цикл
		
		СуммаАвансовНаНачалоМесяца = 0;
		
		Договор = ВыборкаДоговор.Договор;		
		
		// Доотгрузка
		ТЗАвансы.Очистить();
		ВыборкаДокумента = ВыборкаДоговор.Выбрать();
		
		Пока ВыборкаДокумента.НайтиСледующий(Договор, "Договор")  Цикл
			Если ВыборкаДокумента.СуммаАванса > 0 Тогда
				СТЗ = ТЗАвансы.Добавить();
				ЗаполнитьЗначенияСвойств(СТЗ, ВыборкаДокумента);
				
				СуммаАвансовНаНачалоМесяца = СуммаАвансовНаНачалоМесяца + ВыборкаДокумента.СуммаАванса;
			КонецЕсли;
		КонецЦикла;		
		
		ВсегоАвансов  	= ТЗАвансы.Количество();
		Счетчик			= 0;
		ОстТекАванс		= 0;
		ОтборПоДоговору = Новый Структура("Договор", Договор);		
		
		Если ТЗАвансы.Количество() > 0 Тогда
			ОстТекАванс			= ТЗАвансы[Счетчик].СуммаАванса;
			ТекущийОстатокНДС 	= ТЗАвансы[Счетчик].СуммаНДСОстаток;
			ТекущийОстатокНСП 	= ТЗАвансы[Счетчик].СуммаНСПОстаток;
			
			ТЗДоотгрузка = ТаблицаОтгрузок.Скопировать(ТаблицаОтгрузок.НайтиСтроки(ОтборПоДоговору));
			Для Каждого СтрокаТЗДоотгрузки Из ТЗДоотгрузка  Цикл       
				// Если все авансы закончилсь, то выход
				Если Счетчик > ВсегоАвансов - 1 Тогда 
					Прервать;
				КонецЕсли;				
				
				ОстТекОтгр = СтрокаТЗДоотгрузки.Отгрузка;   			
				
				// Перебираем авансы до тех пор пока не кончится очередная отгрузка или аванс
				Пока ОстТекОтгр > 0 Цикл
					
					Если ОстТекАванс <= 0 Тогда
						Счетчик = Счетчик + 1;
						Если Счетчик > ВсегоАвансов - 1 Тогда
							Прервать;
						КонецЕсли;
						ОстТекАванс 		= ТЗАвансы[Счетчик].СуммаАванса;
						ТекущийОстатокНДС 	= ТЗАвансы[Счетчик].СуммаНДСОстаток;
						ТекущийОстатокНСП 	= ТЗАвансы[Счетчик].СуммаНСПОстаток;
						Продолжить;			 
					КонецЕсли; 
					// СозданиеДоотгрузки
					СуммаДоотгр = Мин(ОстТекАванс, ОстТекОтгр);
					
					ТекущийДокументАванса = ТЗАвансы[Счетчик].Документ;
					
					МассивСтрок = ДоотгрузкаРасшифровка.НайтиСтроки(Новый Структура("ДокументОперации", ТекущийДокументАванса));
					
					// Условие для обобщающей строки с указанием документа аванса, который доотгружается.
					Если МассивСтрок.Количество() = 0 Тогда
						СтрокаТабличнойЧасти					= ДоотгрузкаРасшифровка.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЗДоотгрузки); 
						СтрокаТабличнойЧасти.ДокументОперации	= ТекущийДокументАванса;
						СтрокаТабличнойЧасти.ДатаДокумента		= ТЗАвансы[Счетчик].Период;
						СтрокаТабличнойЧасти.СуммаОстатокАванса = ОстТекАванс;
					КонецЕсли;					
					
					// Строка доотгрузки для выше указанного аванса.
					СтрокаТабличнойЧасти					= ДоотгрузкаРасшифровка.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЗДоотгрузки);
					СтрокаТабличнойЧасти.ДокументОперации 	= СтрокаТЗДоотгрузки.Регистратор;
					СтрокаТабличнойЧасти.ДатаДокумента		= СтрокаТЗДоотгрузки.Период;
					СтрокаТабличнойЧасти.Сумма 				= СуммаДоотгр;
					СтрокаТабличнойЧасти.ДокументАванса		= ТекущийДокументАванса;
					
					// Списание сумм НДС и НСП 
					Если ОстТекАванс > ОстТекОтгр Тогда
						СтрокаТабличнойЧасти.СуммаНДС 	= Окр(СуммаДоотгр / ТЗАвансы[Счетчик].СуммаАванса * ТЗАвансы[Счетчик].СуммаНДСОстаток, 2);
						СтрокаТабличнойЧасти.СуммаНСП 	= Окр(СуммаДоотгр / ТЗАвансы[Счетчик].СуммаАванса * ТЗАвансы[Счетчик].СуммаНСПОстаток, 2);							
						ТекущийОстатокНДС 				= ТекущийОстатокНДС - СтрокаТабличнойЧасти.СуммаНДС;
						ТекущийОстатокНСП 				= ТекущийОстатокНСП - СтрокаТабличнойЧасти.СуммаНСП;
					Иначе
						СтрокаТабличнойЧасти.СуммаНДС 	= ТекущийОстатокНДС;
						СтрокаТабличнойЧасти.СуммаНСП 	= ТекущийОстатокНСП;						
					КонецЕсли;					
					
					// Остаток аванса			
					ОстТекАванс 	= ОстТекАванс 	- СуммаДоотгр; 
					
					Если ОстТекАванс > 0 Тогда
						СтрокаТабличнойЧасти.СуммаОстатокАванса = ОстТекАванс;	
					КонецЕсли;	
					
					// Если текущая отгрузка закончилась, то начинаем новую
					ОстТекОтгр		= ОстТекОтгр 	- СуммаДоотгр;			
					Если ОстТекОтгр = 0 Тогда 
						Прервать;
					КонецЕсли;
					
					// Если очередной аванс кончился, то начинаем следующий
					Если ОстТекАванс <= 0 Тогда
						Счетчик = Счетчик + 1;
						
						// Проверяем, кончились авансы или нет
						Если Счетчик <= ВсегоАвансов - 1 Тогда 
							ОстТекАванс 		= ТЗАвансы[Счетчик].СуммаАванса;
							ТекущийОстатокНДС 	= ТЗАвансы[Счетчик].СуммаНДСОстаток;
							ТекущийОстатокНСП 	= ТЗАвансы[Счетчик].СуммаНСПОстаток;
						Иначе
							Прервать;
						КонецЕсли; // Если все авансы закончилсь, то выход во внешний цикл и выход оттуда
						
						Продолжить;								
					КонецЕсли; 					
				КонецЦикла;				
			КонецЦикла;			
		КонецЕсли; 
		
		// Авансы
		ТЗОплата = ТаблицаОплат.Скопировать(ТаблицаОплат.НайтиСтроки(ОтборПоДоговору));
		
		ВремТаблицаОтгрузок = ТаблицаОтгрузок.Скопировать(ТаблицаОтгрузок.НайтиСтроки(ОтборПоДоговору));
		ВремДоотгрузка 		= ДоотгрузкаРасшифровка.Выгрузить(ДоотгрузкаРасшифровка.НайтиСтроки(ОтборПоДоговору));
				
		Оплата 	 	 		= ТЗОплата.Итог("Оплата"); // включая возврат ТМЗ от покупателя
		Отгрузка 	 		= ВремТаблицаОтгрузок.Итог("Отгрузка"); // включая возврат ДС
		ДоотгрузкаСм		= ВремДоотгрузка.Итог("Сумма");
		
		ТекущаяОтгрузка 	= Макс(0,(Отгрузка - ДоотгрузкаСм));
		
		ОстАванс 			= Макс(0, Оплата - ТекущаяОтгрузка - ВыборкаДоговор.СальдоДтНач);
		
		СуммарнаяСтрокаСоздана = Ложь;
		ОбщаяСуммаАванса = 0;
		
		Для каждого СТЗ Из ТЗОплата Цикл
			
			ТекАванс = Мин(СТЗ.Оплата, ОстАванс);
			
			Если ТекАванс > 0 Тогда
				
				// Создание суммарной строки аванса по контрагенту и договору.
				// Сумма аванса еще не подсчитана, поэтому в данный момент она не указывается. 
				// См. ниже пункт "Заполнение общей суммы аванса"
				Если НЕ СуммарнаяСтрокаСоздана Тогда
					СтрокаТабличнойЧасти = АвансыРасшифровка.Добавить();
					СтрокаТабличнойЧасти.Контрагент = СТЗ.Контрагент;
					СтрокаТабличнойЧасти.Договор = СТЗ.Договор;
					СтрокаТабличнойЧасти.Уровень = 2;
					
					СуммарнаяСтрокаСоздана = Истина;
				КонецЕсли;	
				
				// Рассшифровочная строка 
				СтрокаТабличнойЧасти = АвансыРасшифровка.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СТЗ);
				СтрокаТабличнойЧасти.ДатаДокумента = СТЗ.Период;
				СтрокаТабличнойЧасти.Сумма = ТекАванс;
				СтрокаТабличнойЧасти.СуммаДокумента = СТЗ.Оплата;
				СтрокаТабличнойЧасти.Уровень = 3;
				
				ЭтоБезналичныйРасчет = ТипЗнч(СТЗ.Документ) = ТИП("ДокументСсылка.ПлатежноеПоручениеВходящее");
				Если ЭтоБезналичныйРасчет Тогда
					ЗначениеСтавкиНСП = 0;
				Иначе	
				    ЗначениеСтавкиНСП = ВыборкаДоговор.ЗначениеСтавкиНСП;
				КонецЕсли;
				
				СтрокаТабличнойЧасти.СуммаНДС = Окр(ТекАванс * ВыборкаДоговор.ЗначениеСтавкиНДС / (100 + ВыборкаДоговор.ЗначениеСтавкиНДС + ЗначениеСтавкиНСП), 2);
				СтрокаТабличнойЧасти.СуммаНСП = Окр(ТекАванс * ЗначениеСтавкиНСП / (100 + ВыборкаДоговор.ЗначениеСтавкиНДС + ЗначениеСтавкиНСП), 2);
			КонецЕсли;
			
			ОбщаяСуммаАванса = ОбщаяСуммаАванса + ТекАванс;
			
			ОстАванс = ОстАванс - ТекАванс;
			Если ОстАванс <= 0 Тогда 
				Прервать;	
			КонецЕсли;					
		КонецЦикла;
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Контрагент", ВыборкаДоговор.Контрагент);
		СтруктураОтбора.Вставить("Договор", ВыборкаДоговор.Договор);
		
		МассивСтрок = АвансыРасшифровка.НайтиСтроки(СтруктураОтбора);
		
		// "Заполнение общей суммы аванса"
		// В верхнем цикле высчитан аванс, теперь в суммарную строку записывается эта общая сумма.
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаТабличнойЧасти = МассивСтрок[0];
			СтрокаТабличнойЧасти.Сумма = ОбщаяСуммаАванса;
		КонецЕсли;	
		
		// Создается строка ТЧ "АвансыИДоотгрузка" с общими суммами по контрагенту и договору.
		СтрокаТабличнойЧасти = АвансыИДоотгрузка.Добавить();
		СтрокаТабличнойЧасти.Контрагент 		= ВыборкаДоговор.Контрагент;
		СтрокаТабличнойЧасти.Договор 			= ВыборкаДоговор.Договор;
		СтрокаТабличнойЧасти.СуммаАвансНачало 	= СуммаАвансовНаНачалоМесяца;
		СтрокаТабличнойЧасти.СуммаОплата 		= Оплата;
		СтрокаТабличнойЧасти.СуммаОтгрузка 		= Отгрузка;
		СтрокаТабличнойЧасти.СуммаДоотгрузка 	= ДоотгрузкаСм;
		
		СуммаАванса = СуммаАвансовНаНачалоМесяца + Оплата - Отгрузка;
		
		Если СуммаАванса > 0 Тогда
			СтрокаТабличнойЧасти.СуммаАванс 	 = СуммаАванса;
			СтрокаТабличнойЧасти.СуммаАвансКонец = СуммаАванса;
		Иначе
			СтрокаТабличнойЧасти.СуммаАванс 	 = 0;
			СтрокаТабличнойЧасти.СуммаАвансКонец = 0;
		КонецЕсли;	
	КонецЦикла;	
	
	// Сортировка по контрагенту и договору, внутри их сортировка по уровню в порядке возрастания
	// и последняя сортировка внутри первой(контрагент и договор) и второй(уровень) по дате документа в порядке убывания.
	АвансыРасшифровка.Сортировать("Контрагент, Договор, Уровень, ДатаДокумента УБЫВ");
КонецПроцедуры

// Процедура - Рассчитать НДС.
//
Процедура РассчитатьНДС(ДанныеУчетнойПолитики)
	НачалоПериода 	= НачалоМесяца(Дата);
	КонецПериода 	= КонецМесяца(Дата);
		
	НДС.Очистить();
	
	//
	ПараметрыРасчета = Новый Структура;
	
	ТаблицаДоотгрузки = ДоотгрузкаРасшифровка.Выгрузить();
	ТаблицаДоотгрузки.Свернуть("Контрагент, Договор", "Сумма, СуммаНДС, СуммаНСП");
	
	ПараметрыРасчета.Вставить("Таблица", ТаблицаДоотгрузки);
	СуммаДоотгрузки 						= УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("СуммаДоотгрузки", 						ПараметрыРасчета).РезультатРасчета;
	СуммаНДСДоотгрузки 						= УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("СуммаНДСДоотгрузки", 					ПараметрыРасчета).РезультатРасчета;
	СуммаНСПДоотгрузки 						= УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("СуммаНСПДоотгрузки", 					ПараметрыРасчета).РезультатРасчета;
	СуммаДоотгрузкаНулеваяСтавка 			= УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("СуммаДоотгрузкаНулеваяСтавка", 			ПараметрыРасчета).РезультатРасчета;
	СуммаНДСДоотгрузкаНулеваяСтавка 		= УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("СуммаНДСДоотгрузкаНулеваяСтавка", 		ПараметрыРасчета).РезультатРасчета;	
	СуммаДоотгрузкаОсвобожденнаяСтавка 		= УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("СуммаДоотгрузкаОсвобожденнаяСтавка", 	ПараметрыРасчета).РезультатРасчета;
	СуммаНДСДоотгрузкаОсвобожденнаяСтавка 	= УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("СуммаНДСДоотгрузкаОсвобожденнаяСтавка", ПараметрыРасчета).РезультатРасчета;		
	
	//
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", АвансыРасшифровка);
	СуммаАвансы 							= УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("СуммаАвансы", 							ПараметрыРасчета).РезультатРасчета;
	СуммаНДСАвансы 							= УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("СуммаНДСАвансы", 						ПараметрыРасчета).РезультатРасчета;
	СуммаНСПАвансы 							= УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("СуммаНСПАвансы", 						ПараметрыРасчета).РезультатРасчета;
	СуммаАвансыНулеваяСтавка 				= УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("СуммаАвансыНулеваяСтавка", 				ПараметрыРасчета).РезультатРасчета;
	СуммаНДСАвансыНулеваяСтавка 			= УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("СуммаНДСАвансыНулеваяСтавка", 			ПараметрыРасчета).РезультатРасчета;
	СуммаАвансыОсвобожденнаяСтавка 			= УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("СуммаАвансыОсвобожденнаяСтавка", 		ПараметрыРасчета).РезультатРасчета;
	СуммаНДСАвансыОсвобожденнаяСтавка 		= УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("СуммаНДСАвансыОсвобожденнаяСтавка", 	ПараметрыРасчета).РезультатРасчета;
	
	//
	ТаблицаВсейРеализации	= УчетНДСВызовСервера.ВсеСведенияОРеализации(Организация, НачалоПериода, КонецПериода);
	ТаблицаВсехПоступлений	= УчетНДСВызовСервера.ВсеСведенияОПоступлении(Организация, НачалоПериода, КонецПериода);
	
	//
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", 			ТаблицаВсейРеализации);
	ПараметрыРасчета.Вставить("СуммаАвансы", 		СуммаАвансы);
	ПараметрыРасчета.Вставить("СуммаДоотгрузки", 	СуммаДоотгрузки);
	СуммаПродажОбщая 			= УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("СуммаПродажОбщая", 						ПараметрыРасчета).РезультатРасчета;		
	СуммаПродажОсвобожденная	= УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("СуммаПродажОсвобожденная", 				ПараметрыРасчета).РезультатРасчета;	
	
	// НДСДляРаспределения от поставщиков КР	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", 									ТаблицаВсехПоступлений);
	ПараметрыРасчета.Вставить("УказыватьПризнакЗачетаНДСПриПоступлении", 	ДанныеУчетнойПолитики.УказыватьПризнакЗачетаНДСПриПоступлении);
	НДСДляРаспределенияКР = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("НДСДляРаспределенияКР", ПараметрыРасчета).РезультатРасчета;	
	
	// НДСДляРаспределения от поставщиков ЕАЭС	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", 									ТаблицаВсехПоступлений);
	ПараметрыРасчета.Вставить("УказыватьПризнакЗачетаНДСПриПоступлении", 	ДанныеУчетнойПолитики.УказыватьПризнакЗачетаНДСПриПоступлении);
	НДСДляРаспределенияЕАЭС = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("НДСДляРаспределенияЕАЭС", ПараметрыРасчета).РезультатРасчета;
	
	// НДСДляРаспределения от поставщиков НЕ КР	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", 									ТаблицаВсехПоступлений);
	ПараметрыРасчета.Вставить("УказыватьПризнакЗачетаНДСПриПоступлении", 	ДанныеУчетнойПолитики.УказыватьПризнакЗачетаНДСПриПоступлении);
	НДСДляРаспределенияНеКР = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("НДСДляРаспределенияНеКР", ПараметрыРасчета).РезультатРасчета;

	// НДСКР Себестоимость	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", 									ТаблицаВсехПоступлений);
	ПараметрыРасчета.Вставить("УказыватьПризнакЗачетаНДСПриПоступлении", 	ДанныеУчетнойПолитики.УказыватьПризнакЗачетаНДСПриПоступлении);
	НДСКРСебестоимость = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("НДСКРСебестоимость", ПараметрыРасчета).РезультатРасчета;
	
	// НДСЕАЭС Себестоимость	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", 									ТаблицаВсехПоступлений);
	ПараметрыРасчета.Вставить("УказыватьПризнакЗачетаНДСПриПоступлении", 	ДанныеУчетнойПолитики.УказыватьПризнакЗачетаНДСПриПоступлении);
	НДСЕАЭССебестоимость = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("НДСЕАЭССебестоимость", ПараметрыРасчета).РезультатРасчета;
	
	// НДСНеКР Себестоимость	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", 									ТаблицаВсехПоступлений);
	ПараметрыРасчета.Вставить("УказыватьПризнакЗачетаНДСПриПоступлении", 	ДанныеУчетнойПолитики.УказыватьПризнакЗачетаНДСПриПоступлении);
	НДСНеКРСебестоимость = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("НДСНеКРСебестоимость", ПараметрыРасчета).РезультатРасчета;
	
	// Сумма050
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", 			ТаблицаВсейРеализации);
	ПараметрыРасчета.Вставить("Период",  			Дата);
	ПараметрыРасчета.Вставить("СуммаАвансы", 		СуммаАвансы);
	ПараметрыРасчета.Вставить("СуммаНДСАвансы", 	СуммаНДСАвансы);
	ПараметрыРасчета.Вставить("СуммаНСПАвансы", 	СуммаНСПАвансы);
	ПараметрыРасчета.Вставить("СуммаДоотгрузки", 	СуммаДоотгрузки); 
	ПараметрыРасчета.Вставить("СуммаНДСДоотгрузки", СуммаНДСДоотгрузки);
	ПараметрыРасчета.Вставить("СуммаНСПДоотгрузки", СуммаНСПДоотгрузки);
	Сумма050 = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("Сумма050", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "050";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'ОБЛАГАЕМЫЕ ПОСТАВКИ НА ТЕРРИТОРИИ КР'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма050;
	
	// Сумма051
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", ТаблицаВсейРеализации);
	Сумма051 = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("Сумма051", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "051";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'ПОСТАВКИ, ОБЛАГАЕМЫЕ ПО НУЛЕВОЙ СТАВКЕ'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма051;	
	
	// Сумма052
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", 						ТаблицаВсейРеализации);
	Сумма052 = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("Сумма052", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "052";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'В ТОМ ЧИСЛЕ В ЕВРАЗИЙСКИЙ ЭКОНОМИЧЕСКИЙ СОЮЗ'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма052;
	
	// Сумма053
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", ТаблицаВсейРеализации);
	ПараметрыРасчета.Вставить("Период",  Дата);
	Сумма053 = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("Сумма053", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "053";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'ОСВОБОЖДЕННЫЕ И НЕОБЛАГАЕМЫЕ ПОСТАВКИ'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма053;	
		
	// Сумма054
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Сумма050", 	Сумма050);
	ПараметрыРасчета.Вставить("Сумма051", 	Сумма051);
	ПараметрыРасчета.Вставить("Сумма053", 	Сумма053);
	Сумма054 = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("Сумма054", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "054";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'ОБЩАЯ СТОИМОСТЬ  ПОСТАВОК (=050+051+053)'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма054;	
	
	// КоэффициентОсвобожденныхПоставокРасчетный
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ПороговыйПроцентОсвобожденныхПоставок", 	ДанныеУчетнойПолитики.ПороговыйПроцентОсвобожденныхПоставок);
	ПараметрыРасчета.Вставить("Сумма053", 								Сумма053);
	ПараметрыРасчета.Вставить("Сумма054", 								Сумма054);
	КоэффициентОсвобожденныхПоставокРасчетный = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("КоэффициентОсвобожденныхПоставокРасчетный", ПараметрыРасчета).РезультатРасчета;		
	
	// НДСКР не разрешенный к зачету
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("КфОПР", КоэффициентОсвобожденныхПоставокРасчетный);
	ПараметрыРасчета.Вставить("НДСДляРаспределенияКР", НДСДляРаспределенияКР);
	ПараметрыРасчета.Вставить("НДСКРСебестоимость", НДСКРСебестоимость);
	НДСКРНеРазрешенныйКЗачету = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("НДСКРНеРазрешенныйКЗачету", ПараметрыРасчета).РезультатРасчета;
	                  
	// НДСЕАЭС не разрешенный к зачету
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("КфОПР", КоэффициентОсвобожденныхПоставокРасчетный);
	ПараметрыРасчета.Вставить("НДСДляРаспределенияЕАЭС", НДСДляРаспределенияЕАЭС);
	ПараметрыРасчета.Вставить("НДСЕАЭССебестоимость", НДСЕАЭССебестоимость);
	НДСЕАЭСНеРазрешенныйКЗачету = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("НДСЕАЭСНеРазрешенныйКЗачету", ПараметрыРасчета).РезультатРасчета;
	
	// НДСНеКР не разрешенный к зачету
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", ТаблицаВсехПоступлений);
	ПараметрыРасчета.Вставить("УказыватьПризнакЗачетаНДСПриПоступлении", ДанныеУчетнойПолитики.УказыватьПризнакЗачетаНДСПриПоступлении);
	ПараметрыРасчета.Вставить("КфОПР", КоэффициентОсвобожденныхПоставокРасчетный);
	ПараметрыРасчета.Вставить("НДСДляРаспределенияКР", НДСДляРаспределенияКР);
	ПараметрыРасчета.Вставить("НДСДляРаспределенияЕАЭС", НДСДляРаспределенияЕАЭС);
	ПараметрыРасчета.Вставить("НДСНеКРСебестоимость", НДСНеКРСебестоимость);   
	НДСНеКРНеРазрешенныйКЗачету = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("НДСНеКРНеРазрешенныйКЗачету", ПараметрыРасчета).РезультатРасчета;

	// Сумма055
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", ТаблицаВсехПоступлений);
	Сумма055 = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("Сумма055", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "055";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'ПРИОБРЕТЕННЫЕ МАТЕРИАЛЬНЫЕ РЕСУРСЫ В КР'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма055;	
	
	// Сумма056
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", ТаблицаВсехПоступлений);
	Сумма056 = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("Сумма056", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "056";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'ИМПОРТ МАТЕРИАЛЬНЫХ РЕСУРСОВ В КР'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма056;	
	
	// Сумма057
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", ТаблицаВсехПоступлений);
	Сумма057 = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("Сумма057", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "057";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'В ТОМ ЧИСЛЕ ИЗ ГОСУДАРСТВ-ЧЛЕНОВ ЕВРАЗИЙСКОГО ЭКОНОМИЧЕСКОГО СОЮЗА'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма057;
	
	// Сумма058
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Сумма055", 	Сумма055);
	ПараметрыРасчета.Вставить("Сумма056", 	Сумма056);
	Сумма058 = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("Сумма058", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "058";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'ОБЩАЯ СТОИМОСТЬ ПРИОБРЕТЕННЫХ МАТЕРИАЛЬНЫХ РЕСУРСОВ (=055+056)'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма058;	
		
	// Сумма059
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", 			ТаблицаВсейРеализации);
	ПараметрыРасчета.Вставить("СуммаНДСАвансы", 	СуммаНДСАвансы);
	ПараметрыРасчета.Вставить("СуммаНДСДоотгрузки", СуммаНДСДоотгрузки);
	Сумма059 = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("Сумма059", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "059";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'ОБЩАЯ СУММА НДС ЗА ПРОИЗВЕДЕННЫЕ ПОСТАВКИ ( =050 х ставку / 100%)'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма059;	
	
	// Сумма060
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", 					ТаблицаВсехПоступлений);
	ПараметрыРасчета.Вставить("НДСКРНеРазрешенныйКЗачету", 	НДСКРНеРазрешенныйКЗачету);
	Сумма060 = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("Сумма060", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "060";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'НДС ЗА ПРИОБРЕТЕННЫЕ МАТЕРИАЛЬНЫЕ РЕСУРСЫ, ПОДЛЕЖАЩИЙ ЗАЧЕТУ'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма060;	
		
	// Сумма061
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", 						ТаблицаВсехПоступлений);
	ПараметрыРасчета.Вставить("НДСНеКРНеРазрешенныйКЗачету", 	НДСНеКРНеРазрешенныйКЗачету);
	Сумма061 = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("Сумма061", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "061";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'НДС НА ИМПОРТ ПОДЛЕЖАЩИЙ ЗАЧЕТУ'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма061;		
		
	// Сумма062
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Таблица", 						ТаблицаВсехПоступлений);
	ПараметрыРасчета.Вставить("НДСЕАЭСНеРазрешенныйКЗачету", 	НДСЕАЭСНеРазрешенныйКЗачету);
	Сумма062 = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("Сумма062", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "062";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'В ТОМ ЧИСЛЕ ИЗ ЕВРАЗИЙСКОГО ЭКОНОМИЧЕСКОГО  СОЮЗА'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма062;	
		
	// Сумма063
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("НДСКРНеРазрешенныйКЗачету", 		НДСКРНеРазрешенныйКЗачету);
	ПараметрыРасчета.Вставить("НДСНеКРНеРазрешенныйКЗачету", 	НДСНеКРНеРазрешенныйКЗачету);
	Сумма063 = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("Сумма063", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "063";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'НДС ЗА ПРИОБРЕТЕННЫЕ МАТЕРИАЛЬНЫЕ РЕСУРСЫ, НЕ ПОДЛЕЖАЩИЙ ЗАЧЕТУ'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма063;		
		
	// Сумма064
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Сумма060", 	Сумма060);
	ПараметрыРасчета.Вставить("Сумма061", 	Сумма061);
	Сумма064 = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("Сумма064", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "064";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'ОБЩАЯ СУММА НДС ЗА ПРИОБРЕТЕННЫЕ МАТЕРИАЛЬНЫЕ РЕСУРСЫ, ПОДЛЕЖАЩАЯ ЗАЧЕТУ (=060+061)'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма064;	
			
	// Сумма065
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Сумма051", 	Сумма051);
	ПараметрыРасчета.Вставить("Сумма050", 	Сумма050);
	ПараметрыРасчета.Вставить("Сумма064", 	Сумма064);;
	Сумма065 = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("Сумма065", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "065";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'В ТОМ ЧИСЛЕ НДС ЗА ПРИОБРЕТЕННЫЕ МАТЕРИАЛЬНЫЕ РЕСУРСЫ, ИСПОЛЬЗУЕМЫЕ ДЛЯ ПОСТАВОК С НУЛЕВОЙ СТАВКОЙ'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма065;	
			
	// Сумма066
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Сумма059",	Сумма059);
	ПараметрыРасчета.Вставить("Сумма064", 	Сумма064); 
	Сумма066 = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("Сумма066", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "066";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'НАЛОГОВОЕ ОБЯЗАТЕЛЬСТВО (=059-064) (УКАЖИТЕ ЗНАК МИНУС, ЕСЛИ ЗНАЧЕНИЕ ОТРИЦАТЕЛЬНОЕ)'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма066;	
	
	// Сумма067		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "067";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'НАЛОГОВОЕ ОБЯЗАТЕЛЬСТВО ПО ПРОМЫШЛЕННОЙ ПЕРЕРАБОТКЕ СЕЛЬСКОХОЗЯЙСТВЕННОЙ ПРОДУКЦИИ, ПОДЛЕЖАЩЕЕ УМЕНЬШЕНИЮ НА 35 % (УКАЖИТЕ ЗНАК МИНУС, ЕСЛИ ЗНАЧЕНИЕ ОТРИЦАТЕЛЬНОЕ)'");
	СтрокаТабличнойЧасти.Сумма 	= 0;	
	
	// Сумма068
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Сумма066",	Сумма066);
	ПараметрыРасчета.Вставить("Сумма067", 	0); 
	Сумма068 = УчетНДСВызовСервера.РасчетСуммыОтчетаНДС("Сумма068", ПараметрыРасчета).РезультатРасчета;		
	СтрокаТабличнойЧасти = НДС.Добавить();
	СтрокаТабличнойЧасти.Строка = "068";	
	СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'НАЛОГОВОЕ ОБЯЗАТЕЛЬСТВО ВСЕГО (=066-067-068) (УКАЖИТЕ ЗНАК МИНУС, ЕСЛИ ЗНАЧЕНИЕ ОТРИЦАТЕЛЬНОЕ)'");
	СтрокаТабличнойЧасти.Сумма 	= Сумма068;	
	
	Если ДанныеУчетнойПолитики.Контракт Тогда	
		// Сумма069		
		СтрокаТабличнойЧасти = НДС.Добавить();
		СтрокаТабличнойЧасти.Строка = "069";	
		СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'ОБЛАГАЕМЫЕ ПОСТАВКИ'");
		СтрокаТабличнойЧасти.Сумма 	= 0;
		
		// Сумма070		
		СтрокаТабличнойЧасти = НДС.Добавить();
		СтрокаТабличнойЧасти.Строка = "070";	
		СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'СУММА НДС ЗА ПРОИЗВЕДЕННЫЕ ПОСТАВКИ'");
		СтрокаТабличнойЧасти.Сумма 	= 0;	
		
		// Сумма071		
		СтрокаТабличнойЧасти = НДС.Добавить();
		СтрокаТабличнойЧасти.Строка = "071";	
		СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'ПРИОБРЕТЕННЫЕ МАТЕРИАЛЬНЫЕ РЕСУРСЫ'");
		СтрокаТабличнойЧасти.Сумма 	= 0;	
		
		// Сумма072		
		СтрокаТабличнойЧасти = НДС.Добавить();
		СтрокаТабличнойЧасти.Строка = "072";	
		СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'СУММА НДС ЗА ПРИОБРЕТЕННЫЕ МАТЕРИАЛЬНЫЕ РЕСУРСЫ'");
		СтрокаТабличнойЧасти.Сумма 	= 0;	
	КонецЕсли;
	
	// Формирование проводки 8100 - 1540 	
	Сумма_8100_1540 = Окр(КоэффициентОсвобожденныхПоставокРасчетный * НДСДляРаспределенияКР,2) 
					+ Окр(КоэффициентОсвобожденныхПоставокРасчетный * НДСДляРаспределенияЕАЭС,2) 
					+ Окр(КоэффициентОсвобожденныхПоставокРасчетный * НДСДляРаспределенияНеКР,2); 
									
	Если Сумма_8100_1540 > 0 Тогда
		Если Справочники.СпискиСчетов.РасходыПоНезачтенномуНДС.СписокСчетов.Количество() > 0 Тогда
			РасходыПоНДСнеПринимаемомуКЗачету = Справочники.СпискиСчетов.РасходыПоНезачтенномуНДС.СписокСчетов[0].СчетУчета;
		Иначе
			РасходыПоНДСнеПринимаемомуКЗачету = ПланыСчетов.Хозрасчетный.РасходыПоНДСнеПринимаемомуКЗачету;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = КорректировкаНДС.Добавить();
		СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'НДС не разрешенный к зачету'");
		СтрокаТабличнойЧасти.СчетДт = РасходыПоНДСнеПринимаемомуКЗачету;
		СтрокаТабличнойЧасти.СчетКт = ПланыСчетов.Хозрасчетный.НДС_ПодлежащийВозмещению;
		СтрокаТабличнойЧасти.Сумма	= Сумма_8100_1540;
	КонецЕсли;
		
	// Закрытие счетов 1540-3430
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаК, Счет В (&МассивСчетов), , Организация = &Организация) КАК ХозрасчетныйОстатки";
	
	Счет3430 = ПланыСчетов.Хозрасчетный.НДСКОплате;
	Счет1540 = ПланыСчетов.Хозрасчетный.НДС_ПодлежащийВозмещению;
	
	МассивСчетов = Новый Массив();
	МассивСчетов.Добавить(Счет1540);
	МассивСчетов.Добавить(Счет3430);	
	
	Запрос.УстановитьПараметр("МассивСчетов",	МассивСчетов);
	Запрос.УстановитьПараметр("ДатаК", 			КонецМесяца(Дата)+1);
	Запрос.УстановитьПараметр("Организация", 	Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СальдоДт1540 = 0;
	СальдоКт3430 = 0;
	
	Пока Выборка.Следующий() Цикл
		
		// Счет 1540
		Если Выборка.Счет = Счет1540 Тогда
			СальдоДт1540 = Выборка.СуммаОстатокДт;
			
		// Счет 3430
		Иначе
			СальдоКт3430 = Выборка.СуммаОстатокКт;	
		КонецЕсли;		
	КонецЦикла;	
	
	СальдоДт1540 = СальдоДт1540 - Сумма_8100_1540;
	СальдоКт3430 = СальдоКт3430 + АвансыРасшифровка.Итог("СуммаНДС");
	
	Если НЕ (СальдоДт1540 = 0 И СальдоКт3430 = 0) Тогда
			
		СтрокаТабличнойЧасти = КорректировкаНДС.Добавить();				
		СтрокаТабличнойЧасти.Содержание = НСтр("ru = 'НДС в зачет'");
			
		Если СальдоКт3430 > СальдоДт1540 Тогда
			СтрокаТабличнойЧасти.СчетДт = Счет3430;
			СтрокаТабличнойЧасти.СчетКт = Счет1540; 
			СтрокаТабличнойЧасти.Сумма	= СальдоДт1540;
		Иначе
			СтрокаТабличнойЧасти.СчетДт = Счет3430;  
			СтрокаТабличнойЧасти.СчетКт = Счет1540;
			СтрокаТабличнойЧасти.Сумма	= СальдоКт3430;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

// Процедура - Рассчитать Налог на имущество.
//
Процедура РассчитатьНалогНаИмущество(Ошибки)
	
	// Предварительная очистка.
	Недвижимость.Очистить();
	Транспорт.Очистить();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// 1. Все основные средства принятые к учету на начало расчетного года.
	// 2. Все основные средства принятые к в течение расчетного года.
	// 3. Все основные средства снятые с учета в течение расчетного года.
	// 3. Все основные средства для расчета налога.
	
	// Сведения об ОС.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	СостоянияОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	СостоянияОССрезПоследних.Период КАК ПериодПринятоКУчету
		|ПОМЕСТИТЬ ВременнаяТаблицаСостоянияОСПринятоКУчету
		|ИЗ
		|	РегистрСведений.СостоянияОС.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК СостоянияОССрезПоследних
		|ГДЕ
		|	СостоянияОССрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	СостоянияОС.ОсновноеСредство,
		|	СостоянияОС.Период
		|ИЗ
		|	РегистрСведений.СостоянияОС КАК СостоянияОС
		|ГДЕ
		|	СостоянияОС.Период > &НачалоПериода
		|	И СостоянияОС.Период <= &КонецПериода
		|	И СостоянияОС.Организация = &Организация
		|	И СостоянияОС.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	3 КАК Порядок,
		|	СостоянияОССрезПервых.ОсновноеСредство КАК ОсновноеСредство,
		|	СостоянияОССрезПервых.Период КАК ПериодСнятоСУчета,
		|	МЕСЯЦ(СостоянияОССрезПервых.Период) КАК МесяцСнятоСУчета
		|ПОМЕСТИТЬ ВременнаяТаблицаСостоянияОССнятоСУчета
		|ИЗ
		|	РегистрСведений.СостоянияОС.СрезПоследних(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаСостоянияОСПринятоКУчету.ОсновноеСредство КАК ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаСостоянияОСПринятоКУчету КАК ВременнаяТаблицаСостоянияОСПринятоКУчету)) КАК СостоянияОССрезПервых
		|ГДЕ
		|	СостоянияОССрезПервых.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСостоянияОСПринятоКУчету.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаСостоянияОСПринятоКУчету.ПериодПринятоКУчету КАК ПериодПринятоКУчету,
		// Расчет количетва месяцев эксплкатации.		
		|	ВЫБОР
		// Если принято к учету и снято с учета в текущем году в одном и том же месяце.
		|		КОГДА ГОД(ВременнаяТаблицаСостоянияОСПринятоКУчету.ПериодПринятоКУчету) = ГОД(&НачалоПериода)
		|				И ГОД(ЕСТЬNULL(ВременнаяТаблицаСостоянияОССнятоСУчета.ПериодСнятоСУчета, ДАТАВРЕМЯ(1, 1, 1))) = ГОД(&НачалоПериода)
		|				И МЕСЯЦ(ВременнаяТаблицаСостоянияОСПринятоКУчету.ПериодПринятоКУчету) = МЕСЯЦ(ЕСТЬNULL(ВременнаяТаблицаСостоянияОССнятоСУчета.ПериодСнятоСУчета, ДАТАВРЕМЯ(1, 1, 1)))
		|			ТОГДА 1
		// Если принято к учету и снято с учета в текущем году.
		|		КОГДА ГОД(ВременнаяТаблицаСостоянияОСПринятоКУчету.ПериодПринятоКУчету) = ГОД(&НачалоПериода)
		|				И ГОД(ЕСТЬNULL(ВременнаяТаблицаСостоянияОССнятоСУчета.ПериодСнятоСУчета, ДАТАВРЕМЯ(1, 1, 1))) = ГОД(&НачалоПериода)
		|			ТОГДА ВременнаяТаблицаСостоянияОССнятоСУчета.МесяцСнятоСУчета - МЕСЯЦ(ВременнаяТаблицаСостоянияОСПринятоКУчету.ПериодПринятоКУчету)
		// Если принято к учету в текущем году.
		|		КОГДА ГОД(ВременнаяТаблицаСостоянияОСПринятоКУчету.ПериодПринятоКУчету) = ГОД(&НачалоПериода)
		|			ТОГДА 13 - МЕСЯЦ(ВременнаяТаблицаСостоянияОСПринятоКУчету.ПериодПринятоКУчету)
		// Если снято с учета в текущем году.
		|		КОГДА НЕ ЕСТЬNULL(ВременнаяТаблицаСостоянияОССнятоСУчета.ПериодСнятоСУчета, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ВременнаяТаблицаСостоянияОССнятоСУчета.МесяцСнятоСУчета - 1
		// Если принято ранее текущего года и не снято с учета. 
		|		ИНАЧЕ 12
		|	КОНЕЦ КАК КоличествоМесяцевЭксплуатации,
		|	ПараметрыУчетаОССрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ПараметрыУчетаОССрезПоследних.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость
		|ПОМЕСТИТЬ ВременнаяТаблицаСостоянияОС
		|ИЗ
		|	ВременнаяТаблицаСостоянияОСПринятоКУчету КАК ВременнаяТаблицаСостоянияОСПринятоКУчету
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСостоянияОССнятоСУчета КАК ВременнаяТаблицаСостоянияОССнятоСУчета
		|		ПО ВременнаяТаблицаСостоянияОСПринятоКУчету.ОсновноеСредство = ВременнаяТаблицаСостоянияОССнятоСУчета.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
		|				&КонецПериода,
		|				Организация = &Организация
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаСостоянияОСПринятоКУчету.ОсновноеСредство КАК ОсновноеСредство
		|						ИЗ
		|							ВременнаяТаблицаСостоянияОСПринятоКУчету КАК ВременнаяТаблицаСостоянияОСПринятоКУчету)) КАК ПараметрыУчетаОССрезПоследних
		|		ПО ВременнаяТаблицаСостоянияОСПринятоКУчету.ОсновноеСредство = ПараметрыУчетаОССрезПоследних.ОсновноеСредство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство";
	Запрос.УстановитьПараметр("Организация", Организация);			   
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(Дата));			   
	Запрос.УстановитьПараметр("КонецПериода", Дата);			   
	Запрос.Выполнить();
	
	// Недвижимость.
	
	// 1. Сведения об имуществе для групп 1,2,3.
	// 2. Шкала оценки по виду материалов стен.
	// 3. Коэффициенты региональный, зональный и отраслевой.
	// 4. Ставки налога на имущество.
	// 5. Результат для расчета.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	СведенияОбИмуществеСрезПоследних.ГруппаИмущества КАК ГруппаИмущества,
		|	СведенияОбИмуществеСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	СведенияОбИмуществеСрезПоследних.МатериалСтен КАК МатериалСтен,
		|	СведенияОбИмуществеСрезПоследних.ДатаВводаВЭксплуатацию КАК ДатаВвода,
		|	СведенияОбИмуществеСрезПоследних.РегиональныйКоэффициент КАК РегиональныйКоэффициент,
		|	СведенияОбИмуществеСрезПоследних.ЗональныйКоэффициент КАК ЗональныйКоэффициент,
		|	СведенияОбИмуществеСрезПоследних.ОтраслевойКоэффициент КАК ОтраслевойКоэффициент,
		|	СведенияОбИмуществеСрезПоследних.ЖилаяПлощадь КАК ЖилаяПлощадь,
		|	СведенияОбИмуществеСрезПоследних.НежилаяПлощадь КАК НежилаяПлощадь,
		|	СведенияОбИмуществеСрезПоследних.ЖилаяПлощадь + СведенияОбИмуществеСрезПоследних.НежилаяПлощадь КАК ОбщаяПлощадь,
		|	ГОД(&Период) - ГОД(ВременнаяТаблицаСостоянияОС.ПериодПринятоКУчету) КАК КоличествоЛетЭксплуатации,
		|	ВременнаяТаблицаСостоянияОС.КоличествоМесяцевЭксплуатации КАК КоличествоМесяцевЭксплуатации,
		|	ВременнаяТаблицаСостоянияОС.ИнвентарныйНомер КАК ИнвентарныйНомер
		|ПОМЕСТИТЬ ВременнаяТаблицаИмущество
		|ИЗ
		|	ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИмуществе.СрезПоследних(
		|				&Период,
		|				Организация = &Организация
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаСостоянияОС.ОсновноеСредство КАК ОсновноеСредство
		|						ИЗ
		|							ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС)) КАК СведенияОбИмуществеСрезПоследних
		|		ПО ВременнаяТаблицаСостоянияОС.ОсновноеСредство = СведенияОбИмуществеСрезПоследних.ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	2 КАК Порядок,
		|	ШкалаОценкиСтоимостиМакс.ОсновноеСредство КАК ОсновноеСредство,
		|	ШкалаОценкиСтоимости.Ставка КАК ОценочнаяСтоимость
		|ПОМЕСТИТЬ ВременнаяТаблицаОценкиСтоимостиНедвижимость
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВременнаяТаблицаИмущество.ОсновноеСредство КАК ОсновноеСредство,
		|		ВременнаяТаблицаИмущество.МатериалСтен КАК МатериалСтен,
		|		МАКСИМУМ(ШкалаОценкиСтоимости.НижняяГраница) КАК НижняяГраница
		|	ИЗ
		|		ВременнаяТаблицаИмущество КАК ВременнаяТаблицаИмущество
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыМатериаловСтенНалогНаИмущество.ШкалаОценкиСтоимости КАК ШкалаОценкиСтоимости
		|			ПО ВременнаяТаблицаИмущество.МатериалСтен = ШкалаОценкиСтоимости.Ссылка
		|				И ВременнаяТаблицаИмущество.КоличествоЛетЭксплуатации >= ШкалаОценкиСтоимости.НижняяГраница
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВременнаяТаблицаИмущество.ОсновноеСредство,
		|		ВременнаяТаблицаИмущество.МатериалСтен) КАК ШкалаОценкиСтоимостиМакс
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыМатериаловСтенНалогНаИмущество.ШкалаОценкиСтоимости КАК ШкалаОценкиСтоимости
		|		ПО ШкалаОценкиСтоимостиМакс.МатериалСтен = ШкалаОценкиСтоимости.Ссылка
		|			И ШкалаОценкиСтоимостиМакс.НижняяГраница = ШкалаОценкиСтоимости.НижняяГраница
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	3 КАК Порядок,
		|	ВременнаяТаблицаИмущество.ОсновноеСредство КАК ОсновноеСредство,
		|	ЕСТЬNULL(КоэффициентыНалогаНаИмуществоРегиональные.Коэффициент, 0) КАК РегиональныйКоэффициент,
		|	ЕСТЬNULL(КоэффициентыНалогаНаИмуществоЗональные.Коэффициент, 0) КАК ЗональныйКоэффициент,
		|	ЕСТЬNULL(КоэффициентыНалогаНаИмуществоОтраслевые.Коэффициент, 0) КАК ОтраслевойКоэффициент
		|ПОМЕСТИТЬ ВременнаяТаблицаКоэффициенты
		|ИЗ
		|	ВременнаяТаблицаИмущество КАК ВременнаяТаблицаИмущество
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентыНалогаНаИмущество.СрезПоследних(
		|				&Период,
		|				Классификация В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВременнаяТаблицаИмущество.РегиональныйКоэффициент КАК РегиональныйКоэффициент
		|					ИЗ
		|						ВременнаяТаблицаИмущество КАК ВременнаяТаблицаИмущество)) КАК КоэффициентыНалогаНаИмуществоРегиональные
		|		ПО ВременнаяТаблицаИмущество.РегиональныйКоэффициент = КоэффициентыНалогаНаИмуществоРегиональные.Классификация
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентыНалогаНаИмущество.СрезПоследних(
		|				&Период,
		|				Классификация В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВременнаяТаблицаИмущество.ЗональныйКоэффициент КАК ЗональныйКоэффициент
		|					ИЗ
		|						ВременнаяТаблицаИмущество КАК ВременнаяТаблицаИмущество)) КАК КоэффициентыНалогаНаИмуществоЗональные
		|		ПО ВременнаяТаблицаИмущество.ЗональныйКоэффициент = КоэффициентыНалогаНаИмуществоЗональные.Классификация
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентыНалогаНаИмущество.СрезПоследних(
		|				&Период,
		|				Классификация В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВременнаяТаблицаИмущество.ОтраслевойКоэффициент КАК ОтраслевойКоэффициент
		|					ИЗ
		|						ВременнаяТаблицаИмущество КАК ВременнаяТаблицаИмущество)) КАК КоэффициентыНалогаНаИмуществоОтраслевые
		|		ПО ВременнаяТаблицаИмущество.ОтраслевойКоэффициент = КоэффициентыНалогаНаИмуществоОтраслевые.Классификация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	4 КАК Порядок,
		|	ВременнаяТаблицаИмущество.ОсновноеСредство КАК ОсновноеСредство,
		|	ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.Ставка, 0) КАК Ставка
		|ПОМЕСТИТЬ ВременнаяТаблицаСтавки
		|ИЗ
		|	ВременнаяТаблицаИмущество КАК ВременнаяТаблицаИмущество
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНалогаНаИмущество.СрезПоследних(
		|				&Период,
		|				ГруппаНалогаНаИмущество В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВременнаяТаблицаИмущество.ГруппаИмущества КАК ГруппаИмущества
		|					ИЗ
		|						ВременнаяТаблицаИмущество КАК ВременнаяТаблицаИмущество)) КАК СтавкиНалогаНаИмуществоСрезПоследних
		|		ПО ВременнаяТаблицаИмущество.ГруппаИмущества = СтавкиНалогаНаИмуществоСрезПоследних.ГруппаНалогаНаИмущество
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаИмущество.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаИмущество.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ВременнаяТаблицаИмущество.ОсновноеСредство.Наименование КАК ОсновноеСредствоНаименование,
		|	ВременнаяТаблицаИмущество.ГруппаИмущества КАК ГруппаИмущества,
		|	ВременнаяТаблицаИмущество.ОбщаяПлощадь КАК ОбщаяПлощадь,
		|	ВременнаяТаблицаИмущество.КоличествоМесяцевЭксплуатации КАК КоличествоМесяцевЭксплуатации,
		|	ЕСТЬNULL(ВременнаяТаблицаОценкиСтоимости.ОценочнаяСтоимость, 0) КАК ОценочнаяСтоимость,
		|	ЕСТЬNULL(ВременнаяТаблицаКоэффициенты.РегиональныйКоэффициент, 0) КАК РегиональныйКоэффициент,
		|	ЕСТЬNULL(ВременнаяТаблицаКоэффициенты.ЗональныйКоэффициент, 0) КАК ЗональныйКоэффициент,
		|	ЕСТЬNULL(ВременнаяТаблицаКоэффициенты.ОтраслевойКоэффициент, 0) КАК ОтраслевойКоэффициент,
		|	ЕСТЬNULL(ВременнаяТаблицаСтавки.Ставка, 0) КАК Ставка
		|ИЗ
		|	ВременнаяТаблицаИмущество КАК ВременнаяТаблицаИмущество
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОценкиСтоимостиНедвижимость КАК ВременнаяТаблицаОценкиСтоимости
		|		ПО ВременнаяТаблицаИмущество.ОсновноеСредство = ВременнаяТаблицаОценкиСтоимости.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКоэффициенты КАК ВременнаяТаблицаКоэффициенты
		|		ПО ВременнаяТаблицаИмущество.ОсновноеСредство = ВременнаяТаблицаКоэффициенты.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтавки КАК ВременнаяТаблицаСтавки
		|		ПО ВременнаяТаблицаИмущество.ОсновноеСредство = ВременнаяТаблицаСтавки.ОсновноеСредство
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИнвентарныйНомер";
	Запрос.УстановитьПараметр("Организация", Организация);			   
	Запрос.УстановитьПараметр("Период", Дата);			   

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Стоимость = 0;
		Размер = 0;
		Результат = 0;
		
		// Проверка заполнения показателей.
		ТекстСообщения = "";
		Если Выборка.ОбщаяПлощадь = 0 Тогда 
			ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Общая площадь равна 0. Основное средство ""%1"".'");
		ИначеЕсли Выборка.ОценочнаяСтоимость = 0 Тогда 
			ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Оценочная стоимость равна 0. Основное средство ""%1"".'");
		ИначеЕсли Выборка.РегиональныйКоэффициент = 0 Тогда 
			ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Региональный Коэффициент равен 0. Основное средство ""%1"".'");
		ИначеЕсли Выборка.ЗональныйКоэффициент = 0 Тогда 
			ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Зональный Коэффициент равен 0. Основное средство ""%1"".'");
		ИначеЕсли Выборка.ОтраслевойКоэффициент = 0 Тогда 
			ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Отраслевой Коэффициент равен 0. Основное средство ""%1"".'");
		ИначеЕсли Выборка.Ставка = 0 Тогда 
			ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Ставка налога на имущество равна 0. Основное средство ""%1"".'");
		ИначеЕсли Выборка.КоличествоМесяцевЭксплуатации = 0 Тогда 
			// Не ошибка. Снято с учета в первом месяце года.
			Продолжить;	
		Иначе 
			Стоимость = Выборка.ОбщаяПлощадь * Выборка.ОценочнаяСтоимость * Выборка.РегиональныйКоэффициент * Выборка.ЗональныйКоэффициент * Выборка.ОтраслевойКоэффициент;
			Размер = Стоимость * Выборка.Ставка / 100; // Сумма за год.
			Результат = Выборка.КоличествоМесяцевЭксплуатации / 12 * Размер;
		КонецЕсли;	
		
		Если НЕ ТекстСообщения = "" Тогда 
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.ОсновноеСредствоНаименование);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстСообщения, Неопределено);
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Недвижимость.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
		СтрокаТабличнойЧасти.СуммаНалога = Результат;
	КонецЦикла; 
	
	// Транспорт.
	
	// 1. Сведения о транспорте для групп 4.
	// 2. Шкала оценки по виду материалов стен.
	// 3. Накопленная амортизация.
	// 4. Результат для расчета.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	СведенияОТранспортеСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	СведенияОТранспортеСрезПоследних.ГруппаИмущества КАК ГруппаИмущества,
		|	СведенияОТранспортеСрезПоследних.ВидТранспорта КАК ВидТранспорта,
		|	СведенияОТранспортеСрезПоследних.ВидТранспорта.КатегорияАБВ КАК ВидТранспортаКатегорияАБВ,
		|	СведенияОТранспортеСрезПоследних.ОбъемДвигателя КАК ОбъемДвигателя,
		|	ГОД(&Период) - ГОД(ВременнаяТаблицаСостоянияОС.ПериодПринятоКУчету) КАК КоличествоЛетЭксплуатации,
		|	ВременнаяТаблицаСостоянияОС.КоличествоМесяцевЭксплуатации КАК КоличествоМесяцевЭксплуатации,
		|	ВременнаяТаблицаСостоянияОС.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ВременнаяТаблицаСостоянияОС.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость
		|ПОМЕСТИТЬ ВременнаяТаблицаТранспорт
		|ИЗ
		|	ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОТранспорте.СрезПоследних(
		|				&Период,
		|				Организация = &Организация
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаСостоянияОС.ОсновноеСредство КАК ОсновноеСредство
		|						ИЗ
		|							ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС)) КАК СведенияОТранспортеСрезПоследних
		|		ПО ВременнаяТаблицаСостоянияОС.ОсновноеСредство = СведенияОТранспортеСрезПоследних.ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	3 КАК Порядок,
		|	ШкалаОценкиСтоимостиМакс.ОсновноеСредство КАК ОсновноеСредство,
		|	ШкалаОценкиСтоимости.Ставка КАК ОценочнаяСтоимость
		|ПОМЕСТИТЬ ВременнаяТаблицаОценкиСтоимостиТранспорт
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВременнаяТаблицаТранспорт.ОсновноеСредство КАК ОсновноеСредство,
		|		ВременнаяТаблицаТранспорт.ВидТранспорта КАК ВидТранспорта,
		|		МАКСИМУМ(ШкалаОценкиСтоимости.НижняяГраница) КАК НижняяГраница
		|	ИЗ
		|		ВременнаяТаблицаТранспорт КАК ВременнаяТаблицаТранспорт
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыТранспортаНалогНаИмущество.ШкалаОценкиСтоимости КАК ШкалаОценкиСтоимости
		|			ПО ВременнаяТаблицаТранспорт.ВидТранспорта = ШкалаОценкиСтоимости.Ссылка
		|				И ВременнаяТаблицаТранспорт.КоличествоЛетЭксплуатации >= ШкалаОценкиСтоимости.НижняяГраница
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВременнаяТаблицаТранспорт.ОсновноеСредство,
		|		ВременнаяТаблицаТранспорт.ВидТранспорта) КАК ШкалаОценкиСтоимостиМакс
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыТранспортаНалогНаИмущество.ШкалаОценкиСтоимости КАК ШкалаОценкиСтоимости
		|		ПО ШкалаОценкиСтоимостиМакс.ВидТранспорта = ШкалаОценкиСтоимости.Ссылка
		|			И ШкалаОценкиСтоимостиМакс.НижняяГраница = ШкалаОценкиСтоимости.НижняяГраница
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	4 КАК Порядок,
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.СуммаОстаток < 0
		|			ТОГДА ХозрасчетныйОстатки.СуммаОстаток * -1
		|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
		|	КОНЕЦ КАК НакопленныйИзнос
		|ПОМЕСТИТЬ ВременнаяТаблицаНакопленнаяАмортизация
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Период,
		|			Счет В (&СписокСчетовНакопленнойАмортизации),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаСостоянияОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаСостоянияОС КАК ВременнаяТаблицаСостоянияОС)) КАК ХозрасчетныйОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТранспорт.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаТранспорт.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ВременнаяТаблицаТранспорт.ОсновноеСредство.Наименование КАК ОсновноеСредствоНаименование,
		|	ВременнаяТаблицаТранспорт.ГруппаИмущества КАК ГруппаИмущества,
		|	ВременнаяТаблицаТранспорт.ВидТранспорта КАК ВидТранспорта,
		|	ВременнаяТаблицаТранспорт.ВидТранспортаКатегорияАБВ КАК ВидТранспортаКатегорияАБВ,
		|	ВременнаяТаблицаТранспорт.ОбъемДвигателя КАК ОбъемДвигателя,
		|	ЕСТЬNULL(ВременнаяТаблицаОценкиСтоимости.ОценочнаяСтоимость, 0) КАК ОценочнаяСтоимость,
		|	ВременнаяТаблицаТранспорт.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|	ВременнаяТаблицаТранспорт.КоличествоМесяцевЭксплуатации КАК КоличествоМесяцевЭксплуатации,
		|	ЕСТЬNULL(ВременнаяТаблицаНакопленнаяАмортизация.НакопленныйИзнос, 0) КАК НакопленныйИзнос
		|ИЗ
		|	ВременнаяТаблицаТранспорт КАК ВременнаяТаблицаТранспорт
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОценкиСтоимостиТранспорт КАК ВременнаяТаблицаОценкиСтоимости
		|		ПО ВременнаяТаблицаТранспорт.ОсновноеСредство = ВременнаяТаблицаОценкиСтоимости.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНакопленнаяАмортизация КАК ВременнаяТаблицаНакопленнаяАмортизация
		|		ПО ВременнаяТаблицаТранспорт.ОсновноеСредство = ВременнаяТаблицаНакопленнаяАмортизация.ОсновноеСредство
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИнвентарныйНомер";
	Запрос.УстановитьПараметр("Организация", Организация);			   
	Запрос.УстановитьПараметр("Период", Дата);			   
	
	СписокСчетовНакопленнойАмортизации = Новый СписокЗначений;
	СписокСчетовНакопленнойАмортизации.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияЗданияСооружения);
	СписокСчетовНакопленнойАмортизации.Добавить(ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияОборудование);
	СписокСчетовНакопленнойАмортизации.Добавить(ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияКонторскоеОборудование);
	СписокСчетовНакопленнойАмортизации.Добавить(ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияМебельИПринадлежности);
	СписокСчетовНакопленнойАмортизации.Добавить(ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияТранспортныеСредства);
	СписокСчетовНакопленнойАмортизации.Добавить(ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияБлагоустройствоАрендованнойСобственности);
	СписокСчетовНакопленнойАмортизации.Добавить(ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияБлагоустройствоЗемльныхУчастков);
	Запрос.УстановитьПараметр("СписокСчетовНакопленнойАмортизации",СписокСчетовНакопленнойАмортизации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Размер = 0;
		Результат = 0;
		
		// Проверка заполнения показателей.
		ТекстСообщения = "";
		
		Если Выборка.КоличествоМесяцевЭксплуатации = 0 Тогда 
			// Не ошибка. Снято с учета в первом месяце года.
			Продолжить;	
		КонецЕсли;	
		
		// Категория А. Объем двигателя * Оценочная стоимость за 1 кв.см
		Если Выборка.ВидТранспортаКатегорияАБВ = "А" Тогда 
			Если Выборка.ОбъемДвигателя = 0 Тогда 
				ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Объем двигателя равен 0. Основное средство ""%1"".'");
			ИначеЕсли Выборка.ОценочнаяСтоимость = 0 Тогда 
				ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Оценочная стоимость равна 0. Основное средство ""%1"".'");
			Иначе 
				Размер = Выборка.ОбъемДвигателя * Выборка.ОценочнаяСтоимость;
			КонецЕсли;
		// Категория Б. (ПервоначальнаяСтоимость - НакопленныйИзнос) * 0,005
		ИначеЕсли Выборка.ВидТранспортаКатегорияАБВ = "Б" Тогда 
			Если (Выборка.ПервоначальнаяСтоимость - Выборка.НакопленныйИзнос) <= 0 Тогда 
				ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Балансовая стоимость равна 0. Основное средство ""%1"".'");
			Иначе 
				Размер = (Выборка.ПервоначальнаяСтоимость - Выборка.НакопленныйИзнос) * 0.005;
			КонецЕсли;
		// Категория В. Сумма налога базового основного средства * 0,5
		ИначеЕсли Выборка.ВидТранспортаКатегорияАБВ = "В" Тогда 
			Если Выборка.ОбъемДвигателя = 0 Тогда 
				ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Объем двигателя равен 0. Основное средство ""%1"".'");
			ИначеЕсли Выборка.ОценочнаяСтоимость = 0 Тогда 
				ТекстСообщения = НСтр("ru = 'Расчет налога на имущество. Оценочная стоимость равна 0. Основное средство ""%1"".'");	
			Иначе
				Размер = Выборка.ОбъемДвигателя * Выборка.ОценочнаяСтоимость / 100;
			КонецЕсли;	
		КонецЕсли;	
		
		Результат = Выборка.КоличествоМесяцевЭксплуатации / 12 * Размер;
		
		Если НЕ ТекстСообщения = "" Тогда 
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.ОсновноеСредствоНаименование);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстСообщения, Неопределено);
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Транспорт.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
		СтрокаТабличнойЧасти.СуммаНалога = Результат;
	КонецЦикла;
	
	МенеджерВременныхТаблиц.Закрыть();
КонецПроцедуры

// Процедура - рассчитать налоговую амортизацию.
//
Процедура РассчитатьНалоговуюАмортизацию(ДанныеУчетнойПолитики)
	
	НалоговаяАмортизация.Очистить();	
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	// 1. Периоды поступления и выбытия ОС
	// 1.1. Поступление ОС с учетом выбытия
	// 1.2. Выбытие ОС (за исключением поступивших в отчетном году)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеОС.ГруппаНУ,
		|	""П"" КАК ПоступлениеВыбытие,
		|	ПоступлениеОС.ОсновноеСредство,
		|	ПоступлениеОС.Период КАК Дата,
		|	МЕСЯЦ(ПоступлениеОС.Период) КАК МесяцПоступления,
		|	ЕСТЬNULL(МЕСЯЦ(ВыбытиеПоступивших.Период), 13) КАК МесяцВыбытия,
		|	ПоступлениеОС.Поступление КАК СуммаПоступления,
		|	0 КАК СуммаВыбытия
		|ПОМЕСТИТЬ ВТДвижениеОС
		|ИЗ
		|	РегистрНакопления.ДвижениеОСНУ КАК ПоступлениеОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОС КАК ВыбытиеПоступивших
		|		ПО ПоступлениеОС.ОсновноеСредство = ВыбытиеПоступивших.ОсновноеСредство
		|			И (ВыбытиеПоступивших.Период МЕЖДУ &ДатаН И &ДатаК)
		|			И (ВыбытиеПоступивших.Состояние = &Выбытие)
		|			И (ВыбытиеПоступивших.Организация = &Организация)
		|ГДЕ
		|	ПоступлениеОС.Период МЕЖДУ &ДатаН И &ДатаК
		|	И ПоступлениеОС.Поступление > 0
		|	И ПоступлениеОС.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВыбытиеОС.ГруппаНУ,
		|	""В"",
		|	ВыбытиеОС.ОсновноеСредство,
		|	ВыбытиеОС.Период,
		|	1,
		|	МЕСЯЦ(ВыбытиеОС.Период),
		|	0,
		|	ВыбытиеОС.Поступление
		|ИЗ
		|	РегистрНакопления.ДвижениеОСНУ КАК ВыбытиеОС
		|ГДЕ
		|	ВыбытиеОС.Период МЕЖДУ &ДатаН И &ДатаК
		|	И ВыбытиеОС.Организация = &Организация
		|	И ВыбытиеОС.Выбытие > 0
		|	И НЕ ВыбытиеОС.ОсновноеСредство В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ПоступлениеОС.ОсновноеСредство
		|				ИЗ
		|					РегистрНакопления.ДвижениеОСНУ КАК ПоступлениеОС
		|				ГДЕ
		|					ПоступлениеОС.Период МЕЖДУ &ДатаН И &ДатаК
		|					И ПоступлениеОС.Организация = &Организация
		|					И ПоступлениеОС.Поступление > 0)";	
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("ДатаН",			НачалоГода(Дата));
	Запрос.УстановитьПараметр("ДатаК",			КонецГода(Дата));
	Запрос.УстановитьПараметр("Выбытие",		Перечисления.ВидыСостоянийОС.СнятоСУчета);
	
	Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТДвижениеОС";
	ТЗ1 = Запрос.Выполнить().Выгрузить();
		
	// 2. Список движения ОС с расчетом полных месяцев 
	//    плюс список групп и ОС группы 5 из налоговой амортизации прошлого года
	//    плюс затраты на ремонт изРгНУ
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДвижениеОС.ГруппаНУ,
		|	ВЫБОР
		|		КОГДА ДвижениеОС.ГруппаНУ = &Группа5
		|			ТОГДА ДвижениеОС.ОсновноеСредство
		|		ИНАЧЕ &ПустоеОС
		|	КОНЕЦ КАК ОсновноеСредство,
		|	ДвижениеОС.ПоступлениеВыбытие,
		|	ДвижениеОС.МесяцПоступления,
		|	ДвижениеОС.МесяцВыбытия,
		|	ДвижениеОС.СуммаПоступления,
		|	ДвижениеОС.СуммаВыбытия,
		|	ВЫБОР
		|		КОГДА ДвижениеОС.ПоступлениеВыбытие = ""П""
		|				И ДвижениеОС.МесяцВыбытия <> ДвижениеОС.МесяцПоступления
		|			ТОГДА ДвижениеОС.МесяцВыбытия - ДвижениеОС.МесяцПоступления - 1
		|		КОГДА ДвижениеОС.ПоступлениеВыбытие = ""П""
		|				И ДвижениеОС.МесяцВыбытия = ДвижениеОС.МесяцПоступления
		|			ТОГДА 0
		|		ИНАЧЕ 12 - ДвижениеОС.МесяцВыбытия
		|	КОНЕЦ КАК КолПолныхМесяцев,
		|	0 КАК АмортизацияПредыдущегоГода,
		|	0 КАК БалансоваяСтоимостьНаКонецГодаПГ,
		|	0 КАК СуммаПоступленияОстатокПГ,
		|	0 КАК СуммаВыбытияОстатокПГ,
		|	0 КАК БазаПрямолинейнойАмортизацииПГ,
		|	0 КАК ЗатратыНаРемонт
		|ПОМЕСТИТЬ ВТСписокГруппИОС
		|ИЗ
		|	ВТДвижениеОС КАК ДвижениеОС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НалоговаяАмортизация.ГруппаНУ,
		|	НалоговаяАмортизация.ОсновноеСредство,
		|	""Н"",
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	СУММА(НалоговаяАмортизация.АмортизацияЗаГод),
		|	СУММА(НалоговаяАмортизация.БалансоваяСтоимостьНаКонецГода),
		|	СУММА(НалоговаяАмортизация.СуммаПоступленияОстаток),
		|	СУММА(НалоговаяАмортизация.СуммаВыбытияОстаток),
		|	СУММА(НалоговаяАмортизация.БазаПрямолинейнойАмортизации),
		|	0
		|ИЗ
		|	РегистрСведений.НалоговаяАмортизация КАК НалоговаяАмортизация
		|ГДЕ
		|	НалоговаяАмортизация.Год МЕЖДУ &ДатаНПГ И &ДатаКПГ
		|	И НалоговаяАмортизация.Организация = &Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	НалоговаяАмортизация.ОсновноеСредство,
		|	НалоговаяАмортизация.ГруппаНУ
		|
		|ИМЕЮЩИЕ
		|	НЕ(СУММА(НалоговаяАмортизация.БалансоваяСтоимостьНаКонецГода) = 0
		|			И СУММА(НалоговаяАмортизация.СуммаПоступленияОстаток) = 0
		|			И СУММА(НалоговаяАмортизация.СуммаВыбытияОстаток) = 0
		|			И СУММА(НалоговаяАмортизация.БазаПрямолинейнойАмортизации) = 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Ремонт.Субконто2,
		|	ВЫБОР
		|		КОГДА Ремонт.Субконто2 = &Группа5
		|			ТОГДА Ремонт.Субконто1
		|		ИНАЧЕ &ПустоеОС
		|	КОНЕЦ,
		|	""Р"",
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	Ремонт.СуммаОборот
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&ДатаН,
		|			&ДатаК,
		|			,
		|			Счет В (&СчетаЗатратНаРемонтОС),
		|			,
		|			Организация = &Организация,
		|			,
		|			) КАК Ремонт";	
	МассивСчетовЗатратНаРемонтОС = Новый Массив();
	МассивСчетовЗатратНаРемонтОС.Добавить(ПланыСчетов.Хозрасчетный.ЗатратыНаРемонтИОбслуживаниеОсновныхСредств);
	МассивСчетовЗатратНаРемонтОС.Добавить(ПланыСчетов.Хозрасчетный.РемонтИОбслуживаниеОсновныхСредств);
	
	Запрос.УстановитьПараметр("Группа2", 				Справочники.ГруппыНалоговогоУчетаОС.Группа2);
	Запрос.УстановитьПараметр("Группа5", 				Справочники.ГруппыНалоговогоУчетаОС.Группа5);
	Запрос.УстановитьПараметр("ПустоеОС",				Справочники.ОсновныеСредства.ПустаяСсылка());	
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("СчетаЗатратНаРемонтОС",	МассивСчетовЗатратНаРемонтОС);
	Запрос.УстановитьПараметр("ДатаНПГ",				НачалоГода(НачалоГода(Дата) - 1));	
	Запрос.УстановитьПараметр("ДатаКПГ",				КонецГода(НачалоГода(Дата) - 1));	
	Запрос.УстановитьПараметр("ДатаН",					НачалоГода(Дата));
	Запрос.УстановитьПараметр("ДатаК",					КонецГода(Дата));
	Запрос.Выполнить();

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТСписокГруппИОС";
	ТЗ2 = Запрос.Выполнить().Выгрузить();
		
	// 3. Расчет сумм поступления и выбытия ОС по группам НУ
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписокГруппИОС.ГруппаНУ,
		|	СписокГруппИОС.ОсновноеСредство,
		|	СУММА(СписокГруппИОС.СуммаПоступления) КАК СуммаПоступления,
		|	СУММА(СписокГруппИОС.СуммаВыбытия) КАК СуммаВыбытия,
		|	СУММА(ВЫРАЗИТЬ(СписокГруппИОС.СуммаПоступления * (СписокГруппИОС.КолПолныхМесяцев + 0.5) / 12 КАК ЧИСЛО(14, 2))) КАК СуммаПоступленияНУ,
		|	СУММА(ВЫРАЗИТЬ(СписокГруппИОС.СуммаВыбытия * (СписокГруппИОС.КолПолныхМесяцев + 0.5) / 12 КАК ЧИСЛО(14, 2))) КАК СуммаВыбытияНУ,
		|	СУММА(СписокГруппИОС.АмортизацияПредыдущегоГода) КАК АмортизацияПредыдущегоГода,
		|	СУММА(СписокГруппИОС.БалансоваяСтоимостьНаКонецГодаПГ) КАК БалансоваяСтоимостьНаКонецГодаПГ,
		|	СУММА(ВЫБОР
		|			КОГДА &НКДо2009
		|				ТОГДА 0
		|			ИНАЧЕ СписокГруппИОС.СуммаПоступленияОстатокПГ
		|		КОНЕЦ) КАК СуммаПоступленияОстатокПГ,
		|	СУММА(ВЫБОР
		|			КОГДА &НКДо2009
		|				ТОГДА 0
		|			ИНАЧЕ СписокГруппИОС.СуммаВыбытияОстатокПГ
		|		КОНЕЦ) КАК СуммаВыбытияОстатокПГ,
		|	СУММА(СписокГруппИОС.БазаПрямолинейнойАмортизацииПГ) КАК БазаПрямолинейнойАмортизацииПГ,
		|	СУММА(СписокГруппИОС.ЗатратыНаРемонт) КАК ЗатратыНаРемонт
		|ПОМЕСТИТЬ ВТПолныйСписок
		|ИЗ
		|	ВТСписокГруппИОС КАК СписокГруппИОС
		|
		|СГРУППИРОВАТЬ ПО
		|	СписокГруппИОС.ГруппаНУ,
		|	СписокГруппИОС.ОсновноеСредство";	
	Запрос.УстановитьПараметр("НКДо2009",	?(Год(Дата) < 2009, Истина, Ложь));
	Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПолныйСписок";
	ТЗ3 = Запрос.Выполнить().Выгрузить();
	
	// 4. Количество ОС в группах
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПараметрыАО.ОсновноеСредство,
		|	ПараметрыАО.ГруппаНУ
		|ПОМЕСТИТЬ СписокОС
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(&ДатаК, ) КАК ПараметрыАО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОС.СрезПоследних(&ДатаК, ) КАК СостоянияОС
		|		ПО ПараметрыАО.ОсновноеСредство = СостоянияОС.ОсновноеСредство
		|			И (СостоянияОС.Состояние <> &СнятоСУчетаОС)
		|ГДЕ
		|	ПараметрыАО.ГруппаНУ <> &ПустаяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокОС.ГруппаНУ,
		|	КОЛИЧЕСТВО(СписокОС.ГруппаНУ) КАК Количество
		|ПОМЕСТИТЬ ТЗКоличествоВГруппах
		|ИЗ
		|	СписокОС КАК СписокОС
		|
		|СГРУППИРОВАТЬ ПО
		|	СписокОС.ГруппаНУ";
	Запрос.УстановитьПараметр("ДатаН",			НачалоГода(Дата));                                                     
	Запрос.УстановитьПараметр("ДатаК", 			КонецГода(Дата));
	Запрос.УстановитьПараметр("ПустаяГруппа", 	Справочники.ГруппыНалоговогоУчетаОС.ПустаяСсылка());
	Запрос.УстановитьПараметр("Группа2", 		Справочники.ГруппыНалоговогоУчетаОС.Группа2);
	Запрос.УстановитьПараметр("СнятоСУчетаОС", 	Перечисления.ВидыСостоянийОС.СнятоСУчета);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	// 5. Основной запрос
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПолныйСписок.ГруппаНУ,
		|	ПолныйСписок.ГруппаНУ.НормаАмортизации КАК НАО,
		|	ПолныйСписок.ОсновноеСредство,
		|	ПолныйСписок.СуммаПоступления,
		|	ПолныйСписок.СуммаВыбытия,
		|	ПолныйСписок.СуммаПоступленияНУ,
		|	ПолныйСписок.СуммаВыбытияНУ,
		|	ПолныйСписок.АмортизацияПредыдущегоГода,
		|	ПолныйСписок.БалансоваяСтоимостьНаКонецГодаПГ,
		|	ПолныйСписок.СуммаПоступленияОстатокПГ,
		|	ПолныйСписок.СуммаВыбытияОстатокПГ,
		|	ПолныйСписок.БазаПрямолинейнойАмортизацииПГ,
		|	ПолныйСписок.ЗатратыНаРемонт,
		|	ЕСТЬNULL(СостоянияСрез.Период, &ПустаяДата) КАК Период,
		|	ВЫБОР
		|		КОГДА ПолныйСписок.ГруппаНУ = &Группа5
		|			ТОГДА ЕСТЬNULL(СостоянияСрез.Период, &ПустаяДата)
		|		ИНАЧЕ &ПустаяДата
		|	КОНЕЦ КАК ДатаПринятияКУчету,
		|	ЕСТЬNULL(КоличествоВГруппах.Количество, 0) КАК Количество
		|ИЗ
		|	ВТПолныйСписок КАК ПолныйСписок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОС.СрезПервых(
		|				,
		|				Организация = &Организация
		|					И Состояние = &ПринятоКУчету) КАК СостоянияСрез
		|		ПО ПолныйСписок.ОсновноеСредство = СостоянияСрез.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТЗКоличествоВГруппах КАК КоличествоВГруппах
		|		ПО ПолныйСписок.ГруппаНУ = КоличествоВГруппах.ГруппаНУ
		|ГДЕ
		|	КоличествоВГруппах.ГруппаНУ <> &ПустаяГруппа";
	Запрос.УстановитьПараметр("ПустаяГруппа", 	Справочники.ГруппыНалоговогоУчетаОС.ПустаяСсылка());
	Запрос.УстановитьПараметр("Группа5", 		Справочники.ГруппыНалоговогоУчетаОС.Группа5);
	Запрос.УстановитьПараметр("ПустаяДата",		'00010101');	
	Запрос.УстановитьПараметр("ПринятоКУчету",	Перечисления.ВидыСостоянийОС.ПринятоКУчету);
	Запрос.УстановитьПараметр("Организация",	Организация);
		
	ТЗ = Запрос.Выполнить().Выгрузить();
	МенеджерВТ.Закрыть(); 
	
	// 6. Подготовка ТЗ для расчета - добавление расчетных колонок 
	ТЗ.Колонки.Добавить("НормаНаРемонт");
	ТЗ.Колонки.Добавить("ПревышениеНормыНаРемонт");
	ТЗ.Колонки.Добавить("ВычетПриПоступленииОС");
	ТЗ.Колонки.Добавить("БалансоваяСтоимостьНаНачалоГода");
	ТЗ.Колонки.Добавить("БалансоваяСтоимостьНаКонецГода");
	ТЗ.Колонки.Добавить("БалансоваяСтоимостьИтого");
	ТЗ.Колонки.Добавить("АмортизацияЗаГод");
	ТЗ.Колонки.Добавить("УвеличениеСОД");
	ТЗ.Колонки.Добавить("ВычетМеньше100РП");
	ТЗ.Колонки.Добавить("КоличествоЛетЭксплуатации");
	ТЗ.Колонки.Добавить("СуммаПоступленияОстаток");
	ТЗ.Колонки.Добавить("СуммаВыбытияОстаток");
	ТЗ.Колонки.Добавить("БазаПрямолинейнойАмортизации");
	ТЗ.ЗаполнитьЗначения(0,"НормаНаРемонт,ПревышениеНормыНаРемонт,ВычетПриПоступленииОС,
							|БалансоваяСтоимостьНаНачалоГода,БалансоваяСтоимостьНаКонецГода,
							|БалансоваяСтоимостьИтого,
							|АмортизацияЗаГод,УвеличениеСОД,ВычетМеньше100РП, 
							|КоличествоЛетЭксплуатации,СуммаПоступленияОстаток,СуммаВыбытияОстаток,
							|БазаПрямолинейнойАмортизации");
	
	// 7. Расчет по группам НУ и ОС группы 5
	
	// Выборка общих ставок и норм 
	Для Каждого СТЗ Из ТЗ Цикл
		
		СТЗ.БалансоваяСтоимостьНаНачалоГода = СТЗ.БалансоваяСтоимостьНаКонецГодаПГ - СТЗ.АмортизацияПредыдущегоГода;
		
		// 7.1. Норма на ремонт 15%, если не укладываемся, то превышение идет на увеличение балансовой стоимости
		Если СТЗ.ЗатратыНаРемонт <> 0 Тогда 
			СТЗ.НормаНаРемонт = Окр(СТЗ.БалансоваяСтоимостьНаНачалоГода * ПредельнаяНормаНаРемонтОС /100,2);	
		КонецЕсли;			
		
		// 7.2. Превышение нормы на ремонт
		Если СТЗ.ЗатратыНаРемонт > СТЗ.НормаНаРемонт Тогда 
			СТЗ.ПревышениеНормыНаРемонт = СТЗ.ЗатратыНаРемонт - СТЗ.НормаНаРемонт;	
		КонецЕсли;
		
		// 7.3. Балансовая стоимость группы расчетная
		СТЗ.БалансоваяСтоимостьНаКонецГода = СТЗ.БалансоваяСтоимостьНаНачалоГода
		+ СТЗ.СуммаПоступленияНУ
		+ СТЗ.СуммаПоступленияОстатокПГ
		- СТЗ.СуммаВыбытияНУ
		- СТЗ.СуммаВыбытияОстатокПГ
		+ СТЗ.ПревышениеНормыНаРемонт;
	                                  		
		СТЗ.БалансоваяСтоимостьИтого = СТЗ.БалансоваяСтоимостьНаКонецГода;
				
		// 7.4. Проверяем ОС группы 5 больше 20 лет
		СТЗ.КоличествоЛетЭксплуатации = 0;	
		Если СТЗ.ГруппаНУ = Справочники.ГруппыНалоговогоУчетаОС.Группа5 Тогда 
			
			// 7.4.1. Проверка указаия даты принятия к учету
			Если НЕ ЗначениеЗаполнено(СТЗ.ДатаПринятияКУчету) и СТЗ.СуммаВыбытияОстатокПГ = 0 Тогда 				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Для ОС - %1 - не указана дата принятия к учету!'"), СТЗ.ОсновноеСредство.Наименование);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			// 7.4.2. Расчет количества лет экплуатации
			СТЗ.КоличествоЛетЭксплуатации = Год(Дата) - Год(СТЗ.ДатаПринятияКУчету);	
			
			// 7.4.3. Проверка заполнения базы для расчета прямолинейной амортизации 
			Если СТЗ.КоличествоЛетЭксплуатации > 20 И СТЗ.БазаПрямолинейнойАмортизацииПГ = 0 Тогда 
				СТЗ.БазаПрямолинейнойАмортизацииПГ = СТЗ.БалансоваяСтоимостьНаНачалоГода;
			КонецЕсли;		
			
			// 7.4.4. БазаПрямолинейнойАмортизации = База прошлого года + СуммаПоступления + ПревышениеЗатратНаРемонт
			СТЗ.БазаПрямолинейнойАмортизации = СТЗ.БазаПрямолинейнойАмортизацииПГ
				+ СТЗ.СуммаПоступления
				+ СТЗ.ПревышениеНормыНаРемонт;
		КонецЕсли;			
				
		// 7.5. Расчетные амортизация и вычеты									
		// 7.5.1. Проверка балансовой стоимости меньше нуля
		Если СТЗ.БалансоваяСтоимостьНаКонецГода < 0 Тогда 
						
			СТЗ.УвеличениеСОД 					= - СТЗ.БалансоваяСтоимостьНаКонецГода;			
			СТЗ.БалансоваяСтоимостьИтого 		= 0;
			СТЗ.АмортизацияЗаГод				= 0;
			
		// 7.5.2. Проверка балансовой стоимости на меньше 100 РП
		ИначеЕсли СТЗ.БалансоваяСтоимостьНаКонецГода < МинимальнаяСтоимостьГруппыОС  Тогда 
			
			СТЗ.ВычетМеньше100РП				= СТЗ.БалансоваяСтоимостьНаКонецГода;			
			СТЗ.БалансоваяСтоимостьИтого 		= 0;			
			СТЗ.АмортизацияЗаГод				= СТЗ.БалансоваяСтоимостьНаКонецГода;		
			
		// 7.5.3. Проверка на нулевое количество группы
		ИначеЕсли СТЗ.Количество = 0 И СТЗ.ГруппаНУ <> Справочники.ГруппыНалоговогоУчетаОС.Группа5  Тогда 
			СТЗ.АмортизацияЗаГод				= СТЗ.БалансоваяСтоимостьНаКонецГода;			
			СТЗ.БалансоваяСтоимостьИтого 		= 0;			
			
		// 7.5.4. Проверка на нулевое количество ОС группы 5 
		ИначеЕсли НЕ СТЗ.ОсновноеСредство.Пустая() И СТЗ.СуммаВыбытия > 0 Тогда 
			СТЗ.АмортизацияЗаГод				= СТЗ.БалансоваяСтоимостьНаКонецГода;			
			СТЗ.БалансоваяСтоимостьИтого 		= 0;			
			
		// 7.5.5. Расчет амортизация для ОС группы 5
		ИначеЕсли СТЗ.КоличествоЛетЭксплуатации > 20 Тогда 
			СТЗ.АмортизацияЗаГод				= Окр(СТЗ.БазаПрямолинейнойАмортизации * СТЗ.ГруппаНУ.НормаАмортизацииДополнительная /100,2);
			
		// 7.5.6. Обычный расчет	
		Иначе
			СТЗ.АмортизацияЗаГод				= Окр(СТЗ.БалансоваяСтоимостьНаКонецГода * СТЗ.НАО /100,2);
		КонецЕсли;
		
		// 8. Запись данных в табличную часть "НалоговаяАмортизация"
		СтрокаНалоговойАмортизации =  НалоговаяАмортизация.Добавить();
		
		СтрокаНалоговойАмортизации.ГруппаНУ 					= СТЗ.ГруппаНУ;
		СтрокаНалоговойАмортизации.ОсновноеСредство 			= СТЗ.ОсновноеСредство;
		СтрокаНалоговойАмортизации.БалансоваяСтоимостьПГ 		= СТЗ.БалансоваяСтоимостьНаКонецГодаПГ;
		СтрокаНалоговойАмортизации.АмортизацияПГ 				= СТЗ.АмортизацияПредыдущегоГода;
		СтрокаНалоговойАмортизации.БалансоваяСтоимостьНаНГ		= СТЗ.БалансоваяСтоимостьНаНачалоГода;
		СтрокаНалоговойАмортизации.УвеличениеСтоимости 			= СТЗ.СуммаПоступления;
		СтрокаНалоговойАмортизации.УвеличениеСтоимостиНУ 		= СТЗ.СуммаПоступленияНУ;
		СтрокаНалоговойАмортизации.ПоступлениеПГ 				= СТЗ.СуммаПоступления - СТЗ.СуммаПоступленияНУ;
		СтрокаНалоговойАмортизации.СуммаВыбытияОбщая 			= СТЗ.СуммаВыбытия;
		СтрокаНалоговойАмортизации.СуммаВыбытияНУ			 	= СТЗ.СуммаВыбытияНУ;
		СтрокаНалоговойАмортизации.ВыбытиеПГ 					= СТЗ.СуммаВыбытия - СТЗ.СуммаВыбытияНУ;
		СтрокаНалоговойАмортизации.ЗатратыНаРемонт				= СТЗ.ЗатратыНаРемонт;
		СтрокаНалоговойАмортизации.НормаНаРемонт 				= СТЗ.НормаНаРемонт;
		СтрокаНалоговойАмортизации.Превышение 					= СТЗ.ПревышениеНормыНаРемонт;
		СтрокаНалоговойАмортизации.БалансоваяСтоимость 			= СТЗ.БалансоваяСтоимостьНаКонецГода;
		СтрокаНалоговойАмортизации.БалансоваяСтоимостьИтого 	= СТЗ.БалансоваяСтоимостьИтого;
		СтрокаНалоговойАмортизации.НормаАО 						= СТЗ.НАО;
		СтрокаНалоговойАмортизации.Амортизация 					= СТЗ.АмортизацияЗаГод;
		СтрокаНалоговойАмортизации.УвеличениеСОД 				= СТЗ.УвеличениеСОД;
		СтрокаНалоговойАмортизации.ВычетМеньше100РП 			= СТЗ.ВычетМеньше100РП;
		СтрокаНалоговойАмортизации.ДатаПринятияКУчету			= СТЗ.ДатаПринятияКУчету;
		СтрокаНалоговойАмортизации.КоличествоЛетЭксплуатации 	= СТЗ.КоличествоЛетЭксплуатации;
		СтрокаНалоговойАмортизации.БазаПрямолинейнойАмортизации = СТЗ.БазаПрямолинейнойАмортизации;
	КонецЦикла;		

КонецПроцедуры

// Процедура - рассчитать налоговую выверку
//
Процедура РасчитатьНалоговуюВыверку(ДанныеУчетнойПолитики)

	НалоговаяВыверка.Очистить();
	
	// 1. Получение суммы доходов.
	// 2. Получение суммы раходов.
	// 3. Получение суммы амортизации ОС.
	// 4. Получение суммы постоянной разницы доходы.
	// 5. Получение суммы постоянной разницы расходы.
	// 5. Получение суммы временной разницы (доходы - расходы).
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	ХозрасчетныйОбороты.СуммаОборот КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Счет.Временный
		|				И Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный),
		|			,
		|			Организация = &Организация,
		|			,
		|			) КАК ХозрасчетныйОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	2 КАК Порядок,
		|	ХозрасчетныйОбороты.СуммаОборот КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Счет.Временный
		|				И Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный),
		|			,
		|			Организация = &Организация,
		|			,
		|			) КАК ХозрасчетныйОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	3 КАК Порядок,
		|	ХозрасчетныйОбороты.СуммаОборотКт КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Счет В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ПараметрыУчетаОССрезПоследних.СчетУчета КАК СчетУчета
		|				ИЗ
		|					РегистрСведений.ПараметрыУчетаОС.СрезПоследних(&КонецПериода, Организация = &Организация) КАК ПараметрыУчетаОССрезПоследних),
		|			,
		|			Организация = &Организация,
		|			,
		|			) КАК ХозрасчетныйОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	4 КАК Порядок,
		|	КорректировкиНУОбороты.СуммаОборот КАК Сумма
		|ИЗ
		|	РегистрНакопления.КорректировкиНУ.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|				И ДоходРасход = ЗНАЧЕНИЕ(Перечисление.ПризнакСчета.Доходный)
		|				И ВидУчета = ЗНАЧЕНИЕ(Перечисление.ВидыУчета.ПР)) КАК КорректировкиНУОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	5 КАК Порядок,
		|	КорректировкиНУОбороты.СуммаОборот КАК Сумма
		|ИЗ
		|	РегистрНакопления.КорректировкиНУ.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|				И ДоходРасход = ЗНАЧЕНИЕ(Перечисление.ПризнакСчета.Расходный)
		|				И ВидУчета = ЗНАЧЕНИЕ(Перечисление.ВидыУчета.ПР)) КАК КорректировкиНУОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	6 КАК Порядок,
		|	КорректировкиНУОбороты.ВидУчета КАК ВидУчета,
		|	СУММА(ВЫБОР
		|			КОГДА КорректировкиНУОбороты.ДоходРасход = ЗНАЧЕНИЕ(Перечисление.ПризнакСчета.Доходный)
		|				ТОГДА КорректировкиНУОбороты.СуммаОборот
		|			ИНАЧЕ КорректировкиНУОбороты.СуммаОборот * -1
		|		КОНЕЦ) КАК Сумма
		|ИЗ
		|	РегистрНакопления.КорректировкиНУ.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|				И ВидУчета = ЗНАЧЕНИЕ(Перечисление.ВидыУчета.ВР)) КАК КорректировкиНУОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	КорректировкиНУОбороты.ВидУчета";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецГода(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);

	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СуммаДоходыБУ = 0;
	Если НЕ МассивРезультатовЗапроса[0].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[0].Выбрать();
		ВыборкаДетальныхЗаписей.Следующий();
		СуммаДоходыБУ = ВыборкаДетальныхЗаписей.Сумма;
	КонецЕсли;	
	
	СуммаРасходыБУ = 0;
	Если НЕ МассивРезультатовЗапроса[1].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[1].Выбрать();
		ВыборкаДетальныхЗаписей.Следующий();
		СуммаРасходыБУ = ВыборкаДетальныхЗаписей.Сумма;
	КонецЕсли;	
	
	СуммаАмортизацияОСБУ = 0;
	Если НЕ МассивРезультатовЗапроса[2].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[2].Выбрать();
		ВыборкаДетальныхЗаписей.Следующий();
		СуммаАмортизацияОСБУ = ВыборкаДетальныхЗаписей.Сумма;
	КонецЕсли;	
	
	СуммаПостоянныеРазницыДоходы = 0;
	Если НЕ МассивРезультатовЗапроса[3].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[3].Выбрать();
		ВыборкаДетальныхЗаписей.Следующий();
		СуммаПостоянныеРазницыДоходы = ВыборкаДетальныхЗаписей.Сумма;
	КонецЕсли;	
	
	СуммаПостоянныеРазницыРасходы = 0;
	Если НЕ МассивРезультатовЗапроса[4].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[4].Выбрать();
		ВыборкаДетальныхЗаписей.Следующий();
		СуммаПостоянныеРазницыРасходы = ВыборкаДетальныхЗаписей.Сумма;
	КонецЕсли;
	
	СуммаВременныеРазницы = 0;
	Если НЕ МассивРезультатовЗапроса[5].Пустой() Тогда 
		ВыборкаДетальныхЗаписей = МассивРезультатовЗапроса[5].Выбрать();
		ВыборкаДетальныхЗаписей.Следующий();
		СуммаВременныеРазницы = ВыборкаДетальныхЗаписей.Сумма;
	КонецЕсли;	
	
	// 1. Доходы по бухгалтерскому учету.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Доходы по бухучету'");
	СтрокаНалоговойВыверки.Сумма				= СуммаДоходыБУ;
	
	// 2. Расходы по бухгалтерскому учету.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Расходы по бухучету'");
	СтрокаНалоговойВыверки.Сумма				= СуммаРасходыБУ;
	
	// 3. Прибыль до налогобложения.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Прибыль до налогообложения по бухучету (Стр1 - Стр2)'");
	СуммаПрибыльДоНалогов						= СуммаДоходыБУ - СуммаРасходыБУ;
	СтрокаНалоговойВыверки.Сумма				= СуммаПрибыльДоНалогов;
	
	// 4. Постоянные разницы - доходы.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Постоянные разницы - доходы'");
	СтрокаНалоговойВыверки.Сумма				= СуммаПостоянныеРазницыДоходы;
	
	// 5. Постоянные разницы - расходы.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Постоянные разницы - расходы'");
	СтрокаНалоговойВыверки.Сумма				= СуммаПостоянныеРазницыРасходы;
	
	// 6. Постоянные разницы.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Постоянные разницы (Стр5 - Стр4)'");
	СуммаПостоянныеРазницы						= -(СуммаПостоянныеРазницыДоходы - СуммаПостоянныеРазницыРасходы);
	СтрокаНалоговойВыверки.Сумма				= СуммаПостоянныеРазницы;
	
	// 7. Прибыль с учетом постоянных разниц.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Прибыль с учетом ПР (Стр3 + Стр6)'");
	СуммаПрибыльСУчетомПостоянныхРазниц			= СуммаПрибыльДоНалогов + СуммаПостоянныеРазницы;
	СтрокаНалоговойВыверки.Сумма				= СуммаПрибыльСУчетомПостоянныхРазниц;
	
	// 8. Расходы по налогу на прибыль (справочно).
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Расходы по НП (справочно: по ставке Стр17 от Стр7 с округл. до целых)'");
	
	СтавкаНалогаНаПрибыль = ДанныеУчетнойПолитики.СтавкаНалогаНаПрибыль;
	СтрокаНалоговойВыверки.Сумма = 0;
	Если СуммаПрибыльСУчетомПостоянныхРазниц > 0 Тогда 
		СтрокаНалоговойВыверки.Сумма			= Окр(СуммаПрибыльСУчетомПостоянныхРазниц * СтавкаНалогаНаПрибыль / 100,0);
	КонецЕсли;
	
	// 9. Временные разницы.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'ВРЕМЕННЫЕ РАЗНИЦЫ:'");	
	
	// 10. Вычет 15% за приобретенные ОС.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Вычеты при поступлении - действует только до 2009 г!'");
	СтрокаНалоговойВыверки.Сумма				= 0;
	
	// 11. Доход от выбытия ОС.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Доход от выбытия ОС (отрицательная стоимость категорий ОС)'");
	СуммаДоходОтВыбытияОС						= НалоговаяАмортизация.Итог("УвеличениеСОД");
	СтрокаНалоговойВыверки.Сумма				= СуммаДоходОтВыбытияОС;	
	
	// 12. Амортизация бухгалтерская.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Амортизация бухгалтерская'");
	СтрокаНалоговойВыверки.Сумма				= СуммаАмортизацияОСБУ;
	
	// 13. Амортизация налоговая.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Амортизация налоговая'");
	СуммаАмортизацияОСНУ						= НалоговаяАмортизация.Итог("Амортизация");
	СтрокаНалоговойВыверки.Сумма				= СуммаАмортизацияОСНУ;
	
	// 14. Прочие временные разницы.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Прочие временные разницы (ВР) по РБНУ'");
	СтрокаНалоговойВыверки.Сумма				= СуммаВременныеРазницы;
	
	// 15. Итого временные разницы.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Итого временные разницы (-Стр10 + Стр11 - Стр12 + Стр13 + Стр14)'");
	СуммаИтогоВременныеРазницы					= - СуммаДоходОтВыбытияОС - СуммаАмортизацияОСБУ + СуммаАмортизацияОСНУ + СуммаВременныеРазницы;
	СтрокаНалоговойВыверки.Сумма				= СуммаИтогоВременныеРазницы;
	
	// 16. Налогоблагаемая прибыль.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Налогоблагаемая прибыль (Стр3 + Стр6 + Стр15)'");
	СуммаНалогооблагаемаяПрибыль				= СуммаПрибыльДоНалогов + СуммаПостоянныеРазницы + СуммаИтогоВременныеРазницы;
	СтрокаНалоговойВыверки.Сумма				= СуммаНалогооблагаемаяПрибыль;
	
	// 17. Ставка налога.
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Ставка налога'");
	СтрокаНалоговойВыверки.Сумма				= СтавкаНалогаНаПрибыль;
	
	// 18. Сумма налога на прибыль
	СтрокаНалоговойВыверки 						= НалоговаяВыверка.Добавить();
	СтрокаНалоговойВыверки.НаименованиеСтроки 	= НСтр("ru = 'Сумма налога на прибыль (по ставке Стр17 от Стр16)'");	
	
	СуммаНалогНаПрибыль = 0;
	Если СуммаНалогооблагаемаяПрибыль > 0 Тогда 
		СуммаНалогНаПрибыль						= Окр(СуммаНалогооблагаемаяПрибыль * СтавкаНалогаНаПрибыль / 100,0);
	КонецЕсли;	
	
	СтрокаНалоговойВыверки.Сумма				= СуммаНалогНаПрибыль;		
	
	// Расчет налога на прибль по бухгалтерскому учету.	
	СуммаНалогНаПрибыльБУ = 0;
	Если ПрибыльБезУчетаНераспределеннойПрибыли Тогда
		Если СуммаПрибыльСУчетомПостоянныхРазниц > 0 Тогда 
			СуммаНалогНаПрибыльБУ = Окр(СуммаПрибыльСУчетомПостоянныхРазниц * СтавкаНалогаНаПрибыль / 100, 0);
		КонецЕсли;	
	Иначе			
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ХозрасчетныйОстатки.Счет КАК Счет,
			|	ХозрасчетныйОстатки.СуммаОстаток * -1 КАК СуммаОстаток
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НераспределеннаяПрибыль), , Организация = &Организация) КАК ХозрасчетныйОстатки";
		Запрос.УстановитьПараметр("Период", Новый Граница(МоментВремени(), ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("Организация", Организация);
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныхЗаписей = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныхЗаписей.Следующий() Тогда
			СуммаПрибыльБУ = ВыборкаДетальныхЗаписей.СуммаОстаток;
			Если СуммаПрибыльБУ > 0 Тогда 
				СуммаНалогНаПрибыльБУ = Окр(СуммаПрибыльБУ * СтавкаНалогаНаПрибыль / 100, 0);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Выполнить закрытие временных счетов учета
//
Процедура ВыполнитьЗакрытиеВременныхСчетовУчета()
	
	// 1. Список временных счетов
	// 2. Расходы по амортизации
	// 3. Расходы/доходы от переоценки валют
	// 4. Расходы по налогу на имущество
	//		* Недвижимость
	//		* Транспорт
	// 4. Формирование результирующей таблицы
	//		* Остатки временных счетов актив
	// 		* Остатки временных счетов пассив
	// 		* Данные по амортизации
	// 		* Доходы от переоценки
	// 		* Убытки от переоценки
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	Хозрасчетный.Ссылка КАК Ссылка,
		|	Хозрасчетный.Вид КАК ВидСчета,
		|	Хозрасчетный.Код КАК КодСчета
		|ПОМЕСТИТЬ ВременнаяТаблицаСчетаУчета
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Временный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	2 КАК Порядок,
		|	ЗакрытиеМесяцаАмортизацияОС.СчетЗатрат КАК СчетУчета,
		|	ЗакрытиеМесяцаАмортизацияОС.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаАмортизацияОС
		|ИЗ
		|	&ЗакрытиеМесяцаАмортизацияОС КАК ЗакрытиеМесяцаАмортизацияОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	3 КАК Порядок,
		|	ЗакрытиеМесяцаПереоценкаВалюты.СуммаДоход КАК СуммаДоход,
		|	ЗакрытиеМесяцаПереоценкаВалюты.СуммаУбыток КАК СуммаУбыток
		|ПОМЕСТИТЬ ВременнаяТаблицаПереоценкаВалюты
		|ИЗ
		|	&ЗакрытиеМесяцаПереоценкаВалюты КАК ЗакрытиеМесяцаПереоценкаВалюты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	41 КАК Порядок,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыПоНалогам) КАК СчетУчета,
		|	ЗакрытиеМесяцаНедвижимость.СуммаНалога КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаНалогНаИмуществоНедвижимость
		|ИЗ
		|	&ЗакрытиеМесяцаНедвижимость КАК ЗакрытиеМесяцаНедвижимость
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	42 КАК Порядок,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыПоНалогам) КАК СчетУчета,
		|	ЗакрытиеМесяцаТранспорт.СуммаНалога КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаНалогНаИмуществоТранспорт
		|ИЗ
		|	&ЗакрытиеМесяцаТранспорт КАК ЗакрытиеМесяцаТранспорт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
		|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаДт,
		|	0 КАК СуммаКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаСчетаУчета.Ссылка
		|				ИЗ
		|					ВременнаяТаблицаСчетаУчета КАК ВременнаяТаблицаСчетаУчета
		|				ГДЕ
		|					ВременнаяТаблицаСчетаУчета.ВидСчета = ЗНАЧЕНИЕ(ВидСчета.Активный)),
		|			,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСчетаУчета КАК ВременнаяТаблицаСчетаУчета
		|		ПО ХозрасчетныйОстатки.Счет = ВременнаяТаблицаСчетаУчета.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	0,
		|	ХозрасчетныйОстатки.СуммаОстаток * -1
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаСчетаУчета.Ссылка
		|				ИЗ
		|					ВременнаяТаблицаСчетаУчета КАК ВременнаяТаблицаСчетаУчета
		|				ГДЕ
		|					ВременнаяТаблицаСчетаУчета.ВидСчета = ЗНАЧЕНИЕ(ВидСчета.Пассивный)),
		|			,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСчетаУчета КАК ВременнаяТаблицаСчетаУчета
		|		ПО ХозрасчетныйОстатки.Счет = ВременнаяТаблицаСчетаУчета.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаАмортизацияОС.СчетУчета,
		|	СУММА(ВременнаяТаблицаАмортизацияОС.Сумма),
		|	0
		|ИЗ
		|	ВременнаяТаблицаАмортизацияОС КАК ВременнаяТаблицаАмортизацияОС
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаАмортизацияОС.СчетУчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДоходОтКурсовыхРазницПоОперациямВИностраннойВалюте),
		|	0,
		|	СУММА(ВременнаяТаблицаПереоценкаВалюты.СуммаДоход)
		|ИЗ
		|	ВременнаяТаблицаПереоценкаВалюты КАК ВременнаяТаблицаПереоценкаВалюты
		|
		|ИМЕЮЩИЕ
		|	НЕ СУММА(ВременнаяТаблицаПереоценкаВалюты.СуммаДоход) = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УбыткиОтКурсовыхРазницПоОперациямВИностраннойВалюте),
		|	СУММА(ВременнаяТаблицаПереоценкаВалюты.СуммаУбыток),
		|	0
		|ИЗ
		|	ВременнаяТаблицаПереоценкаВалюты КАК ВременнаяТаблицаПереоценкаВалюты
		|
		|ИМЕЮЩИЕ
		|	НЕ СУММА(ВременнаяТаблицаПереоценкаВалюты.СуммаУбыток) = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаНалогНаИмуществоНедвижимость.СчетУчета,
		|	СУММА(ВременнаяТаблицаНалогНаИмуществоНедвижимость.Сумма),
		|	0
		|ИЗ
		|	ВременнаяТаблицаНалогНаИмуществоНедвижимость КАК ВременнаяТаблицаНалогНаИмуществоНедвижимость
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаНалогНаИмуществоНедвижимость.СчетУчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаНалогНаИмуществоТранспорт.СчетУчета,
		|	СУММА(ВременнаяТаблицаНалогНаИмуществоТранспорт.Сумма),
		|	0
		|ИЗ
		|	ВременнаяТаблицаНалогНаИмуществоТранспорт КАК ВременнаяТаблицаНалогНаИмуществоТранспорт
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаНалогНаИмуществоТранспорт.СчетУчета";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МоментВремени", Дата + 1); 
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ЗакрытиеМесяцаАмортизацияОС", АмортизацияОС.Выгрузить());
	Запрос.УстановитьПараметр("ЗакрытиеМесяцаПереоценкаВалюты", ПереоценкаВалюты.Выгрузить());
	Запрос.УстановитьПараметр("ЗакрытиеМесяцаНедвижимость", Недвижимость.Выгрузить());
	Запрос.УстановитьПараметр("ЗакрытиеМесяцаТранспорт", Транспорт.Выгрузить());
	
	ВременныеСчетаУчета.Загрузить(Запрос.Выполнить().Выгрузить())
	
КонецПроцедуры // РассчитатьПереоценкуВалютныхСредств()

// Процедура - Выполнить закрытие парных счетов учета
//
Процедура ВыполнитьЗакрытиеПарныхСчетовУчета()
	
	// 1. Список активных счетов, с заполненым парным счетом (только Контрагенты и договоры) 
	// 2. Список парных счетов (пассивные)
	// 3. Остатки по активным счетам
	// 4. Осатки по пассивным счетам
	// 5. Соединение активных и пассивных остатков
	// 6. Таблица для заполнения	
	
	ТекстЗапроса =
		// Список активных счетов
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК АктивныйСчетУчета
		|ПОМЕСТИТЬ ВременнаяТаблицаСписокАктивныхПарныхСчетов
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
		|	И НЕ Хозрасчетный.ПарныйСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|	И Хозрасчетный.ВидыСубконто.ВидСубконто В(&ВидыСубконто)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// Список парных счетов
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК ПассивныйСчетУчета
		|ПОМЕСТИТЬ ВременнаяТаблицаСписокПассивныхПарныхСчетов
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
		|	И НЕ Хозрасчетный.ПарныйСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|	И Хозрасчетный.ВидыСубконто.ВидСубконто В(&ВидыСубконто)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// Остатки по активным сетам
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК СчетАктивный,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК СальдоАктивный,
		|	СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт) КАК ВалютноеСальдоАктивный,
		|	ХозрасчетныйОстатки.Валюта КАК Валюта
		|ПОМЕСТИТЬ ВременнаяТаблицаСальдоАктивныхСчетов
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаСписокАктивныхПарныхСчетов.АктивныйСчетУчета
		|				ИЗ
		|					ВременнаяТаблицаСписокАктивныхПарныхСчетов КАК ВременнаяТаблицаСписокАктивныхПарныхСчетов),
		|			&ВидыСубконто,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2,
		|	ХозрасчетныйОстатки.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// Остатки по пассивным счетам
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК СчетПассивный,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК СальдоПассивный,
		|	СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт) КАК ВалютноеСальдоПассивный,
		|	ХозрасчетныйОстатки.Валюта КАК Валюта
		|ПОМЕСТИТЬ ВременнаяТаблицаСальдоПассивныхСчетов
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаСписокПассивныхПарныхСчетов.ПассивныйСчетУчета
		|				ИЗ
		|					ВременнаяТаблицаСписокПассивныхПарныхСчетов КАК ВременнаяТаблицаСписокПассивныхПарныхСчетов),
		|			&ВидыСубконто,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2,
		|	ХозрасчетныйОстатки.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// Соединение остатков
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный КАК СчетАктивный,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто1 КАК Субконто1,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто2 КАК Субконто2,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Валюта КАК Валюта,
		|	СУММА(ВременнаяТаблицаСальдоАктивныхСчетов.СальдоАктивный) КАК СальдоАктивный,
		|	СУММА(ВременнаяТаблицаСальдоАктивныхСчетов.ВалютноеСальдоАктивный) КАК ВалютноеСальдоАктивный,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный КАК СчетПассивный,
		|	СУММА(ВременнаяТаблицаСальдоПассивныхСчетов.СальдоПассивный) КАК СальдоПассивный,
		|	СУММА(ВременнаяТаблицаСальдоПассивныхСчетов.ВалютноеСальдоПассивный) КАК ВалютноеСальдоПассивный
		|ПОМЕСТИТЬ ВременнаяТаблицаСальдоСводПарСчетов
		|ИЗ
		|	ВременнаяТаблицаСальдоАктивныхСчетов КАК ВременнаяТаблицаСальдоАктивныхСчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСальдоПассивныхСчетов КАК ВременнаяТаблицаСальдоПассивныхСчетов
		|		ПО ВременнаяТаблицаСальдоАктивныхСчетов.Субконто1 = ВременнаяТаблицаСальдоПассивныхСчетов.Субконто1
		|			И ВременнаяТаблицаСальдоАктивныхСчетов.Субконто2 = ВременнаяТаблицаСальдоПассивныхСчетов.Субконто2
		|			И ВременнаяТаблицаСальдоАктивныхСчетов.Валюта = ВременнаяТаблицаСальдоПассивныхСчетов.Валюта
		|			И (ВременнаяТаблицаСальдоАктивныхСчетов.СальдоАктивный <> 0)
		|			И (ВременнаяТаблицаСальдоПассивныхСчетов.СальдоПассивный <> 0)
		|			И ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный.ПарныйСчет = ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто1,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто2,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Валюта
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Остатки (отрицательные) есть только по активным
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто1,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто2,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Валюта,
		|	СУММА(ВременнаяТаблицаСальдоАктивныхСчетов.СальдоАктивный),
		|	СУММА(ВременнаяТаблицаСальдоАктивныхСчетов.ВалютноеСальдоАктивный),
		|	ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный.ПарныйСчет,
		|	СУММА(0),
		|	СУММА(0)
		|ИЗ
		|	ВременнаяТаблицаСальдоАктивныхСчетов КАК ВременнаяТаблицаСальдоАктивныхСчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСальдоПассивныхСчетов КАК ВременнаяТаблицаСальдоПассивныхСчетов
		|		ПО ВременнаяТаблицаСальдоАктивныхСчетов.Субконто1 = ВременнаяТаблицаСальдоПассивныхСчетов.Субконто1
		|			И ВременнаяТаблицаСальдоАктивныхСчетов.Субконто2 = ВременнаяТаблицаСальдоПассивныхСчетов.Субконто2
		|			И ВременнаяТаблицаСальдоАктивныхСчетов.Валюта = ВременнаяТаблицаСальдоПассивныхСчетов.Валюта
		|			И ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный.ПарныйСчет = ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный
		|ГДЕ
		|	ВременнаяТаблицаСальдоАктивныхСчетов.СальдоАктивный < 0
		|	И ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто1,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Субконто2,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.Валюта,
		|	ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный.ПарныйСчет
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Остатки (отрицательные) есть только по пассивным
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный.ПарныйСчет,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.Субконто1,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.Субконто2,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.Валюта,
		|	СУММА(0),
		|	СУММА(0),
		|	ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный,
		|	СУММА(ВременнаяТаблицаСальдоПассивныхСчетов.СальдоПассивный),
		|	СУММА(ВременнаяТаблицаСальдоПассивныхСчетов.ВалютноеСальдоПассивный)
		|ИЗ
		|	ВременнаяТаблицаСальдоПассивныхСчетов КАК ВременнаяТаблицаСальдоПассивныхСчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСальдоАктивныхСчетов КАК ВременнаяТаблицаСальдоАктивныхСчетов
		|		ПО ВременнаяТаблицаСальдоПассивныхСчетов.Субконто1 = ВременнаяТаблицаСальдоАктивныхСчетов.Субконто1
		|			И ВременнаяТаблицаСальдоПассивныхСчетов.Субконто2 = ВременнаяТаблицаСальдоАктивныхСчетов.Субконто2
		|			И ВременнаяТаблицаСальдоПассивныхСчетов.Валюта = ВременнаяТаблицаСальдоАктивныхСчетов.Валюта
		|			И ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный.ПарныйСчет = ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный
		|ГДЕ
		|	ВременнаяТаблицаСальдоПассивныхСчетов.СальдоПассивный < 0
		|	И ВременнаяТаблицаСальдоАктивныхСчетов.СчетАктивный ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.Субконто1,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.Субконто2,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.Валюта,
		|	ВременнаяТаблицаСальдоПассивныхСчетов.СчетПассивный.ПарныйСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// Опеределение проводки и сумм
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный КАК СальдоАктивный,
		|	ВременнаяТаблицаСальдоСводПарСчетов.ВалютноеСальдоАктивный КАК СальдоАктивныйВалютное,
		|	ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный КАК СальдоПассивный,
		|	ВременнаяТаблицаСальдоСводПарСчетов.ВалютноеСальдоПассивный КАК СальдоПассивныйВалютное,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный > 0
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СчетПассивный
		|		ИНАЧЕ ВременнаяТаблицаСальдоСводПарСчетов.СчетАктивный
		|	КОНЕЦ КАК СчетДт,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный > 0
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СчетАктивный
		|		ИНАЧЕ ВременнаяТаблицаСальдоСводПарСчетов.СчетПассивный
		|	КОНЕЦ КАК СчетКт,
		|	ВременнаяТаблицаСальдоСводПарСчетов.Субконто1 КАК Субконто1,
		|	ВременнаяТаблицаСальдоСводПарСчетов.Субконто2 КАК Субконто2,
		|	ВременнаяТаблицаСальдоСводПарСчетов.Валюта КАК Валюта,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный >= 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный < 0
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный * -1
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный >= 0
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный * -1
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный >= ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный >= ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный * -1
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный * -1
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный >= 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный < 0
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.ВалютноеСальдоПассивный * -1
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный >= 0
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.ВалютноеСальдоАктивный * -1
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный >= ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.ВалютноеСальдоПассивный
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный > 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.ВалютноеСальдоАктивный
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный >= ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.ВалютноеСальдоПассивный * -1
		|		КОГДА ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный < 0
		|				И ВременнаяТаблицаСальдоСводПарСчетов.СальдоАктивный < ВременнаяТаблицаСальдоСводПарСчетов.СальдоПассивный
		|			ТОГДА ВременнаяТаблицаСальдоСводПарСчетов.ВалютноеСальдоАктивный * -1
		|	КОНЕЦ КАК ВалютнаяСумма
		|ИЗ
		|	ВременнаяТаблицаСальдоСводПарСчетов КАК ВременнаяТаблицаСальдоСводПарСчетов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЫРАЗИТЬ(ВременнаяТаблицаСальдоСводПарСчетов.Субконто1 КАК Справочник.Контрагенты).Наименование,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаСальдоСводПарСчетов.Субконто2 КАК Справочник.ДоговорыКонтрагентов).Наименование";
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МоментВремени", 	Дата + 1); 
	Запрос.УстановитьПараметр("Период", 		Дата);
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("ВидыСубконто", 	ВидыСубконто);
	
	ПарныеСчетаУчета.Загрузить(Запрос.Выполнить().Выгрузить())
	
КонецПроцедуры // РассчитатьПереоценкуВалютныхСредств()

// Процедура - Рассчитать списание расходов будущих периодов
//
Процедура РассчитатьСписаниеРасходовБудущихПериодов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходыБудущихПериодов.СчетУчета КАК СчетДт,
		|	РасходыБудущихПериодов.Ссылка КАК РБП,
		|	РасходыБудущихПериодов.УчетСФ КАК УчетСФ,
		|	РасходыБудущихПериодов.ДатаНачалаСписания КАК ДатаНачалаСписания,
		|	РасходыБудущихПериодов.ДатаОкончанияСписания КАК ДатаОкончанияСписания,
		|	ВЫБОР
		|		КОГДА РасходыБудущихПериодов.ДатаНачалаСписания > НАЧАЛОПЕРИОДА(РасходыБудущихПериодов.ДатаНачалаСписания, МЕСЯЦ)
		|			ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(РасходыБудущихПериодов.ДатаНачалаСписания, МЕСЯЦ, 1), МЕСЯЦ)
		|		ИНАЧЕ РасходыБудущихПериодов.ДатаНачалаСписания
		|	КОНЕЦ КАК ДатаНачалаПолногоМесяцаСписания,
		|	ВЫБОР
		|		КОГДА КОНЕЦПЕРИОДА(РасходыБудущихПериодов.ДатаОкончанияСписания, ДЕНЬ) < КОНЕЦПЕРИОДА(РасходыБудущихПериодов.ДатаОкончанияСписания, МЕСЯЦ)
		|			ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(РасходыБудущихПериодов.ДатаОкончанияСписания, МЕСЯЦ, -1), МЕСЯЦ)
		|		ИНАЧЕ РасходыБудущихПериодов.ДатаОкончанияСписания
		|	КОНЕЦ КАК ДатаОкончанияПолногоМесяцаСписания,
		|	РасходыБудущихПериодов.Себестоимость КАК Себестоимость,
		|	РасходыБудущихПериодов.СуммаНДС КАК СуммаНДС,
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыБудущихПериодов), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов), Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РасходыБудущихПериодов КАК РасходыБудущихПериодов
		|		ПО ХозрасчетныйОстатки.Субконто1 = РасходыБудущихПериодов.Ссылка";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	НачалоПериода = НачалоМесяца(Дата);
	КонецПериода = КонецМесяца(Дата);

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Определение суммы НДС.
		СуммаНДС = ?(ВыборкаДетальныеЗаписи.УчетСФ = 2, 0, ВыборкаДетальныеЗаписи.СуммаНДС); // Ежемесячно.

		// Распределение себестоимости для расчета суммы списания.
		Если ВыборкаДетальныеЗаписи.ДатаНачалаСписания < НачалоМесяца(ВыборкаДетальныеЗаписи.ДатаОкончанияСписания) Тогда
			
			// Определение даты начала полного месяца.
			Если ВыборкаДетальныеЗаписи.ДатаНачалаСписания > НачалоМесяца(ВыборкаДетальныеЗаписи.ДатаНачалаСписания) Тогда
				ДатаНачалаПолногоМесяцаСписания = НачалоМесяца(ДобавитьМесяц(ВыборкаДетальныеЗаписи.ДатаНачалаСписания, 1));
			Иначе
				ДатаНачалаПолногоМесяцаСписания = ВыборкаДетальныеЗаписи.ДатаНачалаСписания;
			КонецЕсли;
			
			// Определение даты окончания полного месяца.
			Если ВыборкаДетальныеЗаписи.ДатаОкончанияСписания < КонецМесяца(ВыборкаДетальныеЗаписи.ДатаОкончанияСписания) Тогда
				ДатаОкончанияПолногоМесяцаСписания = КонецМесяца(ДобавитьМесяц(ВыборкаДетальныеЗаписи.ДатаОкончанияСписания, -1));
			Иначе
				ДатаОкончанияПолногоМесяцаСписания = ВыборкаДетальныеЗаписи.ДатаОкончанияСписания;
			КонецЕсли;
			
			// Расчет количество полных месяцев.
			Если ДатаОкончанияПолногоМесяцаСписания >= ДатаНачалаПолногоМесяцаСписания Тогда
				КоличествоПолныхМесяцев = (Год(ДатаОкончанияПолногоМесяцаСписания) - Год(ДатаНачалаПолногоМесяцаСписания)) * 12 
					+ Месяц(ДатаОкончанияПолногоМесяцаСписания) - Месяц(ДатаНачалаПолногоМесяцаСписания) + 1;
			Иначе
				КоличествоПолныхМесяцев = 0;
			КонецЕсли;

			КоличествоДнейРБП = КоличествоДней(ВыборкаДетальныеЗаписи.ДатаОкончанияСписания, ВыборкаДетальныеЗаписи.ДатаНачалаСписания) + 1;
			
			// Расчет суммы списания первого месяца.
			СуммаСписанияПервогоМесяца = ВыборкаДетальныеЗаписи.Себестоимость 
				* КоличествоДней(ДатаНачалаПолногоМесяцаСписания, ВыборкаДетальныеЗаписи.ДатаНачалаСписания) / КоличествоДнейРБП;
			НДССписанияПервогоМесяца = СуммаНДС 
				* КоличествоДней(ДатаНачалаПолногоМесяцаСписания, ВыборкаДетальныеЗаписи.ДатаНачалаСписания) / КоличествоДнейРБП;
			// Расчет суммы списания последнего месяца.
			СуммаСписанияПоследнегоМесяца = ВыборкаДетальныеЗаписи.Себестоимость 
				* КоличествоДней(ВыборкаДетальныеЗаписи.ДатаОкончанияСписания, ДатаОкончанияПолногоМесяцаСписания) / КоличествоДнейРБП;
			НДССписанияПоследнегоМесяца = СуммаНДС 
				* КоличествоДней(ВыборкаДетальныеЗаписи.ДатаОкончанияСписания, ДатаОкончанияПолногоМесяцаСписания) / КоличествоДнейРБП;
			// Расчет суммы списания полного месяца.
			СуммаСписанияПолногоМесяца = 0;
			НДССписанияПолногоМесяца = 0;
			Если КоличествоПолныхМесяцев > 0 Тогда
				СуммаСписанияПолногоМесяца = (ВыборкаДетальныеЗаписи.Себестоимость - СуммаСписанияПервогоМесяца - СуммаСписанияПоследнегоМесяца) / КоличествоПолныхМесяцев;
				НДССписанияПолногоМесяца = (СуммаНДС - НДССписанияПервогоМесяца - НДССписанияПоследнегоМесяца) / КоличествоПолныхМесяцев;			
			КонецЕсли;
			
			// Расчет суммы списания последнего месяца.
			СуммаСписанияПоследнегоМесяца = ВыборкаДетальныеЗаписи.Себестоимость - СуммаСписанияПервогоМесяца - СуммаСписанияПолногоМесяца * КоличествоПолныхМесяцев;
			НДССписанияПоследнегоМесяца = СуммаНДС - НДССписанияПервогоМесяца - НДССписанияПолногоМесяца * КоличествоПолныхМесяцев;		
			
			// Определение суммы списания по текущему месяцу.
			// Первый месяц.
			Если НачалоМесяца(ВыборкаДетальныеЗаписи.ДатаНачалаСписания) = НачалоПериода Тогда
				СуммаСписания = СуммаСписанияПервогоМесяца;
				НДССписания = НДССписанияПервогоМесяца;
			// Последний месяц.				
			ИначеЕсли КонецМесяца(ВыборкаДетальныеЗаписи.ДатаОкончанияСписания) = КонецПериода Тогда 
				СуммаСписания = СуммаСписанияПолногоМесяца + СуммаСписанияПоследнегоМесяца;
				НДССписания = НДССписанияПолногоМесяца + НДССписанияПоследнегоМесяца;	
			Иначе
				СуммаСписания = СуммаСписанияПолногоМесяца;
				НДССписания = НДССписанияПолногоМесяца;
			КонецЕсли;
		Иначе
			СуммаСписания = ВыборкаДетальныеЗаписи.Себестоимость;
			НДССписания = СуммаНДС;
		КонецЕсли;	
		
		// Контроль остатка.
		Если СуммаСписания + НДССписания > ВыборкаДетальныеЗаписи.СуммаОстаток Тогда 
			СуммаСписания =  ВыборкаДетальныеЗаписи.СуммаОстаток / (СуммаСписания + НДССписания) * СуммаСписания;
			НДССписания	= ВыборкаДетальныеЗаписи.СуммаОстаток - СуммаСписания;
		КонецЕсли;		
		
		Если СуммаСписания = 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = РасходыБП.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи); 
		
		СтрокаТабличнойЧасти.Сумма = СуммаСписания;
		СтрокаТабличнойЧасти.СуммаНДС = СуммаНДС;
	КонецЦикла;
КонецПроцедуры

// Функция - Количество дней
//
// Параметры:
//  Дата1	 - Дата	 - Окончание периода
//  Дата2	 - Дата	 - Начало периода
// 
// Возвращаемое значение:
//   КоличествоДней - Число
//
Функция КоличествоДней(Дата1, Дата2)
	Возврат Окр((НачалоДня(Дата1) - НачалоДня(Дата2)) / 86400);
КонецФункции

//Процедура - рассчитать Общехозяйственные расходы и вспомогательное производство
//
Процедура РасчсчитатьСебестоимостиГотовойПродукции()
	
	// 1. Сумма остатка по счету 1635 на конец месяца.
	// 2. Сумма остатка по счету 1633 на конец месяца.
	// 3. Сумма оборотов Дт по счету 1630 за месяц + субконто (ГП и Заказ).
	// 4. Получает из РС "СостояниеЗаказов" склад по ГП и заказу из 3 пакета.
	// 5. Присоединение к 3 пакету склада и состояния из 4 пакета.
	// 6. Подбираются проводки за месяц, где счет Кт = 1640, для количества оборота Кт и счета Дт. 
	// 7. Подбираются проводки за месяц, где счет Дт = 1640, для количества оборота Дт.
	// 8. Сумма остатка по счету 1630 за весь период до конца предыдущего месяца.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(ДОБАВИТЬКДАТЕ(&КонецПериода, СЕКУНДА, 1), Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НакладныеРасходы), , Организация = &Организация) КАК ХозрасчетныйОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	2 КАК Порядок,
		|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(ДОБАВИТЬКДАТЕ(&КонецПериода, СЕКУНДА, 1), Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВспомогательноеПроизводство), , Организация = &Организация) КАК ХозрасчетныйОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	3 КАК Порядок,
		|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
		|	ХозрасчетныйОбороты.Субконто2 КАК Заказ,
		|	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаПрямыхЗатратНаГП
		|ПОМЕСТИТЬ ВременнаяТаблицаОсновноеПроизводствоТМ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство), &ВидыСубконтоПроизводство, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	4 КАК Порядок,
		|	ВыполненныеРаботыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ВыполненныеРаботыСрезПоследних.Заказ КАК Заказ,
		|	ВыполненныеРаботыСрезПоследних.Склад КАК Склад
		|ПОМЕСТИТЬ ВременнаяТаблицаСклады
		|ИЗ
		|	РегистрСведений.ВыполненныеРаботы.СрезПоследних(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И (Заказ, Номенклатура) В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаОсновноеПроизводствоТМ.Заказ,
		|						ВременнаяТаблицаОсновноеПроизводствоТМ.Номенклатура
		|					ИЗ
		|						ВременнаяТаблицаОсновноеПроизводствоТМ КАК ВременнаяТаблицаОсновноеПроизводствоТМ)) КАК ВыполненныеРаботыСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	5 КАК Порядок,
		|	ВременнаяТаблицаОсновноеПроизводствоТМ.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаОсновноеПроизводствоТМ.Заказ КАК Заказ,
		|	ВременнаяТаблицаОсновноеПроизводствоТМ.СуммаПрямыхЗатратНаГП КАК СуммаПрямыхЗатратНаГП,
		|	ВременнаяТаблицаСклады.Склад КАК Склад
		|ИЗ
		|	ВременнаяТаблицаОсновноеПроизводствоТМ КАК ВременнаяТаблицаОсновноеПроизводствоТМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСклады КАК ВременнаяТаблицаСклады
		|		ПО ВременнаяТаблицаОсновноеПроизводствоТМ.Номенклатура = ВременнаяТаблицаСклады.Номенклатура
		|			И ВременнаяТаблицаОсновноеПроизводствоТМ.Заказ = ВременнаяТаблицаСклады.Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	6 КАК Порядок,
		|	ХозрасчетныйОборотыДтКт.СчетДт КАК Счет,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Номенклатура,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт3 КАК Заказ,
		|	ХозрасчетныйОборотыДтКт.КоличествоОборотКт КАК Количество
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, , , , СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГотоваяПродукция), &ВидыСубконтоГП, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	7 КАК Порядок,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Номенклатура,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт3 КАК Заказ,
		|	ХозрасчетныйОборотыДтКт.КоличествоОборотДт КАК Количество
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, , СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГотоваяПродукция), &ВидыСубконтоГП, , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	8 КАК Порядок,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК Сумма,
		|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
		|	ХозрасчетныйОстатки.Субконто2 КАК Заказ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство), &ВидыСубконтоПроизводство, Организация = &Организация) КАК ХозрасчетныйОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2";
	ВидыСубконтоГП = Новый Массив;
	ВидыСубконтоГП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоГП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	ВидыСубконтоГП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);	
	Запрос.УстановитьПараметр("ВидыСубконтоГП", ВидыСубконтоГП);
	
	ВидыСубконтоПроизводство = Новый Массив;
	ВидыСубконтоПроизводство.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоПроизводство.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);	
	Запрос.УстановитьПараметр("ВидыСубконтоПроизводство", ВидыСубконтоПроизводство);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата)); // Начало текущего месяца
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата)); // Конец текущего месяца
	Запрос.УстановитьПараметр("Организация", Организация);		
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаОХР = МассивРезультатов[0].Выбрать();
	ВыборкаВП  = МассивРезультатов[1].Выбрать();
		 
	СуммаОбщехозяйственныхРасходов = 0;
	СуммаВспомогательногоПроизводства  = 0;
	
	Если ВыборкаОХР.Следующий() Тогда
		СуммаОбщехозяйственныхРасходов = ВыборкаОХР.Сумма;	
	КонецЕсли;

	Если ВыборкаВП.Следующий() Тогда
		СуммаВспомогательногоПроизводства = ВыборкаВП.Сумма;	
	КонецЕсли;
	
	// Основное произвоздство за текущий месяц.
	ТЗОсновноеПроизводствоТМ = МассивРезультатов[4].Выгрузить();
	
	// Реализованная продукция.
	ТЗРеализованнаяГП = МассивРезультатов[5].Выгрузить();
	ТЗРеализованнаяГП.Индексы.Добавить("Номенклатура");
	ТЗРеализованнаяГП.Индексы.Добавить("Заказ");
		
	// Произведенная готовая продукция на конец месяца.
	ТЗГотоваяПродукция = МассивРезультатов[6].Выгрузить();
	ТЗГотоваяПродукция.Индексы.Добавить("Номенклатура");
	ТЗГотоваяПродукция.Индексы.Добавить("Заказ");
	
	// Остатки по основному производству на конец предыдущего месяца.
	ТЗОсновноеПроизводствоПМ = МассивРезультатов[7].Выгрузить();
	ТЗОсновноеПроизводствоПМ.Индексы.Добавить("Номенклатура");
	ТЗОсновноеПроизводствоПМ.Индексы.Добавить("Заказ");

	// Распределение сумм ОХР и ВП по суммам остатков основного производства за текущий месяц.
	МассивСумм    = ТЗОсновноеПроизводствоТМ.ВыгрузитьКолонку("СуммаПрямыхЗатратНаГП");
	
	МассивСуммОХР = Неопределено;
	Если СуммаОбщехозяйственныхРасходов > 0 Тогда
		МассивСуммОХР = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаОбщехозяйственныхРасходов, МассивСумм, 2);
	КонецЕсли;	
	МассивСуммВП = Неопределено;
	Если СуммаВспомогательногоПроизводства > 0 Тогда
		МассивСуммВП = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаВспомогательногоПроизводства, МассивСумм, 2);
	КонецЕсли;		
	
	ИндексМассива = 0;	
	
	Для Каждого СтрокаТаблицыЗначений Из ТЗОсновноеПроизводствоТМ Цикл
		
		СтрокаТабличнойЧасти = РасходыНаПроизводство.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицыЗначений);
		
		Если МассивСуммОХР <> Неопределено Тогда
			СтрокаТабличнойЧасти.СуммаОбщехозяйственныхРасходов = МассивСуммОХР[ИндексМассива];	
		КонецЕсли;
		
		Если МассивСуммВП <> Неопределено Тогда
			СтрокаТабличнойЧасти.СуммаВспомогательногоПроизводства = МассивСуммВП[ИндексМассива];	
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СуммаНЗП = СтрокаТабличнойЧасти.СуммаОбщехозяйственныхРасходов 
											+ СтрокаТабличнойЧасти.СуммаВспомогательногоПроизводства
											+ СтрокаТабличнойЧасти.СуммаНЗППредыдущегоПериода;
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураОтбора.Вставить("Заказ", СтрокаТабличнойЧасти.Заказ);
		
		// Поиск готовой продукции по заказу и ГП, если таковые имеются.
		МассивИзготовленнойГП = ТЗГотоваяПродукция.НайтиСтроки(СтруктураОтбора);
		Если МассивИзготовленнойГП.Количество() > 0 Тогда
			СтрокаТабличнойЧасти.Количество = МассивИзготовленнойГП[0].Количество;
		КонецЕсли;
		
		// Поиск начального сальдо по основному производству, если таковые имеются.
		МассивСуммаНЗППредыдущегоПериода = ТЗОсновноеПроизводствоПМ.НайтиСтроки(СтруктураОтбора);
		Если МассивСуммаНЗППредыдущегоПериода.Количество() > 0 Тогда
			СтрокаТабличнойЧасти.СуммаНЗППредыдущегоПериода = МассивСуммаНЗППредыдущегоПериода[0].Сумма;
		КонецЕсли;
		
		// Суммы с основного производства суммируются и если продукция по заказу изготовлена, то 
		// данная сумма записывается как "Сумма корректировки готовой продукции", в ином случае 
		// она остается на счете основного производства до момента изготовления продукции.
		Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
			СтрокаТабличнойЧасти.СуммаКорректировкиГП = СтрокаТабличнойЧасти.СуммаОбщехозяйственныхРасходов 
															+ СтрокаТабличнойЧасти.СуммаВспомогательногоПроизводства;
			СтрокаТабличнойЧасти.СуммаНЗПТекущегоПериода = 0;
		Иначе
			СтрокаТабличнойЧасти.СуммаНЗПТекущегоПериода = СтрокаТаблицыЗначений.СуммаПрямыхЗатратНаГП 
												+ СтрокаТабличнойЧасти.СуммаНЗП;
			СтрокаТабличнойЧасти.СуммаКорректировкиГП = 0;
		КонецЕсли;
		
		// Поиск готовой реализованной продукции по заказу и ГП, если таковые имеются.
		МассивРеализованнойГП = ТЗРеализованнаяГП.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаМассива Из МассивРеализованнойГП Цикл
			
			Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
				СтрокаТабличнойЧасти.СуммаКорректировкиРеализации = (СтрокаТабличнойЧасти.СуммаОбщехозяйственныхРасходов 
								+ СтрокаТабличнойЧасти.СуммаВспомогательногоПроизводства)
								/ СтрокаТабличнойЧасти.Количество * СтрокаМассива.Количество;
			КонецЕсли;
							
			СтрокаТабличнойЧасти.СчетДтРеализации = СтрокаМассива.Счет;
		КонецЦикла;
		
		ИндексМассива = ИндексМассива + 1;
	КонецЦикла;	
	
КонецПроцедуры

//Процедура - рассчитать единый налог
//
Процедура РассчитатьЕдиныйНалог(ДанныеУчетнойПолитики, РасчетЕдиногоНалогаЗаКвартал)

	// Выбираются сгруппированные по виду деятельности данные из РН "ОборотыПоДаннымЕдиногоНалога",
	// перемножаются на ставки и в результате запрос возвращает по видам деятельности
	// наличные и безналичные суммы, а также суммы перемноженные на ставки единого налога.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОборотыПоДаннымЕдиногоНалогаОбороты.ВидДеятельности КАК ВидДеятельности,
		|	СУММА(ОборотыПоДаннымЕдиногоНалогаОбороты.СуммаНаличнаяОборот) КАК СуммаНаличная,
		|	СУММА(ОборотыПоДаннымЕдиногоНалогаОбороты.СуммаБезналичнаяОборот) КАК СуммаБезналичная,
		|	ВЫБОР 
		|		КОГДА ОборотыПоДаннымЕдиногоНалогаОбороты.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиЕН.ПереработкаПроизводствоТорговля)
		|			ТОГДА СУММА(ОборотыПоДаннымЕдиногоНалогаОбороты.СуммаНаличнаяОборот) * &СтавкаНалППТ / 100
		|		ИНАЧЕ СУММА(ОборотыПоДаннымЕдиногоНалогаОбороты.СуммаНаличнаяОборот) * &СтавкаНалП / 100
		|	КОНЕЦ КАК СуммаНаличнаяЕдиныйНалог,
		|	ВЫБОР 
		|		КОГДА ОборотыПоДаннымЕдиногоНалогаОбороты.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиЕН.ПереработкаПроизводствоТорговля)
		|			ТОГДА СУММА(ОборотыПоДаннымЕдиногоНалогаОбороты.СуммаБезналичнаяОборот) * &СтавкаБезНалППТ / 100
		|		ИНАЧЕ СУММА(ОборотыПоДаннымЕдиногоНалогаОбороты.СуммаБезналичнаяОборот) * &СтавкаБезНалП / 100
		|	КОНЕЦ КАК СуммаБезналичнаяЕдиныйНалог
		|ИЗ
		|	РегистрНакопления.ОборотыПоДаннымЕдиногоНалога.Обороты(&НачалоПериода, &КонецПериода, , ) КАК ОборотыПоДаннымЕдиногоНалогаОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ОборотыПоДаннымЕдиногоНалогаОбороты.ВидДеятельности
		|
		|УПОРЯДОЧИТЬ ПО
		|	СуммаНаличная";	
	Если РасчетЕдиногоНалогаЗаКвартал Тогда
		Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(Дата));
		Запрос.УстановитьПараметр("КонецПериода", КонецКвартала(Дата));
	Иначе	
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
		Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтавкаНалППТ", 		ДанныеУчетнойПолитики.СтавкаЕННаличнаяФорма1);
	Запрос.УстановитьПараметр("СтавкаНалП", 		ДанныеУчетнойПолитики.СтавкаЕННаличнаяФорма2);
	Запрос.УстановитьПараметр("СтавкаБезНалППТ", 	ДанныеУчетнойПолитики.СтавкаЕНБезНаличнаяФорма1);
	Запрос.УстановитьПараметр("СтавкаБезНалП", 		ДанныеУчетнойПолитики.СтавкаЕНБезНаличнаяФорма2);
	
	ЕдиныйНалог.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

Процедура СформироватьНадписи()
	НадписьАмортизацияОС = "";
	НадписьПереоценкаВалютныхСредств = "";
	НадписьНалогНаПрибль = "";
	НадписьНераспределеннаяПрибль = "";
	НадписьНалогНаИмущество = "";
	НадписьЗакрытиеПарныхСчетов = "";
	НадписьЗакрытиеВременныхСчетов = "";
	НадписьСписаниеРасходовБудущихПериодов = "";
	НадписьНДС = "";
	НадписьСебестоимостиГотовойПродукции = "";
	НадписьЕдиныйНалог = "";
	
	Если РасчетАмортизацииОС Тогда
		НадписьАмортизацияОС = СтрШаблон(НСтр("ru = 'Сумма амортизации: %1'"), АмортизацияОС.Итог("Сумма"));
	КонецЕсли;
	
	Если РасчетПереоценкиВалютныхСредств Тогда
		НадписьПереоценкаВалютныхСредств	= СтрШаблон(НСтр("ru = 'Доходы: %1. Убытки: %2'"), 
										ПереоценкаВалюты.Итог("СуммаДоход"), 
										ПереоценкаВалюты.Итог("СуммаУбыток"));	
	КонецЕсли;
	
	Если РасчетНалогаНаПрибыль Тогда 
		НадписьНалогНаПрибль = СтрШаблон(НСтр("ru = 'Сумма: %1'"), СуммаНалогНаПрибыль);
	КонецЕсли;
	
	Если РасчетНДС Тогда
		Сумма059 = 0;
		Сумма064 = 0;
		
		СтрокаТабличнойЧасти = НДС.Найти("059", "Строка");
		Если НЕ СтрокаТабличнойЧасти = Неопределено Тогда 
			Сумма059 = СтрокаТабличнойЧасти.Сумма;
		КонецЕсли;	
		СтрокаТабличнойЧасти = НДС.Найти("064", "Строка");
		Если НЕ СтрокаТабличнойЧасти = Неопределено Тогда 
			Сумма064 = СтрокаТабличнойЧасти.Сумма;		
		КонецЕсли;
		
		НадписьНДС	= СтрШаблон(НСтр("ru = 'НДС начисленный: %1. НДС, разрешенный к зачету: %2'"), 
										Сумма059, 
										Сумма064);	
	КонецЕсли;								
	
	Если РасчетНалогаНаИмущество Тогда
		НадписьНалогНаИмущество	= СтрШаблон(НСтр("ru = 'Недвижимость сумма: %1. Транспорт сумма: %2'"), 
										Недвижимость.Итог("СуммаНалога"), 
										Транспорт.Итог("СуммаНалога"));	
	КонецЕсли;
	
	Если ЗакрытьПарныеСчетаУчета Тогда
		НадписьЗакрытиеПарныхСчетов	= СтрШаблон(НСтр("ru = 'Контрольная сумма проводок: %1'"), ПарныеСчетаУчета.Итог("Сумма"));	
	КонецЕсли;
	
	Если ЗакрытьВременныеСчетаУчета Тогда
		НадписьЗакрытиеВременныхСчетов = СтрШаблон(НСтр("ru = 'Сумма: %1'"), 0);	
	КонецЕсли;
	
	Если НЕ РучнойВводКомментариев Тогда
		Комментарий = СтрШаблон(НСтр("ru = 'Закрытие месяца за %1 %2. Сформировано %3'"), 
					Формат(Дата,"ДФ=ММММ"), 
					Формат(Дата, "ДФ=гггг"),
					ТекущаяДатаСеанса()); 
	КонецЕсли;
	
	Если РасчетСписанияРасходовБудущихПериодов Тогда
		НадписьСписаниеРасходовБудущихПериодов	= СтрШаблон(НСтр("ru = 'Списание расходов будущих периодов: %1'"), РасходыБП.Итог("Сумма"));
	КонецЕсли;			
	
	Если РасчетСебестоимостиГотовойПродукции Тогда
		НадписьСебестоимостиГотовойПродукции = СтрШаблон(НСтр("ru = 'Сумма: %1'"), 
												РасходыНаПроизводство.Итог("СуммаПрямыхЗатратНаГП")
												+ РасходыНаПроизводство.Итог("СуммаНЗППредыдущегоПериода") 
												+ РасходыНаПроизводство.Итог("СуммаНЗП"));
	КонецЕсли;
	
	Если РасчетНераспределеннойПрибыли Тогда 
		СуммаНераспределеннойПрибыли = ВременныеСчетаУчета.Итог("СуммаКт") - ВременныеСчетаУчета.Итог("СуммаДт");
		
		Если СуммаНераспределеннойПрибыли > 0 Тогда 
			ТекстНадписи = НСтр("ru = 'Сумма прибыли: %1'");
		ИначеЕсли СуммаНераспределеннойПрибыли < 0 Тогда 
			ТекстНадписи = НСтр("ru = 'Сумма убытка: %1'");
			СуммаНераспределеннойПрибыли = СуммаНераспределеннойПрибыли * -1;
		Иначе 
			ТекстНадписи = НСтр("ru = 'Сумма: %1'");
		КонецЕсли;	
			
		НадписьНераспределеннаяПрибль = СтрШаблон(ТекстНадписи, Формат(СуммаНераспределеннойПрибыли, "ЧЦ=15; ЧГ=3,0"));
	КонецЕсли;
	
	Если РасчетЕдиногоНалога Тогда
		
		СуммаНаличные 	 = ЕдиныйНалог.Итог("СуммаНаличнаяЕдиныйНалог");
		СуммаБезналичные = ЕдиныйНалог.Итог("СуммаБезналичнаяЕдиныйНалог");
		
		НадписьЕдиныйНалог	= СтрШаблон(НСтр("ru = 'Сумма наличные: %1; Сумма безналичные: %2'"), СуммаНаличные, СуммаБезналичные);	
	КонецЕсли;	
КонецПроцедуры

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗакрытиеМесяца.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
		|ГДЕ
		|	НЕ ЗакрытиеМесяца.ПометкаУдаления
		|	И НЕ ЗакрытиеМесяца.Ссылка = &Ссылка
		|	И КОНЕЦПЕРИОДА(ЗакрытиеМесяца.Дата, МЕСЯЦ) = &ДатаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СведенияПоНалогуНаИмущество.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.СведенияПоНалогуНаИмущество КАК СведенияПоНалогуНаИмущество
		|ГДЕ
		|	СведенияПоНалогуНаИмущество.Организация = &Организация
		|	И СведенияПоНалогуНаИмущество.Год = КОНЕЦПЕРИОДА(&ДатаДокумента, ГОД)
		|	И СведенияПоНалогуНаИмущество.Регистратор <> &Ссылка
		|	И &РасчетНалогаНаИмущество";
	Запрос.УстановитьПараметр("Организация", Организация);		
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);		
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("РасчетНалогаНаИмущество", РасчетНалогаНаИмущество);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Дублирование документа.
	Если НЕ МассивРезультатов[0].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'Для указанного периода существует проведенный документ ""Закрытие месяца"".'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,, Отказ);	    
	КонецЕсли;
	
	// Налог на имущество.
	Если НЕ МассивРезультатов[1].Пустой() Тогда
		ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Для указанного периода существует проведенный документ ""Закрытие месяца"" с рассчитанным налогом на имущество. %1'"), 
				ВыборкаИзРезультатаЗапроса.Регистратор);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,, Отказ);	    
		КонецЦикла;
	КонецЕсли;		

КонецПроцедуры

#КонецОбласти

#КонецЕсли