#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Курс) И ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		УстановитьКурсВалютыДокумента();	
	КонецЕсли;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
									"Субконто1", "Субконто2", "Субконто3");
									
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПрочиеРасходы Цикл							 
		БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "ПрочиеРасходы", СтрокаТабличнойЧасти, ПоляОбъекта);
	КонецЦикла;
	
	// Установка реквизитов формы.		
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);

	БухгалтерскийУчетСервер.ОпределитьТипПоследнегоОткрытогоДокумента(Объект); 
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
									"Субконто1", "Субконто2", "Субконто3");
									
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПрочиеРасходы Цикл							 
		БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "ПрочиеРасходы", СтрокаТабличнойЧасти, ПоляОбъекта);
	КонецЦикла;	
	
КонецПроцедуры

// Установка параметров формы и видимости полей формы
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	
	Если Объект.ВалютаДенежныхСредств <> ВалютаРегламентированногоУчета Тогда	
		ОповеститьЧтоКурсывалютНеАктуальны();		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Процедура - обработчик события ПриИзменении поля ввода Организация
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Если Объект.Организация = Организация Тогда
		Возврат;
	КонецЕсли;
	Организация = Объект.Организация;
	
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);

	Объект.БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Объект.Организация, ВалютаРегламентированногоУчета);	
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	Объект.ВалютаДенежныхСредств 	= ПолучитьВалютуБанковскогоСчета(Объект.БанковскийСчет);	
	УстановитьКурсВалютыДокумента();
	ПересчетСуммыДокумента();	
	
	Если Объект.ВалютаДенежныхСредств <> ВалютаРегламентированногоУчета Тогда	
		ОповеститьЧтоКурсывалютНеАктуальны();		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрочиеРасходы

&НаКлиенте
Процедура ПрочиеРасходыПриИзменении(Элемент)
	Если Объект.ПрочиеРасходы.Количество() > 0 Тогда
		ПересчетСуммыДокумента();
	Иначе
		Объект.СуммаДокумента = 0;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСчетУчетаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	Принадлежит1100 = ПроверкаСчета11хх(СтрокаТабличнойЧасти.СчетУчета);
	Если Принадлежит1100 Тогда
		СтрокаТабличнойЧасти.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
		Сообщение = Новый СообщениеПользователю();
	    Сообщение.Текст = "В этом документе нельзя устанавливать счет учета по кассе! Для это используйте документы РКО или ПКО!";
	    Сообщение.Поле = "Объект.ПрочиеРасходы[" + (СтрокаТабличнойЧасти.НомерСтроки - 1) + "].СчетУчета";
	    Сообщение.УстановитьДанные(Объект);
	    Сообщение.Сообщить();				
	КонецЕсли;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
									"Субконто1", "Субконто2", "Субконто3");
									
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПрочиеРасходы Цикл							 
		БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "ПрочиеРасходы", СтрокаТабличнойЧасти, ПоляОбъекта);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСубконто1ПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПрочиеРасходы.ТекущиеДанные;
	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "ПрочиеРасходы", СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСубконто2ПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПрочиеРасходы.ТекущиеДанные;
	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "ПрочиеРасходы", СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСубконто3ПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПрочиеРасходы.ТекущиеДанные;
	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "ПрочиеРасходы", СтрокаТабличнойЧасти);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура вызывается при нажатии кнопки "ЗаполнитьПоОснованию" 
//
&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Документ будет полностью перезаполнен по ""Основанию""! Продолжить выполнение операции?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоДокументу(Объект.ДокументОснование);
    КонецЕсли;
КонецПроцедуры // ЗаполнитьПоОснованию()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ОбработкаЗаполнения(ДокОснование, );
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаСервере
Процедура УстановитьКурсВалютыДокумента()
	ВалютаКон = Объект.БанковскийСчет.ВалютаДенежныхСредств;
	
	КурсСтруктура = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаКон, Объект.Дата);
	Объект.Курс = КурсСтруктура.Курс;
	
КонецПроцедуры // УстановитьКурсВалютыДокумента()

&НаСервереБезКонтекста
Функция ПроверкаСчета11хх(СчетУчета)

	Возврат СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ДенежныеСредстваВКассе);
	
КонецФункции // 

&НаСервереБезКонтекста
Функция ПолучитьВалютуБанковскогоСчета(БанковскийСчет)

	Возврат	БанковскийСчет.ВалютаДенежныхСредств;

КонецФункции // ()

&НаКлиенте
Процедура ПересчетСуммыДокумента()
	
	Объект.СуммаДокумента = Объект.ПрочиеРасходы.Итог("СуммаПлатежа");
	
КонецПроцедуры // ПересчетСуммыДокумента()

&НаСервереБезКонтекста
Функция ПроверкаАктуальностиКурсаВалютНаСервере()
	Возврат РаботаСКурсамиВалют.КурсыАктуальны(); 
КонецФункции

&НаКлиенте
Процедура ОповеститьЧтоКурсывалютНеАктуальны()
	Если ПроверкаАктуальностиКурсаВалютНаСервере() И НЕ БылоОповещениеКурсыВалютУстарели  Тогда
		РаботаСКурсамиВалютКлиент.ОповеститьКурсыУстарели();
		БылоОповещениеКурсыВалютУстарели = Истина;
	КонецЕсли;
КонецПроцедуры // ОповеститьЧтоКурсывалютНеАктуальны()

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтаФорма);
	ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма);
КонецПроцедуры

#КонецОбласти
