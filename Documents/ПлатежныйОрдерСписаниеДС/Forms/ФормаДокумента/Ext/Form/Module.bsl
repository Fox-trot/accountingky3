#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	// Связь Субконто со счетом.
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПрочиеПлатежи Цикл							 
		БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетРасчетов", "ПрочиеПлатежи", СтрокаТабличнойЧасти, ПоляОбъекта);
	КонецЦикла;
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
									"Субконто1", "Субконто2", "Субконто3");
									
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПрочиеПлатежи Цикл							 
		БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетРасчетов", "ПрочиеПлатежи", СтрокаТабличнойЧасти, ПоляОбъекта);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		УстановитьКурсВалютыДокумента();
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер = "";
	Объект.БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Объект.Организация);
	ОбработатьИзменениеБанковскогоСчетаОрганизации();
	
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Банковский счет организации.
//
&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	ОбработатьИзменениеБанковскогоСчетаОрганизации();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрочиеПлатежи

// Процедура - обработчик события ПередНачаломДобавления таблицы ПрочиеПлатежи.
//
&НаКлиенте
Процедура ПрочиеПлатежиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		ИтогСуммаПлатежа = Объект.ПрочиеПлатежи.Итог("СуммаПлатежа") + Элемент.ТекущиеДанные.СуммаПлатежа;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеПлатежиПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПрочиеПлатежиСуммаПлатежа.
//
&НаКлиенте
Процедура ПрочиеПлатежиСуммаПлатежаПриИзменении(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПрочиеПлатежиСчетРасчетов.
//
&НаКлиенте
Процедура ПрочиеПлатежиСчетРасчетовПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ПрочиеПлатежи.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "Субконто1", "Субконто2", "Субконто3");
	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетРасчетов", "ПрочиеПлатежи", СтрокаТабличнойЧасти, ПоляОбъекта);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПрочиеПлатежиСубконто1.
//
&НаКлиенте
Процедура ПрочиеПлатежиСубконто1ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ПрочиеПлатежи.ТекущиеДанные;
	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетРасчетов", "ПрочиеПлатежи", СтрокаТабличнойЧасти);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПрочиеПлатежиСубконто2.
//
&НаКлиенте
Процедура ПрочиеПлатежиСубконто2ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ПрочиеПлатежи.ТекущиеДанные;
	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетРасчетов", "ПрочиеПлатежи", СтрокаТабличнойЧасти);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПрочиеПлатежиСубконто3.
//
&НаКлиенте
Процедура ПрочиеПлатежиСубконто3ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ПрочиеПлатежи.ТекущиеДанные;
	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетРасчетов", "ПрочиеПлатежи", СтрокаТабличнойЧасти);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура - устанавливает курс документа на дату.
//
&НаСервере
Процедура УстановитьКурсВалютыДокумента()
	Объект.Курс = 1;	
	Объект.Кратность = 1;	

	ВалютаДокумента = Объект.БанковскийСчет.ВалютаДенежныхСредств;
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
		Объект.Курс = КурсВалюты.Курс;
		Объект.Кратность = КурсВалюты.Кратность;
			
		Если НЕ ЗначениеЗаполнено(Объект.Курс) Тогда
			Объект.Курс = 1;	
			Объект.Кратность = 1;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // УстановитьКурсВалютыДокумента()

&НаКлиенте
Процедура ОбработатьИзменениеБанковскогоСчетаОрганизации()
	
	СтруктураДанные = ПолучитьДанныеБанковскийСчетПриИзменении(ДатаДокумента, Объект.БанковскийСчет);

	// Обработка изменения валюты.
	Объект.ВалютаДокумента = СтруктураДанные.ВалютаДокумента;
	Объект.Курс      = ?(СтруктураДанные.ВалютаДокументаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаДокументаКурсКратность.Курс);
	Объект.Кратность = ?(СтруктураДанные.ВалютаДокументаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаДокументаКурсКратность.Кратность);
КонецПроцедуры

// Получает набор данных с сервера для процедуры БанковскийСчетОрганизацииПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеБанковскийСчетПриИзменении(Период, БанковскийСчет)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаДокумента",
		БанковскийСчет.ВалютаДенежныхСредств);
		
	СтруктураДанные.Вставить(
		"ВалютаДокументаКурсКратность",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(БанковскийСчет.ВалютаДенежныхСредств, Период));

	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеБанковскийСчетПриИзменении()

// Процедура рассчитывает итоги для подвала формы.
//
&НаКлиенте
Процедура ОбновитьПодвалФормы()
	ИтогСуммаПлатежа = Объект.ПрочиеПлатежи.Итог("СуммаПлатежа");
КонецПроцедуры // ОбновитьПодвалФормы()

// См. РаботаСКурсамиВалют.ПолучитьКурсВалюты.
&НаСервереБезКонтекста
Функция ПолучитьКурсВалюты(Валюта, ДатаДокумента)
	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, ДатаДокумента);
КонецФункции // ПолучитьКурсВалюты()

#КонецОбласти
#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
