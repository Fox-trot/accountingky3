#Область ОбработчикиСлужебные

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ОбработкаЗаполнения(ДокОснование, );
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
КонецПроцедуры // ЗаполнитьПоДокументу()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
Процедура УстановитьКурсВалютыДокумента()
	ВалютаКон = Объект.БанковскийСчет.ВалютаДенежныхСредств;
	
	КурсСтруктура 					= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаКон, Объект.Дата);
	Объект.Курс 					= КурсСтруктура.Курс;
	
КонецПроцедуры // УстановитьКурсВалютыДокумента()

&НаСервереБезКонтекста
Функция ПроверкаСчета11хх(СчетУчета)

	Возврат СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ДенежныеСредстваВКассе);
	
КонецФункции // 

//Установка доступности субконто для существующих строк табличной части
&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "Субконто1", "Субконто2", "Субконто3");
	
	
	Для Каждого СТЧ Из Объект.ПрочиеРасходы Цикл
		
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СТЧ.СчетУчета, СТЧ, ПоляОбъекта, Истина);
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СТЧ, "Субконто" + "%Индекс%", "СчетУчета");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СТЧ, "Субконто" + "%Индекс%", "ПрочиеРасходыСубконто" + "%Индекс%", ПараметрыДокумента);	
		
	КонецЦикла;

	
КонецПроцедуры

// Процедура - Изменить параметры выбора полей субконто
//
// Параметры:
//  Форма	 - 	 - 
//  Суффикс	 - 	 - 
//  ИмяСчета - 	 - 
&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Форма.Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, "Субконто" + Суффикс + "%Индекс%", "ПрочиеРасходыСубконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета",   ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", ДанныеОбъекта.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	БухгалтерскийУчетКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВалютуБанковскогоСчета(БанковскийСчет)

	Возврат	БанковскийСчет.ВалютаДенежныхСредств;

КонецФункции // ()

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Курс) И ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		УстановитьКурсВалютыДокумента();	
	КонецЕсли;
	
	//Установить доступность субконто в табличной части ПрочиеРасходы
	УстановитьДоступностьСубконто();	
	
	// Установка реквизитов формы.		
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);

	БухгалтерскийУчетСервер.ОпределитьТипПоследнегоОткрытогоДокумента(Объект); 
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Установка параметров формы и видимости полей формы
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	
	Если Объект.ВалютаДенежныхСредств <> ВалютаРегламентированногоУчета Тогда	
		ОповеститьЧтоКурсывалютНеАктуальны();		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура вызывается при нажатии кнопки "ЗаполнитьПоОснованию" 
//
&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Документ будет полностью перезаполнен по ""Основанию""! Продолжить выполнение операции?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Процедура - обработчик события ПриИзменении поля ввода Организация
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Если Объект.Организация = Организация Тогда
		Возврат;
	КонецЕсли;
	Организация = Объект.Организация;
	
	Объект.Номер = "";
	БухгалтерскийУчетСервер.ПроверитьСуществованиеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);

	Объект.БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Объект.Организация, ВалютаРегламентированногоУчета);	
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	Объект.ВалютаДенежныхСредств 	= ПолучитьВалютуБанковскогоСчета(Объект.БанковскийСчет);	
	УстановитьКурсВалютыДокумента();
	ПересчетСуммыДокумента();	
	
	Если Объект.ВалютаДенежныхСредств <> ВалютаРегламентированногоУчета Тогда	
		ОповеститьЧтоКурсывалютНеАктуальны();		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТабличныхЧастей

&НаКлиенте
Процедура ПрочиеРасходыСчетУчетаПриИзменении(Элемент)
	
	СТЧ = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	Принадлежит1100 = ПроверкаСчета11хх(СТЧ.СчетУчета);
	Если Принадлежит1100 Тогда
		СТЧ.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
		Сообщение = Новый СообщениеПользователю();
	    Сообщение.Текст = "В этом документе нельзя устанавливать счет учета по кассе! Для это используйте документы РКО или ПКО!";
	    Сообщение.Поле = "Объект.ПрочиеРасходы[" + (СТЧ.НомерСтроки - 1) + "].СчетУчета";
	    Сообщение.УстановитьДанные(Объект);
	    Сообщение.Сообщить();				
	КонецЕсли;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "Субконто1", "Субконто2", "Субконто3");

	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СТЧ.СчетУчета, СТЧ, ПоляОбъекта, Истина);
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетУчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетСуммыДокумента()
	
	Объект.СуммаДокумента = Объект.ПрочиеРасходы.Итог("СуммаПлатежа");
	
КонецПроцедуры // ПересчетСуммыДокумента()

&НаКлиенте
Процедура ПрочиеРасходыПриИзменении(Элемент)
	Если Объект.ПрочиеРасходы.Количество() > 0 Тогда
		ПересчетСуммыДокумента();
	Иначе
		Объект.СуммаДокумента = 0;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСубконто1ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетУчета");
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.ПрочиеРасходы.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "Субконто", 1, "СчетУчета", СтрокаТабличнойЧасти, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.ПрочиеРасходы.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "Субконто", 2, "СчетУчета", СтрокаТабличнойЧасти, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСубконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.ПрочиеРасходы.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "Субконто", 3, "СчетУчета", СтрокаТабличнойЧасти, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоДокументу(Объект.ДокументОснование);
    КонецЕсли;
КонецПроцедуры // ЗаполнитьПоОснованию()

#КонецОбласти

&НаСервереБезКонтекста
Функция ПроверкаАктуальностиКурсаВалютНаСервере()
	Возврат РаботаСКурсамиВалют.КурсыАктуальны(); 
КонецФункции

&НаКлиенте
Процедура ОповеститьЧтоКурсывалютНеАктуальны()
	Если ПроверкаАктуальностиКурсаВалютНаСервере() И НЕ БылоОповещениеКурсыВалютУстарели  Тогда
		РаботаСКурсамиВалютКлиент.ОповеститьКурсыУстарели();
		БылоОповещениеКурсыВалютУстарели = Истина;
	КонецЕсли;
КонецПроцедуры // ОповеститьЧтоКурсывалютНеАктуальны()

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтаФорма);
	ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма);
КонецПроцедуры

#КонецОбласти
