#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыПроведенияДокумента

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаБланкиСФ(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.ВидОперации КАК ВидОперации,
		|	ВременнаяТаблицаЗначенийНомеровБланков.Серия КАК Серия,
		|	ВременнаяТаблицаЗначенийНомеровБланков.Номер КАК Номер,
		|	1 КАК Количество
		|ИЗ
		|	ВременнаяТаблицаЗначенийНомеровБланков КАК ВременнаяТаблицаЗначенийНомеровБланков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВременнаяТаблицаШапка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСФ.ПриходБланковСФ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.ВидОперации,
		|	ВременнаяТаблицаЗначенийНомеровБланков.Серия,
		|	ВременнаяТаблицаЗначенийНомеровБланков.Номер,
		|	1
		|ИЗ
		|	ВременнаяТаблицаЗначенийНомеровБланков КАК ВременнаяТаблицаЗначенийНомеровБланков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаШапка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСФ.ПриходБланковСФ)";		
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаБланкиСФ", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаБланкиСФ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаБланкиСчетовФактур(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаЗначенийНомеровБланков.Серия КАК Серия,
		|	ВременнаяТаблицаЗначенийНомеровБланков.Номер КАК Номер,
		|	ВременнаяТаблицаЗначенийНомеровБланков.Номер КАК ПредставлениеНомера
		|ИЗ
		|	ВременнаяТаблицаЗначенийНомеровБланков КАК ВременнаяТаблицаЗначенийНомеровБланков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)";		                      		
	ТаблицаБланкиСчетовФактур = Запрос.Выполнить().Выгрузить();
	
	// Добавление лидирующих нулей
	Для Каждого СтрокаТаблицыЗначений Из ТаблицаБланкиСчетовФактур Цикл
		СтрокаТаблицыЗначений.ПредставлениеНомера = Прав("0000000" + СтрокаТаблицыЗначений.Номер, 8);
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаБланкиСчетовФактур", ТаблицаБланкиСчетовФактур);
	
КонецПроцедуры // СформироватьТаблицаБланкиСчетовФактур()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	ТаблицаСпецификацияБланков = ПолучитьТаблицуЗначенийБланкиСИндивидуальнымиНомера(ДокументСсылка);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	БланкиСФ.Дата,
		|	БланкиСФ.Организация,
		|	БланкиСФ.ВидОперации
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.БланкиСФ КАК БланкиСФ
		|ГДЕ
		|	БланкиСФ.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСпецификацияБланков.Серия,
		|	ТаблицаСпецификацияБланков.Номер
		|ПОМЕСТИТЬ ВременнаяТаблицаЗначенийНомеровБланков
		|ИЗ
		|	&ТаблицаСпецификацияБланков КАК ТаблицаСпецификацияБланков";	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ТаблицаСпецификацияБланков", ТаблицаСпецификацияБланков);
	Запрос.Выполнить();
	
	СформироватьТаблицаБланкиСФ(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаБланкиСчетовФактур(ДокументСсылка, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицуЗначенийБланкиСИндивидуальнымиНомера(ДокументСсылка) Экспорт 

	ОписаниеТиповСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(6);
	ОписаниеТиповЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(8);
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Серия", ОписаниеТиповСтрока);
	ТаблицаЗначений.Колонки.Добавить("Номер", ОписаниеТиповЧисло);
	
	// Добавление номер от первого по последний для каждой строки  
	Для Каждого СтрокаТабличнойЧасти Из ДокументСсылка.Спецификация Цикл
		Для Счетчик = СтрокаТабличнойЧасти.ПервыйНомер По СтрокаТабличнойЧасти.ПоследнийНомер Цикл
			СтрокаТаблицыЗначений = ТаблицаЗначений.Добавить();
			СтрокаТаблицыЗначений.Серия = СтрокаТабличнойЧасти.Серия;
			СтрокаТаблицыЗначений.Номер = Счетчик;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаЗначений;

КонецФункции // ПолучитьТаблицуЗначенийБланкиСИндивидуальнымиНомера()

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
//
Функция ПолучитьТекстЗапросаЗаявление()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	БланкиСФ.Ссылка,
	|	БланкиСФ.Номер КАК НомерДокумента,
	|	БланкиСФ.Дата КАК ДатаДокумента,
	|	БланкиСФ.Организация
	|ИЗ
	|	Документ.БланкиСФ КАК БланкиСФ
	|ГДЕ
	|	БланкиСФ.Ссылка В(&МассивОбъектов)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция формирует табличный документ с печатной формой Заявления
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьЗаявление(МассивОбъектов, ОбъектыПечати)                                       
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати 	= "БланкиСФ_Заявление";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.БланкиСФ.ПФ_MXL_Заявление");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ПолучитьТекстЗапросаЗаявление();
	РезультатЗапроса = Запрос.Выполнить();
	
	Шапка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий()  Цикл

		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
				
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		СведенияОбОрганизации = БухгалтерскийУчетСервер.ПолучитьСведенияОбОрганизации(Шапка.Организация, Шапка.ДатаДокумента);
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры,СведенияОбОрганизации);
		
		ДанныеПечати = Новый Структура();
		
		//ИНН
		ИНН = СведенияОбОрганизации.ИНН;
		Если ЗначениеЗаполнено(ИНН) Тогда 
			ДанныеПечати.Вставить("ИНН1", Сред(ИНН,1,1));	
			ДанныеПечати.Вставить("ИНН2", Сред(ИНН,2,1));
			ДанныеПечати.Вставить("ИНН3", Сред(ИНН,3,1));
			ДанныеПечати.Вставить("ИНН4", Сред(ИНН,4,1));
			ДанныеПечати.Вставить("ИНН5", Сред(ИНН,5,1));
			ДанныеПечати.Вставить("ИНН6", Сред(ИНН,6,1));
			ДанныеПечати.Вставить("ИНН7", Сред(ИНН,7,1));
			ДанныеПечати.Вставить("ИНН8", Сред(ИНН,8,1));
			ДанныеПечати.Вставить("ИНН9", Сред(ИНН,9,1));
			ДанныеПечати.Вставить("ИНН10", Сред(ИНН,10,1));
			ДанныеПечати.Вставить("ИНН11", Сред(ИНН,11,1));
			ДанныеПечати.Вставить("ИНН12", Сред(ИНН,12,1));
			ДанныеПечати.Вставить("ИНН13", Сред(ИНН,13,1));
			ДанныеПечати.Вставить("ИНН14", Сред(ИНН,14,1));
		КонецЕсли;
		
		ГНСКод = СведенияОбОрганизации.ГНСКод;
		Если ЗначениеЗаполнено(ГНСКод) Тогда 
			ДанныеПечати.Вставить("КОД1", Сред(ГНСКод, 1, 1));
			ДанныеПечати.Вставить("КОД2", Сред(ГНСКод, 2, 1));
			ДанныеПечати.Вставить("КОД3", Сред(ГНСКод, 3, 1));		
		КонецЕсли;
		
		ДатаН = НачалоМесяца(ДобавитьМесяц(Шапка.ДатаДокумента,-1)); 
		ДанныеПечати.Вставить("ДН1", Сред(ДатаН,1,1));
		ДанныеПечати.Вставить("ДН2", Сред(ДатаН,2,1));
		ДанныеПечати.Вставить("ДН3", Сред(ДатаН,4,1));
		ДанныеПечати.Вставить("ДН4", Сред(ДатаН,5,1));
		ДанныеПечати.Вставить("ДН5", Сред(ДатаН,7,1));
		ДанныеПечати.Вставить("ДН6", Сред(ДатаН,8,1));
		ДанныеПечати.Вставить("ДН7", Сред(ДатаН,9,1));
		ДанныеПечати.Вставить("ДН8", Сред(ДатаН,10,1));
		
		ДатаК = КонецМесяца(ДобавитьМесяц(Шапка.ДатаДокумента,-1));
		ДанныеПечати.Вставить("ДК1", Сред(ДатаК,1,1));
		ДанныеПечати.Вставить("ДК2", Сред(ДатаК,2,1));
		ДанныеПечати.Вставить("ДК3", Сред(ДатаК,4,1));
		ДанныеПечати.Вставить("ДК4", Сред(ДатаК,5,1));
		ДанныеПечати.Вставить("ДК5", Сред(ДатаК,7,1));
		ДанныеПечати.Вставить("ДК6", Сред(ДатаК,8,1));
		ДанныеПечати.Вставить("ДК7", Сред(ДатаК,9,1));
		ДанныеПечати.Вставить("ДК8", Сред(ДатаК,10,1));
		
		СтруктураРуководители = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.ДатаДокумента);
		ДанныеПечати.Вставить("РуководительФИО", СтруктураРуководители.Руководитель);		
				
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);		
		ТабличныйДокумент.Вывести(ОбластьМакета);		
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
		
	// Добавление дополнительных параметров
	БухгалтерскиеОтчетыКлиентСервер.ЗаполнитьДополнительныеПараметрыПечати(ТабличныйДокумент);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	// Проверяем, нужно ли для макета ПКО формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Заявление") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"Заявление", НСтр("ru = 'Заявление'"), ПечатьЗаявление(МассивОбъектов, ОбъектыПечати),,
			"Документ.БланкиСФ.ПФ_MXL_Заявление");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Заявление";
	КомандаПечати.Представление = НСтр("ru = 'Заявление'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 1;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли