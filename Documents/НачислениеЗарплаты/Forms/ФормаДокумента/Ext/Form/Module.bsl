#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Подразделение = Объект.Подразделение;
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрокой");
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрокой");
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПодборСотрудникаПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		ПолучитьРезультатПодбораИзХранилища(АдресЗапасовВХранилище, "Начисления");
	ИначеЕсли ИмяСобытия = "ВыборНачисления" Тогда
	 	ЗаполнитьПоВидуНачисленияЗавершение(Параметр.ВидНачисления, Параметр.СуммаНачисления);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Подразделение.
//
&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	// Значение реквизита не изменилось
	Если Объект.Подразделение = Подразделение Тогда 
		Возврат;
	КонецЕсли;	

	Если Объект.Начисления.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросОчиститьТабличнуюЧастьНачисления", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет очищена. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе 
		Подразделение = Объект.Подразделение;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РазовоеНачисление.
//
&НаКлиенте
Процедура РазовоеНачислениеПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода НачисленияФизЛицо.
//
&НаКлиенте
Процедура НачисленияФизЛицоПриИзменении(Элемент)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.Начисления.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДополнитьСтрокиНаСервере(СтрокаТабличнойЧасти.ФизЛицо);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборСотрудников(Команда)
	СотрудникиКлиент.ОткрытьПодбор(ЭтаФорма, "Начисления");  
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	Если Объект.Начисления.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьТабличнуюЧасть", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет заполнена. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		ЗаполнитьТабличнуюЧастьНаСервере();
		ЗаполнитьТабличнуюЧастьФрагментЗавершение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	РассчитатьТабличнуюЧастьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоВидуНачисления(Команда)
	
	Отказ = Ложь;
	
	Если Объект.Начисления.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьПоВидуНачисления", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет заполнена. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);     
	Иначе
		ЗаполнитьПоВидуНачисленияФрагнмент();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьТабличнуюЧасть(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Начисления.Очистить();
		ЗаполнитьТабличнуюЧастьНаСервере();
		ЗаполнитьТабличнуюЧастьФрагментЗавершение();
	КонецЕсли; 
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьФрагментЗавершение()
	Если Объект.Начисления.Количество() > 0 Тогда 
		ТекстОповещения = НСтр("ru = 'Документ заполнен'");
		ПоказатьОповещениеПользователя(ТекстОповещения,,, БиблиотекаКартинок.Информация32);
	Иначе 
		ТекстСообщения = НСтр("ru = 'Нет данных для заполнения. Проверьте кадровые приказы.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);		
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ОтветНаВопросРассчитатьТабличнуюЧасть(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЕстьОшибки = Ложь;
		РассчитатьТабличнуюЧастьНаСервере(ЕстьОшибки);
		
		ТекстОповещения = НСтр("ru = 'Документ заполнен'");
		ТекстПояснения = ?(ЕстьОшибки, 
			НСтр("ru = 'При расчете возникли ошибки'"), 
			НСтр("ru = 'При расчете ошибок не обнаружено'"));
		ПоказатьОповещениеПользователя(ТекстОповещения, , ТекстПояснения, БиблиотекаКартинок.Информация32);
	КонецЕсли; 
КонецПроцедуры	

&НаКлиенте 
Процедура ОтветНаВопросЗаполнитьПоВидуНачисления(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоВидуНачисленияФрагнмент();
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьПоВидуНачисленияФрагнмент()
	ОткрытьФорму("Документ.НачислениеЗарплаты.Форма.ФормаВыбораВидаНачислений",,ЭтаФорма);
КонецПроцедуры // ЗаполнитьПоВидуНачисленияФрагнмент()

&НаКлиенте
Процедура ОтветНаВопросОчиститьТабличнуюЧастьНачисления(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Подразделение = Объект.Подразделение;
		Объект.Начисления.Очистить();
	Иначе
		// Отмена изменения - возврат прежних значений
		Объект.Подразделение = Подразделение;
	КонецЕсли; 
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()
		
	ЭтоРазовоеНачисление = Объект.РазовоеНачисление;
	Элементы.НачисленияПодразделение.Видимость 	= Не ЭтоРазовоеНачисление;
	Элементы.НачисленияДолжность.Видимость 		= Не ЭтоРазовоеНачисление;
	Элементы.НачисленияГрафикРаботы.Видимость 	= Не ЭтоРазовоеНачисление;
	Элементы.НачисленияГруппаПериод.Видимость 	= Не ЭтоРазовоеНачисление;
	Элементы.НачисленияГруппаНорма.Видимость 	= Не ЭтоРазовоеНачисление;
	Элементы.НачисленияГруппаФакт.Видимость 	= Не ЭтоРазовоеНачисление;
	Элементы.НачисленияЗаполнить.Видимость 		= Не ЭтоРазовоеНачисление;
	Элементы.НачисленияЗаполнитьПоВидуНачисления.Видимость = ЭтоРазовоеНачисление;
	
	Если Не ЭтоРазовоеНачисление Тогда 
		Элементы.НачисленияГруппаРазмерРезультат.Группировка = ГруппировкаКолонок.Вертикальная;
		Элементы.ГруппаВидРасчетаОтражение.Группировка = ГруппировкаКолонок.Вертикальная;
	Иначе 
		Элементы.НачисленияГруппаРазмерРезультат.Группировка = ГруппировкаКолонок.Горизонтальная;
		Элементы.ГруппаВидРасчетаОтражение.Группировка = ГруппировкаКолонок.Горизонтальная;
	КонецЕсли;
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Функция возвращает ответ пользователя о возможности записи/отмене проведения документа перед рассчетом
//
// Параметры:
//  Действие - действие, при котором выполняется проверка
// Возвращаемое значение:
//   Булево - 
//
&НаКлиенте
Функция ЗаписатьДокументОтменивПроведение()
	Если Объект.Проведен Тогда
		ЗаписатьНаСервере(РежимЗаписиДокумента.ОтменаПроведения);		
	ИначеЕсли Модифицированность 
		Или ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Дата = ДатаДокумента;
		ЗаписатьНаСервере(РежимЗаписиДокумента.Запись);		
	КонецЕсли;	
	
	Возврат Истина;
КонецФункции // ЗаписатьДокументОтменивПроведение()

// Процедура - Записать на сервере
//
// Параметры:
//  Режим	 - 	 - 
//
&НаСервере
Процедура ЗаписатьНаСервере(Режим)
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Записать(Режим);
	ЗначениеВРеквизитФормы(Документ, "Объект");
КонецПроцедуры // ЗаписатьНаСервере()

// Процедура - Заполнить табличную часть на сервере
//
&НаСервере
Процедура ЗаполнитьТабличнуюЧастьНаСервере()
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьТабличнуюЧасть();
	ЗначениеВРеквизитФормы(Документ, "Объект");
КонецПроцедуры // ЗаполнитьТабличнуюЧастьНаСервере()

// Процедура - Рассчитать табличную часть на клиенте
//
// Параметры:
//  РасчетПоКоманде	 - Булево - Признак расчета по команде. Будет задан вопрос о подтверждении.
//
&НаКлиенте
Процедура РассчитатьТабличнуюЧастьНаКлиенте()
	Отказ = Ложь;
	
	Если Объект.Начисления.Количество() = 0  Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть ""Начисления""! Расчет документа отменен.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Начисления",,Отказ);		
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Начисления Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ФизЛицо) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнен Сотрудник в строке №%1! Расчет документа отменен.'"), СтрокаТабличнойЧасти.НомерСтроки);
			ПолеСообщения = СтрШаблон("Объект.Начисления[%1].ФизЛицо", СтрокаТабличнойЧасти.НомерСтроки-1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,ПолеСообщения,,Отказ);		
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидРасчета) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнен Вид начисления в строке №%1! Расчет документа отменен.'"), СтрокаТабличнойЧасти.НомерСтроки);
			ПолеСообщения = СтрШаблон("Объект.Начисления[%1].ВидРасчета", СтрокаТабличнойЧасти.НомерСтроки-1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,ПолеСообщения,,Отказ);		
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаНачала) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена Дата начала в строке №%1! Расчет документа отменен.'"), СтрокаТабличнойЧасти.НомерСтроки);
			ПолеСообщения = СтрШаблон("Объект.Начисления[%1].ДатаНачала", СтрокаТабличнойЧасти.НомерСтроки-1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,ПолеСообщения,,Отказ);		
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончания) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена Дата окончания в строке №%1! Расчет документа отменен.'"), СтрокаТабличнойЧасти.НомерСтроки);
			ПолеСообщения = СтрШаблон("Объект.Начисления[%1].ДатаОкончания", СтрокаТабличнойЧасти.НомерСтроки-1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,ПолеСообщения,,Отказ);		
		КонецЕсли;
		
		//Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Размер) Тогда
		//	ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнен Размер в строке №%1! Расчет документа отменен.'"), СтрокаТабличнойЧасти.НомерСтроки);
		//	ПолеСообщения = СтрШаблон("Объект.Начисления[%1].Размер", СтрокаТабличнойЧасти.НомерСтроки-1);
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,ПолеСообщения,,Отказ);		
		//КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ГрафикРаботы) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнен График работы в строке №%1! Расчет документа отменен.'"), СтрокаТабличнойЧасти.НомерСтроки);
			ПолеСообщения = СтрШаблон("Объект.Начисления[%1].ГрафикРаботы", СтрокаТабличнойЧасти.НомерСтроки-1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,ПолеСообщения,,Отказ);		
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда 
		Возврат
	КонецЕсли;	
	
	Если НЕ ЗаписатьДокументОтменивПроведение() Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Объект.Начисления.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросРассчитатьТабличнуюЧасть", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет пересчитана! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		ЕстьОшибки = Ложь;
		РассчитатьТабличнуюЧастьНаСервере(ЕстьОшибки);
		
		ТекстОповещения = НСтр("ru = 'Документ заполнен'");
		ТекстПояснения = ?(ЕстьОшибки, 
			НСтр("ru = 'При расчете возникли ошибки'"), 
			НСтр("ru = 'При расчете ошибок не обнаружено'"));
		ПоказатьОповещениеПользователя(ТекстОповещения, , ТекстПояснения, БиблиотекаКартинок.Информация32);
	КонецЕсли;
КонецПроцедуры

// Процедура - Рассчитать табличную часть на сервере
//
&НаСервере
Процедура РассчитатьТабличнуюЧастьНаСервере(ЕстьОшибки)
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.РассчитатьТабличнуюЧасть(ЕстьОшибки);
	ЗначениеВРеквизитФормы(Документ, "Объект");
КонецПроцедуры

// Процедура получает результат подбора из временного хранилища
//
&НаСервере
Процедура ПолучитьРезультатПодбораИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	МассивФизЛиц = Новый Массив;
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("ФизЛицо", СтрокаЗагрузки.ФизЛицо));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
		МассивФизЛиц.Добавить(СтрокаТабличнойЧасти.ФизЛицо);
	КонецЦикла;
	
	ДополнитьСтрокиНаСервере(МассивФизЛиц);
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// Процедура заполняет строки
//
// Параметры:
//  Сотрудники  - Массив - массив физ.лиц, по которым нужно заполнить строки
//
&НаСервере
Процедура ДополнитьСтрокиНаСервере(Сотрудники)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиСрезПоследних.ФизЛицо,
		|	СотрудникиСрезПоследних.Подразделение,
		|	СотрудникиСрезПоследних.Должность,
		|	&НачалоПериода КАК ДатаНачала,
		|	&КонецПериода КАК ДатаОкончания,
		|	СотрудникиСрезПоследних.ГрафикРаботы
		|ПОМЕСТИТЬ ВременнаяТаблицаСотрудники
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПоследних(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И ФизЛицо В (&Сотрудники)) КАК СотрудникиСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.ГрафикРаботы,
		|	СУММА(ДанныеПроизводственногоКалендаря.ЗначениеДней) КАК ЗначениеДней,
		|	СУММА(ДанныеПроизводственногоКалендаря.ЗначениеЧасов) КАК ЗначениеЧасов
		|ПОМЕСТИТЬ ВременнаяТаблицаГрафики
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.Год = &Год
		|	И ДанныеПроизводственногоКалендаря.ГрафикРаботы В
		|			(ВЫБРАТЬ
		|				ВременнаяТаблицаСотрудники.ГрафикРаботы
		|			ИЗ
		|				ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники)
		|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеПроизводственногоКалендаря.ГрафикРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСотрудники.ФизЛицо,
		|	ВременнаяТаблицаСотрудники.Подразделение,
		|	ВременнаяТаблицаСотрудники.Должность,
		|	ВременнаяТаблицаСотрудники.ДатаНачала,
		|	ВременнаяТаблицаСотрудники.ДатаОкончания,
		|	ВременнаяТаблицаСотрудники.ГрафикРаботы,
		|	ВременнаяТаблицаГрафики.ЗначениеДней,
		|	ВременнаяТаблицаГрафики.ЗначениеЧасов КАК НормаЧасов
		|ИЗ
		|	ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаГрафики КАК ВременнаяТаблицаГрафики
		|		ПО ВременнаяТаблицаСотрудники.ГрафикРаботы = ВременнаяТаблицаГрафики.ГрафикРаботы";
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Год", Год(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("НачалоПериода", Объект.ПериодРегистрации);
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СтруктураОтбора = ПроведениеРасчетовПоЗарплатеСервер.СтруктураОтбораДанныхСчетовУчетаПоЗП();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокиТабличнойЧасти = Объект.Начисления.НайтиСтроки(Новый Структура("ФизЛицо", ВыборкаДетальныеЗаписи.ФизЛицо));
		
		Для Каждого СтрокаТабличнойЧасти Из СтрокиТабличнойЧасти Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи);			
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТабличнойЧасти);
			СтруктураОтбора.ВидРасчетаНачисления = СтрокаТабличнойЧасти.ВидРасчета;
	
			ДанныеСчетаУчетаЗП = ПроведениеРасчетовПоЗарплатеСервер.ДанныеСчетаУчетаЗП(СтруктураОтбора);
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСчетаУчетаЗП);		
		КонецЦикла;		
	КонецЦикла;    
КонецПроцедуры // ДополнитьСтрокиНаСервере()

// Процедура - Заполнить табличную часть на сервере
//
&НаСервере
Процедура ЗаполнитьТабличнуюЧастьПоВидуНачисленияНаСервере(СтруктураДанные)
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьТабличнуюЧастьПоВидуНачисления(СтруктураДанные);
	ЗначениеВРеквизитФормы(Документ, "Объект");
КонецПроцедуры // ЗаполнитьТабличнуюЧастьНаСервере()

// Процедура заполняет табличную часть по виду начисления
//
&НаКлиенте
Процедура ЗаполнитьПоВидуНачисленияЗавершение(ВидРасчета, Размер)
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("ВидРасчета", ВидРасчета);
	СтруктураДанные.Вставить("Размер", Размер);
	СтруктураДанные.Вставить("Размер", Размер);
	ЗаполнитьТабличнуюЧастьПоВидуНачисленияНаСервере(СтруктураДанные);
КонецПроцедуры

#КонецОбласти

#Область РедактированиеМесяцаСтрокой

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрокой");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПериодРегистрации.
//
&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

