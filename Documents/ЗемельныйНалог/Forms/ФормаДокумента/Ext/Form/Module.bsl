#Область ОбработчикиСлужебные

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

#КонецОбласти

#Область УправлениеВнешнимВидом

&НаСервере
// Процедура устанавливает видимость и доступность элементов.
//
Процедура УстановитьВидимостьДоступностьЭлементов()  	
			
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()    

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать 
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
КонецПроцедуры // ПриЧтенииНаСервере()

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетСервер.ПроверитьСуществованиеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры  

&НаСервере
Процедура ЗаполнитьНаСервере()
	Объект.Налоги.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОбИмуществе.ОсновноеСредство КАК ОсновноеСредство,
	|	СведенияОбИмуществе.МатериалСтен КАК МатериалСтен,
	|	СведенияОбИмуществе.ЖилаяПлощадь + СведенияОбИмуществе.НежилаяПлощадь КАК ОбщаяПлощадь,
	|	0 КАК Кр,
	|	0 КАК Кз,
	|	0 КАК Ко,
	|	ГОД(&ТекущаяДата) - ГОД(СведенияОбИмуществе.ДатаВводаВЭксплуатацию) КАК СрокЭксплуатации,
	|	ОценочнаяСтоимость.Стоимость КАК ОценочнаяСтоимостьКвМетра,
	|	ОценочнаяСтоимость.Регистратор.Организация КАК Организация,
	|	СтавкиНалогаНаИмущество.Ставка КАК СтавкаНалога,
	|	СведенияОбИмуществе.РегиональныйКоэффициент КАК КлассКр,
	|	СведенияОбИмуществе.ЗональныйКоэффициент КАК КлассКз,
	|	СведенияОбИмуществе.ОтраслевойКоэффициент КАК КлассКо
	|ИЗ
	|	РегистрСведений.СведенияОбИмуществе.СрезПоследних(&ТекущаяДата, ОсновноеСредство В (&СписокОС)) КАК СведенияОбИмуществе
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОценочнаяСтоимостьПоВидамМатериалов.СрезПоследних(&ТекущаяДата, Регистратор.Организация = &Организация) КАК ОценочнаяСтоимость
	|		ПО СведенияОбИмуществе.МатериалСтен = ОценочнаяСтоимость.МатериалСтен
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНалогаНаИмущество.СрезПоследних(&ТекущаяДата, ) КАК СтавкиНалогаНаИмущество
	|		ПО СведенияОбИмуществе.ГруппаИмущества = СтавкиНалогаНаИмущество.ГруппаНалогаНаИмущество
	|ГДЕ
	|	(ОценочнаяСтоимость.ОтЛет <= ГОД(&ТекущаяДата) - ГОД(СведенияОбИмуществе.ДатаВводаВЭксплуатацию)
	|			ИЛИ ОценочнаяСтоимость.ОтЛет = 0)
	|	И (ОценочнаяСтоимость.ДоЛет > ГОД(&ТекущаяДата) - ГОД(СведенияОбИмуществе.ДатаВводаВЭксплуатацию)
	|			ИЛИ ОценочнаяСтоимость.ДоЛет = 0)";
	
	СписокОС = Новый Массив;
	Выборка = Объект.Налоги.Выгрузить();
		
	Для Инд = 0 По Выборка.Количество() - 1 Цикл
		СписокОС.Добавить(Выборка[Инд].ОсновноеСредство);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ТекущаяДата", Объект.Дата);
	Если (Выборка.Количество() = 0) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОсновноеСредство В (&СписокОС)", "");
	Иначе
		Запрос.УстановитьПараметр("СписокОС", СписокОС);
	КонецЕсли;
	
	Объект.Налоги.Загрузить(Запрос.Выполнить().Выгрузить());
	
	
	Для Каждого СТЧ Из Объект.Налоги Цикл 
		Если СТЧ.СрокЭксплуатации >= 30 Тогда
			СТЧ.СрокЭксплуатацииСтрока = "Более 30 лет";
		Иначе 
			СТЧ.СрокЭксплуатацииСтрока = "До 30 лет";
		КонецЕсли;
		
		ОтборКр = Новый Структура("Классификация", СТЧ.КлассКр);
		СТЧ.Кр  = РегистрыСведений.КоэфицентыНалогаНаИмущество.ПолучитьПоследнее(Объект.Дата, ОтборКр).Коэфициент;
		
		ОтборКз = Новый Структура("Классификация", СТЧ.КлассКз);
		СТЧ.Кз = РегистрыСведений.КоэфицентыНалогаНаИмущество.ПолучитьПоследнее(Объект.Дата, ОтборКз).Коэфициент;
		
		ОтборКо = Новый Структура("Классификация", СТЧ.КлассКо);
		СТЧ.Ко = РегистрыСведений.КоэфицентыНалогаНаИмущество.ПолучитьПоследнее(Объект.Дата, ОтборКо).Коэфициент;
		
		СТЧ.НалогооблагаемаяСтоимостьОбъекта = Окр(СТЧ.ОбщаяПлощадь * СТЧ.ОценочнаяСтоимостьКвМетра
		* СТЧ.Кз * СТЧ.Кр * СТЧ.Ко,2); 		
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.Налоги.Количество() > 0 Тогда
		Вопрос = "Перед загрузкой табличная часть будет очищена! Продолжить?";
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект), Вопрос, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, ); 
	Иначе
	    ЗаполнитьНаСервере();
	КонецЕсли;   
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ  = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
	КонецЕсли;   	
	
	ЗаполнитьНаСервере();

	
КонецПроцедуры


&НаСервере
Процедура РасчитатьНаСервере()
	Для Каждого Стр Из Объект.Налоги Цикл 
		Если Стр.СуммаЗемельногоНалогаПодОбъектомИмущества = 0 Тогда
			Прервать;
		Иначе
			Стр.СуммаНалога = Стр.НалогооблагаемаяСтоимостьОбъекта*Стр.СтавкаНалога/100;
			Стр.СуммаНалогаКУплате = Стр.СуммаНалога - Стр.СуммаЗемельногоНалогаПодОбъектомИмущества;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Расчитать(Команда)
	РасчитатьНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти  
