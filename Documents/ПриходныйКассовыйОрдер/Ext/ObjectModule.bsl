#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

Процедура  ПересчетСуммыДокумента()
	
	ВидОперации = Операция.ВидОперации;
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтПокупателя") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РасчетыПоЗаймам") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтНесколькихКонтрагентов") Тогда			
			
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПодотчетника") Тогда		
		СуммаДокумента = ВыдачаВПодотчет.Итог("СуммаПлатежа");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПрочийПриход") Тогда		
		СуммаДокумента = ПрочиеРасходы.Итог("СуммаПлатежа");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеНаличныхВБанке") Тогда		
		//Сумма из шапки		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтСотрудника") Тогда		
		СуммаДокумента = ВозвратЗаработнойПлаты.Итог("СуммаПлатежа");
		
	КонецЕсли;

КонецПроцедуры // ПересчетСуммыДокумента()

Процедура СоставитьСписокФизЛиц()
	СписокФизЛиц 	= "";
	Первый			= Истина;
	ВидОперации 	= Операция.ВидОперации;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтСотрудника") Тогда
		Для каждого СТЧ Из ВозвратЗаработнойПлаты Цикл
			Если ЗначениеЗаполнено(СТЧ.ФизЛицо) Тогда
				СписокФизЛиц 	= СписокФизЛиц + ?(Первый, СТЧ.ФизЛицо, " ," + СТЧ.ФизЛицо);
				Первый 			= Ложь;				
			КонецЕсли;
		КонецЦикла; 			
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПодотчетника") Тогда
		СписокФизЛиц = "" + ФизЛицо;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства)

	ДополнительныеСвойства.ДляПроведения.Вставить("КросскурсНБКР", Строка(КросскурсНБКР));

КонецПроцедуры

Функция СписокТоваровСКоличеством(Ссылка)
	СтрокаОснование = "";
	Первый = Истина;
	Для каждого СтрокаТабличнойЧасти Из Ссылка.Товары  Цикл
		СтрокаОснование	= СтрокаОснование + ?(Первый, "", ", ") + СтрокаТабличнойЧасти.Номенклатура + " - " + СтрокаТабличнойЧасти.Количество + СтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмерения;
		Первый = Ложь;
	КонецЦикла;
	Для каждого СтрокаТабличнойЧасти Из Ссылка.Услуги Цикл
		СтрокаОснование	= СтрокаОснование + ?(Первый, "", ", ") + СтрокаТабличнойЧасти.Номенклатура + " - " + СтрокаТабличнойЧасти.Количество + СтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмерения;
		Первый = Ложь;
	КонецЦикла;		
	Возврат СтрокаОснование;
	
КонецФункции // СписокТоваровСКоличеством()

Процедура ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти.ПрямойКурс Тогда
		СтрокаТабличнойЧасти.СуммаВзаиморасчетов 	= Окр(СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.КурсВзаиморасчетов, 2);
	Иначе
		СтрокаТабличнойЧасти.СуммаВзаиморасчетов 	= Окр(СтрокаТабличнойЧасти.СуммаПлатежа * СтрокаТабличнойЧасти.КурсВзаиморасчетов, 2);
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьКурсВзаиморасчетов(Дата, СтрокаТабличнойЧасти)

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента) Тогда
		СложныйКурс = 0;
		Если ЗначениеЗаполнено(Организация.ОсновнаяКасса) Тогда
			ДанныеКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Организация.ОсновнаяКасса.ВалютаДенежныхСредств, Дата);
			КурсКассы = ДанныеКурса.Курс;
		Иначе
			КурсКассы = 1;
		КонецЕсли;
				
		Если ЗначениеЗаполнено(ВалютаДоговора) Тогда
			КурсСтруктура 		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоговора, Дата);
			КурсДоговора	= КурсСтруктура.Курс;
		    Если ЗначениеЗаполнено(КурсДоговора) Тогда
				СложныйКурс		= Окр(КурсКассы / КурсДоговора, 4);
				ПрямойКурс      = Ложь;
				Если СложныйКурс < 1 Тогда
					СложныйКурс		= Окр(КурсДоговора / КурсКассы, 4);
					ПрямойКурс      = Истина;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;

		СтрокаТабличнойЧасти.КурсВзаиморасчетов = СложныйКурс;
		СтрокаТабличнойЧасти.ПрямойКурс 		= ПрямойКурс;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьКурсВзаиморасчетов()

#КонецОбласти

#Область ПроцедурыЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоДоверенности(ДанныеЗаполнения) Экспорт
	ЭтотОбъект.ДокументОснование = ДанныеЗаполнения;
	
	Контрагент = ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	ВалютаДокумента = ДанныеЗаполнения.ДоговорКонтрагента.ВалютаРасчетов;
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоРеализацииТоваровУслуг(ДанныеЗаполнения) Экспорт
	ЭтотОбъект.ДокументОснование = ДанныеЗаполнения;
	
	Основание = СписокТоваровСКоличеством(ДанныеЗаполнения);

	Контрагент 	= ДанныеЗаполнения.Контрагент;
	Приложение = ?(ЗначениеЗаполнено(ДанныеЗаполнения.СерияБланкаСФ), "Серия СФ " + ДанныеЗаполнения.СерияБланкаСФ + " № " + ДанныеЗаполнения.НомерБланкаСФ + " от " + Формат(ДанныеЗаполнения.ДатаСФ, "ДЛФ=D") + "г.", "");
	ПринятоОт = ДанныеЗаполнения.Контрагент.Наименование;
	
	РасшифровкаПлатежа.Очистить();
	
	НоваяСтрока = РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
	ВалютаДоговора = ДанныеЗаполнения.ДоговорКонтрагента.ВалютаРасчетов;
	УстановитьКурсВзаиморасчетов(ТекущаяДата(), НоваяСтрока);
	НоваяСтрока.СуммаПлатежа = ДанныеЗаполнения.Товары.Итог("Итого") + ДанныеЗаполнения.Услуги.Итог("Итого");
	НоваяСтрока.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Денежные поступления от покупателей");
	
	СчетаУчета = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, НоваяСтрока.ДоговорКонтрагента);
	НоваяСтрока.СчетУчета = СчетаУчета.СчетРасчетовПокупателя;
	
	ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(НоваяСтрока)
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоСчетуНаОплатуПокупателю(ДанныеЗаполнения) Экспорт
	ЭтотОбъект.ДокументОснование = ДанныеЗаполнения;
	
	Контрагент 	= ДанныеЗаполнения.Контрагент;
	Организация = ДанныеЗаполнения.Организация;
	БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Организация);
	КурсКассы 	= ДанныеЗаполнения.Курс;
	ВалютаДоговора = ДанныеЗаполнения.ВалютаДокумента;
	
	РасшифровкаПлатежа.Очистить();
	
	НоваяСтрока = РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
	УстановитьКурсВзаиморасчетов(ТекущаяДата(), НоваяСтрока);
	НоваяСтрока.СуммаПлатежа = ДанныеЗаполнения.Товары.Итог("Итого") + ДанныеЗаполнения.Услуги.Итог("Итого");
	НоваяСтрока.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Денежные поступления от покупателей");
	
	СчетаУчета = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, НоваяСтрока.ДоговорКонтрагента);
	НоваяСтрока.СчетУчета = СчетаУчета.СчетРасчетовПокупателя;
	
	ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(НоваяСтрока)

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.Доверенность")] = "ЗаполнитьПоДоверенности";
	СтратегияЗаполнения[Тип("ДокументСсылка.РеализацияТоваровУслуг")] = "ЗаполнитьПоРеализацииТоваровУслуг";
	СтратегияЗаполнения[Тип("ДокументСсылка.СчетНаОплатуПокупателю")] = "ЗаполнитьПоСчетуНаОплатуПокупателю";
	
	ЗаполнениеОбъектов.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	// Установка реквизитов объекта.
	Если НЕ ЗначениеЗаполнено(Операция) Тогда
		Операция = Справочники.ОперацииПКО.ОплатаПокупателя;			
	КонецЕсли;	
	
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Если НЕ ЗначениеЗаполнено(Касса) Тогда		
		Касса = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнуюКассуОрганизации(Организация, ВалютаРегламентированногоУчета);		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаДенежныхСредств) И ЗначениеЗаполнено(Касса) Тогда
		ВалютаДенежныхСредств = Касса.ВалютаДенежныхСредств;
	КонецЕсли;
	
	ДатаДокумента = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата());	
	Если НЕ ЗначениеЗаполнено(КурсКассы) Тогда
		КурсСтруктура = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДенежныхСредств, ДатаДокумента);
		Если ЗначениеЗаполнено(КурсСтруктура.Курс) Тогда
			КурсКассы 	= КурсСтруктура.Курс;
		Иначе
			КурсКассы 	= 1;
		КонецЕсли;		
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(КурсДоговора)
		И РасшифровкаПлатежа.Количество() > 0 
		И ЗначениеЗаполнено(РасшифровкаПлатежа[0].ДоговорКонтрагента) 
		И ЗначениеЗаполнено(РасшифровкаПлатежа[0].ДоговорКонтрагента.ВалютаРасчетов) Тогда
			
		КурсСтруктура = РаботаСКурсамиВалют.ПолучитьКурсВалюты(РасшифровкаПлатежа[0].ДоговорКонтрагента.ВалютаРасчетов, ДатаДокумента);
		КурсДоговора = КурсСтруктура.Курс;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(КурсДоговора) Тогда
		КурсДоговора = 1;	
	КонецЕсли;	
			
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	ПересчетСуммыДокумента();
	СоставитьСписокФизЛиц();
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ДобавитьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ПриходныйКассовыйОрдер.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьДДС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьВозвратПодотчетником(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ВидОперации = Операция.ВидОперации;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтПокупателя") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РасчетыПоЗаймам") Тогда
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подотчетник");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СтатьяДвиженияДенежныхСредств");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Контрагент");
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтНесколькихКонтрагентов") Тогда
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подотчетник");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СтатьяДвиженияДенежныхСредств");
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПодотчетника") Тогда
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СтатьяДвиженияДенежныхСредств");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Контрагент");
		ПроверяемыеРеквизиты.Добавить("ВыдачаВПодотчет");
						
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтСотрудника") Тогда
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подотчетник");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СтатьяДвиженияДенежныхСредств");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Контрагент");
		ПроверяемыеРеквизиты.Добавить("ВозвратЗаработнойПлаты");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеНаличныхВБанке") Тогда
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подотчетник");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СтатьяДвиженияДенежныхСредств");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Контрагент");
		ПроверяемыеРеквизиты.Добавить("СуммаДокумента");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.Конвертация") Тогда	
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подотчетник");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СтатьяДвиженияДенежныхСредств");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Контрагент");
		ПроверяемыеРеквизиты.Добавить("СуммаДокумента");
		ПроверяемыеРеквизиты.Добавить("ВалютаКонвертации");
		ПроверяемыеРеквизиты.Добавить("КурсОбмена");
		ПроверяемыеРеквизиты.Добавить("СуммаКонвертации");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПрочийПриход") Тогда	
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подотчетник");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СтатьяДвиженияДенежныхСредств");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Контрагент");
		ПроверяемыеРеквизиты.Добавить("ПрочиеРасходы");
		
	КонецЕсли;
	                  			     
	//Контроль заполнения СчетДт и СчетКт перед проводкой по РБ
	//
	Если ЗначениеЗаполнено(Касса) И НЕ ЗначениеЗаполнено(Касса.СчетУчета) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"У выбранной кассы организации не установлен счет учета",
		,
		"Объект.Касса", 
		,
		);
		Отказ = Истина;
	КонецЕсли;
	
	СчетДтПоВидуОперации = СчетУчета;	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
