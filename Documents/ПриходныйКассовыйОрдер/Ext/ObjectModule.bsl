#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоДоверенности(ДанныеЗаполнения) Экспорт
	ДокументОснование = ДанныеЗаполнения;
	
	// Реквизиты организации.
	Организация = ДанныеЗаполнения.Организация;
	Касса = Организация.ОсновнаяКасса;	
	ВалютаДокумента = Касса.ВалютаДенежныхСредств;
	
	// Реквизиты контрагента.
	Контрагент = ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	ВалютаРасчетов = ДоговорКонтрагента.ВалютаРасчетов;
	
	ДатаДокумента = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	КурсСтруктура = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	Если ЗначениеЗаполнено(КурсСтруктура.Курс) Тогда
		Курс = КурсСтруктура.Курс;
		Кратность = КурсСтруктура.Кратность; 
	Иначе
		Курс = 1;
		Кратность = 1;
	КонецЕсли;		
	
	Если ВалютаРасчетов = ВалютаДокумента Тогда 
		КурсВзаиморасчетов = Курс;
		КратностьВзаиморасчетов = Кратность;
	Иначе 
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		КурсСтруктура = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРасчетов, ДатаДокумента);

		ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность, ПрямойКурс", ВалютаДокумента, Курс, Кратность, Ложь);
		ДанныВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", ВалютаРасчетов, КурсСтруктура.Курс, КурсСтруктура.Кратность);
		УчетДенежныхСредствКлиентСервер.УстановитьКурсыВзаиморасчетов(ЭтотОбъект, ДанныеДокумента, ДанныВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоРеализацииТоваровУслуг(ДанныеЗаполнения) Экспорт
	ДокументОснование = ДанныеЗаполнения;
	
	// Реквизиты организации.
	Организация = ДанныеЗаполнения.Организация;
	Касса = Организация.ОсновнаяКасса;	
	ВалютаДокумента = Касса.ВалютаДенежныхСредств;
	
	// Реквизиты контрагента.
	Контрагент 	= ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	ВалютаРасчетов = ДоговорКонтрагента.ВалютаРасчетов;
	
	СчетаРасчетовСКонтрагентом = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	СчетРасчетов = СчетаРасчетовСКонтрагентом.СчетРасчетовПокупателя;
	
	ДатаДокумента = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	КурсСтруктура = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	Если ЗначениеЗаполнено(КурсСтруктура.Курс) Тогда
		Курс = КурсСтруктура.Курс;
		Кратность = КурсСтруктура.Кратность; 
	Иначе
		Курс = 1;
		Кратность = 1;
	КонецЕсли;		
	
	СуммаДокумента = ДанныеЗаполнения.Товары.Итог("Всего") + ДанныеЗаполнения.Услуги.Итог("Всего") + ДанныеЗаполнения.ОС.Итог("Всего");

	// Реквизиты печати.
	Приложение = ?(ЗначениеЗаполнено(ДанныеЗаполнения.СерияБланкаСФ), СтрШаблон(НСтр("ru = 'Серия СФ %1 № %2 от %3г.'"),
				ДанныеЗаполнения.СерияБланкаСФ, ДанныеЗаполнения.НомерБланкаСФ, Формат(ДанныеЗаполнения.ДатаСФ, "ДЛФ=D")), "");
				
	ПринятоОт = ДанныеЗаполнения.Контрагент.НаименованиеПолное;

	// Рашифровка платежа.
	РасшифровкаПлатежа.Очистить();
	СтрокаТабличнойЧасти = РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеЗаполнения);
	
	Если ВалютаРасчетов = ВалютаДокумента Тогда 
		КурсВзаиморасчетов = Курс;
		КратностьВзаиморасчетов = Кратность;
		СтрокаТабличнойЧасти.СуммаПлатежа = СуммаДокумента;
		СтрокаТабличнойЧасти.СуммаВзаиморасчетов = СуммаДокумента;
	Иначе 
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		КурсСтруктура = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРасчетов, ДатаДокумента);

		ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность, ПрямойКурс", ВалютаДокумента, Курс, Кратность, Ложь);
		ДанныВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", ВалютаРасчетов, КурсСтруктура.Курс, КурсСтруктура.Кратность);
		УчетДенежныхСредствКлиентСервер.УстановитьКурсыВзаиморасчетов(ЭтотОбъект, ДанныеДокумента, ДанныВзаиморасчетов);
			
		СтрокаТабличнойЧасти.СуммаПлатежа = ?(ВалютаДокумента = ВалютаРегламентированногоУчета,
			СуммаДокумента * КурсВзаиморасчетов / КратностьВзаиморасчетов,
			СуммаДокумента * КратностьВзаиморасчетов / КурсВзаиморасчетов);			
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовТабличнойЧасти(
			ЭтотОбъект, "РасшифровкаПлатежа", ДанныеДокумента, ДанныВзаиморасчетов, ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Денежные поступления от покупателей");
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоСчетуНаОплатуПокупателю(ДанныеЗаполнения) Экспорт
	ДокументОснование = ДанныеЗаполнения;
	
	// Реквизиты организации.
	Организация = ДанныеЗаполнения.Организация;
	Касса = Организация.ОсновнаяКасса;	
	ВалютаДокумента = Касса.ВалютаДенежныхСредств;
	
	// Реквизиты контрагента.
	Контрагент 	= ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	ВалютаРасчетов = ДоговорКонтрагента.ВалютаРасчетов;
	
	СчетаРасчетовСКонтрагентом = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	СчетРасчетов = СчетаРасчетовСКонтрагентом.СчетРасчетовПокупателя;
	
	ДатаДокумента = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	КурсСтруктура = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	Если ЗначениеЗаполнено(КурсСтруктура.Курс) Тогда
		Курс = КурсСтруктура.Курс;
		Кратность = КурсСтруктура.Кратность; 
	Иначе
		Курс = 1;
		Кратность = 1;
	КонецЕсли;		
	
	СуммаДокумента = ДанныеЗаполнения.Товары.Итог("Всего") + ДанныеЗаполнения.Услуги.Итог("Всего");

	// Реквизиты печати.
	ПринятоОт = ДанныеЗаполнения.Контрагент.НаименованиеПолное;
	
	// Рашифровка платежа.
	РасшифровкаПлатежа.Очистить();
	СтрокаТабличнойЧасти = РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеЗаполнения);
	
	Если ВалютаРасчетов = ВалютаДокумента Тогда 
		КурсВзаиморасчетов = Курс;
		КратностьВзаиморасчетов = Кратность;
		СтрокаТабличнойЧасти.СуммаПлатежа = СуммаДокумента;
		СтрокаТабличнойЧасти.СуммаВзаиморасчетов = СуммаДокумента;
	Иначе 
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		КурсСтруктура = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРасчетов, ДатаДокумента);

		ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность, ПрямойКурс", ВалютаДокумента, Курс, Кратность, Ложь);
		ДанныВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", ВалютаРасчетов, КурсСтруктура.Курс, КурсСтруктура.Кратность);
		УчетДенежныхСредствКлиентСервер.УстановитьКурсыВзаиморасчетов(ЭтотОбъект, ДанныеДокумента, ДанныВзаиморасчетов);
			
		СтрокаТабличнойЧасти.СуммаПлатежа = ?(ВалютаДокумента = ВалютаРегламентированногоУчета,
			СуммаДокумента * КурсВзаиморасчетов / КратностьВзаиморасчетов,
			СуммаДокумента * КратностьВзаиморасчетов / КурсВзаиморасчетов);			
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовТабличнойЧасти(
			ЭтотОбъект, "РасшифровкаПлатежа", ДанныеДокумента, ДанныВзаиморасчетов, ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Денежные поступления от покупателей");
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоВозвратуТоваровПоставщику(ДанныеЗаполнения) Экспорт
	ДокументОснование = ДанныеЗаполнения;
	
	// Реквизиты организации.
	Организация = ДанныеЗаполнения.Организация;
	Касса = Организация.ОсновнаяКасса;	
	ВалютаДокумента = Касса.ВалютаДенежныхСредств;
	
	// Реквизиты контрагента.
	Контрагент 	= ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	ВалютаРасчетов = ДоговорКонтрагента.ВалютаРасчетов;
	
	СчетаРасчетовСКонтрагентом = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	СчетРасчетов = СчетаРасчетовСКонтрагентом.СчетРасчетовПокупателя;
	
	ДатаДокумента = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	КурсСтруктура = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	Если ЗначениеЗаполнено(КурсСтруктура.Курс) Тогда
		Курс = КурсСтруктура.Курс;
		Кратность = КурсСтруктура.Кратность; 
	Иначе
		Курс = 1;
		Кратность = 1;
	КонецЕсли;		
	
	СуммаДокумента = ДанныеЗаполнения.Товары.Итог("Всего");

	// Реквизиты печати.
	Приложение = ?(ЗначениеЗаполнено(ДанныеЗаполнения.СерияБланкаСФ), СтрШаблон(НСтр("ru = 'Серия СФ %1 № %2 от %3г.'"),
				ДанныеЗаполнения.СерияБланкаСФ, ДанныеЗаполнения.НомерБланкаСФ, Формат(ДанныеЗаполнения.ДатаСФ, "ДЛФ=D")), "");
				
	ПринятоОт = ДанныеЗаполнения.Контрагент.НаименованиеПолное;

	// Рашифровка платежа.
	РасшифровкаПлатежа.Очистить();
	СтрокаТабличнойЧасти = РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеЗаполнения);
	
	Если ВалютаРасчетов = ВалютаДокумента Тогда 
		КурсВзаиморасчетов = Курс;
		КратностьВзаиморасчетов = Кратность;
		СтрокаТабличнойЧасти.СуммаПлатежа = СуммаДокумента;
		СтрокаТабличнойЧасти.СуммаВзаиморасчетов = СуммаДокумента;
	Иначе 
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		КурсСтруктура = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРасчетов, ДатаДокумента);

		ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность, ПрямойКурс", ВалютаДокумента, Курс, Кратность, Ложь);
		ДанныВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", ВалютаРасчетов, КурсСтруктура.Курс, КурсСтруктура.Кратность);
		УчетДенежныхСредствКлиентСервер.УстановитьКурсыВзаиморасчетов(ЭтотОбъект, ДанныеДокумента, ДанныВзаиморасчетов);
			
		СтрокаТабличнойЧасти.СуммаПлатежа = ?(ВалютаДокумента = ВалютаРегламентированногоУчета,
			СуммаДокумента * КурсВзаиморасчетов / КратностьВзаиморасчетов,
			СуммаДокумента * КратностьВзаиморасчетов / КурсВзаиморасчетов);			
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовТабличнойЧасти(
			ЭтотОбъект, "РасшифровкаПлатежа", ДанныеДокумента, ДанныВзаиморасчетов, ВалютаРегламентированногоУчета);
	КонецЕсли;
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьРасходномуКассовомуОрдеру(ДанныеЗаполнения) Экспорт
	ДокументОснование = ДанныеЗаполнения;
	
	// Шапка.
	ВидОперации = Перечисления.ВидыОперацийПКО.Конвертация;

	// Реквизиты организации.
	Организация = ДанныеЗаполнения.Организация;
	Касса = ДанныеЗаполнения.Касса;
	ВалютаДокумента = Касса.ВалютаДенежныхСредств;
	
	// Реквизиты контрагента.
	КурсВзаиморасчетов = ДанныеЗаполнения.Курс;
	КратностьВзаиморасчетов = ДанныеЗаполнения.Кратность;
	ВалютаРасчетов = ДанныеЗаполнения.ВалютаДокумента;
	
	Если ДанныеЗаполнения.ПрочиеПлатежи.Количество() > 0 Тогда
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход 
			И ДанныеЗаполнения.ПрочиеПлатежи[0].СчетРасчетов = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПути Тогда
			ВидОперации = Перечисления.ВидыОперацийПКО.Конвертация;
			Комментарий = НСтр("ru = 'Конвертация'");
			
			СтрокаТабличнойЧасти = РасшифровкаПлатежа.Добавить();
			СтрокаТабличнойЧасти.СуммаВзаиморасчетов = ДанныеЗаполнения.ПрочиеПлатежи.Итог("СуммаПлатежа");		
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.Доверенность")] = "ЗаполнитьПоДоверенности";
	СтратегияЗаполнения[Тип("ДокументСсылка.РеализацияТоваровУслуг")] = "ЗаполнитьПоРеализацииТоваровУслуг";
	СтратегияЗаполнения[Тип("ДокументСсылка.СчетНаОплатуПокупателю")] = "ЗаполнитьПоСчетуНаОплатуПокупателю";
	СтратегияЗаполнения[Тип("ДокументСсылка.ВозвратТоваровПоставщику")] = "ЗаполнитьПоВозвратуТоваровПоставщику";
	СтратегияЗаполнения[Тип("ДокументСсылка.РасходныйКассовыйОрдер")] = "ЗаполнитьРасходномуКассовомуОрдеру";

	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	ДатаДокумента = Дата(1,1,1);
	
	Если ЗначениеЗаполнено(Касса)
		И НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = Касса.ВалютаДенежныхСредств;
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПрефиксКассыИБанковскогоСчета") И Касса.Префикс = "" Тогда
		ТекстСообщения = НСтр(
			"ru = 'Невозможно провести документ. Отсутствует префикс у кассы!'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			ТекстСообщения,
			,
			,
			"Касса",
			Отказ);
	КонецЕсли;
		
	ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа");

	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("ВалютаРасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("СчетРасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчет");
		МассивНепроверяемыхРеквизитов.Добавить("ФизЛицо");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаПлатежа"); 
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		
		ПроверяемыеРеквизиты.Добавить("ПрочиеПлатежи");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаОтПокупателя
		Или ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика
		Или ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоЗаймам Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ФизЛицо");
		МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчет");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтСотрудника Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("ВалютаРасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("СчетРасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчет");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетника Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("ВалютаРасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчет");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("СчетРасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("ФизЛицо");

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.Конвертация Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчет");
		МассивНепроверяемыхРеквизитов.Добавить("ФизЛицо");		
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаОтПокупателя Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ВидДеятельности");
	КонецЕсли;	

	ОбщегоНазначенияБПСервер.ДобавитьНепроверяемыеРеквизитыПоПараметрамФункциональныхОпций(МассивНепроверяемыхРеквизитов, Организация, Дата);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход
		И НЕ РасшифровкаПлатежа.Количество() = 0 Тогда 
		РасшифровкаПлатежа.Очистить();
	ИначеЕсли НЕ ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход
		И НЕ ПрочиеПлатежи.Количество() = 0 Тогда
		ПрочиеПлатежи.Очистить();
	КонецЕсли;
	
	СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа") + ПрочиеПлатежи.Итог("СуммаПлатежа");
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ПриходныйКассовыйОрдер.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	
	ЭтоКонвертация = ВидОперации = Перечисления.ВидыОперацийПКО.Конвертация;
	УчетДенежныхСредств.СформироватьДвиженияОперационнаяКурсоваяРазница(ДополнительныеСвойства, Движения, Отказ, Истина, ЭтоКонвертация);
	
	БухгалтерскийУчетСервер.ОтразитьДДС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьВозвратПодотчетником(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьАвансыПодотчетника(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьОборотыПоДаннымЕдиногоНалога(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	Префикс = ?(Касса.Префикс = "", "00", Касса.Префикс);
КонецПроцедуры

#КонецОбласти
	
#КонецЕсли
