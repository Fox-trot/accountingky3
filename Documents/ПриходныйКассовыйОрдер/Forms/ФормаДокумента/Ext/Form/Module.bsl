#Область ОписаниеПеременных

&НаКлиенте
Перем ЗаполнениеДатыОплатыВыполнено; // Признак успешной записи даты оплаты

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	// Курсы взаиморасчетов.
	ВалютаРасчетовКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаРасчетов, ДатаДокумента);
	КурсВзаиморасчетовПоНацБанку = ВалютаРасчетовКурсКратность.Курс;
	КратностьВзаиморасчетовПоНацБанку = ВалютаРасчетовКурсКратность.Кратность;
	ЗаполнитьСписокВыбораКурсВзаиморасчетов();
	
	// Одной строкой / Списком.
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Объект.РасшифровкаПлатежа.Добавить();
		Объект.КурсВзаиморасчетов = КурсВзаиморасчетовПоНацБанку;
		Объект.КратностьВзаиморасчетов = КратностьВзаиморасчетовПоНацБанку;
		
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
	Иначе
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьНачальныеСвойстваСубконтоТаблицы();
	КонецЕсли;		
	
	ИспользоватьДополнительныйПрефикс = ПолучитьФункциональнуюОпцию("ИспользоватьПрефиксКассыИБанковскогоСчета");

	УстановитьФункциональныеОпцииФормы();	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	УстановитьПараметрыВыбора();
	
	// Одной строкой / Списком.
	КоличествоСтрок = Объект.РасшифровкаПлатежа.Количество();
	Элементы.РедактироватьСписком.Пометка = КоличествоСтрок > 1;
	УстановитьВозможностьРедактированияСпискомФрагмент();
	
	ОбновитьПодвалФормы();
	СформироватьНадписьКурсоваяРазница();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УстановитьНачальныеСвойстваСубконтоТаблицы();

	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗаполнениеДатыОплатыВыполнено" Тогда
		ЗаполнениеДатыОплатыВыполнено = Истина;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	УстановитьНачальныеСвойстваСубконтоТаблицы();
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ОповещениеОбИзмененииДолга");
	
	ЗаполнениеДатыОплатыВыполнено = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата", Объект.Дата);
	СтруктураПараметров.Вставить("ДокументОснование", Объект.ДокументОснование);
	Оповестить("Запись_ПриходныйКассовыйОрдер", СтруктураПараметров, ЭтотОбъект);
	
	// Если форма документа "Счет на оплату" закрыта, то запишем дату оплаты самостоятельно.
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")
		И Не ЗаполнениеДатыОплатыВыполнено Тогда
		ЗаписатьДатуОплаты(СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) 
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ДатаРКО = ПолучитьДатуРКО(Объект.ДокументОснование);
		
		Если ДатаРКО > ДатаДокумента Тогда
			Объект.Дата 	= ДатаРКО;
			ДатаДокумента 	= ДатаРКО;
			
			ТекстСообщения = НСтр("ru = 'Дата приходного кассового ордера не может быть раньше даты расходного кассового ордера.
							|Установлена дата расходного кассового ордера.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;	
	КонецЕсли;	
	
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		ЗаполнитьСписокВыбораКурсВзаиморасчетов();

		Если НЕ Объект.ВалютаРасчетов = Объект.ВалютаДокумента Тогда 
			ТекстСообщение = НСтр("ru = 'Изменилась дата документа.
					|Возможно, необходимо обновить курсы и пересчитать сумму документа.'") + Символы.ПС + Символы.ПС;
			ТекстСообщение = ТекстСообщение + НСтр("ru = 'Пересчитать документ?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ОтветНаВопросДатаПриИзменении", ЭтотОбъект), ТекстСообщение, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;	
	КонецЕсли;
	
	СформироватьНадписьКурсоваяРазница();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер = "";
	Объект.Касса = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнуюКассуОрганизации(Объект.Организация);
	ОбработатьИзменениеКассы();
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоТаблицыПриИзмененииОрганизации(
		Объект.ПрочиеПлатежи,
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));

	УстановитьФункциональныеОпцииФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Вид операции.
//
&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	ОбновитьРеквизиты();
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	УстановитьПараметрыВыбора();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении();
	
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ОбработатьИзменениеДоговора();
			
	ДанныеДляПечати = ПолучитьДанныеДляПечати(Объект.Контрагент, Объект.Организация, ДатаДокумента);
	Объект.ПринятоОт = ДанныеДляПечати.ПринятоОт;
	Объект.ПоДокументу = ДанныеДляПечати.ПоДокументу;

	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор контрагента.
//
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ОбработатьИзменениеДоговора();
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Касса.
//
&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	ОбработатьИзменениеКассы();
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ФизЛицо.
//
&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	ДанныеДляПечати = ПолучитьДанныеДляПечати(Объект.ФизЛицо, Объект.Организация, ДатаДокумента);
	Объект.ПринятоОт = ДанныеДляПечати.ПринятоОт;
	Объект.ПоДокументу = ДанныеДляПечати.ПоДокументу;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Банковский счет.
//
&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	ДанныеДляПечати = ПолучитьДанныеДляПечати(Объект.БанковскийСчет);
	Объект.ПринятоОт = ДанныеДляПечати.ПринятоОт;
	Объект.ПоДокументу = ДанныеДляПечати.ПоДокументу;
	
	ОбработатьИзменениеБанковскогоСчетаОрганизации();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ВалютаРасчетов.
//
&НаКлиенте
Процедура ВалютаРасчетовПриИзменении(Элемент)
	
	УстановитьКурсВалютыДокумента();	
	СформироватьНадписьКурсоваяРазница();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода КурсВзаиморасчетов.
//
&НаКлиенте
Процедура КурсВзаиморасчетовПриИзменении(Элемент)
 
	ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность, ПрямойКурс", 
		Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность, Объект.ПрямойКурс);
	ДанныеВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаРасчетов, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);		
			
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовТабличнойЧасти(
				Объект, 
				"РасшифровкаПлатежа",
				ДанныеДокумента,
				ДанныеВзаиморасчетов,
				ВалютаРегламентированногоУчета);
		
	ОбновитьПодвалФормы();
	СформироватьНадписьКурсоваяРазница();		
КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора поля ввода КурсВзаиморасчетов.
//
&НаКлиенте
Процедура КурсВзаиморасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = 0 Тогда
		СтандартнаяОбработка = Ложь;
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("КурсРасчетовОбработкаВыбораЗавершение", ЭтотОбъект);
		ПоказатьВводДаты(ОбработчикОповещенияОЗакрытии, ДатаДокумента, НСтр("ru = 'Укажите дату курса валюты'"), ЧастиДаты.Дата);
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода КратностьВзаиморасчетов.
//
&НаКлиенте
Процедура КратностьВзаиморасчетовПриИзменении(Элемент)
	
	ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность, ПрямойКурс", 
		Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность, Объект.ПрямойКурс);
	ДанныеВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаРасчетов, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовТабличнойЧасти(
				Объект, 
				"РасшифровкаПлатежа",
				ДанныеДокумента,
				ДанныеВзаиморасчетов,
				ВалютаРегламентированногоУчета);	
		
	ОбновитьПодвалФормы();
	СформироватьНадписьКурсоваяРазница();		
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СчетРасчетов.
//
&НаКлиенте
Процедура СчетРасчетовПриИзменении(Элемент)
	СформироватьНадписьКурсоваяРазница();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

// Процедура - обработчик события ПередНачаломДобавления таблицы РасшифровкаПлатежа.
//
&НаКлиенте
Процедура РасшифровкаПлатежаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогСуммаПлатежа = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа") + Объект.ПрочиеПлатежи.Итог("СуммаПлатежа") + Элемент.ТекущиеДанные.СуммаПлатежа;
		ИтогСуммаВзаиморасчетов = Объект.РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов") + Элемент.ТекущиеДанные.СуммаВзаиморасчетов; 
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
	СформироватьНадписьКурсоваяРазница();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаСуммаПлатежа.
//
&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность, ПрямойКурс", 
		Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность, Объект.ПрямойКурс);
	ДанныеВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаРасчетов, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);
		
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда				
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьКурсВзаиморасчетовТабличнойЧасти(
			Объект,
			СтрокаТабличнойЧасти,
			ДанныеДокумента,
			ДанныеВзаиморасчетов,
			ВалютаРегламентированногоУчета);	
	Иначе		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовСтрокиТабличнойЧасти(
			СтрокаТабличнойЧасти,
			ДанныеДокумента,
			ДанныеВзаиморасчетов,
			ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	ОбновитьПодвалФормы();	
	СформироватьНадписьКурсоваяРазница();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаСуммаВзаиморасчетов.
//
&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность, ПрямойКурс", 
		Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность, Объект.ПрямойКурс);
	ДанныеВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаРасчетов, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьКурсВзаиморасчетовТабличнойЧасти(
		Объект,
		СтрокаТабличнойЧасти,
		ДанныеДокумента,
		ДанныеВзаиморасчетов,
		ВалютаРегламентированногоУчета);
		
	// Значения реквизитов объекта изменились, а в структуре остались старые значения.	
	ДанныеВзаиморасчетов.Курс = Объект.КурсВзаиморасчетов;	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовТабличнойЧасти(
			Объект, 
			"РасшифровкаПлатежа",
			ДанныеДокумента,
			ДанныеВзаиморасчетов,
			ВалютаРегламентированногоУчета);	
	
	ОбновитьПодвалФормы();
	СформироватьНадписьКурсоваяРазница();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаСуммаПлатежа1.
//
&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежа1ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность, ПрямойКурс", 
		Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность, Объект.ПрямойКурс);
	ДанныеВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаРасчетов, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);
		
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда				
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьКурсВзаиморасчетовТабличнойЧасти(
			Объект,
			СтрокаТабличнойЧасти,
			ДанныеДокумента,
			ДанныеВзаиморасчетов,
			ВалютаРегламентированногоУчета);	
	Иначе		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовСтрокиТабличнойЧасти(
			СтрокаТабличнойЧасти,
			ДанныеДокумента,
			ДанныеВзаиморасчетов,
			ВалютаРегламентированногоУчета);
	КонецЕсли;
			
	ОбновитьПодвалФормы();
	СформироватьНадписьКурсоваяРазница();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаСуммаВзаиморасчетов1.
//
&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетов1ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность, ПрямойКурс", 
		Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность, Объект.ПрямойКурс);
	ДанныеВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаРасчетов, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьКурсВзаиморасчетовТабличнойЧасти(
		Объект,
		СтрокаТабличнойЧасти,
		ДанныеДокумента,
		ДанныеВзаиморасчетов,
		ВалютаРегламентированногоУчета);
	
	ОбновитьПодвалФормы();
	СформироватьНадписьКурсоваяРазница();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрочиеПлатежи

// Процедура - обработчик события ПередНачаломДобавления таблицы ПрочиеПлатежи.
//
&НаКлиенте
Процедура ПрочиеПлатежиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогСуммаПлатежа = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа") + Объект.ПрочиеПлатежи.Итог("СуммаПлатежа") + Элемент.ТекущиеДанные.СуммаПлатежа;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПередНачаломИзменения таблицы ПрочиеПлатежи.
//
&НаКлиенте
Процедура ПрочиеПлатежиПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные = Элементы.ПрочиеПлатежи.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоСтроки(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеПлатежиПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПрочиеПлатежиСуммаПлатежа.
//
&НаКлиенте
Процедура ПрочиеПлатежиСуммаПлатежаПриИзменении(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПрочиеПлатежиСчетРасчетов.
//
&НаКлиенте
Процедура ПрочиеПлатежиСчетРасчетовПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ПрочиеПлатежи.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПрочиеПлатежиСубконто1.
//
&НаКлиенте
Процедура ПрочиеПлатежиСубконто1ПриИзменении(Элемент)
	ПриИзмененииСубконто(1);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода ПрочиеПлатежиСубконто1.
//
&НаКлиенте
Процедура ПрочиеПлатежиСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПрочиеПлатежиСубконто2.
//
&НаКлиенте
Процедура ПрочиеПлатежиСубконто2ПриИзменении(Элемент)
	ПриИзмененииСубконто(2);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода ПрочиеПлатежиСубконто2.
//
&НаКлиенте
Процедура ПрочиеПлатежиСубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПрочиеПлатежиСубконто3.
//
&НаКлиенте
Процедура ПрочиеПлатежиСубконто3ПриИзменении(Элемент)
	ПриИзмененииСубконто(3);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода ПрочиеПлатежиСубконто3.
//
&НаКлиенте
Процедура ПрочиеПлатежиСубконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды РедактироватьСписком.
//
&НаКлиенте
Процедура РедактироватьСписком(Команда)
	
	УстановитьВозможностьРедактированияСписком();
	
КонецПроцедуры // РедактироватьСписком()

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросУстановитьВозможностьРедактированияСписком(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Элементы.РедактироватьСписком.Пометка = Истина;
        Возврат;
    КонецЕсли;
	
	КоличествоСтрок = ДополнительныеПараметры.КоличествоСтрок;
	
	// удаление строк в обратном порядке
    Пока КоличествоСтрок > 1 Цикл
        Объект.РасшифровкаПлатежа.Удалить(Объект.РасшифровкаПлатежа[КоличествоСтрок - 1]);
        КоличествоСтрок = КоличествоСтрок - 1;
    КонецЦикла;
    Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
    
    УстановитьВозможностьРедактированияСпискомФрагмент();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтветНаВопросДата.
//
&НаКлиенте
Процедура ОтветНаВопросДатаПриИзменении(Результат, ДополнительныеПараметры) Экспорт
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
		УстановитьКурсВалютыДокумента();
    КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	Элементы.ВалютаРасчетов.Вид = ВидПоляФормы.ПолеНадписи;
	
	Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов1.Заголовок = НСтр("ru = 'Сумма взаиморасчетов'");
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаОтПокупателя
		Или Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика
		Или Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоЗаймам Тогда 
		
		Элементы.Контрагент.Видимость = Истина;
		Элементы.ДоговорКонтрагента.Видимость = Истина;
		Элементы.СчетРасчетов.Видимость = Истина;
		Элементы.БанковскийСчет.Видимость = Ложь;
		Элементы.БанковскийСчетСчетУчета.Видимость = Ложь;
		Элементы.ФизЛицо.Видимость = Ложь;
		
		Элементы.РедактироватьСписком.Видимость = Истина;
		Элементы.СтраницаРасшифровкаПлатежа.Видимость = Истина;
		Элементы.СтраницаПрочиеПлатежи.Видимость = Ложь;
		
		Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств.Видимость = Истина;		
		Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств1.Видимость = Истина;		
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетника Тогда 
		
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.СчетРасчетов.Видимость = Истина;
		Элементы.БанковскийСчет.Видимость = Ложь;
		Элементы.БанковскийСчетСчетУчета.Видимость = Ложь;
		Элементы.ФизЛицо.Видимость = Истина;
		
		Элементы.РедактироватьСписком.Видимость = Истина;
		Элементы.СтраницаРасшифровкаПлатежа.Видимость = Истина;
		Элементы.СтраницаПрочиеПлатежи.Видимость = Ложь;
		
		Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств.Видимость = Истина;		
		Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств1.Видимость = Истина;		
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтСотрудника Тогда 
		
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.СчетРасчетов.Видимость = Ложь;
		Элементы.БанковскийСчет.Видимость = Ложь;
		Элементы.БанковскийСчетСчетУчета.Видимость = Ложь;
		Элементы.ФизЛицо.Видимость = Истина;
		
		Элементы.РедактироватьСписком.Видимость = Истина;
		Элементы.СтраницаРасшифровкаПлатежа.Видимость = Истина;
		Элементы.СтраницаПрочиеПлатежи.Видимость = Ложь;
		
		Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств.Видимость = Истина;		
		Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств1.Видимость = Истина;		
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.СчетРасчетов.Видимость = Ложь;
		Элементы.БанковскийСчет.Видимость = Истина;
		Элементы.БанковскийСчетСчетУчета.Видимость = Истина;
		Элементы.ФизЛицо.Видимость = Ложь;
		
		Элементы.СтраницаРасшифровкаПлатежа.Видимость = Истина;
		Элементы.СтраницаПрочиеПлатежи.Видимость = Ложь;
		
		Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств.Видимость = Ложь;		
		Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств1.Видимость = Ложь;		

	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда
		
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.СчетРасчетов.Видимость = Ложь;
		Элементы.БанковскийСчет.Видимость = Ложь;
		Элементы.БанковскийСчетСчетУчета.Видимость = Ложь;
		Элементы.ФизЛицо.Видимость = Ложь;
		
		Элементы.СтраницаРасшифровкаПлатежа.Видимость = Ложь;
		Элементы.СтраницаПрочиеПлатежи.Видимость = Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.Конвертация Тогда
		
		Элементы.ВалютаРасчетов.Вид = ВидПоляФормы.ПолеВвода;
		Элементы.ВалютаРасчетов.Ширина = 7;
		Элементы.ВалютаРасчетов.РастягиватьПоГоризонтали = Ложь;
		
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.БанковскийСчет.Видимость = Ложь;
		Элементы.ФизЛицо.Видимость = Ложь;
		Элементы.БанковскийСчетСчетУчета.Видимость = Ложь;
		Элементы.СчетРасчетов.Видимость = Истина;
		
		Элементы.РедактироватьСписком.Видимость = Ложь;
		Элементы.СтраницаПрочиеПлатежи.Видимость = Ложь;
		Элементы.СтраницаРасшифровкаПлатежа.Видимость = Истина;
		
		Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов1.Заголовок = НСтр("ru = 'Сумма обмена'");
	КонецЕсли;
	
	// Расчет не в валюте договора.	
	Если (ЗначениеЗаполнено(Объект.ВалютаДокумента)
		И ЗначениеЗаполнено(Объект.ВалютаРасчетов)
		И ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И НЕ Объект.ВалютаРасчетов = Объект.ВалютаДокумента)
		Или Объект.ВидОперации = Перечисления.ВидыОперацийПКО.Конвертация Тогда		
		
		Элементы.КурсВзаиморасчетов.Видимость = Истина;
		Элементы.КратностьВзаиморасчетов.Видимость = Истина;		
		Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость = Истина;		
		Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов1.Видимость = Истина;
		Элементы.ВалютаРасчетов.Видимость = Истина;
		
	Иначе 
		Элементы.КурсВзаиморасчетов.Видимость = Ложь;
		Элементы.КратностьВзаиморасчетов.Видимость = Ложь;		
		Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость = Ложь;		
		Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов1.Видимость = Ложь;
		Элементы.ВалютаРасчетов.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.КратностьВзаиморасчетов > 1 Тогда
		Элементы.КратностьВзаиморасчетов.Видимость = Истина;
	Иначе 
		Элементы.КратностьВзаиморасчетов.Видимость = Ложь;
	КонецЕсли;	
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетника Тогда 
		Элементы.ФизЛицо.Заголовок = НСтр("ru = 'Подотчетник'");
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтСотрудника Тогда 
		Элементы.ФизЛицо.Заголовок = НСтр("ru = 'Сотрудник'");
	КонецЕсли;
	
	// Список выбора курсов.
	Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета
		ИЛИ Объект.ВалютаРасчетов = ВалютаРегламентированногоУчета Тогда 
		Элементы.КурсВзаиморасчетов.КнопкаВыпадающегоСписка = Истина;
	Иначе 
		Элементы.КурсВзаиморасчетов.КнопкаВыпадающегоСписка = Ложь;
	КонецЕсли;	

	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда	
		Элементы.ДокументОснование.Видимость 						= Истина;
		Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов1.Доступность = Ложь;
		Элементы.ВалютаРасчетов.Доступность 						= Ложь;
		Элементы.КурсВзаиморасчетов.Доступность 					= Ложь;
		Элементы.КратностьВзаиморасчетов.Доступность 				= Ложь;		
	Иначе
		Элементы.ДокументОснование.Видимость 						= Ложь;
		Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов1.Доступность = Истина;
		Элементы.ВалютаРасчетов.Доступность 						= Истина;
		Элементы.КурсВзаиморасчетов.Доступность 					= Истина;
		Элементы.КратностьВзаиморасчетов.Доступность 				= Истина;
	КонецЕсли;
	
	// Плательщик ЕН.
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаОтПокупателя Тогда 
		Элементы.РасшифровкаПлатежаВидДеятельности.Видимость = Истина;
		Элементы.РасшифровкаПлатежаВидДеятельности1.Видимость = Истина;
	Иначе 
		Элементы.РасшифровкаПлатежаВидДеятельности.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаВидДеятельности1.Видимость = Ложь;
	КонецЕсли;	

КонецПроцедуры 

// Процедура устанавливает параметры выбора.
//
&НаКлиенте
Процедура УстановитьПараметрыВыбора()
	
	МассивПараметровВыбора = БухгалтерскийУчетКлиентСервер.ПолучитьМассивПараметровВыбораДоговора(Объект.Ссылка, Объект.ВидОперации);
	// Формирование параметра выбора.
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(МассивПараметровВыбора));
	// Добавление параметра выбора.
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры // УстановитьПараметрыВыбора()

// Процедура устанавливает функциональные опции формы документа.
//
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма, Объект.Организация, ДатаДокумента);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизиты()

	Объект.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	Объект.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	Объект.ВалютаРасчетов = Объект.ВалютаДокумента;
	Объект.ФизЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
	
	// Печать.
	Объект.ПринятоОт = "";
	Объект.ПоДокументу = "";
	
	КурсВзаиморасчетовПоНацБанку = Объект.Курс;	
	КратностьВзаиморасчетовПоНацБанку = Объект.Кратность;
	
	// Заполнение по умолчанию.
	ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоУмолчанию(Объект.Организация, Объект.ВидОперации, Объект.ВалютаДокумента);	
	Объект.СчетРасчетов = ДанныеДляЗаполнения.СчетРасчетов;	
	Объект.БанковскийСчет = ДанныеДляЗаполнения.БанковскийСчет;	
КонецПроцедуры // ОбновитьРеквизиты()

// Получает набор данных с сервера для процедуры ОбновитьРеквизиты.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДляЗаполненияПоУмолчанию(Организация, ВидОперации, ВалютаДокумента)
	
	СтруктураДанные = Новый Структура;
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетника Тогда 
		СтруктураДанные.Вставить(
			"СчетРасчетов",
			ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами);
			
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.Конвертация Тогда 	
		СтруктураДанные.Вставить(
			"СчетРасчетов",
			ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПути); // 1250
	Иначе 	
		СтруктураДанные.Вставить(
			"СчетРасчетов",
			ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	КонецЕсли;
	
	БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		БанковскийСчет = Справочники.БанковскиеСчета.ПолучитьБанковскийСчетПоУмолчаниюПоОрганизацииВалюте(Организация, ВалютаДокумента)	
	КонецЕсли;	
	СтруктураДанные.Вставить(
		"БанковскийСчет", БанковскийСчет);

	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДляЗаполненияПоУмолчанию()

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура - устанавливает возможность редактирования списком.
//
&НаКлиенте
Процедура УстановитьВозможностьРедактированияСписком()
	
	Элементы.РедактироватьСписком.Пометка = НЕ Элементы.РедактироватьСписком.Пометка;
	
	КоличествоСтрок = Объект.РасшифровкаПлатежа.Количество();
	
	Если НЕ Элементы.РедактироватьСписком.Пометка
		И КоличествоСтрок > 1 Тогда
		  
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросУстановитьВозможностьРедактированияСписком", ЭтотОбъект, Новый Структура("КоличествоСтрок", КоличествоСтрок));
		ТекстВопроса = НСтр("ru = 'Все строки кроме первой будут удалены! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		УстановитьВозможностьРедактированияСпискомФрагмент();
	КонецЕсли;
КонецПроцедуры

// Процедура - устанавливает возможность редактирования списком (продолжение).
//
&НаКлиенте
Процедура УстановитьВозможностьРедактированияСпискомФрагмент()
    Если Элементы.РедактироватьСписком.Пометка Тогда
        Элементы.СтраницыСтрокойСписком.ТекущаяСтраница = Элементы.Списком;
    Иначе
        Элементы.СтраницыСтрокойСписком.ТекущаяСтраница = Элементы.ОднаСтрока;
    КонецЕсли;
КонецПроцедуры // УстановитьВозможностьРедактированияСписком()

// Процедура - устанавливает курс документа на дату.
//
&НаСервере
Процедура УстановитьКурсВалютыДокумента()
	Объект.Курс = 1;	
	Объект.Кратность = 1;	

	ВалютаДокумента = Неопределено;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		ВалютаДокумента = Объект.БанковскийСчет.ВалютаДенежныхСредств;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаОтПокупателя 
		Или Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика
		Или Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоЗаймам 
		Или Объект.ВидОперации = Перечисления.ВидыОперацийПКО.Конвертация Тогда
		ВалютаДокумента = Объект.Касса.ВалютаДенежныхСредств;
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
		Объект.Курс = КурсВалюты.Курс;
		Объект.Кратность = КурсВалюты.Кратность;
			
		Если НЕ ЗначениеЗаполнено(Объект.Курс) Тогда
			Объект.Курс = 1;	
			Объект.Кратность = 1;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВалютаРасчетов) Тогда
			КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаРасчетов, ДатаДокумента);
			Курс = КурсВалюты.Курс;	
			Кратность = КурсВалюты.Кратность;	
			Если НЕ ЗначениеЗаполнено(Курс) Тогда
				Курс = 1;	
				Кратность = 1;	
			КонецЕсли;
			
			ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность, ПрямойКурс", 
				Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность, Объект.ПрямойКурс);
			ДанныеВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", 
				Объект.ВалютаРасчетов, Курс, Кратность);
				
			ОбработкаТабличныхЧастейКлиентСервер.УстановитьКурсыВзаиморасчетовТабличнойЧасти(
				Объект,
				"РасшифровкаПлатежа",
				ДанныеДокумента,
				ДанныеВзаиморасчетов,
				ВалютаРегламентированногоУчета);
				
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовТабличнойЧасти(
				Объект, 
				"РасшифровкаПлатежа",
				ДанныеДокумента,
				ДанныеВзаиморасчетов,
				ВалютаРегламентированногоУчета);
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры // УстановитьКурсВалютыДокумента()

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении()
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанию.
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеДоговора()
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(ДатаДокумента, Объект.ДоговорКонтрагента, Объект.ВидОперации);

	// Обработка изменения валюты.
	СтруктураКурсыПред = Новый Структура("Валюта", Объект.ВалютаРасчетов);
	Объект.ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
	КурсВзаиморасчетовПоНацБанку = СтруктураДанные.ВалютаРасчетовКурсКратность.Курс;
	КратностьВзаиморасчетовПоНацБанку = СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность;
	СтруктураКурсы = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаРасчетов, КурсВзаиморасчетовПоНацБанку, КратностьВзаиморасчетовПоНацБанку);
	
	// Обработка изменения отражения в учете.
	Объект.СчетРасчетов = СтруктураДанные.СчетРасчетов;
	
	// Вопрос изменения
	ИзмениласьВалютаРасчетов = СтруктураКурсыПред.Валюта <> СтруктураДанные.ВалютаРасчетов
		И ЗначениеЗаполнено(Объект.ВалютаРасчетов); 
	ПересчетНеобходим = (Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа") > 0);	
	
	// Обновление курса взаиморасчетов.
	Если ИзмениласьВалютаРасчетов Тогда 
		ЗаполнитьСписокВыбораКурсВзаиморасчетов();

		ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность, ПрямойКурс", 
			Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность, Объект.ПрямойКурс);
	
		ОбработкаТабличныхЧастейКлиентСервер.УстановитьКурсыВзаиморасчетовТабличнойЧасти(
			Объект, "РасшифровкаПлатежа", ДанныеДокумента, СтруктураКурсы, ВалютаРегламентированногоУчета);
	КонецЕсли;	
	
	// Пересчет суммы взаиморасчетов.
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И ИзмениласьВалютаРасчетов
		И ПересчетНеобходим Тогда
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовТабличнойЧасти(
			Объект, "РасшифровкаПлатежа", ДанныеДокумента, СтруктураКурсы, ВалютаРегламентированногоУчета);
			
		ОбновитьПодвалФормы();
		СформироватьНадписьКурсоваяРазница();
	КонецЕсли;
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Период, ДоговорКонтрагента, ВидОперации)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорКонтрагента.ВалютаРасчетов);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаРасчетов, Период));
	
	СчетаУчета = БухгалтерскийУчетВызовСервера.ПолучитьСчетаРасчетовСКонтрагентом(ДоговорКонтрагента.Организация, ДоговорКонтрагента.Владелец, ДоговорКонтрагента);
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаОтПокупателя Тогда 
		СтруктураДанные.Вставить(
			"СчетРасчетов",
			СчетаУчета.СчетРасчетовПокупателя);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика Тогда 
		СтруктураДанные.Вставить(
			"СчетРасчетов",
			СчетаУчета.СчетРасчетовПоставщика);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоЗаймам Тогда 	
		СтруктураДанные.Вставить(
			"СчетРасчетов",
			СчетаУчета.СчетРасчетовПоЗаймам); 
	Иначе 	
		СтруктураДанные.Вставить(
			"СчетРасчетов",
			ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаКлиенте
Процедура ОбработатьИзменениеКассы()
	
	СтруктураДанные = ПолучитьДанныеКассыПриИзменении(ДатаДокумента, Объект.Касса);
	
	// Очистка номера документа
	Если ИспользоватьДополнительныйПрефикс Тогда
		Объект.Номер = "";
	КонецЕсли;
	
	// Обработка изменения валюты.
	СтруктураКурсыПред = Новый Структура("Валюта", Объект.ВалютаДокумента);
	Объект.ВалютаДокумента = СтруктураДанные.ВалютаДокумента;
	Объект.Курс      = СтруктураДанные.ВалютаДокументаКурсКратность.Курс;
	Объект.Кратность = СтруктураДанные.ВалютаДокументаКурсКратность.Кратность;
	СтруктураКурсы = Новый Структура("Валюта, Курс, Кратность, ПрямойКурс", Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность, Объект.ПрямойКурс);
	
	// Вопрос изменения
	ИзмениласьВалютаРасчетов = СтруктураКурсыПред.Валюта <> СтруктураДанные.ВалютаДокумента
		И ЗначениеЗаполнено(Объект.ВалютаДокумента); 
	ПересчетНеобходим = (Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа") > 0);	
	
	// Обновление курса взаиморасчетов.
	Если ИзмениласьВалютаРасчетов Тогда
		ЗаполнитьСписокВыбораКурсВзаиморасчетов();

		ДанныеВзаиморасчетов = ПолучитьКурсВалюты(Объект.ВалютаРасчетов, ДатаДокумента);

		ОбработкаТабличныхЧастейКлиентСервер.УстановитьКурсыВзаиморасчетовТабличнойЧасти(
			Объект, "РасшифровкаПлатежа", СтруктураКурсы, ДанныеВзаиморасчетов, ВалютаРегламентированногоУчета);
	КонецЕсли;	

	Если ИзмениласьВалютаРасчетов
		И ПересчетНеобходим Тогда
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовТабличнойЧасти(
			Объект, "РасшифровкаПлатежа", СтруктураКурсы, ДанныеВзаиморасчетов, ВалютаРегламентированногоУчета);
			
		ОбновитьПодвалФормы();
		СформироватьНадписьКурсоваяРазница();
	КонецЕсли;
КонецПроцедуры

// Получает набор данных с сервера для процедуры ОбработатьИзменениеКассы.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеКассыПриИзменении(Период, Касса)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаДокумента",
		Касса.ВалютаДенежныхСредств);
		
	СтруктураДанные.Вставить(
		"ВалютаДокументаКурсКратность",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(Касса.ВалютаДенежныхСредств, Период));
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКассыПриИзменении()

&НаКлиенте
Процедура ОбработатьИзменениеБанковскогоСчетаОрганизации()
	
	СтруктураДанные = ПолучитьДанныеБанковскийСчетПриИзменении(ДатаДокумента, Объект.БанковскийСчет);

	// Обработка изменения валюты.
	СтруктураКурсыПред = Новый Структура("Валюта", Объект.ВалютаРасчетов);
	Объект.ВалютаРасчетов 	= СтруктураДанные.ВалютаРасчетов;
	КурсВзаиморасчетовПоНацБанку = СтруктураДанные.ВалютаРасчетовКурсКратность.Курс;
	КратностьВзаиморасчетовПоНацБанку = СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность;
	СтруктураКурсы = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаРасчетов, КурсВзаиморасчетовПоНацБанку, КратностьВзаиморасчетовПоНацБанку);
	
	// Вопрос изменения
	ИзмениласьВалютаРасчетов = СтруктураКурсыПред.Валюта <> СтруктураДанные.ВалютаРасчетов
		И ЗначениеЗаполнено(Объект.ВалютаРасчетов); 
	ПересчетНеобходим = (Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа") > 0);	
	
	// Обновление курса взаиморасчетов.
	Если ИзмениласьВалютаРасчетов Тогда
		ЗаполнитьСписокВыбораКурсВзаиморасчетов();

		ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность, ПрямойКурс", 
			Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность, Объект.ПрямойКурс);
	
		ОбработкаТабличныхЧастейКлиентСервер.УстановитьКурсыВзаиморасчетовТабличнойЧасти(
			Объект, "РасшифровкаПлатежа", ДанныеДокумента, СтруктураКурсы, ВалютаРегламентированногоУчета);
	КонецЕсли;	

	Если ЗначениеЗаполнено(Объект.БанковскийСчет) 
		И ИзмениласьВалютаРасчетов
		И ПересчетНеобходим Тогда

		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовТабличнойЧасти(
			Объект, "РасшифровкаПлатежа", ДанныеДокумента, СтруктураКурсы, ВалютаРегламентированногоУчета);
			
		ОбновитьПодвалФормы();
		СформироватьНадписьКурсоваяРазница();
	КонецЕсли;
КонецПроцедуры

// Получает набор данных с сервера для процедуры БанковскийСчетОрганизацииПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеБанковскийСчетПриИзменении(Период, БанковскийСчет)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		БанковскийСчет.ВалютаДенежныхСредств);
		
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(БанковскийСчет.ВалютаДенежныхСредств, Период));

	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеБанковскийСчетПриИзменении()

// Процедура рассчитывает итоги для подвала формы.
//
&НаКлиенте
Процедура ОбновитьПодвалФормы()
	ИтогСуммаПлатежа = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа") + Объект.ПрочиеПлатежи.Итог("СуммаПлатежа");
	ИтогСуммаВзаиморасчетов = Объект.РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов"); 
КонецПроцедуры // ОбновитьПодвалФормы()

// Процедура заполняет список выбора курса взаиморасчетов.
//
&НаСервере
Процедура ЗаполнитьСписокВыбораКурсВзаиморасчетов()

	Элементы.КурсВзаиморасчетов.СписокВыбора.Очистить();
	СписокКурсовВалют = ПолучитьСписокКурсовВалют();
	
	Для Каждого КурсНаДату Из СписокКурсовВалют Цикл
		Элементы.КурсВзаиморасчетов.СписокВыбора.Добавить(КурсНаДату.Значение, КурсНаДату.Представление);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСписокВыбораКурсВзаиморасчетов()

// Получает список курсов валют для списка выбора.
// 
// Возвращаемое значение:
//  СписокКурсовВалют - СписокЗначений
//
&НаСервере
Функция ПолучитьСписокКурсовВалют()
	
	СписокКурсовВалют = Новый СписокЗначений;
	
	Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		КурсНаДату = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаРасчетов, ДатаДокумента);
	Иначе
		КурсНаДату = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, ДатаДокумента);
	КонецЕсли;
	ШаблонСтроки = НСтр("ru = '%1 (на %2)'");
	СписокКурсовВалют.Добавить(КурсНаДату.Курс, СтрШаблон(ШаблонСтроки, Строка(КурсНаДату.Курс), Формат(ДатаДокумента, "ДФ = дд.ММ.гг")));
	Для ДеньМинус = 1 По 5 Цикл
		ДатаКурса = ДатаДокумента - (ДеньМинус * 86400);
		Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
			КурсНаДату = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаРасчетов, ДатаКурса);
		Иначе
			КурсНаДату = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, ДатаКурса);
		КонецЕсли;
		СписокКурсовВалют.Добавить(КурсНаДату.Курс, СтрШаблон(ШаблонСтроки, Строка(КурсНаДату.Курс), Формат(ДатаКурса, "ДФ = дд.ММ.гг")));
	КонецЦикла;
	
	СписокКурсовВалют.Добавить(0, НСтр("ru = '<Выбрать другую дату>'"));

	Возврат СписокКурсовВалют;
КонецФункции	

&НаКлиенте
Процедура КурсРасчетовОбработкаВыбораЗавершение(ДатаКурса, ДополнительныеПараметры) Экспорт
	Если ДатаКурса <> Неопределено Тогда
		КурсРасчетовОбработкаВыбораНаСервере(ДатаКурса);
		
		ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность, ПрямойКурс", 
			Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность, Объект.ПрямойКурс);
		ДанныеВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", 
			Объект.ВалютаРасчетов, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);		
				
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовТабличнойЧасти(
					Объект, 
					"РасшифровкаПлатежа",
					ДанныеДокумента,
					ДанныеВзаиморасчетов,
					ВалютаРегламентированногоУчета);
			
		ОбновитьПодвалФормы();
		СформироватьНадписьКурсоваяРазница();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура КурсРасчетовОбработкаВыбораНаСервере(ДатаКурса)
	
	Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		КурсНаДату = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаРасчетов, ДатаКурса);
	Иначе
		КурсНаДату = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, ДатаКурса);
	КонецЕсли;
	Объект.КурсВзаиморасчетов = КурсНаДату.Курс;
	Объект.КратностьВзаиморасчетов = КурсНаДату.Кратность;
	
КонецПроцедуры

// См. РаботаСКурсамиВалют.ПолучитьКурсВалюты.
&НаСервереБезКонтекста
Функция ПолучитьКурсВалюты(Валюта, ДатаДокумента)
	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, ДатаДокумента);
КонецФункции // ПолучитьКурсВалюты()

// Функция - Получить данные для печати
//
// Параметры:
//  ОбъектОбработки	 - СправочникСсылка	 - Оюрабатываемая ссылка (физ.лицо, банковский счет)
// 
// Возвращаемое значение:
//  ДанныеДляПечати - Структура
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДляПечати(ОбъектОбработки, Организация = Неопределено, Период = Неопределено)
	ДанныеДляПечати = Новый Структура("ПринятоОт, ПоДокументу", "", "");
	
	Если ТипЗнч(ОбъектОбработки) = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
		ДанныеДляПечати.ПринятоОт = ОбъектОбработки.Наименование;
		
		ДанныеФизЛица = БухгалтерскийУчетСервер.ДанныеФизЛица(Организация, ОбъектОбработки, Период);	
		СтрокаПоДокументу = СтрШаблон(НСтр("ru = '%1 Серия %2 №%3 выдан %4 от %5'"),
			ДанныеФизЛица.ДокументВид,
			ДанныеФизЛица.ДокументСерия,
			ДанныеФизЛица.ДокументНомер,
			ДанныеФизЛица.ДокументКемВыдан,
			Формат(ДанныеФизЛица.ДокументДатаВыдачи, "ДЛФ=DD"));
			
		ДанныеДляПечати.ПоДокументу = СтрокаПоДокументу;
	ИначеЕсли ТипЗнч(ОбъектОбработки) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДанныеДляПечати.ПринятоОт = ОбъектОбработки.НаименованиеПолное;
	ИначеЕсли ТипЗнч(ОбъектОбработки) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		ДанныеДляПечати.ПринятоОт = ОбъектОбработки.НомерСчета;
	КонецЕсли;
		
	Возврат ДанныеДляПечати;
КонецФункции // ПолучитьДанныеДляПечати()

// Формирует надпись курсовая разница
//
&НаКлиенте
Процедура СформироватьНадписьКурсоваяРазница()
	
	СуммаПлатежа 		= Окр(Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа") * Объект.Курс / Объект.Кратность, 2);
	СуммаВзаиморасчетов = Окр(Объект.РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов") * КурсВзаиморасчетовПоНацБанку / КратностьВзаиморасчетовПоНацБанку, 2);	
	
	ДанныеОСчетах = ПолучитьДанныеОСчетах(Объект.Касса, Объект.СчетРасчетов);
	
	СуммаКурсовойРазницы = СуммаПлатежа - СуммаВзаиморасчетов;
	Если Объект.КурсВзаиморасчетов = КурсВзаиморасчетовПоНацБанку Тогда
		СуммаКурсовойРазницы = 0;
	КонецЕсли;
	
	// Нет курсовой разницы
	Если СуммаКурсовойРазницы = 0 Тогда 
		Текст1 = "";	
		
	// Расход валюты, убыток
	ИначеЕсли НЕ ДанныеОСчетах.СчетПриходаВалютный И ДанныеОСчетах.СчетРасходаВалютый И СуммаКурсовойРазницы < 0 Тогда
		Текст1 = "Убыток";
		
	// Расход валюты, доход		
	ИначеЕсли НЕ ДанныеОСчетах.СчетПриходаВалютный И ДанныеОСчетах.СчетРасходаВалютый И СуммаКурсовойРазницы > 0 Тогда
		Текст1 = "Доход";	
		
	// Приход валюты, убыток	
	ИначеЕсли ДанныеОСчетах.СчетПриходаВалютный И НЕ ДанныеОСчетах.СчетРасходаВалютый И СуммаКурсовойРазницы < 0 Тогда
		Текст1 = "Убыток";		
		
	// Приход валюты, доход	
	ИначеЕсли ДанныеОСчетах.СчетПриходаВалютный И НЕ ДанныеОСчетах.СчетРасходаВалютый И СуммаКурсовойРазницы > 0 Тогда
		Текст1 = "Доход";
		
	// Валюта - Валюта, убыток	
	ИначеЕсли ДанныеОСчетах.СчетПриходаВалютный И ДанныеОСчетах.СчетРасходаВалютый И СуммаКурсовойРазницы < 0 Тогда
		Текст1 = "Убыток";			
		
	// Валюта - Валюта, доход		
	ИначеЕсли ДанныеОСчетах.СчетПриходаВалютный И ДанныеОСчетах.СчетРасходаВалютый И СуммаКурсовойРазницы > 0 Тогда
		Текст1 = "Доход";			
		
	Иначе
		Текст1 = "";
	КонецЕсли;
	
	Если Текст1 = "" Тогда
		Текст2 = "";
		Элементы.КурсоваяРазница.Заголовок = "";
	Иначе
		Текст2 = СтрШаблон(НСтр("ru = '%1 - %2 = %3'"), СуммаПлатежа, СуммаВзаиморасчетов, СуммаКурсовойРазницы);
		Элементы.КурсоваяРазница.Заголовок = СтрШаблон(НСтр("ru = 'Операционная КР: %1 %2'"), Текст1, Текст2); 
	КонецЕсли;	
КонецПроцедуры

// Получает набор данных с сервера для процедуры СформироватьНадписьКурсоваяРазница.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеОСчетах(Касса, СчетРасчетов)
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"СчетПриходаВалютный",
		Касса.СчетУчета.Валютный);
		
	СтруктураДанные.Вставить(
		"СчетРасходаВалютый",
		СчетРасчетов.Валютный);
		
	Возврат СтруктураДанные;	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьДатуОплаты(СтруктураПараметров)
	
	ДокументОснованиеОбъект = СтруктураПараметров.ДокументОснование.ПолучитьОбъект();
	ДокументОснованиеУспешноЗаблокирован = Истина;
	
	Попытка
		ДокументОснованиеОбъект.Заблокировать();
	Исключение
		ДокументОснованиеУспешноЗаблокирован = Ложь;
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось заблокировать %1: %2, для заполнения даты оплаты, по причине:
				|%3'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
				СтруктураПараметров.ДокументОснование, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Предупреждение,, ДокументОснованиеОбъект, ОписаниеОшибки());
	КонецПопытки;
	
	// Если удалось заблокировать, заполним дату оплаты.
	Если ДокументОснованиеУспешноЗаблокирован Тогда
		ДокументОснованиеОбъект.ДатаОплаты = СтруктураПараметров.Дата;
		ДокументОснованиеОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДатуРКО(Документ)

	Возврат Документ.Дата;	

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииРаботаССубконто

&НаСервере
Процедура УстановитьНачальныеСвойстваСубконтоТаблицы()
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоТаблицы(
		Объект.ПрочиеПлатежи,
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"ПрочиеПлатежиСубконто", "Субконто", "СчетРасчетов");
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	Результат.СкрыватьСубконто = Ложь;
	
	МассивПараметровВыбора = БухгалтерскийУчетКлиентСервер.ПолучитьМассивПараметровВыбораДоговора(Форма.Объект.Ссылка, 
		Форма.Объект.ВидОперации);  
	Результат.ДопРеквизиты.Вставить("ВидДоговора", Новый ФиксированныйМассив(МассивПараметровВыбора));

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	СтрокаТаблицы = Элементы.ПрочиеПлатежи.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСубконто(
		ЭтотОбъект, 
		СтрокаТаблицы,
		НомерСубконто, 
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Элементы.ПрочиеПлатежи.ТекущиеДанные, 
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
