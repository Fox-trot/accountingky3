
#Область ОбработчикиСлужебные

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервереБезКонтекста
Функция ПроверкаАктуальностиКурсаВалютНаСервере()
	Возврат РаботаСКурсамиВалют.КурсыАктуальны(); 
КонецФункции

&НаКлиенте
Процедура ОповеститьЧтоКурсывалютНеАктуальны()
	ВалютаКон = ПолучитьВалютуКассы(Объект.Касса);
	Если НЕ Объект.Проведен И НЕ БылоОповещениеКурсыВалютУстарели И 
		(ВалютаКон <> ВалютаРегламентированногоУчета ИЛИ ВалютаКон <> ВалютаРегламентированногоУчета) 
		И ПроверкаАктуальностиКурсаВалютНаСервере() Тогда
		РаботаСКурсамиВалютКлиент.ОповеститьКурсыУстарели();
		БылоОповещениеКурсыВалютУстарели = Истина;
	КонецЕсли;
КонецПроцедуры // ОповеститьЧтоКурсывалютНеАктуальны()

// Установка знанчений счетов учета с контрагентами
//
&НаКлиенте
Процедура УстановитьСчетаУчетаРасчетовСКонтрагентом(СтрокаТабличнойЧасти)
		
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтНесколькихКонтрагентов") Тогда
		
		ДоговорКонтрагента 	= СтрокаТабличнойЧасти.ДоговорКонтрагента;
		СчетаУчета			= БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, СтрокаТабличнойЧасти.Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента);			
		СтрокаТабличнойЧасти.СчетУчета    = СчетаУчета.СчетРасчетовПокупателя;
		
	Иначе	
		ДоговорКонтрагента 	= СтрокаТабличнойЧасти.ДоговорКонтрагента;
		СчетаУчета			= БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента); //ПолучитьСчетаУчетаСКонтрагентами(Объект);			                                                       					
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтПокупателя") тогда			
			
			СтрокаТабличнойЧасти.СчетУчета    = СчетаУчета.СчетРасчетовПокупателя;										
			
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика") тогда			
			СтрокаТабличнойЧасти.СчетУчета    = СчетаУчета.СчетРасчетовПоставщика;							
			
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РасчетыПоЗаймам") тогда			
			СтрокаТабличнойЧасти.СчетУчета    = СчетаУчета.СчетРасчетовПоЗаймам;							
			
		КонецЕсли;
			
	КонецЕсли;
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВалютуКассы(Касса)

	Возврат	Касса.ВалютаДенежныхСредств;

КонецФункции // ()

&НаСервереБезКонтекста
Функция ПолучитьВалютуБанковскогоСчета(БанковскийСчет)

	Возврат	БанковскийСчет.ВалютаДенежныхСредств;

КонецФункции // ()

&НаСервереБезКонтекста
Функция ПолучитьСтатьюДДСИзОперации(Операция)

	Возврат	Операция.СтатьяДвиженияДенежныхСредств;

КонецФункции // ПолучитьСтатьюДДСИзОперации()

&НаСервереБезКонтекста
Функция ПолучитьВидОперации(Операция)
	
	Возврат Операция.ВидОперации;

КонецФункции // ()

&НаСервереБезКонтекста
Функция ВозвратПоВедомости(Операция)
	
	Возврат Операция.Ведомость;

КонецФункции // ()

&НаСервереБезКонтекста
Функция ПолучитьВалютуДоговораНаСервере(Договор)

	Возврат	Договор.ВалютаРасчетов;

КонецФункции // ПолучитьСтатьюДДСИзОперации()

&НаСервереБезКонтекста
Функция ПолучитьВидДоговораПоОперацииНаСервере(Операция) 
	Если Операция.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаОтПокупателя 
		ИЛИ Операция.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаОтНесколькихКонтрагентов Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;	
		
	ИначеЕсли Операция.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;	
		
	ИначеЕсли Операция.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоЗаймам Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		
	ИначеЕсли Операция.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоЗаймам Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // ПолучитьВидДоговораПоОперации()

&НаСервере
Процедура УстановитьКурсВалютыДокумента()
	
	ВалютаДокумента = Объект.Касса.ВалютаДенежныхСредств;
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		Возврат;	
	КонецЕсли;
	КурсСтруктура		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	Объект.КурсКассы	= КурсСтруктура.Курс;
	Если НЕ ЗначениеЗаполнено(Объект.КурсКассы) Тогда
		Объект.КурсКассы = 1;	
	КонецЕсли;
	КурсВзаиморасчетов	= Окр(КурсСтруктура.Курс / Объект.КурсДоговора, 4);	

КонецПроцедуры // УстановитьКурсВалютыДокумента()

&НаСервере
Процедура УстановитьКурсДоговора()
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДоговора) Тогда
		Возврат;	
	КонецЕсли;

	КурсСтруктура		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДоговора, ДатаДокумента);
	Объект.КурсДоговора	= КурсСтруктура.Курс;
	Если НЕ ЗначениеЗаполнено(Объект.КурсДоговора) Тогда
		Объект.КурсДоговора = 1;	
	КонецЕсли;
	
КонецПроцедуры // УстановитьКурсВалютыДоговора()

&НаКлиенте
Процедура ПолучитьКурсВзаиморасчетов()
	СложныйКурс = 1;
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		КурсВзаиморасчетов 	= 1;
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
		Если Объект.КурсКассы >= Объект.КурсДоговора Тогда
			СложныйКурс	= Окр(Объект.КурсКассы / Объект.КурсДоговора, 4);
			ПрямойКурс  = Ложь;	
		Иначе
			СложныйКурс	= Окр(Объект.КурсДоговора / Объект.КурсКассы, 4);
			ПрямойКурс  = Истина;
		КонецЕсли;
		КурсВзаиморасчетов 	= СложныйКурс;
	Иначе
		КурсВзаиморасчетов 	= 1;
	КонецЕсли;
			
КонецПроцедуры // 

&НаКлиенте
Процедура УстановитьКурсВзаиморасчетовТабличнойЧастиРасшифровкаПлатежа()

	Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = КурсВзаиморасчетов;
	КонецЦикла;	

КонецПроцедуры // ()

&НаСервереБезКонтекста
Функция ПолучитьСчетУчетаБанковскогоСчетаНаСервере(БанковскийСчет)

	Возврат БанковскийСчет.СчетУчета;	

КонецФункции // ПолучитьСчетУчетаБанковскогоСчетаНаСервере()()

&НаСервереБезКонтекста
Функция ПолучитьДокументФизЛица(Организация, ФизЛицо, Дата)
	
	СтруктураФизЛицо 	= БухгалтерскийУчетСервер.ДанныеФизЛица(Организация, ФизЛицо, Дата);	
	СтрокаДокумент 		= "" + СтруктураФизЛицо.ДокументВид 
						+ ", Серия " + СтруктураФизЛицо.ДокументСерия 
						+ ", №" + СтруктураФизЛицо.ДокументНомер 
						+ ", выдан " + СтруктураФизЛицо.ДокументКемВыдан 
						+ ", от " + Формат(СтруктураФизЛицо.ДокументДатаВыдачи, "ДЛФ=DD");
	
	Возврат СтрокаДокумент;
	
КонецФункции // ПолучитьДокументФизЛица(ФизЛицо)

&НаСервереБезКонтекста
Функция ПолучитьПолноеНаименованиеКонтрагента(Контрагент)

	Возврат Контрагент.НаименованиеПолное;	

КонецФункции // ПолучитьПолноеНаименованиеКонтрагента(Объект.Контрагент)()

// Процедура - Изменить параметры выбора полей субконто
//
// Параметры:
//  Форма	 - 	 - 
//  Суффикс	 - 	 - 
//  ИмяСчета - 	 - 
&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Форма.Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, "Субконто" + Суффикс + "%Индекс%", "ПрочиеРасходыСубконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета",   ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", ДанныеОбъекта.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	БухгалтерскийУчетКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоФизЛицо(Контрагент)

	Возврат Контрагент.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;	

КонецФункции // ЭтоФизЛицо()

&НаСервереБезКонтекста
Функция ПолучитьФизЛицоКонтрагента(Контрагент)
	
	Возврат Контрагент.ФизЛицо;
	
КонецФункции // ПолучитьФизЛицоКонтрагента(Контрагент)()

//Установка доступности субконто для существующих строк табличной части
&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "Субконто1", "Субконто2", "Субконто3");
	
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПрочиеРасходы Цикл
		
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СтрокаТабличнойЧасти.СчетУчета, СтрокаТабличнойЧасти, ПоляОбъекта, Истина);
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТабличнойЧасти, "Субконто" + "%Индекс%", "СчетУчета");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТабличнойЧасти, "Субконто" + "%Индекс%", "ПрочиеРасходыСубконто" + "%Индекс%", ПараметрыДокумента);	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаОтбораДоговораКонтрагента()
	Если Объект.РасшифровкаПлатежа.Количество() = 1 И ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
		НовыйМассив = Новый Массив();
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВалютаРасчетов", ВалютаДоговораКонтрагентаРасшифровкаПлатежа);	    
		НовыйМассив.Добавить(НовыйПараметр);		
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика") Тогда
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));	    
		    НовыйМассив.Добавить(НовыйПараметр);			
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтПокупателя") 
				ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтНесколькихКонтрагентов") Тогда			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));	    
		    НовыйМассив.Добавить(НовыйПараметр);			
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РасчетыПоЗаймам") Тогда			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));	    
		    НовыйМассив.Добавить(НовыйПараметр);
		КонецЕсли;
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = НовыеПараметры;

	ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
		НовыйМассив = Новый Массив();
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));	    
	    НовыйМассив.Добавить(НовыйПараметр);
		
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = НовыеПараметры;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаОтбораДоговораКонтрагентаВТекущейстроке()
	НомерСтроки = Элементы.РасшифровкаПлатежа.ТекущиеДанные.НомерСтроки;	
	НовыйМассив = Новый Массив();
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));	    
	    НовыйМассив.Добавить(НовыйПараметр);			
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтПокупателя") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтНесколькихКонтрагентов") Тогда			
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));	    
	    НовыйМассив.Добавить(НовыйПараметр);			
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РасчетыПоЗаймам") Тогда			
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));	    
	    НовыйМассив.Добавить(НовыйПараметр);			
	КонецЕсли;	
	
	Если НомерСтроки > 1 Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВалютаРасчетов", ВалютаДоговораКонтрагентаРасшифровкаПлатежа);	    
	    НовыйМассив.Добавить(НовыйПараметр);		
	КонецЕсли;

	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаСервере
Процедура УстановкаСвязейПараметровВыбораДоговораКонтрагентаОперацияОплатаОтНесколькихКонтрагентов()
	НовыйМассив = Новый Массив();
	
	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.РасшифровкаПлатежа.ТекущиеДанные.Контрагент");	    
	НовыйМассив.Добавить(НоваяСвязь);			
	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация");	    
	НовыйМассив.Добавить(НоваяСвязь);		

	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.СвязиПараметровВыбора = НовыеСвязи;	

КонецПроцедуры // УстановкаСвязейПараметровВыбораДоговораКонтрагентаОперацияОплатаОтНесколькихКонтрагентов()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ЗаполнитьРеквизитыВыдатьИПоДокументу()
	Объект.ПринятоОт = ПолучитьПолноеНаименованиеКонтрагента(Объект.Контрагент);
	Если Объект.Контрагент.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда	
		Объект.ПоДокументу 	= ПолучитьДокументФизЛица(Объект.Организация, Объект.Контрагент.ФизЛицо, Объект.Дата);
	КонецЕсли;
КонецПроцедуры // ()

&НаСервереБезКонтекста
Функция ПолучитьКурсВалютыНаСервере(Валюта, Дата)

	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Дата);	

КонецФункции // ()

&НаКлиенте
Процедура УстановитьКурсОбменаКонвертации()

	Если Объект.КурсВалютыКонвертации >= Объект.КурсКассы Тогда
		
		Если Объект.КурсКассы = 0 Тогда
			Возврат;
		КонецЕсли;
		Объект.ПрямойКурс 		= Ложь;	
		Объект.КурсОбмена 		= Окр(Объект.КурсВалютыКонвертации / Объект.КурсКассы, 4);
		Объект.КросскурсНБКР 	= Объект.КурсОбмена;
		
	Иначе
		
		Если Объект.КурсВалютыКонвертации = 0 Тогда
			Возврат;
		КонецЕсли;		
		Объект.ПрямойКурс 		= Истина;	
		Объект.КурсОбмена 		= Окр(Объект.КурсКассы / Объект.КурсВалютыКонвертации, 4);
		Объект.КросскурсНБКР 	= Объект.КурсОбмена;
		
	КонецЕсли;
	
	ПоказатьКР()
	
КонецПроцедуры // ()

&НаКлиенте
Процедура УстановитьКурсОбменаКонвертацииПриИзмененииСуммыДокумента()
	
	Если Объект.КурсВалютыКонвертации >= Объект.КурсКассы Тогда		
		Если Объект.КурсКассы = 0 Тогда
			Возврат;
		КонецЕсли;
		Объект.ПрямойКурс 		= Ложь;
		Объект.КурсОбмена 		= Окр(Объект.СуммаДокумента / Объект.СуммаКонвертации, 4);
		Объект.КросскурсНБКР 	= Окр(Объект.КурсВалютыКонвертации / Объект.КурсКассы, 4);		
	Иначе
		Если Объект.КурсВалютыКонвертации = 0 Тогда
			Возврат;
		КонецЕсли;		
		Объект.ПрямойКурс 		= Истина;
		Объект.КурсОбмена 		= Окр(Объект.СуммаКонвертации / Объект.СуммаДокумента, 4);
		Объект.КросскурсНБКР 	= Окр(Объект.КурсКассы / Объект.КурсВалютыКонвертации, 4);		
	КонецЕсли;
		
	ПоказатьКР()
	
КонецПроцедуры // ()

&НаКлиенте
Процедура УстановитьКурсОбменаКонвертацииПриИзменении()
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.Конвертация") Тогда
		УстановитьКурсВалютыКонвертации();
		УстановитьКурсОбменаКонвертации();
		ПересчетСуммыДокументаПриКонвертации();
	КонецЕсли;

КонецПроцедуры // ()

&НаКлиенте
Процедура УстановитьКурсВалютыКонвертации()
	Если ЗначениеЗаполнено(Объект.ВалютаКонвертации) Тогда
		КурсСтруктура = ПолучитьКурсВалютыНаСервере(Объект.ВалютаКонвертации, ДатаДокумента);
		Объект.КурсВалютыКонвертации = КурсСтруктура.Курс;
	КонецЕсли;

КонецПроцедуры // УстановитьКурсВалютыКонвертации()

&НаКлиенте
Процедура ПересчетСуммыДокументаПриКонвертации()
	Если Объект.ПрямойКурс Тогда
		Объект.СуммаДокумента = Объект.СуммаКонвертации / Объект.КурсОбмена;	
	Иначе	
	    Объект.СуммаДокумента = Объект.СуммаКонвертации * Объект.КурсОбмена;
	КонецЕсли;
КонецПроцедуры // ПересчетСуммыДокументаПриКонвертации()

&НаСервереБезКонтекста
Функция ПолучитьНаименованиеВалюты(Валюта)
	Возврат Валюта.Наименование	
КонецФункции //

&НаСервереБезКонтекста
Функция ПолучитьКодСчетаУчета(СчетУчета)

	Возврат СчетУчета.Код	

КонецФункции // ПолучитьКодСчетаУчета()

&НаКлиенте
Процедура ПоказатьКР()
	
	СуммаУчетнаяПрихода = Объект.СуммаДокумента * Объект.КурсКассы;
	СуммаУчетнаяРасхода = Объект.СуммаКонвертации * Объект.КурсВалютыКонвертации;
	КурсПрихода 	= Объект.КурсКассы;
	КурсРасхода 	= Объект.КурсВалютыКонвертации;
	ВалютаПрихода   = Объект.ВалютаДенежныхСредств;
	ВалютаРасхода   = Объект.ВалютаКонвертации;	
	СчетУчета 		= Объект.СчетУчета;
	КодСчетаУчета 	= ПолучитьКодСчетаУчета(Объект.СчетУчета);

	СуммаКР 		= СуммаУчетнаяПрихода - СуммаУчетнаяРасхода;
	Если Объект.КурсОбмена = Объект.КросскурсНБКР Тогда
		СуммаКР = 0;
		Если НЕ Объект.СуммаКР = 0 Тогда
			Объект.СуммаКР = 0;
		КонецЕсли;
	ИначеЕсли НЕ СуммаКР = Объект.СуммаКР Тогда
		Объект.СуммаКР 	= СуммаКР;
	КонецЕсли;
	
	// Нет курсовой разницы
	Если СуммаКР = 0 Тогда
		Текст2 = "";
		Текст3 = "";
		
	// Расход валюты, убыток
	ИначеЕсли ВалютаПрихода = ВалютаРегламентированногоУчета И НЕ ВалютаРасхода = ВалютаРегламентированногоУчета И СуммаКР < 0 Тогда
		Текст2 = "Курс НБКР " + СокрЛП(Строка(КурсРасхода)) + " сом/" + ПолучитьНаименованиеВалюты(ВалютаРасхода);
		Текст3 = "(убыток " + КодСчетаУчета + "): " + Строка(-СуммаКР) + " сом";
		
		// Расход валюты, доход		
	ИначеЕсли ВалютаПрихода = ВалютаРегламентированногоУчета И НЕ ВалютаРасхода = ВалютаРегламентированногоУчета И СуммаКР > 0 Тогда
		Текст2 = "Курс НБКР " + СокрЛП(Строка(КурсРасхода)) + " сом/" + ПолучитьНаименованиеВалюты(ВалютаРасхода);
		Текст3 = "(доход " + КодСчетаУчета + "): " + Строка(СуммаКР) + " сом";	
		
		// Приход валюты, убыток	
	ИначеЕсли НЕ ВалютаПрихода = ВалютаРегламентированногоУчета И ВалютаРасхода = ВалютаРегламентированногоУчета И СуммаКР < 0 Тогда
		Текст2 = "Курс НБКР " + СокрЛП(Строка(КурсПрихода)) + " сом/" + ПолучитьНаименованиеВалюты(ВалютаПрихода);
		Текст3 = "(убыток " + КодСчетаУчета + "): " + Строка(-СуммаКР) + " сом";		
		
		// Приход валюты, доход	
	ИначеЕсли НЕ ВалютаПрихода = ВалютаРегламентированногоУчета И ВалютаРасхода = ВалютаРегламентированногоУчета И СуммаКР > 0 Тогда
		Текст2 = "Курс НБКР " + СокрЛП(Строка(КурсПрихода)) + " сом/" + ПолучитьНаименованиеВалюты(ВалютаПрихода);
		Текст3 = "(доход " + КодСчетаУчета + "): " + Строка(+СуммаКР) + " сом";				
		
		// Валюта - Валюта, убыток	
	ИначеЕсли НЕ ВалютаПрихода = ВалютаРегламентированногоУчета И НЕ ВалютаРасхода = ВалютаРегламентированногоУчета И КурсПрихода < КурсРасхода Тогда
		Текст2 = "Кросскурс НБКР " + Объект.КросскурсНБКР + " " + ПолучитьНаименованиеВалюты(ВалютаПрихода) + "/" + ПолучитьНаименованиеВалюты(ВалютаРасхода);
		Текст3 = "(убыток " + КодСчетаУчета + "): " + Строка(-СуммаКР) + " сом";			
		
		// Валюта - Валюта, доход		
	ИначеЕсли НЕ ВалютаПрихода = ВалютаРегламентированногоУчета И НЕ ВалютаРасхода = ВалютаРегламентированногоУчета И КурсПрихода > КурсРасхода Тогда
		Текст2 = "Кросскурс НБКР " + Объект.КросскурсНБКР + " " + ПолучитьНаименованиеВалюты(ВалютаРасхода) + "/" + ПолучитьНаименованиеВалюты(ВалютаПрихода);
		Текст3 = "(доход " + КодСчетаУчета + "): " + Строка(+СуммаКР) + " сом";			
		
		// Сомы - Сомы	
	Иначе
		Текст2 = "";
		Текст3 = "";
	КонецЕсли;
	
	Элементы.НадписьКурсНБКР.Заголовок 		= Текст2 + ?(Текст2 = "", "", ". ") + ?(Текст3 = "", "", "Операционная КР ") + Текст3;
	
КонецПроцедуры
#КонецОбласти

#Область УправлениеВнешнимВидом

&НаКлиенте
// Видимость и доступность всех элементов формы
//
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	ВалютаРегламентированногоУчета 									= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Элементы.Получатель.Видимость 									= Истина;
	Элементы.Получатель.Заголовок                           	= "Покупатель";
	
	Элементы.ФизЛицо.Видимость										= Ложь;
	Элементы.СчетУчета.Заголовок									= "Счет учета покупателя";
	Элементы.СчетУчета.Видимость 									= Истина;
	Элементы.БанковскийСчет.Видимость								= Ложь;
	Элементы.СчетУчетаБанковскогоСчета.Видимость 					= Истина;
	Элементы.СуммаДокумента.Заголовок 								= "Сумма";
	Элементы.СуммаДокумента.ТолькоПросмотр 							= Ложь;
	Элементы.Статья.Видимость 										= Ложь;
	Элементы.Курс.Видимость											= Ложь;
	
	Элементы.СтраницыПанель.ТекущаяСтраница	 						= Элементы.СтраницаРасшифровкаПлатежа;
	Элементы.СтраницаРасшифровкаПлатежа.Видимость 					= Ложь;
	Элементы.СтраницаВыдачаВПодотчет.Видимость						= Ложь;
	Элементы.СтраницаПрочиеРасходы.Видимость						= Ложь;
	Элементы.ВозвратЗаработнойПлаты.Видимость						= Ложь;
	Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость		= Ложь;	
	
	Элементы.РасшифровкаПлатежаКонтрагент.Видимость					= Ложь;
	Элементы.ГруппаКонвертация.Видимость                            = Ложь;
	
	ВидОперации = ПолучитьВидОперации(Объект.Операция);
	
	Если НЕ ЗначениеЗаполнено(Объект.Операция) ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтПокупателя") Тогда
		Элементы.СтраницаРасшифровкаПлатежа.Видимость 				= Истина;
		Элементы.СчетУчета.Видимость 								= Ложь;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика") Тогда
		Элементы.Получатель.Заголовок								= "Поставщик";
		Элементы.СчетУчета.Видимость 								= Ложь;
		//Видимость ТЧ
		Элементы.СтраницаРасшифровкаПлатежа.Видимость 				= Истина;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РасчетыПоЗаймам") Тогда
		Элементы.Получатель.Заголовок								= "Контрагент";
		Элементы.СчетУчета.Видимость 								= Ложь;
		//Видимость ТЧ
		Элементы.СтраницаРасшифровкаПлатежа.Видимость 				= Истина;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтНесколькихКонтрагентов") Тогда
		Элементы.Получатель.Видимость								= Ложь;
		Элементы.СчетУчета.Видимость 								= Ложь;
		//Видимость ТЧ
		Элементы.СтраницаРасшифровкаПлатежа.Видимость 				= Истина;
		Элементы.РасшифровкаПлатежаКонтрагент.Видимость				= Истина;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеНаличныхВБанке") Тогда
		Элементы.Получатель.Видимость 								= Ложь;
		Элементы.БанковскийСчет.Видимость 							= Истина;
		Элементы.СчетУчетаБанковскогоСчета.Видимость 				= Истина;
		Элементы.СчетУчета.Видимость 								= Ложь;
		Элементы.СуммаДокумента.ТолькоПросмотр 						= Ложь;
		//Видимость ТЧ
		Элементы.СтраницыПанель.ТекущаяСтраница	 					= Элементы.СтраницаДополнительно;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПрочийПриход") Тогда
		Элементы.СтраницаПрочиеРасходы.Видимость					= Истина;
		Элементы.Получатель.Видимость 								= Ложь;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтСотрудника") Тогда
		Элементы.СчетУчета.Заголовок								= "Счет учета сотрудника";
		Элементы.Получатель.Видимость 								= Ложь;
		Элементы.ВозвратЗаработнойПлатыВедомость.Видимость          = ВозвратПоВедомости(Объект.Операция);
		//Видимость ТЧ
		Элементы.ВозвратЗаработнойПлаты.Видимость					= Истина;	
				
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПодотчетника") Тогда
		Элементы.Получатель.Видимость 								= Ложь;
		Элементы.СчетУчета.Заголовок								= "Счет учета подотчетника";
		Элементы.ФизЛицо.Видимость									= Истина;
		Элементы.ФизЛицо.Заголовок									= "Подотчетник";
		//Видимость ТЧ
		Элементы.СтраницаВыдачаВПодотчет.Видимость 					= Истина;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.Конвертация") Тогда
		Элементы.ГруппаКонвертация.Видимость                        = Истина;
		Элементы.Получатель.Видимость 								= Ложь;
		Элементы.СчетУчетаБанковскогоСчета.Видимость 				= Ложь;
		Элементы.СчетУчета.Видимость 								= Истина;
		Элементы.СчетУчета.Заголовок								= "Счет учета конвертации";
		Элементы.СуммаДокумента.ТолькоПросмотр 						= Ложь;
		//Видимость ТЧ
		Элементы.СтраницыПанель.ТекущаяСтраница	 					= Элементы.СтраницаДополнительно;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Операция) ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтПокупателя") 
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика") 
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РасчетыПоЗаймам") 
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтНесколькихКонтрагентов") Тогда
		
		Элементы.РасшифровкаПлатежаВалютаДоговора.Видимость 		= Ложь;
		Элементы.РасшифровкаПлатежаКурс.Видимость 					= Ложь;
		Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
			Если Объект.ВалютаДоговора <> ВалютаДенежныхСредств Тогда
				Элементы.РасшифровкаПлатежаВалютаДоговора.Видимость = Истина;
				Элементы.РасшифровкаПлатежаКурс.Видимость 			= Истина;
				Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ВалютаДенежныхСредств <> ВалютаРегламентированногоУчета Тогда		
			Элементы.Курс.Видимость									= Истина;		
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()  

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
			
	// Установка реквизитов формы.
	Организация             = Объект.Организация;
	ВалютаДенежныхСредств 	= Объект.Касса.ВалютаДенежныхСредств;
	Операция 				= Объект.Операция;
	ВидОперации             = Объект.Операция.ВидОперации;
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		ВалютаДоговораКонтрагентаРасшифровкаПлатежа = Объект.ВалютаДоговора;
		ДоговорВПервойСтроке = Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента;
	КонецЕсли;
	
	//Установить доступность субконто в табличной части ПрочиеРасходы
	УстановитьДоступностьСубконто();
	
	БухгалтерскийУчетСервер.ОпределитьТипПоследнегоОткрытогоДокумента(Объект); 
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаВажныеКоманды);
	// Конец СтандартныеПодсистемы.Печать	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	Если НЕ Объект.СуммаКР = 0 И ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.Конвертация") Тогда
		ПоказатьКР();	
	КонецЕсли;
	ПолучитьКурсВзаиморасчетов();
	
	//Установить отбора в табличной части РасшифровкаПлатежа
	УстановкаОтбораДоговораКонтрагента();	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СтатьяДДС = ПолучитьСтатьюДДСИзОперации(Операция);
	Если ТипЗнч(ВыбранноеЗначение) = ТИП("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("ВидПодбора") И ВыбранноеЗначение.ВидПодбора = "ПоВедомостиЗП" Тогда
			Для каждого СтрокаТаблицы Из ВыбранноеЗначение.ТаблицаДанных Цикл
				СтрокаТабличнойЧасти = Объект.ВозвратЗаработнойПлаты.Добавить();	
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы);
				СтрокаТабличнойЧасти.СуммаПлатежа = СтрокаТаблицы.СуммаКВыплате;
				СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств = СтатьяДДС;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьДоступностьСубконто();
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	// ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ОповещениеОбИзмененииДолга");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборПоВедомости(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Дата", ДатаДокумента);
	ОткрытьФорму("Документ.ПриходныйКассовыйОрдер.Форма.ПодборПоВедомости", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	Объект.СчетУчета 	= ПолучитьСчетУчетаБанковскогоСчетаНаСервере(Объект.БанковскийСчет);
	Объект.ПринятоОт 	= ?(ЗначениеЗаполнено(Объект.БанковскийСчет),  "р/с " + Объект.БанковскийСчет, "");
КонецПроцедуры

&НаКлиенте
Процедура ВалютаКонвертацииПриИзменении(Элемент)
	УстановитьКурсВалютыКонвертации();
	УстановитьКурсОбменаКонвертации();
	ПересчетСуммыДокументаПриКонвертации();
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	УстановитьКурсОбменаКонвертацииПриИзмененииСуммыДокумента()
КонецПроцедуры

// Изменение значений реквизитов формы, видимости полей в зависимости от вида операции
//
&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	Операция 			= Объект.Операция;
	ВидОперации 		= ПолучитьВидОперации(Операция);	
	Объект.Основание 	= Строка(Объект.Операция);
	
	ОчисткаРеквизитовИТабличныхЧастей();	
	УстановитьДоступностьСубконто();	

	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПодотчетника") 
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтСотрудника")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПрочийПриход") Тогда
		
		Объект.СчетУчета = ПолучитьСчетУчетаОперацииНаСервере(Операция);
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.Конвертация") Тогда		
		
		Объект.СчетУчета 						= ПолучитьСчетУчетаОперацииНаСервере(Операция);
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеНаличныхВБанке") Тогда		
		СчетУчетаБС = ПолучитьСчетУчетаБанковскогоСчетаНаСервере(Объект.БанковскийСчет);
		Если ЗначениеЗаполнено(СчетУчетаБС) Тогда
			Объект.СчетУчета = СчетУчетаБС;					
		Иначе
			Объект.СчетУчета = ПолучитьСчетУчетаОперацииНаСервере(Операция);			
		КонецЕсли;			
	КонецЕсли;

	УстановитьВидимостьДоступностьЭлементов(); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСчетУчетаОперацииНаСервере(Операция)
	
	Возврат Операция.СчетУчета;

КонецФункции // ()

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
	УстановитьКурсВалютыДокумента();
	УстановитьКурсВзаиморасчетовТабличнойЧастиРасшифровкаПлатежа();
	ПересчетТабличнойЧастиРасшифровкаПлатежа();
	УстановитьКурсОбменаКонвертацииПриИзменении();
	ПересчетСуммыДокумента();
	
КонецПроцедуры

//Процедура - обработчик события ПриИзменении поля ввода Организация
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Если Объект.Организация = Организация Тогда
		Возврат;
	КонецЕсли;
	Организация = Объект.Организация;
	ОчисткаРеквизитовИТабличныхЧастей();
	
	Объект.Номер = "";
	БухгалтерскийУчетСервер.ПроверитьСуществованиеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	Объект.Касса = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнуюКассуОрганизации(Объект.Организация, ВалютаРегламентированногоУчета);
	
	ПересчетТабличнойЧастиРасшифровкаПлатежа();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Получатель
//
&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	ОчисткаРеквизитовИТабличныхЧастей();
	ПересчетТабличнойЧастиРасшифровкаПлатежа();
	ЗаполнитьРеквизитыВыдатьИПоДокументу();
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	ВалютаДенежныхСредств 			= ПолучитьВалютуКассы(Объект.Касса);
	Объект.ВалютаДенежныхСредств 	= ВалютаДенежныхСредств;	
	УстановитьКурсВалютыДокумента();
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтПокупателя") 
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика") 
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РасчетыПоЗаймам") 
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтНесколькихКонтрагентов") Тогда			
		ПолучитьКурсВзаиморасчетов();
		УстановитьКурсВзаиморасчетовТабличнойЧастиРасшифровкаПлатежа();
		ПересчетТабличнойЧастиРасшифровкаПлатежа();	
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.Конвертация") Тогда
		УстановитьКурсОбменаКонвертацииПриИзменении();
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеНаличныхВБанке") Тогда
		Если ЗначениеЗаполнено(Объект.БанковскийСчет) И НЕ ПолучитьВалютуБанковскогоСчета(Объект.БанковскийСчет) = ВалютаДенежныхСредств Тогда
			Объект.БанковскийСчет = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");	
		КонецЕсли;
		
	КонецЕсли;
	ПересчетСуммыДокумента();
	
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	Объект.ПринятоОт 	= Объект.ФизЛицо;
	Объект.ПоДокументу 	= ПолучитьДокументФизЛица(Объект.Организация, Объект.ФизЛицо, Объект.Дата);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТабличныхЧастей

&НаКлиенте
Процедура ВыдачаВПодотчетПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти 								= Элемент.ТекущиеДанные;	
	    СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   = ПолучитьСтатьюДДСИзОперации(Операция);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти 								= Элемент.ТекущиеДанные;	
		СтрокаТабличнойЧасти.СчетУчета 						= ПолучитьСчетУчетаОперацииНаСервере(Операция);
	    СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   = ПолучитьСтатьюДДСИзОперации(Операция);
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
									 "Субконто1", "Субконто2", "Субконто3");
		БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетУчета, СтрокаТабличнойЧасти, ПоляОбъекта, Истина);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)	
	Если НоваяСтрока Тогда						
		СтрокаТабличнойЧасти 									= Элемент.ТекущиеДанные;	
	    СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   	= ПолучитьСтатьюДДСИзОперации(Операция);
		
		Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			ВидДоговораПоОперации 					= ПолучитьВидДоговораПоОперацииНаСервере(Объект.Операция);
			СтруктураДоговорКонтрагента             = БухгалтерскийУчетСервер.ПолучитьДоговорКонтрагента(Объект.Организация, 
																										Объект.Контрагент, 
																										ВалютаДенежныхСредств, 
																										ВидДоговораПоОперации);
			Если ЗначениеЗаполнено(СтруктураДоговорКонтрагента) Тогда
				СтрокаТабличнойЧасти.ДоговорКонтрагента = СтруктураДоговорКонтрагента.ДоговорКонтрагента;
			КонецЕсли;
			ДоговорВПервойСтроке = Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента;
			ВалютаДоговораКонтрагентаРасшифровкаПлатежа = ПолучитьВалютуДоговораНаСервере(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
			Если ЗначениеЗаполнено(ВалютаДоговораКонтрагентаРасшифровкаПлатежа) И Объект.ВалютаДоговора <> ВалютаДоговораКонтрагентаРасшифровкаПлатежа Тогда
				Объект.ВалютаДоговора = ВалютаДоговораКонтрагентаРасшифровкаПлатежа;
			Иначе
				Объект.ВалютаДоговора = ВалютаРегламентированногоУчета;
			КонецЕсли;
			ПолучитьКурсВзаиморасчетов();
		Иначе
			Если НЕ ВидОперации =ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтНесколькихКонтрагентов") Тогда
				СтрокаТабличнойЧасти.ДоговорКонтрагента 	= Объект.РасшифровкаПлатежа[СтрокаТабличнойЧасти.НомерСтроки - 2].ДоговорКонтрагента;
			КонецЕсли;						
		КонецЕсли;
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = КурсВзаиморасчетов;
		СтрокаТабличнойЧасти.ПрямойКурс 		= ПрямойКурс;

		УстановитьСчетаУчетаРасчетовСКонтрагентом(СтрокаТабличнойЧасти);
		ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти);
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтНесколькихКонтрагентов") Тогда
			УстановкаСвязейПараметровВыбораДоговораКонтрагентаОперацияОплатаОтНесколькихКонтрагентов();
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыдачаВПодотчетПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПересчетСуммыДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПересчетСуммыДокумента();
КонецПроцедуры

&НаСервере
Функция ПересчетСуммыДокумента()
	ВидОперации = Объект.Операция.ВидОперации;
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтПокупателя") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РасчетыПоЗаймам") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтНесколькихКонтрагентов") Тогда			
	
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
			
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПодотчетника") Тогда		
		Объект.СуммаДокумента = Объект.ВыдачаВПодотчет.Итог("СуммаПлатежа");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПрочийПриход") Тогда		 
		Объект.СуммаДокумента = Объект.ПрочиеРасходы.Итог("СуммаПлатежа");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеНаличныхВБанке")
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.Конвертация") Тогда		
		//Сумма из шапки			
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтСотрудника") Тогда		
		Объект.СуммаДокумента = Объект.ВозвратЗаработнойПлаты.Итог("СуммаПлатежа");
		
	КонецЕсли;

КонецФункции // ПересчетСуммыДокумента()

&НаКлиенте
Процедура ПрочиеРасходыСчетУчетаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "Субконто1", "Субконто2", "Субконто3");

	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетУчета, СтрокаТабличнойЧасти, ПоляОбъекта, Истина);
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетУчета");

	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств) Тогда
		СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств = ПолучитьСтатьюДДСИзОперации(Операция);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРеквизитовИТабличныхЧастей()
				
	ДоговорВПервойСтроке = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	ВалютаДоговораКонтрагентаРасшифровкаПлатежа = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
	
	Объект.БанковскийСчет 						= ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
	Объект.ПринятоОт 							= "";	
	
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		Объект.РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	Если Объект.ПрочиеРасходы.Количество() > 0 Тогда
		Объект.ПрочиеРасходы.Очистить();
	КонецЕсли;
	Если Объект.ВыдачаВПодотчет.Количество() > 0 Тогда
		Объект.ВыдачаВПодотчет.Очистить();
	КонецЕсли;
	Если Объект.ВозвратЗаработнойПлаты.Количество() > 0 Тогда
		Объект.ВозвратЗаработнойПлаты.Очистить();
	КонецЕсли;	
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтПокупателя") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РасчетыПоЗаймам") Тогда
			
		Объект.БанковскийСчет 					= ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
		Объект.ФизЛицо 							= ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");				
		СтрокаТабличнойЧасти 									= Объект.РасшифровкаПлатежа.Добавить();		
		СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   	= ПолучитьСтатьюДДСИзОперации(Операция);
		
		ВидДоговораПоОперации = ПолучитьВидДоговораПоОперацииНаСервере(Объект.Операция);
		СтруктураДоговор = БухгалтерскийУчетСервер.ПолучитьДоговорКонтрагента(Объект.Организация, Объект.Контрагент, ВалютаДенежныхСредств, ВидДоговораПоОперации);
		Объект.ВалютаДоговора = СтруктураДоговор.ВалютаДоговора;
		УстановитьКурсДоговора();
				
		СтрокаТабличнойЧасти.ДоговорКонтрагента 	= СтруктураДоговор.ДоговорКонтрагента;
		ПолучитьКурсВзаиморасчетов();
		СтрокаТабличнойЧасти.КурсВзаиморасчетов 	= КурсВзаиморасчетов;
		СтрокаТабличнойЧасти.ПрямойКурс 			= ПрямойКурс;
		ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти);
		УстановитьСчетаУчетаРасчетовСКонтрагентом(СтрокаТабличнойЧасти);
		ВалютаДоговораКонтрагентаРасшифровкаПлатежа = СтруктураДоговор.ВалютаДоговора;
		ДоговорВПервойСтроке 						= СтрокаТабличнойЧасти.ДоговорКонтрагента;
		УстановкаОтбораДоговораКонтрагента();
				
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтНесколькихКонтрагентов") Тогда			
		Объект.Контрагент						= ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		Объект.СтатьяДвиженияДенежныхСредств 	= ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка");
		Объект.ФизЛицо 							= ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");				
		СтрокаТабличнойЧасти 									= Объект.РасшифровкаПлатежа.Добавить();		
	    СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   	= ПолучитьСтатьюДДСИзОперации(Операция);

		УстановкаСвязейПараметровВыбораДоговораКонтрагентаОперацияОплатаОтНесколькихКонтрагентов();
	
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеНаличныхВБанке") Тогда		
		Объект.СтатьяДвиженияДенежныхСредств 	= ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка");
		Объект.Контрагент						= ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		Объект.ФизЛицо 							= ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.Конвертация") Тогда		
		Объект.СтатьяДвиженияДенежныхСредств 	= ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка");
		Объект.Контрагент						= ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		Объект.ФизЛицо 							= ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПрочийПриход") Тогда
		Объект.СтатьяДвиженияДенежныхСредств 	= ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка");
		Объект.Контрагент						= ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		Объект.ФизЛицо 							= ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");				
		СтрокаТабличнойЧасти 									= Объект.ПрочиеРасходы.Добавить();	
		СтрокаТабличнойЧасти.СчетУчета 							= ПолучитьСчетУчетаОперацииНаСервере(Операция);
	    СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   	= ПолучитьСтатьюДДСИзОперации(Операция);
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
									 "Субконто1", "Субконто2", "Субконто3");
		БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетУчета, СтрокаТабличнойЧасти, ПоляОбъекта, Истина);		
	
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтСотрудника") Тогда
		Объект.СтатьяДвиженияДенежныхСредств 	= ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка");
		Объект.Контрагент						= ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		Объект.ФизЛицо 							= ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");				
		Если НЕ ВозвратПоВедомости(Операция) Тогда
			СтрокаТабличнойЧасти 								= Объект.ВозвратЗаработнойПлаты.Добавить();
			СтрокаТабличнойЧасти.Ведомость						= "";
		    СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств  = ПолучитьСтатьюДДСИзОперации(Операция);		
		КонецЕсли;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПодотчетника") Тогда
		Объект.СтатьяДвиженияДенежныхСредств 	= ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка");
		Объект.Контрагент						= ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");					
		СтрокаТабличнойЧасти 									= Объект.ВыдачаВПодотчет.Добавить();	
	    СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   	= ПолучитьСтатьюДДСИзОперации(Операция);
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Отказ = СообщенияПользователюПриИзмененииДоговора(СтрокаТабличнойЧасти);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 И ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
		ВалютаДоговораКонтрагентаРасшифровкаПлатежа = ПолучитьВалютуДоговораНаСервере(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
		ДоговорВПервойСтроке = Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента;
		Объект.ВалютаДоговора = ВалютаДоговораКонтрагентаРасшифровкаПлатежа;
		УстановитьКурсДоговора();
		ПолучитьКурсВзаиморасчетов();
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = КурсВзаиморасчетов;
		СтрокаТабличнойЧасти.ПрямойКурс 		= ПрямойКурс;
		ПересчетТабличнойЧастиРасшифровкаПлатежа();
	ИначеЕсли СтрокаТабличнойЧасти.НомерСтроки = 1 И Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
		Если ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
			Если ПолучитьВалютуДоговораНаСервере(СтрокаТабличнойЧасти.ДоговорКонтрагента) <> ВалютаДоговораКонтрагентаРасшифровкаПлатежа Тогда		
				ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросПоменяласьВалютаТабличнойЧасти", ЭтотОбъект);
				ТекстВопроса = НСтр("ru = 'В первой строке табличная часть выбран договор с другой валютой! Табличная часть будет пересчитана! Продолжить выполнение операции?'");
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
			КонецЕсли;	
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросПоменяласьВалютаТабличнойЧасти", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'В первой строке табличной части не выбран договор контрагента! Табличная часть будет пересчитана! Продолжить выполнение операции?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);			
		КонецЕсли;

	КонецЕсли;		
	ОповеститьЧтоКурсывалютНеАктуальны();
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Функция СообщенияПользователюПриИзмененииДоговора(СтрокаТабличнойЧасти)
	
	Отказ = Ложь;
		
	РасчетыНеВВалютеДоговора = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьНастройкуРасчетыНеВВалютеДоговора();
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента) 
		И НЕ РасчетыНеВВалютеДоговора  
		И НЕ ПолучитьВалютуДоговораНаСервере(СтрокаТабличнойЧасти.ДоговорКонтрагента) = ВалютаДенежныхСредств Тогда				
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
			"Валюта выбранного договора должна соответствовать валюте кассы, т.е. " + ВалютаДенежныхСредств,
			,
			"РасшифровкаПлатежа",
			СтрокаТабличнойЧасти.НомерСтроки,
			"ДоговорКонтрагента",
			Отказ);			
			СтрокаТабличнойЧасти.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
		ВалютаДоговораВПервойСтроке = ПолучитьВалютуДоговораНаСервере(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
		Если НЕ ЗначениеЗаполнено(ВалютаДоговораВПервойСтроке) Тогда
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
			"У договора в первой строке не установлена валюта!",
			,
			"РасшифровкаПлатежа",
			СтрокаТабличнойЧасти.НомерСтроки,
			"ДоговорКонтрагента",
			Отказ);			
			СтрокаТабличнойЧасти.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		КонецЕсли;
		
		Если НЕ ВалютаДоговораВПервойСтроке = ПолучитьВалютуДоговораНаСервере(СтрокаТабличнойЧасти.ДоговорКонтрагента) Тогда
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
			"Валюта выбранного договора должна быть, как в первой строке табличной части, т.е. " + ВалютаДоговораВПервойСтроке,
			,
			"РасшифровкаПлатежа",
			СтрокаТабличнойЧасти.НомерСтроки,
			"ДоговорКонтрагента",
			Отказ);			
			СтрокаТабличнойЧасти.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Отказ;

КонецФункции // СообщенияПользователюПриИзмененииДоговора(СтрокаТабличнойЧасти)

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ПересчетТабличнойЧастиРасшифровкаПлатежа()	
	
	Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = КурсВзаиморасчетов;
		СтрокаТабличнойЧасти.ПрямойКурс 		= ПрямойКурс;
		УстановитьСчетаУчетаРасчетовСКонтрагентом(СтрокаТабличнойЧасти);
		ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти)
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти, ПересчетОтСуммыВзаиморасчетов = Ложь)
	
	Если ПересчетОтСуммыВзаиморасчетов Тогда
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаВзаиморасчетов) Тогда
			СтрокаТабличнойЧасти.КурсВзаиморасчетов 	= Окр(СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.СуммаВзаиморасчетов, 2);
			СтрокаТабличнойЧасти.ПрямойКурс = Истина;
		КонецЕсли;
		Если СтрокаТабличнойЧасти.КурсВзаиморасчетов < 1 Тогда
			СтрокаТабличнойЧасти.КурсВзаиморасчетов 	= Окр(СтрокаТабличнойЧасти.СуммаВзаиморасчетов / СтрокаТабличнойЧасти.СуммаПлатежа, 2);
			СтрокаТабличнойЧасти.ПрямойКурс = Ложь;		
		КонецЕсли;				
		
	Иначе
		Если СтрокаТабличнойЧасти.ПрямойКурс Тогда
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.КурсВзаиморасчетов) Тогда
				СтрокаТабличнойЧасти.СуммаВзаиморасчетов 	= Окр(СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.КурсВзаиморасчетов, 2);
			КонецЕсли;		
		Иначе
			СтрокаТабличнойЧасти.СуммаВзаиморасчетов 	= Окр(СтрокаТабличнойЧасти.СуммаПлатежа * СтрокаТабличнойЧасти.КурсВзаиморасчетов, 2);
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратЗаработнойПлатыФизЛицоПриИзменении(Элемент)
	Если Объект.ВозвратЗаработнойПлаты.Количество() > 0 Тогда
	Объект.ПринятоОт 	= Объект.ВозвратЗаработнойПлаты[0].ФизЛицо;
	Объект.ПоДокументу 	= ПолучитьДокументФизЛица(Объект.Организация, Объект.ВозвратЗаработнойПлаты[0].ФизЛицо, Объект.Дата);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВозвратЗаработнойПлатыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти 			= Элемент.ТекущиеДанные;
		СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств = ПолучитьСтатьюДДСИзОперации(Объект.Операция);
		СтрокаТабличнойЧасти.Ведомость   = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыдачаВПодотчетПриИзменении(Элемент)
	ПересчетСуммыДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыПриИзменении(Элемент)
	ПересчетСуммыДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ВозвратЗаработнойПлатыПриИзменении(Элемент)
	ПересчетСуммыДокумента();			
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКонтрагентПриИзменении(Элемент)
	Первый = Истина;
	Стр = "";
	Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
		ПолноеНаименование = ПолучитьПолноеНаименованиеКонтрагента(СтрокаТабличнойЧасти.Контрагент);
		Стр 	= Стр + ?(Первый, ПолноеНаименование, ", " + ПолноеНаименование);		
	    Первый 	= Ложь;
	КонецЦикла;	
	Объект.ПринятоОт = Стр;
	
	СтрокаТабличнойЧасти 									= Элементы.РасшифровкаПлатежа.ТекущиеДанные;		
    СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   	= ПолучитьСтатьюДДСИзОперации(Операция);
	
	ВидДоговораПоОперации = ПолучитьВидДоговораПоОперацииНаСервере(Объект.Операция);
	СтруктураДоговор = БухгалтерскийУчетСервер.ПолучитьДоговорКонтрагента(Объект.Организация, 
		СтрокаТабличнойЧасти.Контрагент, 
		?(СтрокаТабличнойЧасти.НомерСтроки = 1, ВалютаДенежныхСредств, ВалютаДоговораКонтрагентаРасшифровкаПлатежа), 
		ВидДоговораПоОперации);
	СтрокаТабличнойЧасти.ДоговорКонтрагента = СтруктураДоговор.ДоговорКонтрагента;
	РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСубконто1ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетУчета");
	
	Субконто1 = Элементы.ПрочиеРасходы.ТекущиеДанные.Субконто1;
	Если ТипЗнч(Субконто1) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Объект.ПринятоОт		= Субконто1;
		Объект.ПоДокументу		= ПолучитьДокументФизЛица(Объект.Организация, Субконто1, Объект.Дата);
	ИначеЕсли ТипЗнч(Субконто1) = Тип("СправочникСсылка.Контрагенты") Тогда
		Объект.ПринятоОт 		= Субконто1;
		Если ЭтоФизЛицо(Субконто1) Тогда
			Объект.ПоДокументу	= ПолучитьДокументФизЛица(Объект.Организация, ПолучитьФизЛицоКонтрагента(Субконто1), Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.ПрочиеРасходы.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "Субконто", 1, "СчетУчета", СтрокаТабличнойЧасти, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСубконто2ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетУчета");
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.ПрочиеРасходы.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "Субконто", 2, "СчетУчета", СтрокаТабличнойЧасти, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСубконто3ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетУчета");
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСубконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.ПрочиеРасходы.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "Субконто", 3, "СчетУчета", СтрокаТабличнойЧасти, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.КурсВзаиморасчетов) Тогда
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = ПолучитьКурсВалютыНаСервере(Объект.ВалютаДоговора, ДатаДокумента).Курс;	
	КонецЕсли;
	ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриИзменении(Элемент)
	ПересчетСуммыДокумента();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УстановкаОтбораДоговораКонтрагентаВТекущейстроке();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросПоменяласьВалютаТабличнойЧасти(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВалютаДоговораКонтрагентаРасшифровкаПлатежа = ПолучитьВалютуДоговораНаСервере(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
		ДоговорВПервойСтроке = Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента;
		Объект.ВалютаДоговора = ВалютаДоговораКонтрагентаРасшифровкаПлатежа;
		УстановитьКурсДоговора();		
		ПолучитьКурсВзаиморасчетов();
		Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТабличнойЧасти.ДоговорКонтрагента = ДоговорВПервойСтроке;
		КонецЦикла;
		ПересчетТабличнойЧастиРасшифровкаПлатежа();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаКонвертацииПриИзменении(Элемент)
	ПересчетСуммыДокументаПриКонвертации();
	ПоказатьКР();
КонецПроцедуры

&НаКлиенте
Процедура КурсОбменаПриИзменении(Элемент)
	ПересчетСуммыДокументаПриКонвертации();
	ПоказатьКР();
КонецПроцедуры

&НаКлиенте
Процедура ВозвратЗаработнойПлатыВедомостьПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ВозвратЗаработнойПлаты.ТекущиеДанные;
	Ведомость = СтрокаТабличнойЧасти.Ведомость;
	Если ЗначениеЗаполнено(Ведомость) И ТипЗнч(Ведомость) = ТИП("ДокументСсылка.ВедомостьЗП") Тогда
		Объект.ВозвратЗаработнойПлаты.Удалить(СтрокаТабличнойЧасти.НомерСтроки - 1);
		ВозвратЗПНаСервере(Ведомость)
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ВозвратЗПНаСервере(Ведомость)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыплаченнаяЗарплатаОбороты.Физлицо КАК Физлицо,
		|	СУММА(ВыплаченнаяЗарплатаОбороты.СуммаОборот) КАК СуммаПлатежа,
		|	&Ведомость КАК Ведомость,
		|	&СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	РегистрНакопления.ВыплаченнаяЗарплата.Обороты(
		|			,
		|			,
		|			Авто,
		|			Организация = &Организация
		|				И Ведомость = &Ведомость) КАК ВыплаченнаяЗарплатаОбороты
		|ГДЕ
		|	НЕ ВыплаченнаяЗарплатаОбороты.Регистратор = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыплаченнаяЗарплатаОбороты.Физлицо,
		|	ВыплаченнаяЗарплатаОбороты.Ведомость
		|
		|УПОРЯДОЧИТЬ ПО
		|	Физлицо";
	
	Запрос.УстановитьПараметр("Ведомость", 		Ведомость);
	Запрос.УстановитьПараметр("Организация", 	Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", 		Объект.Ссылка);
	Если ТипЗнч(Ведомость) = ТИП("ДокументСсылка.ВедомостьЗП") Тогда
		Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", 	Ведомость.СтатьяДвиженияДенежныхСредств);	
	Иначе	
	    Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", 	НЕОПРЕДЕЛЕНО);
	КонецЕсли;	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = Объект.ВозвратЗаработнойПлаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти, Истина)
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
  	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтаФорма);
    ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма);
КонецПроцедуры

#КонецОбласти
