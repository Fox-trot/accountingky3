#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

// Процедура выполняет распределение затрат по количеству.
//
Процедура РаспределитьТабЧастьРасходыПоКоличеству() Экспорт	
	СуммаРасходов 		= Услуги.Итог("Сумма");
	
	КоличествоВКолонкеТовары 	= Товары.ВыгрузитьКолонку("Количество");
	КоличествоВКолонкеОС 		= ОС.ВыгрузитьКолонку("Количество");
	
	ТоварыИтогКоличество 		= Товары.Итог("Количество");
	ОСИтогКоличество     		= ОС.Итог("Количество");
	
	МассивОбщихСумм = Новый Массив;
	МассивОбщихСумм.Добавить(ТоварыИтогКоличество);
	МассивОбщихСумм.Добавить(ОСИтогКоличество);
	
	// Сумма
	МассивРаспределениеМеждуТабличнымиЧастями = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходов, МассивОбщихСумм, 2);
	СуммаРасходовТовары 				= МассивРаспределениеМеждуТабличнымиЧастями[0];
	СуммаРасходовОС 					= МассивРаспределениеМеждуТабличнымиЧастями[1];
	МассивСуммРаспределенияТовары		= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходовТовары, КоличествоВКолонкеТовары, 2);
	МассивСуммРаспределенияОС			= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходовОС, КоличествоВКолонкеОС, 2);
	
	// НДС
	МассивРаспределениеМеждуТабличнымиЧастями = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаНДС, МассивОбщихСумм, 2);
	СуммаРасходовНДСТовары 				= МассивРаспределениеМеждуТабличнымиЧастями[0];
	СуммаРасходовНДСОС 					= МассивРаспределениеМеждуТабличнымиЧастями[1];
	МассивСуммРаспределенияНДСТовары	= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходовНДСТовары, КоличествоВКолонкеТовары, 2);
	МассивСуммРаспределенияНДСОС		= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходовНДСОС, КоличествоВКолонкеОС, 2);
	
	// НСП
	МассивРаспределениеМеждуТабличнымиЧастями = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаНСП, МассивОбщихСумм, 2);
	СуммаРасходовНСПТовары 				= МассивРаспределениеМеждуТабличнымиЧастями[0];
	СуммаРасходовНСПОС 					= МассивРаспределениеМеждуТабличнымиЧастями[1];
	МассивСуммРаспределенияНСПТовары	= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходовНСПТовары, КоличествоВКолонкеТовары, 2);
	МассивСуммРаспределенияНСПОС		= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходовНСПОС, КоличествоВКолонкеОС, 2);
		
	// Сумма без Налогов
	//МассивРаспределениеМеждуТабличнымиЧастямиБезНалогов = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходов, МассивОбщихСумм, 2);
	//СуммаРасходовТоварыБезНалогов 				= МассивРаспределениеМеждуТабличнымиЧастямиБезНалогов[0];
	//СуммаРасходовОСБезНалогов 					= МассивРаспределениеМеждуТабличнымиЧастямиБезНалогов[1];	
	//МассивСуммРаспределенияТоварыБезНалогов		= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходовТоварыБезНалогов, КоличествоВКолонкеТовары, 2);
	//МассивСуммРаспределенияОСБезНалогов			= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходовОСБезНалогов, КоличествоВКолонкеОС, 2);
		
	Если МассивСуммРаспределенияТовары <> Неопределено Тогда
		Товары.ЗагрузитьКолонку(МассивСуммРаспределенияТовары, 				"СуммаРасходов");	
		Товары.ЗагрузитьКолонку(МассивСуммРаспределенияНДСТовары, 			"СуммаНДС");
		Товары.ЗагрузитьКолонку(МассивСуммРаспределенияНСПТовары, 			"СуммаНСП");
		//Товары.ЗагрузитьКолонку(МассивСуммРаспределенияТоварыБезНалогов, 	"СуммаРасходовБезНалогов");
	КонецЕсли;
	Если МассивСуммРаспределенияОС <> Неопределено Тогда	
		ОС.ЗагрузитьКолонку(МассивСуммРаспределенияОС, 						"СуммаРасходов");
		ОС.ЗагрузитьКолонку(МассивСуммРаспределенияНДСОС, 					"СуммаНДС");
		ОС.ЗагрузитьКолонку(МассивСуммРаспределенияНСПОС, 					"СуммаНСП");
		//ОС.ЗагрузитьКолонку(МассивСуммРаспределенияОСБезНалогов, 			"СуммаРасходовБезНалогов");
	КонецЕсли;	
	
	МассивКоэффИзДвухМассивов = Новый Массив;
	Для каждого Эл Из КоличествоВКолонкеТовары Цикл
		МассивКоэффИзДвухМассивов.Добавить(Эл);	
	КонецЦикла;
	Для каждого Эл Из КоличествоВКолонкеОС Цикл
		МассивКоэффИзДвухМассивов.Добавить(Эл);	
	КонецЦикла;
	
	ОбщийМассивКоэффРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(100, МассивКоэффИзДвухМассивов, 2);
	
	МассивКоэффРаспределенияТовары = Новый Массив;
	Для Сч = 0 По Товары.Количество() - 1 Цикл
		МассивКоэффРаспределенияТовары.Добавить(ОбщийМассивКоэффРаспределения[Сч]);
	КонецЦикла;
	
	МассивКоэффРаспределенияОС = Новый Массив;
	Для Сч = Товары.Количество() По ОбщийМассивКоэффРаспределения.Количество() - 1 Цикл
		МассивКоэффРаспределенияОС.Добавить(ОбщийМассивКоэффРаспределения[Сч]);
	КонецЦикла;
	
	Товары.ЗагрузитьКолонку(МассивКоэффРаспределенияТовары, "Коэффициент");
	ОС.ЗагрузитьКолонку(МассивКоэффРаспределенияОС, "Коэффициент");
	
КонецПроцедуры // РаспределитьТабЧастьРасходыПоКоличеству()

// Процедура выполняет распределение затрат по сумме.
//
Процедура РаспределитьТабЧастьРасходыПоСумме() Экспорт
	СуммаРасходов 			= Услуги.Итог("Сумма");
	СуммыВКолонкеТовары 	= Товары.ВыгрузитьКолонку("Сумма");
	СуммыВКолонкеОС 		= ОС.ВыгрузитьКолонку("Сумма");
	
	ТоварыИтогСумма 		= Товары.Итог("Сумма");
	ОСИтогСумма     		= ОС.Итог("Сумма");
	
	МассивОбщихСумм = Новый Массив;
	МассивОбщихСумм.Добавить(ТоварыИтогСумма);
	МассивОбщихСумм.Добавить(ОСИтогСумма);
	
	// Сумма
	МассивРаспределениеМеждуТабличнымиЧастями = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходов, МассивОбщихСумм, 2);
	СуммаРасходовТовары 						= МассивРаспределениеМеждуТабличнымиЧастями[0];
	СуммаРасходовОС 							= МассивРаспределениеМеждуТабличнымиЧастями[1];	
	МассивСуммРаспределенияТовары				= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходовТовары, СуммыВКолонкеТовары, 2);
	МассивСуммРаспределенияОС					= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходовОС, СуммыВКолонкеОС, 2);
	
	// НДС
	МассивРаспределениеМеждуТабличнымиЧастями = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаНДС, МассивОбщихСумм, 2);
	СуммаРасходовНДСТовары 				= МассивРаспределениеМеждуТабличнымиЧастями[0];
	СуммаРасходовНДСОС 					= МассивРаспределениеМеждуТабличнымиЧастями[1];
	МассивСуммРаспределенияНДСТовары	= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходовНДСТовары, СуммыВКолонкеТовары, 2);
	МассивСуммРаспределенияНДСОС		= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходовНДСОС, СуммыВКолонкеОС, 2);
	
	// НСП
	МассивРаспределениеМеждуТабличнымиЧастями = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаНСП, МассивОбщихСумм, 2);
	СуммаРасходовНСПТовары 				= МассивРаспределениеМеждуТабличнымиЧастями[0];
	СуммаРасходовНСПОС 					= МассивРаспределениеМеждуТабличнымиЧастями[1];
	МассивСуммРаспределенияНСПТовары	= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходовНСПТовары, СуммыВКолонкеТовары, 2);
	МассивСуммРаспределенияНСПОС		= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходовНСПОС, СуммыВКолонкеОС, 2);
	
	//МассивРаспределениеМеждуТабличнымиЧастямиБезНалогов = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходов - СуммаНДС, МассивОбщихСумм, 2);
	//СуммаРасходовТоварыБезНалогов 				= МассивРаспределениеМеждуТабличнымиЧастямиБезНалогов[0];
	//СуммаРасходовОСБезНалогов 					= МассивРаспределениеМеждуТабличнымиЧастямиБезНалогов[1];	
	//МассивСуммРаспределенияТоварыБезНалогов		= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходовТоварыБезНалогов, СуммыВКолонкеТовары, 2);
	//МассивСуммРаспределенияОСБезНалогов			= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаРасходовОСБезНалогов, СуммыВКолонкеОС, 2);	
	
	Если МассивСуммРаспределенияТовары <> Неопределено Тогда
		Товары.ЗагрузитьКолонку(МассивСуммРаспределенияТовары, 				"СуммаРасходов");
		Товары.ЗагрузитьКолонку(МассивСуммРаспределенияНДСТовары, 			"СуммаНДС");
		Товары.ЗагрузитьКолонку(МассивСуммРаспределенияНСПТовары, 			"СуммаНСП");		
		// Товары.ЗагрузитьКолонку(МассивСуммРаспределенияТоварыБезНалогов, 	"СуммаРасходовБезНалогов");
	КонецЕсли;
	Если МассивСуммРаспределенияОС <> Неопределено Тогда	
		ОС.ЗагрузитьКолонку(МассивСуммРаспределенияОС, 						"СуммаРасходов");
		ОС.ЗагрузитьКолонку(МассивСуммРаспределенияНДСОС, 					"СуммаНДС");
		ОС.ЗагрузитьКолонку(МассивСуммРаспределенияНСПОС, 					"СуммаНСП");		
		// ОС.ЗагрузитьКолонку(МассивСуммРаспределенияОСБезНалогов, 			"СуммаРасходовБезНалогов");
	КонецЕсли;	
	
	МассивКоэффИзДвухМассивов = Новый Массив;
	Для каждого Эл Из СуммыВКолонкеТовары Цикл
		МассивКоэффИзДвухМассивов.Добавить(Эл);	
	КонецЦикла;
	Для каждого Эл Из СуммыВКолонкеОС Цикл
		МассивКоэффИзДвухМассивов.Добавить(Эл);	
	КонецЦикла;
	
	ОбщийМассивКоэффРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(100, МассивКоэффИзДвухМассивов, 2);
	
	МассивКоэффРаспределенияТовары = Новый Массив;
	Для Сч = 0 По Товары.Количество() - 1 Цикл
		МассивКоэффРаспределенияТовары.Добавить(ОбщийМассивКоэффРаспределения[Сч]);
	КонецЦикла;
	
	МассивКоэффРаспределенияОС = Новый Массив;
	Для Сч = Товары.Количество() По ОбщийМассивКоэффРаспределения.Количество() - 1 Цикл
		МассивКоэффРаспределенияОС.Добавить(ОбщийМассивКоэффРаспределения[Сч]);
	КонецЦикла;
	
	Товары.ЗагрузитьКолонку(МассивКоэффРаспределенияТовары, "Коэффициент");
	ОС.ЗагрузитьКолонку(МассивКоэффРаспределенияОС, "Коэффициент");
	
КонецПроцедуры // РаспределитьТабЧастьРасходыПоСумме()

// Выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоПоступлениюТоваровУслуг(ДанныеЗаполнения) Экспорт
	
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	Контрагент = ДанныеЗаполнения.Контрагент;
	Курс = ДанныеЗаполнения.Курс;
	Организация = ДанныеЗаполнения.Организация;
	СтавкаНДС = ДанныеЗаполнения.СтавкаНДС;
	СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
	СуммаНДС = ДанныеЗаполнения.СуммаНДС;
	СуммаНСП = ДанныеЗаполнения.СуммаНСП;
	СчетРасчетов = ДанныеЗаполнения.СчетРасчетовПоставщика;
	
	ОС.Очистить();
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.ОС Цикл
		НоваяСтрока = ОС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		НоваяСтрока.ДокументПоступления = ДанныеЗаполнения.Ссылка;
		НоваяСтрока.Количество = 1;
	КонецЦикла;
	
	Товары.Очистить();
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		НоваяСтрока.ДокументПоступления = ДанныеЗаполнения.Ссылка;
	КонецЦикла;
	
	Услуги.Очистить();
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Услуги Цикл
		НоваяСтрока = Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		НоваяСтрока.ДокументПоступления = ДанныеЗаполнения.Ссылка;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ПоступлениеТоваровУслуг")] = "ЗаполнитьПоПоступлениюТоваровУслуг";
	
	ЗаполнениеОбъектов.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) 
		И ЗначениеЗаполнено(ДоговорКонтрагента)
		И ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаРасчетов)Тогда
		ВалютаДокумента = ДоговорКонтрагента.ВалютаРасчетов;			
	Иначе	
		ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Курс) Тогда
		Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
			КурсСтруктура	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()));
			Курс 			= КурсСтруктура.Курс;
		Иначе
			Курс 			= 1;	
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) ИЛИ Контрагент.СтранаРезидентства = ПредопределенноеЗначение("Справочник.СтраныМира.Киргизия") Тогда 
		ВидОперации = Перечисления.ВидыОперацийДопРасходы.ДопРасходы; 
	ИначеЕсли Контрагент.СтранаРезидентства.ЕАЭС Тогда
	 	ВидОперации = Перечисления.ВидыОперацийДопРасходы.ПустаяСсылка();
	Иначе	
	    ВидОперации = Перечисления.ВидыОперацийДопРасходы.Импорт
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ДополнительныеРасходы.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьПоступления(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ);

	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		
КонецПроцедуры

// В обработчике события ОбработкаПроверкиЗаполнения документа выполняется
// копирование и обнуление проверяемых реквизитов для исключения стандартной
// проверки заполнения платформой и последующей проверки средствами встроенного языка.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	// Предварительный контроль
	ВыполнитьПредварительныйКонтроль(Отказ);	
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти

#КонецЕсли