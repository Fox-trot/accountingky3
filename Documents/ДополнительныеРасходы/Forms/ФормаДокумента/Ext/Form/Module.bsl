
#Область ОбработчикиСлужебные

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением, ВалютаРасчетов)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	ВалютаКурс = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаНовая, Новый Структура("Валюта", ВалютаРасчетов));
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	СтруктураДанные.Вставить(
		"ВалютаКурс",
		ВалютаКурс
	);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

#КонецОбласти

#Область УправлениеВнешнимВидом

&НаКлиенте
// Видимость и доступность всех элементов формы
//
Процедура УстановитьВидимостьДоступностьЭлементов()
	ЭтоИмпорт = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДопРасходы.Импорт");
	Элементы.ТоварыСуммаНДС.Видимость 	= НЕ ЭтоИмпорт;	
	Элементы.ТоварыСуммаНСП.Видимость 	= НЕ ЭтоИмпорт;
	Элементы.ОССуммаНДС.Видимость 		= НЕ ЭтоИмпорт;	
	Элементы.ОССуммаНСП.Видимость 		= НЕ ЭтоИмпорт;
	Элементы.УслугиСуммаНДС.Видимость 	= НЕ ЭтоИмпорт;	
	Элементы.УслугиСуммаНСП.Видимость 	= НЕ ЭтоИмпорт;
	
	Элементы.ВалютаДоговора.Видимость 	= НЕ Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	Элементы.Курс.Видимость 			= Элементы.ВалютаДоговора.Видимость;
	
	//Элементы.УслугиПредварительныеДопрасходы.Видимость	= ЕстьПредварительныеДопрасходы;
	//Элементы.УслугиДокументПоступления.Видимость		= ЕстьПредварительныеДопрасходы;
	
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()  

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервереБезКонтекста
Функция ПроверкаЕстьПредварительныеДопрасходы(ТабличнаяЧасть)
	Признак = Ложь;
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если СтрокаТабличнойЧасти.ПредварительныеДопрасходы Тогда
			Признак = Истина;
			Прервать;		
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Признак;
	
КонецФункции // ПроверкаЕстьПредварительныеДопрасходы()

// Процедура пересчитывает курс валюты расчетов при изменении
// даты документа.
//
&НаКлиенте
Процедура ПересчитатьКурсВалютыРасчетов(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурс.Курс = 0, 1, СтруктураДанные.ВалютаКурс.Курс);
	
	Если Объект.Курс <> КурсНовый Тогда
		
		КурсВалютыСтрокой = " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(Объект.Курс) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		КурсНовыйВалютыСтрокой = " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(КурсНовый) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		
		ТекстСообщения = НСтр("ru = 'На дату документа у валюты расчетов (" + КурсВалютыСтрокой + ") был задан курс.
									|Установить курс расчетов (" + КурсНовыйВалютыСтрокой + ") в соответствии с курсом валюты?'");
		
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПересчитатьКурсВалютыРасчетовЗавершение", ЭтотОбъект, Новый Структура("КурсНовый", КурсНовый)), ТекстСообщения, Режим, 0);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Дата, ВалютаДокумента, Контрагент, Организация)
	
	ДоговорКонтрагентаПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"СчетРасчетов",
		ДоговорКонтрагентаПоУмолчанию
	);
		
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорКонтрагентаПоУмолчанию
	);
		
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорКонтрагентаПоУмолчанию.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурс",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ДоговорКонтрагентаПоУмолчанию.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНалоги",
		?(ЗначениеЗаполнено(ДоговорКонтрагентаПоУмолчанию.ТипЦен), ДоговорКонтрагента.ТипЦен.ЦенаВключаетНалоги, Неопределено)
	);
	
	СтруктураДанные.Вставить(
		"СтавкаНДС",
		ДоговорКонтрагентаПоУмолчанию.СтавкаНДС
	);
	
	СтруктураДанные.Вставить(
		"СтавкаНСП",
		ДоговорКонтрагентаПоУмолчанию.СтавкаНСП
	);	
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает набор данных с сервера для процедуры ДоговорКонтрагентаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, ВалютаДокумента, ДоговорКонтрагента)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорКонтрагента.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурс",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаРасчетов, Дата)
	);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНалоги",
		?(ЗначениеЗаполнено(ДоговорКонтрагента.ТипЦен), ДоговорКонтрагента.ТипЦен.ЦенаВключаетНалоги, Неопределено)
	);
	
	СтруктураДанные.Вставить(
		"СтавкаНДС",
		ДоговорКонтрагента.СтавкаНДС
	);
	
	СтруктураДанные.Вставить(
		"СтавкаНСП",
		ДоговорКонтрагента.СтавкаНСП
	);	
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорКонтрагентаПриИзменении()

// Получает ДоговорКонтрагента по умолчанить в зависимости от способа ведения расчетов.
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	ДоговорКонтрагентаПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорКонтрагентаПоУмолчанию;
	
КонецФункции

// Выполняет действия при изменении договора контрагента.
//
&НаКлиенте
Процедура ОбработатьИзменениеДоговора(ДанныеДоговора = Неопределено)
	
	ДоговорПередИзменением = ДоговорКонтрагента;
	ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	Если ДоговорПередИзменением <> Объект.ДоговорКонтрагента Тогда
		
		ПараметрыДокумента = Новый Структура;
		
		Если ДанныеДоговора = Неопределено Тогда
			ДанныеДоговора = ПолучитьДанныеДоговорПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.ДоговорКонтрагента);
		Иначе
			ПараметрыДокумента.Вставить("КонтрагентПередИзменением", ДанныеДоговора.КонтрагентПередИзменением);
		КонецЕсли;
			
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов = ДанныеДоговора.ВалютаРасчетов;
		
		ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
		ПараметрыДокумента.Вставить("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением);
		ПараметрыДокумента.Вставить("ДанныеДоговора", ДанныеДоговора);
			
		ОбработатьИзменениеДоговораИВалютыРасчетов(ПараметрыДокумента);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура обрабатывает измение реквизитов документов Договор и Валюта расчетов
//
Процедура ОбработатьИзменениеДоговораИВалютыРасчетов(ПараметрыДокумента)
	
	ДоговорПередИзменением = ПараметрыДокумента.ДоговорПередИзменением;
	ВалютаРасчетовПередИзменением = ПараметрыДокумента.ВалютаРасчетовПередИзменением;
	ДанныеДоговора = ПараметрыДокумента.ДанныеДоговора;

	Объект.Курс	  = ?(ДанныеДоговора.ВалютаРасчетовКурс.Курс = 0, 1, ДанныеДоговора.ВалютаРасчетовКурс.Курс);
	
	Объект.ВалютаДокумента 	= ДанныеДоговора.ВалютаРасчетов;
	Объект.СтавкаНДС 		= ДанныеДоговора.СтавкаНДС;
	Объект.СтавкаНСП 		= ДанныеДоговора.СтавкаНСП;
		
	Объект.СчетРасчетов = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента).СчетРасчетовПоставщика;
	
	Если ПараметрыДокумента.Свойство("ИзменитьПеременнуюВалютаРасчетов") Тогда
		
		ВалютаРасчетов = ДанныеДоговора.ВалютаРасчетов;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеДоговораИВалютыРасчетов()

// Процедура заполняет колонку "Сумма расходов", т.ч. Товары.
//
&НаСервере
Процедура РаспределитьТабЧастьРасходыПоКоличеству()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.РаспределитьТабЧастьРасходыПоКоличеству();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры // РаспределитьТабЧастьРасходыПоКоличеству()

// Процедура заполняет колонку "Сумма расходов", т.ч. Товары.
//
&НаСервере
Процедура РаспределитьТабЧастьРасходыПоСумме()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.РаспределитьТабЧастьРасходыПоСумме();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры // РаспределитьТабЧастьРасходыПоСумме()

&НаКлиенте
Процедура РасчетНДСиНСП()
	ОбщаяСуммаДопРасходов = Объект.Услуги.Итог("Сумма");
	Объект.СуммаНДС		= Объект.Услуги.Итог("СуммаНДС");
	Объект.СуммаНСП 	= Объект.Услуги.Итог("СуммаНСП");
КонецПроцедуры // РасчетНДС()

// Процедура расчитывает НДС для каждой строки табличной части "Услуги"
//
&НаКлиенте
Процедура РасчетНДСДляСтрокиУслуги(СтрокаТабличнойЧасти = Неопределено)
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;	
	КонецЕсли;	
	СуммаДопРасходов = СтрокаТабличнойЧасти.Сумма;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДопРасходы.Импорт") Тогда
		ЗначСтавкаНДС 	= 0;
		ЗначСтавкаНСП 	= 0;	
	Иначе
		ЗначСтавкаНДС 	= БухгалтерскийУчетСервер.ПолучитьСтавкуНДСПоДоговору(Объект.Дата, Объект.ДоговорКонтрагента);
		ЗначСтавкаНСП 	= БухгалтерскийУчетСервер.ПолучитьСтавкуНСППоДоговору(Объект.Дата, Объект.ДоговорКонтрагента);	
	КонецЕсли;
	СтрокаТабличнойЧасти.СуммаНДС 	= Окр(СуммаДопРасходов * ЗначСтавкаНДС / 100, 2);
	СтрокаТабличнойЧасти.СуммаНСП 	= Окр(СуммаДопРасходов * ЗначСтавкаНСП / 100, 2);
	СтрокаТабличнойЧасти.Всего 	= СуммаДопРасходов + СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП;
КонецПроцедуры 

&НаСервере
Процедура ЗаполнениеТовары(МассивДокументов)
	ОбщаяСуммаНДС = 0;
	ОбщаяСуммаНСП = 0;
	Для каждого ДокументПоступления Из МассивДокументов Цикл
		Для каждого СтрокаПоступления Из ДокументПоступления.Товары Цикл
			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаПоступления);
			СтрокаТабличнойЧасти.ДокументПоступления 	= ДокументПоступления;
			СтрокаТабличнойЧасти.Курс 	= ДокументПоступления.Курс;
			СтрокаТабличнойЧасти.Сумма 	= Окр(СтрокаПоступления.Сумма * СтрокаТабличнойЧасти.Курс, 2);
			СуммаНДС 					= Окр(СтрокаПоступления.СуммаНДС * СтрокаТабличнойЧасти.Курс, 2);
			СуммаНСП 					= Окр(СтрокаПоступления.СуммаНСП * СтрокаТабличнойЧасти.Курс, 2);
			ОбщаяСуммаНДС               = ОбщаяСуммаНДС + СуммаНДС;
			ОбщаяСуммаНСП               = ОбщаяСуммаНСП + СуммаНСП;
			
		КонецЦикла;
		Для каждого СтрокаПоступления Из ДокументПоступления.ОС Цикл
			СтрокаТабличнойЧасти = Объект.ОС.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаПоступления);
			СтрокаТабличнойЧасти.ДокументПоступления 	= ДокументПоступления;
			СтрокаТабличнойЧасти.Количество 			= 1;
			СтрокаТабличнойЧасти.Курс 	= ДокументПоступления.Курс;
			СтрокаТабличнойЧасти.Сумма 	= Окр(СтрокаПоступления.Сумма * СтрокаТабличнойЧасти.Курс, 2);
			СуммаНДС 					= Окр(СтрокаПоступления.СуммаНДС * СтрокаТабличнойЧасти.Курс, 2);
			СуммаНСП 					= Окр(СтрокаПоступления.СуммаНСП * СтрокаТабличнойЧасти.Курс, 2);
			ОбщаяСуммаНДС               = ОбщаяСуммаНДС + СуммаНДС;
			ОбщаяСуммаНСП               = ОбщаяСуммаНСП + СуммаНСП;
			
		КонецЦикла;
	КонецЦикла;
	
	Объект.СуммаНДС = ОбщаяСуммаНДС;
	Объект.СуммаНСП = ОбщаяСуммаНСП;
	
КонецПроцедуры // 

&НаКлиенте
Процедура ПересчетСтрокиТабличнойЧастиУслуги(СтрокаТабличнойЧасти = Неопределено)
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);

КонецПроцедуры // ПересчетСтрокиТабличнойЧастиУслуги()

&НаКлиенте
Процедура УстановитьВидОперации()
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДопРасходы.ПустаяСсылка");
		Возврат;	
	КонецЕсли;
	
	ДанныеКонтрагента = СтранаРезидентстваКонтрагента(Объект.Контрагент);
	Если ДанныеКонтрагента.СтранаРезидентства = ПредопределенноеЗначение("Справочник.СтраныМира.Киргизия") Тогда 
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДопРасходы.ДопРасходы") 
	ИначеЕсли ДанныеКонтрагента.ЕАЭС Тогда
	 	ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДопРасходы.ПустаяСсылка")
	Иначе	
	    ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДопРасходы.Импорт");
	КонецЕсли;
	
	Объект.ВидОперации = ВидОперации;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СтранаРезидентстваКонтрагента(Контрагент)
	ДанныеКонтрагента = Новый Структура("СтранаРезидентства, ЕАЭС", 
											Справочники.СтраныМира.ПустаяСсылка(), 
											Ложь);
											
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеКонтрагента.Вставить("СтранаРезидентства", Контрагент.СтранаРезидентства);	
		ДанныеКонтрагента.Вставить("ЕАЭС", Контрагент.СтранаРезидентства.ЕАЭС);	
	КонецЕсли;	
	
	Возврат ДанныеКонтрагента;
КонецФункции // ()

&НаКлиенте
Процедура ОчиститьНалоги()
	Для каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		РасчетНДСДляСтрокиУслуги(СтрокаТабличнойЧасти);
	КонецЦикла;
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СтрокаТабличнойЧасти.СуммаНДС = 0;
		СтрокаТабличнойЧасти.СуммаНСП = 0;
	КонецЦикла;	
	Для каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл
		СтрокаТабличнойЧасти.СуммаНДС = 0;
		СтрокаТабличнойЧасти.СуммаНСП = 0;
	КонецЦикла;
	Объект.СуммаНДС	= 0;
	Объект.СуммаНСП = 0;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Установка реквизитов формы.
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ДатаДокумента = Объект.Дата;	
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	УПП 				= БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	Контрагент 			= Объект.Контрагент;
	ДоговорКонтрагента 	= Объект.ДоговорКонтрагента;
	ВалютаРасчетов 		= Объект.ДоговорКонтрагента.ВалютаРасчетов;
	ЕстьПредварительныеДопрасходы = ПроверкаЕстьПредварительныеДопрасходы(Объект.Услуги);
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
    УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаВажныеКоманды);
    // Конец СтандартныеПодсистемы.Печать
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		УстановитьВидОперации();	
	КонецЕсли;
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область РаботаСПодбором

&НаКлиенте
Процедура ПодборПоВсемДокументам(Команда)
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВсеДокументыПоступления", Истина);
	ОткрытьФорму("Документ.ДополнительныеРасходы.Форма.ФормаПодбораДокументовПоступления", ПараметрыОтбора, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоДокументамБезДопрасходов(Команда)
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВсеДокументыПоступления", Ложь);
	ОткрытьФорму("Документ.ДополнительныеРасходы.Форма.ФормаПодбораДокументовПоступления", ПараметрыОтбора, ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением, ВалютаРасчетов);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВалютаРасчетов) Тогда
			ПересчитатьКурсВалютыРасчетов(СтруктураДанные);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	
	Объект.ДоговорКонтрагента = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация);
	ОбработатьИзменениеДоговора();

	БухгалтерскийУчетСервер.ПроверитьСуществованиеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
// Выполняет очистку договора и табличной части.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	УстановитьВидОперации();
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДопРасходы.Импорт") Тогда
		ОчиститьНалоги();
	КонецЕсли;
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		СтруктураДанных = ПолучитьДанныеКонтрагентПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Контрагент, Объект.Организация);
		Объект.ДоговорКонтрагента = СтруктураДанных.ДоговорКонтрагента;
		
		СтруктураДанных.Вставить("КонтрагентПередИзменением", КонтрагентПередИзменением);
		
		ОбработатьИзменениеДоговора(СтруктураДанных);
				
	Иначе
		Объект.ДоговорКонтрагента = ДоговорКонтрагента; // Восстанавливаем автоматически очищеный договор.
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Договор.
// Заполняет реквизиты формы курс и кратность.
//
&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры // ДоговорПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура РаспределитьРасходыПоКоличеству(Команда)
	
	Отказ = Ложь;
	
	Если (Объект.Товары.Количество() + Объект.ОС.Количество()) = 0 Тогда
		ТекстСообщения = НСтр("ru = 'В табличной части ""Товары"" и ""Основные средства"" нет записей! Распределение отменено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Товары", , Отказ);
	КонецЕсли;
	
	Если Объект.Услуги.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'В табличной части ""Услуги"" нет записей! Распределение отменено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Услуги", , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросРаспределитьРасходыПоКоличеству", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Сумма услуг будет распределена! Продолжить выполнение операции?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	
КонецПроцедуры // РаспределитьРасходыПоКоличеству()

// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура РаспределитьРасходыПоСумме(Команда)
	
	Отказ = Ложь;
	
	Если (Объект.Товары.Количество() + Объект.ОС.Количество()) = 0 Тогда
		ТекстСообщения = НСтр("ru = 'В табличной части ""Товары"" и ""Основные средства"" нет записей! Распределение отменено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Товары", , Отказ);
	КонецЕсли;
	
	Если Объект.Услуги.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'В табличной части ""Услуги"" нет записей! Распределение отменено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Услуги", , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросРаспределитьРасходыПоСумме", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Сумма услуг будет распределена! Продолжить выполнение операции?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
КонецПроцедуры // РаспределитьРасходыПоСумме()

#КонецОбласти

#Область ОбработчикиТабличныхЧастей

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	Объект.СуммаДокумента = Объект.Услуги.Итог("Сумма");
	РасчетНДСиНСП();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	ПересчетСтрокиТабличнойЧастиУслуги();
	РасчетНДСДляСтрокиУслуги();
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)	
	ПересчетСтрокиТабличнойЧастиУслуги();
	РасчетНДСДляСтрокиУслуги();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ПересчитатьКурсВалютыРасчетовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КурсНовый = ДополнительныеПараметры.КурсНовый;
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.Курс = КурсНовый;

	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросРаспределитьРасходыПоКоличеству(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РаспределитьТабЧастьРасходыПоКоличеству();
	КонецЕсли; 
КонецПроцедуры	

&НаКлиенте
Процедура ОтветНаВопросРаспределитьРасходыПоСумме(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РаспределитьТабЧастьРасходыПоСумме();
	КонецЕсли; 
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПодборДокументовПоступления" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		МассивДокументов = Параметр.МассивДокументов;
		ЗаполнениеТовары(МассивДокументов);
		УстановитьВидимостьДоступностьЭлементов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти
