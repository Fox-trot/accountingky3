
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();

	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
		
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Если Не Объект.Годовой Тогда
		Объект.ДатаНачала 		= НачалоКвартала(Объект.ДатаНачала);
		Объект.ДатаОкончания 	= КонецКвартала(Объект.ДатаНачала);
	Иначе 
		Объект.ДатаНачала 		= НачалоКвартала(Объект.ДатаНачала);
		Объект.ДатаОкончания 	= КонецГода(Объект.ДатаНачала);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГодовойПриИзменении(Элемент)
	
	Если Не Объект.Годовой Тогда
		Объект.ДатаНачала 		= НачалоКвартала(Объект.ДатаНачала);
		Объект.ДатаОкончания 	= КонецКвартала(Объект.ДатаНачала);
	Иначе 
		Объект.ДатаНачала 		= НачалоКвартала(Объект.ДатаНачала);
		Объект.ДатаОкончания 	= КонецГода(Объект.ДатаНачала);		
	КонецЕсли;
	
	Объект.Отчет.Очистить();
	Объект.ОтчетГодовой.Очистить();
	УстановитьВидимостьДоступностьЭлементов();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.Отчет.Количество() > 0 Или Объект.ОтчетГодовой.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьТабличнуюЧастьОтчет", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет очищена и перезаполнена. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		ЗаполнитьТабличнуюЧастьОтчетНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВЭлектроннойФорме(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		Или Модифицированность Тогда 
		ТекстСообщения = НСтр("ru='Для формирования отчета по выплатам и удержаниям ПН в электронной форме необходимо записать документ.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	
	
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для формирования отчета по выплатам и удержаниям ПН в электронной форме
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура());
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьСохранение();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьТабличнуюЧастьОтчет(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Отчет.Очистить();
		Объект.ОтчетГодовой.Очистить();
		ЗаполнитьТабличнуюЧастьОтчетНаСервере();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПроводник(ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ПолноеИмяФайла) Тогда 
		ФайловаяСистемаКлиент.ОткрытьПроводник(ДополнительныеПараметры.ПолноеИмяФайла);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	Если Не Объект.Годовой Тогда		
		Элементы.СтраницаОтчет.Видимость = Истина;
		Элементы.СтраницаОтчетГодовой.Видимость = Ложь;
	Иначе			
		Элементы.СтраницаОтчет.Видимость = Ложь;
		Элементы.СтраницаОтчетГодовой.Видимость = Истина;
	КонецЕсли;	

КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьОтчетНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Если Не Объект.Годовой Тогда
		Документ.ЗаполнитьТабличнуюЧастьОтчет();
	Иначе 	
		Документ.ЗаполнитьТабличнуюЧастьОтчетГодовой();
	КонецЕсли; 
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПодключенииИнтернетПоддержки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодключенияИнтернетПоддержки", ЭтотОбъект, ДополнительныеПараметры);
		МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияИнтернетПоддержки(Результат, ДополнительныеПараметры) Экспорт
	Если Не (ТипЗнч(Результат) = Тип("Структура")
		И ЗначениеЗаполнено(Результат.Логин)
		И ЗначениеЗаполнено(Результат.Пароль)) Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьСохранение();	
КонецПроцедуры

&НаСервере
Функция ТребуетсяНастройкаАвторизацияИнтернетПоддержки()
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		Возврат Не МодульИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	КонецЕсли;
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область ФормированиеЗаявленияВЭлектронномФормате

&НаКлиенте
Процедура ПродолжитьСохранение()
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Укажите путь для сохранения файла'");
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ДиалогОткрытияФайлаЗавершение", ЭтотОбъект, Новый Структура());
	ДиалогОткрытияФайла.Показать(Оповещение);

КонецПроцедуры // ПродолжитьСохранение()

&НаКлиенте
Процедура ДиалогОткрытияФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() > 0 Тогда
		Попытка
			Ошибки = Неопределено;
			
			СтруктураДанных = ФормированиеФайлаXML(ДополнительныеПараметры, Ошибки);
				
			Если СтруктураДанных = Неопределено Тогда
				Возврат;	
			КонецЕсли;	
			
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось завершить формирование файла.
				|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
		
		Если НЕ Ошибки = Неопределено Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);	
			Возврат;
		КонецЕсли;		
		
		// Формирование имени файла.
		КаталогФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВыбранныеФайлы[0]);
		ИмяФайла = СтруктураДанных.ИмяФайла;
		ПолноеИмяФайла = КаталогФайла + ИмяФайла;
		
		// Сохранение файла.
		Двоичное = ПолучитьИзВременногоХранилища(СтруктураДанных.АдресВременногоХранилища);
		Двоичное.Записать(ПолноеИмяФайла);	
		
		ТекстОповещения = НСтр("ru = 'Файл успешно сформирован'");
		ТекстПояснения = ИмяФайла;
		ПоказатьОповещениеПользователя(
			ТекстОповещения, 
			Новый ОписаниеОповещения("ОткрытьПроводник", ЭтотОбъект, Новый Структура("ПолноеИмяФайла", ПолноеИмяФайла)), 
			ТекстПояснения, 
			БиблиотекаКартинок.Информация32);
	КонецЕсли;	
КонецПроцедуры

// Процедура создания XML файла
//
&НаСервере
Функция ФормированиеФайлаXML(ДополнительныеПараметры, Ошибки)
	
	Если Объект.Годовой Тогда 
		НомерФормы = "058";
	Иначе 
		НомерФормы = "017";
	КонецЕсли;
	
	ШаблонИмениФайла = СтрШаблон(НСтр("ru = 'Form%1_%2.'"), НомерФормы, Формат(Объект.Дата, "ДФ=yyyy-MM-dd"));
	ИмяФайла = ШаблонИмениФайла + ".xml";
	
	// Массив для описания ошибок и если ошибки есть то отмена создания XML файла.
	МассивОшибок = Новый Массив();

	// FORM
	Если Объект.Годовой Тогда 		
		IDFORM = "58_1";
		VERSFORM = "1.02";
	Иначе 
		IDFORM = "17_1";
		VERSFORM = "1.01";
	КонецЕсли;

	ОбъектXDTO = СоздатьОбъектXDTO("FORM");
	
	ОбъектXDTO.IDFORM = IDFORM;
	ОбъектXDTO.NOMDOC = "1";
	ОбъектXDTO.VERSFORM = VERSFORM;
	ОбъектXDTO.DATEREPORT = Формат(Объект.Дата, "ДЛФ=D");
	
	// PART1 - НАЧАЛО
	ОбъектXDTOPART1 = СоздатьОбъектXDTO("PART1");
	
	Если Объект.ВидОтчета = Перечисления.ВидыОтчетаПоНалогам.Первоначальный Тогда
		FTYPE = 0;
	Иначе
		FTYPE = 1;
	КонецЕсли;	
	
	ОбъектXDTOFTYPE = СоздатьОбъектXDTO("FTYPE");
	ОбъектXDTOFTYPE.Text = FTYPE;
	ОбъектXDTOPART1.FTYPE.Добавить(ОбъектXDTOFTYPE);

	ОбъектXDTOSTARTDATE = СоздатьОбъектXDTO("STARTDATE");
	ОбъектXDTOSTARTDATE.Text = Формат(Объект.ДатаНачала, "ДЛФ=D");
	ОбъектXDTOPART1.STARTDATE.Добавить(ОбъектXDTOSTARTDATE);
	
	ОбъектXDTOENDDATE = СоздатьОбъектXDTO("ENDDATE");
	ОбъектXDTOENDDATE.Text = Формат(Объект.ДатаОкончания, "ДЛФ=D");
	ОбъектXDTOPART1.ENDDATE.Добавить(ОбъектXDTOENDDATE);
	
	ОбъектXDTO.PART1.Добавить(ОбъектXDTOPART1);
	// PART1 - КОНЕЦ 
	
	// PART2 - НАЧАЛО
	ОбъектXDTOPART2 = СоздатьОбъектXDTO("PART2");
	
	Если Объект.Годовой Тогда		
		ОбъектXDTOF203 = СоздатьОбъектXDTO("F203");
		ОбъектXDTOF203.Text = Объект.ОтчетГодовой.Итог("ОДПН");
		ОбъектXDTOPART2.F203.Добавить(ОбъектXDTOF203);
		
		ОбъектXDTOF204 = СоздатьОбъектXDTO("F204");
		ОбъектXDTOF204.Text = Объект.ОтчетГодовой.Итог("СуммаМатериальнойВыгоды");
		ОбъектXDTOPART2.F204.Добавить(ОбъектXDTOF204);
		
		ОбъектXDTOF205 = СоздатьОбъектXDTO("F205");
		ОбъектXDTOF205.Text = Объект.ОтчетГодовой.Итог("СуммаПН");
		ОбъектXDTOPART2.F205.Добавить(ОбъектXDTOF205);
		
		ОбъектXDTOF206 = СоздатьОбъектXDTO("F206");
		ОбъектXDTOF206.Text = Объект.ОтчетГодовой.Итог("СуммаПНСМатериальнойВыгоды");
		ОбъектXDTOPART2.F206.Добавить(ОбъектXDTOF206);
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.ОтчетГодовой Цикл
			ОбъектXDTOSTI058DETAIL = СоздатьОбъектXDTO("STI058DETAIL");
			
			ОбъектXDTOF1 = СоздатьОбъектXDTO("F1");
			ОбъектXDTOF1.Text = СтрокаТабличнойЧасти.ФизЛицо.ФИО;
			ОбъектXDTOSTI058DETAIL.F1.Добавить(ОбъектXDTOF1);
			
			ОбъектXDTOF2 = СоздатьОбъектXDTO("F2");
			ОбъектXDTOF2.Text = СтрокаТабличнойЧасти.ИНН;
			ОбъектXDTOSTI058DETAIL.F2.Добавить(ОбъектXDTOF2);
			
			ОбъектXDTOF3 = СоздатьОбъектXDTO("F3");
			ОбъектXDTOF3.Text = СтрокаТабличнойЧасти.КодДохода;  
			ОбъектXDTOSTI058DETAIL.F3.Добавить(ОбъектXDTOF3);
			
			ОбъектXDTOF4 = СоздатьОбъектXDTO("F4");
			ОбъектXDTOF4.Text = СтрокаТабличнойЧасти.ОДПН;
			ОбъектXDTOSTI058DETAIL.F4.Добавить(ОбъектXDTOF4);
			
			ОбъектXDTOF5 = СоздатьОбъектXDTO("F5");
			ОбъектXDTOF5.Text = СтрокаТабличнойЧасти.СуммаМатериальнойВыгоды;
			ОбъектXDTOSTI058DETAIL.F5.Добавить(ОбъектXDTOF5);
			
			ОбъектXDTOF6 = СоздатьОбъектXDTO("F6");
			ОбъектXDTOF6.Text = СтрокаТабличнойЧасти.СуммаПН;
			ОбъектXDTOSTI058DETAIL.F6.Добавить(ОбъектXDTOF6);
			
			ОбъектXDTOF7 = СоздатьОбъектXDTO("F7");
			ОбъектXDTOF7.Text = СтрокаТабличнойЧасти.СуммаПНСМатериальнойВыгоды;
			ОбъектXDTOSTI058DETAIL.F7.Добавить(ОбъектXDTOF7);
			
			ОбъектXDTOPART2.STI058DETAIL.Добавить(ОбъектXDTOSTI058DETAIL);		
		КонецЦикла;	
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаФизЛиц.ФизЛицо КАК ФизЛицо
			|ПОМЕСТИТЬ ВременнаяТаблицаФизЛица
			|ИЗ
			|	&ТаблицаФизЛиц КАК ТаблицаФизЛиц
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДокументыФизическихЛицСрезПервых.ФизЛицо КАК ФизЛицо,
			|	ДокументыФизическихЛицСрезПервых.Серия КАК Серия,
			|	ДокументыФизическихЛицСрезПервых.Номер КАК Номер,
			|	ДокументыФизическихЛицСрезПервых.ДатаВыдачи КАК ДатаВыдачи,
			|	ДокументыФизическихЛицСрезПервых.КемВыдан КАК КемВыдан
			|ИЗ
			|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
			|			&Период,
			|			ФизЛицо В
			|					(ВЫБРАТЬ
			|						ВременнаяТаблицаФизЛица.ФизЛицо
			|					ИЗ
			|						ВременнаяТаблицаФизЛица)
			|				И ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.Паспорт)) КАК ДокументыФизическихЛицСрезПервых";	
		Запрос.УстановитьПараметр("Период", 		Объект.ДатаНачала);
		Запрос.УстановитьПараметр("ТаблицаФизЛиц", 	Объект.Отчет.Выгрузить());
		
		ТаблицаПаспортныхДанных = Запрос.Выполнить().Выгрузить();
		
		ОбъектXDTOF203 = СоздатьОбъектXDTO("F203");
		ОбъектXDTOF203.Text = Объект.Отчет.Итог("ОДПН");
		ОбъектXDTOPART2.F203.Добавить(ОбъектXDTOF203);
		
		ОбъектXDTOF204 = СоздатьОбъектXDTO("F204");
		ОбъектXDTOF204.Text = Объект.Отчет.Итог("СуммаПН");
		ОбъектXDTOPART2.F204.Добавить(ОбъектXDTOF204);
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Отчет Цикл
			ОбъектXDTOSTI017DETAIL1NEW = СоздатьОбъектXDTO("STI017DETAIL1NEW");
			
			ОбъектXDTOF1 = СоздатьОбъектXDTO("F1");
			ОбъектXDTOF1.Text = СтрокаТабличнойЧасти.ФизЛицо.ФИО;
			ОбъектXDTOSTI017DETAIL1NEW.F1.Добавить(ОбъектXDTOF1);
			
			ОбъектXDTOCOUNTRYCODE = СоздатьОбъектXDTO("COUNTRYCODE");
			ОбъектXDTOCOUNTRYCODE.Text = СтрокаТабличнойЧасти.КодСтраны;
			ОбъектXDTOSTI017DETAIL1NEW.COUNTRYCODE.Добавить(ОбъектXDTOCOUNTRYCODE);
			
			ПаспортныеДанные = ТаблицаПаспортныхДанных.Найти(СтрокаТабличнойЧасти.ФизЛицо, "ФизЛицо");
		
			Если ПаспортныеДанные = Неопределено Тогда
				ПаспортныеДанныеСтрокой = "";	
			Иначе
				ПаспортныеДанныеСтрокой = СтрШаблон("%1, %2, %3, %4", 
												ПаспортныеДанные.Серия, 
												ПаспортныеДанные.Номер, 
												Формат(ПаспортныеДанные.ДатаВыдачи, "ДЛФ=D"), 
												ПаспортныеДанные.КемВыдан);
			КонецЕсли;
			
			ОбъектXDTOPASSPORTDETAILS = СоздатьОбъектXDTO("PASSPORTDETAILS");
			ОбъектXDTOPASSPORTDETAILS.Text = ПаспортныеДанныеСтрокой;
			ОбъектXDTOSTI017DETAIL1NEW.PASSPORTDETAILS.Добавить(ОбъектXDTOPASSPORTDETAILS);
			
			ОбъектXDTOREGISTRATIONNUMBER = СоздатьОбъектXDTO("REGISTRATIONNUMBER");
			ОбъектXDTOREGISTRATIONNUMBER.Text = СтрокаТабличнойЧасти.НомерНалоговойРегистрации;
			ОбъектXDTOSTI017DETAIL1NEW.REGISTRATIONNUMBER.Добавить(ОбъектXDTOREGISTRATIONNUMBER);
			
			ОбъектXDTOTAXCODE = СоздатьОбъектXDTO("TAXCODE");
			ОбъектXDTOTAXCODE.Text = СтрокаТабличнойЧасти.КодДохода;
			ОбъектXDTOSTI017DETAIL1NEW.TAXCODE.Добавить(ОбъектXDTOTAXCODE);
			
			ОбъектXDTOF3 = СоздатьОбъектXDTO("F3");
			ОбъектXDTOF3.Text = СтрокаТабличнойЧасти.ОДПН;
			ОбъектXDTOSTI017DETAIL1NEW.F3.Добавить(ОбъектXDTOF3);
			
			ОбъектXDTOF4 = СоздатьОбъектXDTO("F4");
			ОбъектXDTOF4.Text = СтрокаТабличнойЧасти.СуммаПН;
			ОбъектXDTOSTI017DETAIL1NEW.F4.Добавить(ОбъектXDTOF4);
			
			ОбъектXDTOPART2.STI017DETAIL1NEW.Добавить(ОбъектXDTOSTI017DETAIL1NEW);		
		КонецЦикла;
	КонецЕсли;	
	
	ОбъектXDTO.PART2.Добавить(ОбъектXDTOPART2);
	// PART2 - КОНЕЦ
	
	// Если есть ошибки файл не создается.
	Если МассивОшибок.Количество() > 0 Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Файл XML не сформирован по следующим причинам:'"));
		
		Для Каждого СтрокаМассива Из МассивОшибок Цикл
			ОбщегоНазначения.СообщитьПользователю(СтрокаМассива);			
		КонецЦикла;	
		
		Возврат Неопределено;
		
	Иначе
		// Создание файла.
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		ЗаписьXML = Новый ЗаписьXML;
		ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь);	
		ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, ПараметрыЗаписиXML);
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
		ЗаписьXML.Закрыть();	
		
		// Удаление лишнего текста из xml файла
		ТекстДокумент = Новый ТекстовыйДокумент;
		ТекстДокумент.Прочитать(ИмяВременногоФайла);
		ТекстФайла = ТекстДокумент.ПолучитьТекст();
		ТекстФайла = СтрЗаменить(
			ТекстФайла,
			" xmlns=""http://www.sample-package4.org"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""",
			"");
		ТекстДокумент.УстановитьТекст(ТекстФайла);	
		ТекстДокумент.Записать(ИмяВременногоФайла);
		
		Двоичное = Новый ДвоичныеДанные(ИмяВременногоФайла);
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Двоичное, УникальныйИдентификатор);
		
		// Удаление временного файла
		ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ИмяФайла", ИмяФайла);
		СтруктураДанных.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
		
		Возврат СтруктураДанных;
	КонецЕсли;
КонецФункции // ФормированиеФайла()

&НаСервере
Функция СоздатьОбъектXDTO(ТипОбъекта)
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.sample-package4.org", ТипОбъекта));
	
КонецФункции // СоздатьОбъектXDTO()

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

