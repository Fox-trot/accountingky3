#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НеобходимостьПерезаполнения = Ложь;
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьДоступностьЭлементов();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПодборДокументовСФПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		НеобходимостьПерезаполнения = ПолучитьДокументыИзХранилища(АдресЗапасовВХранилище);
		УстановитьВидимостьДоступностьЭлементов();
		УстановкаЗначенийРеквизитовШапки();
		
		ТекстОповещения = НСтр("ru = 'Заполнение'");
		ТекстПояснения = НСтр("ru = 'Табличная часть ""Документы"" заполнена'");
		ПоказатьОповещениеПользователя(ТекстОповещения,, ТекстПояснения, БиблиотекаКартинок.Информация32);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением, Объект.ВалютаДокумента);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	//ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	//СтруктураДоговор 			= БухгалтерскийУчетВызовСервера.ПолучитьДоговорКонтрагента(
	//							Объект.Организация, 
	//							Объект.Контрагент, 
	//							ВалютаРегламентированногоУчета, 
	//							ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	//Объект.ДоговорКонтрагента 	= СтруктураДоговор.ДоговорКонтрагента;	
	
КонецПроцедуры

&НаКлиенте
Процедура СерияБланкаСФПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.СерияБланкаСФ) И (НЕ ЗначениеЗаполнено(Объект.ДатаСФ)) Тогда
		Объект.ДатаСФ = ДатаДокумента;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НомерБланкаСФПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.ДатаСФ) Тогда
		Объект.ДатаСФ = ДатаДокумента;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ПересчитатьИтоги();
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыПоступления

&НаКлиенте
Процедура ДокументыПоступленияПослеУдаления(Элемент)
	НеобходимостьПерезаполнения = Истина;
	УстановитьВидимостьДоступностьЭлементов();
	УстановкаЗначенийРеквизитовШапки();
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПоступленияДокументПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ДокументыПоступления.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаДокумента = ПолучитьСуммыВыбираемогоДокумента(СтрокаТабличнойЧасти.ДокументПоступления);
	НеобходимостьПерезаполнения = Истина;
	УстановитьВидимостьДоступностьЭлементов();
	УстановкаЗначенийРеквизитовШапки();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура вызывается при нажатии кнопки "ЗаполнитьПоОснованию" 
//
&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Документ будет полностью перезаполнен по ""Основанию""! Продолжить выполнение операции?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ПодборПоКонтрагенту" 
//
&НаКлиенте
Процедура ЗаполнитьПоКонтрагенту(Команда)
	РаботаСПодборомДокументовКлиент.ОткрытьПодбор(ЭтаФорма);
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ЗаполнитьПоДокументамПоступления" 
//
&НаКлиенте
Процедура ЗаполнитьПоДокументамПоступления(Команда)		
	Отказ = Ложь;
	
	Если Объект.ДокументыПоступления.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть ""Документы""! Операция отменена.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ДокументыПоступления",,Отказ);		
	КонецЕсли;

	Если Отказ Тогда 
		Возврат
	КонецЕсли;		
	
	Если Объект.Товары.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьПоДокументамПоступления", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные табличной части ""Товары"" будут перезаполнены! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		ЗаполнениеИОбработкаТабличнойЧастиДокументы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоДокументу(Объект.ДокументОснование);
        УстановитьВидимостьДоступностьЭлементов();
    КонецЕсли;
КонецПроцедуры // ЗаполнитьПоОснованию()

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьПоДокументамПоступления(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнениеИОбработкаТабличнойЧастиДокументы();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()
	Элементы.Общая.Доступность = Объект.ДокументыПоступления.Количество() <= 1;
	Элементы.ГруппаСообщенияОНеобходимостиПерезаполненияТЧТовары.Видимость = НеобходимостьПерезаполнения;
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()    

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением, ВалютаДокумента)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаНовая, Новый Структура("Валюта", ВалютаДокумента));
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность
	);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Пересчитать курс кратность валюты расчетов
//
// Параметры:
//  СтруктураДанные	- Структура - 
//		* ВалютаКурсКратность - Структура
//			* Курс - Число
//			* Кратность - Число
//
&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		Или Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(Объект.Курс) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(КурсНовый) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		
		ТекстСообщения = НСтр("ru = 'На дату документа у валюты расчетов (" + КурсВалютыСтрокой + ") был задан курс.
									|Установить курс расчетов (" + КурсНовыйВалютыСтрокой + ") в соответствии с курсом валюты?'");
		
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПересчитатьКурсКратностьВалютыДокументаЗавершение", ЭтотОбъект, Новый Структура("КратностьНовый, КурсНовый", КратностьНовый, КурсНовый)), ТекстСообщения, Режим, 0);
		Возврат;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КратностьНовый = ДополнительныеПараметры.КратностьНовый;
	КурсНовый = ДополнительныеПараметры.КурсНовый;
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Курс = КурсНовый;
		Объект.Кратность = КратностьНовый;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ОбработкаЗаполнения(ДокОснование, );
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
КонецПроцедуры // ЗаполнитьПоДокументу()

// Процедура получает список документов из временного хранилища
//
// Параметры:
//  АдресЗапасовВХранилище - Структура - адрес в хранилище и идентификатор формы владельца.
//
// Возвращаемое значение:
//  Булево - Истина, если подобранные документы отличаются от уже имеющихся документов 
//	в ТЧ "ДокументыОплаты". 
//
&НаСервере
Функция ПолучитьДокументыИзХранилища(АдресЗапасовВХранилище)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);	
	
	Перезаполнить = Ложь;
	Если ТаблицаДляЗагрузки.Количество() <> Объект.ДокументыПоступления.Количество() Тогда
		Перезаполнить = Истина;
	Иначе
		СтарыеДанныеТабличнойЧасти = Объект.ДокументыПоступления.Выгрузить();
		Для каждого ДокументПодбора Из ТаблицаДляЗагрузки Цикл
			РезльтатПоиска = СтарыеДанныеТабличнойЧасти.Найти(ДокументПодбора.ДокументОснование,"ДокументПоступления");
			Если РезльтатПоиска = Неопределено Тогда
				Перезаполнить = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Перезаполнить Тогда
		Объект.ДокументыПоступления.Очистить();  
		
		Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл			
			СтрокаТабличнойЧасти = Объект.ДокументыПоступления.Добавить();
			СтрокаТабличнойЧасти.ДокументПоступления = СтрокаЗагрузки.ДокументОснование;
			СтрокаТабличнойЧасти.СуммаДокумента = СтрокаЗагрузки.СуммаДокумента;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Перезаполнить;
КонецФункции

// Процедура пересчитывает сумму документа
//
&НаКлиенте
Процедура ПересчитатьИтоги()
	Объект.СуммаДокумента 	= Объект.Товары.Итог("Сумма");	
КонецПроцедуры // ()

// Процедура заполняет реквизит "СуммаДокумента",
// табличной части "ДокументыПодбора", при выборе
// самого документа.
//
// Параметры:
//  ТекущийПодобранныйДокумент - ДокументСсылка - ссылка на выбранный документ в ТЧ "ДокументыПодбора".
//  
// Возвращаемое значение:
//  Число - сумма передаваемого в функцию документа.
//
&НаСервере
Функция ПолучитьСуммыВыбираемогоДокумента(ТекущийПодобранныйДокумент)
	Возврат ТекущийПодобранныйДокумент.СуммаДокумента		
КонецФункции

// Процедура устанавливает значения реквизитов "НДС не подтвержден" и "Общая"
//
Процедура УстановкаЗначенийРеквизитовШапки()	
	КоличествоДокументов = Объект.ДокументыПоступления.Количество();
	
	Если КоличествоДокументов = 1 Тогда
		Объект.НДСНеПодтвержден = Истина;
		Объект.Общая = Ложь;
	ИначеЕсли КоличествоДокументов = 0 Тогда 
		Объект.НДСНеПодтвержден = Ложь;
		Объект.Общая = Ложь;
	Иначе
		Объект.НДСНеПодтвержден = Ложь;
		Объект.Общая = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет ТЧ "ДокументыПоступления" и  
// производит необходимые действия после заполнения.
//
&НаКлиенте
Процедура ЗаполнениеИОбработкаТабличнойЧастиДокументы()
	Объект.Товары.Очистить();
	ЗаполнитьПоДокументамПоступленияНаСервере();
	ПересчитатьИтоги();
	НеобходимостьПерезаполнения = Ложь;
	УстановитьВидимостьДоступностьЭлементов();
	
	ТекстОповещения = НСтр("ru = 'Заполнение'");
	ТекстПояснения = НСтр("ru = 'Табличная часть ""Товары"" заполнена'");
	ПоказатьОповещениеПользователя(ТекстОповещения,, ТекстПояснения, БиблиотекаКартинок.Информация32);	
КонецПроцедуры

// Процедура заполняет табличную часть "Товары"
// по подобранным документам.
//
&НаСервере
Процедура ЗаполнитьПоДокументамПоступленияНаСервере()
	
	ОбъектДокумента = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.СчетФактураПолученный"));
	ОбъектДокумента.ЗаполнитьПоПодобраннымДокументам(Объект.ВозвратТоваров);
	ЗначениеВРеквизитФормы(ОбъектДокумента, "Объект");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти