#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = КонецГода(ТекущаяДатаСеанса());
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	Объект.Дата = КонецГода(Объект.Дата);
	Если ЕстьДокументВУказанныйПериод(Объект.Дата) Тогда
		ТекстСообщения = НСтр("ru = 'Для указанного периода уже существует документ ""Отчет по налогу на имущество"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.Дата");
		// Возвращаем значение до изменения
		Объект.Дата	= ДатаДокумента;
	    Возврат;
	КонецЕсли;

	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда		
		Объект.Дата = КонецМесяца(Объект.Дата);		
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;				
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВариантОтчета) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен вариант отчета! Заполнение отменено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ВариантОтчета");
		Возврат;
	КонецЕсли;	
	
	Если Объект.Недвижимость.Количество() > 0 ИЛИ Объект.Недвижимость.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнить", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные табличной части документа будут перезаполнены! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		ЗаполнитьНаСервере();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросЗаполнить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНаСервере();
	КонецЕсли; 
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервере
Функция ЕстьДокументВУказанныйПериод(Дата)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтчетПоНалогуНаИмущество.Ссылка
		|ИЗ
		|	Документ.ОтчетПоНалогуНаИмущество КАК ОтчетПоНалогуНаИмущество
		|ГДЕ
		|	НЕ ОтчетПоНалогуНаИмущество.ПометкаУдаления
		|	И КОНЕЦПЕРИОДА(ОтчетПоНалогуНаИмущество.Дата, ГОД) = &Дата";
	
	Запрос.УстановитьПараметр("Дата", Дата);		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество() > 0 	

КонецФункции 

&НаСервере
Процедура ЗаполнитьНаСервере()

	МассивРезультатов = Документы.ЗакрытиеМесяца.ПолучитьДанныеПоНалогуНаИмущество(Объект.Организация, НачалоГода(Объект.Дата), КонецГода(Объект.Дата),, КонецГода(Объект.Дата) + 1);
	
	Объект.Недвижимость.Загрузить(МассивРезультатов[9].Выгрузить());
	Объект.Транспорт.Загрузить(МассивРезультатов[15].Выгрузить());
	
	СтруктураСуммНалога = Новый Структура();
	СтруктураСуммНалога.Вставить("Март", 	 0);
	СтруктураСуммНалога.Вставить("Июнь", 	 0);
	СтруктураСуммНалога.Вставить("Сентябрь", 0);
	СтруктураСуммНалога.Вставить("Декабрь",  0);
	
	СуммаНалога = 0;
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ГруппаИмущества", 0);	
	
	Объект.Приложение.Очистить();
	
	Для Индекс = 2 По 3 Цикл
		ГруппаИмущества = Справочники.ГруппыИмущества.НайтиПоНаименованию(Строка(Индекс) + " группа");
		
		СтруктураОтбора.ГруппаИмущества = ГруппаИмущества;
		
		МассивСтрок = Объект.Недвижимость.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			СуммаНалога = СуммаНалога + СтрокаМассива.СуммаНалога - СтрокаМассива.ЗемНалог;			
		КонецЦикла;	
		
		МассивКоэффициентов = Новый Массив();
		МассивКоэффициентов.Добавить(1);
		МассивКоэффициентов.Добавить(1);
		МассивКоэффициентов.Добавить(1);
		МассивКоэффициентов.Добавить(1);
		
		МассивСуммКорректировки = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СуммаНалога, МассивКоэффициентов);
		
		Если МассивСуммКорректировки <> Неопределено Тогда
			СтруктураСуммНалога.Март 	 = МассивСуммКорректировки[0];
			СтруктураСуммНалога.Июнь 	 = МассивСуммКорректировки[1];
			СтруктураСуммНалога.Сентябрь = МассивСуммКорректировки[2];
			СтруктураСуммНалога.Декабрь  = МассивСуммКорректировки[3];
			
			СтрокаТабличнойЧасти = Объект.Приложение.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураСуммНалога);
			СтрокаТабличнойЧасти.ГруппаИмущества = ГруппаИмущества;
		КонецЕсли;
		
		СуммаНалога = 0;
	КонецЦикла;
КонецПроцедуры // ЗаполнитьНаСервере()

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

