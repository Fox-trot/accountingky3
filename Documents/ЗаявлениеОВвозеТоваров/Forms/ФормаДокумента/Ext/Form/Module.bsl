#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ПризнакСтраны = Объект.Контрагент.ПризнакСтраны;

	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();

	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Товары");
	// Конец КопированиеСтрокТабличныхЧастей

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеБППовтИсп.ИспользоватьПодключаемоеОборудование();
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ВидПодбора") Тогда
		Если ВыбранноеЗначение.ВидПодбора = "ЗаполнитьПоПоступлению" 
			ИЛИ ВыбранноеЗначение.ВидПодбора = "ДобавитьПоДокументамПоступления" Тогда
			ЗаполнениеТовары(ВыбранноеЗначение.МассивДокументов);			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПодборНоменклатурыПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище);
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Товары");
	КонецЕсли;
	// Конец КопированиеСтрокТабличныхЧастей
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату.
			Если Параметр[1] = Неопределено Тогда
				ТекШтрихкод = Параметр[0]; // Достаем штрихкод из основных данных
			Иначе
				ТекШтрихкод = Параметр[1][1]; // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			ПоискПоШтрихкодуЗавершение(ТекШтрихкод, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары"));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением, Объект.ВалютаДокумента);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);	
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ПризнакСтраны = СтруктураДанные.ПризнакСтраны;
	
	ОбработатьИзменениеДоговора();
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ОбработатьИзменениеДоговора();
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПодписавшееДокументПриИзменении(Элемент)
	ФизЛицоПриИзмененииНаСервере();		
КонецПроцедуры

&НаКлиенте
Процедура ПризнакДоговораЛизингаПриИзменении(Элемент)
	Если Объект.ПризнакДоговораЛизинга Тогда 
		Объект.ПризнакДоговораПереработкиДавальческогоСырья = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПризнакДоговораПереработкиДавальческогоСырьяПриИзменении(Элемент)
	Если Объект.ПризнакДоговораПереработкиДавальческогоСырья Тогда 
		Объект.ПризнакДоговораЛизинга = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаВозникновенияЗаявленияПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда 
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		СтрокаТабличнойЧасти.ПризнакОсвобожденияОтУплатыАкциз = 4;
		СтрокаТабличнойЧасти.ПризнакОсвобожденияОтУплатыНДС = 1;
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоПоступлению(Команда)	
	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен Контрагент! Операция отменена.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Контрагент",,Отказ);		
	КонецЕсли;
	Если Отказ Тогда 
		Возврат
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьПоПоступлению", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные табличной части документа будут перезаполнены! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		Объект.Товары.Очистить();
		ВыполнитьПодбор("ЗаполнитьПоПоступлению");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПоступления(Команда)		
	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен Контрагент! Операция отменена.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Контрагент",,Отказ);		
	КонецЕсли;
	Если Отказ Тогда 
		Возврат
	КонецЕсли;

	ВыполнитьПодбор("ДобавитьПоДокументамПоступления");

КонецПроцедуры

// Процедура - обработчик события действия команды Подбор в табличную часть Товары.
// Открывает форму подбора.
//
&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	РаботаСПодборомНоменклатурыКлиент.ОткрытьПодбор(ЭтаФорма, "Товары", "Поступление");
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВЭлектроннойФорме(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		Или Модифицированность Тогда 
		ТекстСообщения = НСтр("ru='Для формирования заявления в электронной форме необходимо записать документ.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	
	
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для формирования заявления в электронной форме
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("ИмяКоманды", "СохранитьВЭлектроннойФорме"));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьСохранение();
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьТоварыИзФайла(Команда)
	
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для загрузки данных из файла
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("ИмяКоманды", "ЗагрузитьТоварыИзФайла"));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьЗагрузкуТоваров();
	КонецЕсли;

КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", 
		ЭтотОбъект, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары")), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
		
КонецПроцедуры
	
&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
    
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
        ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1), ДополнительныеПараметры.ИмяТабличнойЧасти);
	КонецЕсли;	

КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	ПодключаемоеОборудованиеБПКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, "Товары");
КонецПроцедуры // ЗагрузитьДанныеИзТСД()
// Конец ПодключаемоеОборудование

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьПоПоступлению(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
		ВыполнитьПодбор("ЗаполнитьПоПоступлению");
	КонецЕсли; 
КонецПроцедуры	

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьТоварыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
    Если АдресЗагруженныхДанных = Неопределено Тогда 
        Возврат;
    КонецЕсли;
    ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Процедура устанавливает видимость и доступность элементов.
//
Процедура УстановитьВидимостьДоступностьЭлементов()
	Если Объект.ПричинаВозникновенияЗаявления = "1" Тогда 
		Элементы.НомерРанееПредставленногоЗаявления.Видимость = Ложь;
		Элементы.ДатаРанееПредставленногоЗаявления.Видимость = Ложь;
	Иначе 
		Элементы.НомерРанееПредставленногоЗаявления.Видимость = Истина;
		Элементы.ДатаРанееПредставленногоЗаявления.Видимость = Истина;
	КонецЕсли;
	
	Если ПризнакСтраны = Перечисления.ПризнакиСтраны.ИмпортЭкспорт Тогда 
		Элементы.ТипПродавца.Видимость = Истина;
		Элементы.ТипПокупателя.Видимость = Истина;
	Иначе 
		Элементы.ТипПродавца.Видимость = Ложь;
		Элементы.ТипПокупателя.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры 

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением, ВалютаДокумента)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	ВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаНовая);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура - Пересчитать курс кратность валюты расчетов
//
// Параметры:
//  СтруктураДанные	- Структура - 
//		* ВалютаКурсКратность - Структура
//			* Курс - Число
//			* Кратность - Число
//
&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		Или Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(Объект.Курс) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(КурсНовый) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'На дату документа у валюты расчетов %1 был задан курс. Установить курс расчетов %2 в соответствии с курсом валюты?'"), КурсВалютыСтрокой, КурсНовыйВалютыСтрокой);
		
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПересчитатьКурсКратностьВалютыДокументаЗавершение", ЭтотОбъект, Новый Структура("КратностьНовый, КурсНовый", КратностьНовый, КурсНовый)), ТекстСообщения, Режим, 0);
		Возврат;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КратностьНовый = ДополнительныеПараметры.КратностьНовый;
	КурсНовый = ДополнительныеПараметры.КурсНовый;
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Курс = КурсНовый;
		Объект.Кратность = КратностьНовый;
	КонецЕсли;
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация);
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию);
	
	СтруктураДанные.Вставить(
		"ПризнакСтраны",
		Контрагент.ПризнакСтраны);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанию
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Заполняет документ данными по физлицу
//
&НаСервере
Процедура ФизЛицоПриИзмененииНаСервере()
	СведенияОСотруднике = ПроведениеРасчетовПоЗарплатеСервер.СведенияОСотруднике(ДатаДокумента, Объект.Организация, Объект.ФизЛицоПодписавшееДокумент); 
	Объект.ДолжностьЛицаПодписавшегоДокумент = СведенияОСотруднике.Должность;
КонецПроцедуры // ЗаполнитьПоФизЛицу()

&НаСервере
Процедура ЗаполнениеТовары(МассивДокументов)
	
	Для каждого ДокументПоступления Из МассивДокументов Цикл
		ДанныеДокументаПоступления = Новый Структура;
		ДанныеДокументаПоступления.Вставить("Курс", ДокументПоступления.Курс);
		ДанныеДокументаПоступления.Вставить("СерияНомерСФ", ДокументПоступления.СерияБланкаСФ + "/" + ДокументПоступления.НомерБланкаСФ);
		ДанныеДокументаПоступления.Вставить("Валюта", ДокументПоступления.ВалютаДокумента);
		ДанныеДокументаПоступления.Вставить("ДокументПоступления", ДокументПоступления);
		ДанныеДокументаПоступления.Вставить("ДатаПринятияНаУчет", ДокументПоступления.Дата);
		ДанныеДокументаПоступления.Вставить("ДатаСФ", ДокументПоступления.ДатаСФ);
		Если ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			ДанныеДокументаПоступления.Вставить("ЗначениеСтавкиНДС", ДокументПоступления.ЗначениеСтавкиНДС);
			ДанныеДокументаПоступления.Вставить("СерияНомерСопроводительной", ДокументПоступления.НомерСНакладной);
			ДанныеДокументаПоступления.Вставить("ДатаСопроводительной", ДокументПоступления.ДатаСНакладной);
		КонецЕсли;	
		
		Для каждого СтрокаПоступления Из ДокументПоступления.Товары Цикл
			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеДокументаПоступления);
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаПоступления);
			
			Если ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
				СтрокаТабличнойЧасти.Стоимость			= СтрокаПоступления.Сумма;
				СтрокаТабличнойЧасти.НалоговаяБазаНДС	= СтрокаПоступления.Сумма;
				СтрокаТабличнойЧасти.СуммаАкциза		= СтрокаПоступления.СуммаАкциза;
			Иначе
				СтрокаТабличнойЧасти.НалоговаяБазаНДС	= -СтрокаПоступления.Сумма;
				СтрокаТабличнойЧасти.Стоимость			= -СтрокаПоступления.Сумма;
				СтрокаТабличнойЧасти.СуммаАкциза		= -СтрокаТабличнойЧасти.СуммаАкциза;
				СтрокаТабличнойЧасти.СуммаНДС			= -СтрокаТабличнойЧасти.СуммаНДС;
				СтрокаТабличнойЧасти.Количество			= -СтрокаТабличнойЧасти.Количество;
			КонецЕсли;	
		КонецЦикла;		
	КонецЦикла;

КонецПроцедуры //

&НаКлиенте
Процедура ВыполнитьПодбор(ВидПодбора)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидПодбора", 	ВидПодбора);
	ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	ПараметрыОтбора.Вставить("ДатаОтбора", 	ДатаДокумента);
	ПараметрыОтбора.Вставить("Контрагент", 	Объект.Контрагент);
	ПараметрыОтбора.Вставить("СписокУжеВыбранных", СписокУжеВыбранных());
	ОткрытьФорму("Документ.ЗаявлениеОВвозеТоваров.Форма.ФормаПодбораДокументовПоступления", ПараметрыОтбора, ЭтаФорма);	

КонецПроцедуры // ВыполнитьПодбор()

&НаСервере
Функция СписокУжеВыбранных()
	ТаблицаДокументов = Объект.Товары.Выгрузить(, "ДокументПоступления");
	ТаблицаДокументов.Свернуть("ДокументПоступления");
	
	Возврат ТаблицаДокументов.ВыгрузитьКолонку("ДокументПоступления");
КонецФункции // СписокУжеВыбранных()

// Процедура - обработчик подбора товаров.
//
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаЗагрузки.Номенклатура));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
	КонецЦикла;
		
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

&НаСервере
Функция ТребуетсяНастройкаАвторизацияИнтернетПоддержки()
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		ДанныеАутентификации = МодульИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		Возврат Не (ДанныеАутентификации <> Неопределено
			И ЗначениеЗаполнено(ДанныеАутентификации.Логин)
			И ЗначениеЗаполнено(ДанныеАутентификации.Пароль));
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ПриПодключенииИнтернетПоддержки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодключенияИнтернетПоддержки", ЭтотОбъект, ДополнительныеПараметры);
		МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияИнтернетПоддержки(Результат, ДополнительныеПараметры) Экспорт
	Если Не (ТипЗнч(Результат) = Тип("Структура")
		И ЗначениеЗаполнено(Результат.Логин)
		И ЗначениеЗаполнено(Результат.Пароль)) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ИмяКоманды = "ЗагрузитьТоварыИзФайла" Тогда 
		ПродолжитьЗагрузкуТоваров();
	ИначеЕсли ДополнительныеПараметры.ИмяКоманды = "СохранитьВЭлектроннойФорме" Тогда 
		ПродолжитьСохранение();
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗагрузкуТоваров()

	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "ЗаявлениеОВвозеТоваров.Товары";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка списка товаров из файла'");
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьТоварыИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);

КонецПроцедуры // ПродолжитьЗагрузкуТоваров()

// ПодключаемоеОборудование

// Процедура - Получены штрихкоды
//
// Параметры:
//  ДанныеШтрикодов	 - Структура/Массив - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов, ИмяТабличнойЧасти) Экспорт
	
	Модифицированность = Истина;
	
	НедобавленныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов, ИмяТабличнойЧасти);
	
	// Неизвестные штрихкоды.
	Если НедобавленныеШтрихкоды.НеизвестныеШтрихкоды.Количество() > 0 Тогда
		Для Каждого СтруктураДанные Из НедобавленныеШтрихкоды.НеизвестныеШтрихкоды Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Данные по штрихкоду не найдены: %1'"), СтруктураДанные.Штрихкод);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	// Штрихкоды некорректного типа.
	ИначеЕсли НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа.Количество() > 0 Тогда 
		Для Каждого СтруктураДанные Из НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Найденная по штрихкоду %1 номенклатура: ""%2"", не подходит для этой табличной части'"),
				СтруктураДанные.ТекШтрихкод, СтруктураДанные.Номенклатура);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоШтрихкоду(ТекШтрихкод)
	
	Номенклатура = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьНоменклатуруПоШтрихкоду(ТекШтрихкод);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", Номенклатура);
	СтруктураДанные.Вставить("ТипНоменклатурыУслуга", ?(ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура"), Номенклатура.Услуга, Ложь));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПоШтрихкоду()

// Функция - Заполнить по данным штрихкодов
//
// Параметры:
//  ДанныеШтрикодов		 - 	 - Структура/Массив	 - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
// 
// Возвращаемое значение:
//  Структура - Массивы неизвестных штрих кодов
//
&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов, ИмяТабличнойЧасти) 
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	Для каждого ТекШтрихкод Из МассивШтрихкодов Цикл
		СтруктураДанные = ПолучитьДанныеПоШтрихкоду(ТекШтрихкод);
		
		Если НЕ ЗначениеЗаполнено(СтруктураДанные.Номенклатура) Тогда 
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ТипНоменклатурыУслуга Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("ТекШтрихкод, Номенклатура", ТекШтрихкод, СтруктураДанные.Номенклатура));
		Иначе 
			СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
			СтрокаТабличнойЧасти.Номенклатура = СтруктураДанные.Номенклатура;
			СтрокаТабличнойЧасти.Количество = ТекШтрихкод.Количество;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",
		НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);

КонецФункции // ЗаполнитьПоДаннымШтрихкодов()
// Конец ПодключаемоеОборудование

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Период, ВалютаДокумента, ДоговорКонтрагента)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорКонтрагента.ВалютаРасчетов);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаРасчетов, Период));
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаКлиенте
Процедура ОбработатьИзменениеДоговора(МодифицированДоговор = Ложь)
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(ДатаДокумента, Объект.ВалютаДокумента, Объект.ДоговорКонтрагента);
	
	Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
	Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
	Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеЗаявленияВЭлектронномФормате

&НаКлиенте
Процедура ПродолжитьСохранение()
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Укажите путь для сохранения файла'");
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ДиалогОткрытияФайлаЗавершение", ЭтотОбъект);
	ДиалогОткрытияФайла.Показать(Оповещение);

КонецПроцедуры // ПродолжитьСохранение()

&НаКлиенте
Процедура ДиалогОткрытияФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() > 0 Тогда
		Попытка
			Ошибки = Неопределено;
			СтруктураДанных = ФормированиеФайла(ДополнительныеПараметры, Ошибки);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось завершить формирование файла.
				|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
		
		Если НЕ Ошибки = Неопределено Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);	
			Возврат;
		КонецЕсли;		
		
		// Формирование имени файла.
		КаталогФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВыбранныеФайлы[0]);
		ИмяФайла = СтруктураДанных.ИмяФайла;
		ПолноеИмяФайла = КаталогФайла + ИмяФайла;
		
		// Сохранение файла.
		Двоичное = ПолучитьИзВременногоХранилища(СтруктураДанных.АдресВременногоХранилища);
		Двоичное.Записать(ПолноеИмяФайла);	
		
		ТекстСообщения = НСтр("ru='Файл успешно сохранен.
			|Имя файла: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПолноеИмяФайла);	
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ФормированиеФайла(ДополнительныеПараметры, Ошибки)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИмяФайла", "");
	СтруктураДанных.Вставить("АдресВременногоХранилища", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Номер КАК Номер,
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	ТаблицаДокумента.Организация.ГНС.Код КАК ГНСКод,
		|	ТаблицаДокумента.Организация.ИНН КАК ОрганизацияИНН,
		
		|	ТаблицаДокумента.СтатусДокумента КАК СтатусДокумента,
		|	ТаблицаДокумента.ПричинаВозникновенияЗаявления КАК ПричинаВозникновенияЗаявления,
		|	ТаблицаДокумента.НомерРанееПредставленногоЗаявления КАК НомерРанееПредставленногоЗаявления,
		|	ТаблицаДокумента.ДатаРанееПредставленногоЗаявления КАК ДатаРанееПредставленногоЗаявления,
		
		|	ТаблицаДокумента.ПризнакЛицаПодписавшегоДокумент КАК ПризнакЛицаПодписавшегоДокумент,
		|	ТаблицаДокумента.ФизЛицоПодписавшееДокумент.Наименование КАК ФизЛицоПодписавшееДокумент,
		|	ТаблицаДокумента.ФизЛицоПодписавшееДокумент.ИНН КАК ИННЛицаПодписавшегоДокумент,
		|	ТаблицаДокумента.ДолжностьЛицаПодписавшегоДокумент.Наименование КАК ДолжностьЛицаПодписавшегоДокумент,
		
		|	ТаблицаДокумента.БухгалтерПодписавшийДокумент.Наименование КАК БухгалтерПодписавшийДокумент,
		|	ТаблицаДокумента.БухгалтерПодписавшийДокумент.ИНН КАК ИННБухгалтераПодписавшегоДокумент,
		
		|	ТаблицаДокумента.ПризнакДоговораЛизинга КАК ПризнакДоговораЛизинга,
		|	ТаблицаДокумента.ПризнакДоговораПереработкиДавальческогоСырья КАК ПризнакДоговораПереработкиДавальческогоСырья,
		
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.Контрагент.ИНН КАК КонтрагентИНН,
		|	ТаблицаДокумента.Контрагент.ЮрФизЛицо КАК КонтрагентЮрФизЛицо,
		|	ТаблицаДокумента.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
		|	ТаблицаДокумента.Контрагент.СтранаРезидентства.Код КАК КонтрагентСтранаРезидентстваКод,
		
		|	ТаблицаДокумента.Контрагент.ПризнакСтраны КАК КонтрагентПризнакСтраны,
		|	ТаблицаДокумента.ТипПродавца КАК ТипПродавца,
		|	ТаблицаДокумента.ТипПокупателя КАК ТипПокупателя,
		
		|	ТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаДокумента.ДоговорКонтрагента.НомерДоговора КАК НомерДоговора,
		|	ТаблицаДокумента.ДоговорКонтрагента.ДатаДоговора КАК ДатаДоговора,
		|	ТаблицаДокумента.ДоговорКонтрагента.ВалютаРасчетов КАК ДоговорКонтрагентаВалютаРасчетов,
		|	ТаблицаДокумента.ДоговорКонтрагента.ВалютаРасчетов.Код КАК ВалютаРасчетовКод,
		|	ТаблицаДокумента.Курс КАК Курс,
		
		|	ТаблицаДокумента.НомерСпецификации КАК НомерСпецификации,
		|	ТаблицаДокумента.ДатаСпецификации КАК ДатаСпецификации,
		
		|	ТаблицаДокумента.Товары.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
		|		Номенклатура.КодТНВЭД.Код КАК НоменклатураКодТНВЭД,
		|		Номенклатура.ЕдиницаИзмерения.Код КАК НоменклатураЕдиницаИзмеренияКод,
		|		Количество КАК Количество,
		|		Стоимость КАК Стоимость,
		
		|		СерияНомерСФ КАК СерияНомерСФ,
		|		ДатаСФ КАК ДатаСФ,
		|		ДатаПринятияНаУчет КАК ДатаПринятияНаУчет,
		
		|		НалоговаяБазаАкциз КАК НалоговаяБазаАкциз,
		|		НалоговаяБазаНДС КАК НалоговаяБазаНДС,
		|		СуммаАкциза КАК СуммаАкциза,
		|		СуммаНДС КАК СуммаНДС,
		|		СтавкаАкцизТверд КАК СтавкаАкцизТверд,
		|		СтавкаАкцизАдвалор КАК СтавкаАкцизАдвалор,
		|		ЗначениеСтавкиНДС КАК ЗначениеСтавкиНДС,
		
		|		ПризнакОсвобожденияОтУплатыАкциз КАК ПризнакОсвобожденияОтУплатыАкциз,
		|		ПризнакОсвобожденияОтУплатыНДС КАК ПризнакОсвобожденияОтУплатыНДС,
	
		|		СерияНомерСопроводительной КАК СерияНомерСопроводительной,
		|		ДатаСопроводительной КАК ДатаСопроводительной
		
		|	) КАК Товары
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось сформировать имя файла.'");
	КонецЕсли;	
	
	ВыборкаШапка = РезультатЗапроса.Выбрать();
	ВыборкаШапка.Следующий();
	
	ТаблицаТовары = ВыборкаШапка.Товары.Выгрузить();
	
	// Контроль формирования файла.
	Отказ = Ложь;
	// Реквизиты документа.
	Если НЕ ЗначениеЗаполнено(ВыборкаШапка.СтатусДокумента) Тогда 
		ТекстДляОднойОшибки = НСтр("ru = 'Поле ""Статус документа"" не заполнено.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.СтатусДокумента", ТекстДляОднойОшибки, "Объект",, ТекстДляОднойОшибки);
		Отказ = Истина;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(ВыборкаШапка.ПризнакЛицаПодписавшегоДокумент) Тогда 
		ТекстДляОднойОшибки = НСтр("ru = 'Поле ""Признак лица, подписавшего документ"" не заполнено.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.ПризнакЛицаПодписавшегоДокумент", ТекстДляОднойОшибки, "Объект",, ТекстДляОднойОшибки);
		Отказ = Истина;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(ВыборкаШапка.ПричинаВозникновенияЗаявления) Тогда 
		ТекстДляОднойОшибки = НСтр("ru = 'Поле ""Причина возникновения заявления"" не заполнено.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.ПричинаВозникновенияЗаявления", ТекстДляОднойОшибки, "Объект",, ТекстДляОднойОшибки);
		Отказ = Истина;
	Иначе 
		Если ВыборкаШапка.ПричинаВозникновенияЗаявления = "4"
			Или ВыборкаШапка.ПричинаВозникновенияЗаявления = "6" Тогда 
			Если НЕ ЗначениеЗаполнено(ВыборкаШапка.НомерРанееПредставленногоЗаявления) Тогда 
				ТекстДляОднойОшибки = НСтр("ru = 'Поле ""Номер ранее представленного заявления"" не заполнено.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.НомерРанееПредставленногоЗаявления", ТекстДляОднойОшибки, "Объект",, ТекстДляОднойОшибки);
				Отказ = Истина;
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(ВыборкаШапка.ДатаРанееПредставленногоЗаявления) Тогда 
				ТекстДляОднойОшибки = НСтр("ru = 'Поле ""Дата ранее представленного заявления"" не заполнено.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.ДатаРанееПредставленногоЗаявления", ТекстДляОднойОшибки, "Объект",, ТекстДляОднойОшибки);
				Отказ = Истина;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВыборкаШапка.Курс) Тогда 
		ТекстДляОднойОшибки = НСтр("ru = 'Поле ""Курс документа"" не заполнено.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Курс", ТекстДляОднойОшибки, "Объект",, ТекстДляОднойОшибки);
		Отказ = Истина;
	КонецЕсли;

	Если ЗначениеЗаполнено(ВыборкаШапка.КонтрагентПризнакСтраны)
		И ВыборкаШапка.КонтрагентПризнакСтраны = Перечисления.ПризнакиСтраны.ИмпортЭкспорт Тогда 
		Если НЕ ЗначениеЗаполнено(ВыборкаШапка.ТипПродавца) Тогда 
			ТекстДляОднойОшибки = НСтр("ru = 'Поле ""Тип продавца"" не заполнено.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.ТипПродавца", ТекстДляОднойОшибки, "Объект",, ТекстДляОднойОшибки);
			Отказ = Истина;
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(ВыборкаШапка.ТипПокупателя) Тогда 
			ТекстДляОднойОшибки = НСтр("ru = 'Поле ""Тип покупателя"" не заполнено.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.ТипПокупателя", ТекстДляОднойОшибки, "Объект",, ТекстДляОднойОшибки);
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ВыборкаШапка.НомерСпецификации) Тогда 
		ТекстДляОднойОшибки = НСтр("ru = 'Поле ""Номер спецификации"" не заполнено.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.НомерСпецификации", ТекстДляОднойОшибки, "Объект",, ТекстДляОднойОшибки);
		Отказ = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВыборкаШапка.ДатаСпецификации) Тогда 
		ТекстДляОднойОшибки = НСтр("ru = 'Поле ""Дата спецификации"" не заполнено.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.ДатаСпецификации", ТекстДляОднойОшибки, "Объект",, ТекстДляОднойОшибки);
		Отказ = Истина;
	КонецЕсли;
	
	// Реквизиты организации.
	Если НЕ ЗначениеЗаполнено(ВыборкаШапка.Организация) Тогда 
		ТекстДляОднойОшибки = НСтр("ru = 'Поле ""Организация"" не заполнено.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Организация", ТекстДляОднойОшибки, "Объект.Организация",, ТекстДляОднойОшибки);
		Отказ = Истина;
	Иначе 
		Если НЕ ЗначениеЗаполнено(ВыборкаШапка.ОрганизацияИНН) Тогда
			ТекстДляОднойОшибки = НСтр("ru = 'Поле ""ИНН"" не заполнено у реквизита ""Организация"".'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Организация", ТекстДляОднойОшибки, "Объект.Организация",, ТекстДляОднойОшибки);
			Отказ = Истина;
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(ВыборкаШапка.ГНСКод) Тогда
			ТекстДляОднойОшибки = НСтр("ru = 'Поле ""ГНС"" не заполнено у реквизита ""Организация"".'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Организация", ТекстДляОднойОшибки, "Объект.Организация",, ТекстДляОднойОшибки);
			Отказ = Истина;
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(ВыборкаШапка.ОрганизацияНаименованиеПолное) Тогда 
			ТекстДляОднойОшибки = НСтр("ru = 'Поле ""Полное наименование"" не заполнено у реквизита ""Организация"".'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Организация", ТекстДляОднойОшибки, "Объект.Организация",, ТекстДляОднойОшибки);
			Отказ = Истина;
		КонецЕсли;
		АдресОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			ВыборкаШапка.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ВыборкаШапка.Дата); 
		Если НЕ ЗначениеЗаполнено(АдресОрганизации) Тогда 
			ТекстДляОднойОшибки = НСтр("ru = 'Поле ""Юридический адрес"" не заполнено у реквизита ""Организация"".'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Организация", ТекстДляОднойОшибки, "Объект.Организация",, ТекстДляОднойОшибки);
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	// Реквизиты контрагента.
	Если НЕ ЗначениеЗаполнено(ВыборкаШапка.Контрагент) Тогда 
		ТекстДляОднойОшибки = НСтр("ru = 'Поле ""Контрагент"" не заполнено.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Контрагент", ТекстДляОднойОшибки, "Объект.Контрагент",, ТекстДляОднойОшибки);
		Отказ = Истина;
	Иначе 
		Если НЕ ЗначениеЗаполнено(ВыборкаШапка.КонтрагентИНН) Тогда 
			ТекстДляОднойОшибки = НСтр("ru = 'Поле ""ИНН"" не заполнено у реквизита ""Контрагент"".'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Контрагент", ТекстДляОднойОшибки, "Объект.Контрагент",, ТекстДляОднойОшибки);
			Отказ = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыборкаШапка.КонтрагентНаименованиеПолное) Тогда 
			ТекстДляОднойОшибки = НСтр("ru = 'Поле ""Полное наименование"" не заполнено у реквизита ""Контрагент"".'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Контрагент", ТекстДляОднойОшибки, "Объект.Контрагент",, ТекстДляОднойОшибки);
			Отказ = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыборкаШапка.КонтрагентСтранаРезидентстваКод) Тогда 
			ТекстДляОднойОшибки = НСтр("ru = 'Поле ""Страна резиденства"" не заполнено у реквизита ""Контрагент"".'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Контрагент", ТекстДляОднойОшибки, "Объект.Контрагент",, ТекстДляОднойОшибки);
			Отказ = Истина;
		КонецЕсли;

		АдресКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			ВыборкаШапка.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ВыборкаШапка.Дата); 
		Если НЕ ЗначениеЗаполнено(АдресКонтрагента) Тогда 
			ТекстДляОднойОшибки = НСтр("ru = 'Поле ""Юридический адрес"" не заполнено у реквизита ""Контрагент"".'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Контрагент", ТекстДляОднойОшибки, "Объект.Контрагент",, ТекстДляОднойОшибки);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	// Реквизиты договора.
	Если НЕ ЗначениеЗаполнено(ВыборкаШапка.ДоговорКонтрагента) Тогда 
		ТекстДляОднойОшибки = НСтр("ru = 'Поле ""Договор контрагента"" не заполнено.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.ДоговорКонтрагента", ТекстДляОднойОшибки, "Объект.ДоговорКонтрагента",, ТекстДляОднойОшибки);
		Отказ = Истина;
	Иначе 
		Если НЕ ЗначениеЗаполнено(ВыборкаШапка.ДоговорКонтрагентаВалютаРасчетов) Тогда 
			ТекстДляОднойОшибки = НСтр("ru = 'Поле ""Валюта расчетов"" не заполнено у реквизита ""Договор контрагента"".'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.ДоговорКонтрагента", ТекстДляОднойОшибки, "Объект.ДоговорКонтрагента",, ТекстДляОднойОшибки);
			Отказ = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыборкаШапка.НомерДоговора) Тогда 
			ТекстДляОднойОшибки = НСтр("ru = 'Поле ""Номер договора"" не заполнено у реквизита ""Договор контрагента"".'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.ДоговорКонтрагента", ТекстДляОднойОшибки, "Объект.ДоговорКонтрагента",, ТекстДляОднойОшибки);
			Отказ = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыборкаШапка.ДатаДоговора) Тогда 
			ТекстДляОднойОшибки = НСтр("ru = 'Поле ""Дата договора"" не заполнено у реквизита ""Договор контрагента"".'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.ДоговорКонтрагента", ТекстДляОднойОшибки, "Объект.ДоговорКонтрагента",, ТекстДляОднойОшибки);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;	

	// Реквизиты физического лица.
	Если НЕ ЗначениеЗаполнено(ВыборкаШапка.ФизЛицоПодписавшееДокумент) Тогда 
		ТекстДляОднойОшибки = НСтр("ru = 'Поле ""Физ лицо, подписавшее документ"" не заполнено.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.ФизЛицоПодписавшееДокумент", ТекстДляОднойОшибки, "Объект.ФизЛицоПодписавшееДокумент",, ТекстДляОднойОшибки);
		Отказ = Истина;
	Иначе 
		СтруктураДанные = ФизическиеЛицаКлиентСервер.ЧастиИмени(ВыборкаШапка.ФизЛицоПодписавшееДокумент);
		Если НЕ ЗначениеЗаполнено(СтруктураДанные.Фамилия) Тогда 
			ТекстДляОднойОшибки = НСтр("ru = 'Поле ""Фамилия"" не заполнено у реквизита ""Физ лицо, подписавшее документ"".'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.ФизЛицоПодписавшееДокумент", ТекстДляОднойОшибки, "Объект.ФизЛицоПодписавшееДокумент",, ТекстДляОднойОшибки);
			Отказ = Истина;
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(СтруктураДанные.Имя) Тогда 
			ТекстДляОднойОшибки = НСтр("ru = 'Поле ""Имя"" не заполнено у реквизита ""Физ лицо, подписавшее документ"".'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.ФизЛицоПодписавшееДокумент", ТекстДляОднойОшибки, "Объект.ФизЛицоПодписавшееДокумент",, ТекстДляОднойОшибки);
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ТаблицаТовары.Количество() = 0 Тогда 
		ТекстДляОднойОшибки = НСтр("ru = 'Не введено ни одной строки в список ""Товары"".'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Товары", ТекстДляОднойОшибки, "Объект.Товары",, ТекстДляОднойОшибки);
		Отказ = Истина;
	Иначе 	
		// Реквизиты табличной части "Товары".
		Если ТаблицаТовары.Итог("НалоговаяБазаНДС") = 0 Тогда 
			ТекстДляОднойОшибки = НСтр("ru = 'Итог по полю ""Налоговая база НДС"" равен 0.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Товары", ТекстДляОднойОшибки, "Объект.Товары",, ТекстДляОднойОшибки);
			Отказ = Истина;
		КонецЕсли;
		
		Для Каждого СтрокаТабличнойЧасти Из ТаблицаТовары Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда 
				ТекстДляОднойОшибки = СтрШаблон(НСтр("ru = 'Поле ""Номенклатура"" не заполнено в строке №%1.'"), СтрокаТабличнойЧасти.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Товары[%1].Номенклатура", ТекстДляОднойОшибки, 
					"Объект.Номенклатура", СтрокаТабличнойЧасти.НомерСтроки, ТекстДляОднойОшибки, СтрокаТабличнойЧасти.НомерСтроки-1);
				Отказ = Истина;
			Иначе 
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНаименованиеПолное) Тогда 
					ТекстДляОднойОшибки = СтрШаблон(НСтр("ru = 'Поле ""Полное наименование"" не заполнено у реквизита ""Номенклатура"" в строке №%1.'"),
						СтрокаТабличнойЧасти.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Товары[%1].Номенклатура", ТекстДляОднойОшибки, 
						"Объект.Номенклатура", СтрокаТабличнойЧасти.НомерСтроки, ТекстДляОднойОшибки, СтрокаТабличнойЧасти.НомерСтроки-1);
					Отказ = Истина;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураЕдиницаИзмеренияКод) Тогда 
					ТекстДляОднойОшибки = СтрШаблон(НСтр("ru = 'Поле ""Ед.изм"" не заполнено у реквизита ""Номенклатура"" в строке №%1.'"),
						СтрокаТабличнойЧасти.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Товары[%1].Номенклатура", ТекстДляОднойОшибки, 
						"Объект.Номенклатура", СтрокаТабличнойЧасти.НомерСтроки, ТекстДляОднойОшибки, СтрокаТабличнойЧасти.НомерСтроки-1);
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) Тогда 
				ТекстДляОднойОшибки = СтрШаблон(НСтр("ru = 'Поле ""Количество"" не заполнено в строке №%1.'"), СтрокаТабличнойЧасти.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Товары[%1].Количество", ТекстДляОднойОшибки, 
					"Объект.Товары", СтрокаТабличнойЧасти.НомерСтроки, ТекстДляОднойОшибки, СтрокаТабличнойЧасти.НомерСтроки-1);
				Отказ = Истина;
			КонецЕсли;	
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Стоимость) Тогда 
				ТекстДляОднойОшибки = СтрШаблон(НСтр("ru = 'Поле ""Стоимость"" не заполнено в строке №%1.'"), СтрокаТабличнойЧасти.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Товары[%1].Стоимость", ТекстДляОднойОшибки, 
					"Объект.Товары", СтрокаТабличнойЧасти.НомерСтроки, ТекстДляОднойОшибки, СтрокаТабличнойЧасти.НомерСтроки-1);
				Отказ = Истина;
			КонецЕсли;	
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СерияНомерСФ) Тогда 
				ТекстДляОднойОшибки = СтрШаблон(НСтр("ru = 'Поле ""Серия/номер СФ"" не заполнено в строке №%1.'"), СтрокаТабличнойЧасти.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Товары[%1].СерияНомерСФ", ТекстДляОднойОшибки, 
					"Объект.Товары", СтрокаТабличнойЧасти.НомерСтроки, ТекстДляОднойОшибки, СтрокаТабличнойЧасти.НомерСтроки-1);
				Отказ = Истина;
			КонецЕсли;	
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаСФ) Тогда 
				ТекстДляОднойОшибки = СтрШаблон(НСтр("ru = 'Поле ""Дата СФ"" не заполнено в строке №%1.'"), СтрокаТабличнойЧасти.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Товары[%1].ДатаСФ", ТекстДляОднойОшибки, 
					"Объект.Товары", СтрокаТабличнойЧасти.НомерСтроки, ТекстДляОднойОшибки, СтрокаТабличнойЧасти.НомерСтроки-1);
				Отказ = Истина;
			КонецЕсли;	
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаПринятияНаУчет) Тогда 
				ТекстДляОднойОшибки = СтрШаблон(НСтр("ru = 'Поле ""Дата принятия на учет"" не заполнено в строке №%1.'"), СтрокаТабличнойЧасти.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Товары[%1].ДатаПринятияНаУчет", ТекстДляОднойОшибки, 
					"Объект.Товары", СтрокаТабличнойЧасти.НомерСтроки, ТекстДляОднойОшибки, СтрокаТабличнойЧасти.НомерСтроки-1);
				Отказ = Истина;
			КонецЕсли;	
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.НалоговаяБазаНДС) Тогда 
				ТекстДляОднойОшибки = СтрШаблон(НСтр("ru = 'Поле ""Налоговая база НДС"" не заполнено в строке №%1.'"), СтрокаТабличнойЧасти.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Товары[%1].НалоговаяБазаНДС", ТекстДляОднойОшибки, 
					"Объект.Товары", СтрокаТабличнойЧасти.НомерСтроки, ТекстДляОднойОшибки, СтрокаТабличнойЧасти.НомерСтроки-1);
				Отказ = Истина;
			КонецЕсли;	
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗначениеСтавкиНДС) Тогда 
				ТекстДляОднойОшибки = СтрШаблон(НСтр("ru = 'Поле ""Ставка НДС"" не заполнено в строке №%1.'"), СтрокаТабличнойЧасти.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Товары[%1].ЗначениеСтавкиНДС", ТекстДляОднойОшибки, 
					"Объект.Товары", СтрокаТабличнойЧасти.НомерСтроки, ТекстДляОднойОшибки, СтрокаТабличнойЧасти.НомерСтроки-1);
				Отказ = Истина;
			КонецЕсли;	
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПризнакОсвобожденияОтУплатыАкциз) Тогда 
				ТекстДляОднойОшибки = СтрШаблон(НСтр("ru = 'Поле ""Признак освобождения от уплаты акциз"" не заполнено в строке №%1.'"), СтрокаТабличнойЧасти.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Товары[%1].ПризнакОсвобожденияОтУплатыАкциз", ТекстДляОднойОшибки, 
					"Объект.Товары", СтрокаТабличнойЧасти.НомерСтроки, ТекстДляОднойОшибки, СтрокаТабличнойЧасти.НомерСтроки-1);
				Отказ = Истина;
			КонецЕсли;	
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПризнакОсвобожденияОтУплатыНДС) Тогда 
				ТекстДляОднойОшибки = СтрШаблон(НСтр("ru = 'Поле ""Признак освобождения от уплаты НДС"" не заполнено в строке №%1.'"), СтрокаТабличнойЧасти.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Товары[%1].ПризнакОсвобожденияОтУплатыНДС", ТекстДляОднойОшибки, 
					"Объект.Товары", СтрокаТабличнойЧасти.НомерСтроки, ТекстДляОднойОшибки, СтрокаТабличнойЧасти.НомерСтроки-1);
				Отказ = Истина;
			КонецЕсли;	
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СерияНомерСопроводительной) Тогда 
				ТекстДляОднойОшибки = СтрШаблон(НСтр("ru = 'Поле ""Серия/номер сопроводительной"" не заполнено в строке №%1.'"), СтрокаТабличнойЧасти.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Товары[%1].СерияНомерСопроводительной", ТекстДляОднойОшибки, 
					"Объект.Товары", СтрокаТабличнойЧасти.НомерСтроки, ТекстДляОднойОшибки, СтрокаТабличнойЧасти.НомерСтроки-1);
				Отказ = Истина;
			КонецЕсли;	
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаСопроводительной) Тогда 
				ТекстДляОднойОшибки = СтрШаблон(НСтр("ru = 'Поле ""Дата сопроводительной"" не заполнено в строке №%1.'"), СтрокаТабличнойЧасти.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Товары[%1].ДатаСопроводительной", ТекстДляОднойОшибки, 
					"Объект.Товары", СтрокаТабличнойЧасти.НомерСтроки, ТекстДляОднойОшибки, СтрокаТабличнойЧасти.НомерСтроки-1);
				Отказ = Истина;
			КонецЕсли;	
		КонецЦикла;		
	КонецЕсли;	
	
	// Периоды.
	Если НЕ Отказ Тогда 
		Если ВыборкаШапка.Дата < Дата(2015, 8, 12) Тогда 
			ТекстДляОднойОшибки = НСтр("ru = 'Дата документа не может быть ранее 12.08.2015.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Дата", ТекстДляОднойОшибки, "Объект",, ТекстДляОднойОшибки);
			Отказ = Истина;
		КонецЕсли;	
		
		Для Каждого СтрокаТабличнойЧасти Из ТаблицаТовары Цикл 
			Если СтрокаТабличнойЧасти.ДатаПринятияНаУчет < Дата(2015, 8, 12)
				Или СтрокаТабличнойЧасти.ДатаПринятияНаУчет > ВыборкаШапка.Дата Тогда 
				ТекстДляОднойОшибки = СтрШаблон(НСтр("ru = 'Дата принятия на учет не может быть ранее 12.08.2015 и позднее Даты документа в строке №%1.'"), СтрокаТабличнойЧасти.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.Товары[%1].ДатаПринятияНаУчет", ТекстДляОднойОшибки, 
					"Объект.Товары", СтрокаТабличнойЧасти.НомерСтроки, ТекстДляОднойОшибки, СтрокаТабличнойЧасти.НомерСтроки-1);
				Отказ = Истина;
			КонецЕсли;	
		КонецЦикла;		
	КонецЕсли;	
	
	Если Отказ Тогда 
		Возврат СтруктураДанных;
	КонецЕсли;	
	
	// Имя файла обмена должно иметь следующий вид:
	// P_UC_TP_GGGGMMDD_N, где:
	// P 	- префикс, принимающий значение CU_DECL;
	// UC 	- код налогового органа по месту налоговой регистрации облагаемого субъекта;
	// TP 	- ИНН облагаемого субъекта;
	// GGGG - год формирования передаваемого файла, MM - месяц, DD - день;
	// N 	- идентификационный номер файла. (Длина - от 1 до 36 знаков. Идентификационный номер файла должен обеспечивать уникальность файла).
	// Расширение имени файла - xml. Расширение имени файла может указываться как строчными, так и прописными буквами.
	UC = ВыборкаШапка.ГНСКод;
	TP = ВыборкаШапка.ОрганизацияИНН;
	GGGGMMDD = Формат(ВыборкаШапка.Дата, "ДФ=yyyyMMdd");
	N = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаШапка.Номер, Истина, Истина);

	ШаблонИмениФайла = СтрШаблон("%1_%2_%3_%4_%5", "CU_DECL", UC, TP, GGGGMMDD, N);
	ИмяФайла = ШаблонИмениФайла + ".xml";
	
	// Файл обмена.
 	// declaration_file.
	ОбъектXDTO = СоздатьОбъектXDTO("declaration_file");
	// Идентификатор файла.
	// Содержит (повторяет) имя файла без точки и расширения имени файла.
	ОбъектXDTO.file_id = ШаблонИмениФайла;
	// Версия формата.
	// Принимает значение: 2.0.
	ОбъектXDTO.file_ver = "2.0";
	// Тип информации.
	ОбъектXDTO.info_type = "DOCSTI136_00";
	// Версия передающей программы.
	ОбъектXDTO.soft_ver = Метаданные.Версия;	
	// Код налогового органа получателя.
	// Код по справочнику налоговых органов.
	ОбъектXDTO.recipient_tax_insp = ВыборкаШапка.ГНСКод;
	
	// Сведения заявления налогоплательщика о ввозе товаров и уплате косвенных налогов.
	ОбъектXDTO.declaration_document = Declaration_document(ВыборкаШапка, ТаблицаТовары);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ЗаписьXML = Новый ЗаписьXML;
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь);	
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, ПараметрыЗаписиXML);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	ЗаписьXML.Закрыть();
	
	Двоичное = Новый ДвоичныеДанные(ИмяВременногоФайла);
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Двоичное, УникальныйИдентификатор);
	
	СтруктураДанных.ИмяФайла = ИмяФайла;
	СтруктураДанных.АдресВременногоХранилища = АдресВременногоХранилища;
	
	Возврат СтруктураДанных;
КонецФункции // ФормированиеФайла()

&НаСервере
Функция declaration_document(ВыборкаШапка, ТаблицаТовары)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("declaration_document");
	
	// Дата формирования документа.
	// Дата в формате ГГГГ-ММ-ДД.
	// Значение элемента равно значению даты из имени файла.
	ОбъектXDTO.date_form = Формат(ВыборкаШапка.Дата, "ДФ=yyyy-MM-dd");
	// Статус документа.
	// Принимает значение: 0| 1, где:
	// 0 - первоначальное;
	// 1 - уточненное;
	ОбъектXDTO.f_type = ВыборкаШапка.СтатусДокумента;	
	// Сведения о налогоплательщике.
	ОбъектXDTO.tp_info = tp_info(ВыборкаШапка);
	// Сведения о лице, подписавшем документ;	
	ОбъектXDTO.decl_head = decl_head(ВыборкаШапка);
	// Сведения из заявления.
	ОбъектXDTO.declaration_data = declaration_data(ВыборкаШапка, ТаблицаТовары);
	
	Возврат ОбъектXDTO;
КонецФункции // declaration_document()

&НаСервере
Функция tp_info(ВыборкаШапка)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("tp_info");
	
	// ИНН налогоплательщика.
	ОбъектXDTO.tp_tin = ВыборкаШапка.ОрганизацияИНН;
	// Наименование налогоплательщика.
	ОбъектXDTO.tp_name = ВыборкаШапка.ОрганизацияНаименованиеПолное;
	
	Возврат ОбъектXDTO;
КонецФункции // tp_info()

&НаСервере
Функция decl_head(ВыборкаШапка)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("decl_head");
	
	// Признак лица, подписавшего документ.
	// Принимает значение: 1 | 2 | 3| 4, где:
	// 1 - индивидуальный предприниматель;
	// 2 - руководитель организации;
	// 3 - уполномоченный представитель;
	// 4 - физическое лицо.
	ОбъектXDTO.decl_head_flag = ВыборкаШапка.ПризнакЛицаПодписавшегоДокумент;
	// Должность лица, подписавшего документ
	Если ЗначениеЗаполнено(ВыборкаШапка.ДолжностьЛицаПодписавшегоДокумент) Тогда 
		ОбъектXDTO.decl_head_position = ВыборкаШапка.ДолжностьЛицаПодписавшегоДокумент;
	КонецЕсли;
	// ИНН физического лица, подписавшего документ.
	Если ЗначениеЗаполнено(ВыборкаШапка.ИННЛицаПодписавшегоДокумент) Тогда 
		ОбъектXDTO.decl_head_tin = ВыборкаШапка.ИННЛицаПодписавшегоДокумент;
	КонецЕсли;
	// Фамилия, имя, отчество лица, подписавшего документ.
	ОбъектXDTO.decl_head_fio = FioType(ВыборкаШапка.ФизЛицоПодписавшееДокумент);
	// ИНН бухгалтера, подписавшего документ.
	Если ЗначениеЗаполнено(ВыборкаШапка.ИННБухгалтераПодписавшегоДокумент) Тогда 
		ОбъектXDTO.accountant_tin = ВыборкаШапка.ИННБухгалтераПодписавшегоДокумент;
	КонецЕсли;	
	// Фамилия, имя, отчество бухгалтера, подписавшего документ.
	Если ЗначениеЗаполнено(ВыборкаШапка.БухгалтерПодписавшийДокумент) Тогда 
		ОбъектXDTO.accountant_fio = FioType(ВыборкаШапка.БухгалтерПодписавшийДокумент);
	КонецЕсли;	
	
	Возврат ОбъектXDTO;
КонецФункции // decl_head()

&НаСервере
Функция declaration_data(ВыборкаШапка, ТаблицаТовары)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("declaration_data");
	
	// Номер заявления, указанный НП.
	ОбъектXDTO.decl_num = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаШапка.Номер, Истина, Истина);	
	// Дата заполнения заявления, указанная НП.
	ОбъектXDTO.decl_date = Формат(ВыборкаШапка.Дата, "ДФ=yyyy-MM-dd");
	// Признак договора лизинга.
	ОбъектXDTO.leasing_flag = ?(ВыборкаШапка.ПризнакДоговораЛизинга, "1", "0");
	// Признак договора переработки давальческого сырья.
	ОбъектXDTO.processing_flag = ?(ВыборкаШапка.ПризнакДоговораПереработкиДавальческогоСырья, "1", "0");
	
	// Итого по графе 14 "База по акцизам".
	Если НЕ ТаблицаТовары.Итог("НалоговаяБазаАкциз") = 0 Тогда 
		ОбъектXDTO.excise_base_sum = ТаблицаТовары.Итог("НалоговаяБазаАкциз");
	КонецЕсли;                	
	// Итого по графе 15 "База по НДС".
	ОбъектXDTO.vat_base_sum = ТаблицаТовары.Итог("НалоговаяБазаНДС");	
	// Итого по графе 19 «Акциз в сумме».
	// Итоговое значение указывается в полных сомах. 
	// Значения показателя менее 50 тыйынов отбрасывается, а 50 тыйынов и более округляются до полного сома.
	Если НЕ Окр(ТаблицаТовары.Итог("СуммаАкциза")) = 0 Тогда 
		ОбъектXDTO.excise_sum_sum = Окр(ТаблицаТовары.Итог("СуммаАкциза"));
	КонецЕсли;	
	// Итого по графе 20 «НДС в сумме».
	// Итоговое значение указывается в полных сомах. 
	// Значения показателя менее 50 тыйынов отбрасывается, а 50 тыйынов и более округляются до полного сома
	Если НЕ Окр(ТаблицаТовары.Итог("СуммаНДС")) = 0 Тогда 
		ОбъектXDTO.vat_sum_sum = Окр(ТаблицаТовары.Итог("СуммаНДС"));
	КонецЕсли;	
	// Причина возникновения заявления.
	ОбъектXDTO.version_reason_id = ВыборкаШапка.ПричинаВозникновенияЗаявления;
	
	// Обязателен при version_reason_id = 4 и 6.
	// В случае повторного уточнения Заявления в электронном формате уточненного Заявления, 
	// необходимо указывать номер последнего уточненного заявления. 
	// Например: в первом уточненном Заявлении необходимо указывать номер и дату первоначального Заявления, 
	// во втором уточненном номер и дату первого уточненного, 
	// в третьем уточненном номер и дату второго 
	// и при каждом последующем уточнении необходимо указывать номер и дату предыдущего уточненного заявления.
	Если ВыборкаШапка.ПричинаВозникновенияЗаявления = "4"
		Или ВыборкаШапка.ПричинаВозникновенияЗаявления = "6" Тогда 
		// Номер отметки о регистрации в налоговом органе ранее представленного заявления.
		ОбъектXDTO.prev_mark_num = ВыборкаШапка.НомерРанееПредставленногоЗаявления;
		// Дата отметки о регистрации в налоговом органе ранее представленного заявления.
		ОбъектXDTO.prev_mark_date = Формат(ВыборкаШапка.ДатаРанееПредставленногоЗаявления, "ДФ=yyyy-MM-dd");
	КонецЕсли;	
	
	// Сведения о договоре (контракте).
	ОбъектXDTO.spec_05 = spec_05(ВыборкаШапка);
	// Сведения о контракте с комиссионером.
	//ОбъектXDTO.spec_07 = spec_07(ВыборкаШапка);
	// Сведения о товаре и уплаченных налогах.
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаТовары Цикл 
		ОбъектXDTO.Commodity.Добавить(Commodity(ВыборкаШапка, СтрокаТабличнойЧасти));
	КонецЦикла;
	// Сведения о договоре (контракте).
	// Обязателен, если Продавец не из государства - члена Евразийского экономического союза (ЕАЭС).
	Если ВыборкаШапка.КонтрагентПризнакСтраны = Перечисления.ПризнакиСтраны.ИмпортЭкспорт Тогда 
		ОбъектXDTO.sect_3 = sect_3(ВыборкаШапка);
	КонецЕсли;
	
	Если ВыборкаШапка.ПричинаВозникновенияЗаявления = "5" Тогда 
		// Сведения о ранее представленном заявлении.
		ОбъектXDTO.price_increasing = price_increasing(ВыборкаШапка);
	КонецЕсли;	
	
	Возврат ОбъектXDTO;
КонецФункции // declaration_data()

&НаСервере
Функция spec_05(ВыборкаШапка)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("spec_05");
	
	// Идентификационный код (номер) продавца.
	// Обязателен, если продавец из государства - члена ЕАЭС и Person_seller_flag = 0
	ОбъектXDTO.id_seller = ВыборкаШапка.КонтрагентИНН;
	// Признак продавца - физического лица (не индивидуального предпринимателя).
	ОбъектXDTO.person_seller_flag = ?(ВыборкаШапка.КонтрагентЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "0", "1");
	// Полное наименование (ФИО) продавца.
	ОбъектXDTO.name_seller = ВыборкаШапка.КонтрагентНаименованиеПолное;
	// Код страны продавца.
	ОбъектXDTO.country_seller = ВыборкаШапка.КонтрагентСтранаРезидентстваКод;
	// Адрес местонахождения (жительства) продавца.
	АдресКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		ВыборкаШапка.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ВыборкаШапка.Дата); 
	ОбъектXDTO.adress_seller = АдресКонтрагента;
	
	// ИНН покупателя.
	ОбъектXDTO.id_buyer = ВыборкаШапка.ОрганизацияИНН;
	// Полное наименование (ФИО) покупателя.
	ОбъектXDTO.name_buyer = ВыборкаШапка.ОрганизацияНаименованиеПолное;
	// Код страны покупателя.
	ОбъектXDTO.country_buyer = "417";
	// Адрес местонахождения (жительства) покупателя.
	АдресОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		ВыборкаШапка.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ВыборкаШапка.Дата); 
	ОбъектXDTO.adress_buyer = АдресОрганизации;
	
	// Сведения о контракте (договоре).
	ОбъектXDTO.spec_05_det = contract_inf(ВыборкаШапка);
	
	Возврат ОбъектXDTO;
КонецФункции // spec_05()

&НаСервере
Функция Commodity(ВыборкаШапка, СтрокаТабличнойЧасти)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("Commodity");
	
	// Номер по порядку товара в документе.
	ОбъектXDTO.comm_order = Формат(СтрокаТабличнойЧасти.НомерСтроки, "ЧГ=0");
	// Наименование товара.
	ОбъектXDTO.comm_name = СтрокаТабличнойЧасти.НоменклатураНаименованиеПолное;
	// Код товара ТНВЭД.
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураКодТНВЭД) Тогда 
		ОбъектXDTO.tnved = СтрокаТабличнойЧасти.НоменклатураКодТНВЭД;
	КонецЕсли;	
	// Единица измерения товара.
	ОбъектXDTO.unit_meas_id = СтрокаТабличнойЧасти.НоменклатураЕдиницаИзмеренияКод;
	// Количество товара.
	ОбъектXDTO.comm_count = СтрокаТабличнойЧасти.Количество;
	// Стоимость товара.
	ОбъектXDTO.comm_price = СтрокаТабличнойЧасти.Стоимость;
	
	// Код валюты.
	ОбъектXDTO.currency = ВыборкаШапка.ВалютаРасчетовКод;
	// Курс валюты.
	ОбъектXDTO.currency_rate = ВыборкаШапка.Курс;
	
	// Номер счета-фактуры.
	ОбъектXDTO.invoice_num = СтрокаТабличнойЧасти.СерияНомерСФ;
	// Дата счета-фактуры.
	ОбъектXDTO.invoice_date = Формат(СтрокаТабличнойЧасти.ДатаСФ, "ДФ=yyyy-MM-dd");
	// Дата принятия на учет товара.
	ОбъектXDTO.accepting_date = Формат(СтрокаТабличнойЧасти.ДатаПринятияНаУчет, "ДФ=yyyy-MM-dd");
	
	// Налоговая база (акциз).
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НалоговаяБазаАкциз) Тогда 
		ОбъектXDTO.excise_base = СтрокаТабличнойЧасти.НалоговаяБазаАкциз;
		// Единица измерения дополнительной величины, используемой для исчисления налоговой базы (акциз).
		ОбъектXDTO.excise_unit_meas = СтрокаТабличнойЧасти.НоменклатураЕдиницаИзмеренияКод;
	КонецЕсли;	
	// Налоговая база (НДС).
	ОбъектXDTO.vat_base = СтрокаТабличнойЧасти.НалоговаяБазаНДС;
	
	// Ставка налога акцизов твердых (специфических).
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаАкцизТверд) Тогда 
		ОбъектXDTO.excise_perc_st = СтрокаТабличнойЧасти.СтавкаАкцизТверд;
	КонецЕсли;
	// Ставка налога акцизов адвалорных.
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаАкцизАдвалор) Тогда 
		ОбъектXDTO.excise_perc_st = СтрокаТабличнойЧасти.СтавкаАкцизАдвалор;
	КонецЕсли;	
	// Ставка налога (НДС).
	ОбъектXDTO.vat_perc = СтрокаТабличнойЧасти.ЗначениеСтавкиНДС;
	
	// Сумма налога (акциз).
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаАкциза) Тогда 
		ОбъектXDTO.excise_sum = СтрокаТабличнойЧасти.СуммаАкциза;
	КонецЕсли;	
	// Сумма налога (НДС).
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНДС) Тогда 
		ОбъектXDTO.vat_sum = СтрокаТабличнойЧасти.СуммаНДС;
	КонецЕсли;	
	
	// Признак освобождения от уплаты налога (акцизы).
	ОбъектXDTO.excise_exemption_flag = СтрокаТабличнойЧасти.ПризнакОсвобожденияОтУплатыАкциз;
	// Признак освобождения от уплаты налога (НДС).
	ОбъектXDTO.vat_exemption_flag = СтрокаТабличнойЧасти.ПризнакОсвобожденияОтУплатыНДС;
	
	// Сведения о товаросопроводительных документах.
	ОбъектXDTO.transdocs.Добавить(transdocs(СтрокаТабличнойЧасти));
	
	Возврат ОбъектXDTO;
КонецФункции // Commodity()

&НаСервере
Функция transdocs(СтрокаТабличнойЧасти)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("transdocs");
	
	// Серия, номер транспортного (товаросопроводительного) документа.
	ОбъектXDTO.transdoc_serie = СтрокаТабличнойЧасти.СерияНомерСопроводительной;
	// Дата транспортного (товаросопроводительного) документа.
	ОбъектXDTO.transdoc_date = Формат(СтрокаТабличнойЧасти.ДатаСопроводительной, "ДФ=yyyy-MM-dd");
	
	Возврат ОбъектXDTO;
КонецФункции // transdocs()

&НаСервере
Функция sect_3(ВыборкаШапка)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("sect_3");
	
	// Тип продавца.
	ОбъектXDTO.type_seller_s3 = ВыборкаШапка.ТипПродавца;
	// Идентификационный код (номер) продавца.		
	ОбъектXDTO.id_seller_s3 = ВыборкаШапка.КонтрагентИНН;
	// Полное наименование (ФИО) продавца.		
	ОбъектXDTO.name_seller_s3 = ВыборкаШапка.КонтрагентНаименованиеПолное;
	// Код страны продавца.
	ОбъектXDTO.country_seller_s3 = ВыборкаШапка.КонтрагентСтранаРезидентстваКод;
	// Адрес местонахождения (жительства) продавца.
	АдресКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		ВыборкаШапка.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ВыборкаШапка.Дата); 
	ОбъектXDTO.adress_seller_s3 = АдресКонтрагента;
	
	// Тип покупателя.
	ОбъектXDTO.type_buyer_s3 = ВыборкаШапка.ТипПокупателя;
	// Идентификационный код (номер) покупателя.
	ОбъектXDTO.id_buyer_s3 = ВыборкаШапка.ОрганизацияИНН;
	// Полное наименование (ФИО) покупателя.
	ОбъектXDTO.name_buyer_s3 = ВыборкаШапка.ОрганизацияНаименованиеПолное;
	// Код страны покупателя.
	ОбъектXDTO.country_buyer_s3 = "417";
	// Адрес местонахождения (жительства) покупателя.
	АдресОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		ВыборкаШапка.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ВыборкаШапка.Дата); 
	ОбъектXDTO.adress_buyer_s3 = АдресОрганизации;
	
	Возврат ОбъектXDTO;
КонецФункции // sect_3()

&НаСервере
Функция price_increasing(ВыборкаШапка)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("price_increasing");
	
	// Номер отметки о регистрации Заявления в налоговом органе.
	Если ЗначениеЗаполнено(ВыборкаШапка.НомерРанееПредставленногоЗаявления) Тогда 
		ОбъектXDTO.pi_mark_num = ВыборкаШапка.НомерРанееПредставленногоЗаявления;
	КонецЕсли;	
	// Дата отметки о регистрации Заявления в налоговом органе.
	Если ЗначениеЗаполнено(ВыборкаШапка.ДатаРанееПредставленногоЗаявления) Тогда 
		ОбъектXDTO.pi_mark_date = Формат(ВыборкаШапка.ДатаРанееПредставленногоЗаявления, "ДФ=yyyy-MM-dd");
	КонецЕсли;	
	// Месяц, в котором участниками договора (контракта) увеличена цена.
	ОбъектXDTO.pi_month = Формат(ВыборкаШапка.Дата, "ДФ=ММ");
	// Год, в котором участниками договора (контракта) увеличена цена.
	ОбъектXDTO.pi_year = Формат(ВыборкаШапка.Дата, "ДФ=yyyy");
	
	Возврат ОбъектXDTO;
КонецФункции // price_increasing()

&НаСервере
Функция contract_inf(ВыборкаШапка)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("contract_inf");
	
	// Номер контракта.
	ОбъектXDTO.num_contract = ВыборкаШапка.НомерДоговора;
	// Дата контракта.
	ОбъектXDTO.date_contract = Формат(ВыборкаШапка.ДатаДоговора, "ДФ=yyyy-MM-dd");
	
	// Сведения спецификаций.
	ОбъектXDTO.SpecificationInf.Добавить(SpecificationInf(ВыборкаШапка));
	
	Возврат ОбъектXDTO;
КонецФункции // contract_inf()

&НаСервере
Функция SpecificationInf(ВыборкаШапка)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("SpecificationInf");
	
	// Номер по порядку.
	ОбъектXDTO.specification_order = 1;
	// Номер спецификации.
	ОбъектXDTO.num_spec = ВыборкаШапка.НомерСпецификации;
	// Дата спецификации.
	ОбъектXDTO.date_spec = Формат(ВыборкаШапка.ДатаСпецификации, "ДФ=yyyy-MM-dd");
	
	Возврат ОбъектXDTO;
КонецФункции // SpecificationInf()

&НаСервере
Функция FioType(ФамилияИмяОтчество)
	// Создание объекта.
	ОбъектXDTO = СоздатьОбъектXDTO("FioType");
	
	СтруктураДанные = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФамилияИмяОтчество);
	
	// Фамилия.
	ОбъектXDTO.surname = СтруктураДанные.Фамилия;
	// Имя.
	ОбъектXDTO.name = СтруктураДанные.Имя;
	// Отчество.
	Если ЗначениеЗаполнено(СтруктураДанные.Отчество) Тогда 
		ОбъектXDTO.patronymic = СтруктураДанные.Отчество;
	КонецЕсли;	
	
	Возврат ОбъектXDTO;	
КонецФункции // FioType()

&НаСервере
Функция СоздатьОбъектXDTO(ТипОбъекта)
	УстановитьПривилегированныйРежим(Истина);
	Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://sti.gov.kg:88/content/EFZoVT", ТипОбъекта));
КонецФункции // СоздатьОбъектXDTO()

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура ТоварыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВставитьСтроки(Команда)
	
	ВставитьСтроки("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаСервере
Процедура ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ТоварыДобавлены = Ложь;
	
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда 
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы);
		
		ТоварыДобавлены = Истина;
	КонецЦикла;
	
	Если ТоварыДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
