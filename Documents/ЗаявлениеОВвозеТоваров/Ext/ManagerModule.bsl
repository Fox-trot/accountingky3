#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// Устанавливает параметры загрузки.
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - Адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - Порядковый номер строки;
//     * остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - Адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - Список неоднозначных значений, для которых в ИБ имеется несколько
//                                              подходящих вариантов.
//     * Колонка       - Строка - Имя колонки, в которой была обнаружена неоднозначность;
//     * Идентификатор - Число  - Идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - Полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
		
	Товары = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляСопоставления.Номенклатура,
		|	ДанныеДляСопоставления.Идентификатор
		|ПОМЕСТИТЬ ДанныеДляСопоставления
		|ИЗ
		|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// Сопоставление по номенклатуре
		|ВЫБРАТЬ
		|	МАКСИМУМ(СправочникНоменклатура.Ссылка) КАК Ссылка,
		|	ДанныеДляСопоставления.Идентификатор,
		|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
		|ИЗ
		|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО (СправочникНоменклатура.Наименование ПОДОБНО ДанныеДляСопоставления.Номенклатура)
		|ГДЕ
		|	НЕ СправочникНоменклатура.Ссылка ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДляСопоставления.Идентификатор";
	Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ТаблицаНоменклатура = РезультатыЗапросов[1].Выгрузить();
	ТаблицаНоменклатура.Индексы.Добавить("Идентификатор");
	
	Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		СтрокаТабличнойЧасти = Товары.Добавить();
		СтрокаТабличнойЧасти.Идентификатор = СтрокаТаблицы.Идентификатор;
		СтрокаТабличнойЧасти.Количество = СтрокаТаблицы.Количество;
		СтрокаТабличнойЧасти.Стоимость = СтрокаТаблицы.Стоимость;
		СтрокаТабличнойЧасти.Валюта = Справочники.Валюты.НайтиПоКоду(СтрокаТаблицы.Валюта);
		СтрокаТабличнойЧасти.СерияНомерСопроводительной = СтрокаТаблицы.СерияНомерСопроводительной;
		СтрокаТабличнойЧасти.ДатаСопроводительной = СтрокаТаблицы.ДатаСопроводительной;
		СтрокаТабличнойЧасти.СерияНомерСФ = СтрокаТаблицы.СерияНомерСФ;
		СтрокаТабличнойЧасти.ДатаСФ = СтрокаТаблицы.ДатаСФ;
		СтрокаТабличнойЧасти.ДатаПринятияНаУчет = СтрокаТаблицы.ДатаПринятияНаУчет;
		СтрокаТабличнойЧасти.НалоговаяБазаАкциз = СтрокаТаблицы.НалоговаяБазаАкциз;
		СтрокаТабличнойЧасти.НалоговаяБазаНДС = СтрокаТаблицы.НалоговаяБазаНДС;
		СтрокаТабличнойЧасти.СтавкаАкцизТверд = СтрокаТаблицы.СтавкаАкцизТверд;
		СтрокаТабличнойЧасти.СтавкаАкцизАдвалор = СтрокаТаблицы.СтавкаАкцизАдвалор;
		СтрокаТабличнойЧасти.ЗначениеСтавкиНДС = СтрокаТаблицы.ЗначениеСтавкиНДС;
		СтрокаТабличнойЧасти.СуммаАкциза = СтрокаТаблицы.СуммаАкциза;
		СтрокаТабличнойЧасти.СуммаНДС = СтрокаТаблицы.СуммаНДС;
					
		СтрокаНоменклатура = ТаблицаНоменклатура.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаНоменклатура <> Неопределено Тогда 
			Если СтрокаНоменклатура.Количество = 1 Тогда 
				СтрокаТабличнойЧасти.Номенклатура = СтрокаНоменклатура.Ссылка;
			ИначеЕсли СтрокаНоменклатура.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "Номенклатура";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Товары, АдресТаблицыСопоставления);
		
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//   ПолноеИмяТабличнойЧасти  - Строка - Полное имя табличной части, в которую загружаются данные.
//  ИмяКолонки                - Строка - Имя колонки, в который возникла неоднозначность.
//  СписокНеоднозначностей    - Массив - Массив для заполнения с неоднозначными данными.
//  ЗагружаемыеЗначенияСтрока - Строка - Загружаемые данные на основании которых возникла неоднозначность.
//  ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	Если ИмяКолонки = "Номенклатура" Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.Номенклатура);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

#КонецОбласти

#Область ПроцедурыПроведенияДокумента

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСведенияОВвозимыхТоварах(СтруктураДополнительныеСвойства) 
	                   
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Номер КАК НомерДокумента,
		|	ВременнаяТаблицаШапка.КодСтраны КАК КодСтраны,	
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаТовары.КодТНВЭД КАК КодТНВЭД,
		|	ВременнаяТаблицаТовары.Стоимость КАК Стоимость,
		|	ВременнаяТаблицаТовары.Количество КАК Количество,
		|	ВременнаяТаблицаТовары.Цена КАК Цена,
		|	ВременнаяТаблицаТовары.СуммаАкциза КАК СуммаАкциза,
		|	ВременнаяТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтрокиВДокументе,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.ЗачетНДС = ЗНАЧЕНИЕ(Перечисление.ВидыЗачетаНДС.Зачет)
		|		  		ИЛИ ВременнаяТаблицаТовары.ЗачетНДС = ЗНАЧЕНИЕ(Перечисление.ВидыЗачетаНДС.ПустаяСсылка)
		|			ТОГДА ВременнаяТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаНДСЗачет
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)";		
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСведенияОВвозимыхТоварах", Запрос.Выполнить().Выгрузить());		
КонецПроцедуры 

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаявлениеОВвозеТоваров.Организация КАК Организация,
		|	ЗаявлениеОВвозеТоваров.Дата КАК Дата,
		|	ЗаявлениеОВвозеТоваров.Номер КАК Номер,
		|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРезидентства.Код КАК КодСтраны
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
		|ГДЕ
		|	ЗаявлениеОВвозеТоваров.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявлениеОВвозеТоваровТовары.Номенклатура КАК Номенклатура,
		|	ЗаявлениеОВвозеТоваровТовары.Номенклатура.КодТНВЭД КАК КодТНВЭД,
		|	ЗаявлениеОВвозеТоваровТовары.Стоимость КАК Стоимость,
		|	ЗаявлениеОВвозеТоваровТовары.Количество КАК Количество,
		|	ЗаявлениеОВвозеТоваровТовары.Стоимость / ЗаявлениеОВвозеТоваровТовары.Количество КАК Цена,
		|	ЗаявлениеОВвозеТоваровТовары.СуммаАкциза КАК СуммаАкциза,
		|	ЗаявлениеОВвозеТоваровТовары.СуммаНДС КАК СуммаНДС,
		|	ЗаявлениеОВвозеТоваровТовары.ЗачетНДС КАК ЗачетНДС,
		|	ЗаявлениеОВвозеТоваровТовары.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
		|ГДЕ
		|	ЗаявлениеОВвозеТоваровТовары.Ссылка = &Ссылка";	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);	
	Запрос.Выполнить();    		
	
	СформироватьТаблицаСведенияОВвозимыхТоварах(СтруктураДополнительныеСвойства);
КонецПроцедуры // ИнициализироватьДанныеДокумента()

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

Функция ПечатьЗаявленияОВвозе(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ЗаявлениеОВвозеТоваров_ЗаявлениеОВвозеТоваров";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗаявлениеОВвозеТоваров.Ссылка КАК Ссылка,
		|	ЗаявлениеОВвозеТоваров.Дата КАК Дата,
		|	ЗаявлениеОВвозеТоваров.Организация КАК Организация,
		|	ЗаявлениеОВвозеТоваров.Организация.ИНН КАК ОрганизацияИНН,
		|	ЗаявлениеОВвозеТоваров.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	ЗаявлениеОВвозеТоваров.Контрагент.ИНН КАК КонтрагентИНН,
		|	ЗаявлениеОВвозеТоваров.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
		|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРезидентства.Код КАК КонтрагентСтрана,
		|	ЗаявлениеОВвозеТоваров.Товары.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура.Наименование КАК НоменклатураНаименование,
		|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		Номенклатура.КодТНВЭД КАК КодТНВЭД,
		|		Количество КАК Количество,
		|		Стоимость КАК Стоимость,
		|		СерияНомерСопроводительной КАК СерияНомерСопроводительной,
		|		ДатаСопроводительной КАК ДатаСопроводительной,
		|		СерияНомерСФ КАК СерияНомерСФ,
		|		ДатаСФ КАК ДатаСФ,
		|		ДатаПринятияНаУчет КАК ДатаПринятияНаУчет,
		|		НалоговаяБазаАкциз КАК НалоговаяБазаАкциз,
		|		НалоговаяБазаНДС КАК НалоговаяБазаНДС,
		|		СтавкаАкцизТверд КАК СтавкаАкцизТверд,
		|		СтавкаАкцизАдвалор КАК СтавкаАкцизАдвалор,
		|		СуммаАкциза КАК СуммаАкциза,
		|		СуммаНДС КАК СуммаНДС
		|	) КАК Товары
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
		|ГДЕ
		|	ЗаявлениеОВвозеТоваров.Ссылка В(&СписокДокументов)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	РезультатЗапроса 	= Запрос.Выполнить();
	ВыборкаДок 			= РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДок.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;
		
		Руководители = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизаций(ВыборкаДок.Организация,ВыборкаДок.Дата);
		ДанныеПечати.Вставить("ФИОРуководителя", 		Руководители.Руководитель);
		ДанныеПечати.Вставить("ФИОГлавногоБухгалтера", 	Руководители.ГлавныйБухгалтер);
		
		ДанныеПечати.Вставить("ОрганизацияСтрана", 		"417");
		ДанныеПечати.Вставить("Д1Д2",					Сред(ВыборкаДок.Дата, 1, 2));
		ДанныеПечати.Вставить("Д3Д4",					Сред(ВыборкаДок.Дата, 4, 2));
		ДанныеПечати.Вставить("Д5Д6",					Сред(ВыборкаДок.Дата, 7, 4));
		
		Товары = ВыборкаДок.Товары.Выгрузить();
		ДанныеПечати.Вставить("Количество", 		Товары.Итог("Количество"));
		ДанныеПечати.Вставить("Стоимость",  		Товары.Итог("Стоимость"));
		ДанныеПечати.Вставить("НалоговаяБазаАкциз", Товары.Итог("НалоговаяБазаАкциз"));
		ДанныеПечати.Вставить("НалоговаяБазаНДС",   Товары.Итог("НалоговаяБазаНДС"));
		ДанныеПечати.Вставить("СтавкаАкцизТверд",  	Товары.Итог("СтавкаАкцизТверд"));
		ДанныеПечати.Вставить("СтавкаАкцизАдвалор", Товары.Итог("СтавкаАкцизАдвалор"));
		//ДанныеПечати.Вставить("СтавкаНДС",          Товары.Итог("СтавкаНДС"));
		ДанныеПечати.Вставить("СуммаАкциза",         Товары.Итог("СуммаАкциза"));
		ДанныеПечати.Вставить("СуммаНДС",        	Товары.Итог("СуммаНДС"));		
			
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.ПФ_MXL_Заявление");
		
		МассивОбластейМакета = Новый Массив;		
		МассивОбластейМакета.Добавить("Шапка");
		МассивОбластейМакета.Добавить("СтрокаТаблицы");		
		МассивОбластейМакета.Добавить("Итоги");
		МассивОбластейМакета.Добавить("Подписи");
		МассивОбластейМакета.Добавить("Страница2");
		МассивОбластейМакета.Добавить("Страница3");
		МассивОбластейМакета.Добавить("ТретийРаздел");

		ВыборкаСтрокТовары 	= ВыборкаДок.Товары.Выбрать();

		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);			
			Если ИмяОбласти <> "СтрокаТаблицы" Тогда
				Если ИмяОбласти = "Страница2" ИЛИ ИмяОбласти = "Страница3" ИЛИ ИмяОбласти = "ТретийРаздел" Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ВыборкаДок);
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);								
			ИначеЕсли ИмяОбласти = "СтрокаТаблицы" Тогда 
				Пока ВыборкаСтрокТовары.Следующий() Цикл
					ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
					ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;

			КонецЕсли;
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДок.Ссылка);		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Заявление") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"Заявление", 
			НСтр("ru = 'Заявление'"), 
			ПечатьЗаявленияОВвозе(МассивОбъектов, ОбъектыПечати)
			,
			,
			"Документ.ЗаявлениеОВвозеТоваров.ПФ_MXL_Заявление");
	КонецЕсли;	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Заявление";
	КомандаПечати.Представление = НСтр("ru = 'Заявление'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 1;
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "РеестрЗаявлениеОВвозеТоваров";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Заявление о ввозе товаров""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
КонецПроцедуры

#КонецОбласти

#КонецЕсли