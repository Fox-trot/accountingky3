#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция ПересчетСуммыДокумента()
	
	Сумма 		= СуммаДокумента;	
	ВидОперации = Операция.ВидОперации;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ОплатаПоставщику") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВозвратПокупателю") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.РасчетыПоЗаймам") Тогда			
		Если РасшифровкаПлатежа.Количество() > 0 Тогда
			Сумма = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		КонецЕсли;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВыплатаЗП") Тогда
		Если ВыплатаЗаработнойПлаты.Количество() > 0 Тогда
			Сумма = ВыплатаЗаработнойПлаты.Итог("СуммаПлатежа");
		КонецЕсли;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВыдачаПодотчетнику") Тогда		
		Если ВыдачаВПодотчет.Количество() > 0 Тогда
			Сумма = ВыдачаВПодотчет.Итог("СуммаПлатежа");
		КонецЕсли;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ПрочийРасход") Тогда		
		Если ПрочиеРасходы.Количество() > 0 Тогда
			Сумма = ПрочиеРасходы.Итог("СуммаПлатежа");
		КонецЕсли;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ОплатаНалогов") Тогда
		
		Если Налоги.Количество() > 0 Тогда
			Сумма = Налоги.Итог("СуммаПлатежа");
		КонецЕсли;		
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ПереводНаДругойСчет") Тогда		
		//для полноты картины
		
	КонецЕсли;
 
	СуммаДокумента = Сумма;

КонецФункции // ПересчетСуммыДокумента()

Процедура ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти.ПрямойКурс Тогда
		СтрокаТабличнойЧасти.СуммаВзаиморасчетов 	= Окр(СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.КурсВзаиморасчетов, 2);
	Иначе
		СтрокаТабличнойЧасти.СуммаВзаиморасчетов 	= Окр(СтрокаТабличнойЧасти.СуммаПлатежа * СтрокаТабличнойЧасти.КурсВзаиморасчетов, 2);
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьКурсВалютыДоговора(Дата, СтрокаТабличнойЧасти)
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента) Тогда
		СложныйКурс = 0;
		ВалютаНач = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
		Если ЗначениеЗаполнено(Организация.ОсновнойБанковскийСчет) Тогда
			ДанныеКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств, Дата);
			Курс = ДанныеКурса.Курс;
		Иначе
			Курс = 1;
		КонецЕсли;
				
		Если РасшифровкаПлатежа.Количество() > 0 Тогда		
			ВалютаНач = СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаРасчетов;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВалютаНач) Тогда
			КурсСтруктура 		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаНач, Дата);
			КурсВалютыДоговора	= КурсСтруктура.Курс;
		    Если ЗначениеЗаполнено(КурсВалютыДоговора) Тогда
				СложныйКурс		= Окр(Курс / КурсВалютыДоговора, 4);
				ПрямойКурс      = Истина;
				Если СложныйКурс < 1 Тогда
					СложныйКурс		= Окр(КурсВалютыДоговора / Курс, 4);
					ПрямойКурс      = Ложь;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;

		Курс 							= СложныйКурс;
		СтрокаТабличнойЧасти.ПрямойКурс = ПрямойКурс;
	КонецЕсли;
	
КонецПроцедуры // УстановитьКурсВалютыДоговора()

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьПоСтруктуре(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("ВедомостьЗП") Тогда 
		ЗаполнитьПоВедомостиЗП(ДанныеЗаполнения, 2);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоВедомостиЗП(ДанныеЗаполнения, ВидДокументаВыплаты = 1) Экспорт
	// Общий 
	Если НЕ ТипЗнч(ДанныеЗаполнения)= Тип("Структура") Тогда 
		ДокументОснование = ДанныеЗаполнения;
		Операция = ПредопределенноеЗначение("Справочник.ОперацииППИ.ПеречислениеЗаработнойПлаты"); 
		
		// Заполнение шапки
		БанковскийСчет = ДанныеЗаполнения.БанковскийСчет;
		Контрагент = ДанныеЗаполнения.Контрагент;
		БанковскийСчетПолучателя = ДанныеЗаполнения.БанковскийСчетПолучателя;
		СуммаДокумента = ДанныеЗаполнения.Зарплата.Итог("СуммаКВыплате");
		ПоВедомости = ТипЗнч(ДанныеЗаполнения) = ТИП("ДокументСсылка.ВедомостьЗП");
		СчетУчета = ПланыСчетов.Хозрасчетный.НачисленнаяЗаработнаяПлата;
		
		// Заполнение Табличной части
		Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Зарплата Цикл  
			СтрокаТабличнойЧастиТабличнойЧасти = ВыплатаЗаработнойПлаты.Добавить();
			СтрокаТабличнойЧастиТабличнойЧасти.ФизЛицо = СтрокаТабличнойЧасти.ФизЛицо;
			СтрокаТабличнойЧастиТабличнойЧасти.СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
			СтрокаТабличнойЧастиТабличнойЧасти.СуммаПлатежа = СтрокаТабличнойЧасти.СуммаКВыплате;
			СтрокаТабличнойЧастиТабличнойЧасти.Ведомость = ?(ТипЗнч(ДанныеЗаполнения) = ТИП("ДокументСсылка.ВедомостьЗП"), ДанныеЗаполнения, "");
		КонецЦикла;	
		
	// Индивидуальные	
	Иначе 
		ДокументОснование = ДанныеЗаполнения.Ведомость;
		Операция = ПредопределенноеЗначение("Справочник.ОперацииППИ.ПеречислениеЗаработнойПлатыСотруднику"); 
		
		// Заполнение шапки
		Организация = ДанныеЗаполнения.Организация;
		БанковскийСчет = ДанныеЗаполнения.БанковскийСчет;
		Контрагент = ДанныеЗаполнения.Контрагент;
		БанковскийСчетПолучателя = ДанныеЗаполнения.БанковскийСчетПолучателя;
		СуммаДокумента = ДанныеЗаполнения.СуммаКВыплате;
		ПоВедомости = ТипЗнч(ДанныеЗаполнения) = ТИП("ДокументСсылка.ВедомостьЗП");
		СчетУчета = ПланыСчетов.Хозрасчетный.НачисленнаяЗаработнаяПлата;
		
		СтрокаТабличнойЧастиТабличнойЧасти = ВыплатаЗаработнойПлаты.Добавить();
		СтрокаТабличнойЧастиТабличнойЧасти.ФизЛицо = ДанныеЗаполнения.ФизЛицо;
		СтрокаТабличнойЧастиТабличнойЧасти.СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
		СтрокаТабличнойЧастиТабличнойЧасти.СуммаПлатежа = ДанныеЗаполнения.СуммаКВыплате;
		СтрокаТабличнойЧастиТабличнойЧасти.Ведомость = ?(ТипЗнч(ДанныеЗаполнения) = ТИП("ДокументСсылка.ВедомостьЗП"), ДанныеЗаполнения, "");
	КонецЕсли;	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоПоступлениюТоваровУслуг(ДанныеЗаполнения) Экспорт
	Организация = ДанныеЗаполнения.Организация;
	Контрагент 	= ДанныеЗаполнения.Контрагент;
	ДокументОснование = ДанныеЗаполнения;
	
	РасшифровкаПлатежа.Очистить();
	
	СтрокаТабличнойЧасти = РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеЗаполнения);
	ВалютаДоговора = СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаРасчетов;
	
	УстановитьКурсВалютыДоговора(ТекущаяДатаСеанса(), СтрокаТабличнойЧасти);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.КурсВзаиморасчетов) Тогда
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоговора, Дата).Курс;
	КонецЕсли;	
	
	СтрокаТабличнойЧасти.СуммаПлатежа = ДанныеЗаполнения.Товары.Итог("Всего") + ДанныеЗаполнения.Услуги.Итог("Всего");
	
	СчетаРасчетовСКонтрагентом = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента);
	СтрокаТабличнойЧасти.СчетУчета = СчетаРасчетовСКонтрагентом.СчетРасчетовПоставщика;
	
	ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти)
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоДополнительнымРасходам(ДанныеЗаполнения) Экспорт
	
	ДокументОснование = ДанныеЗаполнения;
	
	// Шапка
	Организация = ДанныеЗаполнения.Организация;
	Операция = Справочники.ОперацииППИ.ОплатаПоставщику;
	Контрагент 	= ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	ВалютаДоговора = ДоговорКонтрагента.ВалютаРасчетов;
	СуммаДокумента = ДанныеЗаполнения.Услуги.Итог("Сумма");
	
	// Расшифровка платежа
	РасшифровкаПлатежа.Очистить();
	
	СтрокаТабличнойЧасти = РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеЗаполнения);
	СтрокаТабличнойЧасти.ДоговорКонтрагента = ДоговорКонтрагента;
	
	УстановитьКурсВалютыДоговора(ТекущаяДатаСеанса(), СтрокаТабличнойЧасти);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.КурсВзаиморасчетов) Тогда
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоговора, Дата).Курс;
	КонецЕсли;	
	
	СтрокаТабличнойЧасти.СуммаПлатежа = СуммаДокумента;
	
	СчетаРасчетовСКонтрагентом = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента);
	СтрокаТабличнойЧасти.СчетУчета = СчетаРасчетовСКонтрагентом.СчетРасчетовПоставщика;
	
	ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти)
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоВозвратуОтПокупателя(ДанныеЗаполнения) Экспорт
	
	Операция = ПредопределенноеЗначение("Справочник.ОперацииППИ.ВозвратДенежныхСредствПокупателю"); 
	Организация = ДанныеЗаполнения.Организация;
	Контрагент 	= ДанныеЗаполнения.Контрагент;
	ДокументОснование = ДанныеЗаполнения;
	СчетУчета = Операция.СчетУчета;
	БанковскийСчетПолучателя = ДанныеЗаполнения.Контрагент.ОсновнойБанковскийСчет;
	СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
	
	РасшифровкаПлатежа.Очистить();
	
	СтрокаТабличнойЧасти = РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеЗаполнения);
	ВалютаДоговора = СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаРасчетов;
	СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств = Операция.СтатьяДвиженияДенежныхСредств;
	СтрокаТабличнойЧасти.ДокументРасчетов = ДанныеЗаполнения;
	СтрокаТабличнойЧасти.СчетУчета = ДанныеЗаполнения.СчетРасчетов;
	
	УстановитьКурсВалютыДоговора(ТекущаяДатаСеанса(), СтрокаТабличнойЧасти);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.КурсВзаиморасчетов) Тогда
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоговора, Дата).Курс;
	КонецЕсли;	
	
	СтрокаТабличнойЧасти.СуммаПлатежа = ДанныеЗаполнения.СуммаДокумента;
		
	ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("Структура")] = "ЗаполнитьПоСтруктуре";
	СтратегияЗаполнения[Тип("ДокументСсылка.ВедомостьЗП")] = "ЗаполнитьПоВедомостиЗП";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПоступлениеТоваровУслуг")] = "ЗаполнитьПоПоступлениюТоваровУслуг";
	СтратегияЗаполнения[Тип("ДокументСсылка.ДополнительныеРасходы")] = "ЗаполнитьПоДополнительнымРасходам";
	СтратегияЗаполнения[Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")] = "ЗаполнитьПоВозвратуОтПокупателя";
	
	ЗаполнениеОбъектов.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(КодНазначенияПлатежа) Тогда 
		КодНазначенияПлатежа = Операция.КодНазначенияПлатежа;
	КонецЕсли;
	           
	Если Не ЗначениеЗаполнено(НазначениеПлатежа)
		И ЗначениеЗаполнено(КодНазначенияПлатежа) Тогда 
		НазначениеПлатежа = КодНазначенияПлатежа.НазначенияПлатежей;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(БанковскийСчет) Тогда
		БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Организация);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(БанковскийСчет) 
			И ЗначениеЗаполнено(БанковскийСчет.КомиссияБанка)
			И НЕ ЗначениеЗаполнено(КомиссияБанка) Тогда
			
		СниматьКомиссиюБанкаСЭтогоЖеСчета 	= Истина;
		КомиссияБанка 						= БанковскийСчет.КомиссияБанка;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СчетКомиссииБанка) Тогда
		СчетКомиссииБанка = ПланыСчетов.Хозрасчетный.ПрочиеОбщиеИАдминистративныеРасходы;	
	КонецЕсли;
	
	// Валютный учет
	Если НЕ ЗначениеЗаполнено(ВалютаДенежныхСредств) 
		И ЗначениеЗаполнено(БанковскийСчет) Тогда
		ВалютаДенежныхСредств = БанковскийСчет.ВалютаДенежныхСредств;
	КонецЕсли;
	ДатаДокумента = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	Если НЕ ЗначениеЗаполнено(Курс) Тогда
		КурсСтруктура		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДенежныхСредств, ДатаДокумента);
		Если ЗначениеЗаполнено(КурсСтруктура.Курс) Тогда
			Курс 	= КурсСтруктура.Курс;
		Иначе
			Курс 	= 1;
		КонецЕсли;		
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(КурсДоговора)
		И РасшифровкаПлатежа.Количество() > 0 
		И ЗначениеЗаполнено(РасшифровкаПлатежа[0].ДоговорКонтрагента) 
		И ЗначениеЗаполнено(РасшифровкаПлатежа[0].ДоговорКонтрагента.ВалютаРасчетов) Тогда
			
		КурсСтруктура = РаботаСКурсамиВалют.ПолучитьКурсВалюты(РасшифровкаПлатежа[0].ДоговорКонтрагента.ВалютаРасчетов, ДатаДокумента);
		КурсДоговора = КурсСтруктура.Курс;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(КурсДоговора) Тогда
		КурсДоговора = 1;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	ПересчетСуммыДокумента()
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ПлатежноеПоручениеИсходящее.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьВыплаченнаяЗарплата(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьДДС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьДанныеРеестраГТД(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ВидОперации = Операция.ВидОперации;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ОплатаПоставщику") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВозвратПокупателю") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.РасчетыПоЗаймам") Тогда
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ФизЛицо");
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВыдачаПодотчетнику") Тогда
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		ПроверяемыеРеквизиты.Добавить("ВыдачаВПодотчет");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ОплатаНалогов") Тогда	
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ФизЛицо");
		ПроверяемыеРеквизиты.Добавить("Налоги");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВыплатаЗП") Тогда	
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ФизЛицо");
		ПроверяемыеРеквизиты.Добавить("ВыплатаЗаработнойПлаты");
		ПроверяемыеРеквизиты.Добавить("ВыплатаЗаработнойПлаты.СтатьяДвиженияДенежныхСредств");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ПрочийРасход") Тогда	
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ФизЛицо");
		ПроверяемыеРеквизиты.Добавить("ПрочиеРасходы");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ПереводНаДругойСчет") Тогда	
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ФизЛицо");
		ПроверяемыеРеквизиты.Добавить("СуммаДокумента");
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#КонецЕсли