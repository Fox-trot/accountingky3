#Область ОбработчикиСобытийФормы

// Инициализация данных формы
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	// Установка реквизитов формы.
	Организация             = Объект.Организация;
	ВалютаДенежныхСредств 	= Объект.БанковскийСчет.ВалютаДенежныхСредств;	
	КурсВзаиморасчетов		= Объект.Курс;
	Операция 				= Объект.Операция;
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		ВалютаДоговораКонтрагентаРасшифровкаПлатежа = ПолучитьВалютуДоговораНаСервере(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
		ДоговорВПервойСтроке = Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента;
	КонецЕсли;
	
	СформироватьСписокВыбораНазначениеПлатежа();
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
									"Субконто1", "Субконто2", "Субконто3");
									
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПрочиеРасходы Цикл							 
		БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "ПрочиеРасходы", СтрокаТабличнойЧасти, ПоляОбъекта);
	КонецЦикла;
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);

	БухгалтерскийУчетСервер.ОпределитьТипПоследнегоОткрытогоДокумента(Объект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Установка параметров формы и видимости полей формы
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПолучитьКурсВзаиморасчетов();
	//Установить отбора в табличной части РасшифровкаПлатежа
	УстановкаОтбораДоговораКонтрагента();
	УстановитьВидимостьДоступностьЭлементов();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
									"Субконто1", "Субконто2", "Субконто3");
									
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПрочиеРасходы Цикл							 
		БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "ПрочиеРасходы", СтрокаТабличнойЧасти, ПоляОбъекта);
	КонецЦикла;	
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ОповещениеОбИзмененииДолга");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Изменение значений реквизитов формы, видимости полей в зависимости от вида операции
//
&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	
	Операция 			= Объект.Операция;
	ВидОперации 		= ПолучитьВидОперации(Операция);
	Объект.СчетУчета 	= ПолучитьСчетУчетаОперацииНаСервере(Объект.Операция);
	
	ЗаполнитьКодИНазначениеПлатежаИзОперации(Объект.Операция);
	
	ОчисткаРеквизитовИТабличныхЧастей();	
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
									"Субконто1", "Субконто2", "Субконто3");
									
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПрочиеРасходы Цикл							 
		БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "ПрочиеРасходы", СтрокаТабличнойЧасти, ПоляОбъекта);
	КонецЦикла;
	
	УстановитьСвязиПараметровВыбораБанковскийСчетПолучателя();

	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ПереводНаДругойСчет") Тогда		
		СчетУчетаБС = ПолучитьСчетУчетаБСНаСервере(Объект.БанковскийСчетПолучателя);
		Если ЗначениеЗаполнено(СчетУчетаБС) Тогда
			Объект.СчетУчета = СчетУчетаБС;							
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
	УстановитьКурсВалютыДокумента();
	УстановитьКурсВзаиморасчетовТабличнойЧастиРасшифровкаПлатежа();
	ПересчетТабличнойЧастиРасшифровкаПлатежа();
	ПересчетСуммыДокумента();
	
КонецПроцедуры

//Процедура - обработчик события ПриИзменении поля ввода Организация
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Если Объект.Организация = Организация Тогда
		Возврат;
	КонецЕсли;
	Организация = Объект.Организация;
	ОчисткаРеквизитовИТабличныхЧастей();
	
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	
	Объект.БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Объект.Организация, ВалютаРегламентированногоУчета);
	Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Объект.КомиссияБанка 						= ПолучитьКомиссиюБанка(Объект.БанковскийСчет);
		Объект.СниматьКомиссиюБанкаСЭтогоЖеСчета    = ЗначениеЗаполнено(Объект.КомиссияБанка);
	КонецЕсли;
	
	ПересчетТабличнойЧастиРасшифровкаПлатежа();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Получатель
//
&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	ОчисткаРеквизитовИТабличныхЧастей();
	ПересчетТабличнойЧастиРасшифровкаПлатежа();
	Объект.ПолучательПФ = Объект.Контрагент;
	
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)	
	Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Объект.КомиссияБанка 						= ПолучитьКомиссиюБанка(Объект.БанковскийСчет);
		Объект.СниматьКомиссиюБанкаСЭтогоЖеСчета    = ЗначениеЗаполнено(Объект.КомиссияБанка);
	КонецЕсли;		
	ВалютаДенежныхСредств 			= ПолучитьВалютуБанковскогоСчета(Объект.БанковскийСчет);
	Объект.ВалютаДенежныхСредств 	= ВалютаДенежныхСредств;
	
	УстановитьКурсВалютыДокумента();
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ОплатаПоставщику") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВозвратПокупателю") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.РасчетыПоЗаймам") Тогда			
		ПолучитьКурсВзаиморасчетов();
		УстановитьКурсВзаиморасчетовТабличнойЧастиРасшифровкаПлатежа();
		ПересчетТабличнойЧастиРасшифровкаПлатежа();		
	КонецЕсли;
	
	ПересчетСуммыДокумента();
	
	УстановитьВидимостьДоступностьЭлементов()
	
КонецПроцедуры

&НаКлиенте
Процедура СниматьКомиссиюБанкаПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов()
КонецПроцедуры

&НаКлиенте
Процедура КодПлатежаПриИзменении(Элемент)
	СформироватьСписокВыбораНазначениеПлатежа();
	Если НазначениеПлатежа.Количество() = 0 Тогда
		Объект.НазначениеПлатежа = ПолучитьНаименованиеКодаНазначенияПлатежа(Объект.КодНазначенияПлатежа); 
	Иначе
		Объект.НазначениеПлатежа = НазначениеПлатежа[0].НазначениеПлатежа;
	КонецЕсли;
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПолучателяПриИзменении(Элемент)
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ПереводНаДругойСчет") 
		И Объект.БанковскийСчетПолучателя = Объект.БанковскийСчет Тогда
			ТекстСообщения = НСтр("ru = 'Банковские счета должны быть разные.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.БанковскийСчетПолучателя");
			
			Объект.БанковскийСчетПолучателя = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПриИзменении(Элемент)
	ПересчетСуммыДокумента();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)	
	//Если НоваяСтрока Тогда						
	//	СтрокаТабличнойЧасти 									= Элемент.ТекущиеДанные;	
	//    СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   	= ПолучитьСтатьюДДСИзОперации(Операция);
	//	
	//	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
	//		ВидДоговораПоОперации 					= ПолучитьВидДоговораПоОперацииНаСервере(Объект.Операция);
	//		СтруктураДоговорКонтрагента             = БухгалтерскийУчетВызовСервера.ПолучитьДоговорКонтрагента(Объект.Организация, 
	//																									Объект.Контрагент, 
	//																									ВалютаДенежныхСредств, 
	//																									ВидДоговораПоОперации);
	//		Если ЗначениеЗаполнено(СтруктураДоговорКонтрагента) Тогда
	//			СтрокаТабличнойЧасти.ДоговорКонтрагента = СтруктураДоговорКонтрагента.ДоговорКонтрагента;
	//		КонецЕсли;
	//		ДоговорВПервойСтроке = Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента;
	//		ВалютаДоговораКонтрагентаРасшифровкаПлатежа = ПолучитьВалютуДоговораНаСервере(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
	//		Если ЗначениеЗаполнено(ВалютаДоговораКонтрагентаРасшифровкаПлатежа) И Объект.ВалютаДоговора <> ВалютаДоговораКонтрагентаРасшифровкаПлатежа Тогда
	//			Объект.ВалютаДоговора = ВалютаДоговораКонтрагентаРасшифровкаПлатежа;
	//		Иначе
	//			Объект.ВалютаДоговора = ВалютаРегламентированногоУчета;
	//		КонецЕсли;
	//		ПолучитьКурсВзаиморасчетов();
	//	Иначе
	//		СтрокаТабличнойЧасти.ДоговорКонтрагента 	= Объект.РасшифровкаПлатежа[СтрокаТабличнойЧасти.НомерСтроки - 2].ДоговорКонтрагента;			
	//	КонецЕсли;
	//	СтрокаТабличнойЧасти.КурсВзаиморасчетов = КурсВзаиморасчетов;
	//	СтрокаТабличнойЧасти.ПрямойКурс 		= ПрямойКурс;

	//	УстановитьСчетаУчетаРасчетовСКонтрагентом(СтрокаТабличнойЧасти);
	//	ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти);
	//	
	//КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Отказ = СообщенияПользователюПриИзмененииДоговора(СтрокаТабличнойЧасти);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 И Объект.РасшифровкаПлатежа.Количество() = 1 И ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
		ВалютаДоговораКонтрагентаРасшифровкаПлатежа = ПолучитьВалютуДоговораНаСервере(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
		ДоговорВПервойСтроке = Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента;
		Объект.ВалютаДоговора = ВалютаДоговораКонтрагентаРасшифровкаПлатежа;
		УстановитьКурсДоговора();
		ПолучитьКурсВзаиморасчетов();
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = КурсВзаиморасчетов;
		СтрокаТабличнойЧасти.ПрямойКурс 		= ПрямойКурс;
		ПересчетТабличнойЧастиРасшифровкаПлатежа();
	ИначеЕсли СтрокаТабличнойЧасти.НомерСтроки = 1 И Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
		Если ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
			Если ПолучитьВалютуДоговораНаСервере(СтрокаТабличнойЧасти.ДоговорКонтрагента) <> ВалютаДоговораКонтрагентаРасшифровкаПлатежа Тогда		
				ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросПоменяласьВалютаТабличнойЧасти", ЭтотОбъект);
				ТекстВопроса = НСтр("ru = 'В первой строке табличная часть выбран договор с другой валютой! Табличная часть будет пересчитана! Продолжить выполнение операции?'");
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
			КонецЕсли;	
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросПоменяласьВалютаТабличнойЧасти", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'В первой строке табличной части не выбран договор контрагента! Табличная часть будет пересчитана! Продолжить выполнение операции?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);			
		КонецЕсли;

	КонецЕсли;
		
	ОповеститьЧтоКурсывалютНеАктуальны();
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.КурсВзаиморасчетов) Тогда
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = ПолучитьКурсВалютыНаСервере(Объект.ВалютаДоговора, ДатаДокумента).Курс;	
	КонецЕсли;
	ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти, Истина)
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УстановкаОтбораДоговораКонтрагентаВТекущейстроке();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНалоги

&НаКлиенте
Процедура НалогиПриИзменении(Элемент)
	ПересчетСуммыДокумента()
КонецПроцедуры

&НаКлиенте
Процедура НалогиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти 								= Элемент.ТекущиеДанные;	
		СтрокаТабличнойЧасти.СчетУчета 						= ПолучитьСчетУчетаОперацииНаСервере(Операция);
	    СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   = ПолучитьСтатьюДДСИзОперации(Операция);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НалогиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПересчетСуммыДокумента();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыдачаВПодотчет

&НаКлиенте
Процедура ВыдачаВПодотчетПриИзменении(Элемент)
	ПересчетСуммыДокумента()
КонецПроцедуры

&НаКлиенте
Процедура ВыдачаВПодотчетПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти 								= Элемент.ТекущиеДанные;	
	    СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   = ПолучитьСтатьюДДСИзОперации(Операция);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыдачаВПодотчетПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПересчетСуммыДокумента();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрочиеРасходы

&НаКлиенте
Процедура ПрочиеРасходыПриИзменении(Элемент)
	ПересчетСуммыДокумента()
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти 								= Элемент.ТекущиеДанные;	
		СтрокаТабличнойЧасти.СчетУчета 						= ПолучитьСчетУчетаОперацииНаСервере(Операция);
	    СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   = ПолучитьСтатьюДДСИзОперации(Операция);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПересчетСуммыДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСчетУчетаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	Принадлежит1100 = ПроверкаСчета11хх(СтрокаТабличнойЧасти.СчетУчета);
	Если Принадлежит1100 Тогда
		СтрокаТабличнойЧасти.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
		Сообщение = Новый СообщениеПользователю();
	    Сообщение.Текст = "В этой операции ППИ нельзя устанавливать счет учета по кассе! Для это используйте документ РКО!";
	    Сообщение.Поле = "Объект.ПрочиеРасходы[" + (СтрокаТабличнойЧасти.НомерСтроки - 1) + "].СчетУчета";
	    Сообщение.УстановитьДанные(Объект);
	    Сообщение.Сообщить();				
	КонецЕсли;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "Субконто1", "Субконто2", "Субконто3");

	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "ПрочиеРасходы", СтрокаТабличнойЧасти, ПоляОбъекта);
		
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств) Тогда
		СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств = ПолучитьСтатьюДДСИзОперации(Операция);	
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ЗадолженностьПоИсполнительнымЛистам") Тогда
		Объект.НазначениеПлатежа = ПолучитьНазначениеПлатежаАлименты(Объект.Контрагент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСубконто1ПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПрочиеРасходы.ТекущиеДанные;
	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "ПрочиеРасходы", СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСубконто2ПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПрочиеРасходы.ТекущиеДанные;
	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "ПрочиеРасходы", СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСубконто3ПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПрочиеРасходы.ТекущиеДанные;
	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "ПрочиеРасходы", СтрокаТабличнойЧасти);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура вызывается при нажатии кнопки "ЗаполнитьПоОснованию" 
//
&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Документ будет полностью перезаполнен по ""Основанию""! Продолжить выполнение операции?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоДокументу(Объект.ДокументОснование);
        УстановитьВидимостьДоступностьЭлементов();
    КонецЕсли;
КонецПроцедуры // ЗаполнитьПоОснованию()

&НаКлиенте
Процедура ОтветНаВопросПоменяласьВалютаТабличнойЧасти(РезультатВопроса, ДополнительныеПараметры) Экспорт	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВалютаДоговораКонтрагентаРасшифровкаПлатежа = ПолучитьВалютуДоговораНаСервере(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
		ДоговорВПервойСтроке = Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента;
		Объект.ВалютаДоговора = ВалютаДоговораКонтрагентаРасшифровкаПлатежа;
		УстановитьКурсДоговора();		
		ПолучитьКурсВзаиморасчетов();
		Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТабличнойЧасти.ДоговорКонтрагента = ДоговорВПервойСтроке;
		КонецЦикла;
		ПересчетТабличнойЧастиРасшифровкаПлатежа();
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Видимость и доступность всех элементов формы
//
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	ВалютаРегламентированногоУчета 									= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Элементы.Получатель.Видимость 									= Истина;
	Элементы.Получатель.Заголовок                           		= "Поставщик";
	Элементы.ФизЛицо.Видимость										= Ложь;
	Элементы.СчетУчета.Заголовок									= "Счет учета поставщика";
	Элементы.СчетУчета.Видимость 									= Истина;
	Элементы.БанковскийСчетПолучателя.Видимость						= Истина;
	Элементы.БанковскийСчетПолучателя.Заголовок						= "Б/счет получателя";
	Элементы.БанковскийСчетПолучателяСчетУчета.Видимость			= Ложь;
	Элементы.СуммаДокумента.Заголовок 								= "Сумма";
	Элементы.СуммаДокумента.ТолькоПросмотр 							= Истина;	
	Элементы.Курс.Видимость											= Ложь;	
	Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость		= Ложь;
	Элементы.Банк.Видимость                                         = Ложь;
	Элементы.ДокументОснование.ТолькоПросмотр 						= Ложь;
	Элементы.ЗаполнитьПоОснованию.Видимость							= Истина;
	
	Элементы.СтраницаРасшифровкаПлатежа.Видимость 					= Ложь;
	Элементы.СтраницаВыплатаЗП.Видимость 							= Ложь;
	Элементы.СтраницаВыдачаВПодотчет.Видимость						= Ложь;
	Элементы.СтраницаПрочиеРасходы.Видимость						= Ложь;
	Элементы.СтраницаДругойБанковскийСчет.Видимость					= Ложь;
	Элементы.СтраницаНалоги.Видимость								= Ложь;
	
	Элементы.СчетКомиссииБанка.Видимость							= Объект.СниматьКомиссиюБанкаСЭтогоЖеСчета;
	Элементы.КомиссияБанка.Видимость								= Объект.СниматьКомиссиюБанкаСЭтогоЖеСчета;
	Элементы.СтатьяЗатратКомиссияБанка.Видимость					= Объект.СниматьКомиссиюБанкаСЭтогоЖеСчета;
	Элементы.СтатьяДвиженияДенежныхСредствДляКоммисииБанка.Видимость= Объект.СниматьКомиссиюБанкаСЭтогоЖеСчета;
	
	ВидОперации = Объект.Операция.ВидОперации;
	
	Если НЕ ЗначениеЗаполнено(Объект.Операция) ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ОплатаПоставщику") Тогда
		//Видимость ТЧ
		Элементы.СтраницаРасшифровкаПлатежа.Видимость 				= Истина;
		Элементы.РасшифровкаПлатежаДокументРасчетов.Видимость       = Ложь;
		Элементы.БанковскийСчетПолучателя.Заголовок					= "Б/счет поставщика";
				
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВозвратПокупателю") Тогда
		Элементы.Получатель.Заголовок								= "Покупатель";
		Элементы.БанковскийСчетПолучателя.Заголовок					= "Б/счет покупателя";
		//Видимость ТЧ
		Элементы.СтраницаРасшифровкаПлатежа.Видимость 				= Истина;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.РасчетыПоЗаймам") Тогда
		Элементы.Получатель.Заголовок								= "Контрагент";
		Элементы.БанковскийСчетПолучателя.Заголовок					= "Б/счет контрагента";
		//Видимость ТЧ
		Элементы.СтраницаРасшифровкаПлатежа.Видимость 				= Истина;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ПереводНаДругойСчет") Тогда
		Элементы.Получатель.Видимость 								= Ложь;
		Элементы.СчетУчета.Видимость								= Ложь;
		Элементы.БанковскийСчетПолучателяСчетУчета.Видимость		= Истина;
		Элементы.СуммаДокумента.ТолькоПросмотр 						= Ложь;
		//Видимость ТЧ
		Элементы.СтраницыПанель.ТекущаяСтраница	 					= Элементы.СтраницаДополнительно;
				
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ПрочийРасход") Тогда
		//Видимость ТЧ
		Элементы.СтраницаПрочиеРасходы.Видимость					= Истина;
		Элементы.Получатель.Видимость								= Ложь;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВыплатаЗП") Тогда
		Элементы.СчетУчета.Заголовок								= "Счет расчетов";
		Элементы.СтраницаВыплатаЗП.Видимость 						= Истина;
		Элементы.ВыплатаЗаработнойПлатыКартСчет.Видимость           = Истина; 
		Элементы.ВыплатаЗаработнойПлаты.Видимость 					= Истина;
		Элементы.Получатель.Видимость 								= Ложь;
		Элементы.ВыплатаЗаработнойПлатыВедомость.Видимость 			= Ложь;
		Элементы.ВыплатаЗаработнойПлатыФизЛицо.Видимость 			= Истина;
		Элементы.Банк.Видимость                                     = Истина;		
		Элементы.БанковскийСчетПолучателя.Видимость 				= Ложь;
		Элементы.ДокументОснование.ТолькоПросмотр 					= Истина;
		Элементы.ЗаполнитьПоОснованию.Видимость						= Ложь;
		
		Если Объект.ВыплатаЗаработнойПлаты.Количество() > 0 Тогда
			Если Объект.ВыплатаЗаработнойПлаты[0].КартСчет = "" Тогда
				Элементы.ВыплатаЗаработнойПлатыКартСчет.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВыдачаПодотчетнику") Тогда
		Элементы.Получатель.Видимость 								= Ложь;
		Элементы.СчетУчета.Заголовок								= "Счет расчетов";
		Элементы.ФизЛицо.Видимость									= Истина;
		Элементы.ФизЛицо.Заголовок									= "Подотчетник";
		//Видимость ТЧ
		Элементы.СтраницаВыдачаВПодотчет.Видимость 					= Истина;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ОплатаНалогов") Тогда
		Элементы.Получатель.Заголовок								= "Получатель";
		//Видимость ТЧ
		Элементы.СтраницаНалоги.Видимость							= Истина;		
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Операция) ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ОплатаПоставщику") 
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВозвратПокупателю") 
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.РасчетыПоЗаймам") Тогда
		
		Элементы.РасшифровкаПлатежаВалютаДоговора.Видимость 		= Ложь;
		Элементы.РасшифровкаПлатежаКурс.Видимость 					= Ложь;
		Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
			Если Объект.ВалютаДоговора <> ВалютаДенежныхСредств Тогда
				Элементы.РасшифровкаПлатежаВалютаДоговора.Видимость = Истина;
				Элементы.РасшифровкаПлатежаКурс.Видимость 			= Истина;
				Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ВалютаДенежныхСредств <> ВалютаРегламентированногоУчета Тогда		
			Элементы.Курс.Видимость									= Истина;		
		КонецЕсли;		
		
	КонецЕсли;
	
	Если Элементы.СтраницыПанель.ТекущаяСтраница = Элементы.СтраницаДополнительно Тогда
		Элементы.НазначениеПлатежа.КнопкаВыпадающегоСписка = НЕ Объект.КодНазначенияПлатежа.НазначенияПлатежей.Количество() = 0;
		
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()  

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ОбработкаЗаполнения(ДокОснование, );
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаСервереБезКонтекста
Функция ПроверкаАктуальностиКурсаВалютНаСервере()
	Возврат РаботаСКурсамиВалют.КурсыАктуальны(); 
КонецФункции

&НаКлиенте
Процедура ОповеститьЧтоКурсывалютНеАктуальны()
	ВалютаКон = ПолучитьВалютуБанковскогоСчета(Объект.БанковскийСчет);
	Если НЕ Объект.Проведен И НЕ БылоОповещениеКурсыВалютУстарели 
		И (ВалютаКон <> ВалютаРегламентированногоУчета ИЛИ ВалютаКон <> ВалютаРегламентированногоУчета) 
		И ПроверкаАктуальностиКурсаВалютНаСервере() Тогда
		РаботаСКурсамиВалютКлиент.ОповеститьКурсыУстарели();
		БылоОповещениеКурсыВалютУстарели = Истина;
	КонецЕсли;
КонецПроцедуры // ОповеститьЧтоКурсывалютНеАктуальны()

&НаСервере
Процедура УстановитьКурсВалютыДокумента()	
	
	ВалютаДокумента = Объект.БанковскийСчет.ВалютаДенежныхСредств;
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		Возврат;	
	КонецЕсли;
	КурсСтруктура = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	Объект.Курс = КурсСтруктура.Курс;
	Если НЕ ЗначениеЗаполнено(Объект.Курс) Тогда
		Объект.Курс = 1;	
	КонецЕсли;
	КурсВзаиморасчетов	= Окр(КурсСтруктура.Курс / Объект.КурсДоговора, 4);	
	
КонецПроцедуры // УстановитьКурсВалютыДокумента()

&НаСервере
Процедура УстановитьКурсДоговора()
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДоговора) Тогда
		Возврат;	
	КонецЕсли;

	КурсСтруктура		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДоговора, ДатаДокумента);
	Объект.КурсДоговора	= КурсСтруктура.Курс;
	Если НЕ ЗначениеЗаполнено(Объект.КурсДоговора) Тогда
		Объект.КурсДоговора = 1;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКурсВзаиморасчетов()
	СложныйКурс = 1;
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		КурсВзаиморасчетов 	= 1;
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
		Если Объект.Курс >= Объект.КурсДоговора Тогда
			СложныйКурс	= Окр(Объект.Курс / Объект.КурсДоговора, 4);
			ПрямойКурс  = Ложь;	
		Иначе
			СложныйКурс	= Окр(Объект.КурсДоговора / Объект.Курс, 4);
			ПрямойКурс  = Истина;
		КонецЕсли;
		КурсВзаиморасчетов 	= СложныйКурс;
	Иначе
		КурсВзаиморасчетов 	= 1;
	КонецЕсли;
			
КонецПроцедуры // 

&НаКлиенте
Процедура УстановитьКурсВзаиморасчетовТабличнойЧастиРасшифровкаПлатежа()

	Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = КурсВзаиморасчетов;
	КонецЦикла;	

КонецПроцедуры // ()

// Установка знанчений счетов учета с контрагентами
//
&НаКлиенте
Процедура УстановитьСчетаУчетаРасчетовСКонтрагентом(СтрокаТабличнойЧасти = Неопределено)
	
	ДоговорКонтрагента 	= СтрокаТабличнойЧасти.ДоговорКонтрагента;
	СчетаУчета			= БухгалтерскийУчетВызовСервера.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента); //ПолучитьСчетаУчетаСКонтрагентами(Объект);			                                                       					
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ОплатаПоставщику") Тогда
		СтрокаТабличнойЧасти.СчетУчета    = СчетаУчета.СчетРасчетовПоставщика;										
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВозвратПокупателю") Тогда			
		СтрокаТабличнойЧасти.СчетУчета    = СчетаУчета.СчетРасчетовПокупателя;								
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.РасчетыПоЗаймам") Тогда			
		СтрокаТабличнойЧасти.СчетУчета    = СчетаУчета.СчетРасчетовПоЗаймам;													
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСчетУчетаОперацииНаСервере(Операция)
	
	Возврат Операция.СчетУчета;

КонецФункции // ()

&НаСервереБезКонтекста
Функция ПолучитьСчетУчетаБСНаСервере(Операция)
	
	Возврат Операция.СчетУчета;

КонецФункции // ()

&НаСервереБезКонтекста
Функция ПолучитьВидОперации(Операция)
	
	Возврат Операция.ВидОперации;

КонецФункции // ()

&НаСервереБезКонтекста
Функция ПолучитьВидДоговораПоОперацииНаСервере(Операция) 
	Если Операция.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ОплатаПоставщику") Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;	
		
	ИначеЕсли Операция.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВозвратПокупателю") Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;	
		
	ИначеЕсли Операция.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.РасчетыПоЗаймам") Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		
	ИначеЕсли Операция.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ПрочийРасход") Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // ПолучитьВидДоговораПоОперации()

&НаСервереБезКонтекста
Функция ПолучитьВалютуБанковскогоСчета(БанковскийСчет)

	Возврат	БанковскийСчет.ВалютаДенежныхСредств;

КонецФункции // ()

&НаСервереБезКонтекста
Функция ПолучитьСтатьюДДСИзОперации(Операция)

	Возврат	Операция.СтатьяДвиженияДенежныхСредств;

КонецФункции // ПолучитьСтатьюДДСИзОперации()

&НаСервереБезКонтекста
Функция ПолучитьВалютуДоговораНаСервере(Договор)

	Возврат	Договор.ВалютаРасчетов;

КонецФункции // ПолучитьСтатьюДДСИзОперации()

&НаСервереБезКонтекста
Функция ПолучитьКомиссиюБанка(БанковскийСчет)

	Возврат БанковскийСчет.КомиссияБанка;	

КонецФункции // ПолучитьКомиссиюБанка(БанковскийСчет)

// Установка отбора (по контрагенту / по организации / все банковские счета) 
// для поля Банковский Счет Получателя в зависимости от вида операции
//
&НаСервере
Процедура УстановитьСвязиПараметровВыбораБанковскийСчетПолучателя()
	НовыйМассив = Новый Массив();
	
	ВидОперации = Объект.Операция.ВидОперации;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ПереводНаДругойСчет") Тогда			
	    НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", 				"Объект.Организация");	    
	    НовыйМассив.Добавить(НоваяСвязь);	
			
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ПрочийРасход") Тогда
	    НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", 				"ПараметрВыбораБС");	
	    НовыйМассив.Добавить(НоваяСвязь);				
	    НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Организация", 			"Объект.Организация");	    
	    НовыйМассив.Добавить(НоваяСвязь);			

	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВыдачаПодотчетнику") Тогда
	    НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ФизЛицо");	
	    НовыйМассив.Добавить(НоваяСвязь);
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "ВалютаРегламентированногоУчета");	    
		НовыйМассив.Добавить(НоваяСвязь);
	    НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация");	    
	    НовыйМассив.Добавить(НоваяСвязь);
		
	Иначе	
	    НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент");	
	    НовыйМассив.Добавить(НоваяСвязь);
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "ВалютаРегламентированногоУчета");	    
		НовыйМассив.Добавить(НоваяСвязь);
	    НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация");	    
	    НовыйМассив.Добавить(НоваяСвязь);
		
	КонецЕсли;	
	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.БанковскийСчетПолучателя.СвязиПараметровВыбора = НовыеСвязи;

КонецПроцедуры // ()

&НаСервереБезКонтекста
Функция ПроверкаСчета11хх(СчетУчета)

	Возврат СчетУчета = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВКассе ИЛИ СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ДенежныеСредстваВКассе);
	
КонецФункции // 

&НаСервере
Процедура СформироватьСписокВыбораНазначениеПлатежа()
	Элементы.НазначениеПлатежа.СписокВыбора.Очистить();
	Элементы.НазначениеПлатежа.СписокВыбора.Добавить(Объект.КодНазначенияПлатежа.Наименование);
	Для каждого СтрокаТабличнойЧасти Из Объект.КодНазначенияПлатежа.НазначенияПлатежей Цикл
		Элементы.НазначениеПлатежа.СписокВыбора.Добавить(СтрокаТабличнойЧасти.НазначениеПлатежа);
	КонецЦикла;

КонецПроцедуры // ()

&НаСервереБезКонтекста
Функция ПолучитьНаименованиеКодаНазначенияПлатежа(КодНазначенияПлатежа)

	Возврат КодНазначенияПлатежа.Наименование;	

КонецФункции // ()

&НаСервереБезКонтекста
Функция ПолучитьНазначениеПлатежаАлименты(Контрагент)
	Стр = "";
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсполнительныйЛист.НазначениеПлатежа
		|ИЗ
		|	Документ.ИсполнительныйЛист КАК ИсполнительныйЛист
		|ГДЕ
		|	ИсполнительныйЛист.Контрагент = &Контрагент
		|	И ИсполнительныйЛист.НазначениеПлатежа <> """"";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Стр = ВыборкаДетальныеЗаписи.НазначениеПлатежа;
	КонецЕсли;
	
	Возврат Стр;

КонецФункции // ()

&НаКлиенте
Процедура УстановкаОтбораДоговораКонтрагента()
	Если Объект.РасшифровкаПлатежа.Количество() = 1 И ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
		НовыйМассив = Новый Массив();
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВалютаРасчетов", ВалютаДоговораКонтрагентаРасшифровкаПлатежа);	    
	    НовыйМассив.Добавить(НовыйПараметр);		

		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ОплатаПоставщику") Тогда
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));	    
		    НовыйМассив.Добавить(НовыйПараметр);			
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВозвратПокупателю") Тогда			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));	    
		    НовыйМассив.Добавить(НовыйПараметр);			
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.РасчетыПоЗаймам") Тогда			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));	    
		    НовыйМассив.Добавить(НовыйПараметр);			
		КонецЕсли;
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = НовыеПараметры;

	ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
		НовыйМассив = Новый Массив();
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));	    
	    НовыйМассив.Добавить(НовыйПараметр);
		
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = НовыеПараметры;

	КонецЕсли;	
	
КонецПроцедуры
	
&НаКлиенте
Процедура УстановкаОтбораДоговораКонтрагентаВТекущейстроке()
	НомерСтроки = Элементы.РасшифровкаПлатежа.ТекущиеДанные.НомерСтроки;	
	НовыйМассив = Новый Массив();
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ОплатаПоставщику") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));	    
	    НовыйМассив.Добавить(НовыйПараметр);			
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВозвратПокупателю") Тогда			
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));	    
	    НовыйМассив.Добавить(НовыйПараметр);			
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.РасчетыПоЗаймам") Тогда			
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));	    
	    НовыйМассив.Добавить(НовыйПараметр);			
	КонецЕсли;	
	
	Если НомерСтроки > 1 Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВалютаРасчетов", ВалютаДоговораКонтрагентаРасшифровкаПлатежа);	    
	    НовыйМассив.Добавить(НовыйПараметр);		
	КонецЕсли;

	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКурсВалютыНаСервере(Валюта, Дата)

	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Дата);	

КонецФункции // ()

&НаКлиенте
Процедура ПересчетТабличнойЧастиРасшифровкаПлатежа()	
	Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
		ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти)
	КонецЦикла;				
КонецПроцедуры

// ПересчетИзСуммыПлатежа = Истина, если вводится сумма платежа.
// ПересчетИзСуммыПлатежа = Ложь, если вводится сумма взаиморасчетов.
//
&НаКлиенте
Процедура ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти, ПересчетОтСуммыВзаиморасчетов = Ложь)
	Если ПересчетОтСуммыВзаиморасчетов Тогда
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаВзаиморасчетов) Тогда
			СтрокаТабличнойЧасти.КурсВзаиморасчетов 	= Окр(СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.СуммаВзаиморасчетов, 2);
			СтрокаТабличнойЧасти.ПрямойКурс = Истина;
		КонецЕсли;
		Если СтрокаТабличнойЧасти.КурсВзаиморасчетов < 1 Тогда
			СтрокаТабличнойЧасти.КурсВзаиморасчетов 	= Окр(СтрокаТабличнойЧасти.СуммаВзаиморасчетов / СтрокаТабличнойЧасти.СуммаПлатежа, 2);
			СтрокаТабличнойЧасти.ПрямойКурс = Ложь;		
		КонецЕсли;
				
	Иначе
		Если СтрокаТабличнойЧасти.ПрямойКурс Тогда
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.КурсВзаиморасчетов) Тогда
				СтрокаТабличнойЧасти.СуммаВзаиморасчетов 	= Окр(СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.КурсВзаиморасчетов, 2);
			КонецЕсли;		
		Иначе
			СтрокаТабличнойЧасти.СуммаВзаиморасчетов 	= Окр(СтрокаТабличнойЧасти.СуммаПлатежа * СтрокаТабличнойЧасти.КурсВзаиморасчетов, 2);
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СообщенияПользователюПриИзмененииДоговора(СтрокаТабличнойЧасти)
	
	Отказ = Ложь;
		
	РасчетыНеВВалютеДоговора = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьНастройкуРасчетыНеВВалютеДоговора();
	//Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента) 
	//	И НЕ РасчетыНеВВалютеДоговора  
	//	И НЕ ПолучитьВалютуДоговораНаСервере(СтрокаТабличнойЧасти.ДоговорКонтрагента) = ВалютаДенежныхСредств Тогда				
	//		ТекстСообщения = СтрШаблон(НСтр("ru = 'Валюта выбранного договора должна соответствовать валюте кассы, т.е. %1'"), 
	//						ВалютаДенежныхСредств);
	//		ПолеСообщения = СтрШаблон("Объект.РасшифровкаПлатежа[%1].ДоговорКонтрагента", СтрокаТабличнойЧасти.НомерСтроки-1);
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,ПолеСообщения,,Отказ);		
	//		
	//		СтрокаТабличнойЧасти.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	//КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
		ВалютаДоговораВПервойСтроке = ПолучитьВалютуДоговораНаСервере(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
		Если НЕ ЗначениеЗаполнено(ВалютаДоговораВПервойСтроке) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'У договора в первой строке не установлена валюта!'"));
			ПолеСообщения = СтрШаблон("Объект.РасшифровкаПлатежа[%1].ДоговорКонтрагента", СтрокаТабличнойЧасти.НомерСтроки-1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,ПолеСообщения,,Отказ);		
			
			СтрокаТабличнойЧасти.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		КонецЕсли;
		
		Если НЕ ВалютаДоговораВПервойСтроке = ПолучитьВалютуДоговораНаСервере(СтрокаТабличнойЧасти.ДоговорКонтрагента) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Валюта выбранного договора должна быть, как в первой строке табличной части, т.е. %1'"), 
							ВалютаДоговораВПервойСтроке);
			ПолеСообщения = СтрШаблон("Объект.РасшифровкаПлатежа[%1].ДоговорКонтрагента", СтрокаТабличнойЧасти.НомерСтроки-1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,ПолеСообщения,,Отказ);		
			
			СтрокаТабличнойЧасти.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // СообщенияПользователюПриИзмененииДоговора(СтрокаТабличнойЧасти)

&НаСервере
Функция ПересчетСуммыДокумента()
	ВидОперации = Объект.Операция.ВидОперации;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ОплатаПоставщику") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВозвратПокупателю") 
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.РасчетыПоЗаймам") Тогда			
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВыплатаЗП") Тогда
		Объект.СуммаДокумента = Объект.ВыплатаЗаработнойПлаты.Итог("СуммаПлатежа");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВыдачаПодотчетнику") Тогда		
		Объект.СуммаДокумента = Объект.ВыдачаВПодотчет.Итог("СуммаПлатежа");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ПрочийРасход") Тогда		
		Объект.СуммаДокумента = Объект.ПрочиеРасходы.Итог("СуммаПлатежа");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ОплатаНалогов") Тогда
		Объект.СуммаДокумента = Объект.Налоги.Итог("СуммаПлатежа");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ПереводНаДругойСчет") Тогда		
		//для полноты картины		
	КонецЕсли;

КонецФункции // ПересчетСуммыДокумента()

&НаКлиенте
Процедура ОчисткаРеквизитовИТабличныхЧастей()
	
	//ДоговорВПервойСтроке = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	//ВалютаДоговораКонтрагентаРасшифровкаПлатежа = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
	//
	//Объект.СуммаДокумента 	= 0;
	//
	//Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
	//	Объект.РасшифровкаПлатежа.Очистить();
	//КонецЕсли;
	//Если Объект.ПрочиеРасходы.Количество() > 0 Тогда
	//	Объект.ПрочиеРасходы.Очистить();
	//КонецЕсли;
	//Если Объект.ВыдачаВПодотчет.Количество() > 0 Тогда
	//	Объект.ВыдачаВПодотчет.Очистить();
	//КонецЕсли;
	//Если Объект.ВыплатаЗаработнойПлаты.Количество() > 0 Тогда
	//	Объект.ВыплатаЗаработнойПлаты.Очистить();
	//КонецЕсли;
	//Если Объект.Налоги.Количество() > 0 Тогда
	//	Объект.Налоги.Очистить();
	//КонецЕсли;

	//Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ОплатаПоставщику")
	//		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВозвратПокупателю") 
	//		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.РасчетыПоЗаймам") Тогда
	//		
	//	Объект.СтатьяДвиженияДенежныхСредств 	= ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка");
	//	Объект.ФизЛицо 							= ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");				
	//	СтрокаТабличнойЧасти 									= Объект.РасшифровкаПлатежа.Добавить();		
	//    СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   	= ПолучитьСтатьюДДСИзОперации(Операция);
	//	
	//	ВидДоговораПоОперации = ПолучитьВидДоговораПоОперацииНаСервере(Объект.Операция);
	//	СтруктураДоговор = БухгалтерскийУчетВызовСервера.ПолучитьДоговорКонтрагента(Объект.Организация, Объект.Контрагент, ВалютаДенежныхСредств, ВидДоговораПоОперации);
	//	Объект.ВалютаДоговора = СтруктураДоговор.ВалютаДоговора;
	//	УстановитьКурсДоговора();
	//					
	//	СтрокаТабличнойЧасти.ДоговорКонтрагента 	= СтруктураДоговор.ДоговорКонтрагента;
	//	ПолучитьКурсВзаиморасчетов();
	//	СтрокаТабличнойЧасти.КурсВзаиморасчетов 	= КурсВзаиморасчетов;
	//	СтрокаТабличнойЧасти.ПрямойКурс 			= ПрямойКурс;
	//	ПересчетСтрокиТабличнойЧастиРасшифровкаПлатежа(СтрокаТабличнойЧасти);
	//	УстановитьСчетаУчетаРасчетовСКонтрагентом(СтрокаТабличнойЧасти);
	//	ВалютаДоговораКонтрагентаРасшифровкаПлатежа = СтруктураДоговор.ВалютаДоговора;
	//	ДоговорВПервойСтроке 						= СтрокаТабличнойЧасти.ДоговорКонтрагента;
	//	УстановкаОтбораДоговораКонтрагента();
	//	
	//ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ПереводНаДругойСчет") Тогда		
	//	Объект.СтатьяДвиженияДенежныхСредств 	= ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка");
	//	Объект.Контрагент						= ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	//	Объект.ФизЛицо 							= ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
	//
	//ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ПрочийРасход") Тогда
	//	Объект.СтатьяДвиженияДенежныхСредств 	= ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка");	
	//	Объект.ФизЛицо 							= ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");				
	//	СтрокаТабличнойЧасти 									= Объект.ПрочиеРасходы.Добавить();	
	//	СтрокаТабличнойЧасти.СчетУчета 							= ПолучитьСчетУчетаОперацииНаСервере(Операция);
	//    СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   	= ПолучитьСтатьюДДСИзОперации(Операция);
	//
	//ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВыплатаЗП") Тогда
	//	Объект.СчетУчета 							= ПолучитьСчетУчетаОперацииНаСервере(Операция);
	//	Объект.СтатьяДвиженияДенежныхСредств   	= ПолучитьСтатьюДДСИзОперации(Операция);
	//	Объект.Контрагент						= ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");				
	//	Объект.БанковскийСчетПолучателя			= ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
	//	Объект.ВыплатаЗаработнойПлаты.Очистить();
	//	
	//ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВыдачаПодотчетнику") Тогда
	//	Объект.СтатьяДвиженияДенежныхСредств 	= ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка");
	//	Объект.Контрагент						= ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");					
	//	СтрокаТабличнойЧасти 									= Объект.ВыдачаВПодотчет.Добавить();
	//    СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   	= ПолучитьСтатьюДДСИзОперации(Операция);		
	//
	//ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ОплатаНалогов") Тогда		
	//	Объект.СтатьяДвиженияДенежныхСредств 	= ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка");
	//	Объект.ФизЛицо 							= ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");				
	//	СтрокаТабличнойЧасти 									= Объект.Налоги.Добавить();	
	//	СтрокаТабличнойЧасти.СчетУчета 							= ПолучитьСчетУчетаОперацииНаСервере(Операция);
	//    СтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств   	= ПолучитьСтатьюДДСИзОперации(Операция);
	//	
	//КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКодИНазначениеПлатежаИзОперации(Операция)
	Объект.КодНазначенияПлатежа = Операция.КодНазначенияПлатежа;
	Объект.НазначениеПлатежа = ПолучитьНаименованиеКодаНазначенияПлатежа(Объект.КодНазначенияПлатежа);
КонецПроцедуры // ЗаполнитьКодИНазначениеПлатежаИзОперации(Операция)

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
  	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтаФорма);
    ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма);
КонецПроцедуры

#КонецОбласти
