
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	// Курсы взаиморасчетов.
	ВалютаРасчетовКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаРасчетов, ДатаДокумента);
	КурсВзаиморасчетовПоНацБанку = ВалютаРасчетовКурсКратность.Курс;
	КратностьВзаиморасчетовПоНацБанку = ВалютаРасчетовКурсКратность.Кратность;
	ЗаполнитьСписокВыбораКурсВзаиморасчетов();
	
	// Одной строкой / Списком.
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Объект.РасшифровкаПлатежа.Добавить();
		Объект.КурсВзаиморасчетов = КурсВзаиморасчетовПоНацБанку;
		Объект.КратностьВзаиморасчетов = КратностьВзаиморасчетовПоНацБанку;
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
	Иначе
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	СформироватьСписокВыбораНазначениеПлатежа();
	
	// Связь Субконто со счетом.
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПрочиеПлатежи Цикл							 
		БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетРасчетов", "ПрочиеПлатежи", СтрокаТабличнойЧасти, ПоляОбъекта);
	КонецЦикла;
	
	УстановитьДополнительныеСвязиПараметровВыбора();
	УстановитьФункциональныеОпцииФормы();	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьДоступностьЭлементов();
	УстановитьПараметрыВыбора();
	
	ОбновитьПодвалФормы();
	СформироватьНадписьКурсоваяРазница();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
									"Субконто1", "Субконто2", "Субконто3");
									
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПрочиеПлатежи Цикл							 
		БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетРасчетов", "ПрочиеПлатежи", СтрокаТабличнойЧасти, ПоляОбъекта);
	КонецЦикла;
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ОповещениеОбИзмененииДолга");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		ЗаполнитьСписокВыбораКурсВзаиморасчетов();

		Если НЕ Объект.ВалютаРасчетов = Объект.ВалютаДокумента Тогда 
			ТекстСообщение = НСтр("ru = 'Изменилась дата документа.
					|Возможно, необходимо обновить курсы и пересчитать сумму документа.'") + Символы.ПС + Символы.ПС;
			ТекстСообщение = ТекстСообщение + НСтр("ru = 'Пересчитать документ?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ОтветНаВопросДатаПриИзменении", ЭтотОбъект), ТекстСообщение, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;	
	КонецЕсли;	
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	СформироватьНадписьКурсоваяРазница();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер = "";
	Объект.БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Объект.Организация);
	ОбработатьИзменениеБанковскогоСчетаОрганизации();
	ПроверитьБанковскийСчетПолучателя();
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	УстановитьФункциональныеОпцииФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Вид операции.
//
&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	ОбновитьРеквизиты();
	ПроверитьБанковскийСчетПолучателя();
	УстановитьВидимостьДоступностьЭлементов();
	УстановитьПараметрыВыбора();
	УстановитьДополнительныеСвязиПараметровВыбора();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении();
	
	Объект.ДоговорКонтрагента 		= СтруктураДанные.ДоговорКонтрагента;
	Объект.БанковскийСчетПолучателя = СтруктураДанные.БанковскийСчетКонтрагента;
	ОбработатьИзменениеДоговора();
	
	УстановитьВидимостьДоступностьЭлементов()
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор контрагента.
//
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ОбработатьИзменениеДоговора();
	УстановитьВидимостьДоступностьЭлементов()
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Банковский счет организации.
//
&НаКлиенте
Процедура БанковскийСчетОрганизацииПриИзменении(Элемент)
	ОбработатьИзменениеБанковскогоСчетаОрганизации();
	ПроверитьБанковскийСчетПолучателя();
	УстановитьВидимостьДоступностьЭлементов()
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флага Снимать комиссию банка.
//
&НаКлиенте
Процедура СниматьКомиссиюБанкаПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов()
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Код платежа.
//
&НаКлиенте
Процедура КодПлатежаПриИзменении(Элемент)
	СформироватьСписокВыбораНазначениеПлатежа();
	Если НазначенияПлатежей.Количество() = 0 Тогда
		Объект.НазначениеПлатежа = НаименованиеКодаНазначенияПлатежа(Объект.КодНазначенияПлатежа); 
	Иначе
		Объект.НазначениеПлатежа = НазначенияПлатежей[0].НазначениеПлатежа;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода БанковскийСчетПолучателя.
//
&НаКлиенте
Процедура БанковскийСчетПолучателяПриИзменении(Элемент)
	ПроверитьБанковскийСчетПолучателя();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода КурсВзаиморасчетов.
//
&НаКлиенте
Процедура КурсВзаиморасчетовПриИзменении(Элемент)
	
	ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность, ПрямойКурс", 
		Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность, Объект.ПрямойКурс);
	ДанныеВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаРасчетов, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовТабличнойЧасти(
			Объект, 
			"РасшифровкаПлатежа",
			ДанныеДокумента,
			ДанныеВзаиморасчетов,
			ВалютаРегламентированногоУчета);
	
	ОбновитьПодвалФормы();	
	СформироватьНадписьКурсоваяРазница();
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора поля ввода КурсВзаиморасчетов.
//
&НаКлиенте
Процедура КурсВзаиморасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = 0 Тогда
		СтандартнаяОбработка = Ложь;
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("КурсРасчетовОбработкаВыбораЗавершение", ЭтотОбъект);
		ПоказатьВводДаты(ОбработчикОповещенияОЗакрытии, ДатаДокумента, НСтр("ru = 'Укажите дату курса валюты'"), ЧастиДаты.Дата);
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода КратностьВзаиморасчетов.
//
&НаКлиенте
Процедура КратностьВзаиморасчетовПриИзменении(Элемент)
	
	ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность, ПрямойКурс", 
		Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность, Объект.ПрямойКурс);
	ДанныеВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаРасчетов, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовТабличнойЧасти(
			Объект, 
			"РасшифровкаПлатежа",
			ДанныеДокумента,
			ДанныеВзаиморасчетов,
			ВалютаРегламентированногоУчета);
	
	ОбновитьПодвалФормы();	
	СформироватьНадписьКурсоваяРазница();	
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СчетРасчетов.
//
&НаКлиенте
Процедура СчетРасчетовПриИзменении(Элемент)	
	СформироватьНадписьКурсоваяРазница();		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыплатаЗаработнойПлаты

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) И Объект.ВыплатаЗаработнойПлаты.Количество() = 1 Тогда		
		ТекстСообщения = НСтр("ru = 'Нет возможности добавить более одной строки при ручном заполнении документа.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);				
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

// Процедура - обработчик события ПередНачаломДобавления таблицы РасшифровкаПлатежа.
//
&НаКлиенте
Процедура РасшифровкаПлатежаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогСуммаПлатежа = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа") + Объект.ПрочиеПлатежи.Итог("СуммаПлатежа") + Элемент.ТекущиеДанные.СуммаПлатежа;
		ИтогСуммаВзаиморасчетов = Объект.РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов") + Элемент.ТекущиеДанные.СуммаВзаиморасчетов; 
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
	СформироватьНадписьКурсоваяРазница();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаСуммаПлатежа.
//
&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность, ПрямойКурс", 
		Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность, Объект.ПрямойКурс);
	ДанныеВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаРасчетов, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти,
		ДанныеДокумента,
		ДанныеВзаиморасчетов,
		ВалютаРегламентированногоУчета);
	
	ОбновитьПодвалФормы();
	СформироватьНадписьКурсоваяРазница();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаСуммаВзаиморасчетов.
//
&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность, ПрямойКурс", 
		Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность, Объект.ПрямойКурс);
	ДанныеВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаРасчетов, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьКурсВзаиморасчетовТабличнойЧасти(
		Объект,
		СтрокаТабличнойЧасти,
		ДанныеДокумента,
		ДанныеВзаиморасчетов,
		ВалютаРегламентированногоУчета);
		
	// Значения реквизитов объекта изменились, а в структуре остались старые значения.	
	ДанныеВзаиморасчетов.Курс = Объект.КурсВзаиморасчетов;	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовТабличнойЧасти(
			Объект, 
			"РасшифровкаПлатежа",
			ДанныеДокумента,
			ДанныеВзаиморасчетов,
			ВалютаРегламентированногоУчета);	
	
	ОбновитьПодвалФормы();
	СформироватьНадписьКурсоваяРазница();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаСуммаПлатежа1.
//
&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежа1ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность, ПрямойКурс", 
		Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность, Объект.ПрямойКурс);
	ДанныеВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаРасчетов, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти,
		ДанныеДокумента,
		ДанныеВзаиморасчетов,
		ВалютаРегламентированногоУчета);
	
	ОбновитьПодвалФормы();
	СформироватьНадписьКурсоваяРазница();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаСуммаВзаиморасчетов1.
//
&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетов1ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность, ПрямойКурс", 
		Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность, Объект.ПрямойКурс);
	ДанныеВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", 
		Объект.ВалютаРасчетов, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьКурсВзаиморасчетовТабличнойЧасти(
		Объект,
		СтрокаТабличнойЧасти,
		ДанныеДокумента,
		ДанныеВзаиморасчетов,
		ВалютаРегламентированногоУчета);
	
	ОбновитьПодвалФормы();
	СформироватьНадписьКурсоваяРазница();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрочиеПлатежи

// Процедура - обработчик события ПередНачаломДобавления таблицы ПрочиеПлатежи.
//
&НаКлиенте
Процедура ПрочиеПлатежиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогСуммаПлатежа = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа") + Объект.ПрочиеПлатежи.Итог("СуммаПлатежа") + Элемент.ТекущиеДанные.СуммаПлатежа;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеПлатежиПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПрочиеПлатежиСуммаПлатежа.
//
&НаКлиенте
Процедура ПрочиеПлатежиСуммаПлатежаПриИзменении(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПрочиеПлатежиСчетРасчетов.
//
&НаКлиенте
Процедура ПрочиеПлатежиСчетРасчетовПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ПрочиеПлатежи.ТекущиеДанные;
	
	// Ограничение типа, доступности, подсказка ввода.
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3", "ПрочиеПлатежиСубконто1", "ПрочиеПлатежиСубконто2", "ПрочиеПлатежиСубконто3");
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(СтрокаТабличнойЧасти.СчетРасчетов, ЭтаФорма, ПоляФормы, Неопределено, Истина);

	// Восстановление значений при совпадении типов субконто.
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетРасчетов, СтрокаТабличнойЧасти, ПоляОбъекта, Истина);
	
	// Изменение параметров выбора полей субконто.
	ПараметрыДокумента = БухгалтерскийУчетКлиентСервер.СписокПараметровВыбораСубконто(ЭтаФорма, СтрокаТабличнойЧасти, "Субконто%Индекс%", "СчетРасчетов");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТабличнойЧасти, "Субконто%Индекс%", "ПрочиеПлатежиСубконто%Индекс%", ПараметрыДокумента);	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПрочиеПлатежиСубконто1.
//
&НаКлиенте
Процедура ПрочиеПлатежиСубконто1ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ПрочиеПлатежи.ТекущиеДанные;
	
	// Изменение параметров выбора полей субконто.
	ПараметрыДокумента = БухгалтерскийУчетКлиентСервер.СписокПараметровВыбораСубконто(ЭтаФорма, СтрокаТабличнойЧасти, "Субконто%Индекс%", "СчетРасчетов");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТабличнойЧасти, "Субконто%Индекс%", "ПрочиеПлатежиСубконто%Индекс%", ПараметрыДокумента);	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПрочиеПлатежиСубконто2.
//
&НаКлиенте
Процедура ПрочиеПлатежиСубконто2ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ПрочиеПлатежи.ТекущиеДанные;
	
	// Изменение параметров выбора полей субконто.
	ПараметрыДокумента = БухгалтерскийУчетКлиентСервер.СписокПараметровВыбораСубконто(ЭтаФорма, СтрокаТабличнойЧасти, "Субконто%Индекс%", "СчетРасчетов");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТабличнойЧасти, "Субконто%Индекс%", "ПрочиеПлатежиСубконто%Индекс%", ПараметрыДокумента);	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПрочиеПлатежиСубконто3.
//
&НаКлиенте
Процедура ПрочиеПлатежиСубконто3ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ПрочиеПлатежи.ТекущиеДанные;
	
	// Изменение параметров выбора полей субконто.
	ПараметрыДокумента = БухгалтерскийУчетКлиентСервер.СписокПараметровВыбораСубконто(ЭтаФорма, СтрокаТабличнойЧасти, "Субконто%Индекс%", "СчетРасчетов");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТабличнойЧасти, "Субконто%Индекс%", "ПрочиеПлатежиСубконто%Индекс%", ПараметрыДокумента);	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды РедактироватьСписком.
//
&НаКлиенте
Процедура РедактироватьСписком(Команда)
	
	УстановитьВозможностьРедактированияСписком();
	
КонецПроцедуры // РедактироватьСписком()

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросУстановитьВозможностьРедактированияСписком(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Элементы.РедактироватьСписком.Пометка = Истина;
        Возврат;
    КонецЕсли;
	
	КоличествоСтрок = ДополнительныеПараметры.КоличествоСтрок;
	
	// удаление строк в обратном порядке
    Пока КоличествоСтрок > 1 Цикл
        Объект.РасшифровкаПлатежа.Удалить(Объект.РасшифровкаПлатежа[КоличествоСтрок - 1]);
        КоличествоСтрок = КоличествоСтрок - 1;
    КонецЦикла;
    Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
    
    УстановитьВозможностьРедактированияСпискомФрагмент();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтветНаВопросДата.
//
&НаКлиенте
Процедура ОтветНаВопросДатаПриИзменении(Результат, ДополнительныеПараметры) Экспорт
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
		УстановитьКурсВалютыДокумента();
    КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()
	// Одной строкой / Списком.
	КоличествоСтрок = Объект.РасшифровкаПлатежа.Количество();
	Элементы.РедактироватьСписком.Пометка = КоличествоСтрок > 1;
	УстановитьВозможностьРедактированияСпискомФрагмент();
	
	Элементы.СтатьяДвиженияДенежныхСредств.Видимость = Ложь;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ОплатаПоставщику")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВозвратПокупателю")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.РасчетыПоЗаймам") Тогда 
		
		Элементы.Контрагент.Видимость = Истина;
		Элементы.ДоговорКонтрагента.Видимость = Истина;
		Элементы.СчетРасчетов.Видимость = Истина;
		Элементы.БанковскийСчетПолучателя.Видимость = Истина;
		
		Элементы.ФизЛицо.Видимость = Ложь;
		
		Элементы.РедактироватьСписком.Видимость = Истина;
		Элементы.СтраницаРасшифровкаПлатежа.Видимость = Истина;
		Элементы.СтраницаВыплатаЗП.Видимость = Ложь;
		Элементы.СтраницаПрочиеПлатежи.Видимость = Ложь;
		
		Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств.Видимость = Истина;		
		Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств1.Видимость = Истина;		
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВыдачаПодотчетнику") Тогда 
		
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.СчетРасчетов.Видимость = Истина;
		Элементы.БанковскийСчетПолучателя.Видимость = Истина;
		
		Элементы.ФизЛицо.Видимость = Истина;
		
		Элементы.РедактироватьСписком.Видимость = Истина;
		Элементы.СтраницаРасшифровкаПлатежа.Видимость = Истина;
		Элементы.СтраницаВыплатаЗП.Видимость = Ложь;
		Элементы.СтраницаПрочиеПлатежи.Видимость = Ложь;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ПереводНаДругойСчет") Тогда
		
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.СчетРасчетов.Видимость = Ложь;
		Элементы.БанковскийСчетПолучателя.Видимость = Истина;
		
		Элементы.ФизЛицо.Видимость = Ложь;
		
		Элементы.РедактироватьСписком.Видимость = Истина;
		Элементы.СтраницаРасшифровкаПлатежа.Видимость = Истина;
		Элементы.СтраницаВыплатаЗП.Видимость = Ложь;
		Элементы.СтраницаПрочиеПлатежи.Видимость = Ложь;
		
		Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств.Видимость = Ложь;		
		Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств1.Видимость = Ложь;		

	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ПрочийРасход") Тогда
		
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.СчетРасчетов.Видимость = Ложь;
		Элементы.БанковскийСчетПолучателя.Видимость = Ложь;
		
		Элементы.ФизЛицо.Видимость = Ложь;
		
		Элементы.РедактироватьСписком.Видимость = Ложь;
		Элементы.СтраницаРасшифровкаПлатежа.Видимость = Ложь;
		Элементы.СтраницаВыплатаЗП.Видимость = Ложь;
		Элементы.СтраницаПрочиеПлатежи.Видимость = Истина;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ВыплатаЗП") Тогда
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.СчетРасчетов.Видимость = Ложь;
		Элементы.БанковскийСчетПолучателя.Видимость = Ложь;
		
		Элементы.ФизЛицо.Видимость = Ложь;
		Элементы.РедактироватьСписком.Видимость = Ложь;
		Элементы.СтраницаРасшифровкаПлатежа.Видимость = Ложь;
		Элементы.СтраницаВыплатаЗП.Видимость = Истина;
		Элементы.СтраницаПрочиеПлатежи.Видимость = Ложь;
		Элементы.СтатьяДвиженияДенежныхСредств.Видимость = Истина;
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			Элементы.ВыплатаЗаработнойПлаты.ТолькоПросмотр = Истина;	
		КонецЕсли;
		
		Если Объект.ОбщийППИ Тогда
			Элементы.ВыплатаЗаработнойПлатыБанковскийСчет.Видимость = Ложь;
		Иначе
			Элементы.ВыплатаЗаработнойПлатыБанковскийСчет.Видимость = Истина;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ОплатаНалогов") Тогда 
		
		Элементы.Контрагент.Видимость = Истина;
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.СчетРасчетов.Видимость = Истина;
		Элементы.БанковскийСчетПолучателя.Видимость = Истина;
		
		Элементы.ФизЛицо.Видимость = Ложь;
		
		Элементы.РедактироватьСписком.Видимость = Истина;
		Элементы.СтраницаРасшифровкаПлатежа.Видимость = Истина;
		Элементы.СтраницаВыплатаЗП.Видимость = Ложь;
		Элементы.СтраницаПрочиеПлатежи.Видимость = Ложь;
		
		Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств.Видимость = Истина;		
		Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств1.Видимость = Истина;		
		
	КонецЕсли;
	
	// Расчет не в валюте договора.	
	Если ЗначениеЗаполнено(Объект.ВалютаДокумента)
		И ЗначениеЗаполнено(Объект.ВалютаРасчетов)
		И ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И НЕ Объект.ВалютаРасчетов = Объект.ВалютаДокумента Тогда		
		Элементы.КурсВзаиморасчетов.Видимость = Истина;		
		Элементы.КратностьВзаиморасчетов.Видимость = Истина;
		Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость = Истина;		
		Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов1.Видимость = Истина;
		Элементы.ВалютаРасчетов.Видимость = Истина;
	Иначе 
		Элементы.КурсВзаиморасчетов.Видимость = Ложь;		
		Элементы.КратностьВзаиморасчетов.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость = Ложь;		
		Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов1.Видимость = Ложь;
		Элементы.ВалютаРасчетов.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.КратностьВзаиморасчетов > 1 Тогда
		Элементы.КратностьВзаиморасчетов.Видимость = Истина;
	Иначе 
		Элементы.КратностьВзаиморасчетов.Видимость = Ложь;
	КонецЕсли;	

	// Комиссия банка.
	Элементы.СуммаКомиссияБанка.ТолькоПросмотр = НЕ Объект.СниматьКомиссиюБанка; 
	Элементы.СчетКомиссииБанка.ТолькоПросмотр = НЕ Объект.СниматьКомиссиюБанка; 
	Элементы.СтатьяЗатратКомиссияБанка.ТолькоПросмотр = НЕ Объект.СниматьКомиссиюБанка; 
	Элементы.СтатьяДвиженияДенежныхСредствДляКоммисииБанка.ТолькоПросмотр = НЕ Объект.СниматьКомиссиюБанка; 
	
	// Список выбора курсов.
	Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета
		Или Объект.ВалютаРасчетов = ВалютаРегламентированногоУчета Тогда 
		Элементы.КурсВзаиморасчетов.КнопкаВыпадающегоСписка = Истина;
	Иначе 
		Элементы.КурсВзаиморасчетов.КнопкаВыпадающегоСписка = Ложь;
	КонецЕсли;	

КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()  

// Процедура устанавливает параметры выбора.
//
&НаКлиенте
Процедура УстановитьПараметрыВыбора()
	
	МассивПараметровВыбора = БухгалтерскийУчетКлиентСервер.ПолучитьМассивПараметровВыбораДоговора(Объект.Ссылка, Объект.ВидОперации);
	// Формирование параметра выбора.
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(МассивПараметровВыбора));
	// Добавление параметра выбора.
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры // УстановитьПараметрыВыбора()

// Процедура устанавливает функциональные опции формы документа.
//
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма, Объект.Организация, ДатаДокумента);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизиты()

	Объект.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	Объект.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	Объект.ВалютаРасчетов = Объект.ВалютаДокумента;
	Объект.ФизЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
	Объект.БанковскийСчетПолучателя = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");

	КурсВзаиморасчетовПоНацБанку = Объект.Курс;
	КратностьВзаиморасчетовПоНацБанку = Объект.Кратность;
	
	// Заполнение по умолчанию.
	ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоУмолчанию(Объект.ВидОперации);	
	Объект.СчетРасчетов = ДанныеДляЗаполнения.СчетРасчетов;
КонецПроцедуры // ОбновитьРеквизиты()

// Получает набор данных с сервера для процедуры ОбновитьРеквизиты.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДляЗаполненияПоУмолчанию(ВидОперации)
	
	СтруктураДанные = Новый Структура;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИ.ВыдачаПодотчетнику Тогда 
		СтруктураДанные.Вставить(
			"СчетРасчетов",
			ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИ.РасчетыПоЗаймам Тогда 	
		СтруктураДанные.Вставить(
			"СчетРасчетов",
			ПланыСчетов.Хозрасчетный.НачисленныеОбязательстваПоОплатеТоваровИУслуг); // 3510
	Иначе 	
		СтруктураДанные.Вставить(
			"СчетРасчетов",
			ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДляЗаполненияПоУмолчанию()

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Устанавливает дополнительные связи параметров выбора.
//
&НаСервере
Процедура УстановитьДополнительныеСвязиПараметровВыбора()
	// Договор контрагента.
	Если БухгалтерскийУчетСервер.УчетРасчетовВВалютеДоговора() Тогда 
		НовыйМассив = Новый Массив();
		
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент");	    
		НовыйМассив.Добавить(НоваяСвязь);			
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация");	    
		НовыйМассив.Добавить(НоваяСвязь);		
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.ВалютаРасчетов", "Объект.ВалютаДокумента");	    
		НовыйМассив.Добавить(НоваяСвязь);		

		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ДоговорКонтрагента.СвязиПараметровВыбора = НовыеСвязи;	
	КонецЕсли;
	
	// Банковский счет получателя.
	НовыйМассив = Новый Массив();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийППИ.ПереводНаДругойСчет
		Или Объект.ВидОперации = Перечисления.ВидыОперацийППИ.ПрочийРасход Тогда			
	    НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация");	    
	    НовыйМассив.Добавить(НоваяСвязь);
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.ВалютаДокумента");	    
		НовыйМассив.Добавить(НоваяСвязь);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИ.ВыдачаПодотчетнику
		Или Объект.ВидОперации = Перечисления.ВидыОперацийППИ.ВыплатаЗП Тогда
	    НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ФизЛицо");	
	    НовыйМассив.Добавить(НоваяСвязь);
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.ВалютаДокумента");	    
		НовыйМассив.Добавить(НоваяСвязь);
	Иначе	
	    НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент");	
	    НовыйМассив.Добавить(НоваяСвязь);
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.ВалютаРасчетов");	    
		НовыйМассив.Добавить(НоваяСвязь);
	КонецЕсли;	
	
	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.БанковскийСчетПолучателя.СвязиПараметровВыбора = НовыеСвязи;

КонецПроцедуры // УстановитьДополнительныеСвязиПараметровВыбора()

// Процедура - устанавливает возможность редактирования списком.
//
&НаКлиенте
Процедура УстановитьВозможностьРедактированияСписком()
	
	Элементы.РедактироватьСписком.Пометка = НЕ Элементы.РедактироватьСписком.Пометка;
	
	КоличествоСтрок = Объект.РасшифровкаПлатежа.Количество();
	
	Если НЕ Элементы.РедактироватьСписком.Пометка
		И КоличествоСтрок > 1 Тогда
		  
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросУстановитьВозможностьРедактированияСписком", ЭтотОбъект, Новый Структура("КоличествоСтрок", КоличествоСтрок));
		ТекстВопроса = НСтр("ru = 'Все строки кроме первой будут удалены! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		УстановитьВозможностьРедактированияСпискомФрагмент();
	КонецЕсли;
КонецПроцедуры

// Процедура - устанавливает возможность редактирования списком (продолжение).
//
&НаКлиенте
Процедура УстановитьВозможностьРедактированияСпискомФрагмент()
    Если Элементы.РедактироватьСписком.Пометка Тогда
        Элементы.СтраницыСтрокойСписком.ТекущаяСтраница = Элементы.Списком;
    Иначе
        Элементы.СтраницыСтрокойСписком.ТекущаяСтраница = Элементы.ОднаСтрока;
    КонецЕсли;
КонецПроцедуры // УстановитьВозможностьРедактированияСписком()

// Процедура - устанавливает курс документа на дату.
//
&НаСервере
Процедура УстановитьКурсВалютыДокумента()
	Объект.Курс = 1;	
	Объект.Кратность = 1;	

	ВалютаДокумента = Объект.БанковскийСчет.ВалютаДенежныхСредств;
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
		Объект.Курс = КурсВалюты.Курс;
		Объект.Кратность = КурсВалюты.Кратность;
			
		Если НЕ ЗначениеЗаполнено(Объект.Курс) Тогда
			Объект.Курс = 1;	
			Объект.Кратность = 1;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВалютаРасчетов) Тогда
			КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаРасчетов, ДатаДокумента);
			Курс = КурсВалюты.Курс;	
			Кратность = КурсВалюты.Кратность;	
			Если НЕ ЗначениеЗаполнено(Курс) Тогда
				Курс = 1;	
				Кратность = 1;	
			КонецЕсли;
			
			ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность, ПрямойКурс", 
				Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность, Объект.ПрямойКурс);
			ДанныеВзаиморасчетов = Новый Структура("Валюта, Курс, Кратность", 
				Объект.ВалютаРасчетов, Курс, Кратность);
			
			ОбработкаТабличныхЧастейКлиентСервер.УстановитьКурсыВзаиморасчетовТабличнойЧасти(
				Объект,
				"РасшифровкаПлатежа",
				ДанныеДокумента,
				ДанныеВзаиморасчетов,
				ВалютаРегламентированногоУчета);
				
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовТабличнойЧасти(
				Объект, 
				"РасшифровкаПлатежа",
				ДанныеДокумента,
				ДанныеВзаиморасчетов,
				ВалютаРегламентированногоУчета);
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры // УстановитьКурсВалютыДокумента()

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении()
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию);
		
	СтруктураДанные.Вставить(
		"БанковскийСчетКонтрагента",
		Объект.Контрагент.ОсновнойБанковскийСчет);	
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанию.
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеДоговора()
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(ДатаДокумента, Объект.ДоговорКонтрагента, Объект.ВидОперации, ВалютаРегламентированногоУчета);

	// Обработка изменения валюты.
	СтруктураКурсыПред = Новый Структура("Валюта", Объект.ВалютаРасчетов);
	Объект.ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
	КурсВзаиморасчетовПоНацБанку = СтруктураДанные.ВалютаРасчетовКурсКратность.Курс;
	КратностьВзаиморасчетовПоНацБанку = СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность;
	СтруктураКурсы = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаРасчетов, КурсВзаиморасчетовПоНацБанку, КратностьВзаиморасчетовПоНацБанку);
	
	// Обработка изменения отражения в учете.
	Объект.СчетРасчетов = СтруктураДанные.СчетРасчетов;
	
	// Вопрос изменения
	ИзмениласьВалютаРасчетов = СтруктураКурсыПред.Валюта <> СтруктураДанные.ВалютаРасчетов
		И ЗначениеЗаполнено(Объект.ВалютаРасчетов); 
	ПересчетНеобходим = (Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа") > 0);	
	
	// Обновление курса взаиморасчетов.
	Если ИзмениласьВалютаРасчетов Тогда
		ЗаполнитьСписокВыбораКурсВзаиморасчетов();

		ДанныеДокумента = Новый Структура("Валюта, Курс, Кратность, ПрямойКурс", 
			Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность, Объект.ПрямойКурс);

		ОбработкаТабличныхЧастейКлиентСервер.УстановитьКурсыВзаиморасчетовТабличнойЧасти(
			Объект, "РасшифровкаПлатежа", ДанныеДокумента, СтруктураКурсы, ВалютаРегламентированногоУчета);
	КонецЕсли;	
	
	// Пересчет суммы взаиморасчетов.
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И ИзмениласьВалютаРасчетов
		И ПересчетНеобходим Тогда
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовТабличнойЧасти(
			Объект, "РасшифровкаПлатежа", ДанныеДокумента, СтруктураКурсы, ВалютаРегламентированногоУчета);
			
		ОбновитьПодвалФормы();
		СформироватьНадписьКурсоваяРазница();
	КонецЕсли;	
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Период, ДоговорКонтрагента, ВидОперации, ВалютаРегламентированногоУчета)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорКонтрагента.ВалютаРасчетов);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаРасчетов, Период));
		
	// Корректировка по виду операции.
	Если ВидОперации = Перечисления.ВидыОперацийППИ.ОплатаНалогов Тогда 
		СтруктураДанные.ВалютаРасчетов = ВалютаРегламентированногоУчета;
		СтруктураДанные.ВалютаРасчетовКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, Период);
	КонецЕсли;	

	СчетаУчета = БухгалтерскийУчетВызовСервера.ПолучитьСчетаРасчетовСКонтрагентом(ДоговорКонтрагента.Организация, ДоговорКонтрагента.Владелец, ДоговорКонтрагента);
	Если ВидОперации = Перечисления.ВидыОперацийППИ.ОплатаПоставщику Тогда 
		СтруктураДанные.Вставить(
			"СчетРасчетов",
			СчетаУчета.СчетРасчетовПоставщика);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИ.ВозвратПокупателю Тогда 
		СтруктураДанные.Вставить(
			"СчетРасчетов",
			СчетаУчета.СчетАвансовПокупателя);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИ.ВыдачаПодотчетнику Тогда 
		СтруктураДанные.Вставить(
			"СчетРасчетов",
			ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИ.РасчетыПоЗаймам Тогда 	
		СтруктураДанные.Вставить(
			"СчетРасчетов",
			ПланыСчетов.Хозрасчетный.НачисленныеОбязательстваПоОплатеТоваровИУслуг); // 3510
	Иначе 	
		СтруктураДанные.Вставить(
			"СчетРасчетов",
			ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаКлиенте
Процедура ОбработатьИзменениеБанковскогоСчетаОрганизации()
	
	СтруктураДанные = ПолучитьДанныеБанковскийСчетПриИзменении(ДатаДокумента, Объект.БанковскийСчет);

	// Комиссия банка.
	Если Не СтруктураДанные.СуммаКомиссияБанка = 0 Тогда  
		Объект.СниматьКомиссиюБанка = Истина;
		Объект.СуммаКомиссияБанка = СтруктураДанные.СуммаКомиссияБанка;
		Объект.СчетЗатратКомиссияБанка = СтруктураДанные.СчетЗатратКомиссияБанка;
	КонецЕсли;	
	
	// Обработка изменения валюты.
	СтруктураКурсыПред = Новый Структура("Валюта", Объект.ВалютаДокумента);
	Объект.ВалютаДокумента = СтруктураДанные.ВалютаДокумента;
	Объект.Курс      = СтруктураДанные.ВалютаДокументаКурсКратность.Курс;
	Объект.Кратность = СтруктураДанные.ВалютаДокументаКурсКратность.Кратность;
	СтруктураКурсы = Новый Структура("Валюта, Курс, Кратность, ПрямойКурс", Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность, Объект.ПрямойКурс);
	
	// Вопрос изменения
	ИзмениласьВалютаРасчетов = СтруктураКурсыПред.Валюта <> СтруктураДанные.ВалютаДокумента
		И ЗначениеЗаполнено(Объект.ВалютаДокумента); 
	ПересчетНеобходим = (Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа") > 0);	
	
	// Обновление курса взаиморасчетов.
	Если ИзмениласьВалютаРасчетов Тогда
		ЗаполнитьСписокВыбораКурсВзаиморасчетов();

		ДанныеВзаиморасчетов = ПолучитьКурсВалюты(Объект.ВалютаРасчетов, ДатаДокумента);

		ОбработкаТабличныхЧастейКлиентСервер.УстановитьКурсыВзаиморасчетовТабличнойЧасти(
			Объект, "РасшифровкаПлатежа", СтруктураКурсы, ДанныеВзаиморасчетов, ВалютаРегламентированногоУчета);
	КонецЕсли;	

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) 
		И ИзмениласьВалютаРасчетов
		И ПересчетНеобходим Тогда
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВзаиморасчетовТабличнойЧасти(
			Объект, "РасшифровкаПлатежа", СтруктураКурсы, ДанныеВзаиморасчетов, ВалютаРегламентированногоУчета);
			
		ОбновитьПодвалФормы();
		СформироватьНадписьКурсоваяРазница();
	КонецЕсли;		
КонецПроцедуры

// Получает набор данных с сервера для процедуры БанковскийСчетОрганизацииПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеБанковскийСчетПриИзменении(Период, БанковскийСчет)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаДокумента",
		БанковскийСчет.ВалютаДенежныхСредств);
		
	СтруктураДанные.Вставить(
		"СуммаКомиссияБанка",
		БанковскийСчет.СуммаКомиссияБанка);
		
	СтруктураДанные.Вставить(
		"СчетЗатратКомиссияБанка",
		ПланыСчетов.Хозрасчетный.ПрочиеОбщиеИАдминистративныеРасходы);
		
	СтруктураДанные.Вставить(
		"ВалютаДокументаКурсКратность",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(БанковскийСчет.ВалютаДенежныхСредств, Период));

	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеБанковскийСчетПриИзменении()

// Процедура рассчитывает итоги для подвала формы.
//
&НаКлиенте
Процедура ОбновитьПодвалФормы()
	ИтогСуммаПлатежа = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа") + Объект.ПрочиеПлатежи.Итог("СуммаПлатежа");
	ИтогСуммаВзаиморасчетов = Объект.РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов"); 
КонецПроцедуры // ОбновитьПодвалФормы()

// Процедура заполняет список выбора курса взаиморасчетов.
//
&НаСервере
Процедура ЗаполнитьСписокВыбораКурсВзаиморасчетов()

	Элементы.КурсВзаиморасчетов.СписокВыбора.Очистить();
	СписокКурсовВалют = ПолучитьСписокКурсовВалют();
	
	Для Каждого КурсНаДату Из СписокКурсовВалют Цикл
		Элементы.КурсВзаиморасчетов.СписокВыбора.Добавить(КурсНаДату.Значение, КурсНаДату.Представление);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСписокВыбораКурсВзаиморасчетов()

// Получает список курсов валют для списка выбора.
// 
// Возвращаемое значение:
//  СписокКурсовВалют - СписокЗначений
//
&НаСервере
Функция ПолучитьСписокКурсовВалют()
	
	СписокКурсовВалют = Новый СписокЗначений;
	
	Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		КурсНаДату = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаРасчетов, ДатаДокумента);
	Иначе
		КурсНаДату = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, ДатаДокумента);
	КонецЕсли;
	ШаблонСтроки = НСтр("ru = '%1 (на %2)'");
	СписокКурсовВалют.Добавить(КурсНаДату.Курс, СтрШаблон(ШаблонСтроки, Строка(КурсНаДату.Курс), Формат(ДатаДокумента, "ДФ = дд.ММ.гг")));
	Для ДеньМинус = 1 По 5 Цикл
		ДатаКурса = ДатаДокумента - (ДеньМинус * 86400);
		Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
			КурсНаДату = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаРасчетов, ДатаКурса);
		Иначе
			КурсНаДату = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, ДатаКурса);
		КонецЕсли;
		СписокКурсовВалют.Добавить(КурсНаДату.Курс, СтрШаблон(ШаблонСтроки, Строка(КурсНаДату.Курс), Формат(ДатаКурса, "ДФ = дд.ММ.гг")));
	КонецЦикла;
	
	СписокКурсовВалют.Добавить(0, НСтр("ru = '<Выбрать другую дату>'"));

	Возврат СписокКурсовВалют;
КонецФункции	

&НаКлиенте
Процедура КурсРасчетовОбработкаВыбораЗавершение(ДатаКурса, ДополнительныеПараметры) Экспорт
	Если ДатаКурса <> Неопределено Тогда
		КурсРасчетовОбработкаВыбораНаСервере(ДатаКурса);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура КурсРасчетовОбработкаВыбораНаСервере(ДатаКурса)
	
	Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		КурсНаДату = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаРасчетов, ДатаКурса);
	Иначе
		КурсНаДату = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, ДатаКурса);
	КонецЕсли;
	Объект.КурсВзаиморасчетов = КурсНаДату.Курс;
	Объект.КратностьВзаиморасчетов = КурсНаДату.Кратность;
	
КонецПроцедуры

// См. РаботаСКурсамиВалют.ПолучитьКурсВалюты.
&НаСервереБезКонтекста
Функция ПолучитьКурсВалюты(Валюта, ДатаДокумента)
	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, ДатаДокумента);
КонецФункции // ПолучитьКурсВалюты()

// Процедура формирует список выбора назначения платежа.
// 
&НаСервере
Процедура СформироватьСписокВыбораНазначениеПлатежа()
	Элементы.НазначениеПлатежа.СписокВыбора.Очистить();
	Элементы.НазначениеПлатежа.СписокВыбора.Добавить(Объект.КодНазначенияПлатежа.Наименование);
	НазначенияПлатежей.Загрузить(Объект.КодНазначенияПлатежа.НазначенияПлатежей.Выгрузить());
	Для Каждого СтрокаТаблицы Из НазначенияПлатежей Цикл
		Элементы.НазначениеПлатежа.СписокВыбора.Добавить(СтрокаТаблицы.НазначениеПлатежа);
	КонецЦикла;
КонецПроцедуры 

// Получает наименование кода назначения платежа.
//
&НаСервереБезКонтекста
Функция НаименованиеКодаНазначенияПлатежа(КодНазначенияПлатежа)
	Возврат КодНазначенияПлатежа.Наименование;	
КонецФункции 

// Процедура проверяет корректность ввода банковских счетов для вида операции "Перевод на другой счет".
// 
&НаКлиенте
Процедура ПроверитьБанковскийСчетПолучателя()
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИ.ПереводНаДругойСчет") 
		И Объект.БанковскийСчетПолучателя = Объект.БанковскийСчет Тогда
		
		ТекстСообщения = НСтр("ru = 'Банковские счета должны быть разные.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.БанковскийСчетПолучателя");
		Объект.БанковскийСчетПолучателя = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры // ПроверитьБанковскийСчетПолучателя()

// Формирует надпись курсовая разница
//
&НаКлиенте
Процедура СформироватьНадписьКурсоваяРазница()
	
	Если НЕ ДанныеУчетнойПолитики.СчитатьОперационныеКурсовыеРазницы Тогда
		Элементы.КурсоваяРазница.Заголовок = "";
		Возврат;	
	КонецЕсли;
	
	СуммаПлатежа 		= Окр(Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа") * Объект.Курс / Объект.Кратность, 2);
	СуммаВзаиморасчетов = Окр(Объект.РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов") * КурсВзаиморасчетовПоНацБанку / КратностьВзаиморасчетовПоНацБанку, 2);	
	
	ДанныеОСчетах = ПолучитьДанныеОСчетах(Объект.БанковскийСчет, Объект.СчетРасчетов);
	
	СуммаКурсовойРазницы = СуммаПлатежа - СуммаВзаиморасчетов;
	Если Объект.КурсВзаиморасчетов = КурсВзаиморасчетовПоНацБанку Тогда
		СуммаКурсовойРазницы = 0;
	КонецЕсли;
	
	// Нет курсовой разницы
	Если СуммаКурсовойРазницы = 0 Тогда 
		Текст1 = "";	
		
	// Расход валюты, убыток
	ИначеЕсли НЕ ДанныеОСчетах.СчетПриходаВалютный И ДанныеОСчетах.СчетРасходаВалютый И СуммаКурсовойРазницы < 0 Тогда
		Текст1 = "Доход";
		
	// Расход валюты, доход		
	ИначеЕсли НЕ ДанныеОСчетах.СчетПриходаВалютный И ДанныеОСчетах.СчетРасходаВалютый И СуммаКурсовойРазницы > 0 Тогда
		Текст1 = "Убыток";	
		
	// Приход валюты, убыток	
	ИначеЕсли ДанныеОСчетах.СчетПриходаВалютный И НЕ ДанныеОСчетах.СчетРасходаВалютый И СуммаКурсовойРазницы < 0 Тогда
		Текст1 = "Доход";		
		
	// Приход валюты, доход	
	ИначеЕсли ДанныеОСчетах.СчетПриходаВалютный И НЕ ДанныеОСчетах.СчетРасходаВалютый И СуммаКурсовойРазницы > 0 Тогда
		Текст1 = "Убыток";
		
	// Валюта - Валюта, убыток	
	ИначеЕсли ДанныеОСчетах.СчетПриходаВалютный И ДанныеОСчетах.СчетРасходаВалютый И СуммаКурсовойРазницы < 0 Тогда
		Текст1 = "Доход";			
		
	// Валюта - Валюта, доход		
	ИначеЕсли ДанныеОСчетах.СчетПриходаВалютный И ДанныеОСчетах.СчетРасходаВалютый И СуммаКурсовойРазницы > 0 Тогда
		Текст1 = "Убыток";			
		
	Иначе
		Текст1 = "";
	КонецЕсли;
	
	Если Текст1 = "" Тогда
		Текст2 = "";
		Элементы.КурсоваяРазница.Заголовок = "";
	Иначе
		Текст2 = СтрШаблон(НСтр("ru = '%1 - %2 = %3'"), СуммаПлатежа, СуммаВзаиморасчетов, СуммаКурсовойРазницы);
		Элементы.КурсоваяРазница.Заголовок = СтрШаблон(НСтр("ru = 'Операционная КР: %1 %2'"), Текст1, Текст2); 
	КонецЕсли;	
КонецПроцедуры

// Получает набор данных с сервера для процедуры СформироватьНадписьКурсоваяРазница.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеОСчетах(БанковскийСчет, СчетРасчетов)
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"СчетПриходаВалютный",
		БанковскийСчет.СчетУчета.Валютный);
		
	СтруктураДанные.Вставить(
		"СчетРасходаВалютый",
		СчетРасчетов.Валютный);
		
	Возврат СтруктураДанные;	
КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
