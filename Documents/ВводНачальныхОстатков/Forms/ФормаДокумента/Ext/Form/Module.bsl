#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	ОсновнойСклад = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователи.ТекущийПользователь(), 
		"ОсновнойСклад");

	ПрефиксНоменклатуры = "";
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьНачальныеСвойстваСубконтоТаблицы();
	КонецЕсли;		
	
	ЗаполнитьПризнакиПоГруппамИмущества();
	УстановитьОтборДляСписковГруппИмущества();
	УстановитьПараметрыВыбора();	
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеБППовтИсп.ИспользоватьПодключаемоеОборудование();
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	Элементы.МБПЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование

КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	УстановитьНачальныеСвойстваСубконтоТаблицы();
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
КонецПроцедуры    

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	УстановитьНачальныеСвойстваСубконтоТаблицы();
	ЗаполнитьПризнакиПоГруппамИмущества();
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПодборНоменклатурыПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище);
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату.
			Если Параметр[1] = Неопределено Тогда
				ТекШтрихкод = Параметр[0]; // Достаем штрихкод из основных данных
			Иначе
				ТекШтрихкод = Параметр[1][1]; // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			ПоискПоШтрихкодуЗавершение(ТекШтрихкод, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары"));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоТаблицыПриИзмененииОрганизации(
		Объект.Прочее,
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РазделУчета.
//
&НаКлиенте
Процедура РазделУчетаПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
	
	Объект.ОС.Очистить();
	Объект.ГруппаНалоговогоУчета.Очистить();
	Объект.НалоговаяДекларация.Очистить();
	Объект.РасчетыСПерсоналом.Очистить();
	Объект.ДенежныеСредства.Очистить();
	Объект.Товары.Очистить();
	Объект.Прочее.Очистить();
	Объект.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
	Объект.МБП.Очистить();
	
КонецПроцедуры 

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(ОсновнойСклад)
		И ЗначениеЗаполнено(Объект.Склад) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросУстановитьОсновнойСклад", ЭтотОбъект, Новый Структура("Склад", Объект.Склад));
		ТекстВопроса = НСтр("ru = 'Использовать данный склад как основной для подстановки в документы?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ЭксплуатируемыеМБП.
//
&НаКлиенте
Процедура ЭксплуатируемыеМБППриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)	
	Если НоваяСтрока 
		И Не Копирование Тогда
		СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;	
		СтрокаТабличнойЧасти.СпособНачисленияАмортизации = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный");	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ОСПослеУдаления(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОСОсновноеСредство.
//
&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("ОсновноеСредство", СтрокаТабличнойЧасти.ОсновноеСредство);

	СтруктураДанные = ПолучитьДанныеОСПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СчетУчета = СтруктураДанные.СчетУчета;
	СтрокаТабличнойЧасти.ИнвентарныйНомер = СтруктураДанные.ИнвентарныйНомер;
КонецПроцедуры

&НаКлиенте
Процедура ОСГруппаИмуществаПриИзменении(Элемент)
	// Для отбора в списках Недвижимость и Транспорт.
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ГруппаИмущества = ПредопределенноеЗначение("Справочник.ГруппыИмущества.ГИ1")
		Или СтрокаТабличнойЧасти.ГруппаИмущества = ПредопределенноеЗначение("Справочник.ГруппыИмущества.ГИ2")
		Или СтрокаТабличнойЧасти.ГруппаИмущества = ПредопределенноеЗначение("Справочник.ГруппыИмущества.ГИ3") Тогда 
		
		СтрокаТабличнойЧасти.ГруппаИмуществаНедвижимость = Истина;
		СтрокаТабличнойЧасти.ГруппаИмуществаТранспорт = Ложь;
		
		СтрокаТабличнойЧасти.КатегорияИмущества = "";
		СтрокаТабличнойЧасти.КодПользователяИмущества = "";
		
	ИначеЕсли СтрокаТабличнойЧасти.ГруппаИмущества = ПредопределенноеЗначение("Справочник.ГруппыИмущества.ГИ4")	Тогда 
		СтрокаТабличнойЧасти.ГруппаИмуществаНедвижимость = Ложь;
		СтрокаТабличнойЧасти.ГруппаИмуществаТранспорт = Истина;
		
		СтрокаТабличнойЧасти.КатегорияИмущества = ПредопределенноеЗначение("Справочник.КатегорияОбъектаИмущества.О");
		СтрокаТабличнойЧасти.КодПользователяИмущества = ПредопределенноеЗначение("Справочник.КодыПользователейИмущества.Собственник");		
	Иначе 
		СтрокаТабличнойЧасти.ГруппаИмуществаНедвижимость = Ложь;
		СтрокаТабличнойЧасти.ГруппаИмуществаТранспорт = Ложь;
		
		СтрокаТабличнойЧасти.КатегорияИмущества = "";
		СтрокаТабличнойЧасти.КодПользователяИмущества = "";

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОСПервоначальнаяСтоимостьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СтоимостьДляРасчетаАмортизации = СтрокаТабличнойЧасти.ПервоначальнаяСтоимость;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДенежныеСредства

// Процедура - обработчик события ПриНачалеРедактирования табличной части.
//
&НаКлиенте
Процедура ДенежныеСредстваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;
	
КонецПроцедуры // ДенежныеСредстваПриНачалеРедактирования()

// Процедура - обработчик события ПриИзменении поля ввода БанковскийСчетКасса.
//
&НаКлиенте
Процедура ДенежныеСредстваБанковскийСчетКассаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеДенежныеСредстваБанковскийСчетКассаПриИзменении(СтрокаТабличнойЧасти.БанковскийСчетКасса);
	
	СтрокаТабличнойЧасти.ВалютаДенежныхСредств = СтруктураДанные.Валюта;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(
	СтрокаТабличнойЧасти.СуммаВал,
	СтрокаТабличнойЧасти.ВалютаДенежныхСредств,
	ДатаДокумента);
	
КонецПроцедуры // ДенежныеСредстваБанковскийСчетКассаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ВалютаДенежныхСредств
// в строке табличной части ДенежныеСредства.
// Осуществляет пересчет суммы по сумме (вал.) в строке табличной части.
//
&НаКлиенте
Процедура ДенежныеСредстваВалютаДенежныхСредствПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
	СтрокаТабличнойЧасти.ВалютаДенежныхСредств,
	ДатаДокумента);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаВал
// в строке табличной части ДенежныеСредства.
// Осуществляет пересчет суммы по сумме (вал.) в строке табличной части.
//
&НаКлиенте
Процедура ДенежныеСредстваСуммаВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
	СтрокаТабличнойЧасти.ВалютаДенежныхСредств,
	ДатаДокумента);
	
КонецПроцедуры // ДенежныеСредстваСуммаВалПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода ВалютаДенежныхСредств.
// Табличной части ДенежныеСредства.
//
&НаКлиенте
Процедура ДенежныеСредстваВалютаДенежныхСредствНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;
	
	// Если тип денежных средств изменился, необходимо выполнить соответствующие действия.
	Если ТипЗнч(СтрокаТабличнойЧасти.БанковскийСчетКасса) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для банковского счета нельзя изменить валюту денежных средств!'"));
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры // ДенежныеСредстваВалютаДенежныхСредствНачалоВыбора()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыЦена.
//
&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрочее

// Процедура - обработчик события ПередНачаломИзменения таблицы Прочее.
//
&НаКлиенте
Процедура ПрочееПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоСтроки(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования табличной части "Прочее".
//
&НаКлиенте
Процедура ПрочееПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
		СтрокаТабличнойЧасти.ВидСальдо = "СальдоДт";
		СтрокаТабличнойЧасти.Валюта = ВалютаРегламентированногоУчета;
		СтрокаТабличнойЧасти.Курс = 1;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ПрочееВалютнаяСуммаПриИзменении(Элемент)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуВСтроке(СтрокаТабличнойЧасти);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Валюта.
//
&НаКлиенте
Процедура ПрочееВалютаПриИзменении(Элемент)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Курс = ПолучитьКурсВалюты(СтрокаТабличнойЧасти.Валюта, ДатаДокумента); 
	
	РассчитатьСуммуВСтроке(СтрокаТабличнойЧасти);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Курс.
//
&НаКлиенте
Процедура ПрочееКурсПриИзменении(Элемент)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуВСтроке(СтрокаТабличнойЧасти);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СчетУчета.
//
&НаКлиенте
Процедура ПрочееСчетУчетаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПрочееСубконто1.
//
&НаКлиенте
Процедура ПрочееСубконто1ПриИзменении(Элемент)
	ПриИзмененииСубконто(1);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода ПрочееСубконто1.
//
&НаКлиенте
Процедура ПрочееСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПрочееСубконто2.
//
&НаКлиенте
Процедура ПрочееСубконто2ПриИзменении(Элемент)
	ПриИзмененииСубконто(2);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода ПрочееСубконто2.
//
&НаКлиенте
Процедура ПрочееСубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПрочееСубконто3.
//
&НаКлиенте
Процедура ПрочееСубконто3ПриИзменении(Элемент)
	ПриИзмененииСубконто(3);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода ПрочееСубконто3.
//
&НаКлиенте
Процедура ПрочееСубконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМБП

// Процедура - обработчик события ПриИзменении поля ввода МБПКоличество.
//
&НаКлиенте
Процедура МБПКоличествоПриИзменении(Элемент)	
	СтрокаТабличнойЧасти = Элементы.МБП.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода МБПЦена.
//
&НаКлиенте
Процедура МБПЦенаПриИзменении(Элемент)	
	СтрокаТабличнойЧасти = Элементы.МБП.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);		
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода МБПСумма.
//
&НаКлиенте
Процедура МБПСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.МБП.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик события действия команды Подбор в табличную часть Товары.
// Открывает форму подбора.
//
&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	Если Объект.РазделУчета = "МБП" Тогда 
		РаботаСПодборомНоменклатурыКлиент.ОткрытьПодбор(ЭтаФорма, "МБП", "Поступление");
	ИначеЕсли Объект.РазделУчета = "Запасы" Тогда
		РаботаСПодборомНоменклатурыКлиент.ОткрытьПодбор(ЭтаФорма, "Товары", "Поступление");
	КонецЕсли;
КонецПроцедуры

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьТоварыИзФайла(Команда)
	
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для загрузки данных из файла
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("РазделУчета", Объект.РазделУчета));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьЗагрузкуТоваров();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРасчетыИзФайла(Команда)
	
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для загрузки данных из файла
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("РазделУчета", Объект.РазделУчета));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьЗагрузкуРасчетов();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьМБПИзФайла(Команда)
	
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для загрузки данных из файла
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("РазделУчета", Объект.РазделУчета));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьЗагрузкуМБП();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОСзФайла(Команда)
	
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для загрузки данных из файла
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("РазделУчета", Объект.РазделУчета));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьЗагрузкуОС();
	КонецЕсли;

КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ИмяТабличнойЧасти = ?(Объект.РазделУчета = "МБП", "МБП", "Товары");

	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", 
		ЭтотОбъект, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, ИмяТабличнойЧасти)), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
		
КонецПроцедуры
	
&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
    
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
        ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1), ДополнительныеПараметры.ИмяТабличнойЧасти);
	КонецЕсли;	

КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	ИмяТабличнойЧасти = ?(Объект.РазделУчета = "МБП", "МБП", "Товары");
	ПодключаемоеОборудованиеБПКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, ИмяТабличнойЧасти);
КонецПроцедуры // ЗагрузитьДанныеИзТСД()
// Конец ПодключаемоеОборудование

&НаКлиенте
Процедура ЗаполнитьАвансы(Команда)
	
	Если Объект.АвансыИДоотгрузка.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьАвансыИДоотгрузку", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет очищена! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		ЗаполнитьАвансыНаСервере();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

// Процедура-обработчик результата вопроса об установке основной кассы.
//
&НаКлиенте
Процедура ОтветНаВопросУстановитьОсновнойСклад(РезультатВопроса, ДополнительныеПараметры) Экспорт	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОсновнойСклад = ДополнительныеПараметры.Склад;
		БухгалтерскийУчетВызовСервера.УстановитьНастройкуПользователя(ОсновнойСклад, "ОсновнойСклад");
	КонецЕсли;
КонецПроцедуры

// Процедура-обработчик результата вопроса об установке основной кассы.
//
&НаКлиенте
Процедура ОтветНаВопросЗаполнитьАвансыИДоотгрузку(РезультатВопроса, ДополнительныеПараметры) Экспорт	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.АвансыИДоотгрузка.Очистить();
		ЗаполнитьАвансыНаСервере();
	КонецЕсли;
КонецПроцедуры

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьТоварыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
    Если АдресЗагруженныхДанных = Неопределено Тогда 
        Возврат;
    КонецЕсли;
    ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРасчетыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
    Если АдресЗагруженныхДанных = Неопределено Тогда 
        Возврат;
    КонецЕсли;
    ЗагрузитьРасчетыИзФайлаНаСервере(АдресЗагруженныхДанных);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьМБПИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
    Если АдресЗагруженныхДанных = Неопределено Тогда 
        Возврат;
    КонецЕсли;
    ЗагрузитьМБПИзФайлаНаСервере(АдресЗагруженныхДанных);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОСИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
    Если АдресЗагруженныхДанных = Неопределено Тогда 
        Возврат;
    КонецЕсли;
    ЗагрузитьОСИзФайлаНаСервере(АдресЗагруженныхДанных);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	Элементы.СтраницаРасчетыСПерсоналом.Видимость 	= Ложь;
	Элементы.СтраницаОС.Видимость 					= Ложь;
	Элементы.СтраницаОСНедвижимость.Видимость 		= Ложь;
	Элементы.СтраницаОСТранспорт.Видимость 			= Ложь;
	Элементы.СтраницаНалоговыйУчет.Видимость 		= Ложь;
	Элементы.СтраницыДенежныеСредства.Видимость 	= Ложь;
	Элементы.СтраницаПрочее.Видимость 	        	= Ложь;
	Элементы.Подразделение.Видимость 				= Ложь;
	Элементы.СтраницаТовары.Видимость               = Ложь;
	Элементы.СчетУчета.Видимость                    = Ложь;
	Элементы.ЭксплуатируемыеМБП.Видимость           = Ложь;
	Элементы.СтраницаМБП.Видимость					= Ложь;
	Элементы.СтраницаАвансыИДоотгрузка.Видимость	= Ложь;

	Элементы.Склад.Видимость = Ложь;
	
	Если Объект.РазделУчета = "Расчеты с персоналом" Тогда  
		Элементы.СтраницаРасчетыСПерсоналом.Видимость = Истина;
		Элементы.Подразделение.Видимость = Истина;
	ИначеЕсли Объект.РазделУчета = "Основные средства" Тогда 	
		Элементы.СтраницаОС.Видимость = Истина;
		
		// Видимость страниц имущества.
		НайденныеСтрокиГИ1 = Объект.ОС.НайтиСтроки(Новый Структура("ГруппаИмущества", Справочники.ГруппыИмущества.ГИ1));
		НайденныеСтрокиГИ2 = Объект.ОС.НайтиСтроки(Новый Структура("ГруппаИмущества", Справочники.ГруппыИмущества.ГИ2));
		НайденныеСтрокиГИ3 = Объект.ОС.НайтиСтроки(Новый Структура("ГруппаИмущества", Справочники.ГруппыИмущества.ГИ3));
		НайденныеСтрокиГИ4 = Объект.ОС.НайтиСтроки(Новый Структура("ГруппаИмущества", Справочники.ГруппыИмущества.ГИ4));
		
		НедвижимостьКоличество = НайденныеСтрокиГИ1.Количество() + НайденныеСтрокиГИ2.Количество() + НайденныеСтрокиГИ3.Количество();
		ТранспортКоличество = НайденныеСтрокиГИ4.Количество();
		
		Элементы.СтраницаОСНедвижимость.Видимость = НедвижимостьКоличество > 0;
		Элементы.СтраницаОСТранспорт.Видимость = ТранспортКоличество > 0;
		
		// Обновление заголовка подчиненных списков.
		Элементы.СтраницаОСНедвижимость.Заголовок = СтрШаблон(НСтр("ru = 'Недвижимость (%1)'"), НедвижимостьКоличество);
		Элементы.СтраницаОСТранспорт.Заголовок = СтрШаблон(НСтр("ru = 'Транспорт (%1)'"), ТранспортКоличество);
		
		// Видимость страницы ОСГруппа10 (Параметр выработки, Объем продукции).
		НайденнаяСтрокаСоСпособомПроизводственный = Объект.ОС.НайтиСтроки(Новый Структура("СпособНачисленияАмортизации", Перечисления.СпособыНачисленияАмортизацииОС.Производственный));
        КоличествоПроизводственный = НайденнаяСтрокаСоСпособомПроизводственный.Количество();
		Элементы.ОСГруппа10.Видимость = КоличествоПроизводственный > 0;
		
		// Видимость колонки Коэффициент ускорения
		НайденнаяСтрокаСоСпособомУмОстатка = Объект.ОС.НайтиСтроки(Новый Структура("СпособНачисленияАмортизации", Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка));
		КоличествоУмОстатка = НайденнаяСтрокаСоСпособомУмОстатка.Количество();
		Элементы.ОСКоэффициентУскорения.Видимость = КоличествоУмОстатка > 0;
		
	ИначеЕсли Объект.РазделУчета = "Налоговый учет" Тогда 	
		Элементы.СтраницаНалоговыйУчет.Видимость = Истина;
	ИначеЕсли Объект.РазделУчета = "Денежные средства" Тогда 	
		Элементы.СтраницыДенежныеСредства.Видимость = Истина;
	ИначеЕсли Объект.РазделУчета = "Запасы" Тогда 
		Элементы.СтраницаТовары.Видимость = Истина;
		Элементы.СчетУчета.Видимость = Истина;
		Элементы.Склад.Видимость = Истина;
	ИначеЕсли Объект.РазделУчета = "Прочее" Тогда 
		Элементы.СтраницаПрочее.Видимость = Истина;
	ИначеЕсли Объект.РазделУчета = "Прочее" Тогда 
		Элементы.СтраницаПрочее.Видимость = Истина;
	ИначеЕсли Объект.РазделУчета = "МБП" Тогда
		Элементы.СтраницаМБП.Видимость = Истина;
		Элементы.ЭксплуатируемыеМБП.Видимость = Истина;
		
		Если Объект.ЭксплуатируемыеМБП Тогда  
			Элементы.МБПСуммаИзноса.Видимость = Истина;
			Элементы.Склад.Видимость = Ложь;
			Элементы.МБПМОЛ.Видимость = Истина;
		Иначе 
			Элементы.МБПСуммаИзноса.Видимость = Ложь;
			Элементы.Склад.Видимость = Истина;
			Элементы.МБПМОЛ.Видимость = Ложь;
		КонецЕсли;
	ИначеЕсли Объект.РазделУчета = "Авансы и доотгрузка" Тогда
		Элементы.СтраницаАвансыИДоотгрузка.Видимость = Истина;	
	КонецЕсли;	                  
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьПризнакиПоГруппамИмущества()
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл 
		Если СтрокаТабличнойЧасти.ГруппаИмущества = ПредопределенноеЗначение("Справочник.ГруппыИмущества.ГИ1")
			Или СтрокаТабличнойЧасти.ГруппаИмущества = ПредопределенноеЗначение("Справочник.ГруппыИмущества.ГИ2")
			Или СтрокаТабличнойЧасти.ГруппаИмущества = ПредопределенноеЗначение("Справочник.ГруппыИмущества.ГИ3") Тогда 
			
			СтрокаТабличнойЧасти.ГруппаИмуществаНедвижимость = Истина;
			СтрокаТабличнойЧасти.ГруппаИмуществаТранспорт = Ложь;
		ИначеЕсли СтрокаТабличнойЧасти.ГруппаИмущества = ПредопределенноеЗначение("Справочник.ГруппыИмущества.ГИ4")	Тогда 
			СтрокаТабличнойЧасти.ГруппаИмуществаНедвижимость = Ложь;
			СтрокаТабличнойЧасти.ГруппаИмуществаТранспорт = Истина;
		Иначе 
			СтрокаТабличнойЧасти.ГруппаИмуществаНедвижимость = Ложь;
			СтрокаТабличнойЧасти.ГруппаИмуществаТранспорт = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ЗаполнитьПризнакиПоГруппамИмущества()

// Процедура - Установить отбор для списков групп имущества
//
&НаСервере
Процедура УстановитьОтборДляСписковГруппИмущества()
	// Отбор по станицам
	Элементы.Недвижимость.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("ГруппаИмуществаНедвижимость", Истина));
	Элементы.Транспорт.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("ГруппаИмуществаТранспорт", Истина));
КонецПроцедуры // УстановитьОтборДляСписковГруппИмущества()

// Процедура - Установить параметры выбора
//
&НаСервере
Процедура УстановитьПараметрыВыбора()
	// Основные средства.
	МассивСчетов = БухгалтерскийУчетВызовСервераПовтИсп.СчетаУчетаОсновныхСредствИНематериальныхАктивов();
	ФиксированныйМассивСчетов = Новый ФиксированныйМассив(МассивСчетов);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", ФиксированныйМассивСчетов);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ОССчетУчета.ПараметрыВыбора = НовыеПараметры;
КонецПроцедуры // УстановитьПараметрыВыбора()

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура - Рассчитать сумму в строке
//
&НаКлиенте
Процедура РассчитатьСуммуВСтроке(СтрокаТабличнойЧасти)
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.ВалютнаяСумма * СтрокаТабличнойЧасти.Курс;
КонецПроцедуры // РассчитатьСуммуВСтроке()

// См. РаботаСКурсамиВалют.ПолучитьКурсВалюты.
&НаСервереБезКонтекста
Функция ПолучитьКурсВалюты(Валюта, ДатаКурса)
	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, ДатаКурса).Курс;
КонецФункции // ПолучитьКурсВалюты()

// Получает набор данных с сервера для процедуры ОСПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеОСПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить(
		"ИнвентарныйНомер",
		СтруктураДанные.ОсновноеСредство.Код);
		
	СтруктураДанные.Вставить(
		"СчетУчета",
		ПланыСчетов.Хозрасчетный.Оборудование);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОСПриИзменении()

// Получает набор данных с сервера для процедуры ДенежныеСредстваБанковскийСчетКассаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДенежныеСредстваБанковскийСчетКассаПриИзменении(БанковскийСчетКасса)
	
	СтруктураДанные = Новый Структура();
	
	Если ТипЗнч(БанковскийСчетКасса) = Тип("СправочникСсылка.Кассы") Тогда
		СтруктураДанные.Вставить("Валюта", БанковскийСчетКасса.ВалютаДенежныхСредств);
	ИначеЕсли ТипЗнч(БанковскийСчетКасса) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		СтруктураДанные.Вставить("Валюта", БанковскийСчетКасса.ВалютаДенежныхСредств);
	Иначе
		СтруктураДанные.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДенежныеСредстваБанковскийСчетКассаПриИзменении()

// Функция пересчитывает сумму из указанной валюты в валюту упр. учета.
//
// Параметры:      
//	СуммаВал  - Число                    - сумма в валюте, которую следует пересчитать.
//	Валюта    - Справочник.Ссылка.Валюты - валюте, из которой следует пересчитать.
// 	ДатаКурса - Дата                     - дата курса.
//
// Возвращаемое значение: 
//  Число - сумма в валюте упр. учета.
//
&НаСервереБезКонтекста
Функция ПересчитатьИзВалютыВВалютуУчета(СуммаВал, Валюта, ДатаКурса)
	
	Сумма = 0;
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		ВалютаУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		Сумма = РаботаСКурсамиВалют.ПересчитатьВВалюту(СуммаВал, Валюта, ВалютаУчета, ДатаКурса);  
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции // ПересчитатьИзВалют()

// Процедура - обработчик подбора товаров.
//
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаЗагрузки.Номенклатура));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		Если Объект.РазделУчета = "МБП" Тогда 
			СтрокаТабличнойЧасти = Объект.МБП.Добавить();
		ИначеЕсли Объект.РазделУчета = "Запасы" Тогда
			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		КонецЕсли; 
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
	КонецЦикла;
		
КонецПроцедуры // ПолучитьТоварыИзХранилища()

&НаСервере
Функция ТребуетсяНастройкаАвторизацияИнтернетПоддержки()
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		ДанныеАутентификации = МодульИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		Возврат Не (ДанныеАутентификации <> Неопределено
			И ЗначениеЗаполнено(ДанныеАутентификации.Логин)
			И ЗначениеЗаполнено(ДанныеАутентификации.Пароль));
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ПриПодключенииИнтернетПоддержки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодключенияИнтернетПоддержки", ЭтотОбъект, ДополнительныеПараметры);
		МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияИнтернетПоддержки(Результат, ДополнительныеПараметры) Экспорт
	Если Не (ТипЗнч(Результат) = Тип("Структура")
		И ЗначениеЗаполнено(Результат.Логин)
		И ЗначениеЗаполнено(Результат.Пароль)) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.РазделУчета = "Запасы" Тогда 
		ПродолжитьЗагрузкуТоваров();
	ИначеЕсли ДополнительныеПараметры.РазделУчета = "Расчеты с персоналом" Тогда
		ПродолжитьЗагрузкуРасчетов();
	ИначеЕсли ДополнительныеПараметры.РазделУчета = "МБП" Тогда
		ПродолжитьЗагрузкуМБП();
	ИначеЕсли ДополнительныеПараметры.РазделУчета = "Основные средства" Тогда
		ПродолжитьЗагрузкуОС();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗагрузкуТоваров()

	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "ВводНачальныхОстатков.Товары";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка списка товаров из файла'");
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("РазделУчета", Объект.РазделУчета);
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьТоварыИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);

КонецПроцедуры // ПродолжитьЗагрузкуТоваров()

&НаКлиенте
Процедура ПродолжитьЗагрузкуРасчетов()

	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "ВводНачальныхОстатков.РасчетыСПерсоналом";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка списка расчетов из файла'");
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("РазделУчета", Объект.РазделУчета);
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьРасчетыИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);

КонецПроцедуры // ПродолжитьЗагрузкуРасчетов()

&НаКлиенте
Процедура ПродолжитьЗагрузкуМБП()

	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "ВводНачальныхОстатков.МБП";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка списка МБП из файла'");
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("РазделУчета", Объект.РазделУчета);
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьМБПИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);

КонецПроцедуры // ПродолжитьЗагрузкуТоваров()

&НаКлиенте
Процедура ПродолжитьЗагрузкуОС()

	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "ВводНачальныхОстатков.ОС";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка списка ОС из файла'");
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("РазделУчета", Объект.РазделУчета);
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьОСИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);

КонецПроцедуры // ПродолжитьЗагрузкуТоваров()

&НаСервере
Процедура ЗаполнитьАвансыНаСервере()

	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьАвансы(ДатаДокумента, ДанныеУчетнойПолитики.СтавкаНСПДляРасчетаНДСНаАвансы);                           	
	ЗначениеВРеквизитФормы(Документ, "Объект");	
КонецПроцедуры

// ПодключаемоеОборудование

// Процедура - Получены штрихкоды
//
// Параметры:
//  ДанныеШтрикодов	 - Структура/Массив - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов, ИмяТабличнойЧасти) Экспорт
	
	Модифицированность = Истина;
	
	НедобавленныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов, ИмяТабличнойЧасти);
	
	// Неизвестные штрихкоды.
	Если НедобавленныеШтрихкоды.НеизвестныеШтрихкоды.Количество() > 0 Тогда
		Для Каждого СтруктураДанные Из НедобавленныеШтрихкоды.НеизвестныеШтрихкоды Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Данные по штрихкоду не найдены: %1'"), СтруктураДанные.ТекШтрихкод);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	// Штрихкоды некорректного типа.
	ИначеЕсли НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа.Количество() > 0 Тогда 
		Для Каждого СтруктураДанные Из НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Найденная по штрихкоду %1 номенклатура: ""%2"", не подходит для этой табличной части'"),
				СтруктураДанные.ТекШтрихкод, СтруктураДанные.Номенклатура);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоШтрихкоду(ТекШтрихкод)
	
	Номенклатура = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьНоменклатуруПоШтрихкоду(ТекШтрихкод);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", Номенклатура);
	СтруктураДанные.Вставить("ТипНоменклатурыУслуга", ?(ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура"), Номенклатура.Услуга, Ложь));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПоШтрихкоду()

// Функция - Заполнить по данным штрихкодов
//
// Параметры:
//  ДанныеШтрикодов		 - 	 - Структура/Массив	 - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
// 
// Возвращаемое значение:
//  Структура - Массивы неизвестных штрих кодов
//
&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов, ИмяТабличнойЧасти) 
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	Для каждого ТекШтрихкод Из МассивШтрихкодов Цикл
		СтруктураДанные = ПолучитьДанныеПоШтрихкоду(ТекШтрихкод);
		
		Если НЕ ЗначениеЗаполнено(СтруктураДанные.Номенклатура) Тогда 
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ТипНоменклатурыУслуга Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("ТекШтрихкод, Номенклатура", ТекШтрихкод, СтруктураДанные.Номенклатура));
		Иначе 
			СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
			СтрокаТабличнойЧасти.Номенклатура = СтруктураДанные.Номенклатура;
			СтрокаТабличнойЧасти.Количество = ТекШтрихкод.Количество;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",
		НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);

КонецФункции // ЗаполнитьПоДаннымШтрихкодов()
// Конец ПодключаемоеОборудование

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииРаботаССубконто

&НаСервере
Процедура УстановитьНачальныеСвойстваСубконтоТаблицы()
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоТаблицы(
		Объект.Прочее,
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"ПрочееСубконто", "Субконто", "СчетУчета");
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	Результат.СкрыватьСубконто = Ложь;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	СтрокаТаблицы = Элементы.Прочее.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСубконто(
		ЭтотОбъект, 
		СтрокаТаблицы,
		НомерСубконто, 
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Элементы.Прочее.ТекущиеДанные, 
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаСервере
Процедура ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ТоварыДобавлены = Ложь;
	
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТабличнойЧасти = Объект.Товары.Добавить();
		НоваяСтрокаТабличнойЧасти.Номенклатура = СтрокаТаблицы.Номенклатура;
		НоваяСтрокаТабличнойЧасти.Количество = СтрокаТаблицы.Количество;
		НоваяСтрокаТабличнойЧасти.Сумма = СтрокаТаблицы.Сумма;
		// Цена
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(НоваяСтрокаТабличнойЧасти);
		
		ТоварыДобавлены = Истина;
	КонецЦикла;
	
	Если ТоварыДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРасчетыИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	РасчетыСПерсоналомДобавлены = Ложь;
	
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ФизЛицо) Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТабличнойЧасти = Объект.РасчетыСПерсоналом.Добавить();
		НоваяСтрокаТабличнойЧасти.ФизЛицо = СтрокаТаблицы.ФизЛицо;
		НоваяСтрокаТабличнойЧасти.Сумма = СтрокаТаблицы.Сумма;
		
		РасчетыСПерсоналомДобавлены = Истина;
	КонецЦикла;
	
	Если РасчетыСПерсоналомДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьМБПИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	МБПДобавлены = Ложь;
	
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТабличнойЧасти = Объект.МБП.Добавить();
		НоваяСтрокаТабличнойЧасти.МОЛ = СтрокаТаблицы.МОЛ;
		НоваяСтрокаТабличнойЧасти.Номенклатура = СтрокаТаблицы.Номенклатура;
		НоваяСтрокаТабличнойЧасти.Количество = СтрокаТаблицы.Количество;
		НоваяСтрокаТабличнойЧасти.Сумма = СтрокаТаблицы.Сумма;
		НоваяСтрокаТабличнойЧасти.СуммаИзноса = СтрокаТаблицы.СуммаИзноса;
		// Цена
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(НоваяСтрокаТабличнойЧасти);
		
		МБПДобавлены = Истина;
	КонецЦикла;
	
	Если МБПДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьОСИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	СтрокиДобавлены = Ложь;
	
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ОсновноеСредство) Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТабличнойЧасти = Объект.ОС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТаблицы);
		
		НоваяСтрокаТабличнойЧасти.СпособПоступления = Перечисления.СпособыПоступленияАктивов.Приобретение;
		
		СтрокиДобавлены = Истина;
	КонецЦикла;
	
	Если СтрокиДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
