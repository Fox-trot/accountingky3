#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПрефиксНоменклатуры = "";
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
									"Субконто1", "Субконто2", "Субконто3");
									
	Для Каждого СтрокаТабличнойЧасти Из Объект.Прочее Цикл							 
		БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "Прочее", СтрокаТабличнойЧасти, ПоляОбъекта);
	КонецЦикла;
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
КонецПроцедуры    

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
									"Субконто1", "Субконто2", "Субконто3");
									
	Для Каждого СтрокаТабличнойЧасти Из Объект.Прочее Цикл							 
		БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "Прочее", СтрокаТабличнойЧасти, ПоляОбъекта);
	КонецЦикла;
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПодборНоменклатурыПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура РазделУчетаПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
	
	Объект.ОС.Очистить();
	Объект.ГруппаНалоговогоУчета.Очистить();
	Объект.НалоговаяДекларация.Очистить();
	Объект.РасчетыСПерсоналом.Очистить();
	Объект.ДенежныеСредства.Очистить();
	Объект.Товары.Очистить();
	Объект.Прочее.Очистить();
	Объект.СчетУчета = "";
	Объект.МБП.Очистить();
	
КонецПроцедуры 

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ЭксплуатируемыеМБППриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ОсновноеСредство", СтрокаТЧ.ОсновноеСредство);
	СтруктураДанные.Вставить("СчетУчета", СтрокаТЧ.СчетУчета);
	СтруктураДанные.Вставить("ИнвентарныйНомер", СтрокаТЧ.ИнвентарныйНомер);
	СтруктураДанные.Вставить("СпособНачисленияАмортизации", СтрокаТЧ.СпособНачисленияАмортизации);	

	СтруктураДанные = ОСОсновноеСредствоПриИзмененииНаСервереСтруктура(СтруктураДанные);
	
	СтрокаТЧ.СчетУчета = СтруктураДанные.СчетУчета;
	СтрокаТЧ.ИнвентарныйНомер = СтруктураДанные.ИнвентарныйНомер;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДенежныеСредства

// Процедура - обработчик события ПриНачалеРедактирования табличной части.
//
&НаКлиенте
Процедура ДенежныеСредстваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;
	
КонецПроцедуры // ДенежныеСредстваПриНачалеРедактирования()

// Процедура - обработчик события ПриИзменении поля ввода БанковскийСчетКасса.
//
&НаКлиенте
Процедура ДенежныеСредстваБанковскийСчетКассаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеДенежныеСредстваБанковскийСчетКассаПриИзменении(СтрокаТабличнойЧасти.БанковскийСчетКасса);
	
	СтрокаТабличнойЧасти.ВалютаДенежныхСредств = СтруктураДанные.Валюта;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(
	СтрокаТабличнойЧасти.СуммаВал,
	СтрокаТабличнойЧасти.ВалютаДенежныхСредств,
	ДатаДокумента);
	
КонецПроцедуры // ДенежныеСредстваБанковскийСчетКассаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ВалютаДенежныхСредств
// в строке табличной части ДенежныеСредства.
// Осуществляет пересчет суммы по сумме (вал.) в строке табличной части.
//
&НаКлиенте
Процедура ДенежныеСредстваВалютаДенежныхСредствПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
	СтрокаТабличнойЧасти.ВалютаДенежныхСредств,
	ДатаДокумента);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаВал
// в строке табличной части ДенежныеСредства.
// Осуществляет пересчет суммы по сумме (вал.) в строке табличной части.
//
&НаКлиенте
Процедура ДенежныеСредстваСуммаВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
	СтрокаТабличнойЧасти.ВалютаДенежныхСредств,
	ДатаДокумента);
	
КонецПроцедуры // ДенежныеСредстваСуммаВалПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода ВалютаДенежныхСредств.
// Табличной части ДенежныеСредства.
//
&НаКлиенте
Процедура ДенежныеСредстваВалютаДенежныхСредствНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;
	
	// Если тип денежных средств изменился, необходимо выполнить соответствующие действия.
	Если ТипЗнч(СтрокаТабличнойЧасти.БанковскийСчетКасса) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для банковского счета нельзя изменить валюту денежных средств!'"));
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры // ДенежныеСредстваВалютаДенежныхСредствНачалоВыбора()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если НЕ СтрокаТабличнойЧасти = Неопределено Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если НЕ СтрокаТабличнойЧасти = Неопределено Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
	КонецЕсли; 
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если НЕ СтрокаТабличнойЧасти = Неопределено Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрочее

// Процедура - обработчик события ПриНачалеРедактирования табличной части "Прочее".
//
&НаКлиенте
Процедура ПрочееПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
		СтрокаТабличнойЧасти.ВидСальдо = "СальдоДт";
		СтрокаТабличнойЧасти.Валюта = ВалютаРегламентированногоУчета;
		СтрокаТабличнойЧасти.Курс = 1;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ПрочееВалютнаяСуммаПриИзменении(Элемент)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуВСтроке(СтрокаТабличнойЧасти);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Валюта.
//
&НаКлиенте
Процедура ПрочееВалютаПриИзменении(Элемент)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Курс = ПолучитьКурсВалюты(СтрокаТабличнойЧасти.Валюта, ДатаДокумента); 
	
	РассчитатьСуммуВСтроке(СтрокаТабличнойЧасти);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Курс.
//
&НаКлиенте
Процедура ПрочееКурсПриИзменении(Элемент)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуВСтроке(СтрокаТабличнойЧасти);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СчетУчета.
//
&НаКлиенте
Процедура ПрочееСчетУчетаПриИзменении(Элемент)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "Субконто1", "Субконто2", "Субконто3");

	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "Прочее", СтрокаТабличнойЧасти, ПоляОбъекта);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Субконто.
// 
&НаКлиенте
Процедура ПрочееСубконто1ПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "Прочее", СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Субконто.
// 
&НаКлиенте
Процедура ПрочееСубконто2ПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "Прочее", СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Субконто.
// 
&НаКлиенте
Процедура ПрочееСубконто3ПриИзменении(Элемент)
		
	СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "Прочее", СтрокаТабличнойЧасти);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМБП

&НаКлиенте
Процедура МБПКоличествоПриИзменении(Элемент)	
	СтрокаТабличнойЧасти = Элементы.МБП.ТекущиеДанные;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
КонецПроцедуры

&НаКлиенте
Процедура МБПЦенаПриИзменении(Элемент)	
	СтрокаТабличнойЧасти = Элементы.МБП.ТекущиеДанные;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);		
КонецПроцедуры

&НаКлиенте
Процедура МБПСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.МБП.ТекущиеДанные;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик события действия команды Подбор в табличную часть Товары.
// Открывает форму подбора.
//
&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	Если Объект.РазделУчета = "МБП" Тогда 
		РаботаСПодборомНоменклатурыКлиент.ОткрытьПодбор(ЭтаФорма, "МБП", "Поступление");
	ИначеЕсли Объект.РазделУчета = "Товары" Тогда
		РаботаСПодборомНоменклатурыКлиент.ОткрытьПодбор(ЭтаФорма, "Товары", "Поступление");
	КонецЕсли;
КонецПроцедуры

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

&НаКлиенте
Процедура ЗагрузитьТоварыИзФайла(Команда)
	
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для загрузки данных из файла
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("РазделУчета", Объект.РазделУчета));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьЗагрузкуТоваров();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРасчетыИзФайла(Команда)
	
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для загрузки данных из файла
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("РазделУчета", Объект.РазделУчета));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьЗагрузкуРасчетов();
	КонецЕсли;

КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

&НаКлиенте
Процедура ЗагрузитьТоварыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
    Если АдресЗагруженныхДанных = Неопределено Тогда 
        Возврат;
    КонецЕсли;
    ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРасчетыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
    Если АдресЗагруженныхДанных = Неопределено Тогда 
        Возврат;
    КонецЕсли;
    ЗагрузитьРасчетыИзФайлаНаСервере(АдресЗагруженныхДанных);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	Элементы.СтраницаРасчетыСПерсоналом.Видимость 	= Ложь;
	Элементы.СтраницаОС.Видимость 					= Ложь;
	Элементы.СтраницаНалоговыйУчет.Видимость 		= Ложь;
	Элементы.СтраницыДенежныеСредства.Видимость 	= Ложь;
	Элементы.СтраницаПрочее.Видимость 	        	= Ложь;
	Элементы.Подразделение.Видимость 				= Ложь;
	Элементы.СтраницаТовары.Видимость               = Ложь;
	Элементы.СчетУчета.Видимость                    = Ложь;
	Элементы.ЭксплуатируемыеМБП.Видимость           = Ложь;
	Элементы.СтраницаМБП.Видимость					= Ложь;

	Если Объект.РазделУчета = "Расчеты с персоналом" Тогда  
		Элементы.СтраницаРасчетыСПерсоналом.Видимость = Истина;
		Элементы.Подразделение.Видимость = Истина;
	ИначеЕсли Объект.РазделУчета = "Основные средства" Тогда 	
		Элементы.СтраницаОС.Видимость = Истина;
		
		// Видимость подстраниц: Недвижимость и Транспорт по ОС
		ЕстьНедвижимость = Ложь;
		ЕстьТранспорт = Ложь;
		
		ОтпределитьНаличиеИмущества(ЕстьНедвижимость, ЕстьТранспорт);	
		
		Элементы.СтраницаОСНедвижимость.Видимость = ЕстьНедвижимость;
		Элементы.СтраницаОСТранспорт.Видимость = ЕстьТранспорт;	
		
	ИначеЕсли Объект.РазделУчета = "Налоговый учет" Тогда 	
		Элементы.СтраницаНалоговыйУчет.Видимость = Истина;
	ИначеЕсли Объект.РазделУчета = "Денежные средства" Тогда 	
		Элементы.СтраницыДенежныеСредства.Видимость = Истина;
	ИначеЕсли Объект.РазделУчета = "Товары" Тогда 
		Элементы.СтраницаТовары.Видимость = Истина;
		Элементы.СчетУчета.Видимость = Истина;
	ИначеЕсли Объект.РазделУчета = "Прочее" Тогда 
		Элементы.СтраницаПрочее.Видимость = Истина;
		ИначеЕсли Объект.РазделУчета = "Прочее" Тогда 
		Элементы.СтраницаПрочее.Видимость = Истина;
	ИначеЕсли Объект.РазделУчета = "МБП" Тогда
		Элементы.СтраницаМБП.Видимость = Истина;
		Элементы.ЭксплуатируемыеМБП.Видимость = Истина;
	КонецЕсли;	                  
	
	Если Объект.ЭксплуатируемыеМБП Тогда  
		Элементы.МБП.ПодчиненныеЭлементы.МБПСуммаИзноса.Видимость 		= Истина;
		Элементы.МБП.ПодчиненныеЭлементы.МБПСклад.Видимость				= Ложь;
		Элементы.МБП.ПодчиненныеЭлементы.МБПМОЛ.Видимость				= Истина;
	Иначе 
		Элементы.МБП.ПодчиненныеЭлементы.МБПСуммаИзноса.Видимость 		= Ложь;
		Элементы.МБП.ПодчиненныеЭлементы.МБПСклад.Видимость				= Истина;
		Элементы.МБП.ПодчиненныеЭлементы.МБПМОЛ.Видимость				= Ложь;
	КонецЕсли;	
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()

&НаСервере
Процедура ОтпределитьНаличиеИмущества(ЕстьНедвижимость, ЕстьТранспорт)
	
	Для Каждого СТЧ Из Объект.ОС Цикл 
		Если Лев(СТЧ.ГруппаИмущества.Наименование,1) = "4" Тогда 
			ЕстьТранспорт		= Истина;
		ИначеЕсли НЕ СТЧ.ГруппаИмущества.Пустая() Тогда 			
			ЕстьНедвижимость	= Истина;
		КонецЕсли;			
	КонецЦикла;    
	
КонецПроцедуры   

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура - Рассчитать сумму в строке
//
&НаКлиенте
Процедура РассчитатьСуммуВСтроке(СтрокаТабличнойЧасти)
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.ВалютнаяСумма * СтрокаТабличнойЧасти.Курс;
КонецПроцедуры // РассчитатьСуммуВСтроке()

// Возвращает курс валюты на дату.
//
// Параметры:
//   Валюта    - СправочникСсылка.Валюты - Валюта, для которой получается курс.
//   ДатаКурса - Дата - Дата, на которую получается курс.
//
// Возвращаемое значение: 
//   Курс      - Число - Курс валюты на указанную дату.
//
&НаСервереБезКонтекста
Функция ПолучитьКурсВалюты(Валюта, ДатаКурса)
	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, ДатаКурса).Курс;
КонецФункции // ПолучитьКурсВалюты()

&НаСервере
Функция ОСОсновноеСредствоПриИзмененииНаСервереСтруктура(СтруктураДанные) 	
	
	//ИнвентарныйНомер
	Если НЕ ЗначениеЗаполнено(СтруктураДанные.ИнвентарныйНомер) Тогда
		СтруктураДанные.ИнвентарныйНомер = СтруктураДанные.ОсновноеСредство.Код;	
	КонецЕсли; 
	
	//СчетУчета
	Если НЕ ЗначениеЗаполнено(СтруктураДанные.СчетУчета) Тогда
		СтруктураДанные.СчетУчета = ПланыСчетов.Хозрасчетный.Оборудование;	
	КонецЕсли; 	 
	
	Возврат СтруктураДанные;
	
КонецФункции

// Получает набор данных с сервера для процедуры ДенежныеСредстваБанковскийСчетКассаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДенежныеСредстваБанковскийСчетКассаПриИзменении(БанковскийСчетКасса)
	
	СтруктураДанные = Новый Структура();
	
	Если ТипЗнч(БанковскийСчетКасса) = Тип("СправочникСсылка.Кассы") Тогда
		СтруктураДанные.Вставить("Валюта", БанковскийСчетКасса.ВалютаДенежныхСредств);
	ИначеЕсли ТипЗнч(БанковскийСчетКасса) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		СтруктураДанные.Вставить("Валюта", БанковскийСчетКасса.ВалютаДенежныхСредств);
	Иначе
		СтруктураДанные.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДенежныеСредстваБанковскийСчетКассаПриИзменении()

// Функция пересчитывает сумму из указанной валюты в валюту упр. учета.
//
// Параметры:      
//	СуммаВал  - Число                    - сумма в валюте, которую следует пересчитать.
//	Валюта    - Справочник.Ссылка.Валюты - валюте, из которой следует пересчитать.
// 	ДатаКурса - Дата                     - дата курса.
//
// Возвращаемое значение: 
//  Число - сумма в валюте упр. учета.
//
&НаСервереБезКонтекста
Функция ПересчитатьИзВалютыВВалютуУчета(СуммаВал, Валюта, ДатаКурса)
	
	Сумма = 0;
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		ВалютаУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		Сумма = РаботаСКурсамиВалют.ПересчитатьВВалюту(СуммаВал, Валюта, ВалютаУчета, ДатаКурса);  
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции // ПересчитатьИзВалют()

// Процедура - обработчик подбора товаров.
//
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаЗагрузки.Номенклатура));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		Если Объект.РазделУчета = "МБП" Тогда 
			СтрокаТабличнойЧасти = Объект.МБП.Добавить();
		ИначеЕсли Объект.РазделУчета = "Товары" Тогда
			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		КонецЕсли; 
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
	КонецЦикла;
		
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

&НаСервере
Функция ТребуетсяНастройкаАвторизацияИнтернетПоддержки()
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		ДанныеАутентификации = МодульИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		Возврат Не (ДанныеАутентификации <> Неопределено
			И ЗначениеЗаполнено(ДанныеАутентификации.Логин)
			И ЗначениеЗаполнено(ДанныеАутентификации.Пароль));
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ПриПодключенииИнтернетПоддержки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодключенияИнтернетПоддержки", ЭтотОбъект, ДополнительныеПараметры);
		МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияИнтернетПоддержки(Результат, ДополнительныеПараметры) Экспорт
	Если Не (ТипЗнч(Результат) = Тип("Структура")
		И ЗначениеЗаполнено(Результат.Логин)
		И ЗначениеЗаполнено(Результат.Пароль)) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.РазделУчета = "Товары" Тогда 
		ПродолжитьЗагрузкуТоваров();
	ИначеЕсли ДополнительныеПараметры.РазделУчета = "Расчеты с персоналом" Тогда
		ПродолжитьЗагрузкуРасчетов();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗагрузкуТоваров()

	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "ВводНачальныхОстатков.Товары";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка списка товаров из файла'");
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("РазделУчета", Объект.РазделУчета);
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьТоварыИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);

КонецПроцедуры // ПродолжитьЗагрузкуТоваров()

&НаКлиенте
Процедура ПродолжитьЗагрузкуРасчетов()

	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "ВводНачальныхОстатков.РасчетыСПерсоналом";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка списка расчетов из файла'");
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("РазделУчета", Объект.РазделУчета);
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьРасчетыИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);

КонецПроцедуры // ПродолжитьЗагрузкуРасчетов()

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаСервере
Процедура ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ТоварыДобавлены = Ложь;
	
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТабличнойЧасти = Объект.Товары.Добавить();
		НоваяСтрокаТабличнойЧасти.Склад = СтрокаТаблицы.Склад;
		НоваяСтрокаТабличнойЧасти.Номенклатура = СтрокаТаблицы.Номенклатура;
		НоваяСтрокаТабличнойЧасти.Количество = СтрокаТаблицы.Количество;
		НоваяСтрокаТабличнойЧасти.Сумма = СтрокаТаблицы.Сумма;
		// Цена
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(НоваяСтрокаТабличнойЧасти);
		
		ТоварыДобавлены = Истина;
	КонецЦикла;
	
	Если ТоварыДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРасчетыИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	РасчетыСПерсоналомДобавлены = Ложь;
	
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ФизЛицо) Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТабличнойЧасти = Объект.РасчетыСПерсоналом.Добавить();
		НоваяСтрокаТабличнойЧасти.ФизЛицо = СтрокаТаблицы.ФизЛицо;
		НоваяСтрокаТабличнойЧасти.Сумма = СтрокаТаблицы.Сумма;
		
		РасчетыСПерсоналомДобавлены = Истина;
	КонецЦикла;
	
	Если РасчетыСПерсоналомДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
