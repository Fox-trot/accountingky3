

#Область ОбработчикиСлужебные

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Рассчитать сумму в строке
//
&НаКлиенте
Процедура РассчитатьСуммуВСтроке(СтрокаТабличнойЧасти)
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.ВалютнаяСумма * СтрокаТабличнойЧасти.Курс;
КонецПроцедуры // РассчитатьСуммуВСтроке()

// Возвращает курс валюты на дату.
//
// Параметры:
//   Валюта    - СправочникСсылка.Валюты - Валюта, для которой получается курс.
//   ДатаКурса - Дата - Дата, на которую получается курс.
//
// Возвращаемое значение: 
//   Курс      - Число - Курс валюты на указанную дату.
//
&НаСервереБезКонтекста
Функция ПолучитьКурсВалюты(Валюта, ДатаКурса)
	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, ДатаКурса).Курс;
КонецФункции // ПолучитьКурсВалюты()

// Установка доступности субконто для существующих строк табличной части
//
&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
	"Субконто1", "Субконто2", "Субконто3");
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Прочее Цикл
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СтрокаТабличнойЧасти.СчетУчета, СтрокаТабличнойЧасти, ПоляОбъекта, Истина);
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТабличнойЧасти, "Субконто" + "%Индекс%", "СчетУчета");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТабличнойЧасти, "Субконто" + "%Индекс%", "ПрочееСубконто" + "%Индекс%", ПараметрыДокумента);			
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область УправлениеВнешнимВидом

&НаКлиенте
// Процедура устанавливает видимость и доступность элементов.
//
Процедура УстановитьВидимостьДоступностьЭлементов()
	Элементы.СтраницаРасчетыСПерсоналом.Видимость 	= Ложь;
	Элементы.СтраницаОС.Видимость 					= Ложь;
	Элементы.СтраницаНалоговыйУчет.Видимость 		= Ложь;
	Элементы.СтраницыДенежныеСредства.Видимость 	= Ложь;
	Элементы.СтраницаПрочее.Видимость 	        	= Ложь;
	Элементы.Подразделение.Видимость 				= Ложь;
	Элементы.СтраницаТМЗ.Видимость                  = Ложь;
	Элементы.СчетУчета.Видимость                    = Ложь;
	Элементы.МБП.Видимость                          = Ложь;
	Элементы.СтатусМБП.Видимость              	    = Ложь;
	Элементы.ТМЗИнвНомер.Видимость                 	= Ложь;
	Элементы.ТМЗДатаВыдачи.Видимость 				= Ложь;
	Элементы.ТМЗДатаСписания.Видимость 				= Ложь;
	Элементы.ТМЗСуммаИзноса.Видимость			    = Ложь;
	Элементы.ТМЗСостояниеЗапчасти.Видимость			= Ложь;
	Элементы.СостояниеЗапчасти.Видимость			= Ложь;
	Элементы.ТМЗ.Доступность  						= Истина;

	ЕстьЗапчасти = Объект.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ЗапасныеЧасти") ИЛИ ЕстьЗапчасти();
	
	Если Объект.РазделУчета = "РасчетыСПерсоналом" Тогда  
		Элементы.СтраницаРасчетыСПерсоналом.Видимость = Истина;
		Элементы.Подразделение.Видимость = Истина;
	ИначеЕсли Объект.РазделУчета = "ОсновныеСредства" Тогда 	
		Элементы.СтраницаОС.Видимость = Истина;
		
		// Видимость подстраниц: Недвижимость и Транспорт по ОС
		ЕстьНедвижимость 	= Ложь;
		ЕстьТранспорт  		= Ложь;
		
		ОтпределитьНаличиеИмущества(ЕстьНедвижимость, ЕстьТранспорт);	
		
		Элементы.СтраницаОСНедвижимость.Видимость   = ЕстьНедвижимость;
		Элементы.СтраницаОСТранспорт.Видимость 		= ЕстьТранспорт;	
		
	ИначеЕсли Объект.РазделУчета = "НалоговыйУчет"    Тогда 	
		Элементы.СтраницаНалоговыйУчет.Видимость    = Истина;
	ИначеЕсли Объект.РазделУчета = "ДенежныеСредства" Тогда 	
		Элементы.СтраницыДенежныеСредства.Видимость = Истина;
	ИначеЕсли Объект.РазделУчета = "Товары"              Тогда 
		Элементы.СтраницаТМЗ.Видимость              = Истина;
		Элементы.СчетУчета.Видимость                = Истина;
		Элементы.МБП.Видимость                      = Истина;
		Элементы.СтатусМБП.Видимость = Объект.МБП;
		Элементы.ТМЗСостояниеЗапчасти.Видимость		= ЕстьЗапчасти;
		Элементы.СостояниеЗапчасти.Видимость		= ЕстьЗапчасти;
		Элементы.ТМЗЗагрузитьОстаткиМБП.Видимость 	= Объект.МБП;
		Элементы.ТМЗЗагрузитьОстаткиТМЗ.Видимость 	= НЕ Объект.МБП;
		Элементы.ТМЗДатаПрихода.Видимость 			= НЕ Объект.МБП ИЛИ (Объект.МБП И Объект.СтатусМБП <> ПредопределенноеЗначение("Перечисление.СтатусыМБП.Эксплуатация"));
	ИначеЕсли Объект.РазделУчета = "Прочее" Тогда 
		Элементы.СтраницаПрочее.Видимость       	= Истина;
	КонецЕсли;	
	
	Если Элементы.СтатусМБП.Видимость = Ложь Тогда
		Объект.СтатусМБП = ПредопределенноеЗначение("Перечисление.СтатусыМБП.ПустаяСсылка");
	КонецЕсли;
	
	Если Объект.СтатусМБП = ПредопределенноеЗначение("Перечисление.СтатусыМБП.Эксплуатация") Тогда  
		Элементы.ТМЗ.ПодчиненныеЭлементы.ТМЗСуммаИзноса.Видимость  = Истина;
		Элементы.ТМЗ.ПодчиненныеЭлементы.ТМЗДатаВыдачи.Видимость   = Истина;
		Элементы.ТМЗ.ПодчиненныеЭлементы.ТМЗДатаСписания.Видимость = Ложь;
		Элементы.ТМЗ.ПодчиненныеЭлементы.ТМЗПодразделение.Видимость = Ложь;
		Элементы.ТМЗИнвНомер.Видимость                 				= Истина;
	КонецЕсли;	
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()

&НаСервере
Процедура ОтпределитьНаличиеИмущества(ЕстьНедвижимость, ЕстьТранспорт)
	
	Для Каждого СТЧ Из Объект.ОС Цикл 
		Если Лев(СТЧ.ГруппаИмущества.Наименование,1) = "4" Тогда 
			ЕстьТранспорт		= Истина;
		ИначеЕсли НЕ СТЧ.ГруппаИмущества.Пустая() Тогда 			
			ЕстьНедвижимость	= Истина;
		КонецЕсли;			
	КонецЦикла;    
	
КонецПроцедуры   

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
Функция ОСОсновноеСредствоПриИзмененииНаСервереСтруктура(СтруктураДанные) 	
	
	//ИнвентарныйНомер
	Если НЕ ЗначениеЗаполнено(СтруктураДанные.ИнвентарныйНомер) Тогда
		СтруктураДанные.ИнвентарныйНомер = СтруктураДанные.ОсновноеСредство.Код;	
	КонецЕсли; 
	
	//СчетУчета
	Если НЕ ЗначениеЗаполнено(СтруктураДанные.СчетУчета) Тогда
		СтруктураДанные.СчетУчета = ПланыСчетов.Хозрасчетный.Оборудование;	
	КонецЕсли; 	 
	
	// СчетНачисленияАмортизацииБУ
	Если НЕ ЗначениеЗаполнено(СтруктураДанные.СчетНачисленияАмортизацииБУ) И 
		СтруктураДанные.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.НеНачислять Тогда
		СтруктураДанные.СчетНачисленияАмортизацииБУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетНачисленияАмортизации(СтруктураДанные.СчетУчета);
	КонецЕсли;	 
	
	Возврат СтруктураДанные;
	
КонецФункции

// Получает набор данных с сервера для процедуры ДенежныеСредстваБанковскийСчетКассаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДенежныеСредстваБанковскийСчетКассаПриИзменении(БанковскийСчетКасса)
	
	СтруктураДанные = Новый Структура();
	
	Если ТипЗнч(БанковскийСчетКасса) = Тип("СправочникСсылка.Кассы") Тогда
		СтруктураДанные.Вставить("Валюта", БанковскийСчетКасса.ВалютаДенежныхСредств);
	ИначеЕсли ТипЗнч(БанковскийСчетКасса) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		СтруктураДанные.Вставить("Валюта", БанковскийСчетКасса.ВалютаДенежныхСредств);
	Иначе
		СтруктураДанные.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДенежныеСредстваБанковскийСчетКассаПриИзменении()

// Функция пересчитывает сумму из указанной валюты в валюту упр. учета.
//
// Параметры:      
//	СуммаВал  - Число                    - сумма в валюте, которую следует пересчитать.
//	Валюта    - Справочник.Ссылка.Валюты - валюте, из которой следует пересчитать.
// 	ДатаКурса - Дата                     - дата курса.
//
// Возвращаемое значение: 
//  Число - сумма в валюте упр. учета.
//
&НаСервереБезКонтекста
Функция ПересчитатьИзВалютыВВалютуУчета(СуммаВал, Валюта, ДатаКурса)
	
	Сумма = 0;
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		ВалютаУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		Сумма = РаботаСКурсамиВалют.ПересчитатьВВалюту(СуммаВал, Валюта, ВалютаУчета, ДатаКурса);  
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции // ПересчитатьИзВалют()

&НаСервереБезКонтекста
Функция ПолучитьГруппуОС(СтруктураЭлементаСправочника)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Наименование = &Наименование
	|	И ОсновныеСредства.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Наименование", СтруктураЭлементаСправочника.ГруппаОС);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		СпрОбъект 				= Справочники.ОсновныеСредства.СоздатьГруппу();
		СпрОбъект.Наименование	= СтруктураЭлементаСправочника.ГруппаОС;
		СпрОбъект.Записать();
		Возврат СпрОбъект.Ссылка;
	КонецЕсли;
	
КонецФункции // ПолучитьГруппуОС(ИмяГруппыОС)

&НаСервереБезКонтекста
Функция ПолучитьСпособПоступленияПринятКУчету()
	
	НайденноеСобытие = Справочники.СобытияОС.НайтиПоНаименованию("Принят к учету", Истина); 
	Если НайденноеСобытие = Справочники.СобытияОС.ПустаяСсылка() Тогда   		
		
		НовоеСобытиеПринятКУчету = Справочники.СобытияОС.СоздатьЭлемент();
		НовоеСобытиеПринятКУчету.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету;
		НовоеСобытиеПринятКУчету.Наименование = "Принят к учету";
		НовоеСобытиеПринятКУчету.Записать();
		
		СобытиеПринятКУчету = НовоеСобытиеПринятКУчету.Ссылка;
	Иначе
		СобытиеПринятКУчету = НайденноеСобытие;
	КонецЕсли;
	
	Возврат СобытиеПринятКУчету;
	
КонецФункции // Получить()

&НаСервереБезКонтекста
Функция ПолучитьСклад(НаименованиеСклада, НомерСтроки)

	ИмяСклада = НаименованиеСклада;
	
	НайденныйСклад = Справочники.Склады.НайтиПоНаименованию(ИмяСклада, Истина);
	Если НЕ ЗначениеЗаполнено(НайденныйСклад) Тогда
	    НовыйСклад = Справочники.Склады.СоздатьЭлемент();
		НовыйСклад.Наименование = ИмяСклада;
		НовыйСклад.Записать();
		НайденныйСклад = НовыйСклад.Ссылка;
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'В справочник Склады добавлен новый склад ""%1""!'"), ИмяСклада);
		Сообщение.Сообщить();	
	КонецЕсли;
	
	Возврат НайденныйСклад;	
	
КонецФункции // ()

&НаСервереБезКонтекста
Функция ПолучитьМОЛ(ИмяМОЛ)
	НайденныйМОЛ = Справочники.ФизическиеЛица.НайтиПоНаименованию(ИмяМОЛ, Истина);
	Если НайденныйМОЛ = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда 				
		НовыйМОЛ = Справочники.ФизическиеЛица.СоздатьЭлемент();
		НовыйМОЛ.Наименование = ИмяМОЛ; 			

		Попытка
			НовыйМОЛ.Записать();
		Исключение
		КонецПопытки; 				
		МОЛ = НовыйМОЛ.Ссылка;
	Иначе
		МОЛ = НайденныйМОЛ;
	КонецЕсли;
	
	Возврат МОЛ; 
	
	
КонецФункции // ()

&НаСервереБезКонтекста
Функция ПолучитьМОЛПоТабельномуНомеру(НаименованиеМОЛ, НомерСтрокиМОЛа)
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(НаименованиеМОЛ);
	КолЭл = Массив.Количество();
	Если КолЭл = 0 Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'в строке МОЛа ""%1"" не указан МОЛ и его табельный номер!'"), НомерСтрокиМОЛа);
		Сообщение.Сообщить();
		Возврат Неопределено;	
	КонецЕсли;
	ТабельныйНомер = СокрЛП(Массив[КолЭл-1]);
	
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТабельныйНомер) Тогда
		НайденныйМОЛ = Справочники.ФизическиеЛица.НайтиПоКоду(ТабельныйНомер);
		Возврат НайденныйМОЛ;	
	Иначе
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'У МОЛа ""%1"" в строке ""%2""не указан табельный номер!'"), НаименованиеМОЛ, НомерСтрокиМОЛа);
		Сообщение.Сообщить();
		Возврат Неопределено;	
	КонецЕсли;
	
КонецФункции // ()

&НаСервере
Функция ПолучитьНоменклатуруПоКоду(ДанныеНоменклатуры)
	
	СсылкаНоменклатуры = Справочники.Номенклатура.НайтиПоНаименованию(ДанныеНоменклатуры.Наименование, Истина);
		Если НЕ ЗначениеЗаполнено(СсылкаНоменклатуры) Тогда
			ОбъектНоменклатуры = Справочники.Номенклатура.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(ОбъектНоменклатуры, ДанныеНоменклатуры);
			ОбъектНоменклатуры.НаименованиеПолное 	= ДанныеНоменклатуры.Наименование;
			ОбъектНоменклатуры.ЕдиницаИзмерения 	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(ДанныеНоменклатуры.ЕдиницаИзмерения);
			ОбъектНоменклатуры.Записать();
			СсылкаНоменклатуры = ОбъектНоменклатуры.Ссылка;
		КонецЕсли;
	
	Возврат СсылкаНоменклатуры;
	
КонецФункции

&НаСервере
Функция ПолучитьСоздатьПапку(ИмяПапки)
	СсылкаПапки = Справочники.Номенклатура.ПустаяСсылка(); 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.ПометкаУдаления
		|	И Номенклатура.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", ИмяПапки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СсылкаПапки = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СсылкаПапки) Тогда
		СсылкаПапки = Справочники.Номенклатура.СоздатьГруппу();
		СсылкаПапки.Наименование = ИмяПапки;
	    СсылкаПапки.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт");
		СсылкаПапки.Записать();
	КонецЕсли;
	
	Возврат СсылкаПапки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПодразделение(Подразделение, Организация)
	НайденноеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию(Подразделение, Истина);
	Если НайденноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка() Тогда 				
		НовоеПодразделение 				= Справочники.ПодразделенияОрганизаций.СоздатьЭлемент();
		НовоеПодразделение.Наименование = Подразделение; 			
		НовоеПодразделение.Владелец 	= Организация;
		Попытка
			НовоеПодразделение.Записать();
		Исключение
		КонецПопытки; 				
		ПодразделениеСсылка = НовоеПодразделение.Ссылка;
	Иначе
		ПодразделениеСсылка = НайденноеПодразделение;
	КонецЕсли;
	
	Возврат ПодразделениеСсылка; 
	
	
КонецФункции // ()

&НаСервереБезКонтекста
Функция ПолучитьСпособОтраженияРасходовПоАмортизации(Организация, СчетНачисленияАмортизацииБУ)
	
	СчетНачисления = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СчетНачисленияАмортизацииБУ);
	
	Если НЕ ЗначениеЗаполнено(СчетНачисления) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка КАК СпособОтражения
		|ИЗ
		|	Справочник.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизацииСпособы
		|ГДЕ
		|	СпособыОтраженияРасходовПоАмортизацииСпособы.СчетЗатрат = &СчетЗатрат
		|	И НЕ СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("СчетЗатрат", СчетНачисления);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.СпособОтражения;
	Иначе
		Возврат Справочники.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка();
	КонецЕсли;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервереБезКонтекста
Функция НайтиОсновноеСредство(Дата, СтруктураЭлементаСправочника)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка
	|ИЗ
	|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
	|			&Дата,
	|			ОсновноеСредство.Наименование = &Наименование
	|				И ИнвентарныйНомер = &ИнвентарныйНомер) КАК ПараметрыУчетаОССрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
	|		ПО ПараметрыУчетаОССрезПоследних.ОсновноеСредство = ОсновныеСредства.Ссылка
	|ГДЕ
	|	ОсновныеСредства.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("ИнвентарныйНомер", 	СтруктураЭлементаСправочника.ИнвентарныйНомер);
	Запрос.УстановитьПараметр("Наименование", 		СтруктураЭлементаСправочника.НаименованиеОС);
	Запрос.УстановитьПараметр("Дата", 				Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат Справочники.ОсновныеСредства.ПустаяСсылка();
	КонецЕсли;
	
	
КонецФункции // НайтиОсновноеСредство(СтруктураЭлементаСправочника)()

&НаСервереБезКонтекста
Функция ПреобразоватьВСтроку(Число)
	Стр = Строка(Число);
	Стр = СокрЛП(Стр);
	Стр = СтрЗаменить(Стр, Символы.НПП, "");
	
	Возврат Стр;
	
КонецФункции // ()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция ЕстьЗапчасти()
	ЗначениеВозврата = Ложь;
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СтруктураСчетов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТабличнойЧасти.Номенклатура);
		Если ЗначениеЗаполнено(СтруктураСчетов) Тогда
			СчетУчета = СтруктураСчетов.СчетБУ;			
			Если СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ЗапасныеЧасти") Тогда
				ЗначениеВозврата = Истина;
				Прервать;
			КонецЕсли;		
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначениеВозврата;
	
КонецФункции // ЕстьЗапчасти()

&НаСервереБезКонтекста
Функция ПарныйСчет(СчетУчета)

	Возврат СчетУчета.ПарныйСчет	

КонецФункции // ПарныйСчет(СчетУчета)
	
#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ЗагрузитьОстаткиПоОС(Команда)	
	Если Объект.ОС.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет очищена! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе 
		ДиалогExcelФайл();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОстаткиМБП(Команда)	
	Если Объект.Товары.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет очищена! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе 
		ДиалогExcelФайл();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОстаткиТМЗ(Команда)
	Если Объект.Товары.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет очищена! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе 
		ДиалогExcelФайл();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзВнешнейОбработки(Параметры)
	Объект.РазделУчета 	= Параметры.РазделУчета;
	Объект.СчетУчета 	= Параметры.СчетУчета;
	Если Объект.РазделУчета = "Товары" Тогда
		Объект.МБП 			= Параметры.МБП;
		Объект.СтатусМБП 	= Параметры.СтатусМБП;		
	КонецЕсли;
	
	Если Объект.РазделУчета = "Товары" Тогда
		Объект[Объект.РазделУчета].Загрузить(Параметры.ТаблицаЗначений.Выгрузить()); 	
	КонецЕсли;	

КонецПроцедуры // ЗаполнитьИзВнешнейОбработки(Параметры)(

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Если Параметры.Свойство("Источник") 
		И Параметры.Источник = "ОбработкаСозданиеДокументовВводаОстатковСДублированнойНоменклатурой" Тогда
		
		ЗаполнитьИзВнешнейОбработки(Параметры);
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПрефиксНоменклатуры = "";
	
	УстановитьДоступностьСубконто();
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать 
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры    

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьДоступностьСубконто();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетСервер.ПроверитьСуществованиеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура РазделУчетаПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
	
	Объект.ОС.Очистить();
	Объект.ГруппаНалоговогоУчета.Очистить();
	Объект.НалоговаяДекларация.Очистить();
	Объект.РасчетыСПерсоналом.Очистить();
	Объект.ДенежныеСредства.Очистить();
	Объект.Товары.Очистить();
	Объект.Прочее.Очистить();
	Объект.Склад = "";
	Объект.СчетУчета = "";
	
КонецПроцедуры 

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ  РАЗДЕЛА УЧЕТА ТМЗ

&НаКлиенте
Процедура ТМЗКоличествоПриИзменении(Элемент)
	РассчетСумм(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТМЗЦенаПриИзменении(Элемент)
	РассчетСумм(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РассчетСумм(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТМЗ.ТекущиеДанные;
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена
КонецПроцедуры

&НаКлиенте
Процедура МБППриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов()
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗапчастиПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.СостояниеЗапчасти) Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			СтрокаТабличнойЧасти.СостояниеЗапчасти = Объект.СостояниеЗапчасти;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТабличныхЧастей

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ОС

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация",                 Объект.Организация);
	СтруктураДанные.Вставить("ОсновноеСредство",            СтрокаТЧ.ОсновноеСредство);
	СтруктураДанные.Вставить("СчетУчета",                 СтрокаТЧ.СчетУчета);
	СтруктураДанные.Вставить("ИнвентарныйНомер",            СтрокаТЧ.ИнвентарныйНомерРегл);
	СтруктураДанные.Вставить("СчетНачисленияАмортизацииБУ", СтрокаТЧ.СчетНачисленияАмортизацииБУ);
	СтруктураДанные.Вставить("СпособНачисленияАмортизацииБУ", СтрокаТЧ.СпособНачисленияАмортизацииБУ);	

	СтруктураДанные = ОСОсновноеСредствоПриИзмененииНаСервереСтруктура(СтруктураДанные);
	
	СтрокаТЧ.СчетУчета                  = СтруктураДанные.СчетУчета;
	СтрокаТЧ.ИнвентарныйНомерРегл         = СтруктураДанные.ИнвентарныйНомер;
	СтрокаТЧ.СчетНачисленияАмортизацииБУ  = СтруктураДанные.СчетНачисленияАмортизацииБУ;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСЛиквидационнаяСтоимостьПриИзменении(Элемент)
	ТД = Элементы.ОС.ТекущиеДанные;
	ТД.СтоимостьДляВычисленияАмортизацииБУ = ТД.ПервоначальнаяСтоимостьБУ - ТД.ЛиквидационнаяСтоимость; 
КонецПроцедуры

&НаКлиенте
Процедура ОССрокСлужбыПриИзменении(Элемент)
	СТЧ = Элементы.ОС.ТекущиеДанные;
	
	Если СТЧ.СрокСлужбы <> 0 Тогда
		СТЧ.КоэффициентАмортизации = Окр((12/СТЧ.СрокСлужбы) * 100, 2);	
	Иначе
		СТЧ.КоэффициентАмортизации = 0;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОСПервоначальнаяСтоимостьБУПриИзменении(Элемент)
	СТЧ = Элементы.ОС.ТекущиеДанные;
	СТЧ.СтоимостьДляВычисленияАмортизацииБУ 	= СТЧ.ПервоначальнаяСтоимостьБУ; 
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ  = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ДиалогExcelФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогExcelФайл()
	Если Объект.РазделУчета = "ОсновныеСредства" Тогда
		Объект.ОС.Очистить();
	ИначеЕсли Объект.РазделУчета = "Товары" Тогда  
		Объект.Товары.Очистить();
		
	КонецЕсли;
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбора.Фильтр = ".xls;.xlsx|*.xls;*.xlsx|.csv|*.csv";
	
	Если Не ДиалогВыбора.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ДиалогВыбора.ПолноеИмяФайла);
	
	Если Не Файл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	Если ВРег(Файл.Расширение) = ".XLS" Тогда
		
		Информация = Новый СистемнаяИнформация;
	
		Если Информация.ТипПлатформы = ТипПлатформы.Linux_x86 Или Информация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
	        ПоказатьПредупреждение(, НСтр("ru = 'Загрузка из файла "".XLS"" недоступна при работе в Linux'"));
	        Возврат;
	    КонецЕсли;

		ДанныеФайла = ПреобразоватьXLSФайлВCSV(ДиалогВыбора.ПолноеИмяФайла);
	ИначеЕсли ВРег(Файл.Расширение) = ".CSV" Тогда 
		ДанныеФайла = Новый	ТекстовыйДокумент;
		ДанныеФайла.Прочитать(ДиалогВыбора.ПолноеИмяФайла);
	Иначе
		ВызватьИсключениеНеверныйФорматФайла();
	КонецЕсли;	
	
	ДанныеCSVФайлаВДанныеФормы(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьXLSФайлВCSV(ИмяФайла)
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
	Исключение
		ТекстИсключения = НСтр("ru = 'Не установлено приложение ""Excel"".'");
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;	
	КнигаСданными = Excel.WorkBooks.Open(ИмяФайла);
	
	#Если ВебКлиент Тогда
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		
	Если Не ДиалогВыбора.Выбрать() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФайлаCSV = ДиалогВыбора.Каталог + "\" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "") + ".Csv";
	#иначе
	ИмяФайлаCSV = ПолучитьИмяВременногоФайла("Csv");
	#КонецЕсли
	
	КнигаСданными.SaveAs(ИмяФайлаCSV, 23);
	
	КнигаСданными.Close(Ложь);
    Excel.Quit();
    Excel = Неопределено;

	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	ТекстовыйДокумент.Прочитать(ИмяФайлаCSV);
	
	УдалитьФайлы(ИмяФайлаCSV);

	Возврат ТекстовыйДокумент;
КонецФункции	

&НаКлиенте
Процедура ДанныеCSVФайлаВДанныеФормы(ДанныеФайла)	
	
	Если Объект.РазделУчета = "ОсновныеСредства" Тогда
		Состояние("Выполняется загрузка Основных средств!", ,"Пожалуйста, подождите!", БиблиотекаКартинок.Информация32);		
		ЗаполнитьТЧОС(ДанныеФайла);	
		
	ИначеЕсли Объект.РазделУчета = "Товары" И Объект.МБП Тогда
		Состояние("Выполняется загрузка МБП!", ,"Пожалуйста, подождите!", БиблиотекаКартинок.Информация32);		
		ЗаполнитьТЧТМЗ(ДанныеФайла);
			
	ИначеЕсли Объект.РазделУчета = "Товары" И НЕ Объект.МБП Тогда
		Состояние("Выполняется загрузка ТМЗ!", ,"Пожалуйста, подождите!", БиблиотекаКартинок.Информация32);		
		ЗаполнитьТЧТМЗ(ДанныеФайла);
		
	КонецЕсли;
		
	УстановитьВидимостьДоступностьЭлементов();	
	
КонецПроцедуры	

&НаСервере
Процедура ВызватьИсключениеНеверныйФорматФайла()
	ТекстИсключения = НСтр("ru = 'Загрузка ввода начальных остатков из файлов данного формата не поддерживается.'");
	ВызватьИсключение ТекстИсключения; 	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧОС(ДанныеФайла)
	КоличествоСтрок = ДанныеФайла.КоличествоСтрок();	
	
	Для НомерСтроки = 9 По КоличествоСтрок - 7 Цикл
		СтрокаДанных = ДанныеФайла.ПолучитьСтроку(НомерСтроки);		
		ЗначенияКолонокВСтроке = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаДанных, ";");
				
		СтруктураЭлементаСправочника 	= Новый Структура;
		
		СтруктураЭлементаСправочника.Вставить("НаименованиеОС", 				ЗначенияКолонокВСтроке[2]);
		СтруктураЭлементаСправочника.Вставить("ДатаВыпуска", 					ЗначенияКолонокВСтроке[5]);
		СтруктураЭлементаСправочника.Вставить("ГруппаОС", 						ЗначенияКолонокВСтроке[7]);
		СтруктураЭлементаСправочника.Вставить("Изготовитель", 					ЗначенияКолонокВСтроке[22]);
		СтруктураЭлементаСправочника.Вставить("ЗаводскойНомер", 				ЗначенияКолонокВСтроке[23]);
		СтруктураЭлементаСправочника.Вставить("НомерПаспорта", 					ЗначенияКолонокВСтроке[24]);
		СтруктураЭлементаСправочника.Вставить("ИдентификационныйНомерИмущества", ЗначенияКолонокВСтроке[25]);
		СтруктураЭлементаСправочника.Вставить("ГруппаИмущества", 				ЗначенияКолонокВСтроке[26]);
		
		СтруктураЭлементаСправочника.Вставить("ИнвентарныйНомер", 				ПреобразоватьВСтроку(ЗначенияКолонокВСтроке[1]));
		СтруктураЭлементаСправочника.Вставить("ПервоначальнаяСтоимостьБУ", 		ЗначенияКолонокВСтроке[3]);
		СтруктураЭлементаСправочника.Вставить("НормаАмортизации", 				ЗначенияКолонокВСтроке[10]);
		СтруктураЭлементаСправочника.Вставить("ЛиквидационнаяСтоимость", 		ЗначенияКолонокВСтроке[13]);
		СтруктураЭлементаСправочника.Вставить("СчетУчета", 						ЗначенияКолонокВСтроке[16]);
		СтруктураЭлементаСправочника.Вставить("СчетУчетаАмортизацииБУ", 		ЗначенияКолонокВСтроке[18]);
		СтруктураЭлементаСправочника.Вставить("СчетНачисленияАмортизацииБУ", 	ЗначенияКолонокВСтроке[20]);
		СтруктураЭлементаСправочника.Вставить("СрокСлужбы", 					ЗначенияКолонокВСтроке[8]);		
		
		СтруктураЭлементаСправочника.Вставить("НакопленнаяАмортизацияБУ", 		ЗначенияКолонокВСтроке[11]);
		СтруктураЭлементаСправочника.Вставить("СтоимостьДляВычисленияАмортизацииБУ", ЗначенияКолонокВСтроке[12]);
		СтруктураЭлементаСправочника.Вставить("МОЛ", 							ЗначенияКолонокВСтроке[15]);
		СтруктураЭлементаСправочника.Вставить("Подразделение", 					ЗначенияКолонокВСтроке[14]);
		СтруктураЭлементаСправочника.Вставить("ДатаПринятияКУчетуРегл", 		ЗначенияКолонокВСтроке[6]);
				
		НоваяСтрока = Объект.ОС.Добавить();
		
		НайтиСоздатьЗаполнитьОС(НоваяСтрока, СтруктураЭлементаСправочника);			
				
	КонецЦикла;	
	
КонецПроцедуры // ()

&НаСервере
Процедура ЗаполнитьТЧТМЗ(ДанныеФайла)
	
	КоличествоСтрок = ДанныеФайла.КоличествоСтрок();		
	Если НЕ Объект.МБП Тогда		
		ВременнаяСтрока = ДанныеФайла.ПолучитьСтроку(3);
		ЗначенияКолонокВСтроке = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВременнаяСтрока, ";");
		СсылкаПапки = ПолучитьСоздатьПапку(ЗначенияКолонокВСтроке[10]);
		
		Для НомерСтроки = 2 По КоличествоСтрок - 1  Цикл
			СтрокаДанных = ДанныеФайла.ПолучитьСтроку(НомерСтроки);	
			ЗначенияКолонокВСтроке = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаДанных, ";");
			Если НЕ ЗначениеЗаполнено(ЗначенияКолонокВСтроке[0]) 
				ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначенияКолонокВСтроке[0]) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Объект.Товары.Добавить();
			
			ДанныеНоменклатуры = Новый Структура;
			ДанныеНоменклатуры.Вставить("Наименование", 	ЗначенияКолонокВСтроке[3]);
			ДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", ЗначенияКолонокВСтроке[4]);
			ДанныеНоменклатуры.Вставить("Родитель", 		СсылкаПапки);
			ДанныеНоменклатуры.Вставить("Дополнение", 		ЗначенияКолонокВСтроке[9]);
			НоваяСтрока.Номенклатура 	= ПолучитьНоменклатуруПоКоду(ДанныеНоменклатуры);
					
			НоваяСтрока.Склад 			= ПолучитьСклад(ЗначенияКолонокВСтроке[1], ЗначенияКолонокВСтроке[0]);
			НоваяСтрока.Количество 	= ЗначенияКолонокВСтроке[5];
			НоваяСтрока.Цена 		= ЗначенияКолонокВСтроке[6];
			НоваяСтрока.Сумма 		= ЗначенияКолонокВСтроке[7];
			НоваяСтрока.ДатаПрихода = ПолучитьДату(ЗначенияКолонокВСтроке[8]);
			Если Объект.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ЗапасныеЧасти") 
				И ЗначениеЗаполнено(Объект.СостояниеЗапчасти) Тогда
				
				НоваяСтрока.СостояниеЗапчасти = Объект.СостояниеЗапчасти;
			КонецЕсли;

		КонецЦикла;		
		
	ИначеЕсли Объект.МБП И Объект.СтатусМБП = Перечисления.СтатусыМБП.Эксплуатация Тогда
		Для НомерСтроки = 2 По КоличествоСтрок - 1 Цикл
			СтрокаДанных = ДанныеФайла.ПолучитьСтроку(НомерСтроки);	
			ЗначенияКолонокВСтроке = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаДанных, ";");
			Если НЕ ЗначениеЗаполнено(ЗначенияКолонокВСтроке[0]) 
				ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначенияКолонокВСтроке[0]) Тогда
				Продолжить;
			КонецЕсли;			
			
			НоваяСтрока = Объект.Товары.Добавить();
			
			ДанныеНоменклатуры = Новый Структура;
			ДанныеНоменклатуры.Вставить("Наименование", 	ЗначенияКолонокВСтроке[4]);
			ДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", ЗначенияКолонокВСтроке[5]);
			ДанныеНоменклатуры.Вставить("Родитель", 		Справочники.Номенклатура.МБП);
			ДанныеНоменклатуры.Вставить("Дополнение", 		ЗначенияКолонокВСтроке[11]);
			НоваяСтрока.Номенклатура 	= ПолучитьНоменклатуруПоКоду(ДанныеНоменклатуры);
					
			НоваяСтрока.МОЛ 			= ПолучитьМОЛПоТабельномуНомеру(ЗначенияКолонокВСтроке[1], ЗначенияКолонокВСтроке[0]);
			НоваяСтрока.ИнвНомер 		= ЗначенияКолонокВСтроке[2];
			НоваяСтрока.Количество 		= ЗначенияКолонокВСтроке[6];
			НоваяСтрока.Цена 			= ЗначенияКолонокВСтроке[7];
			НоваяСтрока.Сумма 			= ЗначенияКолонокВСтроке[8];
			НоваяСтрока.СуммаИзноса		= ЗначенияКолонокВСтроке[9];
			НоваяСтрока.ДатаВыдачи 		= ПолучитьДату(ЗначенияКолонокВСтроке[10]);

		КонецЦикла;
	
	ИначеЕсли Объект.МБП 
		И (Объект.СтатусМБП = Перечисления.СтатусыМБП.Склад ИЛИ Объект.СтатусМБП = Перечисления.СтатусыМБП.Новый) Тогда
		Для НомерСтроки = 2 По КоличествоСтрок - 1 Цикл
			СтрокаДанных = ДанныеФайла.ПолучитьСтроку(НомерСтроки);	
			ЗначенияКолонокВСтроке = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаДанных, ";");
			Если НЕ ЗначениеЗаполнено(ЗначенияКолонокВСтроке[0]) 
				ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначенияКолонокВСтроке[0]) Тогда
				Продолжить;
			КонецЕсли;			
			
			НоваяСтрока = Объект.Товары.Добавить();
			
			ДанныеНоменклатуры = Новый Структура;
			ДанныеНоменклатуры.Вставить("Наименование", 	ЗначенияКолонокВСтроке[3]);
			ДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", ЗначенияКолонокВСтроке[4]);
			ДанныеНоменклатуры.Вставить("Родитель", 		Справочники.Номенклатура.МБП);
			ДанныеНоменклатуры.Вставить("Дополнение", 		ЗначенияКолонокВСтроке[9]);
			НоваяСтрока.Номенклатура 	= ПолучитьНоменклатуруПоКоду(ДанныеНоменклатуры);
					
			НоваяСтрока.Склад 			= ПолучитьСклад(ЗначенияКолонокВСтроке[1], ЗначенияКолонокВСтроке[0]);
			НоваяСтрока.Количество 	= ЗначенияКолонокВСтроке[5];
			НоваяСтрока.Цена 		= ЗначенияКолонокВСтроке[6];
			НоваяСтрока.Сумма 		= ЗначенияКолонокВСтроке[7];
			НоваяСтрока.ДатаПрихода = ПолучитьДату(ЗначенияКолонокВСтроке[8]);
		КонецЦикла;
	
	КонецЕсли;
		
КонецПроцедуры // 

&НаСервере
Процедура НайтиСоздатьЗаполнитьОС(СТЧ, СтруктураЭлементаСправочника)
	ГруппаОС 	= ПолучитьГруппуОС(СтруктураЭлементаСправочника);
	СпрСсылка 	= НайтиОсновноеСредство(ДатаДокумента, СтруктураЭлементаСправочника);
	Если НЕ ЗначениеЗаполнено(СпрСсылка) Тогда
		СпрОбъект = Справочники.ОсновныеСредства.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СпрОбъект, СтруктураЭлементаСправочника);
		СпрОбъект.Наименование		 		= СтруктураЭлементаСправочника.НаименованиеОС;
		СпрОбъект.НаименованиеПолное 		= СтруктураЭлементаСправочника.НаименованиеОС;
		СпрОбъект.Родитель					= ГруппаОС;
		СпрОбъект.ГруппаИмущества			= Справочники.ГруппыИмущества.НайтиПоКоду("ГИ" + СтруктураЭлементаСправочника.ГруппаИмущества, Истина);
		СпрОбъект.Записать();
	Иначе
		СпрОбъект = СпрСсылка.ПолучитьОбъект();
		Если НЕ ЗначениеЗаполнено(СпрСсылка.Родитель) И ЗначениеЗаполнено(СтруктураЭлементаСправочника.ГруппаОС) Тогда
			СпрОбъект.Родитель				= ПолучитьГруппуОС(СтруктураЭлементаСправочника);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СпрСсылка.ГруппаИмущества) И ЗначениеЗаполнено(СтруктураЭлементаСправочника.ГруппаИмущества) Тогда
			СпрОбъект.ГруппаИмущества		= Справочники.ГруппыИмущества.НайтиПоКоду("ГИ" + СтруктураЭлементаСправочника.ГруппаИмущества, Истина);
		КонецЕсли;
		Если СпрОбъект.Модифицированность() Тогда
			СпрОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	СТЧ.ОсновноеСредство    				= СпрОбъект.Ссылка;
	СТЧ.ГруппаИмущества						= Справочники.ГруппыИмущества.НайтиПоКоду("ГИ" + СтруктураЭлементаСправочника.ГруппаИмущества, Истина);
	СТЧ.ДатаПринятияКУчетуРегл				= ПолучитьДату(СтруктураЭлементаСправочника.ДатаПринятияКУчетуРегл);
	СТЧ.ИнвентарныйНомерРегл    			= СтруктураЭлементаСправочника.ИнвентарныйНомер;
	СТЧ.МОЛ    								= ПолучитьМОЛ(СтруктураЭлементаСправочника.МОЛ);
	СТЧ.Подразделение						= ПолучитьПодразделение(СтруктураЭлементаСправочника.Подразделение, Объект.Организация);	
	
	СТЧ.СостояниеПринятияКУчетуРегл			= ПолучитьСпособПоступленияПринятКУчету();
	СТЧ.СпособПоступленияРегл				= Перечисления.СпособыПоступленияАктивов.Приобретение;
	
	СТЧ.СтоимостьДляВычисленияАмортизацииБУ = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтруктураЭлементаСправочника.СтоимостьДляВычисленияАмортизацииБУ);
	СТЧ.НакопленнаяАмортизацияБУ    		= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтруктураЭлементаСправочника.НакопленнаяАмортизацияБУ);
	
	СТЧ.ПервоначальнаяСтоимостьБУ   		= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтруктураЭлементаСправочника.ПервоначальнаяСтоимостьБУ);
	СТЧ.СпособНачисленияАмортизацииБУ 		= Перечисления.СпособыНачисленияАмортизацииОС.ПоНормеАО;
	
	СТЧ.СрокСлужбы 							= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтруктураЭлементаСправочника.СрокСлужбы);
	СТЧ.СчетУчета 							= ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтруктураЭлементаСправочника.СчетУчета);		
	СТЧ.СчетНачисленияАмортизацииБУ 		= ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтруктураЭлементаСправочника.СчетУчетаАмортизацииБУ);
	СТЧ.СпособыОтраженияРасходовПоАмортизации = ПолучитьСпособОтраженияРасходовПоАмортизации(Объект.Организация, СтруктураЭлементаСправочника.СчетНачисленияАмортизацииБУ);
	
	СТЧ.НормаАмортизации	    			= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтруктураЭлементаСправочника.НормаАмортизации);	
	СТЧ.КоэффициентАмортизации	    		= ?(ЗначениеЗаполнено(СТЧ.СрокСлужбы), Окр((12/СТЧ.СрокСлужбы) * 100, 2), 0);
	СТЧ.ЛиквидационнаяСтоимость    			= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтруктураЭлементаСправочника.ЛиквидационнаяСтоимость);
	
КонецПроцедуры // ()

&НаСервере
Функция ПолучитьДату(Строка)
	Если ТипЗнч(Строка) = ТИП("Дата") Тогда
		Возврат Строка;
	Иначе
		СтрДата = "00010101";
		МассивДатаВремя = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Строка, " ");
		Если МассивДатаВремя.Количество() > 1 Тогда
			Строка = МассивДатаВремя[0]; // Только дата ..
		КонецЕсли;
		Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Строка, "."); 
		Если Массив.Количество() = 3 Тогда
			СтрДата = СокрЛП(Массив[2])	+ СокрЛП(Массив[1]) + СокрЛП(Массив[0]);
		КонецЕсли;
		Дата = Дата(СтрДата);
		
		Возврат Дата;
	КонецЕсли; 
	
КонецФункции // ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТМЗ

&НаКлиенте
Процедура СтатусМБППриИзменении(Элемент)
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		ТекСтрока.СуммаИзноса = 0;
	КонецЦикла;
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ДЕНЕЖНЫЕ СРЕДСТВА

// Процедура - обработчик события ПриНачалеРедактирования табличной части.
//
&НаКлиенте
Процедура ДенежныеСредстваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;
	
КонецПроцедуры // ДенежныеСредстваПриНачалеРедактирования()

// Процедура - обработчик события ПриИзменении поля ввода БанковскийСчетКасса.
//
&НаКлиенте
Процедура ДенежныеСредстваБанковскийСчетКассаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеДенежныеСредстваБанковскийСчетКассаПриИзменении(СтрокаТабличнойЧасти.БанковскийСчетКасса);
	
	СтрокаТабличнойЧасти.ВалютаДенежныхСредств = СтруктураДанные.Валюта;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(
	СтрокаТабличнойЧасти.СуммаВал,
	СтрокаТабличнойЧасти.ВалютаДенежныхСредств,
	ДатаДокумента
	);
	
КонецПроцедуры // ДенежныеСредстваБанковскийСчетКассаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ВалютаДенежныхСредств
// в строке табличной части ДенежныеСредства.
// Осуществляет пересчет суммы по сумме (вал.) в строке табличной части.
//
&НаКлиенте
Процедура ДенежныеСредстваВалютаДенежныхСредствПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
	СтрокаТабличнойЧасти.ВалютаДенежныхСредств,
	ДатаДокумента);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаВал
// в строке табличной части ДенежныеСредства.
// Осуществляет пересчет суммы по сумме (вал.) в строке табличной части.
//
&НаКлиенте
Процедура ДенежныеСредстваСуммаВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
	СтрокаТабличнойЧасти.ВалютаДенежныхСредств,
	ДатаДокумента);
	
КонецПроцедуры // ДенежныеСредстваСуммаВалПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода ВалютаДенежныхСредств.
// Табличной части ДенежныеСредства.
//
&НаКлиенте
Процедура ДенежныеСредстваВалютаДенежныхСредствНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;
	
	// Если тип денежных средств изменился, необходимо выполнить соответствующие действия.
	Если ТипЗнч(СтрокаТабличнойЧасти.БанковскийСчетКасса) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		ПоказатьПредупреждение(Неопределено,НСТР("ru='Для банковского счета нельзя изменить валюту денежных средств!'"));
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры // ДенежныеСредстваВалютаДенежныхСредствНачалоВыбора()

&НаКлиенте
Процедура ТМЗПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ТМЗСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТМЗ.ТекущиеДанные;
	Если НЕ СтрокаТабличнойЧасти = Неопределено Тогда
		ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОССчетУчетаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	СтрокаТабличнойЧасти.СчетНачисленияАмортизацииБУ = ПарныйСчет(СтрокаТабличнойЧасти.СчетУчета)
КонецПроцедуры

&НаКлиенте
Процедура ОСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрочее

// Процедура - обработчик события ПриНачалеРедактирования табличной части "Прочее".
//
&НаКлиенте
Процедура ПрочееПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
		СтрокаТабличнойЧасти.ВидСальдо = "СальдоДт";
		СтрокаТабличнойЧасти.Валюта = ВалютаРегламентированногоУчета;
		СтрокаТабличнойЧасти.Курс = 1;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ПрочееВалютнаяСуммаПриИзменении(Элемент)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуВСтроке(СтрокаТабличнойЧасти);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Валюта.
//
&НаКлиенте
Процедура ПрочееВалютаПриИзменении(Элемент)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Курс = ПолучитьКурсВалюты(СтрокаТабличнойЧасти.Валюта, ДатаДокумента); 
	
	РассчитатьСуммуВСтроке(СтрокаТабличнойЧасти);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Курс.
//
&НаКлиенте
Процедура ПрочееКурсПриИзменении(Элемент)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуВСтроке(СтрокаТабличнойЧасти);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СчетУчета.
//
&НаКлиенте
Процедура ПрочееСчетУчетаПриИзменении(Элемент)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "Субконто1", "Субконто2", "Субконто3");

	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетУчета, СтрокаТабличнойЧасти, ПоляОбъекта, Истина);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетУчета");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Субконто.
// 
&НаКлиенте
Процедура ПрочееСубконто1ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетУчета");
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Субконто.
// 
&НаКлиенте
Процедура ПрочееСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "Субконто", 1, "СчетУчета", СтрокаТабличнойЧасти, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Субконто.
// 
&НаКлиенте
Процедура ПрочееСубконто2ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетУчета");
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Субконто.
// 
&НаКлиенте
Процедура ПрочееСубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "Субконто", 2, "СчетУчета", СтрокаТабличнойЧасти, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Субконто.
// 
&НаКлиенте
Процедура ПрочееСубконто3ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетУчета");
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Субконто.
// 
&НаКлиенте
Процедура ПрочееСубконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "Субконто", 3, "СчетУчета", СтрокаТабличнойЧасти, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПроцедурыИФункцииСубконто

// Процедура - Изменить параметры выбора полей субконто
//
// Параметры:
//  Форма	 - 	 - 
//  Суффикс	 - 	 - 
//  ИмяСчета - 	 - 
&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Форма.Элементы.Прочее.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, "Субконто" + Суффикс + "%Индекс%", "ПрочееСубконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета",   ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", ДанныеОбъекта.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	БухгалтерскийУчетКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти
