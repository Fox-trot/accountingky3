#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьПредварительныйКонтрольСчета(Отказ)  	
	Если СтатусМБП = Перечисления.СтатусыМБП.Эксплуатация
		И СчетУчета.ПарныйСчет.Пустая()
		И Товары.Итог("СуммаИзноса")<> 0 Тогда  		
		ТекстСообщения = НСтр("ru = 'Не задан парный счет для МБП!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.СчетУчета",,Отказ)	
	КонецЕсли;	
КонецПроцедуры

// Выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки,
		|	ТаблицаДокумента.ОсновноеСредство,
		|	ТаблицаДокумента.СпособНачисленияАмортизацииБУ,
		|	ТаблицаДокумента.СрокСлужбы
		|ПОМЕСТИТЬ ВременнаяТаблицаОС
		|ИЗ
		|	&ВременнаяТаблицаОС КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОС.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаОС.ОсновноеСредство
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|ГДЕ
		|	ВременнаяТаблицаОС.СпособНачисленияАмортизацииБУ = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Линейный)
		|	И ВременнаяТаблицаОС.СрокСлужбы = 0
		|	И &РазделУчетаОсновныеСредства
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Запрос.УстановитьПараметр("РазделУчетаОсновныеСредства", РазделУчета = "ОсновныеСредства");
	Запрос.УстановитьПараметр("ВременнаяТаблицаОС", ОС.Выгрузить());
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Линейный способ- должен быть указан срок службы.
	Если НЕ МассивРезультатов[1].Пустой() Тогда
		ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена колонка ""Срок службы"" в строке %1 списка ""ОС"".'"), 
							ВыборкаИзРезультатаЗапроса.НомерСтроки);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				"ОС",
				ВыборкаИзРезультатаЗапроса.НомерСтроки,
				"СрокСлужбы",
				Отказ);
		КонецЦикла;
	КонецЕсли;		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеОбъектов.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ДополнительныеСвойства.ДляПроведения.Вставить("СпособОценки", Перечисления.СпособыОценки.ПоСредней);
	
	// Инициализация данных документа.
	Документы.ВводНачальныхОстатков.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.	
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);		
	БухгалтерскийУчетСервер.ОтразитьПараметрыУчетаОС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСостоянияОС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьМестонахождениеОС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСобытияОС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСоставОС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьНалоговаяАмортизация(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьНалоговыеДекларации(ДополнительныеСвойства, Движения, Отказ); 
	БухгалтерскийУчетСервер.ОтразитьВзаиморасчетыССотрудниками(ДополнительныеСвойства, Движения, Отказ); 
	БухгалтерскийУчетСервер.ОтразитьСведенияОбИмуществе(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСведенияОТранспорте(ДополнительныеСвойства, Движения, Отказ);	
	
	Если СтатусМБП = ПредопределенноеЗначение("Перечисление.СтатусыМБП.Склад") ИЛИ СтатусМБП = ПредопределенноеЗначение("Перечисление.СтатусыМБП.Новый") Тогда
	   	БухгалтерскийУчетСервер.ОтразитьМБПСклад(ДополнительныеСвойства, Движения, Отказ)
	КонецЕсли; 
	
	Если СтатусМБП = ПредопределенноеЗначение("Перечисление.СтатусыМБП.Эксплуатация") Тогда
		 БухгалтерскийУчетСервер.ОтразитьМБПЭксплуатация(ДополнительныеСвойства, Движения, Отказ)
	КонецЕсли; 
	
	Если НЕ МБП И РазделУчета = "Товары" Тогда
	 	БухгалтерскийУчетСервер.ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ)
	КонецЕсли;		
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	Если РазделУчета = "Товары" Тогда
		Если СчетУчета = ПланыСчетов.Хозрасчетный.ЗапасныеЧасти Тогда
			ПроверяемыеРеквизиты.Добавить("Товары.СостояниеЗапчасти");
		КонецЕсли;
	Иначе	
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СчетУчета");
	КонецЕсли;	
	
	// Предварительный контроль
	ВыполнитьПредварительныйКонтрольСчета(Отказ);	
	
	// Предварительный контроль
	ВыполнитьПредварительныйКонтроль(Отказ);	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти

#КонецЕсли             