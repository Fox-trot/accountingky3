#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если Объект.КурсПрихода = 0 Тогда 
		Объект.КурсПрихода = 1;
	КонецЕсли;				
	Если Объект.КурсРасхода = 0 Тогда 
		Объект.КурсРасхода = 1;
	КонецЕсли;
		
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПоказатьКурсПрихода();
	ПоказатьКурсРасхода();	
	СформироватьНадписьКурсоваяРазница();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
	Объект.КурсПрихода 	= ПолучитьКурсВалюты(Объект.ВалютаПрихода, Объект.Дата);
	Объект.КурсРасхода 	= ПолучитьКурсВалюты(Объект.ВалютаРасхода, Объект.Дата);	
	
	ПересчетРасчетногоКурса();
	ПересчетКурсаОбмена();
	
	ПересчетСуммыПрихода();
	
	ПересчетКурсовойРазницы();
	ПоказатьКурсПрихода();
	ПоказатьКурсРасхода();
	ПересчетУчетнойСуммы();
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПриходРасчетныйСчет.
//
&НаКлиенте
Процедура ПриходРасчетныйСчетПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ПриходРасчетныйСчет) Тогда
		СтруктураРасчетныйСчет 	= РасчетныйСчетПриИзмененииНаСервере(Объект.ПриходРасчетныйСчет);
		Объект.СчетПрихода 		= СтруктураРасчетныйСчет.СчетУчета;
		Объект.ВалютаПрихода 	= СтруктураРасчетныйСчет.ВалютаДенежныхСредств;
	КонецЕсли;
		
	Объект.КурсПрихода 			= ПолучитьКурсВалюты(Объект.ВалютаПрихода, Объект.Дата);
	ПересчетРасчетногоКурса();
	ПересчетКурсаОбмена();
	ПересчетКурсовойРазницы();
	ПоказатьКурсПрихода();
	ПересчетУчетнойСуммы();
	ПересчетСуммыПрихода();
	
	ПроверкаПринадлежностиСчетовБанку();
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасходРасчетныйСчет.
//
&НаКлиенте
Процедура РасходРасчетныйСчетПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.РасходРасчетныйСчет) Тогда
		СтруктураРасчетныйСчет 	= РасчетныйСчетПриИзмененииНаСервере(Объект.РасходРасчетныйСчет);
		Объект.СчетРасхода 		= СтруктураРасчетныйСчет.СчетУчета;
		Объект.ВалютаРасхода 	= СтруктураРасчетныйСчет.ВалютаДенежныхСредств;
	КонецЕсли;

	Объект.КурсРасхода = ПолучитьКурсВалюты(Объект.ВалютаРасхода, Объект.Дата);
	ПересчетКурсаОбмена();
	ПересчетКурсовойРазницы();
	ПоказатьКурсРасхода();
	ПересчетУчетнойСуммы();
	ПересчетСуммыПрихода();
	
	ПроверкаПринадлежностиСчетовБанку();
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаПрихода.
//
&НаКлиенте
Процедура СуммаПриходаПриИзменении(Элемент)
	ПриИзмененииСуммы();
	ПересчетКурсовойРазницы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаРасхода.
//
&НаКлиенте
Процедура СуммаРасходаПриИзменении(Элемент)
	
	ПересчетСуммыПрихода();
	ПересчетУчетнойСуммы();
	ПересчетКурсовойРазницы();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода КурсОбмена.
//
&НаКлиенте
Процедура КурсОбменаПриИзменении(Элемент)
	
	Если Объект.КурсОбмена = 0 Тогда
		ПересчетКурсаОбмена();
	КонецЕсли;
	
	ПересчетСуммыПрихода();	
	ПересчетКурсовойРазницы();
	ПересчетРасчетногоКурса();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Пересчитать(Команда)
	КурсОбменаПриИзменении(Неопределено)
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	Элементы.ДекорацияВалютКурсПрихода.Видимость = НЕ (Объект.ВалютаПрихода = ВалютаРегламентированногоУчета ИЛИ Объект.ВалютаПрихода = Справочники.Валюты.ПустаяСсылка());
	Элементы.ДекорацияВалютКурсРасхода.Видимость = НЕ (Объект.ВалютаРасхода = ВалютаРегламентированногоУчета ИЛИ Объект.ВалютаРасхода = Справочники.Валюты.ПустаяСсылка());
	Элементы.ДекорацияЧислоКурсПрихода.Видимость = НЕ (Объект.ВалютаПрихода = ВалютаРегламентированногоУчета ИЛИ Объект.ВалютаПрихода = Справочники.Валюты.ПустаяСсылка());
	Элементы.ДекорацияЧислоКурсРасхода.Видимость = НЕ (Объект.ВалютаРасхода = ВалютаРегламентированногоУчета ИЛИ Объект.ВалютаРасхода = Справочники.Валюты.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(Объект.ВалютаПрихода) И ЗначениеЗаполнено(Объект.ВалютаРасхода)
		И Объект.ВалютаПрихода <> ВалютаРегламентированногоУчета И Объект.ВалютаРасхода <> ВалютаРегламентированногоУчета	Тогда
		Элементы.СуммаУчетная.Видимость = Истина;
		Элементы.ДекорацияВалютаУчетная.Видимость = Истина;
	Иначе
		Элементы.СуммаУчетная.Видимость = Ложь;
		Элементы.ДекорацияВалютаУчетная.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры 

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКодСчетаУчета(СчетУчета)

	Возврат СчетУчета.Код	

КонецФункции // ПолучитьКодСчетаУчета()

&НаСервереБезКонтекста
Функция ПолучитьНаименованиеВалюты(Валюта)

	Возврат Валюта.Наименование	

КонецФункции // ПолучитьКодСчетаУчета()

// См. РаботаСКурсамиВалют.ПолучитьКурсВалюты.
&НаСервереБезКонтекста
Функция ПолучитьКурсВалюты(Валюта, Дата)
	КурсСтруктура 	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Дата);
	Возврат КурсСтруктура.Курс;		
КонецФункции // ()

&НаКлиенте
Процедура СформироватьНадписьКурсоваяРазница()
	
	Если Объект.ПрямойКурс Тогда
		Текст1 = "" + Объект.ВалютаРасхода + "/" + Объект.ВалютаПрихода + "  ";				
	Иначе
	    Текст1 = "" + Объект.ВалютаПрихода + "/" + Объект.ВалютаРасхода + "  ";
	КонецЕсли;
	
	Элементы.ВалютыКР.Заголовок = Текст1;
		
	СуммаУчетнаяПрихода = Окр(Объект.СуммаПрихода * Объект.КурсПрихода, 2);
	СуммаУчетнаяРасхода = Окр(Объект.СуммаРасхода * Объект.КурсРасхода, 2);
	КурсПрихода = Объект.КурсПрихода;
	КурсРасхода = Объект.КурсРасхода;
	СчетПрихода = Объект.СчетПрихода;
	СчетРасхода = Объект.СчетРасхода;
		
	КодСчетаПрихода = ПолучитьКодСчетаУчета(СчетПрихода);	
	КодСчетаРасхода = ПолучитьКодСчетаУчета(СчетРасхода);
	
	СуммаКурсовойРазницы = СуммаУчетнаяПрихода - СуммаУчетнаяРасхода;
	Если Объект.КурсОбмена = Объект.КросскурсНБКР Тогда
		СуммаКурсовойРазницы = 0;
		Если НЕ Объект.СуммаКР = 0 Тогда
			Объект.СуммаКР = 0;
		КонецЕсли;
	ИначеЕсли НЕ СуммаКурсовойРазницы = Объект.СуммаКР Тогда
		Объект.СуммаКР 	= СуммаКурсовойРазницы;
	КонецЕсли;
	
	// Нет курсовой разницы
	Если СуммаКурсовойРазницы = 0 Тогда
		Текст2 = "";	
		
	// Расход валюты, убыток
	ИначеЕсли НЕ СчетУчетаВалютный(СчетПрихода) И СчетУчетаВалютный(СчетРасхода) И СуммаКурсовойРазницы < 0 Тогда
		Текст2 = "Убыток";
		
		// Расход валюты, доход		
	ИначеЕсли НЕ СчетУчетаВалютный(СчетПрихода) И СчетУчетаВалютный(СчетРасхода) И СуммаКурсовойРазницы > 0 Тогда
		Текст2 = "Доход";	
		
		// Приход валюты, убыток	
	ИначеЕсли СчетУчетаВалютный(СчетПрихода) И НЕ СчетУчетаВалютный(СчетРасхода) И СуммаКурсовойРазницы < 0 Тогда
		Текст2 = "Убыток";		
		
		// Приход валюты, доход	
	ИначеЕсли СчетУчетаВалютный(СчетПрихода) И НЕ СчетУчетаВалютный(СчетРасхода) И СуммаКурсовойРазницы > 0 Тогда
		Текст2 = "Доход";
		
		// Валюта - Валюта, убыток	
	ИначеЕсли СчетУчетаВалютный(СчетПрихода) И СчетУчетаВалютный(СчетРасхода) И СуммаКурсовойРазницы < 0 Тогда
		Текст2 = "Убыток";			
		
		// Валюта - Валюта, доход		
	ИначеЕсли СчетУчетаВалютный(СчетПрихода) И СчетУчетаВалютный(СчетРасхода) И СуммаКурсовойРазницы > 0 Тогда
		Текст2 = "Доход";			
		
	Иначе
		Текст2 = "";
	КонецЕсли;
	
	Если Текст2 = "" Тогда
		Текст3 = "";
		Элементы.КурсоваяРазница.Заголовок = "";
	Иначе
		Текст3 = СтрШаблон(НСтр("ru = '%1 - %2 = %3'"), СуммаУчетнаяПрихода, СуммаУчетнаяРасхода, СуммаКурсовойРазницы);
		Элементы.КурсоваяРазница.Заголовок = СтрШаблон(НСтр("ru = 'Операционная КР: %1 %2'"), Текст2, Текст3); 
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СчетУчетаВалютный(СчетУчета)	
	Возврат СчетУчета.Валютный;	
КонецФункции

&НаСервереБезКонтекста
Функция РасчетныйСчетПриИзмененииНаСервере(РасчетныйСчет)
	СтруктураРасчетныйСчет = Новый Структура;
	СтруктураРасчетныйСчет.Вставить("СчетУчета", 				РасчетныйСчет.СчетУчета);
	СтруктураРасчетныйСчет.Вставить("ВалютаДенежныхСредств", 	РасчетныйСчет.ВалютаДенежныхСредств);
	Возврат СтруктураРасчетныйСчет;
	
КонецФункции

&НаКлиенте
Процедура ПересчетКурсаОбмена()
	Если Объект.КурсРасхода >= Объект.КурсПрихода Тогда
		Объект.ПрямойКурс 		= Ложь;	
		Объект.КурсОбмена 		= Окр(Объект.КурсРасхода / Объект.КурсПрихода, 4);
		Объект.КросскурсНБКР 	= Объект.КурсОбмена;
	Иначе	
		Объект.ПрямойКурс 		= Истина;	
		Объект.КурсОбмена 		= Окр(Объект.КурсПрихода / Объект.КурсРасхода, 4);
		Объект.КросскурсНБКР 	= Объект.КурсОбмена;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПересчетКурсовойРазницы()

	Объект.СуммаКР = Объект.СуммаПрихода * Объект.КурсПрихода - Объект.СуммаРасхода * Объект.КурсРасхода;
	СформироватьНадписьКурсоваяРазница();

КонецПроцедуры // ПересчетКурсовойРазницы()

&НаКлиенте
Процедура ПоказатьКурсПрихода()

	Если ЗначениеЗаполнено(Объект.ВалютаПрихода) И ЗначениеЗаполнено(Объект.КурсПрихода) Тогда
		Элементы.ДекорацияЧислоКурсПрихода.Заголовок = Строка(Объект.КурсПрихода);
		Элементы.ДекорацияВалютКурсПрихода.Заголовок = " сом/" + ПолучитьНаименованиеВалюты(Объект.ВалютаПрихода);
	КонецЕсли;

КонецПроцедуры // ПоказатьКурсПрихода()

&НаКлиенте
Процедура ПоказатьКурсРасхода()

	Если ЗначениеЗаполнено(Объект.ВалютаРасхода) И ЗначениеЗаполнено(Объект.КурсРасхода) Тогда
		Элементы.ДекорацияЧислоКурсРасхода.Заголовок = Строка(Объект.КурсРасхода);
		Элементы.ДекорацияВалютКурсРасхода.Заголовок = " сом/" + ПолучитьНаименованиеВалюты(Объект.ВалютаРасхода);
	КонецЕсли;

КонецПроцедуры // ПоказатьКурсПрихода()

&НаКлиенте
Процедура ПриИзмененииСуммы()
	Если Объект.СуммаПрихода > Объект.СуммаРасхода Тогда
		Если ЗначениеЗаполнено(Объект.СуммаРасхода) Тогда
			Объект.КурсОбмена = Окр(Объект.СуммаПрихода / Объект.СуммаРасхода, 2);
		КонецЕсли;		
	Иначе
		Если ЗначениеЗаполнено(Объект.СуммаПрихода) Тогда
			Объект.КурсОбмена = Окр(Объект.СуммаРасхода / Объект.СуммаПрихода, 2);
		КонецЕсли;		
	КонецЕсли;
	ПересчетРасчетногоКурса();
КонецПроцедуры // ПриИзмененииСуммы()

&НаКлиенте
Процедура ПересчетРасчетногоКурса()
	Если Объект.СуммаПрихода = 0 Тогда
		Объект.КурсРасчетный = 0;	
	Иначе
		Объект.КурсРасчетный = Окр(Объект.СуммаРасхода * Объект.КурсРасхода / Объект.СуммаПрихода, 4);	
	КонецЕсли;		
	ПоказатьКурсПрихода();
	
КонецПроцедуры // ПересчетРасчетногоКурса()

&НаКлиенте
Процедура ПересчетУчетнойСуммы()

	Если ЗначениеЗаполнено(Объект.ВалютаПрихода) И ЗначениеЗаполнено(Объект.ВалютаРасхода)
		И Объект.ВалютаПрихода <> ВалютаРегламентированногоУчета И Объект.ВалютаРасхода <> ВалютаРегламентированногоУчета	Тогда
		Объект.СуммаУчетная = Объект.СуммаРасхода * Объект.КурсРасхода;	
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПересчетСуммыПрихода();

	Если Объект.СуммаРасхода > 0 Тогда
		Если Объект.ВалютаРасхода = ВалютаРегламентированногоУчета И НЕ Объект.ВалютаПрихода = ВалютаРегламентированногоУчета Тогда
			Объект.СуммаПрихода = Объект.СуммаРасхода / Объект.КурсОбмена;	
			
		ИначеЕсли НЕ Объект.ВалютаРасхода = ВалютаРегламентированногоУчета И Объект.ВалютаПрихода = ВалютаРегламентированногоУчета Тогда
		    Объект.СуммаПрихода = Объект.СуммаРасхода * Объект.КурсОбмена;
			
		ИначеЕсли НЕ Объект.ВалютаРасхода = ВалютаРегламентированногоУчета И НЕ Объект.ВалютаПрихода = ВалютаРегламентированногоУчета Тогда
			Если Объект.ПрямойКурс Тогда
			Объект.СуммаПрихода = Объект.СуммаРасхода / Объект.КурсОбмена;
		Иначе
			Объект.СуммаПрихода = Объект.СуммаРасхода * Объект.КурсОбмена;
		КонецЕсли;
			
		ИначеЕсли Объект.ВалютаРасхода = ВалютаРегламентированногоУчета И Объект.ВалютаПрихода = ВалютаРегламентированногоУчета Тогда
			Объект.СуммаПрихода = Объект.СуммаРасхода;		
		КонецЕсли;
		
	Иначе
		Объект.СуммаПрихода = 0;
		ПересчетКурсаОбмена();
		ПересчетКурсовойРазницы();
	КонецЕсли;		

КонецПроцедуры

&НаСервере
Процедура ПроверкаПринадлежностиСчетовБанку()

	Если ЗначениеЗаполнено(Объект.ПриходРасчетныйСчет) И ЗначениеЗаполнено(Объект.РасходРасчетныйСчет) Тогда
		Если Объект.ПриходРасчетныйСчет.Банк <> Объект.РасходРасчетныйСчет.Банк	Тогда
			ТекстСообщения = НСтр("ru = 'У выбранных счетов прихода и расхода разные банки.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,);	
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
