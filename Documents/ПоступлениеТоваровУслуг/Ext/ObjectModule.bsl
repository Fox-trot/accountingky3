#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Выполняет предварительный контроль.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	// Проверка ОС
	Если ОС.Количество() > 0  Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
			|	ТаблицаДокумента.ОсновноеСредство,
			|	ТаблицаДокумента.Сумма
			|ПОМЕСТИТЬ ТаблицаДокумента
			|ИЗ
			|	&ТаблицаДокумента КАК ТаблицаДокумента
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(ТаблицаДокумента1.НомерСтроки) КАК НомерСтроки,
			|	ТаблицаДокумента1.ОсновноеСредство
			|ИЗ
			|	ТаблицаДокумента КАК ТаблицаДокумента1
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокумента КАК ТаблицаДокумента2
			|		ПО ТаблицаДокумента1.НомерСтроки <> ТаблицаДокумента2.НомерСтроки
			|			И ТаблицаДокумента1.ОсновноеСредство = ТаблицаДокумента2.ОсновноеСредство
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаДокумента1.ОсновноеСредство
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
			|	ТаблицаДокумента.ОсновноеСредство,
			|	&МинимальнаяСтоимостьГруппыОС КАК МинимальнаяСтоимостьГруппыОС,
			|	ТаблицаДокумента.Сумма
			|ИЗ
			|	ТаблицаДокумента КАК ТаблицаДокумента
			|ГДЕ
			|	&МинимальнаяСтоимостьГруппыОС > 0
			|	И ТаблицаДокумента.Сумма < &МинимальнаяСтоимостьГруппыОС
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
			|	ТаблицаДокумента.ОсновноеСредство,
			|	СостоянияОССрезПоследних.Состояние
			|ИЗ
			|	ТаблицаДокумента КАК ТаблицаДокумента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОС.СрезПоследних(
			|				&Период,
			|				Организация = &Организация
			|					И ОсновноеСредство В
			|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|							ТаблицаДокумента.ОсновноеСредство
			|						ИЗ
			|							ТаблицаДокумента КАК ТаблицаДокумента)
			|					И НЕ Регистратор = &Ссылка) КАК СостоянияОССрезПоследних
			|		ПО ТаблицаДокумента.ОсновноеСредство = СостоянияОССрезПоследних.ОсновноеСредство
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		Запрос.УстановитьПараметр("ТаблицаДокумента", ОС);
		Запрос.УстановитьПараметр("Период", Дата);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("МинимальнаяСтоимостьГруппыОС", БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций(Дата, Организация).МинимальнаяСтоимостьГруппыОС);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		// Дубли строк ОС.
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
			Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Основное средство указывается повторно в строке %1 списка ""ОС"".'"), 
								ВыборкаИзРезультатаЗапроса.НомерСтроки);
				БухгалтерскийУчетСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					ТекстСообщения,
					"ОС",
					ВыборкаИзРезультатаЗапроса.НомерСтроки,
					"ОсновноеСредство",
					Отказ);
			КонецЦикла;
		КонецЕсли;		
		
		// Проверка стоимости ОС.
		Если НЕ МассивРезультатов[2].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
			Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Стоимость основного средства: %1, не соответствует сумме первоначальных стоимостей основных средств: %2, строка %3 списка ""ОС"".'"), 
					ВыборкаИзРезультатаЗапроса.Сумма,
					ВыборкаИзРезультатаЗапроса.МинимальнаяСтоимостьГруппыОС,
					ВыборкаИзРезультатаЗапроса.НомерСтроки);
					
				БухгалтерскийУчетСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					ТекстСообщения,
					"ОС",
					ВыборкаИзРезультатаЗапроса.НомерСтроки,
					"Сумма",
					Отказ);
			КонецЦикла;
		КонецЕсли;	
		
		// Проверка состояния ОС.
		Если НЕ МассивРезультатов[3].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[3].Выбрать();
			Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Для основного средства ""%1"", указанного в строке %2 списка ""ОС"", текущее состояние ""%3"".'"), 
					ВыборкаИзРезультатаЗапроса.ОсновноеСредство,
					ВыборкаИзРезультатаЗапроса.НомерСтроки,
					ВыборкаИзРезультатаЗапроса.Состояние);
					
				БухгалтерскийУчетСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					ТекстСообщения,
					"ОС",
					ВыборкаИзРезультатаЗапроса.НомерСтроки,
					"ОсновноеСредство",
					Отказ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры // ВыполнитьПредварительныйКонтроль()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

Процедура РаспределитьПоКорректировке() Экспорт

	Сумма_Товары 	= Товары.Итог("СуммаСФ");
	Сумма_Услуги 	= Услуги.Итог("СуммаСФ");
	Сумма_ОС 		= ОС.Итог("СуммаСФ");
	
	МассивСуммИтого	= Новый Массив;
	МассивСуммИтого.Добавить(Сумма_Товары);
	МассивСуммИтого.Добавить(Сумма_Услуги);
	МассивСуммИтого.Добавить(Сумма_ОС);
	
	СуммыНДСТабличныхЧастей	= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаНДС, МассивСуммИтого, 2);
	Если НЕ СуммыНДСТабличныхЧастей = Неопределено Тогда
		СуммаНДС_Товары = СуммыНДСТабличныхЧастей[0];
		СуммаНДС_Услуги = СуммыНДСТабличныхЧастей[1];
		СуммаНДС_ОС 	= СуммыНДСТабличныхЧастей[2];	
	Иначе	
		СуммаНДС_Товары = 0;
		СуммаНДС_Услуги = 0;
		СуммаНДС_ОС 	= 0;	
	КонецЕсли;
	
	СуммыНСПТабличныхЧастей	= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаНСП, МассивСуммИтого, 2);
	Если НЕ СуммыНСПТабличныхЧастей = Неопределено Тогда
		СуммаНСП_Товары = СуммыНСПТабличныхЧастей[0];
		СуммаНСП_Услуги = СуммыНСПТабличныхЧастей[1];
		СуммаНСП_ОС 	= СуммыНСПТабличныхЧастей[2];	
	Иначе	
		СуммаНСП_Товары = 0;
		СуммаНСП_Услуги = 0;
		СуммаНСП_ОС 	= 0;		
	КонецЕсли;
	
	// Товары
	КоэффициентыРаспределения = Товары.ВыгрузитьКолонку("СуммаСФ");
	РезультатРаспределенияНДС = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаНДС_Товары, КоэффициентыРаспределения, 2);
	РезультатРаспределенияНСП = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаНСП_Товары, КоэффициентыРаспределения, 2);
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Индекс = СтрокаТабличнойЧасти.НомерСтроки - 1;
	    СтрокаТабличнойЧасти.СуммаНДС 	= ?(РезультатРаспределенияНДС = Неопределено, 0, РезультатРаспределенияНДС[Индекс]);
		СтрокаТабличнойЧасти.СуммаНСП 	= ?(РезультатРаспределенияНСП = Неопределено, 0, РезультатРаспределенияНСП[Индекс]);
		СтрокаТабличнойЧасти.Всего 		= СтрокаТабличнойЧасти.СуммаСФ + СтрокаТабличнойЧасти.СуммаНСП;
		СтрокаТабличнойЧасти.Сумма 		= СтрокаТабличнойЧасти.СуммаСФ + СтрокаТабличнойЧасти.СуммаНСП - СтрокаТабличнойЧасти.СуммаНДС;
		СтрокаТабличнойЧасти.Цена 		= ?(СтрокаТабличнойЧасти.Количество = 0, 0, Окр(СтрокаТабличнойЧасти.Сумма/СтрокаТабличнойЧасти.Количество, 2));
	КонецЦикла;
	
	// Услуги
	КоэффициентыРаспределения = Услуги.ВыгрузитьКолонку("СуммаСФ");
	РезультатРаспределенияНДС = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаНДС_Услуги, КоэффициентыРаспределения, 2);
	РезультатРаспределенияНСП = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаНСП_Услуги, КоэффициентыРаспределения, 2);
	Для каждого СтрокаТабличнойЧасти Из Услуги Цикл
		Индекс = СтрокаТабличнойЧасти.НомерСтроки - 1;
	    СтрокаТабличнойЧасти.СуммаНДС 	= ?(РезультатРаспределенияНДС = Неопределено, 0, РезультатРаспределенияНДС[Индекс]);
		СтрокаТабличнойЧасти.СуммаНСП 	= ?(РезультатРаспределенияНСП = Неопределено, 0, РезультатРаспределенияНСП[Индекс]);
		СтрокаТабличнойЧасти.Всего 		= СтрокаТабличнойЧасти.СуммаСФ + СтрокаТабличнойЧасти.СуммаНСП;
		СтрокаТабличнойЧасти.Сумма 		= СтрокаТабличнойЧасти.СуммаСФ + СтрокаТабличнойЧасти.СуммаНСП - СтрокаТабличнойЧасти.СуммаНДС;
		СтрокаТабличнойЧасти.Цена 		= ?(СтрокаТабличнойЧасти.Количество = 0, СтрокаТабличнойЧасти.Сумма, Окр(СтрокаТабличнойЧасти.Сумма/СтрокаТабличнойЧасти.Количество, 2));
	КонецЦикла;
	
	// ОС
	КоэффициентыРаспределения = ОС.ВыгрузитьКолонку("СуммаСФ");
	РезультатРаспределенияНДС = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаНДС_ОС, КоэффициентыРаспределения, 2);
	РезультатРаспределенияНСП = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаНСП_ОС, КоэффициентыРаспределения, 2);
	Для каждого СтрокаТабличнойЧасти Из ОС Цикл
		Индекс = СтрокаТабличнойЧасти.НомерСтроки - 1;
	    СтрокаТабличнойЧасти.СуммаНДС 	= ?(РезультатРаспределенияНДС = Неопределено, 0, РезультатРаспределенияНДС[Индекс]);
		СтрокаТабличнойЧасти.СуммаНСП 	= ?(РезультатРаспределенияНСП = Неопределено, 0, РезультатРаспределенияНСП[Индекс]);
		СтрокаТабличнойЧасти.Всего 		= СтрокаТабличнойЧасти.СуммаСФ + СтрокаТабличнойЧасти.СуммаНСП;
		СтрокаТабличнойЧасти.Сумма 		= СтрокаТабличнойЧасти.СуммаСФ + СтрокаТабличнойЧасти.СуммаНСП - СтрокаТабличнойЧасти.СуммаНДС;		
	КонецЦикла;
	
КонецПроцедуры

Процедура РаспределитьАкциз(Параметры) Экспорт
	ДатаДокумента 		= Параметры.ДатаДокумента;
	ВидРаспределения 	= Параметры.ВидРаспределения;
	СуммаВключаетНалоги = ДоговорКонтрагента.СуммаВключаетНалоги;
	Если ВидРаспределения = "По сумме" Тогда
		ИмяКолонки = "СуммаСФ";
	ИначеЕсли ВидРаспределения = "По количеству" Тогда
		ИмяКолонки = "Количество";	
	ИначеЕсли ВидРаспределения = "По весу" Тогда
		ИмяКолонки = "Вес";	
	Иначе
		Возврат;
	КонецЕсли;
	
	СуммыВКолонкеТовары = Товары.ВыгрузитьКолонку(ИмяКолонки);
	СуммыВКолонкеУслуги = Услуги.ВыгрузитьКолонку("СуммаСФ");
	СуммыВКолонкеОС 	= ОС.ВыгрузитьКолонку(?(ВидРаспределения = "По количеству", "СуммаСФ", ИмяКолонки));
	Если ВидРаспределения = "По количеству" Тогда
		Для Счетчик = 0 По СуммыВКолонкеОС.Количество() - 1 Цикл
			СуммыВКолонкеОС[Счетчик] = 1;
		КонецЦикла;  		
	КонецЕсли;
	ТоварыИтогСумма 	= Товары.Итог(ИмяКолонки);
	УслугиИтогСумма 	= Услуги.Итог(ИмяКолонки);
	ОСИтогСумма     	= ?(ВидРаспределения = "По количеству", СуммыВКолонкеОС.Количество(), ОС.Итог(ИмяКолонки));
	
	МассивОбщихСумм = Новый Массив;
	МассивОбщихСумм.Добавить(ТоварыИтогСумма);
	МассивОбщихСумм.Добавить(УслугиИтогСумма);
	МассивОбщихСумм.Добавить(ОСИтогСумма);
	
	МассивРаспределениеМеждуТабличнымиЧастями = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаАкциза, МассивОбщихСумм, 2);
	Если МассивРаспределениеМеждуТабличнымиЧастями = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СуммаАкцизаТовары 						= МассивРаспределениеМеждуТабличнымиЧастями[0];
	СуммаАкцизаУслуги 						= МассивРаспределениеМеждуТабличнымиЧастями[1];
	СуммаАкцизаОС 							= МассивРаспределениеМеждуТабличнымиЧастями[2];	
	МассивСуммРаспределенияТовары				= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаАкцизаТовары, СуммыВКолонкеТовары, 2);
	МассивСуммРаспределенияУслуги				= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаАкцизаУслуги, СуммыВКолонкеУслуги, 2);
	МассивСуммРаспределенияОС					= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаАкцизаОС, СуммыВКолонкеОС, 2);
	
	Если МассивСуммРаспределенияТовары <> Неопределено Тогда
		Для каждого СтрокаТабличнойЧасти Из Товары Цикл
			СтрокаТабличнойЧасти.СуммаАкциза 	= МассивСуммРаспределенияТовары[СтрокаТабличнойЧасти.НомерСтроки - 1];	
			СтрокаТабличнойЧасти.БазаНДС 		= СтрокаТабличнойЧасти.СуммаСФ + СтрокаТабличнойЧасти.СуммаАкциза;
			ЗначСтавкиНДС = БухгалтерскийУчетСервер.ПолучитьСтавкуНДС(ДатаДокумента, СтрокаТабличнойЧасти.СтавкаНДС).Ставка;
		    Если СуммаВключаетНалоги Тогда
				СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.БазаНДС * ЗначСтавкиНДС / (100 + ЗначСтавкиНДС);
			Иначе
				СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.БазаНДС * ЗначСтавкиНДС / 100;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если МассивСуммРаспределенияУслуги <> Неопределено Тогда
		Для каждого СтрокаТабличнойЧасти Из Услуги Цикл
			СтрокаТабличнойЧасти.СуммаАкциза 	= МассивСуммРаспределенияУслуги[СтрокаТабличнойЧасти.НомерСтроки - 1];	
			СтрокаТабличнойЧасти.БазаНДС 		= СтрокаТабличнойЧасти.СуммаСФ + СтрокаТабличнойЧасти.СуммаАкциза;
			ЗначСтавкиНДС = БухгалтерскийУчетСервер.ПолучитьСтавкуНДС(Дата, СтрокаТабличнойЧасти.СтавкаНДС).Ставка;
		    Если СуммаВключаетНалоги Тогда
				СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.БазаНДС * ЗначСтавкиНДС / (100 + ЗначСтавкиНДС);
			Иначе
				СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.БазаНДС * ЗначСтавкиНДС / 100;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	Если МассивСуммРаспределенияОС <> Неопределено Тогда
		Для каждого СтрокаТабличнойЧасти Из ОС Цикл
			СтрокаТабличнойЧасти.СуммаАкциза 	= МассивСуммРаспределенияОС[СтрокаТабличнойЧасти.НомерСтроки - 1];	
			СтрокаТабличнойЧасти.БазаНДС 		= СтрокаТабличнойЧасти.СуммаСФ + СтрокаТабличнойЧасти.СуммаАкциза;
			ЗначСтавкиНДС = БухгалтерскийУчетСервер.ПолучитьСтавкуНДС(Дата, СтрокаТабличнойЧасти.СтавкаНДС).Ставка;
		    Если СуммаВключаетНалоги Тогда
				СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.БазаНДС * ЗначСтавкиНДС / (100 + ЗначСтавкиНДС);
			Иначе
				СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.БазаНДС * ЗначСтавкиНДС / 100;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	МассивКоэффИзТрехМассивов = Новый Массив;
	Для каждого Эл Из СуммыВКолонкеТовары Цикл
		МассивКоэффИзТрехМассивов.Добавить(Эл);	
	КонецЦикла;
	Для каждого Эл Из СуммыВКолонкеУслуги Цикл
		МассивКоэффИзТрехМассивов.Добавить(Эл);	
	КонецЦикла;	
	Для каждого Эл Из СуммыВКолонкеОС Цикл
		МассивКоэффИзТрехМассивов.Добавить(Эл);	
	КонецЦикла;
	
	ОбщийМассивКоэффРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(100, МассивКоэффИзТрехМассивов, 2);
	
	МассивКоэффРаспределенияТовары = Новый Массив;
	Для Счетчик = 0 По Товары.Количество() - 1 Цикл
		МассивКоэффРаспределенияТовары.Добавить(ОбщийМассивКоэффРаспределения[Счетчик]);
	КонецЦикла;
	
	МассивКоэффРаспределенияУслуги = Новый Массив;
	Для Счетчик = Товары.Количество() По Услуги.Количество() - 1 Цикл
		МассивКоэффРаспределенияУслуги.Добавить(ОбщийМассивКоэффРаспределения[Счетчик]);
	КонецЦикла;
	
	МассивКоэффРаспределенияОС = Новый Массив;
	Для Счетчик = Товары.Количество() + Услуги.Количество() По ОбщийМассивКоэффРаспределения.Количество() - 1 Цикл
		МассивКоэффРаспределенияОС.Добавить(ОбщийМассивКоэффРаспределения[Счетчик]);
	КонецЦикла;
	
	Товары.ЗагрузитьКолонку(МассивКоэффРаспределенияТовары, "Коэффициент");
	Услуги.ЗагрузитьКолонку(МассивКоэффРаспределенияУслуги, "Коэффициент");
	ОС.ЗагрузитьКолонку(МассивКоэффРаспределенияОС, "Коэффициент");
	
КонецПроцедуры // РаспределитьТабЧастьРасходыПоСумме()

Функция ДанныеДоговораКонтрагента(ДатаДокумента, ДоговорКонтрагента, ВидОперации)
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	СтруктураДоговора = Новый Структура;
	СтруктураДоговора.Вставить("СтавкаНДС",	 	ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));	
	СтруктураДоговора.Вставить("СтавкаНСП", 	ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка"));
	СтруктураДоговора.Вставить("ЗначСтавкаНДС", 0);	
	СтруктураДоговора.Вставить("ЗначСтавкаНСП", 0);
	СтруктураДоговора.Вставить("СуммаВключаетНалоги", 	Ложь);
	СтруктураДоговора.Вставить("ВалютаРасчетов", 		ВалютаРегламентированногоУчета);
	
	ЗаполнитьЗначенияСвойств(СтруктураДоговора, ДоговорКонтрагента);
	СтруктураДоговора.Вставить("ЗначСтавкаНДС", БухгалтерскийУчетСервер.ПолучитьСтавкуНДСПоДоговору(ДатаДокумента, ДоговорКонтрагента));	
	СтруктураДоговора.Вставить("ЗначСтавкаНСП", БухгалтерскийУчетСервер.ПолучитьСтавкуНСППоДоговору(ДатаДокумента, ДоговорКонтрагента));
	
	Возврат СтруктураДоговора;
	
КонецФункции

Функция СобытиеОСПоступление()
	Событие = Справочники.СобытияОС.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СобытияОС.Ссылка КАК Событие 
		|ИЗ
		|	Справочник.СобытияОС КАК СобытияОС
		|ГДЕ
		|	СобытияОС.ВидСобытияОС = Значение(Перечисление.ВидыСобытийОС.Поступление)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Событие = ВыборкаДетальныеЗаписи.Событие;
	КонецЕсли;
	
	Возврат Событие;
	
КонецФункции // СобытиеОСПоступление()

#КонецОбласти

#Область ПроцедурыЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоДоверенности(ДанныеЗаполнения) Экспорт
	ЭтотОбъект.ДокументОснование = ДанныеЗаполнения;
	
	Контрагент = ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
	
	ОС.Очистить();
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.ОсновныеСредства Цикл
		НоваяСтрока = ОС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Товары.Очистить();
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ЗаполнениеОбъектов.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ИнвентаризацияОС") Тогда
		ВидОперации = Справочники.ОперацииПоступлениеТоваровУслуг.Оприходование;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ИнвентаризацияТоваров") Тогда
		ВидОперации = Справочники.ОперацииПоступлениеТоваровУслуг.Оприходование;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) ИЛИ Контрагент.СтранаРезидентства = ПредопределенноеЗначение("Справочник.СтраныМира.Киргизия") Тогда 
		ВидОперации = Справочники.ОперацииПоступлениеТоваровУслуг.Покупка 
	ИначеЕсли Контрагент.СтранаРезидентства.ЕАЭС Тогда
	 	ВидОперации = Справочники.ОперацииПоступлениеТоваровУслуг.ИмпортТС
	Иначе	
	    ВидОперации = Справочники.ОперацииПоступлениеТоваровУслуг.Импорт
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСФ) Тогда
		ДатаСФ = ТекущаяДата()
	КонецЕсли;
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) 
		И ЗначениеЗаполнено(ДоговорКонтрагента)
		И ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаРасчетов)Тогда
		ВалютаДокумента = ДоговорКонтрагента.ВалютаРасчетов;			
	Иначе	
		ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Курс) Тогда
		Курс = 1;
		Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
			КурсСтруктура	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()));
			Курс 			= КурсСтруктура.Курс;
		КонецЕсли;
	КонецЕсли;
	ДатаДокумента = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата());
	ДанныеДоговораКонтрагента = ДанныеДоговораКонтрагента(ДатаДокумента, ДоговорКонтрагента, ВидОперации);
	Если НЕ ЗначениеЗаполнено(СтавкаНДС) И ЗначениеЗаполнено(ДанныеДоговораКонтрагента.СтавкаНДС) Тогда
		СтавкаНДС 	= ДанныеДоговораКонтрагента.СтавкаНДС;
	КонецЕсли;
	
	СобытиеОС = СобытиеОСПоступление();
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма") + ОС.Итог("Сумма");
	
	Если НЕ ЗначениеЗаполнено(СерияБланкаСФ) 
		И НЕ НеВключатьВРеестрСФ
		И НЕ ВидОперации = Справочники.ОперацииПоступлениеТоваровУслуг.Импорт Тогда
		СерияБланкаСФ = "ДПБУ";	
		НомерБланкаСФ = Номер;
		ДатаСф = Дата;				
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	// Инициализация данных документа.
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ДополнительныеСвойства.ДляПроведения.Вставить("ОсновнойСпособОценкиЗапасов", Перечисления.СпособыОценки.ПоСредней);

	
	Документы.ПоступлениеТоваровУслуг.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьПоступления(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьПараметрыУчетаОС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСостоянияОС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСобытияОС(ДополнительныеСвойства, Движения, Отказ);	
	БухгалтерскийУчетСервер.ОтразитьМестонахождениеОС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьМБПСклад(ДополнительныеСвойства, Движения, Отказ);	
	БухгалтерскийУчетСервер.ОтразитьПоступленияИтоги(ДополнительныеСвойства, Движения, Отказ);
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если ОС.Количество() > 0 Тогда
		ПроверяемыеРеквизиты.Добавить("СобытиеОС");
	КонецЕсли;
	
	Если Товары.Количество() = 0
		И Услуги.Количество() = 0
		И ОС.Количество() = 0 Тогда	
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнен ни один список.'"),,,,	Отказ)		
	КонецЕсли;
	
	Если Товары.Количество() = 0 
		И ОС.Количество() = 0 Тогда
		БухгалтерскийУчетСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Склад");
	КонецЕсли;
	
	// Выполнение предварительного контроля.
	ВыполнитьПредварительныйКонтроль(Отказ);	
КонецПроцедуры

#КонецОбласти
	
#КонецЕсли