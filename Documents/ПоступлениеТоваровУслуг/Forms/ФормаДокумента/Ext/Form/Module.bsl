#Область ОбработчикиСлужебные

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервереБезКонтекста
Функция ДанныеДоговораКонтрагента(ДатаДокумента, ДоговорКонтрагента, ВидОперации)
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	СтруктураДоговора = Новый Структура;
	СтруктураДоговора.Вставить("СтавкаНДС",	 	ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));	
	СтруктураДоговора.Вставить("СтавкаНСП", 	ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка"));
	СтруктураДоговора.Вставить("ЗначСтавкаНДС", 0);	
	СтруктураДоговора.Вставить("ЗначСтавкаНСП", 0);
	СтруктураДоговора.Вставить("СуммаВключаетНалоги", 	Ложь);
	СтруктураДоговора.Вставить("ВалютаРасчетов", 		ВалютаРегламентированногоУчета);
	
	ЗаполнитьЗначенияСвойств(СтруктураДоговора, ДоговорКонтрагента);
	СтруктураДоговора.Вставить("ЗначСтавкаНДС", БухгалтерскийУчетСервер.ПолучитьСтавкуНДСПоДоговору(ДатаДокумента, ДоговорКонтрагента));	
	СтруктураДоговора.Вставить("ЗначСтавкаНСП", БухгалтерскийУчетСервер.ПолучитьСтавкуНСППоДоговору(ДатаДокумента, ДоговорКонтрагента));
	
	Возврат СтруктураДоговора;
	
КонецФункции // ()

&НаКлиенте
Процедура ПриИзмененииДоговораКонтрагента()
	
	// 1. Выборка счетов	
	// 2. Выборка значений ставок НДС/НСП
	УстановитьСчетаРасчетовСКонтрагентами();
		
	ДанныеДоговораКонтрагента 	= ДанныеДоговораКонтрагента(ДатаДокумента, Объект.ДоговорКонтрагента, ВидОперации);
	Объект.ВалютаДокумента 		= ДанныеДоговораКонтрагента.ВалютаРасчетов;
	Объект.СтавкаНДС 			= ДанныеДоговораКонтрагента.СтавкаНДС;
	УстановитьКурсВалютыДокумента(ДатаДокумента, Объект.ВалютаДокумента, Объект.Курс);
	
	ПересчитатьТабличныеЧасти(Истина);
	
	РассчитатьСуммыОбщие();
	Распределить();
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура Распределить()
	Если НЕ УПП.ПлательщикНДС ИЛИ НЕ Объект.КорректировкаСумм Тогда
		Возврат;	
	КонецЕсли;
		
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.РаспределитьПоКорректировке();
	ЗначениеВРеквизитФормы(Документ, "Объект")	
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьТабличныеЧасти(ДоговорИзменен = Ложь)
	ОперацияПокупка 		= (ВидОперации = ПредопределенноеЗначение("Справочник.ОперацииПоступлениеТоваровУслуг.Покупка"));
	ЕстьНДСПоставщика		= (ДанныеДоговораКонтрагента.СтавкаНДС <> ПредопределенноеЗначение("Справочник.СтавкиНДС.БезНДС"));
	ЕстьСФ 					= УПП.ПлательщикНДС И ОперацияПокупка И ЕстьНДСПоставщика;	
	Если ЕстьСФ Тогда
		Изменение = "СуммаСФ";
	Иначе
		Изменение = "Сумма";
	КонецЕсли;

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары", СтрокаТабличнойЧасти, ДоговорИзменен);
		ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, Изменение);
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСТЧ);	
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Услуги", СтрокаТабличнойЧасти, ДоговорИзменен);
		ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, Изменение);
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСТЧ);	
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл
		ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "ОС", СтрокаТабличнойЧасти, ДоговорИзменен);
		ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, Изменение);
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСТЧ);	
	КонецЦикла;
	
	РассчитатьСуммыОбщие();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДатыОрганизации()	
	УПП = БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций(Объект.Дата, Объект.Организация);
	ПриИзмененииДоговораКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, ИмяТЧ, СТЧ = Неопределено, ДоговорИзменен = Ложь)
	ДанныеДоговораКонтрагента = ДанныеДоговораКонтрагента(ДатаДокумента, Объект.ДоговорКонтрагента, ВидОперации); 
	ЗаполнитьЗначенияСвойств(ДанныеСТЧ, ?(СТЧ = Неопределено, Элементы[ИмяТЧ].ТекущиеДанные, СТЧ));
	ЗаполнитьЗначенияСвойств(ДанныеСТЧ, ДанныеДоговораКонтрагента,,?(ДоговорИзменен, "", "СтавкаНДС,СтавкаНСП"));
	ДанныеСТЧ.ЗначСтавкаНДС = БухгалтерскийУчетСервер.ПолучитьСтавкуНДС(ДатаДокумента, ДанныеСТЧ.СтавкаНДС).Ставка;
	ДанныеСТЧ.ЗначСтавкаНСП = БухгалтерскийУчетСервер.ПолучитьСтавкуНСП(ДатаДокумента, ДанныеСТЧ.СтавкаНДС, ДанныеСТЧ.СтавкаНСП).Ставка;
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, ДанныеДоговораКонтрагента);		
	ПараметрыОбъекта.ПлательщикНДС = УПП.ПлательщикНДС;
	ПараметрыОбъекта.ПлательщикНСП = УПП.ПлательщикНСП;	
КонецПроцедуры

// Процедура обработки строки ТЧ документов поступления ТМЗ, ОС и услуг
// Выборка цены производится только при установленном парамтре Заполнить цену 
// (при изменении номенклатуры)
&НаСервереБезКонтекста
Процедура ПриИзмененииНоменклатурыТЧ(ДанныеСТЧ, ПараметрыОбъекта)
	
	ОбработкаТабличныхЧастейВызовСервера.ЗаполнитьСчетУчетаСтрокиТабличнойЧасти(ДанныеСТЧ, ПараметрыОбъекта);
	// ОбработкаТабличныхЧастейВызовСервера.ЗаполнитьЦенуСтрокиТабличнойЧасти(ДанныеСТЧ, ПараметрыОбъекта);
	
	// Расчет по строке от цены-количества
	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "Цена");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьКурсВалютыДокумента(ДатаДокумента, ВалютаДокумента, Курс)

	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		Возврат;	
	КонецЕсли;
	КурсСтруктура	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	Курс 			= КурсСтруктура.Курс;	
	
КонецПроцедуры // УстановитьКурсВалютыДокумента()

&НаКлиенте
Процедура УстановитьСчетаРасчетовСКонтрагентами()
	
	Если ВидОперации = ПредопределенноеЗначение("Справочник.ОперацииПоступлениеТоваровУслуг.Оприходование") Тогда	
		
		Объект.СчетРасчетовПоставщика	= ПолучитьСчетУчетаПоОперации(ВидОперации);
	Иначе
		СтруктураДанные 				= Новый Структура("Организация, Контрагент, ДоговорКонтрагента", Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
		СчетаУчета = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(СтруктураДанные.Организация, СтруктураДанные.Контрагент, СтруктураДанные.ДоговорКонтрагента);
		Объект.СчетРасчетовПоставщика	= СчетаУчета.СчетРасчетовПоставщика;		
	КонецЕсли;
	

КонецПроцедуры // УстановитьСчетаРасчетовСКонтрагентами()

&НаСервереБезКонтекста
Функция ПолучитьСчетУчетаПоОперации(ВидОперации)

	Возврат ВидОперации.СчетУчета;	

КонецФункции // ()

&НаКлиенте
Процедура ИспользоватьДополнительныеЕдиницыИзмеренияПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыОбщие()
	
	Объект.Сумма 	= Объект.Товары.Итог("Сумма")  		+ Объект.Услуги.Итог("Сумма")  		+ Объект.ОС.Итог("Сумма");
	Объект.СуммаСФ 	= Объект.Товары.Итог("СуммаСФ")  	+ Объект.Услуги.Итог("СуммаСФ")  	+ Объект.ОС.Итог("СуммаСФ");
	Объект.СуммаНДС = Объект.Товары.Итог("СуммаНДС") 	+ Объект.Услуги.Итог("СуммаНДС") 	+ Объект.ОС.Итог("СуммаНДС");	
	Объект.СуммаНСП = Объект.Товары.Итог("СуммаНСП") 	+ Объект.Услуги.Итог("СуммаНСП") 	+ Объект.ОС.Итог("СуммаНСП");		
	Всего 			= Объект.Товары.Итог("Всего") 		+ Объект.Услуги.Итог("Всего") 		+ Объект.ОС.Итог("Всего");
		
КонецПроцедуры

&НаКлиенте
// Процедура очищает содержимое табличных частей и реквизитов в зависимости от вида операции.
//
Процедура ОчиститьТабличныеЧастиИРеквизиты()
	Если ВидОперации = ПредопределенноеЗначение("Справочник.ОперацииПоступлениеТоваровУслуг.Покупка") Тогда	
		Объект.Подотчетник = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Справочник.ОперацииПоступлениеТоваровУслуг.Импорт") Тогда
		Объект.Подотчетник = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		Объект.Услуги.Очистить();
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Справочник.ОперацииПоступлениеТоваровУслуг.Оприходование") Тогда
		Объект.Контрагент 			= ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		Объект.ДоговорКонтрагента 	= ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		Объект.Подотчетник = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		Объект.Услуги.Очистить();
		Объект.ОС.Очистить();
		
	КонецЕсли;
	
	// Установка Корректировки сумм
	ВидимостьКолонокСуммаСФ = УПП.ПлательщикНДС 
		И (ДанныеДоговораКонтрагента.СтавкаНДС <> ПредопределенноеЗначение("Справочник.СтавкиНДС.БезНДС")) 
		И НЕ Объект.НДСНеПодтвержден;
	Если Объект.КорректировкаСумм И Объект.КорректировкаСумм <> ВидимостьКолонокСуммаСФ Тогда
		Объект.КорректировкаСумм = ВидимостьКолонокСуммаСФ;
	КонецЕсли;
			
КонецПроцедуры // ОчиститьТабличныеЧастиИРеквизиты()    

&НаСервереБезКонтекста
Функция ЭтоВидСобытияПоступление(СобытиеОС)

	Возврат СобытиеОС.ВидСобытияОС = ПредопределенноеЗначение("Перечисление.ВидыСобытийОС.Поступление");	

КонецФункции // ЭтоВидСобытияСписание(СобытиеОС)()

//Установка доступности субконто для существующих строк табличной части
&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "Субконто1", "Субконто2", "Субконто3");
		
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл		
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СтрокаТабличнойЧасти.СчетУчета, СтрокаТабличнойЧасти, ПоляОбъекта, Истина);
		БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетУчета, СтрокаТабличнойЧасти, ПоляОбъекта, Истина);
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТабличнойЧасти, "Субконто" + "%Индекс%", "СчетУчета");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТабличнойЧасти, "Субконто" + "%Индекс%", "УслугиСубконто" + "%Индекс%", ПараметрыДокумента);			
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Изменить параметры выбора полей субконто
//
// Параметры:
//  Форма	 - 	 - 
//  Суффикс	 - 	 - 
//  ИмяСчета - 	 - 
&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета)
	// получаем текущую строку
	СтрокаТабличнойЧасти = Форма.Элементы.Услуги.ТекущиеДанные;
	
	// не удалось получить- возвращаемся
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, "Субконто" + Суффикс + "%Индекс%", "УслугиСубконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета",   ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", ДанныеОбъекта.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаСервереБезКонтекста
Функция СобытиеОСНаСервере(ИмяСобытияОС)

	Возврат Справочники.СобытияОС.НайтиПоНаименованию(ИмяСобытияОС);	

КонецФункции 

&НаСервере
Процедура УстановитьПараметрыВыбораСчетовУчета()
	// ТЧ ОС 	
	СчетаУчетаОС = БухгалтерскийУчетСервер.ПолучитьМассивСчетовУчетаПоВидуСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаУчетаОС)));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", Ложь));
	Элементы.ОССчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеИзВидОперации(ВидОперации)

	Структура = Новый Структура("СчетУчета, СтатьяДоходов", 
						ПланыСчетов.Хозрасчетный.ПустаяСсылка(),
						Справочники.СтатьиЗатратИДоходов.ПустаяСсылка());
	ЗаполнитьЗначенияСвойств(Структура, ВидОперации);
	
	Возврат Структура;

КонецФункции // ДанныеИзВидОперации(ВидОперации)()

&НаКлиенте
Процедура ВыполнитьКомандуРаспределитьАкциз(ВидРаспределения)

	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.СуммаАкциза) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена сумма акциза! Распределение отменено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.СуммаАкциза", , Отказ);
	КонецЕсли;	
	
	Если (Объект.Товары.Количество() + Объект.Услуги.Количество() + Объект.ОС.Количество()) = 0 Тогда
		ТекстСообщения = НСтр("ru = 'В табличных частях ""Товары"", ""Услуги"" и ""Основные средства"" нет записей! Распределение отменено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Товары", , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДатаДокумента", 		ДатаДокумента);
	ДополнительныеПараметры.Вставить("ВидРаспределения", 	ВидРаспределения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросРаспределитьАкциз", ЭтотОбъект, ДополнительныеПараметры);
	ТекстВопроса = НСтр("ru = 'Сумма услуг будет распределена! Продолжить выполнение операции?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	
КонецПроцедуры // ВыполнитьКомандуРаспределитьАкциз()

&НаСервере
Процедура РаспределитьАкцизНаСервере(СтруктураДанных)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.РаспределитьАкциз(СтруктураДанных);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидОперации()
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ВидОперации = ПредопределенноеЗначение("Справочник.ОперацииПоступлениеТоваровУслуг.ПустаяСсылка")	
	ИначеЕсли Контрагент = Объект.Контрагент Тогда
		Возврат;	
	КонецЕсли;
	
	ДанныеКонтрагента = СтранаРезидентстваКонтрагента(Объект.Контрагент);
	Если ДанныеКонтрагента.СтранаРезидентства = ПредопределенноеЗначение("Справочник.СтраныМира.Киргизия") Тогда 
		ВидОперации = ПредопределенноеЗначение("Справочник.ОперацииПоступлениеТоваровУслуг.Покупка") 
	ИначеЕсли ДанныеКонтрагента.ЕАЭС Тогда
	 	ВидОперации = ПредопределенноеЗначение("Справочник.ОперацииПоступлениеТоваровУслуг.ИмпортТС")
	Иначе	
	    ВидОперации = ПредопределенноеЗначение("Справочник.ОперацииПоступлениеТоваровУслуг.Импорт")
	КонецЕсли;
	
	Объект.ВидОперации = ВидОперации;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СтранаРезидентстваКонтрагента(Контрагент)
	ДанныеКонтрагента = Новый Структура("СтранаРезидентства, ЕАЭС", 
											Справочники.СтраныМира.ПустаяСсылка(), 
											Ложь);
											
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеКонтрагента.Вставить("СтранаРезидентства", Контрагент.СтранаРезидентства);	
		ДанныеКонтрагента.Вставить("ЕАЭС", Контрагент.СтранаРезидентства.ЕАЭС);	
	КонецЕсли;	
	
	Возврат ДанныеКонтрагента;
КонецФункции // ()

#КонецОбласти

#Область УправлениеВнешнимВидом

&НаКлиенте
// Процедура устанавливает видимость и доступность элементов.
//
Процедура УстановитьВидимостьДоступностьЭлементов()
	Объект.ДоступныНепринятые = Истина;
	// Есть СФ - плательщик НДС, Договор контрагента имеет ставку НДС, Операция Покупка
	ОперацияПокупка 		= (ВидОперации = ПредопределенноеЗначение("Справочник.ОперацииПоступлениеТоваровУслуг.Покупка"));
	ОперацияИмпорт			= (ВидОперации = ПредопределенноеЗначение("Справочник.ОперацииПоступлениеТоваровУслуг.Импорт"));
	ОперацияИмпортТС		= (ВидОперации = ПредопределенноеЗначение("Справочник.ОперацииПоступлениеТоваровУслуг.ИмпортТС"));
	ОперацияОприходование	= (ВидОперации = ПредопределенноеЗначение("Справочник.ОперацииПоступлениеТоваровУслуг.Оприходование"));
	
	ЭтоСтавкаДоговораБезНДС	= ЗначениеЗаполнено(ДанныеДоговораКонтрагента.СтавкаНДС) И (ДанныеДоговораКонтрагента.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.БезНДС"));
	
	ЕстьНДСПоставщика		= (ДанныеДоговораКонтрагента.СтавкаНДС <> ПредопределенноеЗначение("Справочник.СтавкиНДС.БезНДС"));
	ЕстьНСППоставщика		= ОперацияПокупка ИЛИ ОперацияИмпортТС;
	ПризнакЗачетаНДС		= УПП.ПлательщикНДС И УПП.УказыватьПризнакЗачетаНДСПриПоступлении;
	ПлательщикНДС			= УПП.ПлательщикНДС;
	ЕстьСФ 					= УПП.ПлательщикНДС 
								И (ОперацияПокупка ИЛИ ОперацияИмпортТС) 
								И ЕстьНДСПоставщика;

	ЕстьДокументОснование 	= Истина;
	ВалютныйДоговор			= НЕ Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	ВидимостьКолонокСуммаСФ = ПлательщикНДС И ЕстьНДСПоставщика И (ОперацияПокупка ИЛИ ОперацияИмпортТС);
	
	// Подвал
	Элементы.КорректировкаСумм.Видимость			= ВидимостьКолонокСуммаСФ;
	Элементы.СуммаНДС.Видимость  					= ВидимостьКолонокСуммаСФ;
	Элементы.СуммаНСП.Видимость  					= ВидимостьКолонокСуммаСФ;
	Элементы.СуммаСФ.Видимость 						= ВидимостьКолонокСуммаСФ;
	Элементы.Сумма.Видимость 						= НЕ ВидимостьКолонокСуммаСФ;
	
	Элементы.СуммаНДС.Доступность  					= Объект.КорректировкаСумм;
	Элементы.СуммаНСП.Доступность  					= Объект.КорректировкаСумм;	

	// Видимость реквизитов Шапки формы
	Элементы.Контрагент.Видимость         			= Истина;
	Элементы.Контрагент.Заголовок         			= "Поставщик";
	Элементы.ДоговорКонтрагента.Видимость			= Истина;
	Элементы.ДокументОснование.Видимость 			= Истина;
	Элементы.Склад.Видимость 						= Истина;
	Элементы.Подотчетник.Видимость					= Ложь;
	Элементы.СуммаАкциза.Видимость					= ОперацияИмпортТС; 
	Элементы.Всего.Видимость                        = ВидимостьКолонокСуммаСФ;
	Элементы.ВыводНомераВПФ.Видимость               = Ложь;
	
	// Видимость команд формы
	Элементы.ГруппаКомандыРаспределитьАкциз.Видимость = ОперацияИмпортТС; 
	
	// Видимость колонок табличной части "Товары"
	Элементы.ТоварыЕмкость.Видимость 				= Объект.ИспользоватьДополнительныеЕдиницыИзмерения;
	Элементы.ТоварыКоличествоМест.Видимость 		= Объект.ИспользоватьДополнительныеЕдиницыИзмерения;	
	Элементы.ТоварыКоличество.Доступность 			= НЕ Объект.ИспользоватьДополнительныеЕдиницыИзмерения;
	Элементы.ТоварыСуммаНСП.Видимость				= ЕстьНСППоставщика;
	Элементы.ТоварыСтавкаНСП.Видимость				= ЕстьНСППоставщика;
	Элементы.ТоварыЗачетНДС.Видимость				= ВидимостьКолонокСуммаСФ И ПризнакЗачетаНДС;	
	Элементы.ТоварыВсего.Видимость					= ВидимостьКолонокСуммаСФ;
	Элементы.ТоварыВсего.ТолькоПросмотр				= НЕ Объект.КорректировкаСумм;
	Элементы.ТоварыСуммаСФ.Видимость				= ВидимостьКолонокСуммаСФ;		
	Элементы.ТоварыСуммаНДС.Видимость				= ВидимостьКолонокСуммаСФ;
	Элементы.ТоварыСтавкаНДС.Видимость				= ВидимостьКолонокСуммаСФ;
	Элементы.ТоварыСчетУчета.Видимость				= НЕ ОперацияОприходование ИЛИ (ОперацияОприходование И НЕ ЗначениеЗаполнено(Объект.СчетУчета));
	Элементы.ТоварыСчетДоходов.Видимость			= ОперацияОприходование И НЕ ЗначениеЗаполнено(Объект.СчетДоходов);
	Элементы.ТоварыСтатьяДоходов.Видимость			= ОперацияОприходование И НЕ ЗначениеЗаполнено(Объект.СтатьяДоходов);
	Элементы.СчетУчета.Видимость					= ОперацияОприходование;
	Элементы.СчетДоходов.Видимость					= ОперацияОприходование;
	Элементы.СтатьяДоходов.Видимость				= ОперацияОприходование;
	Элементы.СчетУчетаРасчетовСКонтрагентом.Видимость	= НЕ ОперацияОприходование;
	
	Элементы.СтраницаИмпорт.Видимость				= ОперацияИмпорт;	
	
	Элементы.ТоварыКоэффициент.Видимость			= ОперацияИмпортТС; 
	Элементы.ТоварыСуммаАкциза.Видимость			= ОперацияИмпортТС; 
	Элементы.ТоварыВес.Видимость					= ОперацияИмпортТС; 
	Элементы.ТоварыБазаНДС.Видимость				= ОперацияИмпортТС;
	Элементы.ТоварыИмпортОсвобожденныйОтНДС.Видимость = ОперацияИмпортТС;
	
	Элементы.ТоварыСумма.Доступность				= НЕ (ОперацияПокупка И ПлательщикНДС) ИЛИ ЭтоСтавкаДоговораБезНДС;

	// Видимость колонок табличной части "Услуги"	
	Элементы.УслугиСуммаНСП.Видимость				= ЕстьНСППоставщика;
	Элементы.УслугиСтавкаНСП.Видимость				= ЕстьНСППоставщика;
	Элементы.УслугиЗачетНДС.Видимость				= ВидимостьКолонокСуммаСФ И ПризнакЗачетаНДС;
	Элементы.УслугиВсего.Видимость					= ВидимостьКолонокСуммаСФ;
	Элементы.УслугиВсего.ТолькоПросмотр				= НЕ Объект.КорректировкаСумм;
	Элементы.УслугиСуммаСФ.Видимость				= ВидимостьКолонокСуммаСФ;		
	Элементы.УслугиСуммаНДС.Видимость				= ВидимостьКолонокСуммаСФ;
	Элементы.УслугиСтавкаНДС.Видимость				= ВидимостьКолонокСуммаСФ;
	
	Элементы.УслугиКоэффициент.Видимость			= ОперацияИмпортТС; 
	Элементы.УслугиСуммаАкциза.Видимость			= ОперацияИмпортТС; 
	Элементы.УслугиВес.Видимость					= ОперацияИмпортТС; 
	Элементы.УслугиБазаНДС.Видимость				= ОперацияИмпортТС;
	
	Элементы.УслугиСумма.Доступность				= НЕ (ОперацияПокупка И ПлательщикНДС) ИЛИ ЭтоСтавкаДоговораБезНДС;
	
	// Видимость колонок табличной части "ОсновныеСредства"
	Элементы.ОССуммаНСП.Видимость					= ЕстьНСППоставщика;
	Элементы.ОССтавкаНСП.Видимость					= ЕстьНСППоставщика;
	Элементы.ОСЗачетНДС.Видимость					= ВидимостьКолонокСуммаСФ И ПризнакЗачетаНДС;
	Элементы.ОСВсего.Видимость						= ВидимостьКолонокСуммаСФ;
	Элементы.ОСВсего.ТолькоПросмотр					= НЕ Объект.КорректировкаСумм;
	Элементы.ОССуммаСФ.Видимость					= ВидимостьКолонокСуммаСФ;		
	Элементы.ОССуммаНДС.Видимость					= ВидимостьКолонокСуммаСФ;	
	
	Элементы.ОСКоэффициент.Видимость				= ОперацияИмпортТС; 
	Элементы.ОССуммаАкциза.Видимость				= ОперацияИмпортТС; 
	Элементы.ОСВес.Видимость						= ОперацияИмпортТС; 
	Элементы.ОСБазаНДС.Видимость					= ОперацияИмпортТС; 
	Элементы.ОСИмпортОсвобожденныйОтНДС.Видимость	= ОперацияИмпортТС;
	
	// Видимость реквизитов на закладке "Дополнительно"
	Элементы.НДСНеПодтвержден.Видимость				= Ложь;	
		
	// Видимость закладок(страниц) формы
	Элементы.СтраницаТовары.Видимость				= Истина;
	Элементы.СтраницаУслуги.Видимость				= Истина;
	Элементы.СтраницаОсновныеСредства.Видимость		= Истина;	
	Элементы.СтраницаСФ.Видимость					= ВидимостьКолонокСуммаСФ И НЕ Объект.НДСНеПодтвержден;
	Элементы.СтраницаДополнительно.Видимость		= Истина;
	Элементы.СтраницаПатент.Видимость				= Ложь;
	
	Если ВидОперации = ПредопределенноеЗначение("Справочник.ОперацииПоступлениеТоваровУслуг.Покупка") Тогда
		// Основные реквизиты
		Элементы.СтраницаУслуги.Видимость			= Истина;
		Элементы.НДСНеПодтвержден.Видимость			= ПлательщикНДС;
		Элементы.ДокументОснование.Видимость 		= ЕстьДокументОснование;
	
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Справочник.ОперацииПоступлениеТоваровУслуг.Импорт") Тогда
		Элементы.ДокументОснование.ТолькоПросмотр	= Ложь;		
		Элементы.СтраницаУслуги.Видимость			= Ложь;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Справочник.ОперацииПоступлениеТоваровУслуг.Оприходование") Тогда
		Элементы.Контрагент.Видимость         		= Ложь;
		Элементы.ДоговорКонтрагента.Видимость 		= Ложь;
		Элементы.ДокументОснование.Видимость 		= ЕстьДокументОснование;		
		
		Элементы.СтраницаОсновныеСредства.Видимость = Ложь;
		Элементы.СтраницаУслуги.Видимость			= Ложь;

	КонецЕсли;		
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДополнительно Тогда
		// Ничего не делаем	
	ИначеЕсли Объект.Товары.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница 			= Элементы.СтраницаТовары;
	ИначеЕсли Объект.Услуги.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница 			= Элементы.СтраницаУслуги;
	ИначеЕсли Объект.ОС.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница 			= Элементы.СтраницаОсновныеСредства;
	КонецЕсли;
												
	Если ЗначениеЗаполнено(Объект.ВалютаДокумента) И Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		Элементы.ВалютаДоговора.Видимость 			= Истина;	
		Элементы.Курс.Видимость 					= Истина;	
	Иначе
		Элементы.ВалютаДоговора.Видимость 			= Ложь;	
		Элементы.Курс.Видимость 					= Ложь;
	КонецЕсли;
			
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()    

#КонецОбласти

#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	//Заполнение реквизитов формы
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		ВидОперации = Объект.ВидОперации; 
	КонецЕсли;
		
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();	
	ДанныеДоговораКонтрагента 		= ДанныеДоговораКонтрагента(ДатаДокумента, Объект.ДоговорКонтрагента, ВидОперации);
	УПП 							= БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
		
	ПараметрыОбъекта 	= Новый Структура("Организация, 
											|Дата, 
											|Ссылка, 
											|ВалютаДокумента, 
											|Склад, 
											|ВидОперации, 
											|ДоговорКонтрагента,   
											|ПлательщикНДС,
											|ПлательщикНСП,
											|НДСНеПодтвержден");
											
	ДанныеСТЧ 			= Новый Структура("Номенклатура, 
											|ОсновноеСредство, 
											|Количество, 
											|КоличествоМест, 
											|Емкость, 
											|Цена, 
											|Сумма,
											|СтавкаНДС,											
											|СтавкаНСП,
											|ЗначСтавкаНДС,											
											|ЗначСтавкаНСП,										
											|СуммаНДС, 
											|СуммаНСП, 
											|СуммаСФ, 
											|Всего, 
											|СчетУчета, 
											|СуммаОтклонение");											
	
	УстановитьПараметрыВыбораСчетовУчета();										
	БухгалтерскийУчетСервер.ОпределитьТипПоследнегоОткрытогоДокумента(Объект); 
	
	//Установить доступность субконто в табличной части Услуги
	УстановитьДоступностьСубконто();
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаВажныеКоманды);
	// Конец СтандартныеПодсистемы.Печать
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Всего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Всего");
	УстановитьВидимостьДоступностьЭлементов();    	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	//Установить доступность субконто в табличной части Услуги
	УстановитьДоступностьСубконто();	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПодборСотрудника" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		Объект.Подотчетник = Параметр.Сотрудник;
		
	ИначеЕсли ИмяСобытия = "ПодборОСПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		ПолучитьОСИзХранилища(АдресЗапасовВХранилище, "ОС");
		Для каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл		
			ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "ОС", СтрокаТабличнойЧасти, Истина);
			ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "СуммаСФ");
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСТЧ);											
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Функция получает список товаров из временного хранилища
//
&НаСервере
Процедура ПолучитьОСИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		Если ИмяТабличнойЧасти = "ОС" Тогда 
			НайденныеСтроки = Объект.ОС.НайтиСтроки(Новый Структура("ОсновноеСредство", СтрокаЗагрузки.ОсновноеСредство));
			
			Если НайденныеСтроки.Количество() > 0 Тогда 
				Продолжить;
			КонецЕсли;	
			
			СтрокаТабличнойЧасти = Объект.ОС.Добавить();
		Иначе 
			СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
		СтрокаТабличнойЧасти.СуммаСФ = СтрокаЗагрузки.Стоимость;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

&НаКлиенте
Процедура ОСПередУдалением(Элемент, Отказ)

	Отказ = ОСПередУдалениемНаСервере();
	Если Отказ Тогда 
		Вопрос = "Перед удалением необходимо отменить проведение документа! Отменить проведение?";
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект), Вопрос, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, );
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОСПередУдалениемНаСервере()
	Возврат Объект.Ссылка.Проведен;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ  = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ОтменаПроведения();
	
КонецПроцедуры

Процедура ОтменаПроведения()

	Док = ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.ПоступлениеТоваровУслуг"));
	Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	ЗначениеВДанныеФормы(Док,Объект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура ПодборОС(Команда)
	УправлениеВнеоборотнымиАктивамиКлиент.ОткрытьПодбор(ЭтаФорма, "ОС");  
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьАкцизПоСумме(Команда)
	ВыполнитьКомандуРаспределитьАкциз("По сумме");
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьАкцизПоКоличеству(Команда)
	ВыполнитьКомандуРаспределитьАкциз("По количеству");
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьАкцизПоВесу(Команда)
	ВыполнитьКомандуРаспределитьАкциз("По весу");	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросРаспределитьАкциз(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РаспределитьАкцизНаСервере(ДополнительныеПараметры);
	КонецЕсли; 
КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетСервер.ПроверитьСуществованиеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	ПриИзмененииДатыОрганизации();
	УстановитьСчетаРасчетовСКонтрагентами();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
		
	ПриИзмененииДатыОрганизации();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВидаОперации()
	ВидОперации = Объект.ВидОперации;
	ОчиститьТабличныеЧастиИРеквизиты();	
	ПересчитатьТабличныеЧасти();
	Распределить();
	
	Если ВидОперации = ПредопределенноеЗначение("Справочник.ОперацииПоступлениеТоваровУслуг.Оприходование") Тогда
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
		Объект.Курс 			= 1;		
	КонецЕсли;
	
	УстановитьСчетаРасчетовСКонтрагентами();
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры  

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	СтруктураДоговор 			= БухгалтерскийУчетСервер.ПолучитьДоговорКонтрагента(
								Объект.Организация, 
								Объект.Контрагент, 
								ВалютаРегламентированногоУчета, 
								ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	Объект.ДоговорКонтрагента 	= СтруктураДоговор.ДоговорКонтрагента;	
	УстановитьВидОперации();
	ПриИзмененииВидаОперации();
	Контрагент = Объект.Контрагент;
	ПриИзмененииДоговораКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодотчетникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПередаваемыПараметры = Новый Структура;
	ПередаваемыПараметры.Вставить("ДатаСреза", ДатаДокумента);
	ОткрытьФорму("Обработка.ПодборСотрудника.Форма", ПередаваемыПараметры, ЭтаФорма, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ПриИзмененииДоговораКонтрагента();
КонецПроцедуры

&НаКлиенте
Процедура НДСНеПодтвержденПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.СерияБланкаСФ) Тогда
	 	Объект.СерияБланкаСФ = "";
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.НомерБланкаСФ) Тогда
	 	Объект.НомерБланкаСФ = "";
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СчетДоходовПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТабличныхЧастей

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	РассчитатьСуммыОбщие();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти 			= Элемент.ТекущиеДанные;
		СтрокаТабличнойЧасти.СтавкаНДС 	= ДанныеДоговораКонтрагента.СтавкаНДС;
		СтрокаТабличнойЧасти.СтавкаНСП 	= ДанныеДоговораКонтрагента.СтавкаНСП;
		Если ВидОперации = ПредопределенноеЗначение("Справочник.ОперацииПоступлениеТоваровУслуг.Оприходование") Тогда
			СтруктураДанных = ДанныеИзВидОперации(ВидОперации);
			СтрокаТабличнойЧасти.СчетДоходов 	= СтруктураДанных.СчетУчета;
 		    СтрокаТабличнойЧасти.СтатьяДоходов 	= СтруктураДанных.СтатьяДоходов;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти 					= Элементы.Товары.ТекущиеДанные; 	
	// Подготовка и заполнение структуры колонок ТЧ
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары");
	
	// Общая процедура отработки изменения номенклатуры в ТЧ
	ПриИзмененииНоменклатурыТЧ(ДанныеСТЧ, ПараметрыОбъекта);
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеСТЧ);
	РассчитатьСуммыОбщие();
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоМестПриИзменении(Элемент)
	// Подготовка и заполнение структуры колонок ТЧ
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары");
	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "КоличествоМест");
	
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеСТЧ);		
	РассчитатьСуммыОбщие();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕмкостьПриИзменении(Элемент)
	// Подготовка и заполнение структуры колонок ТЧ
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары");
	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "КоличествоМест");
	
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеСТЧ);		
	РассчитатьСуммыОбщие();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	// Подготовка и заполнение структуры колонок ТЧ
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары");
	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "Количество");
	
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеСТЧ);		
	РассчитатьСуммыОбщие();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	// Подготовка и заполнение структуры колонок ТЧ
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары");
	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "Цена");
	
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеСТЧ);		
	РассчитатьСуммыОбщие();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	// Подготовка и заполнение структуры колонок ТЧ
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары");
	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "Сумма");

	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеСТЧ);		
	РассчитатьСуммыОбщие();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСФПриИзменении(Элемент)
	
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары");
	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "СуммаСФ");
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеСТЧ);	
	РассчитатьСуммыОбщие();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары");
	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "СуммаСФ");
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеСТЧ);	
	РассчитатьСуммыОбщие();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНСППриИзменении(Элемент)
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Товары");
	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "СуммаСФ");
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеСТЧ);	
	РассчитатьСуммыОбщие();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Сумма 	= СтрокаТабличнойЧасти.СуммаСФ + СтрокаТабличнойЧасти.СуммаНСП - СтрокаТабличнойЧасти.СуммаНДС;	
	РассчитатьСуммыОбщие();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНСППриИзменении(Элемент)
	РассчитатьСуммыОбщие();
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	РассчитатьСуммыОбщие();
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти 			= Элемент.ТекущиеДанные;
		СтрокаТабличнойЧасти.Количество	= 1;		
		СтрокаТабличнойЧасти.СтавкаНДС 	= ДанныеДоговораКонтрагента.СтавкаНДС;
	    СтрокаТабличнойЧасти.СтавкаНСП 	= ДанныеДоговораКонтрагента.СтавкаНСП;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти 					= Элементы.Услуги.ТекущиеДанные; 		
	// Подготовка и заполнение структуры колонок ТЧ
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Услуги");	
	ПриИзмененииНоменклатурыТЧ(ДанныеСТЧ, ПараметрыОбъекта);

	ЗаполнитьЗначенияСвойств(Элементы.Услуги.ТекущиеДанные, ДанныеСТЧ);
	РассчитатьСуммыОбщие();
	УслугиСчетУчетаПриИзменении(Элемент);	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	// Подготовка и заполнение структуры колонок ТЧ
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Услуги");
	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "Цена");
	
	ЗаполнитьЗначенияСвойств(Элементы.Услуги.ТекущиеДанные, ДанныеСТЧ);		
	РассчитатьСуммыОбщие();
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	// Подготовка и заполнение структуры колонок ТЧ
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Услуги");
	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "Количество");
	
	ЗаполнитьЗначенияСвойств(Элементы.Услуги.ТекущиеДанные, ДанныеСТЧ);
	РассчитатьСуммыОбщие();

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаСФПриИзменении(Элемент)
	
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Услуги");

	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "СуммаСФ");
	ЗаполнитьЗначенияСвойств(Элементы.Услуги.ТекущиеДанные, ДанныеСТЧ);
	РассчитатьСуммыОбщие();

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	// Подготовка и заполнение структуры колонок ТЧ
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Услуги");
	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "Сумма");

	ЗаполнитьЗначенияСвойств(Элементы.Услуги.ТекущиеДанные, ДанныеСТЧ);		
	РассчитатьСуммыОбщие();

КонецПроцедуры

&НаКлиенте
Процедура УслугиНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	СтрокаТабличнойЧасти.Сумма 	= СтрокаТабличнойЧасти.СуммаСФ + СтрокаТабличнойЧасти.СуммаНСП - СтрокаТабличнойЧасти.СуммаНДС;		
	РассчитатьСуммыОбщие();
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНСППриИзменении(Элемент)
	РассчитатьСуммыОбщие();
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Услуги");
	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "СуммаСФ");
	ЗаполнитьЗначенияСвойств(Элементы.Услуги.ТекущиеДанные, ДанныеСТЧ);	
	РассчитатьСуммыОбщие();
КонецПроцедуры
&НаКлиенте
Процедура УслугиСтавкаНСППриИзменении(Элемент)
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "Услуги");
	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "СуммаСФ");
	ЗаполнитьЗначенияСвойств(Элементы.Услуги.ТекущиеДанные, ДанныеСТЧ);	
	РассчитатьСуммыОбщие();
КонецПроцедуры

&НаКлиенте
Процедура ОСПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.СобытиеОС) И Объект.ОС.Количество() > 0 Тогда
		Объект.СобытиеОС = СобытиеОСНаСервере("Поступление");
	КонецЕсли;
	РассчитатьСуммыОбщие();
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаСФПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "ОС", СтрокаТабличнойЧасти);
    ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "СуммаСФ");
	
	ЗаполнитьЗначенияСвойств(Элементы.ОС.ТекущиеДанные, ДанныеСТЧ);
	РассчитатьСуммыОбщие();

КонецПроцедуры

&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)
	// Подготовка и заполнение структуры колонок ТЧ
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "ОС");
	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "Сумма");
	
	ЗаполнитьЗначенияСвойств(Элементы.ОС.ТекущиеДанные, ДанныеСТЧ);		
	РассчитатьСуммыОбщие();

КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекущаяСтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	
	Если ТекущаяСтрокаТЧ.ОсновноеСредство <> ВыбранноеЗначение Тогда
		
		СтрокиТабличнойЧасти = Объект.ОС.НайтиСтроки(Новый Структура("ОсновноеСредство", ВыбранноеЗначение));
		
		Если СтрокиТабличнойЧасти.Количество() > 0 Тогда
			ШаблонСообщения = НСтр("ru = 'Основное средство ""%1"" уже подобрано!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ВыбранноеЗначение);
			ПоказатьПредупреждение(, ТекстСообщения, 60);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОССтавкаНДСПриИзменении(Элемент)
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "ОС");
	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "СуммаНДС");
	ЗаполнитьЗначенияСвойств(Элементы.ОС.ТекущиеДанные, ДанныеСТЧ);
	РассчитатьСуммыОбщие();
КонецПроцедуры

&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти 			= Элемент.ТекущиеДанные;		
		СтрокаТабличнойЧасти.СтавкаНДС 	= ДанныеДоговораКонтрагента.СтавкаНДС;
	    СтрокаТабличнойЧасти.СтавкаНСП 	= ДанныеДоговораКонтрагента.СтавкаНСП;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОССуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	СтрокаТабличнойЧасти.Сумма 	= СтрокаТабличнойЧасти.СуммаСФ + СтрокаТабличнойЧасти.СуммаНСП - СтрокаТабличнойЧасти.СуммаНДС;		
	РассчитатьСуммыОбщие();
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаНСППриИзменении(Элемент)
	РассчитатьСуммыОбщие();
КонецПроцедуры

&НаКлиенте
Процедура ОССтавкаНСППриИзменении(Элемент)
	ЗаполнитьПараметрыОбъектаИСТЧ(ДанныеСТЧ, ПараметрыОбъекта, "ОС");
	ОбработкаТабличныхЧастейВызовСервера.РасчетСтрокиПоступления(ДанныеСТЧ, ПараметрыОбъекта, "СуммаНДС");
	ЗаполнитьЗначенияСвойств(Элементы.ОС.ТекущиеДанные, ДанныеСТЧ);
	РассчитатьСуммыОбщие();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовПодвала

&НаКлиенте
Процедура НДСПриИзменении(Элемент)
	Распределить();
КонецПроцедуры

&НаКлиенте
Процедура НСППриИзменении(Элемент)
	Распределить();	
КонецПроцедуры

&НаКлиенте
Процедура КорректировкаСуммПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
	Если Объект.КорректировкаСумм Тогда
		Распределить();
	Иначе
		ПересчитатьТабличныеЧасти(Истина)	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобытиеОСПриИзменении(Элемент)
	Если НЕ ЭтоВидСобытияПоступление(Объект.СобытиеОС) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать событие ОС с видом события ""Поступление""!'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
			Объект.Ссылка,   
			ТекстСообщения,
			,
			,
			"Объект.СобытиеОС",
			Истина);

		Объект.СобытиеОС = ПредопределенноеЗначение("Справочник.СобытияОС.ПустаяСсылка");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетУчетаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "Субконто1", "Субконто2", "Субконто3");

	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетУчета, СтрокаТабличнойЧасти, ПоляОбъекта, Истина);
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетУчета");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
		ПараметрыПечати = Новый Структура;
		МассивВыделенныхСтрок = Объект.Товары.Количество();
		ПараметрыПечати.Вставить("СписокСтрокДляПечати", МассивВыделенныхСтрок);

		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Объект.Ссылка);		
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
			МодульУправлениеПечатьюКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеПечатьюКлиент");
			МодульУправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ПоступлениеТоваровУслуг", "Накладная", 
			ПараметрКоманды, ЭтотОбъект, ПараметрыПечати);
		КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

