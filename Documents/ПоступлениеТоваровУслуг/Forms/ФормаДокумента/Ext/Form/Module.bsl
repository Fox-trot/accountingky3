
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Установка реквизитов формы.	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();	
	Контрагент = Объект.Контрагент;
	ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	УстановитьФункциональныеОпцииФормы();

	// Связь субконто
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл							 
		БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "Услуги", СтрокаТабличнойЧасти, ПоляОбъекта);
	КонецЦикла;

	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	БухгалтерскийУчетСервер.ОпределитьТипПоследнегоОткрытогоДокумента(Объект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
// В процедуре осуществляется
// - установка видимости/доступности элементов управления формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьДоступностьЭлементов();
	УстановитьСвязиПараметровВыбора();
	УстановитьТекущуюСтраницу();
	ОбновитьПодвалФормы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");									
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл							 
		БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "Услуги", СтрокаТабличнойЧасти, ПоляОбъекта);
	КонецЦикла;
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "МодифицированДоговораКонтрагента" Тогда
		ОбработатьИзменениеДоговора(Истина);

	ИначеЕсли ИмяСобытия = "ПодборНоменклатурыПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище);
		
		ОбновитьПодвалФормы();
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением, Объект.ВалютаДокумента);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные);
		КонецЕсли;	
	КонецЕсли;
	
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	
	УстановитьФункциональныеОпцииФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер = "";
	Объект.БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Объект.Организация);

	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	УстановитьФункциональныеОпцииФормы();
	
	// Договор автоматически очистился- заполнение по умолчанию.
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ОбработатьИзменениеДоговора();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Вид операции.
//
&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	УстановитьСвязиПараметровВыбора();	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флажка Безналичный расчет.
//
&НаКлиенте
Процедура БезналичныйРасчетПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		ДатаДокумента, 
		"Товары",
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		ДатаДокумента, 
		"Услуги",
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		ДатаДокумента, 
		"ОС",
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
		
		Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
		Объект.ПризнакСтраны = СтруктураДанные.ПризнакСтраны;
		
		// Изменение признака страны
		Если Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
			Объект.БезналичныйРасчет = Ложь;
			// Ставки
			Объект.НДСПодтвержден = Истина;
			Объект.СтавкаНСП = Неопределено;
		ИначеЕсли Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ИмпортЭкспорт") Тогда	
			Объект.БезналичныйРасчет = Ложь;
			// Ставки
			Объект.НДСПодтвержден = Истина;
			Объект.СтавкаНДС = Неопределено;
			Объект.СтавкаНСП = Неопределено;
			// Акциз
			Объект.СуммаАкциза = 0;
			Объект.СпособРаспределенияАкциза = "";
			РаспределитьАкцизНаСервере();
		Иначе // КР или не заполнен Контрагент	
			// Акциз
			Объект.СуммаАкциза = 0;
			Объект.СпособРаспределенияАкциза = "";
			РаспределитьАкцизНаСервере();
		КонецЕсли;	
		
		ОбработатьИзменениеДоговора();
		УстановитьВидимостьДоступностьЭлементов();
		
	Иначе
		Объект.ДоговорКонтрагента = ДоговорКонтрагента; // Восстанавливаем автоматически очищеный договор.
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор контрагента.
//
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ОбработатьИзменениеДоговора();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Документ основание.
//
&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	ПоказатьПредупреждение(, "В разработке", 30, "ВНИМАНИЕ");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма акциза.
//
&НаКлиенте
Процедура СуммаАкцизаПриИзменении(Элемент)
	Если Объект.СуммаАкциза = 0 Тогда 
		Объект.СпособРаспределенияАкциза = "";
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
	РаспределитьАкцизНаСервере();		
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Документ основание.
//
&НаКлиенте
Процедура СпособРаспределенияАкцизаПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();

	РаспределитьАкцизНаСервере();		
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Серия бланка СФ.
//
&НаКлиенте
Процедура СерияБланкаСФПриИзменении(Элемент)
	// Заполнение даты СФ
	Если ЗначениеЗаполнено(Объект.СерияБланкаСФ)
		И (НЕ ЗначениеЗаполнено(Объект.ДатаСФ)) Тогда
		Объект.ДатаСФ = ДатаДокумента;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НДС.
//
&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		ДатаДокумента, 
		"Товары",
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		ДатаДокумента, 
		"Услуги",
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		ДатаДокумента, 
		"ОС",
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НСП.
//
&НаКлиенте
Процедура СтавкаНСППриИзменении(Элемент)
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		ДатаДокумента, 
		"Товары",
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		ДатаДокумента, 
		"Услуги",
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		ДатаДокумента, 
		"ОС",
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флага НДС не подтвержден.
//
&НаКлиенте
Процедура НДСПодтвержденПриИзменении(Элемент)
	Объект.СерияБланкаСФ = "";
	Объект.НомерБланкаСФ = "";
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флага Расчет по емкости.
//
&НаКлиенте
Процедура РасчетПоЕмкостиПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ИмпортОсвобожденныйОтНДСПриИзменении(Элемент)
	// Товары
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл 
		СтрокаТабличнойЧасти.ИмпортОсвобожденныйОтНДС = ПредопределенноеЗначение("Справочник.ИмпортОсвобожденныйОтНДС.ПустаяСсылка");
	КонецЦикла;	
	// Услуги
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл 
		СтрокаТабличнойЧасти.ИмпортОсвобожденныйОтНДС = ПредопределенноеЗначение("Справочник.ИмпортОсвобожденныйОтНДС.ПустаяСсылка");
	КонецЦикла;	
	// ОС
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл 
		СтрокаТабличнойЧасти.ИмпортОсвобожденныйОтНДС = ПредопределенноеЗначение("Справочник.ИмпортОсвобожденныйОтНДС.ПустаяСсылка");
	КонецЦикла;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	Если Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		РаспределитьАкцизНаСервере();
	КонецЕсли;	
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

	// Заполнение по данным номенклатуры
	СтрокаТабличнойЧасти.СчетУчета 	 = СтруктураДанные.СчетУчета;
	СтрокаТабличнойЧасти.СчетДоходов = СтруктураДанные.СчетДоходов;
	СтрокаТабличнойЧасти.Количество  = 1;
	
	Если Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		РаспределитьАкцизНаСервере();
	КонецЕсли;	

	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		ДатаДокумента, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП, 
		Объект.БезналичныйРасчет,
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет,
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));

	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕмкостьПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьКоличествоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
	
	Если Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		РаспределитьАкцизНаСервере();
	КонецЕсли;	

	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		ДатаДокумента, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет,
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		ДатаДокумента, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП, 
		Объект.БезналичныйРасчет,
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));

	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		РаспределитьАкцизНаСервере();
	КонецЕсли;	
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		ДатаДокумента, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет,
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		ДатаДокумента, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП, 
		Объект.БезналичныйРасчет,
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));

	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВсегоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		ДатаДокумента, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет,
		СтрокаТабличнойЧасти.СуммаАкциза, 
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));	
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		ДатаДокумента, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП, 
		Объект.БезналичныйРасчет,
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));

	Если Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда  
		СтрокаТабличнойЧасти.Цена = ?(СтрокаТабличнойЧасти.Количество = 0, 0, СтрокаТабличнойЧасти.Всего / СтрокаТабличнойЧасти.Количество);
	Иначе 
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
	КонецЕсли;	

	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		РаспределитьАкцизНаСервере();
	КонецЕсли;	
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		ДатаДокумента, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП, 
		Объект.БезналичныйРасчет,
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));

	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНСПСтрокиТабличнойЧастиПоступление(СтрокаТабличнойЧасти);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВесПриИзменении(Элемент)
	РаспределитьАкцизНаСервере();
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИмпортОСвобожденныйОтНДСПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	Если Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		РаспределитьАкцизНаСервере();
	КонецЕсли;
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

	// Заполнение по данным номенклатуры
	СтрокаТабличнойЧасти.СчетУчета = СтруктураДанные.СчетУчета;
	СтрокаТабличнойЧасти.Количество = 1;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "Субконто1", "Субконто2", "Субконто3");

	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "Услуги", СтрокаТабличнойЧасти, ПоляОбъекта);
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		ДатаДокумента, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет,
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		ДатаДокумента, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП, 
		Объект.БезналичныйРасчет,
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));

	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		ДатаДокумента, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет,
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		ДатаДокумента, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП, 
		Объект.БезналичныйРасчет,
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура УслугиВсегоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		ДатаДокумента, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет,
		СтрокаТабличнойЧасти.СуммаАкциза, 
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));	
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		ДатаДокумента, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП, 
		Объект.БезналичныйРасчет,
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));

	Если Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда  
		СтрокаТабличнойЧасти.Цена = ?(СтрокаТабличнойЧасти.Количество = 0, 0, СтрокаТабличнойЧасти.Всего / СтрокаТабличнойЧасти.Количество);
	Иначе 
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
	КонецЕсли;	

	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		ДатаДокумента, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП, 
		Объект.БезналичныйРасчет,
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));

	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНСПСтрокиТабличнойЧастиПоступление(СтрокаТабличнойЧасти);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетУчетаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");
	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "Услуги", СтрокаТабличнойЧасти, ПоляОбъекта);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконто1ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "Услуги", СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконто2ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "Услуги", СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконто3ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетУчета", "Услуги", СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиВесПриИзменении(Элемент)
	РаспределитьАкцизНаСервере();
	ОбновитьПодвалФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

&НаКлиенте
Процедура ОСПослеУдаления(Элемент)
	Если Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		РаспределитьАкцизНаСервере();
	КонецЕсли;
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОСВсегоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		ДатаДокумента, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет,
		СтрокаТабличнойЧасти.СуммаАкциза, 
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));	
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		ДатаДокумента, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП, 
		Объект.БезналичныйРасчет,
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));

	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		ДатаДокумента, 
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП, 
		Объект.БезналичныйРасчет,
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНСПСтрокиТабличнойЧастиПоступление(СтрокаТабличнойЧасти);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОСВесПриИзменении(Элемент)
	РаспределитьАкцизНаСервере();
	ОбновитьПодвалФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик события действие команды Подбор в табличную часть Товары
//
&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	РаботаСПодборомНоменклатурыКлиент.ОткрытьПодбор(ЭтаФорма, "Товары", "Поступление");
КонецПроцедуры

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

&НаКлиенте
Процедура ЗагрузитьТоварыИзФайла(Команда)
    ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
    ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "ПоступлениеТоваровУслуг.Товары";
    ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка списка товаров из файла'");
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьТоварыИзФайлаЗавершение", ЭтотОбъект);
    ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

&НаКлиенте
Процедура ЗагрузитьТоварыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
    Если АдресЗагруженныхДанных = Неопределено Тогда 
        Возврат;
    КонецЕсли;
    ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
// Процедура устанавливает видимость и доступность элементов.
//
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	Если Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		Элементы.БезналичныйРасчет.Видимость = Ложь;
		// Ставки
		Элементы.НДСПодтвержден.Видимость = Ложь;
		Элементы.СтавкаНДС.Видимость = Ложь;
		Элементы.СтавкаНСП.Видимость = Ложь;
		// Счет-фактура
		Элементы.СерияБланкаСФ.Видимость = Ложь;
		Элементы.НомерБланкаСФ.Видимость = Ложь;
		Элементы.ДатаСФ.Видимость = Ложь;
		Элементы.НеВключатьВРеестрСФ.Видимость = Ложь;
		// Курс прихода
		Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда 
			Элементы.Курс.Видимость = Ложь;
			Элементы.Кратность.Видимость = Ложь;
		Иначе
			Элементы.Курс.Видимость = Истина;
			Элементы.Кратность.Видимость = Истина;
		КонецЕсли;	                       		
		// Акциз
		Элементы.СуммаАкциза.Видимость = Истина;
		Элементы.СпособРаспределенияАкциза.Видимость = Истина;
		Элементы.ИтогСуммаАкциза.Видимость = Истина;
		Если Объект.СуммаАкциза = 0 Тогда 
			Элементы.ТоварыСуммаАкциза.Видимость = Ложь;
			Элементы.УслугиСуммаАкциза.Видимость = Ложь;
			Элементы.ОССуммаАкциза.Видимость = Ложь;
		Иначе 
			Элементы.ТоварыСуммаАкциза.Видимость = Истина;
			Элементы.УслугиСуммаАкциза.Видимость = Истина;
			Элементы.ОССуммаАкциза.Видимость = Истина;
		КонецЕсли;	
			
		Если Объект.СпособРаспределенияАкциза = "Вес" Тогда 
			Элементы.ТоварыВес.Видимость = Истина;
			Элементы.УслугиВес.Видимость = Истина;
			Элементы.ОСВес.Видимость = Истина;
		Иначе 
			Элементы.ТоварыВес.Видимость = Ложь;
			Элементы.УслугиВес.Видимость = Ложь;
			Элементы.ОСВес.Видимость = Ложь;
		КонецЕсли;
		// Импорт
		Элементы.ТоварыИмпортОСвобожденныйОтНДС.Видимость = Объект.ИмпортОсвобожденныйОтНДС.Пустая();
		Элементы.ОСИмпортОсвобожденныйОтНДС.Видимость = Объект.ИмпортОсвобожденныйОтНДС.Пустая();    		
		// Сумма НДС и НСП
		Элементы.ТоварыСуммаНДС.Видимость = Истина;
		Элементы.УслугиСуммаНДС.Видимость = Истина;
		Элементы.ОССуммаНДС.Видимость = Истина;
		Элементы.ТоварыСуммаНСП.Видимость = Истина;
		Элементы.УслугиСуммаНСП.Видимость = Истина;
		Элементы.ОССуммаНСП.Видимость = Истина;
		// Зачет НДС
		Элементы.ТоварыЗачетНДС.Видимость = Истина;
		Элементы.УслугиЗачетНДС.Видимость = Истина;
		Элементы.ОСЗачетНДС.Видимость = Истина;
		// Емкость
		Элементы.ТоварыКоличествоМест.Видимость = Объект.РасчетПоЕмкости;
		Элементы.ТоварыЕмкость.Видимость = Объект.РасчетПоЕмкости;
		
	ИначеЕсли Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ИмпортЭкспорт") Тогда	
		Элементы.БезналичныйРасчет.Видимость = Ложь;
		// Ставки
		Элементы.НДСПодтвержден.Видимость = Ложь;
		Элементы.СтавкаНДС.Видимость = Ложь;
		Элементы.СтавкаНСП.Видимость = Ложь;
		// Счет-фактура
		Элементы.СерияБланкаСФ.Видимость = Ложь;
		Элементы.НомерБланкаСФ.Видимость = Ложь;
		Элементы.ДатаСФ.Видимость = Ложь;
		Элементы.НеВключатьВРеестрСФ.Видимость = Ложь;
		// Курс прихода
		Элементы.Курс.Видимость = Ложь;
		Элементы.Кратность.Видимость = Ложь;
		// Акциз
		Элементы.СуммаАкциза.Видимость = Ложь;
		Элементы.СпособРаспределенияАкциза.Видимость = Ложь;
		Элементы.ИтогСуммаАкциза.Видимость = Ложь;
		Элементы.ТоварыВес.Видимость = Ложь;
		Элементы.ТоварыИмпортОСвобожденныйОтНДС.Видимость = Ложь;
		Элементы.ТоварыСуммаАкциза.Видимость = Ложь;
		Элементы.УслугиСуммаАкциза.Видимость = Ложь;
		Элементы.ОССуммаАкциза.Видимость = Ложь;
		// Услуги
		Элементы.УслугиВес.Видимость = Ложь;
		// ОС
		Элементы.ОСВес.Видимость = Ложь;
		Элементы.ОСИмпортОсвобожденныйОтНДС.Видимость = Ложь;
		// Сумма НДС и НСП
		Элементы.ТоварыСуммаНДС.Видимость = Ложь;
		Элементы.УслугиСуммаНДС.Видимость = Ложь;
		Элементы.ОССуммаНДС.Видимость = Ложь;
		Элементы.ТоварыСуммаНСП.Видимость = Ложь;
		Элементы.УслугиСуммаНСП.Видимость = Ложь;
		Элементы.ОССуммаНСП.Видимость = Ложь;
		// Зачет НДС
		Элементы.ТоварыЗачетНДС.Видимость = Ложь;
		Элементы.УслугиЗачетНДС.Видимость = Ложь;
		Элементы.ОСЗачетНДС.Видимость = Ложь;
		// Емкость
		Элементы.ТоварыКоличествоМест.Видимость = Ложь;
		Элементы.ТоварыЕмкость.Видимость = Ложь;
		
	Иначе // КР или не заполнен Контрагент	
		Элементы.БезналичныйРасчет.Видимость = Истина;
		// Ставки
		Элементы.НДСПодтвержден.Видимость = Истина;
		Элементы.СтавкаНДС.Видимость = Истина;
		// Счет-фактура
		Элементы.СерияБланкаСФ.Видимость = Объект.НДСПодтвержден;
		Элементы.НомерБланкаСФ.Видимость = Объект.НДСПодтвержден;
		Элементы.ДатаСФ.Видимость = Объект.НДСПодтвержден;
		Элементы.НеВключатьВРеестрСФ.Видимость = Объект.НДСПодтвержден;
		// Курс прихода
		Элементы.Курс.Видимость = Ложь;
		Элементы.Кратность.Видимость = Ложь;
		// Акциз
		Элементы.СуммаАкциза.Видимость = Ложь;
		Элементы.СпособРаспределенияАкциза.Видимость = Ложь;
		Элементы.ИтогСуммаАкциза.Видимость = Ложь;
		Элементы.ТоварыСуммаАкциза.Видимость = Ложь;
		Элементы.УслугиСуммаАкциза.Видимость = Ложь;
		Элементы.ОССуммаАкциза.Видимость = Ложь;
		// Товары
		Элементы.ТоварыКоличествоМест.Видимость = Ложь;
		Элементы.ТоварыЕмкость.Видимость = Ложь;
		Элементы.ТоварыВес.Видимость = Ложь;
		Элементы.ТоварыИмпортОСвобожденныйОтНДС.Видимость = Ложь;
		// Услуги
		Элементы.УслугиВес.Видимость = Ложь;
		// ОС
		Элементы.ОСВес.Видимость = Ложь;
		Элементы.ОСИмпортОсвобожденныйОтНДС.Видимость = Ложь;
		// Сумма НДС
		Элементы.ТоварыСуммаНДС.Видимость = Истина;
		Элементы.УслугиСуммаНДС.Видимость = Истина;
		Элементы.ОССуммаНДС.Видимость = Истина;
		// Сумма НСП
		Если Объект.БезналичныйРасчет Тогда 
			Элементы.СтавкаНСП.Видимость = Ложь;
			Элементы.ТоварыСуммаНСП.Видимость = Ложь;
			Элементы.УслугиСуммаНСП.Видимость = Ложь;
			Элементы.ОССуммаНСП.Видимость = Ложь;
		Иначе 
			Элементы.СтавкаНСП.Видимость = Истина;
			Элементы.ТоварыСуммаНСП.Видимость = Истина;
			Элементы.УслугиСуммаНСП.Видимость = Истина;
			Элементы.ОССуммаНСП.Видимость = Истина;
		КонецЕсли;
		// Зачет НДС
		Элементы.ТоварыЗачетНДС.Видимость = Истина;
		Элементы.УслугиЗачетНДС.Видимость = Истина;
		Элементы.ОСЗачетНДС.Видимость = Истина;
	КонецЕсли;	
		
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Покупка") Тогда 
		Элементы.РБП.Видимость = Ложь;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.РасходыБудущихПериодов") Тогда 
		Элементы.РБП.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()    

// Процедура устанавливает текущую страницу при открытии формы.
//
&НаКлиенте
Процедура УстановитьТекущуюСтраницу()	
	Если Объект.Товары.Количество() > 0 Тогда 
		Возврат;
	ИначеЕсли Объект.Услуги.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаУслуги;
	ИначеЕсли Объект.ОС.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаОсновныеСредства;
	КонецЕсли;	
КонецПроцедуры

// Процедура устанавливает функциональные опции формы документа.
//
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма, Объект.Организация, ДатаДокумента);
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением, ВалютаДокумента)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаНовая, Новый Структура("Валюта", ВалютаДокумента));
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность
	);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Пересчитать курс кратность валюты расчетов
//
// Параметры:
//  СтруктураДанные	- Структура - 
//		* ВалютаКурсКратность - Структура
//			* Курс - Число
//			* Кратность - Число
//
&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		Или Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(Объект.Курс) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(КурсНовый) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		
		ТекстСообщения = НСтр("ru = 'На дату документа у валюты расчетов (" + КурсВалютыСтрокой + ") был задан курс.
									|Установить курс расчетов (" + КурсНовыйВалютыСтрокой + ") в соответствии с курсом валюты?'");
		
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПересчитатьКурсКратностьВалютыДокументаЗавершение", ЭтотОбъект, Новый Структура("КратностьНовый, КурсНовый", КратностьНовый, КурсНовый)), ТекстСообщения, Режим, 0);
		Возврат;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КратностьНовый = ДополнительныеПараметры.КратностьНовый;
	КурсНовый = ДополнительныеПараметры.КурсНовый;
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Курс = КурсНовый;
		Объект.Кратность = КратностьНовый;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает связи параметров выбора.
//
&НаКлиенте
Процедура УстановитьСвязиПараметровВыбора()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.РасходыБудущихПериодов") Тогда
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.КР"));
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ПризнакСтраны", Новый ФиксированныйМассив(НовыйМассив));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Контрагент.ПараметрыВыбора = НовыеПараметры;
	Иначе
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.КР"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ИмпортЭкспорт"));
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ПризнакСтраны", Новый ФиксированныйМассив(НовыйМассив));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Контрагент.ПараметрыВыбора = НовыеПараметры;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыВыбора()

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация, Объект.ВидОперации);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию
	);
	
	СтруктураДанные.Вставить(
		"ПризнакСтраны",
		Контрагент.ПризнакСтраны
	);
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанию
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Период, ВалютаДокумента, ДоговорКонтрагента, ВидОперации)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорКонтрагента.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Период, Новый Структура("Валюта", ДоговорКонтрагента.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНалоги",
		ДоговорКонтрагента.СуммаВключаетНалоги
	);
	
	СтруктураДанные.Вставить(
		"СтавкаНДС",
		ДоговорКонтрагента.СтавкаНДС
	);
	
	СтруктураДанные.Вставить(
		"СтавкаНСП",
		ДоговорКонтрагента.СтавкаНСП
	);
	
	СчетаУчета = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(ДоговорКонтрагента.Организация, ДоговорКонтрагента.Владелец, ДоговорКонтрагента);
	СтруктураДанные.Вставить(
		"СчетРасчетов",
		СчетаУчета.СчетРасчетовПоставщика
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаКлиенте
Процедура ОбработатьИзменениеДоговора(МодифицированДоговор = Ложь)
	
	//ДоговорПередИзменением = ДоговорКонтрагента;
	//ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	//
	//Если ДоговорПередИзменением <> Объект.ДоговорКонтрагента
	//	Или МодифицированДоговор Тогда
		
		СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(ДатаДокумента, Объект.ВалютаДокумента, Объект.ДоговорКонтрагента, Объект.ВидОперации);

		// Обработка изменения валюты
		СтруктураКурсыПред = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
		
		Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
		Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
		Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
		
		СтруктураКурсы = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
		
		// Обработка изменения налогооблажения
		Объект.СуммаВключаетНалоги = СтруктураДанные.СуммаВключаетНалоги;
		Объект.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		Объект.СтавкаНСП = СтруктураДанные.СтавкаНСП;
		
		// Обработка изменения отражения в учете
		Объект.СчетРасчетов = СтруктураДанные.СчетРасчетов;
		
		// Вопрос изменения
		ИзмениласьВалютаРасчетов = СтруктураКурсыПред.Валюта <> СтруктураДанные.ВалютаРасчетов
			И ЗначениеЗаполнено(Объект.ВалютаДокумента); 
		ПересчетНеобходим = (Объект.Товары.Количество() > 0)
			Или (Объект.Услуги.Количество() > 0);	
			
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) 
			И ИзмениласьВалютаРасчетов
			И ПересчетНеобходим Тогда
			
			ТекстСообщение = "";
			
			Если ИзмениласьВалютаРасчетов Тогда 
				ТекстСообщение = ТекстСообщение + НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом!
					|Возможно, необходимо перезаполнить цены.'") + Символы.ПС + Символы.ПС;
			КонецЕсли;

			ТекстСообщение = ТекстСообщение + НСтр("ru = 'Пересчитать документ в соответствии с договором?'");
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьИзменениеДоговораФрагментЗавершение", ЭтотОбъект, 
			
			Новый Структура("СтруктураКурсыПред, СтруктураКурсы", СтруктураКурсыПред, СтруктураКурсы)), 
				ТекстСообщение,
				РежимДиалогаВопрос.ДаНет
			);
			Возврат;
		КонецЕсли;	
			
		// Пересчет табличной части
		// Цена, Сумма
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Товары");
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Услуги");
		// Расчет налогов
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(Объект, ДатаДокумента, "Товары", Объект.СтавкаНДС, Объект.СтавкаНСП, 
			Объект.БезналичныйРасчет, 
			?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
			?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(Объект, ДатаДокумента, "Услуги", Объект.СтавкаНДС, Объект.СтавкаНСП,
					Объект.БезналичныйРасчет, 
			?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
			?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(Объект, ДатаДокумента, "ОС", Объект.СтавкаНДС, Объект.СтавкаНСП,
					Объект.БезналичныйРасчет, 
			?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
			?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));
		
		ОбновитьПодвалФормы();
	//Иначе
	//	Объект.ДоговорКонтрагента = ДоговорКонтрагента; // Восстанавливаем автоматически очищеный договор.
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговораФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПоказатьПредупреждение(,"ДЛЯ ЦВС: ЭТОТ ВОПРОС ВРЕМЕННЫЙ- ЕСЛИ НУЖЕН- БУДЕМ ДОБАВЛЯТЬ ВО ВСЕХ ДОКУМЕНТАХ.", 30, "ВНИМАНИЕ");
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(Объект, ДатаДокумента, "Товары", Объект.СтавкаНДС, Объект.СтавкаНСП,
			Объект.БезналичныйРасчет, 
			?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
			?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(Объект, ДатаДокумента, "Услуги", Объект.СтавкаНДС, Объект.СтавкаНСП,
			Объект.БезналичныйРасчет, 
			?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
			?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(Объект, ДатаДокумента, "ОС", Объект.СтавкаНДС, Объект.СтавкаНСП,
			Объект.БезналичныйРасчет, 
			?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
			?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));

	ОбновитьПодвалФормы();
КонецПроцедуры

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Счета учета
	СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(СтруктураДанные.Организация, СтруктураДанные.Номенклатура);
	СтруктураДанные.Вставить("СчетУчета", СчетаУчетаНоменклатуры.СчетУчета);
	СтруктураДанные.Вставить("СчетДоходов", СчетаУчетаНоменклатуры.СчетДохода);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Процедура рассчитывает итоги для подвала формы.
//
&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Сумма");
	ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС");
	ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП");
	
КонецПроцедуры // ОбновитьПодвалФормы()

&НаСервере
Процедура РаспределитьАкцизНаСервере()
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.РаспределитьАкциз();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		ДатаДокумента, 
		"Товары",
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		ДатаДокумента, 
		"Услуги",
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		ДатаДокумента, 
		"ОС",
		Объект.СтавкаНДС, 
		Объект.СтавкаНСП,
		Объект.БезналичныйРасчет,
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Курс, 1),
		?(Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"), Объект.Кратность, 1));
КонецПроцедуры

&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаЗагрузки.Номенклатура));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
	КонецЦикла;
		
КонецПроцедуры // ПолучитьТоварыИзХранилища()

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

&НаСервере
Процедура ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
    ТоварыДобавлены = Ложь;
	
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
        Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда 
            Продолжить;
        КонецЕсли;
        НоваяСтрокаТабличнойЧасти = Объект.Товары.Добавить();
        НоваяСтрокаТабличнойЧасти.Номенклатура 	= СтрокаТаблицы.Номенклатура;
        НоваяСтрокаТабличнойЧасти.Количество 	= СтрокаТаблицы.Количество;
		НоваяСтрокаТабличнойЧасти.Сумма 	 	= СтрокаТаблицы.Сумма;
		НоваяСтрокаТабличнойЧасти.СуммаНДС 	 	= СтрокаТаблицы.СуммаНДС;
		НоваяСтрокаТабличнойЧасти.СуммаНСП 	 	= СтрокаТаблицы.СуммаНСП;
		
		// Счета учета
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		НоваяСтрокаТабличнойЧасти.СчетУчета 	= СтруктураДанные.СчетУчета;
		НоваяСтрокаТабличнойЧасти.СчетДоходов 	= СтруктураДанные.СчетДоходов;

		ТоварыДобавлены = Истина;
    КонецЦикла;
	
	Если ТоварыДобавлены Тогда
        Модифицированность = Истина;
    КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти





