
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Установка реквизитов формы.	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ПризнакСтраны = Объект.Контрагент.ПризнакСтраны;
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();	
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьНачальныеСвойстваСубконтоТаблицы();
	КонецЕсли;	

	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	УстановитьФункциональныеОпцииФормы();
	УстановитьПараметрыВыбора();
	УстановитьВидимостьДоступностьЭлементов();
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Товары");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Услуги");
	// Конец КопированиеСтрокТабличныхЧастей
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеБППовтИсп.ИспользоватьПодключаемоеОборудование();
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УстановитьНачальныеСвойстваСубконтоТаблицы();

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьСвязиПараметровВыбора();
	УстановитьТекущуюСтраницу();
	ОбновитьПодвалФормы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьНачальныеСвойстваСубконтоТаблицы();
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "МодифицированДоговораКонтрагента"
		И Параметр = Объект.ДоговорКонтрагента Тогда
		ОбработатьИзменениеДоговора(Истина);

	ИначеЕсли ИмяСобытия = "ПодборНоменклатурыПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище);
		
		ОбновитьПодвалФормы();
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);	
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Товары");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Услуги");
	КонецЕсли;
	// Конец КопированиеСтрокТабличныхЧастей
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату.
			Если Параметр[1] = Неопределено Тогда
				ТекШтрихкод = Параметр[0]; // Достаем штрихкод из основных данных
			Иначе
				ТекШтрихкод = Параметр[1][1]; // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			ПоискПоШтрихкодуЗавершение(ТекШтрихкод, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары"));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением, Объект.ВалютаДокумента);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные);
		КонецЕсли;	
	КонецЕсли;
	
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	ОбработатьИзменениеУчетнойПолитики();
	УстановитьФункциональныеОпцииФормы();
	ОбработатьИзменениеДоговора();
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер = "";

	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	ОбработатьИзменениеУчетнойПолитики();
	УстановитьФункциональныеОпцииФормы();
	
	// Договор автоматически очистился- заполнение по умолчанию.
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ОбработатьИзменениеДоговора();
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоТаблицыПриИзмененииОрганизации(
		Объект.Услуги,
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
		
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Вид операции.
//
&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.РасходыБудущихПериодов") Тогда
		Объект.Товары.Очистить();
		Объект.ОС.Очистить();
	КонецЕсли;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	УстановитьСвязиПараметровВыбора();	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флажка Безналичный расчет.
//
&НаКлиенте
Процедура БезналичныйРасчетПриИзменении(Элемент)
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	Если Объект.БезналичныйРасчет Тогда
		Объект.ЗначениеСтавкиНСП = 0;
		Объект.ЗначениеСтавкиНСПДляОС = 0;
	КонецЕсли;	
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"Товары",
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"Услуги",
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"ОС",
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСПДляОС,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
		
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ПризнакСтраны = СтруктураДанные.ПризнакСтраны;
	
	// Изменение признака страны
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		Объект.БезналичныйРасчет = Истина;
		// Ставки
		Объект.НДСНеПодтвержден = Ложь;
		Объект.ЗначениеСтавкиНСП = 0;
		Объект.ЗначениеСтавкиНСПДляОС = 0;
	ИначеЕсли ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ИмпортЭкспорт") Тогда	
		Объект.БезналичныйРасчет = Истина;
		// Ставки
		Объект.НДСНеПодтвержден = Ложь;
		Объект.ЗначениеСтавкиНДС = 0;
		Объект.ЗначениеСтавкиНСП = 0;
		Объект.ЗначениеСтавкиНСПДляОС = 0;
		// Акциз
		Объект.СуммаАкциза = 0;
		Объект.СпособРаспределенияАкциза = "";
		РаспределитьАкцизНаСервере();
	Иначе // КР или не заполнен Контрагент
		Объект.БезналичныйРасчет = Ложь;
		// Акциз
		Объект.СуммаАкциза = 0;
		Объект.СпособРаспределенияАкциза = "";
		РаспределитьАкцизНаСервере();
	КонецЕсли;	
	
	ОбработатьИзменениеДоговора();
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор контрагента.
//
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ОбработатьИзменениеДоговора();
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма акциза.
//
&НаКлиенте
Процедура СуммаАкцизаПриИзменении(Элемент)
	Если Объект.СуммаАкциза = 0 Тогда 
		Объект.СпособРаспределенияАкциза = "";
	КонецЕсли;
	
	РаспределитьАкцизНаСервере();
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Документ основание.
//
&НаКлиенте
Процедура СпособРаспределенияАкцизаПриИзменении(Элемент)
	РаспределитьАкцизНаСервере();
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Серия бланка СФ.
//
&НаКлиенте
Процедура СерияБланкаСФПриИзменении(Элемент)
	// Заполнение даты СФ
	Если ЗначениеЗаполнено(Объект.СерияБланкаСФ) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ДатаСФ) Тогда
			Объект.ДатаСФ = ДатаДокумента;
		КонецЕсли;	
	КонецЕсли;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НДС.
//
&НаКлиенте
Процедура ЗначениеСтавкиНДСПриИзменении(Элемент)
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"Товары",
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"Услуги",
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"ОС",
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСПДляОС,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
		
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл	 
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтранаВходитВЕАЭС);
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтранаВходитВЕАЭС);	
	КонецЦикла;
		
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НСП.
//
&НаКлиенте
Процедура ЗначениеСтавкиНСППриИзменении(Элемент)
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"Товары",
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"Услуги",
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
		
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтранаВходитВЕАЭС);	
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтранаВходитВЕАЭС);	
	КонецЦикла;	
		
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НСП (ОС)
//
&НаКлиенте
Процедура ЗначениеСтавкиНСПДляОСПриИзменении(Элемент)
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"ОС",
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСПДляОС,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
		
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флага НДС не подтвержден.
//
&НаКлиенте
Процедура НДСНеПодтвержденПриИзменении(Элемент)
	Объект.СерияБланкаСФ = "";
	Объект.НомерБланкаСФ = "";
	
	Если Объект.НДСНеПодтвержден Тогда
		// Акциз
		Объект.СуммаАкциза = 0;
		Объект.СпособРаспределенияАкциза = "";
		РаспределитьАкцизНаСервере();
	Иначе
		РассчитатьСуммыИНалоги();
	КонецЕсли;	
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флага Расчет по емкости.
//
&НаКлиенте
Процедура ИспользоватьДопЕдиницыПриИзменении(Элемент)
	Если НЕ Объект.ИспользоватьДопЕдиницы Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			СтрокаТабличнойЧасти.КоличествоДопЕдиницы = 0;
			СтрокаТабличнойЧасти.КоэффициентДопЕдиницы = 0;
		КонецЦикла;	
	КонецЕсли;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ИмпортОсвобожденныйОтНДС.
//
&НаКлиенте
Процедура ИмпортОсвобожденныйОтНДСПриИзменении(Элемент)
	// Товары
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл 
		СтрокаТабличнойЧасти.ИмпортОсвобожденныйОтНДС = ПредопределенноеЗначение("Перечисление.ИмпортОсвобожденныйОтНДС.ПустаяСсылка");
	КонецЦикла;	
	// Услуги
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл 
		СтрокаТабличнойЧасти.ИмпортОсвобожденныйОтНДС = ПредопределенноеЗначение("Перечисление.ИмпортОсвобожденныйОтНДС.ПустаяСсылка");
	КонецЦикла;	
	// ОС
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл 
		СтрокаТабличнойЧасти.ИмпортОсвобожденныйОтНДС = ПредопределенноеЗначение("Перечисление.ИмпортОсвобожденныйОтНДС.ПустаяСсылка");
	КонецЦикла;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура НеВключатьВРеестрСФПриИзменении(Элемент)
	Если Объект.НеВключатьВРеестрСФ Тогда
		Объект.СерияБланкаСФ = "";
		Объект.НомерБланкаСФ = "";
		Объект.ДатаСФ = Дата(1, 1, 1);
	КонецЕсли;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура КурсПриИзменении(Элемент)	
	РассчитатьСуммыИНалоги();
КонецПроцедуры

&НаКлиенте
Процедура КратностьПриИзменении(Элемент)
	РассчитатьСуммыИНалоги();	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Процедура - обработчик события ПередНачаломДобавления таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Всего") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;	
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда 
		ОбновитьПодвалФормы();
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, "Товары");	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП, 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));		
			
	// Расчет цены.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтранаВходитВЕАЭС);

	Если Объект.ИспользоватьДопЕдиницы Тогда
		РассчитатьКоличествоДопЕдиницСтроки(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Всего.
//
&НаКлиенте
Процедура ТоварыВсегоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));	
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП, 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтранаВходитВЕАЭС);	

	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП, 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаНДС.
//
&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)	
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		// Расчет суммы
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНСПСтрокиТабличнойЧастиПоступление(СтрокаТабличнойЧасти);		
	КонецЕсли;
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ИмпорОсвобожденныйОтНДС.
//
&НаКлиенте
Процедура ТоварыИмпортОСвобожденныйОтНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИмпортОсвобожденныйОтНДС) Тогда
		СтрокаТабличнойЧасти.СуммаНДС = 0;
		
	ИначеЕсли СтрокаТабличнойЧасти.СуммаНДС = 0 Тогда
		СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
		// Расчет налогов	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			?(СтранаВходитВЕАЭС, Истина, Ложь),
			Объект.ЗначениеСтавкиНДС, 
			Объект.ЗначениеСтавкиНСП, 
			?(СтранаВходитВЕАЭС, Истина, Ложь),
			СтрокаТабличнойЧасти.СуммаАкциза,
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	КонецЕсли;
		
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода КоэффициентДопЕдиницы.
//
&НаКлиенте
Процедура ТоварыКоэффициентДопЕдиницыПриИзменении(Элемент)
	
	Если Объект.ИспользоватьДопЕдиницы Тогда
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		РассчитатьКоличествоДопЕдиницСтроки(СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

// Процедура - обработчик события ПередНачаломДобавления таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Всего") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;	
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПередНачаломИзменения таблицы Товары.
//
&НаКлиенте
Процедура УслугиПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоСтроки(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда 
		ОбновитьПодвалФормы();
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, "Услуги");	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП, 
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтранаВходитВЕАЭС);	
		
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Всего.
//
&НаКлиенте
Процедура УслугиВсегоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));	
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП, 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтранаВходитВЕАЭС);	

	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП, 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));

	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаНДС.
//
&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
		// Расчет суммы
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНСПСтрокиТабличнойЧастиПоступление(СтрокаТабличнойЧасти);		
	КонецЕсли;
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СчетРасхода.
//
&НаКлиенте
Процедура УслугиСчетРасходаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода УслугиСубконто1.
//
&НаКлиенте
Процедура УслугиСубконто1ПриИзменении(Элемент)
	ПриИзмененииСубконто(1);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода УслугиСубконто1.
//
&НаКлиенте
Процедура УслугиСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода УслугиСубконто2.
//
&НаКлиенте
Процедура УслугиСубконто2ПриИзменении(Элемент)
	ПриИзмененииСубконто(2);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода УслугиСубконто2.
//
&НаКлиенте
Процедура УслугиСубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода УслугиСубконто3.
//
&НаКлиенте
Процедура УслугиСубконто3ПриИзменении(Элемент)
	ПриИзмененииСубконто(3);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода УслугиСубконто3.
//
&НаКлиенте
Процедура УслугиСубконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

// Процедура - обработчик события ПередНачаломДобавления таблицы ОС.
//
&НаКлиенте
Процедура ОСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Всего") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;	
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы ОС.
//
&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда 
		ОбновитьПодвалФормы();
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы ОС.
//
&НаКлиенте
Процедура ОСПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Всего.
//
&НаКлиенте
Процедура ОСВсегоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСПДляОС,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));	
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСПДляОС, 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));

	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСПДляОС, 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаНДС.
//
&НаКлиенте
Процедура ОССуммаНДСПриИзменении(Элемент)
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
		// Расчет суммы
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНСПСтрокиТабличнойЧастиПоступление(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	ОбновитьПодвалФормы();	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ИмпорОсвобожденныйОтНДС.
//
&НаКлиенте
Процедура ОСИмпортОсвобожденныйОтНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИмпортОсвобожденныйОтНДС) Тогда
		СтрокаТабличнойЧасти.СуммаНДС = 0;
		
	ИначеЕсли СтрокаТабличнойЧасти.СуммаНДС = 0 Тогда
		СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
		// Расчет налогов	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			?(СтранаВходитВЕАЭС, Истина, Ложь),
			Объект.ЗначениеСтавкиНДС, 
			Объект.ЗначениеСтавкиНСПДляОС, 
			?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
			СтрокаТабличнойЧасти.СуммаАкциза,
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик события действия команды Подбор в табличную часть Товары.
// Открывает форму подбора.
//
&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	РаботаСПодборомНоменклатурыКлиент.ОткрытьПодбор(ЭтаФорма, "Товары", "Поступление");
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьАкциз(Команда)
	Если Объект.Товары.Количество() > 0
		Или Объект.Услуги.Количество() > 0
		Или Объект.ОС.Количество() >0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросРаспределитьАкциз", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Сумма акциза будет распределена и налоги будут перерасчитаны. Продолжить?'");
	
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		РаспределитьАкцизНаСервере();	
	КонецЕсли;
КонецПроцедуры

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьТоварыИзФайла(Команда)
    ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
    ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "ПоступлениеТоваровУслуг.Товары";
    ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка списка товаров из файла'");
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьТоварыИзФайлаЗавершение", ЭтотОбъект);
    ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкодуТовары(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", 
		ЭтотОбъект, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары")), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
		
КонецПроцедуры
	
&НаКлиенте
Процедура ПоискПоШтрихкодуУслуги(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", 
		ЭтотОбъект, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Услуги")), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
    
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
        ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1), ДополнительныеПараметры.ИмяТабличнойЧасти);
	КонецЕсли;	

КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	ПодключаемоеОборудованиеБПКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, "Товары");
КонецПроцедуры // ЗагрузитьДанныеИзТСД()
// Конец ПодключаемоеОборудование

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросРаспределитьАкциз(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РаспределитьАкцизНаСервере();	
	КонецЕсли; 
КонецПроцедуры

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьТоварыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
    Если АдресЗагруженныхДанных = Неопределено Тогда 
        Возврат;
    КонецЕсли;
    ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	ПризнакЗачетаНДСП = ДанныеУчетнойПолитики.УказыватьПризнакЗачетаНДСПриПоступлении;
	
	Если ПризнакСтраны = Перечисления.ПризнакиСтраны.ЕАЭС Тогда
		Элементы.СтраницаСопроводительнаяНакладная.Видимость = Истина;
		Элементы.БезналичныйРасчет.Видимость = Ложь;
		// Ставки
		Элементы.НДСНеПодтвержден.Видимость = Ложь;
		Элементы.ЗначениеСтавкиНДС.Видимость = Истина;
		Элементы.ЗначениеСтавкиНСП.Видимость = Ложь;
		Элементы.ЗначениеСтавкиНСПДляОС.Видимость = Ложь;
		// Счет-фактура
		Элементы.СерияБланкаСФ.Видимость = Истина;
		Элементы.НомерБланкаСФ.Видимость = Истина;
		Элементы.ДатаСФ.Видимость = Истина;
		Элементы.НеВключатьВРеестрСФ.Видимость = Истина;
		// Курс прихода
		Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда 
			Элементы.Курс.Видимость = Ложь;
			Элементы.Кратность.Видимость = Ложь;
		Иначе
			Элементы.Курс.Видимость = Истина;
			Если Объект.Кратность > 1 Тогда
				Элементы.Кратность.Видимость = Истина;
			Иначе
				Элементы.Кратность.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		// Сумма и Всего
		Элементы.ТоварыСумма.Видимость = Истина;
		Элементы.ТоварыВсего.Заголовок = "Всего";
		// Акциз
		Элементы.СуммаАкциза.Видимость = Истина;
		Элементы.СпособРаспределенияАкциза.Видимость = Истина;
		Элементы.РаспределитьАкциз.Видимость = Истина;
		Если Объект.СуммаАкциза = 0 Тогда 
			Элементы.ТоварыСуммаАкциза.Видимость = Ложь;
			Элементы.УслугиСуммаАкциза.Видимость = Ложь;
			Элементы.ОССуммаАкциза.Видимость = Ложь;
		Иначе 
			Элементы.ТоварыСуммаАкциза.Видимость = Истина;
			Элементы.УслугиСуммаАкциза.Видимость = Истина;
			Элементы.ОССуммаАкциза.Видимость = Истина;
		КонецЕсли;	
			
		Элементы.ТоварыВес.Видимость = Истина;
		Элементы.УслугиВес.Видимость = Истина;
		Элементы.ОСВес.Видимость = Истина;
		// Импорт
		Элементы.ТоварыИмпортОСвобожденныйОтНДС.Видимость = Объект.ИмпортОсвобожденныйОтНДС.Пустая();
		Элементы.ОСИмпортОсвобожденныйОтНДС.Видимость = Объект.ИмпортОсвобожденныйОтНДС.Пустая();    		
		// Сумма НДС и НСП
		Элементы.ТоварыСуммаНДС.Видимость = Истина;
		Элементы.УслугиСуммаНДС.Видимость = Истина;
		Элементы.ОССуммаНДС.Видимость = Истина;
		Элементы.ТоварыСуммаНСП.Видимость = Ложь;
		Элементы.УслугиСуммаНСП.Видимость = Ложь;
		Элементы.ОССуммаНСП.Видимость = Ложь;
		// Зачет НДС
		Элементы.ТоварыЗачетНДС.Видимость = ПризнакЗачетаНДСП;
		Элементы.УслугиЗачетНДС.Видимость = ПризнакЗачетаНДСП;
		Элементы.ОСЗачетНДС.Видимость = ПризнакЗачетаНДСП;
		// Доп единицы
		Элементы.ТоварыКоличествоДопЕдиницы.Видимость = Объект.ИспользоватьДопЕдиницы;
		Элементы.ТоварыКоэффициентДопЕдиницы.Видимость = Объект.ИспользоватьДопЕдиницы;
		// Подвал
		Элементы.ИтогСуммаНСП.Видимость = Ложь;
		Элементы.ИтогСуммаНДС.Видимость = Истина;
		
	ИначеЕсли ПризнакСтраны = Перечисления.ПризнакиСтраны.ИмпортЭкспорт Тогда
		Элементы.СтраницаСопроводительнаяНакладная.Видимость = Ложь;
		Элементы.БезналичныйРасчет.Видимость = Ложь;
		// Сумма и Всего
		Элементы.ТоварыСумма.Видимость = Ложь;
		Элементы.ТоварыВсего.Заголовок = "Сумма";
		// Ставки
		Элементы.НДСНеПодтвержден.Видимость = Ложь;
		Элементы.ЗначениеСтавкиНДС.Видимость = Ложь;
		Элементы.ЗначениеСтавкиНСП.Видимость = Ложь;
		Элементы.ЗначениеСтавкиНСПДляОС.Видимость = Ложь;
		// Счет-фактура
		Элементы.СерияБланкаСФ.Видимость = Ложь;
		Элементы.НомерБланкаСФ.Видимость = Ложь;
		Элементы.ДатаСФ.Видимость = Ложь;
		Элементы.НеВключатьВРеестрСФ.Видимость = Ложь;
		// Курс прихода
		Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда 
			Элементы.Курс.Видимость = Ложь;
			Элементы.Кратность.Видимость = Ложь;
		Иначе
			Элементы.Курс.Видимость = Истина;
			Если Объект.Кратность > 1 Тогда
				Элементы.Кратность.Видимость = Истина;
			Иначе
				Элементы.Кратность.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		// Акциз
		Элементы.СуммаАкциза.Видимость = Ложь;
		Элементы.СпособРаспределенияАкциза.Видимость = Ложь;
		Элементы.РаспределитьАкциз.Видимость = Ложь;
		
		Элементы.ТоварыВес.Видимость = Ложь;
		Элементы.ТоварыИмпортОСвобожденныйОтНДС.Видимость = Ложь;
		Элементы.ТоварыСуммаАкциза.Видимость = Ложь;
		Элементы.УслугиСуммаАкциза.Видимость = Ложь;
		Элементы.ОССуммаАкциза.Видимость = Ложь;
		// Услуги
		Элементы.УслугиВес.Видимость = Ложь;
		// ОС
		Элементы.ОСВес.Видимость = Ложь;
		Элементы.ОСИмпортОсвобожденныйОтНДС.Видимость = Ложь;
		// Сумма НДС и НСП
		Элементы.ТоварыСуммаНДС.Видимость = Ложь;
		Элементы.УслугиСуммаНДС.Видимость = Ложь;
		Элементы.ОССуммаНДС.Видимость = Ложь;
		Элементы.ТоварыСуммаНСП.Видимость = Ложь;
		Элементы.УслугиСуммаНСП.Видимость = Ложь;
		Элементы.ОССуммаНСП.Видимость = Ложь;
		// Зачет НДС
		Элементы.ТоварыЗачетНДС.Видимость = Ложь;
		Элементы.УслугиЗачетНДС.Видимость = Ложь;
		Элементы.ОСЗачетНДС.Видимость = Ложь;
		// Доп единицы
		Элементы.ТоварыКоличествоДопЕдиницы.Видимость = Объект.ИспользоватьДопЕдиницы;
		Элементы.ТоварыКоэффициентДопЕдиницы.Видимость = Объект.ИспользоватьДопЕдиницы;
		// Подвал
		Элементы.ИтогСуммаНСП.Видимость = Ложь;
		Элементы.ИтогСуммаНДС.Видимость = Ложь;
		
	Иначе // КР или не заполнен Контрагент	
		Элементы.СтраницаСопроводительнаяНакладная.Видимость = Ложь;
		Элементы.БезналичныйРасчет.Видимость = ДанныеУчетнойПолитики.ПлательщикНСП;
		// Сумма
		Элементы.ТоварыСумма.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И Объект.ЗначениеСтавкиНДС > 0;
		Если Элементы.ТоварыСумма.Видимость Тогда
			Элементы.ТоварыВсего.Заголовок = "Всего";
		Иначе
			Элементы.ТоварыВсего.Заголовок = "Сумма";
		КонецЕсли;	
		// Ставки
		Элементы.НДСНеПодтвержден.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС;	
		Элементы.ЗначениеСтавкиНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС;
		// Счет-фактура
		Элементы.СерияБланкаСФ.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И НЕ Объект.НДСНеПодтвержден;
		Элементы.НомерБланкаСФ.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И НЕ Объект.НДСНеПодтвержден;
		Элементы.ДатаСФ.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И НЕ Объект.НДСНеПодтвержден;
		Элементы.НеВключатьВРеестрСФ.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И НЕ Объект.НДСНеПодтвержден;
		// Курс прихода
		Элементы.Курс.Видимость = Ложь;
		Элементы.Кратность.Видимость = Ложь;
		// Акциз
		Элементы.СуммаАкциза.Видимость = Ложь;
		Элементы.СпособРаспределенияАкциза.Видимость = Ложь;
		Элементы.РаспределитьАкциз.Видимость = Ложь;

		Элементы.РаспределитьАкциз.Видимость = Ложь;
		Элементы.ТоварыСуммаАкциза.Видимость = Ложь;
		Элементы.УслугиСуммаАкциза.Видимость = Ложь;
		Элементы.ОССуммаАкциза.Видимость = Ложь;
		// Товары
		Элементы.ТоварыКоличествоДопЕдиницы.Видимость = Объект.ИспользоватьДопЕдиницы;
		Элементы.ТоварыКоэффициентДопЕдиницы.Видимость = Объект.ИспользоватьДопЕдиницы;
		Элементы.ТоварыВес.Видимость = Ложь;
		Элементы.ТоварыИмпортОСвобожденныйОтНДС.Видимость = Ложь;
		// Услуги
		Элементы.УслугиВес.Видимость = Ложь;
		// ОС
		Элементы.ОСВес.Видимость = Ложь;
		Элементы.ОСИмпортОсвобожденныйОтНДС.Видимость = Ложь;
		// Сумма НДС
		Элементы.ТоварыСуммаНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И Объект.ЗначениеСтавкиНДС > 0;
		Элементы.УслугиСуммаНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И Объект.ЗначениеСтавкиНДС > 0;
		Элементы.ОССуммаНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И Объект.ЗначениеСтавкиНДС > 0;
		// Сумма НСП
		Если Объект.БезналичныйРасчет Тогда
			Элементы.ЗначениеСтавкиНСП.Видимость = Ложь;
			Элементы.ЗначениеСтавкиНСПДляОС.Видимость = Ложь;
			Элементы.ТоварыСуммаНСП.Видимость = Ложь;
			Элементы.УслугиСуммаНСП.Видимость = Ложь;
			Элементы.ОССуммаНСП.Видимость = Ложь;
		Иначе 
			Элементы.ЗначениеСтавкиНСП.Видимость = ДанныеУчетнойПолитики.ПлательщикНСП;
			Элементы.ЗначениеСтавкиНСПДляОС.Видимость = ДанныеУчетнойПолитики.ПлательщикНСП;
			Элементы.ТоварыСуммаНСП.Видимость = ДанныеУчетнойПолитики.ПлательщикНСП;
			Элементы.УслугиСуммаНСП.Видимость = ДанныеУчетнойПолитики.ПлательщикНСП;
			Элементы.ОССуммаНСП.Видимость = ДанныеУчетнойПолитики.ПлательщикНСП;
		КонецЕсли;
		// Зачет НДС
		Элементы.ТоварыЗачетНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И Объект.ЗначениеСтавкиНДС > 0 И ПризнакЗачетаНДСП;
		Элементы.УслугиЗачетНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И Объект.ЗначениеСтавкиНДС > 0 И ПризнакЗачетаНДСП;
		Элементы.ОСЗачетНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И Объект.ЗначениеСтавкиНДС > 0 И ПризнакЗачетаНДСП;
		// Подвал
		Если Объект.БезналичныйРасчет Тогда
			Элементы.ИтогСуммаНСП.Видимость = Ложь;
		Иначе
			Элементы.ИтогСуммаНСП.Видимость = ДанныеУчетнойПолитики.ПлательщикНСП;
		КонецЕсли;	
		Элементы.ИтогСуммаНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС;
	КонецЕсли;	
		
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.РасходыБудущихПериодов Тогда 
		Элементы.Склад.Видимость = Ложь;
		Элементы.Товары.Видимость = Ложь;
		Элементы.ОС.Видимость = Ложь;
	Иначе
		Элементы.Склад.Видимость = Истина;
		Элементы.Товары.Видимость = Истина;
		Элементы.ОС.Видимость = Истина;
	КонецЕсли;
	
	Если Объект.НеВключатьВРеестрСФ Тогда
		Элементы.СерияБланкаСФ.Доступность 	= Ложь;
		Элементы.НомерБланкаСФ.Доступность 	= Ложь;
		Элементы.ДатаСФ.Доступность			= Ложь;
	Иначе
		Элементы.СерияБланкаСФ.Доступность 	= Истина;
		Элементы.НомерБланкаСФ.Доступность 	= Истина;
		Элементы.ДатаСФ.Доступность			= Истина;
	КонецЕсли;		
КонецПроцедуры 

// Процедура устанавливает текущую страницу при открытии формы.
//
&НаКлиенте
Процедура УстановитьТекущуюСтраницу()	
	Если Объект.Товары.Количество() > 0 Тогда 
		Возврат;
	ИначеЕсли Объект.Услуги.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаУслуги;
	ИначеЕсли Объект.ОС.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаОсновныеСредства;
	КонецЕсли;	
КонецПроцедуры

// Процедура устанавливает функциональные опции формы документа.
//
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма, Объект.Организация, ДатаДокумента);
КонецПроцедуры

// Процедура - Установить параметры выбора
//
&НаСервере
Процедура УстановитьПараметрыВыбора()
	// Основные средства.
	МассивСчетов = БухгалтерскийУчетВызовСервераПовтИсп.СчетаУчетаОсновныхСредствИНематериальныхАктивов();
	ФиксированныйМассивСчетов = Новый ФиксированныйМассив(МассивСчетов);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", ФиксированныйМассивСчетов);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ОССчетУчета.ПараметрыВыбора = НовыеПараметры;
КонецПроцедуры // УстановитьПараметрыВыбора()

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением, ВалютаДокумента)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	ВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаНовая);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат);
		
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура - Пересчитать курс кратность валюты расчетов
//
// Параметры:
//  СтруктураДанные	- Структура - 
//		* ВалютаКурсКратность - Структура
//			* Курс - Число
//			* Кратность - Число
//
&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		Или Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(Объект.Курс) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(КурсНовый) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'На дату документа у валюты расчетов %1 был задан курс.
									|Установить курс расчетов %2 в соответствии с курсом валюты?'"),
									КурсВалютыСтрокой, КурсНовыйВалютыСтрокой);
		
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПересчитатьКурсКратностьВалютыДокументаЗавершение", ЭтотОбъект, Новый Структура("КратностьНовый, КурсНовый", КратностьНовый, КурсНовый)), ТекстСообщения, Режим, 0);
		Возврат;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КратностьНовый = ДополнительныеПараметры.КратностьНовый;
	КурсНовый = ДополнительныеПараметры.КурсНовый;
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Курс = КурсНовый;
		Объект.Кратность = КратностьНовый;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает связи параметров выбора.
//
&НаКлиенте
Процедура УстановитьСвязиПараметровВыбора()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.РасходыБудущихПериодов") Тогда
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.КР"));
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ПризнакСтраны", Новый ФиксированныйМассив(НовыйМассив));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Контрагент.ПараметрыВыбора = НовыеПараметры;
	Иначе
		// Без отбора.
		НовыйМассив = Новый Массив();
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Контрагент.ПараметрыВыбора = НовыеПараметры;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыВыбора()

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация, Объект.ВидОперации);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию);
	
	СтруктураДанные.Вставить(
		"ПризнакСтраны",
		Контрагент.ПризнакСтраны);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанию
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Период, Контрагент, ДоговорКонтрагента, ВидОперации)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорКонтрагента.ВалютаРасчетов);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаРасчетов, Период));
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНалоги",
		ДоговорКонтрагента.СуммаВключаетНалоги);
	
	СчетаУчета = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(ДоговорКонтрагента.Организация, ДоговорКонтрагента.Владелец, ДоговорКонтрагента);
	СтруктураДанные.Вставить(
		"СчетРасчетов",
		СчетаУчета.СчетРасчетовПоставщика);
		
	ЗначенияСтавокНДСиНСП = УчетНДСВызовСервера.ПолучитьЗначенияСтавокНДСиНСП(Период, ДоговорКонтрагента); 
	
	СтруктураДанные.Вставить(
		"ЗначениеСтавкиНДС",
		ЗначенияСтавокНДСиНСП.ЗначениеСтавкиНДС);
		
	СтруктураДанные.Вставить(
		"ЗначениеСтавкиНСП",
		ЗначенияСтавокНДСиНСП.ЗначениеСтавкиНСП);
		
	СтруктураДанные.Вставить(
		"ЗначениеСтавкиНСПДляОС",
		ЗначенияСтавокНДСиНСП.ЗначениеСтавкиНСПДляОС);	
		
	СтруктураДанные.Вставить(
		"НомерДоговора",
		ДоговорКонтрагента.НомерДоговора);
		
	СтруктураДанные.Вставить(
		"ДатаДоговора",
		ДоговорКонтрагента.ДатаДоговора);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаКлиенте
Процедура ОбработатьИзменениеДоговора(МодифицированДоговор = Ложь)
		
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(ДатаДокумента, Объект.Контрагент, Объект.ДоговорКонтрагента, Объект.ВидОперации);

	// Обработка изменения валюты
	СтруктураКурсыПред = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	
	Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
	Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
	Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	
	СтруктураКурсы = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Обработка изменения налогооблажения
	Объект.СуммаВключаетНалоги 	= Ложь;
	
	Объект.ЗначениеСтавкиНДС 		= СтруктураДанные.ЗначениеСтавкиНДС;
	Объект.ЗначениеСтавкиНСП 		= СтруктураДанные.ЗначениеСтавкиНСП;
	Объект.ЗначениеСтавкиНСПДляОС 	= СтруктураДанные.ЗначениеСтавкиНСПДляОС;
	
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ИмпортЭкспорт") ИЛИ Объект.НДСНеПодтвержден Тогда		
		Объект.ЗначениеСтавкиНДС 		= 0;
		Объект.ЗначениеСтавкиНСП 		= 0;
		Объект.ЗначениеСтавкиНСПДляОС 	= 0;
	КонецЕсли;
	
	Если НЕ ДанныеУчетнойПолитики.ПлательщикНСП Тогда  
		Объект.ЗначениеСтавкиНСП 		= 0;
		Объект.ЗначениеСтавкиНСПДляОС 	= 0;
	КонецЕсли;
	
	// Переодпеределени для ЕАЭС.
	Если СтранаВходитВЕАЭС Тогда 
		Объект.СуммаВключаетНалоги = Истина;
		Объект.БезналичныйРасчет = Истина;
	КонецЕсли;	
	
	Объект.НомерКонтракта = СтруктураДанные.НомерДоговора;	
	Объект.ДатаКонтракта = СтруктураДанные.ДатаДоговора;	
	
	// Обработка изменения отражения в учете
	Объект.СчетРасчетов = СтруктураДанные.СчетРасчетов;
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, 
		"Товары", 
		Объект.СуммаВключаетНалоги, 
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		Объект.БезналичныйРасчет, 
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, 
		"Услуги", 
		Объект.СуммаВключаетНалоги, 
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		Объект.БезналичныйРасчет, 
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, 
		"ОС", 
		Объект.СуммаВключаетНалоги, 
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСПДляОС,
		Объект.БезналичныйРасчет, 
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));

	// Расчет цены.
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтранаВходитВЕАЭС);
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтранаВходитВЕАЭС);
	КонецЦикла;
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

	// Заполнение по данным номенклатуры
	Если ИмяТабличнойЧасти = "Товары" Тогда 
		СтрокаТабличнойЧасти.СчетУчета = СтруктураДанные.СчетУчета;
	ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда 
		СтрокаТабличнойЧасти.СчетРасхода = СтруктураДанные.СчетРасхода;
		
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
			ЭтотОбъект, СтрокаТабличнойЧасти, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда  
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;	
	
	ОбновитьПодвалФормы();
КонецПроцедуры	

&НаКлиенте
Процедура ОбработатьИзменениеУчетнойПолитики()
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);	
	
	Если НЕ ДанныеУчетнойПолитики.ПлательщикНДС Тогда
		Объект.СерияБланкаСФ = "";
		Объект.НомерБланкаСФ = "";
		Объект.ДатаСФ = Дата(0001,01,01);
		Объект.НеВключатьВРеестрСФ = Ложь;
		Объект.НДСНеПодтвержден = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Счета учета
	СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(СтруктураДанные.Организация, СтруктураДанные.Номенклатура);
	СтруктураДанные.Вставить("СчетУчета", СчетаУчетаНоменклатуры.СчетУчета);
	СтруктураДанные.Вставить("СчетРасхода", СчетаУчетаНоменклатуры.СчетРасхода);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Процедура рассчитывает итоги для подвала формы.
//
&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Всего");
	ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС");
	ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП");
	
КонецПроцедуры // ОбновитьПодвалФормы()

&НаСервере
Процедура РаспределитьАкцизНаСервере()
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.РаспределитьАкциз();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"Товары",
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет), 
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"Услуги",
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет), 
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"ОС",
		?(СтранаВходитВЕАЭС, Истина, Ложь),
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСПДляОС,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет), 
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
КонецПроцедуры

// Процедура - обработчик подбора товаров.
//
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	// Распределение акциза будем делать только для пустой табличной части.
	РаспределитьАкциз = Объект.Товары.Количество() = 0;
	СтранаВходитВЕАЭС = ПризнакСтраны = Перечисления.ПризнакиСтраны.ЕАЭС;
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаЗагрузки.Номенклатура));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

		// Заполнение по данным номенклатуры
		СтрокаТабличнойЧасти.СчетУчета 	 = СтруктураДанные.СчетУчета;
		СтрокаТабличнойЧасти.Количество  = СтрокаЗагрузки.Количество;
		
		// Рассчет налогов будет произведен для всей табличной части
		// или не произведен, если табличная часть была не пустой.
		Если СтранаВходитВЕАЭС Тогда
			Продолжить;
		КонецЕсли;	

		// Расчет суммы
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			Ложь,
			Объект.ЗначениеСтавкиНДС, 
			Объект.ЗначениеСтавкиНСП, 
			Объект.БезналичныйРасчет,
			СтрокаТабличнойЧасти.СуммаАкциза,
			Объект.Курс,
			Объект.Кратность);
		// Расчет налогов
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			Ложь,
			Объект.ЗначениеСтавкиНДС, 
			Объект.ЗначениеСтавкиНСП,
			Объект.БезналичныйРасчет,
			СтрокаТабличнойЧасти.СуммаАкциза,
			Объект.Курс,
			Объект.Кратность);
	КонецЦикла;
	
	Если РаспределитьАкциз Тогда 
		РаспределитьАкцизНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ПолучитьТоварыИзХранилища()

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаСервере
Процедура ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
    ТоварыДобавлены = Ложь;
	
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
        Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда 
            Продолжить;
        КонецЕсли;
        НоваяСтрокаТабличнойЧасти = Объект.Товары.Добавить();
        НоваяСтрокаТабличнойЧасти.Номенклатура 	= СтрокаТаблицы.Номенклатура;
        НоваяСтрокаТабличнойЧасти.Количество 	= СтрокаТаблицы.Количество;
		НоваяСтрокаТабличнойЧасти.Сумма 	 	= СтрокаТаблицы.Сумма;
		НоваяСтрокаТабличнойЧасти.СуммаНДС 	 	= СтрокаТаблицы.СуммаНДС;
		НоваяСтрокаТабличнойЧасти.СуммаНСП 	 	= СтрокаТаблицы.СуммаНСП;
		
		// Счета учета
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		НоваяСтрокаТабличнойЧасти.СчетУчета 	= СтруктураДанные.СчетУчета;

		ТоварыДобавлены = Истина;
    КонецЦикла;
	
	Если ТоварыДобавлены Тогда
        Модифицированность = Истина;
    КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// ПодключаемоеОборудование

// Процедура - Получены штрихкоды
//
// Параметры:
//  ДанныеШтрикодов	 - Структура/Массив - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов, ИмяТабличнойЧасти) Экспорт
	
	Модифицированность = Истина;
	
	НедобавленныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов, ИмяТабличнойЧасти);
	
	// Неизвестные штрихкоды.
	Если НедобавленныеШтрихкоды.НеизвестныеШтрихкоды.Количество() > 0 Тогда
		Для Каждого СтруктураДанные Из НедобавленныеШтрихкоды.НеизвестныеШтрихкоды Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Данные по штрихкоду не найдены: %1'"), СтруктураДанные.Штрихкод);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	// Штрихкоды некорректного типа.
	ИначеЕсли НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа.Количество() > 0 Тогда 
		Для Каждого СтруктураДанные Из НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Найденная по штрихкоду %1 номенклатура: ""%2"", не подходит для этой табличной части'"),
				СтруктураДанные.ТекШтрихкод, СтруктураДанные.Номенклатура);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоШтрихкоду(ТекШтрихкод)
	
	Номенклатура = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьНоменклатуруПоШтрихкоду(ТекШтрихкод);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", Номенклатура);
	СтруктураДанные.Вставить("ТипНоменклатурыУслуга", ?(ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура"), Номенклатура.Услуга, Ложь));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПоШтрихкоду()

// Функция - Заполнить по данным штрихкодов
//
// Параметры:
//  ДанныеШтрикодов		 - 	 - Структура/Массив	 - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
// 
// Возвращаемое значение:
//  Структура - Массивы неизвестных штрих кодов
//
&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов, ИмяТабличнойЧасти) 
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	Для каждого ТекШтрихкод Из МассивШтрихкодов Цикл
		СтруктураДанные = ПолучитьДанныеПоШтрихкоду(ТекШтрихкод);
		
		Если НЕ ЗначениеЗаполнено(СтруктураДанные.Номенклатура) Тогда 
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли ИмяТабличнойЧасти = "Товары"
			И СтруктураДанные.ТипНоменклатурыУслуга Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("ТекШтрихкод, Номенклатура", ТекШтрихкод, СтруктураДанные.Номенклатура));
		ИначеЕсли ИмяТабличнойЧасти = "Услуги"
			И НЕ СтруктураДанные.ТипНоменклатурыУслуга Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("ТекШтрихкод, Номенклатура", ТекШтрихкод, СтруктураДанные.Номенклатура));
		Иначе 
			СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
			СтрокаТабличнойЧасти.Номенклатура = СтруктураДанные.Номенклатура;
			СтрокаТабличнойЧасти.Количество = ТекШтрихкод.Количество;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",
		НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);

КонецФункции // ЗаполнитьПоДаннымШтрихкодов()
// Конец ПодключаемоеОборудование

&НаКлиенте
Процедура РассчитатьКоличествоДопЕдиницСтроки(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.КоличествоДопЕдиницы = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.КоэффициентДопЕдиницы;	

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыИНалоги()

	СтранаВходитВЕАЭС = ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			?(СтранаВходитВЕАЭС, Истина, Ложь),
			Объект.ЗначениеСтавкиНДС, 
			Объект.ЗначениеСтавкиНСП,
			?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
			СтрокаТабличнойЧасти.СуммаАкциза,
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			?(СтранаВходитВЕАЭС, Истина, Ложь),
			Объект.ЗначениеСтавкиНДС, 
			Объект.ЗначениеСтавкиНСП, 
			?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
			СтрокаТабличнойЧасти.СуммаАкциза,
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1));	
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			?(СтранаВходитВЕАЭС, Истина, Ложь),
			Объект.ЗначениеСтавкиНДС, 
			Объект.ЗначениеСтавкиНСП,
			?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
			СтрокаТабличнойЧасти.СуммаАкциза,
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			?(СтранаВходитВЕАЭС, Истина, Ложь),
			Объект.ЗначениеСтавкиНДС, 
			Объект.ЗначениеСтавкиНСП, 
			?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
			СтрокаТабличнойЧасти.СуммаАкциза,
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	КонецЦикла;		
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			?(СтранаВходитВЕАЭС, Истина, Ложь),
			Объект.ЗначениеСтавкиНДС, 
			Объект.ЗначениеСтавкиНСПДляОС,
			?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
			СтрокаТабличнойЧасти.СуммаАкциза,
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1));	
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			?(СтранаВходитВЕАЭС, Истина, Ложь),
			Объект.ЗначениеСтавкиНДС, 
			Объект.ЗначениеСтавкиНСПДляОС, 
			?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
			СтрокаТабличнойЧасти.СуммаАкциза,
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	КонецЦикла;
		
	ОбновитьПодвалФормы();	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииРаботаССубконто

&НаСервере
Процедура УстановитьНачальныеСвойстваСубконтоТаблицы()
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоТаблицы(
		Объект.Услуги,
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"УслугиСубконто", "Субконто", "СчетРасхода");
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	Результат.СкрыватьСубконто = Ложь;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСубконто(
		ЭтотОбъект, 
		СтрокаТаблицы,
		НомерСубконто, 
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Элементы.Услуги.ТекущиеДанные, 
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура ТоварыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВставитьСтроки(Команда)
	
	ВставитьСтроки("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКопироватьСтроки(Команда)
	
	КопироватьСтроки("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиВставитьСтроки(Команда)
	
	ВставитьСтроки("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
