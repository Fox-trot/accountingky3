
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Установка реквизитов формы.	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	УПП = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();	
	
	УстановитьФункциональныеОпцииФормы();

	// Связь субконто
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл							 
		БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетРасхода", "Услуги", СтрокаТабличнойЧасти, ПоляОбъекта);
	КонецЦикла;

	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьДоступностьЭлементов();
	УстановитьСвязиПараметровВыбора();
	УстановитьТекущуюСтраницу();
	ОбновитьПодвалФормы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");									
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл							 
		БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетРасхода", "Услуги", СтрокаТабличнойЧасти, ПоляОбъекта);
	КонецЦикла;
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "МодифицированДоговораКонтрагента" Тогда
		ОбработатьИзменениеДоговора(Истина);

	ИначеЕсли ИмяСобытия = "ПодборНоменклатурыПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище);
		
		ОбновитьПодвалФормы();
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением, Объект.ВалютаДокумента);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные);
		КонецЕсли;	
	КонецЕсли;
	
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	
	УстановитьФункциональныеОпцииФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер = "";
	Объект.БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Объект.Организация);

	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	УстановитьФункциональныеОпцииФормы();
	
	// Договор автоматически очистился- заполнение по умолчанию.
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ОбработатьИзменениеДоговора();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Вид операции.
//
&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	УстановитьСвязиПараметровВыбора();	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флажка Безналичный расчет.
//
&НаКлиенте
Процедура БезналичныйРасчетПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
	
	СтранаВходитВЕАЭС = Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"Товары",
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"Услуги",
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"ОС",
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	Объект.ПризнакСтраны = СтруктураДанные.ПризнакСтраны;
	
	// Изменение признака страны
	Если Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		Объект.БезналичныйРасчет = Истина;
		// Ставки
		Объект.НДСНеПодтвержден = Истина;
		Объект.ЗначениеСтавкиНСП = 0;
	ИначеЕсли Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ИмпортЭкспорт") Тогда	
		Объект.БезналичныйРасчет = Истина;
		// Ставки
		Объект.НДСНеПодтвержден = Истина;
		Объект.ЗначениеСтавкиНДС = 0;
		Объект.ЗначениеСтавкиНСП = 0;
		// Акциз
		Объект.СуммаАкциза = 0;
		Объект.СпособРаспределенияАкциза = "";
		РаспределитьАкцизНаСервере();
	Иначе // КР или не заполнен Контрагент
		Объект.БезналичныйРасчет = Ложь;
		// Акциз
		Объект.СуммаАкциза = 0;
		Объект.СпособРаспределенияАкциза = "";
		РаспределитьАкцизНаСервере();
	КонецЕсли;	
	
	ОбработатьИзменениеДоговора();
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор контрагента.
//
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ОбработатьИзменениеДоговора();
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма акциза.
//
&НаКлиенте
Процедура СуммаАкцизаПриИзменении(Элемент)
	Если Объект.СуммаАкциза = 0 Тогда 
		Объект.СпособРаспределенияАкциза = "";
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
	РаспределитьАкцизНаСервере();		
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Документ основание.
//
&НаКлиенте
Процедура СпособРаспределенияАкцизаПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();

	РаспределитьАкцизНаСервере();		
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Серия бланка СФ.
//
&НаКлиенте
Процедура СерияБланкаСФПриИзменении(Элемент)
	// Заполнение даты СФ
	Если ЗначениеЗаполнено(Объект.СерияБланкаСФ) Тогда
		Объект.НДСНеПодтвержден = Ложь;
		Если НЕ ЗначениеЗаполнено(Объект.ДатаСФ) Тогда
			Объект.ДатаСФ = ДатаДокумента;
		КонецЕсли;	
	Иначе
		Объект.НДСНеПодтвержден = Истина;
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НДС.
//
&НаКлиенте
Процедура ЗначениеСтавкиНДСПриИзменении(Элемент)
	СтранаВходитВЕАЭС = Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"Товары",
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"Услуги",
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"ОС",
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НСП.
//
&НаКлиенте
Процедура ЗначениеСтавкиНСППриИзменении(Элемент)
	СтранаВходитВЕАЭС = Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"Товары",
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"Услуги",
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"ОС",
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флага НДС не подтвержден.
//
&НаКлиенте
Процедура НДСНеПодтвержденПриИзменении(Элемент)
	Объект.СерияБланкаСФ = "";
	Объект.НомерБланкаСФ = "";
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флага Расчет по емкости.
//
&НаКлиенте
Процедура РасчетПоЕмкостиПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ИмпортОсвобожденныйОтНДС.
//
&НаКлиенте
Процедура ИмпортОсвобожденныйОтНДСПриИзменении(Элемент)
	// Товары
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл 
		СтрокаТабличнойЧасти.ИмпортОсвобожденныйОтНДС = ПредопределенноеЗначение("Справочник.ИмпортОсвобожденныйОтНДС.ПустаяСсылка");
	КонецЦикла;	
	// Услуги
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл 
		СтрокаТабличнойЧасти.ИмпортОсвобожденныйОтНДС = ПредопределенноеЗначение("Справочник.ИмпортОсвобожденныйОтНДС.ПустаяСсылка");
	КонецЦикла;	
	// ОС
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл 
		СтрокаТабличнойЧасти.ИмпортОсвобожденныйОтНДС = ПредопределенноеЗначение("Справочник.ИмпортОсвобожденныйОтНДС.ПустаяСсылка");
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура НеВключатьВРеестрСФПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
	
	Если Объект.НеВключатьВРеестрСФ Тогда
		Объект.СерияБланкаСФ = "";
		Объект.НомерБланкаСФ = 0;
		Объект.ДатаСФ = Дата(1, 1, 1);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Процедура - обработчик события ПередНачаломДобавления таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Сумма") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	Если Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		РаспределитьАкцизНаСервере();
	КонецЕсли;	
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, "Товары");	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Емкость.
//
&НаКлиенте
Процедура ТоварыЕмкостьПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьКоличествоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
	
	СтранаВходитВЕАЭС = Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	Если СтранаВходитВЕАЭС Тогда
		РаспределитьАкцизНаСервере();
	КонецЕсли;	

	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП, 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));

	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтранаВходитВЕАЭС = Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	Если СтранаВходитВЕАЭС Тогда
		РаспределитьАкцизНаСервере();
	КонецЕсли;	
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП, 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));

	Если СтранаВходитВЕАЭС Тогда  
		СтрокаТабличнойЧасти.Цена = ?(СтрокаТабличнойЧасти.Количество = 0, 0, СтрокаТабличнойЧасти.Всего / СтрокаТабличнойЧасти.Количество);
	Иначе 
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
	КонецЕсли;	

	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Всего.
//
&НаКлиенте
Процедура ТоварыВсегоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

	СтранаВходитВЕАЭС = Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));	
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП, 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));

	Если СтранаВходитВЕАЭС Тогда  
		СтрокаТабличнойЧасти.Цена = ?(СтрокаТабличнойЧасти.Количество = 0, 0, СтрокаТабличнойЧасти.Всего / СтрокаТабличнойЧасти.Количество);
	Иначе 
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
	КонецЕсли;	

	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтранаВходитВЕАЭС = Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	Если СтранаВходитВЕАЭС Тогда
		РаспределитьАкцизНаСервере();
	КонецЕсли;	
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП, 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));

	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаНДС.
//
&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)	
	Если Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		// Расчет суммы
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНСПСтрокиТабличнойЧастиПоступление(СтрокаТабличнойЧасти);
		
		ОбновитьПодвалФормы();
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Вес.
//
&НаКлиенте
Процедура ТоварыВесПриИзменении(Элемент)
	РаспределитьАкцизНаСервере();
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ИмпорОсвобожденныйОтНДС.
//
&НаКлиенте
Процедура ТоварыИмпортОСвобожденныйОтНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИмпортОсвобожденныйОтНДС) Тогда
		СтрокаТабличнойЧасти.СуммаНДС = 0;
		
	ИначеЕсли СтрокаТабличнойЧасти.СуммаНДС = 0 Тогда
		СтранаВходитВЕАЭС = Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
		// Расчет налогов	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			Объект.СуммаВключаетНалоги,
			Объект.ЗначениеСтавкиНДС, 
			Объект.ЗначениеСтавкиНСП, 
			?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
			СтрокаТабличнойЧасти.СуммаАкциза,
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

// Процедура - обработчик события ПередНачаломДобавления таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Сумма") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	Если Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		РаспределитьАкцизНаСервере();
	КонецЕсли;
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, "Услуги");	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	СтранаВходитВЕАЭС = Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП, 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
		
	Если СтранаВходитВЕАЭС Тогда  
		СтрокаТабличнойЧасти.Цена = ?(СтрокаТабличнойЧасти.Количество = 0, 0, СтрокаТабличнойЧасти.Всего / СтрокаТабличнойЧасти.Количество);
	Иначе 
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
	КонецЕсли;	
		
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Всего.
//
&НаКлиенте
Процедура УслугиВсегоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	СтранаВходитВЕАЭС = Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));	
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП, 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));

	Если СтранаВходитВЕАЭС Тогда  
		СтрокаТабличнойЧасти.Цена = ?(СтрокаТабличнойЧасти.Количество = 0, 0, СтрокаТабличнойЧасти.Всего / СтрокаТабличнойЧасти.Количество);
	Иначе 
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);	
	КонецЕсли;	

	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	СтранаВходитВЕАЭС = Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП, 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));

	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаНДС.
//
&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	Если Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
		// Расчет суммы
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНСПСтрокиТабличнойЧастиПоступление(СтрокаТабличнойЧасти);
		
		ОбновитьПодвалФормы();
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СчетРасхода.
//
&НаКлиенте
Процедура УслугиСчетРасходаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");
	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетРасхода", "Услуги", СтрокаТабличнойЧасти, ПоляОбъекта);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Субконто1.
//
&НаКлиенте
Процедура УслугиСубконто1ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетРасхода", "Услуги", СтрокаТабличнойЧасти);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Субконто2.
//
&НаКлиенте
Процедура УслугиСубконто2ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетРасхода", "Услуги", СтрокаТабличнойЧасти);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Субконто3.
//
&НаКлиенте
Процедура УслугиСубконто3ПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетРасхода", "Услуги", СтрокаТабличнойЧасти);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Вес.
//
&НаКлиенте
Процедура УслугиВесПриИзменении(Элемент)
	РаспределитьАкцизНаСервере();
	ОбновитьПодвалФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

// Процедура - обработчик события ПередНачаломДобавления таблицы ОС.
//
&НаКлиенте
Процедура ОСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Сумма") + Элемент.ТекущиеДанные.Сумма;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы ОС.
//
&НаКлиенте
Процедура ОСПослеУдаления(Элемент)
	Если Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		РаспределитьАкцизНаСервере();
	КонецЕсли;
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Всего.
//
&НаКлиенте
Процедура ОСВсегоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	СтранаВходитВЕАЭС = Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));	
	// Расчет налогов	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП, 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));

	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	СтранаВходитВЕАЭС = Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП, 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаНДС.
//
&НаКлиенте
Процедура ОССуммаНДСПриИзменении(Элемент)
	Если Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
		// Расчет суммы
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНСПСтрокиТабличнойЧастиПоступление(СтрокаТабличнойЧасти);
		
		ОбновитьПодвалФормы();
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Вес.
//
&НаКлиенте
Процедура ОСВесПриИзменении(Элемент)
	РаспределитьАкцизНаСервере();
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ИмпорОсвобожденныйОтНДС.
//
&НаКлиенте
Процедура ОСИмпортОсвобожденныйОтНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИмпортОсвобожденныйОтНДС) Тогда
		СтрокаТабличнойЧасти.СуммаНДС = 0;
		
	ИначеЕсли СтрокаТабличнойЧасти.СуммаНДС = 0 Тогда
		СтранаВходитВЕАЭС = Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
		// Расчет налогов	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			Объект.СуммаВключаетНалоги,
			Объект.ЗначениеСтавкиНДС, 
			Объект.ЗначениеСтавкиНСП, 
			?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
			СтрокаТабличнойЧасти.СуммаАкциза,
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик события действия команды Подбор в табличную часть Товары.
// Открывает форму подбора.
//
&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	РаботаСПодборомНоменклатурыКлиент.ОткрытьПодбор(ЭтаФорма, "Товары", "Поступление");
КонецПроцедуры

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьТоварыИзФайла(Команда)
    ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
    ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "ПоступлениеТоваровУслуг.Товары";
    ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка списка товаров из файла'");
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьТоварыИзФайлаЗавершение", ЭтотОбъект);
    ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкодуТовары(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", 
		ЭтотОбъект, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары")), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
		
КонецПроцедуры
	
&НаКлиенте
Процедура ПоискПоШтрихкодуУслуги(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", 
		ЭтотОбъект, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Услуги")), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
    
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		Модифицированность = Истина;

        РезультатЗаполненияПоДаннымШтрихкода = ЗаполнитьПоДаннымШтрихкода(Новый Структура("Штрихкод", ТекШтрихкод), ДополнительныеПараметры.ИмяТабличнойЧасти);
		
		Если РезультатЗаполненияПоДаннымШтрихкода.НеизвестныйШтрихкод Тогда 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Данные по штрихкоду не найдены: %1'"), ТекШтрихкод);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		ИначеЕсли РезультатЗаполненияПоДаннымШтрихкода.ШтрихкодНекорректногоТипа Тогда 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Найденная по штрихкоду %1 номенклатура: ""%2"", не подходит для этой табличной части'"),
				ТекШтрихкод, РезультатЗаполненияПоДаннымШтрихкода.СтруктураДанные.Номенклатура);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры 
// Конец ПодключаемоеОборудование

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

&НаКлиенте
Процедура ЗагрузитьТоварыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
    Если АдресЗагруженныхДанных = Неопределено Тогда 
        Возврат;
    КонецЕсли;
    ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	Если Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		Элементы.БезналичныйРасчет.Видимость = Ложь;
		// Ставки
		Элементы.НДСНеПодтвержден.Видимость = Ложь;
		Элементы.ЗначениеСтавкиНДС.Видимость = Ложь;
		Элементы.ЗначениеСтавкиНСП.Видимость = Ложь;
		// Счет-фактура
		Элементы.СерияБланкаСФ.Видимость = Ложь;
		Элементы.НомерБланкаСФ.Видимость = Ложь;
		Элементы.ДатаСФ.Видимость = Ложь;
		Элементы.НеВключатьВРеестрСФ.Видимость = Ложь;
		// Курс прихода
		Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда 
			Элементы.Курс.Видимость = Ложь;
			Элементы.Кратность.Видимость = Ложь;
		Иначе
			Элементы.Курс.Видимость = Истина;
			Элементы.Кратность.Видимость = Истина;
		КонецЕсли;	                       		
		// Акциз
		Элементы.СуммаАкциза.Видимость = Истина;
		Элементы.СпособРаспределенияАкциза.Видимость = Истина;
		Элементы.ИтогСуммаАкциза.Видимость = Истина;
		Если Объект.СуммаАкциза = 0 Тогда 
			Элементы.ТоварыСуммаАкциза.Видимость = Ложь;
			Элементы.УслугиСуммаАкциза.Видимость = Ложь;
			Элементы.ОССуммаАкциза.Видимость = Ложь;
		Иначе 
			Элементы.ТоварыСуммаАкциза.Видимость = Истина;
			Элементы.УслугиСуммаАкциза.Видимость = Истина;
			Элементы.ОССуммаАкциза.Видимость = Истина;
		КонецЕсли;	
			
		Если Объект.СпособРаспределенияАкциза = "Вес" Тогда 
			Элементы.ТоварыВес.Видимость = Истина;
			Элементы.УслугиВес.Видимость = Истина;
			Элементы.ОСВес.Видимость = Истина;
		Иначе 
			Элементы.ТоварыВес.Видимость = Ложь;
			Элементы.УслугиВес.Видимость = Ложь;
			Элементы.ОСВес.Видимость = Ложь;
		КонецЕсли;
		// Импорт
		Элементы.ТоварыИмпортОСвобожденныйОтНДС.Видимость = Объект.ИмпортОсвобожденныйОтНДС.Пустая();
		Элементы.ОСИмпортОсвобожденныйОтНДС.Видимость = Объект.ИмпортОсвобожденныйОтНДС.Пустая();    		
		// Сумма НДС и НСП
		Элементы.ТоварыСуммаНДС.Видимость = Истина;
		Элементы.УслугиСуммаНДС.Видимость = Истина;
		Элементы.ОССуммаНДС.Видимость = Истина;
		Элементы.ТоварыСуммаНСП.Видимость = Ложь;//Истина;
		Элементы.УслугиСуммаНСП.Видимость = Ложь;//Истина;
		Элементы.ОССуммаНСП.Видимость = Ложь;//Истина;
		// Зачет НДС
		Элементы.ТоварыЗачетНДС.Видимость = Истина;
		Элементы.УслугиЗачетНДС.Видимость = Истина;
		Элементы.ОСЗачетНДС.Видимость = Истина;
		// Емкость
		Элементы.ТоварыКоличествоМест.Видимость = Объект.РасчетПоЕмкости;
		Элементы.ТоварыЕмкость.Видимость = Объект.РасчетПоЕмкости;
		
	ИначеЕсли Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ИмпортЭкспорт") Тогда	
		Элементы.БезналичныйРасчет.Видимость = Ложь;
		// Ставки
		Элементы.НДСНеПодтвержден.Видимость = Ложь;
		Элементы.ЗначениеСтавкиНДС.Видимость = Ложь;
		Элементы.ЗначениеСтавкиНСП.Видимость = Ложь;
		// Счет-фактура
		Элементы.СерияБланкаСФ.Видимость = Ложь;
		Элементы.НомерБланкаСФ.Видимость = Ложь;
		Элементы.ДатаСФ.Видимость = Ложь;
		Элементы.НеВключатьВРеестрСФ.Видимость = Ложь;
		// Курс прихода
		Элементы.Курс.Видимость = Ложь;
		Элементы.Кратность.Видимость = Ложь;
		// Акциз
		Элементы.СуммаАкциза.Видимость = Ложь;
		Элементы.СпособРаспределенияАкциза.Видимость = Ложь;
		Элементы.ИтогСуммаАкциза.Видимость = Ложь;
		Элементы.ТоварыВес.Видимость = Ложь;
		Элементы.ТоварыИмпортОСвобожденныйОтНДС.Видимость = Ложь;
		Элементы.ТоварыСуммаАкциза.Видимость = Ложь;
		Элементы.УслугиСуммаАкциза.Видимость = Ложь;
		Элементы.ОССуммаАкциза.Видимость = Ложь;
		// Услуги
		Элементы.УслугиВес.Видимость = Ложь;
		// ОС
		Элементы.ОСВес.Видимость = Ложь;
		Элементы.ОСИмпортОсвобожденныйОтНДС.Видимость = Ложь;
		// Сумма НДС и НСП
		Элементы.ТоварыСуммаНДС.Видимость = Ложь;
		Элементы.УслугиСуммаНДС.Видимость = Ложь;
		Элементы.ОССуммаНДС.Видимость = Ложь;
		Элементы.ТоварыСуммаНСП.Видимость = Ложь;
		Элементы.УслугиСуммаНСП.Видимость = Ложь;
		Элементы.ОССуммаНСП.Видимость = Ложь;
		// Зачет НДС
		Элементы.ТоварыЗачетНДС.Видимость = Ложь;
		Элементы.УслугиЗачетНДС.Видимость = Ложь;
		Элементы.ОСЗачетНДС.Видимость = Ложь;
		// Емкость
		Элементы.ТоварыКоличествоМест.Видимость = Ложь;
		Элементы.ТоварыЕмкость.Видимость = Ложь;
		
	Иначе // КР или не заполнен Контрагент	
		Элементы.БезналичныйРасчет.Видимость = УПП.ПлательщикНСП;
		// Ставки
		Если УПП.ПлательщикНДС И НЕ ЗначениеЗаполнено(Объект.СерияБланкаСФ) Тогда
			Элементы.НДСНеПодтвержден.Видимость = Истина;
		Иначе
			Элементы.НДСНеПодтвержден.Видимость = Ложь;
		КонецЕсли;	
		Элементы.ЗначениеСтавкиНДС.Видимость = Истина;
		// Счет-фактура
		Элементы.СтраницаСФ.Видимость = УПП.ПлательщикНДС;
		// Курс прихода
		Элементы.Курс.Видимость = Ложь;
		Элементы.Кратность.Видимость = Ложь;
		// Акциз
		Элементы.СуммаАкциза.Видимость = Ложь;
		Элементы.СпособРаспределенияАкциза.Видимость = Ложь;
		Элементы.ИтогСуммаАкциза.Видимость = Ложь;
		Элементы.ТоварыСуммаАкциза.Видимость = Ложь;
		Элементы.УслугиСуммаАкциза.Видимость = Ложь;
		Элементы.ОССуммаАкциза.Видимость = Ложь;
		// Товары
		Элементы.ТоварыКоличествоМест.Видимость = Ложь;
		Элементы.ТоварыЕмкость.Видимость = Ложь;
		Элементы.ТоварыВес.Видимость = Ложь;
		Элементы.ТоварыИмпортОСвобожденныйОтНДС.Видимость = Ложь;
		// Услуги
		Элементы.УслугиВес.Видимость = Ложь;
		// ОС
		Элементы.ОСВес.Видимость = Ложь;
		Элементы.ОСИмпортОсвобожденныйОтНДС.Видимость = Ложь;
		// Сумма НДС
		Элементы.ТоварыСуммаНДС.Видимость = Истина;
		Элементы.УслугиСуммаНДС.Видимость = Истина;
		Элементы.ОССуммаНДС.Видимость = Истина;
		// Сумма НСП
		Если Объект.БезналичныйРасчет Тогда 
			Элементы.ТоварыСуммаНСП.Видимость = Ложь;
			Элементы.УслугиСуммаНСП.Видимость = Ложь;
			Элементы.ОССуммаНСП.Видимость = Ложь;
		Иначе 
			Элементы.ЗначениеСтавкиНСП.Видимость = Истина;
			Элементы.ТоварыСуммаНСП.Видимость = Истина;
			Элементы.УслугиСуммаНСП.Видимость = Истина;
			Элементы.ОССуммаНСП.Видимость = Истина;
		КонецЕсли;
		// Зачет НДС
		Элементы.ТоварыЗачетНДС.Видимость = Истина;
		Элементы.УслугиЗачетНДС.Видимость = Истина;
		Элементы.ОСЗачетНДС.Видимость = Истина;
	КонецЕсли;	
		
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Покупка") Тогда 
		Элементы.РБП.Видимость = Ложь;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.РасходыБудущихПериодов") Тогда 
		Элементы.РБП.Видимость = Истина;
	КонецЕсли;
	
	Если Объект.НеВключатьВРеестрСФ Тогда
		Элементы.СерияБланкаСФ.Доступность 	= Ложь;
		Элементы.НомерБланкаСФ.Доступность 	= Ложь;
		Элементы.ДатаСФ.Доступность			= Ложь;
	Иначе
		Элементы.СерияБланкаСФ.Доступность 	= Истина;
		Элементы.НомерБланкаСФ.Доступность 	= Истина;
		Элементы.ДатаСФ.Доступность			= Истина;
	КонецЕсли;	
	
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()    

// Процедура устанавливает текущую страницу при открытии формы.
//
&НаКлиенте
Процедура УстановитьТекущуюСтраницу()	
	Если Объект.Товары.Количество() > 0 Тогда 
		Возврат;
	ИначеЕсли Объект.Услуги.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаУслуги;
	ИначеЕсли Объект.ОС.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаОсновныеСредства;
	КонецЕсли;	
КонецПроцедуры

// Процедура устанавливает функциональные опции формы документа.
//
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма, Объект.Организация, ДатаДокумента);
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением, ВалютаДокумента)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	ВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаНовая);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат);
		
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура - Пересчитать курс кратность валюты расчетов
//
// Параметры:
//  СтруктураДанные	- Структура - 
//		* ВалютаКурсКратность - Структура
//			* Курс - Число
//			* Кратность - Число
//
&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		Или Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(Объект.Курс) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(КурсНовый) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		
		ТекстСообщения = НСтр("ru = 'На дату документа у валюты расчетов (" + КурсВалютыСтрокой + ") был задан курс.
									|Установить курс расчетов (" + КурсНовыйВалютыСтрокой + ") в соответствии с курсом валюты?'");
		
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПересчитатьКурсКратностьВалютыДокументаЗавершение", ЭтотОбъект, Новый Структура("КратностьНовый, КурсНовый", КратностьНовый, КурсНовый)), ТекстСообщения, Режим, 0);
		Возврат;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КратностьНовый = ДополнительныеПараметры.КратностьНовый;
	КурсНовый = ДополнительныеПараметры.КурсНовый;
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Курс = КурсНовый;
		Объект.Кратность = КратностьНовый;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает связи параметров выбора.
//
&НаКлиенте
Процедура УстановитьСвязиПараметровВыбора()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.РасходыБудущихПериодов") Тогда
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.КР"));
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ПризнакСтраны", Новый ФиксированныйМассив(НовыйМассив));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Контрагент.ПараметрыВыбора = НовыеПараметры;
	Иначе
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.КР"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ИмпортЭкспорт"));
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ПризнакСтраны", Новый ФиксированныйМассив(НовыйМассив));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Контрагент.ПараметрыВыбора = НовыеПараметры;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыВыбора()

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация, Объект.ВидОперации);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию);
	
	СтруктураДанные.Вставить(
		"ПризнакСтраны",
		Контрагент.ПризнакСтраны);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанию
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Период, Контрагент, ДоговорКонтрагента, ВидОперации)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорКонтрагента.ВалютаРасчетов);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаРасчетов, Период));
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНалоги",
		ДоговорКонтрагента.СуммаВключаетНалоги);
	
	СчетаУчета = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(ДоговорКонтрагента.Организация, ДоговорКонтрагента.Владелец, ДоговорКонтрагента);
	СтруктураДанные.Вставить(
		"СчетРасчетов",
		СчетаУчета.СчетРасчетовПоставщика);
		
	ЗначенияСтавокНДСиНСП = УчетНДСВызовСервера.ПолучитьЗначенияСтавокНДСиНСП(Период, Контрагент, ДоговорКонтрагента); 
	
	СтруктураДанные.Вставить(
		"ЗначениеСтавкиНДС",
		ЗначенияСтавокНДСиНСП.ЗначениеСтавкиНДС);
		
	СтруктураДанные.Вставить(
		"ЗначениеСтавкиНСП",
		ЗначенияСтавокНДСиНСП.ЗначениеСтавкиНСП);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаКлиенте
Процедура ОбработатьИзменениеДоговора(МодифицированДоговор = Ложь)
		
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(ДатаДокумента, Объект.Контрагент, Объект.ДоговорКонтрагента, Объект.ВидОперации);

	// Обработка изменения валюты
	СтруктураКурсыПред = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	
	Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
	Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
	Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	
	СтруктураКурсы = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	
	// Обработка изменения налогооблажения
	Объект.СуммаВключаетНалоги = СтруктураДанные.СуммаВключаетНалоги;
	Объект.ЗначениеСтавкиНДС = СтруктураДанные.ЗначениеСтавкиНДС;
	Объект.ЗначениеСтавкиНСП = СтруктураДанные.ЗначениеСтавкиНСП;
	
	// Обработка изменения отражения в учете
	Объект.СчетРасчетов = СтруктураДанные.СчетРасчетов;
	
	СтранаВходитВЕАЭС = Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(Объект, "Товары", Объект.СуммаВключаетНалоги, Объект.ЗначениеСтавкиНДС, Объект.ЗначениеСтавкиНСП,
			?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет), 
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(Объект, "Услуги", Объект.СуммаВключаетНалоги, Объект.ЗначениеСтавкиНДС, Объект.ЗначениеСтавкиНСП,
			?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет), 
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(Объект, "ОС", Объект.СуммаВключаетНалоги, Объект.ЗначениеСтавкиНДС, Объект.ЗначениеСтавкиНСП,
			?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет), 
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1));;

	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

	// Заполнение по данным номенклатуры
	Если ИмяТабличнойЧасти = "Товары" Тогда 
		СтрокаТабличнойЧасти.СчетУчета = СтруктураДанные.СчетУчета;
	ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда 
		СтрокаТабличнойЧасти.СчетРасхода = СтруктураДанные.СчетРасхода;
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "Субконто1", "Субконто2", "Субконто3");

		БухгалтерскийУчетКлиентСервер.НастроитьСвязьСчетаИСубконтоВТЧ(ЭтаФорма, "", "СчетРасхода", ИмяТабличнойЧасти, СтрокаТабличнойЧасти, ПоляОбъекта);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Количество  = 1;
	
	СтранаВходитВЕАЭС = Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	Если СтранаВходитВЕАЭС Тогда
		РаспределитьАкцизНаСервере();
	КонецЕсли;	

	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП, 
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, 
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
		СтрокаТабличнойЧасти.СуммаАкциза,
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));

	ОбновитьПодвалФормы();
КонецПроцедуры	

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Счета учета
	СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(СтруктураДанные.Организация, СтруктураДанные.Номенклатура);
	СтруктураДанные.Вставить("СчетУчета", СчетаУчетаНоменклатуры.СчетУчета);
	СтруктураДанные.Вставить("СчетРасхода", СчетаУчетаНоменклатуры.СчетРасхода);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Процедура рассчитывает итоги для подвала формы.
//
&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Сумма");
	ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС");
	ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП");
	
КонецПроцедуры // ОбновитьПодвалФормы()

&НаСервере
Процедура РаспределитьАкцизНаСервере()
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.РаспределитьАкциз();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	СтранаВходитВЕАЭС = Объект.ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС");
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"Товары",
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет), 
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"Услуги",
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет), 
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект,
		"ОС",
		Объект.СуммаВключаетНалоги,
		Объект.ЗначениеСтавкиНДС, 
		Объект.ЗначениеСтавкиНСП,
		?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет), 
		?(СтранаВходитВЕАЭС, Объект.Курс, 1),
		?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
КонецПроцедуры

// Процедура - обработчик подбора товаров.
//
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаЗагрузки.Номенклатура));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

		// Заполнение по данным номенклатуры
		СтрокаТабличнойЧасти.СчетУчета 	 = СтруктураДанные.СчетУчета;
		СтрокаТабличнойЧасти.Количество  = СтрокаЗагрузки.Количество;
		
		СтранаВходитВЕАЭС = Объект.ПризнакСтраны = Перечисления.ПризнакиСтраны.ЕАЭС;
		
		Если СтранаВходитВЕАЭС Тогда
			РаспределитьАкцизНаСервере();
		КонецЕсли;	

		// Расчет суммы
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			Объект.СуммаВключаетНалоги,
			Объект.ЗначениеСтавкиНДС, 
			Объект.ЗначениеСтавкиНСП, 
			?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
			СтрокаТабличнойЧасти.СуммаАкциза,
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
		// Расчет налогов
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, 
			Объект.СуммаВключаетНалоги,
			Объект.ЗначениеСтавкиНДС, 
			Объект.ЗначениеСтавкиНСП,
			?(СтранаВходитВЕАЭС, Истина, Объект.БезналичныйРасчет),
			СтрокаТабличнойЧасти.СуммаАкциза,
			?(СтранаВходитВЕАЭС, Объект.Курс, 1),
			?(СтранаВходитВЕАЭС, Объект.Кратность, 1));
	КонецЦикла;
		
КонецПроцедуры // ПолучитьТоварыИзХранилища()

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаСервере
Процедура ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
    ТоварыДобавлены = Ложь;
	
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
        Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда 
            Продолжить;
        КонецЕсли;
        НоваяСтрокаТабличнойЧасти = Объект.Товары.Добавить();
        НоваяСтрокаТабличнойЧасти.Номенклатура 	= СтрокаТаблицы.Номенклатура;
        НоваяСтрокаТабличнойЧасти.Количество 	= СтрокаТаблицы.Количество;
		НоваяСтрокаТабличнойЧасти.Сумма 	 	= СтрокаТаблицы.Сумма;
		НоваяСтрокаТабличнойЧасти.СуммаНДС 	 	= СтрокаТаблицы.СуммаНДС;
		НоваяСтрокаТабличнойЧасти.СуммаНСП 	 	= СтрокаТаблицы.СуммаНСП;
		
		// Счета учета
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		НоваяСтрокаТабличнойЧасти.СчетУчета 	= СтруктураДанные.СчетУчета;

		ТоварыДобавлены = Истина;
    КонецЦикла;
	
	Если ТоварыДобавлены Тогда
        Модифицированность = Истина;
    КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// ПодключаемоеОборудование
&НаСервереБезКонтекста
Функция ПолучитьДанныеПоШтрихкоду(ДанныеШтрихкода)
	
	Номенклатура = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьНоменклатуруПоШтрихкоду(ДанныеШтрихкода);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", Номенклатура);
	СтруктураДанные.Вставить("ТипНоменклатурыУслуга", ?(ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура"), Номенклатура.Услуга, Ложь));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПоШтрихкоду()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкода(ДанныеШтрихкода, ИмяТабличнойЧасти)
	
	НеизвестныйШтрихкод = Ложь;
	ШтрихкодНекорректногоТипа = Ложь;
	
	СтруктураДанные = ПолучитьДанныеПоШтрихкоду(ДанныеШтрихкода);
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанные.Номенклатура) Тогда 
		НеизвестныйШтрихкод = Истина;
	ИначеЕсли ИмяТабличнойЧасти = "Товары"
		И СтруктураДанные.ТипНоменклатурыУслуга Тогда
		ШтрихкодНекорректногоТипа = Истина;
	ИначеЕсли ИмяТабличнойЧасти = "Услуги"
		И НЕ СтруктураДанные.ТипНоменклатурыУслуга Тогда
		ШтрихкодНекорректногоТипа = Истина;
	Иначе 
		СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
		СтрокаТабличнойЧасти.Номенклатура = СтруктураДанные.Номенклатура;
		СтрокаТабличнойЧасти.Количество = 1;
		
		ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, ИмяТабличнойЧасти);
	КонецЕсли;	
	
	Возврат Новый Структура("НеизвестныйШтрихкод, ШтрихкодНекорректногоТипа, СтруктураДанные",
		НеизвестныйШтрихкод, ШтрихкодНекорректногоТипа, СтруктураДанные);

КонецФункции // ЗаполнитьПоДаннымШтрихкода()
// Конец ПодключаемоеОборудование

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти





