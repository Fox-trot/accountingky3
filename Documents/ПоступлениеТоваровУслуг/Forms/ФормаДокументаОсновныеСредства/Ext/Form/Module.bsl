
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	РаботаСФормамиСервер.УстановитьЗаголовокФормыПоступление(ЭтаФорма);

	ПризнакСтраны = Объект.Контрагент.ПризнакСтраны;
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();	
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		СтруктураКурсКратность 	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ДоговорКонтрагента.ВалютаРасчетов, ДатаДокумента);	
		КурсНБКР      			= ?(СтруктураКурсКратность.Курс = 0, 1, СтруктураКурсКратность.Курс);
		КратностьНБКР 			= ?(СтруктураКурсКратность.Кратность = 0, 1, СтруктураКурсКратность.Кратность);
	КонецЕсли;
	
	ЗаполнитьСчетФактураПолученный();
	
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	УстановитьФункциональныеОпцииФормы();
	УстановитьПараметрыВыбора();
	УстановитьВидимостьДоступностьЭлементов();
	
	Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяУчетЭСФ() Тогда
		ПолучитьПредставлениеЭСФ();
	КонецЕсли;	

	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьПодвалФормы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчета.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "МодифицированДоговораКонтрагента"
		И Параметр = Объект.ДоговорКонтрагента Тогда
		ОбработатьИзменениеДоговора(Истина);

	ИначеЕсли ИмяСобытия = "СчетФактураПолученныйПослеЗаписи"
		И НЕ Параметр.Найти(Объект.Ссылка) = Неопределено Тогда  
		
		ЗаполнитьСчетФактураПолученный();
		УстановитьВидимостьДоступностьЭлементов();
		
	ИначеЕсли ИмяСобытия = "ЭлектронныйСчетФактураПолученныйПослеЗаписи"
		И НЕ Параметр.Найти(Объект.Ссылка) = Неопределено Тогда  
		
		Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяУчетЭСФ() Тогда
			ПолучитьПредставлениеЭСФ();
		КонецЕсли;	

	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением, Объект.ВалютаДокумента);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные);
		КонецЕсли;	
	КонецЕсли;
	
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	ОбработатьИзменениеУчетнойПолитики();
	УстановитьФункциональныеОпцииФормы();
	ОбработатьИзменениеДоговора();
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер = "";

	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	ОбработатьИзменениеУчетнойПолитики();
	УстановитьФункциональныеОпцииФормы();
	
	// Договор автоматически очистился- заполнение по умолчанию.
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ОбработатьИзменениеДоговора();
	
	Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяУчетЭСФ() Тогда
		ПолучитьПредставлениеЭСФ();
	КонецЕсли;	
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флажка Безналичный расчет.
//
&НаКлиенте
Процедура БезналичныйРасчетПриИзменении(Элемент)
	
	Если Объект.БезналичныйРасчет Тогда
		Объект.ЗначениеСтавкиНСПДляОС = 0;
	КонецЕсли;	
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "ОС", ПараметрыРасчета);
		
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ПризнакСтраны = СтруктураДанные.ПризнакСтраны;
	
	Если СтруктураДанные.СЭЗ Тогда
		Объект.ЗначениеСтавкиНДС = 0;	
	КонецЕсли;	
	
	// Изменение признака страны
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		Объект.БезналичныйРасчет = Истина;
		// Ставки
		Объект.НДСНеПодтвержден = Ложь;
		Объект.ЗначениеСтавкиНСПДляОС = 0;
	ИначеЕсли ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ИмпортЭкспорт") Тогда	
		Объект.БезналичныйРасчет = Истина;
		// Ставки
		Объект.НДСНеПодтвержден = Ложь;
		Объект.ЗначениеСтавкиНДС = 0;
		Объект.ЗначениеСтавкиНСПДляОС = 0;
	Иначе // КР или не заполнен Контрагент
		Объект.БезналичныйРасчет = Ложь;
	КонецЕсли;	
	
	ОбработатьИзменениеДоговора();
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор контрагента.
//
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ОбработатьИзменениеДоговора();
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Серия бланка СФ.
//
&НаКлиенте
Процедура СерияБланкаСФПриИзменении(Элемент)
	// Заполнение даты СФ
	Если ЗначениеЗаполнено(Объект.СерияБланкаСФ) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ДатаСФ) Тогда
			Объект.ДатаСФ = ДатаДокумента;
		КонецЕсли;	
	КонецЕсли;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НДС.
//
&НаКлиенте
Процедура ЗначениеСтавкиНДСПриИзменении(Элемент)
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "ОС", ПараметрыРасчета);
		
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НСП (ОС)
//
&НаКлиенте
Процедура ЗначениеСтавкиНСПДляОСПриИзменении(Элемент)
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "ОС", ПараметрыРасчета);
		
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флага НДС не подтвержден.
//
&НаКлиенте
Процедура НДСНеПодтвержденПриИзменении(Элемент)
	Объект.СерияБланкаСФ = "";
	Объект.НомерБланкаСФ = "";
	
	Если НЕ Объект.НДСНеПодтвержден Тогда
		РассчитатьСуммыИНалоги();
	КонецЕсли;	
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ИмпортОсвобожденныйОтНДС.
//
&НаКлиенте
Процедура ИмпортОсвобожденныйОтНДСПриИзменении(Элемент)
	// ОС
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл 
		СтрокаТабличнойЧасти.ИмпортОсвобожденныйОтНДС = ПредопределенноеЗначение("Перечисление.ИмпортОсвобожденныйОтНДС.ПустаяСсылка");
	КонецЦикла;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура НеВключатьВРеестрСФПриИзменении(Элемент)
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура КурсПриИзменении(Элемент)	
	РассчитатьСуммыИНалоги();
КонецПроцедуры

&НаКлиенте
Процедура КратностьПриИзменении(Элемент)
	РассчитатьСуммыИНалоги();	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеЭСФНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ТекстСообщения = НСтр("ru = 'Документ еще не записан.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ЭСФКлиент.ПредставлениеЭСФНажатие(ПредставлениеЭСФ, ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

// Процедура - обработчик события ПередНачаломДобавления таблицы ОС.
//
&НаКлиенте
Процедура ОСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.ОС.Итог("Всего") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.ОС.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.ОС.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;	
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы ОС.
//
&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда 
		ОбновитьПодвалФормы();
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы ОС.
//
&НаКлиенте
Процедура ОСПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Всего.
//
&НаКлиенте
Процедура ОСВсегоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет суммы
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);

	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода БазаНДС.
//
&НаКлиенте
Процедура ОСБазаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	// Расчет налогов
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
		СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаНДС.
//
&НаКлиенте
Процедура ОССуммаНДСПриИзменении(Элемент)
	
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
		
		ПараметрыРасчета = ПодготовитьПараметрыРасчета();
		
		// Расчет суммы
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНСПСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
	
	ОбновитьПодвалФормы();	
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаНСППриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНСП;	
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ИмпортОсвобожденныйОтНДС.
//
&НаКлиенте
Процедура ОСИмпортОсвобожденныйОтНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИмпортОсвобожденныйОтНДС) Тогда
		СтрокаТабличнойЧасти.СуммаНДС = 0;
		
	ИначеЕсли СтрокаТабличнойЧасти.СуммаНДС = 0 Тогда
		ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
		// Расчет налогов	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
	
	ОбновитьПодвалФормы();	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	ПризнакЗачетаНДСПриПоступлении = ДанныеУчетнойПолитики.УказыватьПризнакЗачетаНДСПриПоступлении;
	ЭтоКонтрагентСЭЗ = Объект.Контрагент.СЭЗ;

	Элементы.НДСНеПодтвержден.Видимость = НЕ ЭтоКонтрагентСЭЗ;
	Элементы.СтраницаСФ.Видимость = НЕ ЭтоКонтрагентСЭЗ;
	
	Если ПризнакСтраны = Перечисления.ПризнакиСтраны.ЕАЭС Тогда
		Элементы.БезналичныйРасчет.ТолькоПросмотр = Истина;
		// Ставки
		Элементы.НДСНеПодтвержден.Видимость = Ложь;
		Элементы.ЗначениеСтавкиНДС.Видимость = Истина;
		Элементы.ЗначениеСтавкиНСПДляОС.Видимость = Ложь;
		// Счет-фактура
		Элементы.СерияБланкаСФ.Видимость 		 = НЕ ЗначениеЗаполнено(СчетФактураПолученный);
		Элементы.НомерБланкаСФ.Видимость 		 = НЕ ЗначениеЗаполнено(СчетФактураПолученный);
		Элементы.ДатаСФ.Видимость 				 = НЕ ЗначениеЗаполнено(СчетФактураПолученный);
		Элементы.НеВключатьВРеестрСФ.Видимость 	 = НЕ ЗначениеЗаполнено(СчетФактураПолученный);
		Элементы.СчетФактураПолученный.Видимость = ЗначениеЗаполнено(СчетФактураПолученный);
		// Импорт
		Элементы.ИмпортОсвобожденныйОтНДС.Видимость = Истина;
		Элементы.ОСИмпортОсвобожденныйОтНДС.Видимость = Объект.ИмпортОсвобожденныйОтНДС.Пустая();	
		// Зачет НДС
		Элементы.ОСЗачетНДС.Видимость = ПризнакЗачетаНДСПриПоступлении;
		// База НДС
		Элементы.ОСБазаНДС.Видимость = Истина;
		
	ИначеЕсли ПризнакСтраны = Перечисления.ПризнакиСтраны.ИмпортЭкспорт Тогда
		Элементы.БезналичныйРасчет.ТолькоПросмотр = Истина;
		
		// Ставки
		Элементы.НДСНеПодтвержден.Видимость = Ложь;
		Элементы.ЗначениеСтавкиНДС.Видимость = Ложь;
		Элементы.ЗначениеСтавкиНСПДляОС.Видимость = Ложь;
		// Счет-фактура
		Элементы.СерияБланкаСФ.Видимость = Ложь;
		Элементы.НомерБланкаСФ.Видимость = Ложь;
		Элементы.ДатаСФ.Видимость = Ложь;
		Элементы.НеВключатьВРеестрСФ.Видимость = Ложь;
		Элементы.СчетФактураПолученный.Видимость = Ложь;
		// Импорт
		Элементы.ИмпортОсвобожденныйОтНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС;
		Элементы.ОСИмпортОсвобожденныйОтНДС.Видимость = Ложь;
		// Зачет НДС
		Элементы.ОСЗачетНДС.Видимость = Ложь;
		// База НДС
		Элементы.ОСБазаНДС.Видимость = Ложь;
		
	Иначе // КР или не заполнен Контрагент	
		Элементы.БезналичныйРасчет.ТолькоПросмотр = НЕ ДанныеУчетнойПолитики.ПлательщикНСП;
		// Ставки
		Элементы.НДСНеПодтвержден.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И НЕ ЭтоКонтрагентСЭЗ;	
		Элементы.ЗначениеСтавкиНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И НЕ ЭтоКонтрагентСЭЗ;
		Элементы.ЗначениеСтавкиНСПДляОС.Видимость = ДанныеУчетнойПолитики.ПлательщикНСП И НЕ Объект.БезналичныйРасчет;
		// Счет-фактура
		Элементы.СерияБланкаСФ.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И НЕ Объект.НДСНеПодтвержден И НЕ ЗначениеЗаполнено(СчетФактураПолученный);
		Элементы.НомерБланкаСФ.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И НЕ Объект.НДСНеПодтвержден И НЕ ЗначениеЗаполнено(СчетФактураПолученный);
		Элементы.ДатаСФ.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И НЕ Объект.НДСНеПодтвержден И НЕ ЗначениеЗаполнено(СчетФактураПолученный);
		Элементы.НеВключатьВРеестрСФ.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И НЕ Объект.НДСНеПодтвержден И НЕ ЗначениеЗаполнено(СчетФактураПолученный);
		Элементы.СчетФактураПолученный.Видимость = ЗначениеЗаполнено(СчетФактураПолученный);
		// Импорт
		Элементы.ИмпортОсвобожденныйОтНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС;
		Элементы.ОСИмпортОсвобожденныйОтНДС.Видимость = Ложь;
		// Зачет НДС
		Элементы.ОСЗачетНДС.Видимость = ДанныеУчетнойПолитики.ПлательщикНДС И Объект.ЗначениеСтавкиНДС > 0 И ПризнакЗачетаНДСПриПоступлении;
		// База НДС
		Элементы.ОСБазаНДС.Видимость = Ложь;
	КонецЕсли;	
	
	// Курс прихода
	Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда 
		Элементы.Курс.Видимость = Ложь;
		Элементы.Кратность.Видимость = Ложь;
	Иначе
		Элементы.Курс.Видимость = Истина;
		Если Объект.Кратность > 1 Тогда
			Элементы.Кратность.Видимость = Истина;
		Иначе
			Элементы.Кратность.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// ИСКЛЮЧЕНИЕ - если значение ставки НДС или НСП заполнено,
	// но видимость отлкючена, то видимость возвращается,
	// чтобы пользователь понял что это ошибка и решил проблему на свое усмотрение.
	Если НЕ Элементы.ЗначениеСтавкиНДС.Видимость
		И Объект.ЗначениеСтавкиНДС <> 0 Тогда
		Элементы.ЗначениеСтавкиНДС.Видимость = НЕ ЭтоКонтрагентСЭЗ;
	КонецЕсли;
	
	// Видимость сумм НДС зависит от значения НДС.
	Если Объект.ЗначениеСтавкиНДС = 0 Тогда 
		Элементы.ОССуммаНДС.Видимость = Ложь;
		Элементы.ИтогСуммаНДС.Видимость = Ложь;
	Иначе 
		Элементы.ОССуммаНДС.Видимость = Истина;
		Элементы.ИтогСуммаНДС.Видимость = Истина;
	КонецЕсли;	
	
	Если Объект.ЗначениеСтавкиНСПДляОС = 0 Тогда 
		Элементы.ОССуммаНСП.Видимость = Ложь;
		Элементы.ИтогСуммаНСП.Видимость = Ложь;
	Иначе 
		Элементы.ОССуммаНСП.Видимость = Истина;
		Элементы.ИтогСуммаНСП.Видимость = Истина;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(СчетФактураПолученный) Тогда
		Если Объект.НеВключатьВРеестрСФ Тогда
			Элементы.СерияБланкаСФ.Доступность 	= Ложь;
			Элементы.НомерБланкаСФ.Доступность 	= Ложь;
			Элементы.ДатаСФ.Доступность			= Ложь;
		Иначе
			Элементы.СерияБланкаСФ.Доступность 	= Истина;
			Элементы.НомерБланкаСФ.Доступность 	= Истина;
			Элементы.ДатаСФ.Доступность			= Истина;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры 

// Процедура устанавливает функциональные опции формы документа.
//
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма, Объект.Организация, ДатаДокумента);
КонецПроцедуры

// Процедура - Установить параметры выбора
//
&НаСервере
Процедура УстановитьПараметрыВыбора()
	// Основные средства.
	СчетаУчетаОсновныхСредств = БухгалтерскийУчетСервер.СчетаУчетаОсновныхСредств();
	СчетаУчетаНематериальныхАктивов = БухгалтерскийУчетСервер.СчетаУчетаНематериальныхАктивов();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаОсновныхСредств, СчетаУчетаНематериальныхАктивов); 
	ФиксированныйМассивСчетов = Новый ФиксированныйМассив(СчетаУчетаОсновныхСредств);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", ФиксированныйМассивСчетов);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ОССчетУчета.ПараметрыВыбора = НовыеПараметры;
КонецПроцедуры // УстановитьПараметрыВыбора()

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением, ВалютаДокумента)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	ВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаНовая);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат);
		
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// Процедура - Пересчитать курс кратность валюты расчетов
//
// Параметры:
//  СтруктураДанные	- Структура - 
//		* ВалютаКурсКратность - Структура
//			* Курс - Число
//			* Кратность - Число
//
&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		Или Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(Объект.Курс) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(КурсНовый) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'На дату документа у валюты расчетов %1 был задан курс.
									|Установить курс расчетов %2 в соответствии с курсом валюты?'"),
									КурсВалютыСтрокой, КурсНовыйВалютыСтрокой);
		
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПересчитатьКурсКратностьВалютыДокументаЗавершение", ЭтотОбъект, Новый Структура("КратностьНовый, КурсНовый", КратностьНовый, КурсНовый)), ТекстСообщения, Режим, 0);
		Возврат;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КратностьНовый = ДополнительныеПараметры.КратностьНовый;
	КурсНовый = ДополнительныеПараметры.КурсНовый;
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Курс = КурсНовый;
		Объект.Кратность = КратностьНовый;
	КонецЕсли;
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация, Объект.ВидОперации);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию);
	
	СтруктураДанные.Вставить(
		"ПризнакСтраны",
		Контрагент.ПризнакСтраны);
		
	СтруктураДанные.Вставить(
		"СЭЗ",
		Контрагент.СЭЗ);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанию
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ВидыДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Период, Контрагент, ДоговорКонтрагента, ВидОперации, ЗначенияТекущихСтавокНДСиНСП)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорКонтрагента.ВалютаРасчетов);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаРасчетов, Период));
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНалоги",
		ДоговорКонтрагента.СуммаВключаетНалоги);
	
	СчетаУчета = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(ДоговорКонтрагента.Организация, ДоговорКонтрагента.Владелец, ДоговорКонтрагента);
	СтруктураДанные.Вставить(
		"СчетРасчетов",
		СчетаУчета.СчетРасчетовПоставщика);
		
	ЗначенияСтавокНДСиНСП = УчетНДСВызовСервера.ПолучитьЗначенияСтавокНДСиНСП(Период, ДоговорКонтрагента, ЗначенияТекущихСтавокНДСиНСП); 
	
	СтруктураДанные.Вставить(
		"ЗначениеСтавкиНДС",
		ЗначенияСтавокНДСиНСП.ЗначениеСтавкиНДС);
		
	СтруктураДанные.Вставить(
		"ЗначениеСтавкиНСПДляОС",
		ЗначенияСтавокНДСиНСП.ЗначениеСтавкиНСПДляОС);	
		
	СтруктураДанные.Вставить(
		"НомерДоговора",
		ДоговорКонтрагента.НомерДоговора);
		
	СтруктураДанные.Вставить(
		"ДатаДоговора",
		ДоговорКонтрагента.ДатаДоговора);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаКлиенте
Процедура ОбработатьИзменениеДоговора(МодифицированДоговор = Ложь)
	
	ЗначенияТекущихСтавокНДСиНСП = Новый Структура;
	ЗначенияТекущихСтавокНДСиНСП.Вставить("ЗначениеСтавкиНДС", Объект.ЗначениеСтавкиНДС);
	ЗначенияТекущихСтавокНДСиНСП.Вставить("ЗначениеСтавкиНСП", Объект.ЗначениеСтавкиНСП);
	ЗначенияТекущихСтавокНДСиНСП.Вставить("ЗначениеСтавкиНСПДляОС", Объект.ЗначениеСтавкиНСПДляОС);

	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(ДатаДокумента, Объект.Контрагент, Объект.ДоговорКонтрагента, Объект.ВидОперации, ЗначенияТекущихСтавокНДСиНСП);

	// Обработка изменения валюты
	СтруктураКурсыПред = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	
	Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
	Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
	Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	
	КурсНБКР      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
	КратностьНБКР = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	
	СтруктураКурсы = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	
	// Обработка изменения налогообложения
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ЕАЭС") Тогда
		Объект.СуммаВключаетНалоги = Истина;
	Иначе	
		Объект.СуммаВключаетНалоги 	= Ложь;
	КонецЕсли;
	
	Если ПризнакСтраны = ПредопределенноеЗначение("Перечисление.ПризнакиСтраны.ИмпортЭкспорт") ИЛИ Объект.НДСНеПодтвержден Тогда		
		Объект.ЗначениеСтавкиНДС 		= 0;
		Объект.ЗначениеСтавкиНСПДляОС 	= 0;		
	Иначе
		Объект.ЗначениеСтавкиНДС 		= ?(ДанныеУчетнойПолитики.ПлательщикНДС, СтруктураДанные.ЗначениеСтавкиНДС, 0);
		Объект.ЗначениеСтавкиНСПДляОС 	= ?(ДанныеУчетнойПолитики.ПлательщикНСП, СтруктураДанные.ЗначениеСтавкиНСПДляОС, 0);	
	КонецЕсли;
	
	Объект.НомерКонтракта = СтруктураДанные.НомерДоговора;	
	Объект.ДатаКонтракта = СтруктураДанные.ДатаДоговора;	
	
	// Обработка изменения отражения в учете
	Объект.СчетРасчетов = СтруктураДанные.СчетРасчетов;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧастиПоступление(
		Объект, "ОС", ПараметрыРасчета);

	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеУчетнойПолитики()
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);	
	
	Если НЕ ДанныеУчетнойПолитики.ПлательщикНДС Тогда
		Объект.СерияБланкаСФ = "";
		Объект.НомерБланкаСФ = "";
		Объект.ДатаСФ = Дата(0001,01,01);
		Объект.НеВключатьВРеестрСФ = Ложь;
		Объект.НДСНеПодтвержден = Ложь;
		Объект.ЗначениеСтавкиНДС = 0;
	КонецЕсли;
	
	Если НЕ ДанныеУчетнойПолитики.ПлательщикНСП Тогда
		Объект.ЗначениеСтавкиНСПДляОС = 0;		
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура рассчитывает итоги для подвала формы.
//
&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	ИтогВсего = Объект.ОС.Итог("Всего");
	ИтогСуммаНДС = Объект.ОС.Итог("СуммаНДС");
	ИтогСуммаНСП = Объект.ОС.Итог("СуммаНСП");
	
КонецПроцедуры // ОбновитьПодвалФормы()

&НаКлиенте
Процедура РассчитатьСуммыИНалоги()

	ПараметрыРасчета = ПодготовитьПараметрыРасчета();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуИБазуНДССтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);	
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
			СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЦикла;
		
	ОбновитьПодвалФормы();	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетФактураПолученный()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СчетаФактурыПолученные.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.СчетаФактурыПолученные КАК СчетаФактурыПолученные
		|ГДЕ
		|	СчетаФактурыПолученные.Организация = &Организация
		|	И СчетаФактурыПолученные.Документ = &Документ";
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		СчетФактураПолученный = Выборка.Регистратор;
		Если ЗначениеЗаполнено(Объект.СерияБланкаСФ)
			Или ЗначениеЗаполнено(Объект.НомерБланкаСФ) Тогда 
			Объект.СерияБланкаСФ = "";
			Объект.НомерБланкаСФ = "";
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // ЗаполнитьСчетФактураПолученный()

// Подготовка параметров для расчетов
//
// Параметры:
//	ДляОС - Булево - признак того, что параметры формируются для расчета ОС
//
// Возвращаемое значение:
//	Структура - разделенные данные URI
//		*ПризнакСтраныЕАЭС - Булево - признак страны ЕАЭС или нет
//		*ПризнакСтраныИмпортЭкспорт - Булево - признак страны ИмпортЭкспорт или нет
//		*СуммаВключаетНалоги - Булево - сумма включает налоги или нет
//		*ЗначениеСтавкиНДС - Число - значение ставки НДС
//		*ЗначениеСтавкиНСП - Число - значение ставки НСП
//		*БезналичныйРасчет - Булево - признак безначличного расчета
//		*КурсДокумента - Число - курс валюты
//		*КратностьДокумента - Число - кратность валюты
//		*КурсНБКР - Число - курс валюты по нац банку
//		*КратностьНБКР - Число - кратность валюты по нац банку
//		*РассчитатьБазуНДС - Булево - признак необходимости рассчитать базу НДС
//		*РассчитатьОтБазыНДС - Булево - признак необходимости рассчитывать от базы НДС
//		*СчитатьОтДохода - Булево - признак необходимости рассчитывать от дохода (нужен для реализации)
//		*Точность - Число - точность цены (знаки после запятой, всегда 2)
//
&НаСервере
Функция ПодготовитьПараметрыРасчета()

	ПризнакСтраныЕАЭС 			= ПризнакСтраны = Перечисления.ПризнакиСтраны.ЕАЭС;
	ПризнакСтраныИмпортЭкспорт 	= ПризнакСтраны = Перечисления.ПризнакиСтраны.ИмпортЭкспорт;
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ПризнакСтраныЕАЭС", 			ПризнакСтраныЕАЭС);
	ПараметрыРасчета.Вставить("СуммаВключаетНалоги", 		Объект.СуммаВключаетНалоги);
	ПараметрыРасчета.Вставить("ЗначениеСтавкиНДС", 			Объект.ЗначениеСтавкиНДС);
	ПараметрыРасчета.Вставить("ЗначениеСтавкиНСП", 			Объект.ЗначениеСтавкиНСПДляОС);
	ПараметрыРасчета.Вставить("БезналичныйРасчет", 			Объект.БезналичныйРасчет);
	ПараметрыРасчета.Вставить("КурсДокумента", 				Объект.Курс);
	ПараметрыРасчета.Вставить("КратностьДокумента", 		Объект.Кратность);
	ПараметрыРасчета.Вставить("КурсНБКР", 					КурсНБКР);
	ПараметрыРасчета.Вставить("КратностьНБКР", 				КратностьНБКР);
	ПараметрыРасчета.Вставить("РассчитатьБазуНДС", 			ПризнакСтраныЕАЭС);
	ПараметрыРасчета.Вставить("РассчитатьОтБазыНДС", 		ПризнакСтраныЕАЭС);
	ПараметрыРасчета.Вставить("ПризнакСтраныИмпортЭкспорт", ПризнакСтраныИмпортЭкспорт);
	ПараметрыРасчета.Вставить("СчитатьОтДохода", 			Ложь);
	ПараметрыРасчета.Вставить("Точность", 					2);
	ПараметрыРасчета.Вставить("СчитатьСкидкуОтдельно",		Ложь);

	Возврат ПараметрыРасчета;
КонецФункции

&НаСервере
Процедура ПолучитьПредставлениеЭСФ()
	СведенияОбЭСФ = ЭСФСервер.СведенияОбЭСФПоДокументуОснованию(Объект.Организация, Объект.Ссылка, НСтр("ru = 'Создать новый ЭСФ (полученный)'"));
	ПредставлениеЭСФ = СведенияОбЭСФ.ПредставлениеЭСФ;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
