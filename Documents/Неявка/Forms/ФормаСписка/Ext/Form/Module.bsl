
#Область ОбработчикиФормы

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// БП.ОтборыСписка
	РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, Список);
	// Конец БП.ОтборыСписка
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если НЕ ЗавершениеРаботы Тогда
		// БП.ОтборыСписка
		СохранитьНастройкиОтборов();
		// Конец БП.ОтборыСписка
	КонецЕсли; 
КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора.
//
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И СтрНайти(ИсточникВыбора.ИмяФормы, "ФормаКалендаря") > 0 Тогда
		
		ОтборПериодРегистрации = КонецДня(ВыбранноеЗначение);
		БухгалтерскийУчетКлиент.ПриИзмененииПериодаРегистрации(ЭтаФорма);
		БухгалтерскийУчетКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ПериодРегистрации", ОтборПериодРегистрации, ЗначениеЗаполнено(ОтборПериодРегистрации));
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события ПриЗагрузкеДанныхИзНастроекНаСервере.
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОтборПериодРегистрации 	= Настройки.Получить("ОтборПериодРегистрации"); 
	БухгалтерскийУчетКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ПериодРегистрации", ОтборПериодРегистрации, ЗначениеЗаполнено(ОтборПериодРегистрации));
	ОтображениеПериодаРегистрации = Формат(ОтборПериодРегистрации, "ДФ='MMMM yyyy'");
	
	Если ЗначениеЗаполнено(ОтборПериодРегистрации) Тогда
		РаботаСОтборами.СвернутьРазвернутьОтборыНаСервере(ЭтотОбъект, Истина);
	КонецЕсли;
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

#КонецОбласти

#Область ОбработчикиРеквизитов

&НаКлиенте
//Процедура обработчик события регулирования поля ПериодРегистрации
//
Процедура ОтборПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	БухгалтерскийУчетКлиент.ПриРегулированииПериодаРегистрации(ЭтаФорма, Направление);
	БухгалтерскийУчетКлиент.ПриИзмененииПериодаРегистрации(ЭтаФорма);
	БухгалтерскийУчетКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ПериодРегистрации", ОтборПериодРегистрации, ЗначениеЗаполнено(ОтборПериодРегистрации));
	
КонецПроцедуры //ОтборПериодРегистрацииРегулирование()

&НаКлиенте
//Процедура обработчик события начала выбора поля ПериодРегистрации
//
Процедура ОтборПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка	 = Ложь;
	
	ДатаКалендаряПриОткрытии = ?(ЗначениеЗаполнено(ОтборПериодРегистрации), ОтборПериодРегистрации, БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьТекущуюДатаСеанса());
	
	ОткрытьФорму("ОбщаяФорма.ФормаКалендаря", БухгалтерскийУчетКлиент.ПолучитьПараметрыОткрытияФормыКалендаря(ДатаКалендаряПриОткрытии), ЭтаФорма);
	
КонецПроцедуры //ОтборПериодРегистрацииНачалоВыбора()

&НаКлиенте
//Процедура обработчик события очистки данных поля ПериодРегистрации
//
Процедура ОтборПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	ОтборПериодРегистрации = Неопределено;
	БухгалтерскийУчетКлиент.ПриИзмененииПериодаРегистрации(ЭтаФорма);
	БухгалтерскийУчетКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ПериодРегистрации", ОтборПериодРегистрации, ЗначениеЗаполнено(ОтборПериодРегистрации));
	
КонецПроцедуры //ОтборПериодРегистрацииОчистка()

&НаКлиенте
Процедура ОтборСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Сотрудники.ФизЛицо", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Организация", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область МеткиОтборов

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения = "" Тогда
		ПредставлениеЗначения = Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, ИмяПоляОтбораСписка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Список, МеткаИД);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "Список", "Дата");
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборыНажатие(Элемент)
	
	МеткаИД = 0;
	УдаляемыеМетки = Новый СписокЗначений;
	Для каждого Метка Из ДанныеМеток Цикл
		
		УдаляемыеМетки.Добавить(МеткаИД);
		МеткаИД = МеткаИД + 1;
	КонецЦикла;
	
	УдалитьМеткиОтбора(УдаляемыеМетки);
	
	ОбновитьЭлементыМеток();
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткиОтбора(Метки)
	
	РаботаСОтборами.УдалитьМеткиОтбораСервер(ЭтотОбъект, Список, Метки);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыМеток()
	
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти