#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

// Возвращает заголовок документа для печатной формы.
//
// Параметры:
//  Шапка - любая структура с полями:
//           Номер         - Строка или Число - номер документа;
//           Дата          - Дата - дата документа;
//           Представление - Строка - (необязательный) платформенное представление ссылки на документ.
//                                    Если параметр НазваниеДокумента не задан, то название документа будет вычисляться
//                                    из этого параметра.
//  НазваниеДокумента - Строка - название документа (например, "Счет на оплату").
//
// Возвращаемое значение:
//  Строка - заголовок документа.
//
Функция СформироватьЗаголовокДокумента(Шапка, Знач НазваниеДокумента = "") Экспорт
	
	ДанныеДокумента = Новый Структура("Номер,Дата,Представление");
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, Шапка);
	
	// Если название документа не передано, получим название по представлению документа.
	Если ПустаяСтрока(НазваниеДокумента) И ЗначениеЗаполнено(ДанныеДокумента.Представление) Тогда
		ПоложениеНомера = СтрНайти(ДанныеДокумента.Представление, ДанныеДокумента.Номер);
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(ДанныеДокумента.Представление, ПоложениеНомера - 1));
		КонецЕсли;
	КонецЕсли;

	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеДокумента.Номер);
	Возврат СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),
		НазваниеДокумента, НомерНаПечать, Формат(ДанныеДокумента.Дата, "ДЛФ=DD"));
	
КонецФункции

#КонецОбласти

#Область ИнтерфейсПечати

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_РеестрВвезенных") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
		"ПФ_MXL_РеестрВвезенных", 
		"Реестр ввезенных материальных ресурсов в КР", 
		СформироватьРеестрВвезенных(МассивОбъектов, ОбъектыПечати),
		,
		"Документ.РеестрГТД.ПФ_MXL_РеестрВвезенных");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПФ_MXL_РеестрВвезенных";
	КомандаПечати.Представление = НСтр("ru = 'Реестр ввезенных материальных ресурсов в КР'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	
КонецПроцедуры

Функция СформироватьРеестрВвезенных(МассивОбъектов, ОбъектыПечати = Неопределено) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ЧерноБелаяПечать = Истина;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РеестрГТД.Ссылка,
		|	РеестрГТД.Организация,
		|	РеестрГТД.НачалоПериода,
		|	РеестрГТД.КонецПериода,
		|	РеестрГТД.Расшифровка.(
		|		Ссылка,
		|		НомерСтроки,
		|		Контрагент,
		|		Контрагент.Наименование КАК Поставщик,
		|		ГТДДата,
		|		ГТДНомер,
		|		ГТДСуммаБезНДС,
		|		ГТДСуммаНДС,
		|		ПДДата,
		|		ПДНомер,
		|		ПДСуммаНДС,
		|		НДСРаспределение,
		|		НДСЗачет КАК ПДЗачетНДС,
		|		Комментарий,
		|		ПДСуммаБезНДС,
		|		ВЫБОР
		|			КОГДА НЕ РеестрГТД.Расшифровка.Контрагент.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
		|				ТОГДА РеестрГТД.Расшифровка.Контрагент.СтранаРезидентства.ЕАЭС
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК СтранаРезидентстваЕАЭС,
		|		ВЫБОР
		|			КОГДА НЕ РеестрГТД.Расшифровка.Контрагент.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
		|				ТОГДА РеестрГТД.Расшифровка.Контрагент.СтранаРезидентства.Код
		|			ИНАЧЕ """"
		|		КОНЕЦ КАК КодСтраны
		|	)
		|ИЗ
		|	Документ.РеестрГТД КАК РеестрГТД
		|ГДЕ
		|	РеестрГТД.Ссылка В(&МассивОбъектов)";
		
	Запрос = Новый Запрос(ТекстЗапроса);	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_РеестрВвезенных";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеестрГТД.ПФ_MXL_РеестрВвезенных");
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
		ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьИтогиПоЛисту   	= Макет.ПолучитьОбласть("ИтогиПоЛисту");
		ОбластьИтогиПоРеестру 	= Макет.ПолучитьОбласть("ИтогиПоРеестру");
		ОбластьПодвал		  	= Макет.ПолучитьОбласть("Подвал");
		ОбластьПодвалШтамп	  	= Макет.ПолучитьОбласть("ПодвалШтамп");
		ОбластьСтрокаРеестра 	= Макет.ПолучитьОбласть("СтрокаРеестра");
		
		СтруктураОбластейМакета = Новый Структура;
		СтруктураОбластейМакета.Вставить("ОбластьШапка", 			ОбластьШапка);
		СтруктураОбластейМакета.Вставить("ОбластьШапкаТаблицы", 	ОбластьШапкаТаблицы);
		СтруктураОбластейМакета.Вставить("ОбластьИтогиПоЛисту", 	ОбластьИтогиПоЛисту);
		СтруктураОбластейМакета.Вставить("ОбластьИтогиПоРеестру", 	ОбластьИтогиПоРеестру);
		СтруктураОбластейМакета.Вставить("ОбластьПодвал", 			ОбластьПодвал);
		СтруктураОбластейМакета.Вставить("ОбластьПодвалШтамп", 		ОбластьПодвалШтамп);
		СтруктураОбластейМакета.Вставить("ОбластьСтрокаРеестра", 	ОбластьСтрокаРеестра);
		
		ЗаполнитьШапкуОтчета(Шапка.НачалоПериода, Шапка.КонецПериода, Шапка.Организация, СтруктураОбластейМакета);
		
		ВыборкаДанных = Шапка.Расшифровка.Выбрать();
		
		КоличествоОпераций = ВыборкаДанных.Количество();
		
		Если КоличествоОпераций = 0 Тогда 
			СформироватьПустойБланк(ТабличныйДокумент, Шапка.НачалоПериода, Шапка.КонецПериода, Шапка.Организация); 
			Продолжить;
		КонецЕсли;
		
		КолСтрока = Формат(КоличествоОпераций,"ЧЦ=3; ЧВН=");
		ОбластьШапка.Параметры.Кол1 = Лев(КолСтрока,1); 
		ОбластьШапка.Параметры.Кол2 = Сред(КолСтрока,2,1); 
		ОбластьШапка.Параметры.Кол3 = Сред(КолСтрока,3,1);
		
		ТабличныйДокумент.Вывести(ОбластьШапка);	
		
		ИтогоПоЛисту 		= Новый Структура("ГТДСуммаБезНДС, ГТДСуммаНДС, ПДСуммаНДС, ПДЗачетНДС", 0, 0, 0, 0);
		ИтогоПоРеестру	 	= Новый Структура("ГТДСуммаБезНДС, ГТДСуммаНДС, ПДСуммаНДС, ПДЗачетНДС", 0, 0, 0, 0);
		ИтогоПоРееструТС 	= Новый Структура("ГТДСуммаБезНДС_ТС, ГТДСуммаНДС_ТС, ПДСуммаНДС_ТС, ПДЗачетНДС_ТС", 0, 0, 0, 0); 
		
		// Вывод листов отчета
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		ОбластьИтогиПоЛисту   = Макет.ПолучитьОбласть("ИтогиПоЛисту");
		ОбластьИтогиПоРеестру = Макет.ПолучитьОбласть("ИтогиПоРеестру");
		ОбластьПодвал		  = Макет.ПолучитьОбласть("Подвал");
		ОбластьПодвалШтамп	  = Макет.ПолучитьОбласть("ПодвалШтамп");
		
		// Проверка вывода на одну страницу
		МассивПроверки = Новый Массив;
		МассивПроверки.Добавить(ОбластьШапка);
		МассивПроверки.Добавить(ОбластьШапкаТаблицы);
		
		КоличествоВывода = 0; // переменная для проверки сколько вывели строк. Для определения одна страница или больше, если одна то печатается итог по реестру и подвал, иначе итог по листу и подвал
		КоличествоТекушегоЛиста = 0;
		НомерЛиста = 1;
		
		Пока ВыборкаДанных.Следующий() Цикл
			                           
			Если ВыборкаДанных.СтранаРезидентстваЕАЭС Тогда 
				ИтогоПоРееструТС.ГТДСуммаНДС_ТС 	= ИтогоПоРееструТС.ГТДСуммаНДС_ТС 	+ ВыборкаДанных.ГТДСуммаНДС;
				ИтогоПоРееструТС.ГТДСуммаБезНДС_ТС 	= ИтогоПоРееструТС.ГТДСуммаБезНДС_ТС+ ВыборкаДанных.ГТДСуммаБезНДС;
				ИтогоПоРееструТС.ПДСуммаНДС_ТС 		= ИтогоПоРееструТС.ПДСуммаНДС_ТС 	+ ВыборкаДанных.ПДСуммаНДС;
				ИтогоПоРееструТС.ПДЗачетНДС_ТС 		= ИтогоПоРееструТС.ПДЗачетНДС_ТС 	+ ВыборкаДанных.ПДЗачетНДС;
			КонецЕсли;
			
			
			КоличествоВывода 		= КоличествоВывода + 1;
			КоличествоТекушегоЛиста = КоличествоТекушегоЛиста + 1;
			
			ВыводСтрокиРеестра(ТабличныйДокумент, ВыборкаДанных, СтруктураОбластейМакета, МассивПроверки);
			                   
			РасчетИтоговыхЗначений(ВыборкаДанных, ИтогоПоЛисту, ИтогоПоРеестру);
			
			Если КоличествоОпераций > КоличествоВывода и КоличествоВывода = 19 Тогда // больше чем одна страница и вывели 7 строк = количеству на первой странице
				//3.2. Вывод итогов по листу
				ПодвалСИтогамиПервойСтраницы(ТабличныйДокумент, СтруктураОбластейМакета, МассивПроверки, ИтогоПоЛисту);
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
				Продолжить;
				
			ИначеЕсли КоличествоОпераций = КоличествоВывода Тогда 
				//4. вывод итогов по реестру
				ПодвалСИтогамиПоследнейСтраницы(ТабличныйДокумент, Макет, СтруктураОбластейМакета, МассивПроверки, ИтогоПоРеестру, ИтогоПоРееструТС, КоличествоТекушегоЛиста);
				
				Прервать;
			КонецЕсли;
			
			МассивПроверки.Добавить(ОбластьИтогиПоРеестру);
			МассивПроверки.Добавить(ОбластьПодвал);
			ТабдокПроверки = Новый ТабличныйДокумент;
			ТабдокПроверки.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			
			Если  ТабдокПроверки.ПРоверитьВывод(МассивПроверки) Тогда 
				МассивПроверки.Удалить(МассивПроверки.Количество() -1);
				МассивПроверки.Удалить(МассивПроверки.Количество() -1);
				
				Продолжить;
			Иначе 
				//5. вывод подвала
				ПодвалПромежуточнойСтраницыСИтогами(ТабличныйДокумент, СтруктураОбластейМакета, МассивПроверки, ИтогоПоЛисту);

			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ОбъектыПечати = Неопределено Тогда		
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;	

КонецФункции

// Процедура - Сформировать табличный документ для "Отчет по НДС"
//
// Параметры:
//  СтруктураПараметров	 - Структура - Параметры формирования отчета.
//  РезультатФормирования	 	- Структура - 
//
Процедура СформироватьТабличныйДокумент(СтруктураПараметров, РезультатФормирования) Экспорт
	Организация 	= СтруктураПараметров.Организация;
	НачалоПериода 	= СтруктураПараметров.НачалоПериода;
	КонецПериода 	= СтруктураПараметров.КонецПериода;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеестрГТД.Ссылка
		|ИЗ
		|	Документ.РеестрГТД КАК РеестрГТД
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(РеестрГТД.НачалоПериода, МЕСЯЦ) = &НачалоПериода
		|	И КОНЕЦПЕРИОДА(РеестрГТД.КонецПериода, МЕСЯЦ) = &КонецПериода
		|	И НЕ РеестрГТД.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(КонецПериода));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(НачалоПериода));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ДокументСсылка = ВыборкаДетальныеЗаписи.Ссылка;
	Иначе	
	    ДокументСсылка = Неопределено;
	КонецЕсли;		
	
	РезультатФормирования.Результат = СформироватьРеестрВвезенных(ДокументСсылка);
	
КонецПроцедуры

Процедура РасчетИтоговыхЗначений(ВыборкаДанных, ИтогоПоЛисту, ИтогоПоРеестру)
	
	ИтогоПоЛисту.ГТДСуммаНДС		= ИтогоПоЛисту.ГТДСуммаНДС 	   	+ ВыборкаДанных.ГТДСуммаНДС;
	ИтогоПоРеестру.ГТДСуммаНДС		= ИтогоПоРеестру.ГТДСуммаНДС	+ ВыборкаДанных.ГТДСуммаНДС;
	ИтогоПоЛисту.ПДСуммаНДС  		= ИтогоПоЛисту.ПДСуммаНДС 	   	+ ВыборкаДанных.ПДСуммаНДС;
	ИтогоПоРеестру.ПДСуммаНДС		= ИтогоПоРеестру.ПДСуммаНДС		+ ВыборкаДанных.ПДСуммаНДС;
	ИтогоПоЛисту.ГТДСуммаБезНДС 	= ИтогоПоЛисту.ГТДСуммаБезНДС 	+ ВыборкаДанных.ГТДСуммаБезНДС;
	ИтогоПоРеестру.ГТДСуммаБезНДС	= ИтогоПоРеестру.ГТДСуммаБезНДС	+ ВыборкаДанных.ГТДСуммаБезНДС;
	ИтогоПоЛисту.ПДЗачетНДС  		= ИтогоПоЛисту.ПДЗачетНДС   	+ ВыборкаДанных.ПДЗачетНДС;
	ИтогоПоРеестру.ПДЗачетНДС  		= ИтогоПоРеестру.ПДЗачетНДС 	+ ВыборкаДанных.ПДЗачетНДС;

КонецПроцедуры

Процедура ПодвалПромежуточнойСтраницыСИтогами(Табдок, СтруктураОбластейМакета, МассивПроверки, ИтогоПоЛисту)
	
	СтруктураОбластейМакета.ОбластьИтогиПоЛисту.Параметры.Заполнить(ИтогоПоЛисту);

	Табдок.Вывести(СтруктураОбластейМакета.ОбластьИтогиПоЛисту);
	Табдок.Вывести(СтруктураОбластейМакета.ОбластьПодвал);
	
	МассивПроверки = Новый Массив;
	МассивПроверки.Добавить(СтруктураОбластейМакета.ОбластьШапкаТаблицы);
	
	Табдок.ВывестиГоризонтальныйРазделительСтраниц();
	Табдок.Вывести(СтруктураОбластейМакета.ОбластьШапкаТаблицы);
	
КонецПроцедуры

Процедура ПодвалСИтогамиПоследнейСтраницы(Табдок, Макет, СтруктураОбластейМакета, МассивПроверки, ИтогоПоРеестру, ИтогоПоРееструТС, КоличествоТекушегоЛиста)
	
	СтруктураОбластейМакета.ОбластьИтогиПоРеестру.Параметры.Заполнить(ИтогоПоРеестру);	
	СтруктураОбластейМакета.ОбластьИтогиПоРеестру.Параметры.Заполнить(ИтогоПоРееструТС);
	
	МассивПроверки.Добавить(СтруктураОбластейМакета.ОбластьИтогиПоРеестру);
	МассивПроверки.Добавить(СтруктураОбластейМакета.ОбластьПодвал);
	
	Пока  Не КоличествоТекушегоЛиста >= 17 Цикл
		ОбластьСтрокаРеестра 	= Макет.ПолучитьОбласть("СтрокаРеестра");
		Табдок.Вывести(ОбластьСтрокаРеестра);
		КоличествоТекушегоЛиста = КоличествоТекушегоЛиста +1;
	КонецЦикла;
	
	Табдок.Вывести(СтруктураОбластейМакета.ОбластьИтогиПоРеестру);
	Табдок.Вывести(СтруктураОбластейМакета.ОбластьПодвалШтамп);
	
КонецПроцедуры

Процедура ПодвалСИтогамиПервойСтраницы(Табдок, СтруктураОбластейМакета, МассивПроверки, ИтогоПоЛисту)
	
	СтруктураОбластейМакета.ОбластьИтогиПоЛисту.Параметры.Заполнить(ИтогоПоЛисту);
	Табдок.Вывести(СтруктураОбластейМакета.ОбластьИтогиПоЛисту);
	Табдок.Вывести(СтруктураОбластейМакета.ОбластьПодвал);
	
	МассивПроверки = Новый Массив;
	МассивПроверки.Добавить(СтруктураОбластейМакета.ОбластьШапкаТаблицы);
	
КонецПроцедуры // СформироватьОтчет()

// Процедура - Заполнить шапку отчета
//
// Параметры:
//  НачалоПериода	 - 	 - 
//  КонецПериода	 - 	 - 
//  Организация		 - 	 - 
//  ОбластьШапка	 - 	 - 
//
Процедура ЗаполнитьШапкуОтчета(НачалоПериода, КонецПериода, Организация, СтруктураОбластейМакета)
	
	ОбластьШапка = СтруктураОбластейМакета.ОбластьШапка;
	нКонецПериода = НРег(Формат(КонецМесяца(КонецПериода), "ДЛФ=D"));
	нНачалоПериода = НРег(Формат(НачалоМесяца(НачалоПериода), "ДЛФ=D"));
	
	ОрганизацияКодПоОКПО               = Организация.КодПоОКПО;
	ОрганизацияИНН                     = Организация.ГоловнаяОрганизация.ИНН;
	ОрганизацияГНСКод                  = Организация.ГоловнаяОрганизация.ГНС.Код;
	ОбластьШапка.Параметры.Организация = Организация.ГоловнаяОрганизация.НаименованиеПолное
										+ ?(ЗначениеЗаполнено(Организация.ГоловнаяОрганизация.НаименованиеПолное), Символы.ПС + " (", "")
										+ Организация.НаименованиеПолное
										+ ?(ЗначениеЗаполнено(Организация.ГоловнаяОрганизация.НаименованиеПолное), ")", "");
	
	ОбластьШапка.Параметры.ДН1		= Сред(нНачалоПериода, 1, 1);
	ОбластьШапка.Параметры.ДН2		= Сред(нНачалоПериода, 2, 1);
	ОбластьШапка.Параметры.МН1		= Сред(нНачалоПериода, 4, 1);
	ОбластьШапка.Параметры.МН2		= Сред(нНачалоПериода, 5, 1);
	ОбластьШапка.Параметры.ГН1		= Сред(нНачалоПериода, 7, 1);
	ОбластьШапка.Параметры.ГН2		= Сред(нНачалоПериода, 8, 1);
	ОбластьШапка.Параметры.ГН3		= Сред(нНачалоПериода, 9, 1);
	ОбластьШапка.Параметры.ГН4		= Сред(нНачалоПериода, 10, 1);
	
	ОбластьШапка.Параметры.ДК1		= Сред(нКонецПериода, 1, 1);
	ОбластьШапка.Параметры.ДК2		= Сред(нКонецПериода, 2, 1);
	ОбластьШапка.Параметры.МК1		= Сред(нКонецПериода, 4, 1);
	ОбластьШапка.Параметры.МК2		= Сред(нКонецПериода, 5, 1);
	ОбластьШапка.Параметры.ГК1		= Сред(нКонецПериода, 7, 1);
	ОбластьШапка.Параметры.ГК2		= Сред(нКонецПериода, 8, 1);
	ОбластьШапка.Параметры.ГК3		= Сред(нКонецПериода, 9, 1);
	ОбластьШапка.Параметры.ГК4		= Сред(нКонецПериода, 10, 1);
	
	ОбластьШапка.Параметры.ИНН1 	= Сред(ОрганизацияИНН, 1, 1);
	ОбластьШапка.Параметры.ИНН2 	= Сред(ОрганизацияИНН, 2, 1);
	ОбластьШапка.Параметры.ИНН3 	= Сред(ОрганизацияИНН, 3, 1);
	ОбластьШапка.Параметры.ИНН4 	= Сред(ОрганизацияИНН, 4, 1);
	ОбластьШапка.Параметры.ИНН5 	= Сред(ОрганизацияИНН, 5, 1);
	ОбластьШапка.Параметры.ИНН6 	= Сред(ОрганизацияИНН, 6, 1);
	ОбластьШапка.Параметры.ИНН7 	= Сред(ОрганизацияИНН, 7, 1);
	ОбластьШапка.Параметры.ИНН8 	= Сред(ОрганизацияИНН, 8, 1);
	ОбластьШапка.Параметры.ИНН9 	= Сред(ОрганизацияИНН, 9, 1);
	ОбластьШапка.Параметры.ИНН10 	= Сред(ОрганизацияИНН, 10, 1);
	ОбластьШапка.Параметры.ИНН11 	= Сред(ОрганизацияИНН, 11, 1);
	ОбластьШапка.Параметры.ИНН12 	= Сред(ОрганизацияИНН, 12, 1);
	ОбластьШапка.Параметры.ИНН13 	= Сред(ОрганизацияИНН, 13, 1);
	ОбластьШапка.Параметры.ИНН14 	= Сред(ОрганизацияИНН, 14, 1);                 
	
	ОбластьШапка.Параметры.НАЛОГОВАЯ 	= Организация.ГНС.Наименование;
	
	ОбластьШапка.Параметры.ГНС1			= Сред(ОрганизацияГНСКод, 1, 1);
	ОбластьШапка.Параметры.ГНС2			= Сред(ОрганизацияГНСКод, 2, 1);
	ОбластьШапка.Параметры.ГНС3			= Сред(ОрганизацияГНСКод, 3, 1);
	
	ОбластьШапка.Параметры.ОКПО1		= Сред(ОрганизацияКодПоОКПО, 1, 1);
	ОбластьШапка.Параметры.ОКПО2		= Сред(ОрганизацияКодПоОКПО, 2, 1);
	ОбластьШапка.Параметры.ОКПО3		= Сред(ОрганизацияКодПоОКПО, 3, 1);
	ОбластьШапка.Параметры.ОКПО4		= Сред(ОрганизацияКодПоОКПО, 4, 1);
	ОбластьШапка.Параметры.ОКПО5		= Сред(ОрганизацияКодПоОКПО, 5, 1);
	ОбластьШапка.Параметры.ОКПО6		= Сред(ОрганизацияКодПоОКПО, 6, 1);
	ОбластьШапка.Параметры.ОКПО7		= Сред(ОрганизацияКодПоОКПО, 7, 1);
	ОбластьШапка.Параметры.ОКПО8		= Сред(ОрганизацияКодПоОКПО, 8, 1);
	
КонецПроцедуры
			
// Процедура - Вывод строки реестра
//
// Параметры:
//  ТабличныйДокумент	- 	 - 
//  ВыборкаДанных	 	- 	 - 
//  Макет			 	- 	 - 
//  МассивПроверки	 	- 	 - 
//
Процедура ВыводСтрокиРеестра(ТабличныйДокумент, СтрокаТаблицы, СтруктураОбластейМакета, МассивПроверки)
		
	СтруктураОбластейМакета.ОбластьСтрокаРеестра.Параметры.Заполнить(СтрокаТаблицы);
	
	ТабличныйДокумент.Вывести(СтруктураОбластейМакета.ОбластьСтрокаРеестра);
	МассивПроверки.Добавить(СтруктураОбластейМакета.ОбластьСтрокаРеестра);
	
КонецПроцедуры	
		
// Процедура - Сформировать пустой бланк
//
// Параметры:
//  ТабличныйДокумент	- 	 - 
//  НачалоПериода	 	- 	 - 
//  КонецПериода	 	- 	 - 
//  Организация		 	- 	 - 
//
Процедура СформироватьПустойБланк(ТабличныйДокумент, НачалоПериода,КонецПериода, Организация) Экспорт 
	
	Макет = ПолучитьМакет("ПФ_MXL_РеестрВвезенных");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьШапкуОтчета(НачалоПериода,КонецПериода, Организация, ОбластьШапка);
	
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	
	ОбластьИтогиПоЛисту   = Макет.ПолучитьОбласть("ИтогиПоЛисту");
	ОбластьИтогиПоРеестру = Макет.ПолучитьОбласть("ИтогиПоРеестру");
	ОбластьПодвал		  = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвалШтамп		  = Макет.ПолучитьОбласть("ПодвалШтамп");
	ОбластьСтрокаРеестра  = Макет.ПолучитьОбласть("СтрокаРеестра");
	
	МассивПроверки = Новый Массив;
	МассивПроверки.Добавить(ОбластьШапка);
	МассивПроверки.Добавить(ОбластьШапкаТаблицы);
	МассивПроверки.Добавить(ОбластьИтогиПоЛисту);
	МассивПроверки.Добавить(ОбластьПодвалШтамп);
	
	Сч = 0;
	Пока не Сч = 7 Цикл
		МассивПроверки.Добавить(ОбластьСтрокаРеестра);
		Сч = Сч +1;
	КонецЦикла;
	
	МассивПроверки.Удалить(2);
	МассивПроверки.Удалить(2);
	МассивПроверки.Добавить(ОбластьИтогиПоЛисту);
	МассивПроверки.Добавить(ОбластьПодвалШтамп);
	
	Для Каждого Область Из МассивПроверки Цикл 
		ТабличныйДокумент.Вывести(Область);
	КонецЦикла;
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	МассивПроверки.Очистить();
	
	МассивПроверки = Новый Массив;
	МассивПроверки.Добавить(ОбластьШапкаТаблицы);
	МассивПроверки.Добавить(ОбластьИтогиПоРеестру);
	МассивПроверки.Добавить(ОбластьПодвал);
	
	Сч = 0;
	Пока не Сч = 19 Цикл
		МассивПроверки.Добавить(ОбластьСтрокаРеестра);
		Сч = Сч +1;
	КонецЦикла;
	
	МассивПроверки.Удалить(1);
	МассивПроверки.Удалить(1);
	МассивПроверки.Добавить(ОбластьИтогиПоРеестру);
	МассивПроверки.Добавить(ОбластьПодвал);
	
	Для Каждого Область Из МассивПроверки Цикл 
		ТабличныйДокумент.Вывести(Область);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли