
#Область ОбработчикиСлужебные

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
Процедура ЗаполнитьТабличныеЧастиНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСГТДИмпорт.Регистратор КАК Ссылка,
	|	ВЫРАЗИТЬ(НДСГТДИмпорт.Регистратор КАК Документ.ГТДПоИмпорту).Дата КАК ГТДДата,
	|	ВЫРАЗИТЬ(НДСГТДИмпорт.Регистратор КАК Документ.ГТДПоИмпорту).НомерГТД КАК ГТДНомер,
	|	НДСГТДИмпорт.СуммаСебестоимостиОборот КАК СуммаБезНДС,
	|	НДСГТДИмпорт.СуммаНДСОборот КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА НЕ НДСГТДИмпорт.ЗачетНДС = ЗНАЧЕНИЕ(Перечисление.ВидыЗачетаНДС.Себестоимость)
	|			ТОГДА НДСГТДИмпорт.СуммаНДСОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НДСЗачет,
	|	ВЫБОР
	|		КОГДА НДСГТДИмпорт.ЗачетНДС = ЗНАЧЕНИЕ(Перечисление.ВидыЗачетаНДС.Распределение)
	|			ТОГДА НДСГТДИмпорт.СуммаНДСОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НДСРаспределение,
	|	ВЫРАЗИТЬ(НДСГТДИмпорт.Регистратор КАК Документ.ГТДПоИмпорту).Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ВременнаяТаблицаПоНДС
	|ИЗ
	|	РегистрНакопления.НДСГТДИмпорт.Обороты(&НачалоПериода, &КонецПериода, Авто, Организация = &Организация) КАК НДСГТДИмпорт
	|ГДЕ
	|	НДСГТДИмпорт.ПериодСекунда МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСГТДИмпорт.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаПоНДС.Ссылка КАК Ссылка,
	|	ВременнаяТаблицаПоНДС.ГТДДата,
	|	ВременнаяТаблицаПоНДС.ГТДНомер,
	|	СУММА(ВременнаяТаблицаПоНДС.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ВременнаяТаблицаПоНДС.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ВременнаяТаблицаПоНДС.НДСЗачет) КАК НДСЗачет,
	|	СУММА(ВременнаяТаблицаПоНДС.НДСРаспределение) КАК НДСРаспределение,
	|	ВременнаяТаблицаПоНДС.Контрагент
	|ПОМЕСТИТЬ ВременнаяТаблицаПоНДСсГруппировкой
	|ИЗ
	|	ВременнаяТаблицаПоНДС КАК ВременнаяТаблицаПоНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаПоНДС.ГТДНомер,
	|	ВременнаяТаблицаПоНДС.ГТДДата,
	|	ВременнаяТаблицаПоНДС.Контрагент,
	|	ВременнаяТаблицаПоНДС.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРеестраГТДОбороты.Документ КАК ДокументРасчетов,
	|	СУММА(ДанныеРеестраГТДОбороты.СуммаОборот) КАК ПДСуммаНДС,
	|	ВЫБОР
	|		КОГДА ДанныеРеестраГТДОбороты.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеИсходящее
	|			ТОГДА ВЫРАЗИТЬ(ДанныеРеестраГТДОбороты.Регистратор КАК Документ.ПлатежноеПоручениеИсходящее).Номер
	|		КОГДА ДанныеРеестраГТДОбороты.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
	|			ТОГДА ВЫРАЗИТЬ(ДанныеРеестраГТДОбороты.Регистратор КАК Документ.РасходныйКассовыйОрдер).Номер
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПДНомер,
	|	ВЫБОР
	|		КОГДА ДанныеРеестраГТДОбороты.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеИсходящее
	|			ТОГДА ВЫРАЗИТЬ(ДанныеРеестраГТДОбороты.Регистратор КАК Документ.ПлатежноеПоручениеИсходящее).Дата
	|		КОГДА ДанныеРеестраГТДОбороты.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
	|			ТОГДА ВЫРАЗИТЬ(ДанныеРеестраГТДОбороты.Регистратор КАК Документ.РасходныйКассовыйОрдер).Дата
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ПДДата
	|ПОМЕСТИТЬ ВременнаяТаблицаПлатежныеДокументы
	|ИЗ
	|	РегистрНакопления.ДанныеРеестраГТД.Обороты(&НачалоПериода, &КонецПериода, Авто, Организация = &Организация) КАК ДанныеРеестраГТДОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРеестраГТДОбороты.Документ,
	|	ВЫБОР
	|		КОГДА ДанныеРеестраГТДОбороты.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеИсходящее
	|			ТОГДА ВЫРАЗИТЬ(ДанныеРеестраГТДОбороты.Регистратор КАК Документ.ПлатежноеПоручениеИсходящее).Номер
	|		КОГДА ДанныеРеестраГТДОбороты.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
	|			ТОГДА ВЫРАЗИТЬ(ДанныеРеестраГТДОбороты.Регистратор КАК Документ.РасходныйКассовыйОрдер).Номер
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеРеестраГТДОбороты.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеИсходящее
	|			ТОГДА ВЫРАЗИТЬ(ДанныеРеестраГТДОбороты.Регистратор КАК Документ.ПлатежноеПоручениеИсходящее).Дата
	|		КОГДА ДанныеРеестраГТДОбороты.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
	|			ТОГДА ВЫРАЗИТЬ(ДанныеРеестраГТДОбороты.Регистратор КАК Документ.РасходныйКассовыйОрдер).Дата
	|		ИНАЧЕ NULL
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаПоНДСсГруппировкой.Ссылка,
	|	ВременнаяТаблицаПоНДСсГруппировкой.ГТДДата,
	|	ВременнаяТаблицаПоНДСсГруппировкой.ГТДНомер,
	|	ВременнаяТаблицаПоНДСсГруппировкой.СуммаБезНДС КАК ГТДСуммаБезНДС,
	|	ВременнаяТаблицаПоНДСсГруппировкой.СуммаНДС КАК ГТДСуммаНДС,
	|	ВременнаяТаблицаПоНДСсГруппировкой.НДСЗачет,
	|	ВременнаяТаблицаПоНДСсГруппировкой.НДСРаспределение,
	|	ВременнаяТаблицаПоНДСсГруппировкой.Контрагент,
	|	ВременнаяТаблицаПлатежныеДокументы.ПДСуммаНДС,
	|	ВременнаяТаблицаПлатежныеДокументы.ПДНомер,
	|	ВременнаяТаблицаПлатежныеДокументы.ПДДата
	|ИЗ
	|	ВременнаяТаблицаПоНДСсГруппировкой КАК ВременнаяТаблицаПоНДСсГруппировкой
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаПлатежныеДокументы КАК ВременнаяТаблицаПлатежныеДокументы
	|		ПО ВременнаяТаблицаПоНДСсГруппировкой.Ссылка = ВременнаяТаблицаПлатежныеДокументы.ДокументРасчетов";
		
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Объект.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Объект.КонецПериода));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Объект.Расшифровка.Загрузить(Запрос.Выполнить().Выгрузить());	
	
КонецПроцедуры // ЗаполнитьТабличныеЧастиНаСервере(ИмяКоманды)

&НаСервере
Процедура ВыгрузкаВExcelНаСервере(Адрес)
	Записать();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Документ = РеквизитФормыВЗначение("Объект");
	ТабличныйДокумент = Документы.РеестрГТД.СформироватьРеестрВвезенных(Объект.Ссылка);
	
	Адрес = ПоместитьВоВременноеХранилище(ТабличныйДокумент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсисте.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаВажныеКоманды);
	// Конец СтандартныеПодсистемы.Печать
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
КонецПроцедуры // ПриЧтенииНаСервере()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена дата начало периода! Заполнение документа отменено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"НачалоПериода",,Отказ);		
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена дата конца периода! Заполнение документа отменено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"КонецПериода",,Отказ);			
	КонецЕсли;		

	Если Отказ Тогда 
		Возврат
	КонецЕсли;		
	
	Если Объект.Расшифровка.Количество() > 0 Тогда 
		ДополнительныеПараметры = Новый Структура();
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьТабличыеЧасти", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет очищена! Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);	
	Иначе
		ЗаполнитьТабличныеЧастиНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаВExcel(Команда)	
	Если Объект.Расшифровка.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет данных для создания файла Excel!'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Истина);
		Возврат;	
	КонецЕсли;
	
	Если Объект.Расшифровка.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросВыгрузкаВExcel", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'В результате операции будет создан новый файл Excel. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьТабличыеЧасти(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Расшифровка.Очистить();
        ЗаполнитьТабличныеЧастиНаСервере();
    КонецЕсли;
КонецПроцедуры // ЗаполнитьПоОснованию()

&НаКлиенте
Процедура ОтветНаВопросВыгрузкаВExcel(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.Заголовок		= "Сохранение документа Excel";
		Диалог.Фильтр			= "Документ Excel (*.xls;.xlsx)|*.xls;*.xlsx";
		Если Диалог.Выбрать() Тогда
			Если НЕ ПустаяСтрока(Диалог.ПолноеИмяФайла) Тогда				
				Адрес = "";
				Состояние("Выполняется формирование файла Excel! ", ,"Пожалуйста, подождите!", БиблиотекаКартинок.Информация32);
		        ВыгрузкаВExcelНаСервере(Адрес);
				ТабличныйДокумент = ПолучитьИзВременногоХранилища(Адрес);
				ТабличныйДокумент.Записать(Диалог.ПолноеИмяФайла, ТипФайлаТабличногоДокумента.XLSX);		
			КонецЕсли;
		КонецЕсли;
    КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	БухгалтерскийУчетСервер.ПроверитьСуществованиеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	Объект.КонецПериода = КонецМесяца(Объект.НачалоПериода);
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	Объект.КонецПериода 	= КонецМесяца(Объект.НачалоПериода);
	Объект.НачалоПериода 	= НачалоМесяца(Объект.КонецПериода);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать
#КонецОбласти 

