
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();	
	ТипЦен = Объект.ДоговорКонтрагента.ТипЦен;	
	СуммаСкидкиПоСтроке = Объект.ВидСкидкиНаценки = Перечисления.ВидыСкидокНаценок.СуммаПоСтроке;
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	ЗаполнитьСчетФактураВыписанный();
	
	УстановитьФункциональныеОпцииФормы();

	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСервере(Элементы, "Товары");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСервере(Элементы, "Услуги");
	// Конец КопированиеСтрокТабличныхЧастей
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеБППовтИсп.ИспользоватьПодключаемоеОборудование();
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьТекущуюСтраницу();
	ОбновитьПодвалФормы();
	         
    СформироватьСериюСчетаФактуры();
	СформироватьНомераСчетФактур();
	УстановитьФорматЦены();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "МодифицированДоговораКонтрагента"
		И Параметр = Объект.ДоговорКонтрагента Тогда
		ОбработатьИзменениеДоговора(Истина);
		
	ИначеЕсли ИмяСобытия = "ПодборНоменклатурыПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище, "Товары");
		
		ОбновитьПодвалФормы();
	ИначеЕсли ИмяСобытия = "ПодборОСПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		ПолучитьОСИзХранилища(АдресЗапасовВХранилище, "ОС");
		
	ИначеЕсли ИмяСобытия = "СчетФактураВыписанныйПослеЗаписи"
		И НЕ Параметр.Найти(Объект.Ссылка) = Неопределено Тогда  
		
		ЗаполнитьСчетФактураВыписанный();
		УстановитьВидимостьДоступностьЭлементов();
	Иначе 
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Товары");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Услуги");
	КонецЕсли;
	// Конец КопированиеСтрокТабличныхЧастей
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату.
			Если Параметр[1] = Неопределено Тогда
				ТекШтрихкод = Параметр[0]; // Достаем штрихкод из основных данных
			Иначе
				ТекШтрихкод = Параметр[1][1]; // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			ПоискПоШтрихкодуЗавершение(ТекШтрихкод, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары"));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если НЕ ВладелецФормы = Неопределено Тогда		
		Если ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения") Тогда
		
			ЗакрыватьПриВыборе = Ложь;
			
			СтруктураОповещения = Новый Структура();
			СтруктураОповещения.Вставить("Ссылка", Объект.Ссылка);   
			СтруктураОповещения.Вставить("Представление", Строка(Объект.Ссылка));
			
			Если СтрНайти(ВладелецФормы.ИмяФормы, "ФормаДокумента") <> 0    
				И ВладелецФормы.Объект.Ссылка = Объект.ДокументОснование Тогда
				
				Представление = Неопределено;
				ОповеститьОВыборе(СтруктураОповещения);			
			Иначе			
				Оповестить("СозданаРеализацияДляДвиженияМБП", СтруктураОповещения);
			КонецЕсли; 
		КонецЕсли;	
	Иначе
		Оповестить("СозданаРеализацияДляДвиженияМБП", СтруктураОповещения);		
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением, Объект.ВалютаДокумента);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		ОбработатьИзменениеУчетнойПолитики();

		Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные);
		КонецЕсли;	
	КонецЕсли;
	
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);	
	УстановитьФункциональныеОпцииФормы();
	
	ОбработатьИзменениеДоговора();
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер = "";
	Объект.БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Объект.Организация);

    СформироватьСериюСчетаФактуры();
	СформироватьНомераСчетФактур();

	ОбработатьИзменениеУчетнойПолитики();

	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	УстановитьФункциональныеОпцииФормы();
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);	
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ОбработатьИзменениеДоговора();
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ОбработатьИзменениеДоговора();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор контрагента.
//
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ОбработатьИзменениеДоговора();
КонецПроцедуры

// Процедура - обработчик события Нажатие поля надписи ЦеныИВалюта.
//
&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	Модифицированность = Истина;
	
КонецПроцедуры // РедактироватьЦеныИВалюту()

// Процедура - обработчик события ПриИзменении поля ввода Вид скидки.
//
&НаКлиенте
Процедура ВидСкидкиПриИзменении(Элемент)
	// Заполнение счета учета отражения скидок
	Если НЕ ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда 
		Объект.СчетУчетаСкидок = Неопределено;
		
		// Очистка скидок
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;		
			СтрокаТабличнойЧасти.СуммаСкидки = 0;		
		КонецЦикла;	
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;		
			СтрокаТабличнойЧасти.СуммаСкидки = 0;		
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;		
			СтрокаТабличнойЧасти.СуммаСкидки = 0;		
		КонецЦикла;	
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.СчетУчетаСкидок) Тогда  
		Объект.СчетУчетаСкидок = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ВозвратПроданныхТоваровИСкидки");
	КонецЕсли;	
	
	СуммаСкидкиПоСтроке = Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке");
	ВидСкидкиПриИзмененииНаКлиенте();
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Скидка процент.
//
&НаКлиенте
Процедура ПроцентСкидкиНаценкиПриИзменении(Элемент)
	ВидСкидкиПриИзмененииНаКлиенте()
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Серия бланка счет-фактуры.
//
&НаКлиенте
Процедура СерияБланкаСФПриИзменении(Элемент)

	СформироватьНомераСчетФактур();
		
	Если ЗначениеЗаполнено(Объект.СерияБланкаСФ) 
		И (НЕ ЗначениеЗаполнено(Объект.ДатаСФ)) Тогда
		Объект.ДатаСФ = ДатаДокумента;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора поля ввода Номер бланка счет-фактуры.
//
&НаКлиенте
Процедура НомерБланкаСФОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = "000000" Тогда
		СтандартнаяОбработка = Ложь;
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("НомерБланкаСФОбработкаВыбораЗавершение", ЭтотОбъект);
		ПоказатьВводСтроки(ОбработчикОповещенияОЗакрытии, "", НСтр("ru = 'Укажите номер'"), 6);
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флага Безналичный расчет.
//
&НаКлиенте
Процедура БезналичныйРасчетПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(
		Объект,
		ДатаДокумента,
		Объект.Организация,
		"Товары",
		Объект.СуммаВключаетНалоги, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")),
		Объект.БезналичныйРасчет,
		?(Объект.СуммаВключаетНалоги, Ложь, Истина));
		
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(
		Объект,
		ДатаДокумента,
		Объект.Организация,
		"Услуги",
		Объект.СуммаВключаетНалоги, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСПУслуги, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет,
		?(Объект.СуммаВключаетНалоги, Ложь, Истина));
		
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(
		Объект,
		ДатаДокумента,
		Объект.Организация,
		"ОС",
		Объект.СуммаВключаетНалоги, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.Прочее"), ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет,
		?(Объект.СуммаВключаетНалоги, Ложь, Истина));	
		
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();	
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля выбора Точность цены.
//
&НаКлиенте
Процедура ТочностьЦеныПриИзменении(Элемент)
	
	УстановитьФорматЦены();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НДС.
//
&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	МассивТабличныхЧастей = Новый Массив();
	МассивТабличныхЧастей.Добавить("Товары");
	МассивТабличныхЧастей.Добавить("Услуги");
	МассивТабличныхЧастей.Добавить("ОС");
	
	Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
		
		Если ТабличнаяЧасть = "Товары" Тогда
			СтавкаНСП = Объект.СтавкаНСП;
		ИначеЕсли ТабличнаяЧасть = "Услуги" Тогда
			СтавкаНСП = Объект.СтавкаНСПУслуги;
		Иначе
			СтавкаНСП = ПредопределенноеЗначение("Справочник.СтавкиНСП.Прочее");
		КонецЕсли;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть] Цикл
			Если Объект.СуммаВключаетНалоги Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				
				Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;	
					
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
				СтрокаТабличнойЧасти, 
				ДатаДокумента,
				Объект.Организация, 
				Истина, 
				?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
				?(ДанныеУчетнойПолитики.ПлательщикНСП, СтавкаНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
				Объект.БезналичныйРасчет);
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
				
			Иначе
				Если ТабличнаяЧасть <> "ОС" Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
				КонецЕсли;	
					
				СтруктураДопПараметров = Новый Структура();
				СтруктураДопПараметров.Вставить("Период", 			 ДатаДокумента);
				СтруктураДопПараметров.Вставить("Организация", 		 Объект.Организация);
				СтруктураДопПараметров.Вставить("БезналичныйРасчет", Объект.БезналичныйРасчет);
				СтруктураДопПараметров.Вставить("СтавкаНДС", 		 Объект.СтавкаНДС);
				СтруктураДопПараметров.Вставить("СтавкаНСП", 		 СтавкаНСП);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтруктураДопПараметров);	
				
				Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;	
					
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
				СтрокаТабличнойЧасти, 
				ДатаДокумента,
				Объект.Организация, 
				Истина, 
				?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
				?(ДанныеУчетнойПолитики.ПлательщикНСП, СтавкаНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
				Объект.БезналичныйРасчет);
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
				
				// После расчета Всего и налогов пересчет Дохода, чтобы исключить разницу в копейки.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОбновитьПодвалФормы();
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НСП.
//
&НаКлиенте
Процедура СтавкаНСППриИзменении(Элемент)
	
	Если НЕ Объект.БезналичныйРасчет Тогда
	
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл		
			Если Объект.СуммаВключаетНалоги Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				
				Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;	
					
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
				СтрокаТабличнойЧасти, 
				ДатаДокумента,
				Объект.Организация, 
				Истина, 
				?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
				?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
				Объект.БезналичныйРасчет);
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
				
			Иначе
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
				
				СтруктураДопПараметров = Новый Структура();
				СтруктураДопПараметров.Вставить("Период", 			 ДатаДокумента);
				СтруктураДопПараметров.Вставить("Организация", 		 Объект.Организация);
				СтруктураДопПараметров.Вставить("БезналичныйРасчет", Объект.БезналичныйРасчет);
				СтруктураДопПараметров.Вставить("СтавкаНДС", 		 Объект.СтавкаНДС);
				СтруктураДопПараметров.Вставить("СтавкаНСП", 		 Объект.СтавкаНСП);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтруктураДопПараметров);	
				
				Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;	
					
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
				СтрокаТабличнойЧасти, 
				ДатаДокумента,
				Объект.Организация, 
				Истина, 
				?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
				?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
				Объект.БезналичныйРасчет);
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
				
				// После расчета Всего и налогов пересчет Дохода, чтобы исключить разницу в копейки.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
			КонецЕсли;
		КонецЦикла;
		
		ОбновитьПодвалФормы();
		// Установить видимость и доступность элементов формы
		УстановитьВидимостьДоступностьЭлементов();
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НСП для Услуг.
//
&НаКлиенте
Процедура СтавкаНСПУслугиПриИзменении(Элемент)
	
	Если НЕ Объект.БезналичныйРасчет Тогда
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
			Если Объект.СуммаВключаетНалоги Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				
				Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;	
					
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
				СтрокаТабличнойЧасти, 
				ДатаДокумента,
				Объект.Организация, 
				Истина, 
				?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
				?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСПУслуги, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
				Объект.БезналичныйРасчет);
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
				
			Иначе
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
				
				СтруктураДопПараметров = Новый Структура();
				СтруктураДопПараметров.Вставить("Период", 			 ДатаДокумента);
				СтруктураДопПараметров.Вставить("Организация", 		 Объект.Организация);
				СтруктураДопПараметров.Вставить("БезналичныйРасчет", Объект.БезналичныйРасчет);
				СтруктураДопПараметров.Вставить("СтавкаНДС", 		 Объект.СтавкаНДС);
				СтруктураДопПараметров.Вставить("СтавкаНСП", 		 Объект.СтавкаНСПУслуги);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтруктураДопПараметров);	
				
				Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;	
					
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
				СтрокаТабличнойЧасти, 
				ДатаДокумента,
				Объект.Организация, 
				Истина, 
				?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
				?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСПУслуги, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
				Объект.БезналичныйРасчет);
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
				
				// После расчета Всего и налогов пересчет Дохода, чтобы исключить разницу в копейки.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
			КонецЕсли;
		КонецЦикла;
		
		ОбновитьПодвалФормы();
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Процедура - обработчик события ПередНачаломДобавления таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Сумма") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;
		
		ИтогСуммаСкидки = Объект.Товары.Итог("СуммаСкидки") + Объект.Услуги.Итог("СуммаСкидки") + Объект.ОС.Итог("СуммаСкидки") + Элемент.ТекущиеДанные.СуммаСкидки;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		
		Если Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентОбщий") Тогда 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, "Товары");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		
		Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;	
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.Организация, 
		Истина, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		
	Иначе
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		
		СтруктураДопПараметров = Новый Структура();
		СтруктураДопПараметров.Вставить("Период", 			 ДатаДокумента);
		СтруктураДопПараметров.Вставить("Организация", 		 Объект.Организация);
		СтруктураДопПараметров.Вставить("БезналичныйРасчет", Объект.БезналичныйРасчет);
		СтруктураДопПараметров.Вставить("СтавкаНДС", 		 Объект.СтавкаНДС);
		СтруктураДопПараметров.Вставить("СтавкаНСП", 		 Объект.СтавкаНСП);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтруктураДопПараметров);	
		
		Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;	
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.Организация, 
		Истина, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		
		// После расчета Всего и налогов пересчет Дохода, чтобы исключить разницу в копейки.
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
	КонецЕсли;
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыЦена.
//
&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		
		Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;	
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.Организация, 
		Истина, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		
	Иначе
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		
		СтруктураДопПараметров = Новый Структура();
		СтруктураДопПараметров.Вставить("Период", 			 ДатаДокумента);
		СтруктураДопПараметров.Вставить("Организация", 		 Объект.Организация);
		СтруктураДопПараметров.Вставить("БезналичныйРасчет", Объект.БезналичныйРасчет);
		СтруктураДопПараметров.Вставить("СтавкаНДС", 		 Объект.СтавкаНДС);
		СтруктураДопПараметров.Вставить("СтавкаНСП", 		 Объект.СтавкаНСП);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтруктураДопПараметров);	
		
		Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;	
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.Организация, 
		Истина, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		
		// После расчета Всего и налогов пересчет Дохода, чтобы исключить разницу в копейки.
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
	КонецЕсли;	
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,,,,
											?(Объект.ТочностьЦены = 0, 2, Объект.ТочностьЦены));
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента, 
		Объект.Организация, 
		Объект.СуммаВключаетНалоги, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаДохода1ПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДопПараметров = Новый Структура();
	СтруктураДопПараметров.Вставить("Период", 			 ДатаДокумента);
	СтруктураДопПараметров.Вставить("Организация", 		 Объект.Организация);
	СтруктураДопПараметров.Вставить("БезналичныйРасчет", Объект.БезналичныйРасчет);
	СтруктураДопПараметров.Вставить("СтавкаНДС", 		 Объект.СтавкаНДС);
	СтруктураДопПараметров.Вставить("СтавкаНСП", 		 Объект.СтавкаНСП);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтруктураДопПараметров);	
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,,,Истина,
											?(Объект.ТочностьЦены = 0, 2, Объект.ТочностьЦены));
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.Организация,  
		Истина,
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
	
	// После расчета Всего и налогов пересчет Дохода, чтобы исключить разницу в копейки.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
	
	ОбновитьПодвалФормы();	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаНДС.
//
&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыСуммаНСП.
//
&НаКлиенте
Процедура ТоварыСуммаНСППриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыПроцентСкидкиНаценки.
//
&НаКлиенте
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		
		Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;			
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.Организация, 
		Истина, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		
	Иначе
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		
		СтруктураДопПараметров = Новый Структура();
		СтруктураДопПараметров.Вставить("Период", 			 ДатаДокумента);
		СтруктураДопПараметров.Вставить("Организация", 		 Объект.Организация);
		СтруктураДопПараметров.Вставить("БезналичныйРасчет", Объект.БезналичныйРасчет);
		СтруктураДопПараметров.Вставить("СтавкаНДС", 		 Объект.СтавкаНДС);
		СтруктураДопПараметров.Вставить("СтавкаНСП", 		 Объект.СтавкаНСП);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтруктураДопПараметров);	
		
		Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.Организация, 
		Истина, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		
		// После расчета Всего и налогов пересчет Дохода, чтобы исключить разницу в копейки.
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
	КонецЕсли;
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыСуммаСкидки.
//
&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.Организация, 
		Истина, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		
	Иначе
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		
		СтруктураДопПараметров = Новый Структура();
		СтруктураДопПараметров.Вставить("Период", 			 ДатаДокумента);
		СтруктураДопПараметров.Вставить("Организация", 		 Объект.Организация);
		СтруктураДопПараметров.Вставить("БезналичныйРасчет", Объект.БезналичныйРасчет);
		СтруктураДопПараметров.Вставить("СтавкаНДС", 		 Объект.СтавкаНДС);
		СтруктураДопПараметров.Вставить("СтавкаНСП", 		 Объект.СтавкаНСП);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтруктураДопПараметров);	
	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.Организация, 
		Истина, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		
		// После расчета Всего и налогов пересчет Дохода, чтобы исключить разницу в копейки.
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
	КонецЕсли;
	
	ОбновитьПодвалФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

// Процедура - обработчик события ПередНачаломДобавления таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Сумма") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;
		
		ИтогСуммаСкидки = Объект.Товары.Итог("СуммаСкидки") + Объект.Услуги.Итог("СуммаСкидки") + Объект.ОС.Итог("СуммаСкидки") + Элемент.ТекущиеДанные.СуммаСкидки;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
		
		Если Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентОбщий") Тогда 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
		КонецЕсли;
	КонецЕсли;		
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, "Услуги");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		
		Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;	
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.Организация, 
		Истина, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСПУслуги, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		
	Иначе
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		
		СтруктураДопПараметров = Новый Структура();
		СтруктураДопПараметров.Вставить("Период", 			 ДатаДокумента);
		СтруктураДопПараметров.Вставить("Организация", 		 Объект.Организация);
		СтруктураДопПараметров.Вставить("БезналичныйРасчет", Объект.БезналичныйРасчет);
		СтруктураДопПараметров.Вставить("СтавкаНДС", 		 Объект.СтавкаНДС);
		СтруктураДопПараметров.Вставить("СтавкаНСП", 		 Объект.СтавкаНСПУслуги);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтруктураДопПараметров);	
		
		Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;	
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.Организация, 
		Истина, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСПУслуги, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		
		// После расчета Всего и налогов пересчет Дохода, чтобы исключить разницу в копейки.
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
	КонецЕсли;
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода УслугиЦена.
//
&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		
		Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;	
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.Организация, 
		Истина, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСПУслуги, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		
	Иначе
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		
		СтруктураДопПараметров = Новый Структура();
		СтруктураДопПараметров.Вставить("Период", 			 ДатаДокумента);
		СтруктураДопПараметров.Вставить("Организация", 		 Объект.Организация);
		СтруктураДопПараметров.Вставить("БезналичныйРасчет", Объект.БезналичныйРасчет);
		СтруктураДопПараметров.Вставить("СтавкаНДС", 		 Объект.СтавкаНДС);
		СтруктураДопПараметров.Вставить("СтавкаНСП", 		 Объект.СтавкаНСПУслуги);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтруктураДопПараметров);	
		
		Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;	
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.Организация, 
		Истина, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСПУслуги, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		
		// После расчета Всего и налогов пересчет Дохода, чтобы исключить разницу в копейки.
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
	КонецЕсли;
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,,,,
												?(Объект.ТочностьЦены = 0, 2, Объект.ТочностьЦены));
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента, 
		Объект.Организация, 
		Объект.СуммаВключаетНалоги, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")), 
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСПУслуги, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);	
		
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаДохода1ПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	СтруктураДопПараметров = Новый Структура();
	СтруктураДопПараметров.Вставить("Период", 			 ДатаДокумента);
	СтруктураДопПараметров.Вставить("Организация", 		 Объект.Организация);
	СтруктураДопПараметров.Вставить("БезналичныйРасчет", Объект.БезналичныйРасчет);
	СтруктураДопПараметров.Вставить("СтавкаНДС", 		 Объект.СтавкаНДС);
	СтруктураДопПараметров.Вставить("СтавкаНСП", 		 Объект.СтавкаНСПУслуги);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтруктураДопПараметров);	
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,,,Истина,
												?(Объект.ТочностьЦены = 0, 2, Объект.ТочностьЦены));
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.Организация,  
		Истина,
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСПУслуги, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
	
	// После расчета Всего и налогов пересчет Дохода, чтобы исключить разницу в копейки.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		
	ОбновитьПодвалФормы();		
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаНДС.
//
&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода УслугиСуммаНСП.
//
&НаКлиенте
Процедура УслугиСуммаНСППриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода УслугиПроцентСкидкиНаценки.
//
&НаКлиенте
Процедура УслугиПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		
		Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;		
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.Организация, 
		Истина, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСПУслуги, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		
	Иначе
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		
		СтруктураДопПараметров = Новый Структура();
		СтруктураДопПараметров.Вставить("Период", 			 ДатаДокумента);
		СтруктураДопПараметров.Вставить("Организация", 		 Объект.Организация);
		СтруктураДопПараметров.Вставить("БезналичныйРасчет", Объект.БезналичныйРасчет);
		СтруктураДопПараметров.Вставить("СтавкаНДС", 		 Объект.СтавкаНДС);
		СтруктураДопПараметров.Вставить("СтавкаНСП", 		 Объект.СтавкаНСПУслуги);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтруктураДопПараметров);	
		
		Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;	
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.Организация, 
		Истина, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСПУслуги, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		
		// После расчета Всего и налогов пересчет Дохода, чтобы исключить разницу в копейки.
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
	КонецЕсли;
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода УслугиСуммаСкидки.
//
&НаКлиенте
Процедура УслугиСуммаСкидкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.Организация, 
		Истина, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСПУслуги, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		
	Иначе
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		
		СтруктураДопПараметров = Новый Структура();
		СтруктураДопПараметров.Вставить("Период", 			 ДатаДокумента);
		СтруктураДопПараметров.Вставить("Организация", 		 Объект.Организация);
		СтруктураДопПараметров.Вставить("БезналичныйРасчет", Объект.БезналичныйРасчет);
		СтруктураДопПараметров.Вставить("СтавкаНДС", 		 Объект.СтавкаНДС);
		СтруктураДопПараметров.Вставить("СтавкаНСП", 		 Объект.СтавкаНСПУслуги);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтруктураДопПараметров);	
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.Организация, 
		Истина, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСПУслуги, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		
		// После расчета Всего и налогов пересчет Дохода, чтобы исключить разницу в копейки.
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
	КонецЕсли;
	
	ОбновитьПодвалФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

// Процедура - обработчик события ПередНачаломДобавления таблицы ОС.
//
&НаКлиенте
Процедура ОСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Сумма") + Элемент.ТекущиеДанные.Сумма;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;
		
		ИтогСуммаСкидки = Объект.Товары.Итог("СуммаСкидки") + Объект.Услуги.Итог("СуммаСкидки") + Объект.ОС.Итог("СуммаСкидки") + Элемент.ТекущиеДанные.СуммаСкидки;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы ОС.
//
&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
		
		Если Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентОбщий") Тогда 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы ОС.
//
&НаКлиенте
Процедура ОСПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)
		
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента, 
		Объект.Организация, 
		Объект.СуммаВключаетНалоги, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.Прочее"), ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);	
		
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаДохода1ПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	СтруктураДопПараметров = Новый Структура();
	СтруктураДопПараметров.Вставить("Период", 			 ДатаДокумента);
	СтруктураДопПараметров.Вставить("Организация", 		 Объект.Организация);
	СтруктураДопПараметров.Вставить("БезналичныйРасчет", Объект.БезналичныйРасчет);
	СтруктураДопПараметров.Вставить("СтавкаНДС", 		 Объект.СтавкаНДС);
	СтруктураДопПараметров.Вставить("СтавкаНСП", 		 ПредопределенноеЗначение("Справочник.СтавкиНСП.Прочее"));
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтруктураДопПараметров);	
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.Организация,  
		Истина,
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.Прочее"), ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
	
	// После расчета Всего и налогов пересчет Дохода, чтобы исключить разницу в копейки.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
	
	ОбновитьПодвалФормы();		
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаНДС.
//
&НаКлиенте
Процедура ОССуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОССуммаНСП.
//
&НаКлиенте
Процедура ОССуммаНСППриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОСПроцентСкидкиНаценки.
//
&НаКлиенте
Процедура ОСПроцентСкидкиНаценкиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
		
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		
		Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;	
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.Организация, 
		Истина, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.Прочее"), ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		
	Иначе		
		СтруктураДопПараметров = Новый Структура();
		СтруктураДопПараметров.Вставить("Период", 			 ДатаДокумента);
		СтруктураДопПараметров.Вставить("Организация", 		 Объект.Организация);
		СтруктураДопПараметров.Вставить("БезналичныйРасчет", Объект.БезналичныйРасчет);
		СтруктураДопПараметров.Вставить("СтавкаНДС", 		 Объект.СтавкаНДС);
		СтруктураДопПараметров.Вставить("СтавкаНСП", 		 ПредопределенноеЗначение("Справочник.СтавкиНСП.Прочее"));
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтруктураДопПараметров);	
		
		Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;	
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.Организация, 
		Истина, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.Прочее"), ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		
		// После расчета Всего и налогов пересчет Дохода, чтобы исключить разницу в копейки.
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
	КонецЕсли;	
		
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОССуммаСкидки.
//
&НаКлиенте
Процедура ОССуммаСкидкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.Организация, 
		Истина, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.Прочее"), ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		
	Иначе
		СтруктураДопПараметров = Новый Структура();
		СтруктураДопПараметров.Вставить("Период", 			 ДатаДокумента);
		СтруктураДопПараметров.Вставить("Организация", 		 Объект.Организация);
		СтруктураДопПараметров.Вставить("БезналичныйРасчет", Объект.БезналичныйРасчет);
		СтруктураДопПараметров.Вставить("СтавкаНДС", 		 Объект.СтавкаНДС);
		СтруктураДопПараметров.Вставить("СтавкаНСП", 		 ПредопределенноеЗначение("Справочник.СтавкиНСП.Прочее"));
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтруктураДопПараметров);	
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.Организация, 
		Истина, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.Прочее"), ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		
		// После расчета Всего и налогов пересчет Дохода, чтобы исключить разницу в копейки.
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
	КонецЕсли;	
		
		
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОсновноеСредство) Тогда
		СтрокаТабличнойЧасти.СчетЗатрат = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасходыПоВыбытиюАктивов"); // 9540
		СтрокаТабличнойЧасти.СчетДохода = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПрочиеДоходыОтНеоперационнойДеятельности"); // 9190
		
		МассивОсновныхСредств = Новый Массив();
		МассивОсновныхСредств.Добавить(СтрокаТабличнойЧасти.ОсновноеСредство);
		
		ДополнитьСтрокиНаСервере(МассивОсновныхСредств);	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик события действия команды Подбор в табличную часть Товары.
// Открывает форму подбора.
//
&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	РаботаСПодборомНоменклатурыКлиент.ОткрытьПодбор(ЭтаФорма, "Товары", "Реализация");
КонецПроцедуры

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура ПодборОС(Команда)
	УправлениеВнеоборотнымиАктивамиКлиент.ОткрытьПодбор(ЭтаФорма, "ОС");  
КонецПроцедуры

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкодуТовары(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", 
		ЭтотОбъект, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары")), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
		
КонецПроцедуры
	
&НаКлиенте
Процедура ПоискПоШтрихкодуУслуги(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", 
		ЭтотОбъект, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Услуги")), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
    
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
        ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1), ДополнительныеПараметры.ИмяТабличнойЧасти);
	КонецЕсли;	

КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	ПодключаемоеОборудованиеБПКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, "Товары");
КонецПроцедуры // ЗагрузитьДанныеИзТСД()
// Конец ПодключаемоеОборудование

// Процедура - обработчик события команды ПодборФизическихЛиц.
// Открывает форму выбора.
//
&НаКлиенте
Процедура ПодборФизическихЛиц(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, Элементы.Комиссия);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаСкидки(Команда)
	
	СтруктураПараметры = Новый Структура();
	
	Если Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаТовары" Тогда
		
		СтруктураПараметры.Вставить("ИмяТаблицы",		"Товары");
		СтруктураПараметры.Вставить("ЭтоНоменклатура", 	Истина);
		СтруктураПараметры.Вставить("СтавкаНСП", 		?(ДанныеУчетнойПолитики.ПлательщикНСП, 
														 Объект.СтавкаНСП, 
														 ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")));
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаУслуги" Тогда
		
		СтруктураПараметры.Вставить("ИмяТаблицы", 		"Услуги");
		СтруктураПараметры.Вставить("ЭтоНоменклатура", 	Истина);
		СтруктураПараметры.Вставить("СтавкаНСП", 		?(ДанныеУчетнойПолитики.ПлательщикНСП, 
														 Объект.СтавкаНСПУслуги, 
														 ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")));
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаОС" Тогда
		
		СтруктураПараметры.Вставить("ИмяТаблицы", 		"ОС");
		СтруктураПараметры.Вставить("ЭтоНоменклатура", 	Ложь);
		СтруктураПараметры.Вставить("СтавкаНСП", 		?(ДанныеУчетнойПолитики.ПлательщикНСП, 
														 ПредопределенноеЗначение("Справочник.СтавкиНСП.Прочее"), 
														 ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")));
	КонецЕсли;	
	
	СтруктураПараметры.Вставить("Дата", 				ДатаДокумента);
	СтруктураПараметры.Вставить("ДанныеУчетнойПолитики",ДанныеУчетнойПолитики);
	СтруктураПараметры.Вставить("Объект",				Объект);
	СтруктураПараметры.Вставить("СтавкаНДС", 			?(ДанныеУчетнойПолитики.ПлательщикНДС, 
														Объект.СтавкаНДС, 
														ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")));
	
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаРасшифровкиСкидки", СтруктураПараметры,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииКомиссия

// Процедура - обработчик события ПередУдалением таблицы Комиссия.
//
&НаКлиенте
Процедура КомиссияПередУдалением(Элемент, Отказ)

	ТекущаяСтрокаТЧ = Элементы.Комиссия.ТекущиеДанные;
	Если ТекущаяСтрокаТЧ.Председатель Тогда
		ИндексУдаляемойСтроки = Объект.Комиссия.Индекс(ТекущаяСтрокаТЧ);
		КоличествоСтрок = Объект.Комиссия.Количество() - 1;

		Если КоличествоСтрок > 0 Тогда
			Если ИндексУдаляемойСтроки <= КоличествоСтрок - 1 Тогда
				ИндексНовогоПредседателя = ИндексУдаляемойСтроки + 1;
			Иначе
				ИндексНовогоПредседателя = КоличествоСтрок - 1;
			КонецЕсли;
			Объект.Комиссия[ИндексНовогоПредседателя].Председатель = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы Комиссия.
//
&НаКлиенте
Процедура КомиссияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если Копирование Тогда
		ТекущаяСтрокаТЧ = Элементы.Комиссия.ТекущиеДанные;
		ТекущаяСтрокаТЧ.ФизЛицо = Неопределено;
		ТекущаяСтрокаТЧ.Председатель = Ложь;
	Иначе // Создание заново
		Если Объект.Комиссия.Количество() = 1 Тогда
			Объект.Комиссия[0].Председатель = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора таблицы Комиссия.
//
&НаКлиенте
Процедура КомиссияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Строки = Объект.Комиссия.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение));

	Если Строки.Количество() > 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Физическое лицо ""%1"" уже подобрано!'"), ВыбранноеЗначение);
		ПоказатьПредупреждение(, ТекстСообщения, 60);
	Иначе
		НоваяСтрока = Объект.Комиссия.Добавить();
		НоваяСтрока.ФизЛицо = ВыбранноеЗначение;
		Если Объект.Комиссия.Количество() = 1 Тогда
			НоваяСтрока.Председатель = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Председатель.
//
&НаКлиенте
Процедура КомиссияПредседательПриИзменении(Элемент)

	ТекущаяСтрокаТЧ = Элементы.Комиссия.ТекущиеДанные;

	Если НЕ ТекущаяСтрокаТЧ.Председатель Тогда
		// Снимать флажок нельзя
		ТекущаяСтрокаТЧ.Председатель = Истина;
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТЧ Из Объект.Комиссия Цикл
		Если СтрокаТЧ.НомерСтроки <> ТекущаяСтрокаТЧ.НомерСтроки Тогда
			СтрокаТЧ.Председатель = Ложь;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ФизЛицо.
//
&НаКлиенте
Процедура КомиссияФизЛицоПриИзменении(Элемент)

	Если Объект.Комиссия.Количество() = 1 Тогда
		Объект.Комиссия[0].Председатель = Истина;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора поля ввода ФизЛицо.
//
&НаКлиенте
Процедура КомиссияФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ТекущаяСтрокаТЧ = Элементы.Комиссия.ТекущиеДанные;

	Если ТекущаяСтрокаТЧ.ФизЛицо <> ВыбранноеЗначение Тогда

		СтрокиТабличнойЧасти = Объект.Комиссия.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение));

		Если СтрокиТабличнойЧасти.Количество() > 0 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Физическое лицо ""%1"" уже включено в состав комиссии!'"), ВыбранноеЗначение);
			ПоказатьПредупреждение(, ТекстСообщения, 60);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура НомерБланкаСФОбработкаВыбораЗавершение(НомерБланкаСФ, ДополнительныеПараметры) Экспорт
	Если НомерБланкаСФ <> Неопределено Тогда
		СформироватьНомераСчетФактур(НомерБланкаСФ);
		
		Если НЕ Элементы.НомерБланкаСФ.СписокВыбора.НайтиПоЗначению(НомерБланкаСФ) = Неопределено Тогда 
			Объект.НомерБланкаСФ = НомерБланкаСФ;	
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()	
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда 
		Элементы.ПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.СчетУчетаСкидок.Видимость = Ложь;
		Элементы.ТоварыПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ТоварыСуммаСкидки.Видимость = Ложь;
		
		Элементы.УслугиПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.УслугиСуммаСкидки.Видимость = Ложь;
		
		Элементы.ОСПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ОССуммаСкидки.Видимость = Ложь;
		
		Элементы.ИтогСуммаСкидки.Видимость = Ложь;
		
		Элементы.ТоварыРасшифровкаСкидки.Видимость = Ложь;
		Элементы.УслугиРасшифровкаСкидки.Видимость = Ложь;
		Элементы.ОСРасшифровкаСкидки.Видимость = Ложь;
		
	ИначеЕсли Объект.ВидСкидкиНаценки = Перечисления.ВидыСкидокНаценок.ПроцентПоСтроке Тогда 
		Элементы.ПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.СчетУчетаСкидок.Видимость = Истина;
		
		Элементы.ТоварыПроцентСкидкиНаценки.Видимость = Истина;
		Элементы.ТоварыСуммаСкидки.Видимость = Истина;
		Элементы.ТоварыСуммаСкидки.ТолькоПросмотр = Истина;

		Элементы.УслугиПроцентСкидкиНаценки.Видимость = Истина;
		Элементы.УслугиСуммаСкидки.Видимость = Истина;
		Элементы.УслугиСуммаСкидки.ТолькоПросмотр = Истина;
		
		Элементы.ОСПроцентСкидкиНаценки.Видимость = Истина;
		Элементы.ОССуммаСкидки.Видимость = Истина;
		Элементы.ОССуммаСкидки.ТолькоПросмотр = Истина;
		
		Элементы.ИтогСуммаСкидки.Видимость = Истина;
		
		Элементы.ТоварыРасшифровкаСкидки.Видимость = Истина;
		Элементы.УслугиРасшифровкаСкидки.Видимость = Истина;
		Элементы.ОСРасшифровкаСкидки.Видимость = Истина;
		
	ИначеЕсли Объект.ВидСкидкиНаценки = Перечисления.ВидыСкидокНаценок.СуммаПоСтроке Тогда 
		Элементы.ПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.СчетУчетаСкидок.Видимость = Истина;
		Элементы.ТоварыПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ТоварыСуммаСкидки.Видимость = Истина;
		Элементы.ТоварыСуммаСкидки.ТолькоПросмотр = Ложь;
		
		Элементы.УслугиПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.УслугиСуммаСкидки.Видимость = Истина;
		Элементы.УслугиСуммаСкидки.ТолькоПросмотр = Ложь;
		
		Элементы.ОСПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ОССуммаСкидки.Видимость = Истина;
		Элементы.ОССуммаСкидки.ТолькоПросмотр = Ложь;

		Элементы.ИтогСуммаСкидки.Видимость = Истина;
		
		Элементы.ТоварыРасшифровкаСкидки.Видимость = Истина;
		Элементы.УслугиРасшифровкаСкидки.Видимость = Истина;
		Элементы.ОСРасшифровкаСкидки.Видимость = Истина;
		
	ИначеЕсли Объект.ВидСкидкиНаценки = Перечисления.ВидыСкидокНаценок.ПроцентОбщий Тогда 
		Элементы.ПроцентСкидкиНаценки.Видимость = Истина;
		Элементы.СчетУчетаСкидок.Видимость = Истина;
		Элементы.ТоварыПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ТоварыСуммаСкидки.Видимость = Истина;
		Элементы.ТоварыСуммаСкидки.ТолькоПросмотр = Истина;
		
		Элементы.УслугиПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.УслугиСуммаСкидки.Видимость = Истина;
		Элементы.УслугиСуммаСкидки.ТолькоПросмотр = Истина;
		
		Элементы.ОСПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ОССуммаСкидки.Видимость = Истина;
		Элементы.ОССуммаСкидки.ТолькоПросмотр = Истина;
		
		Элементы.ИтогСуммаСкидки.Видимость = Истина;
		
		Элементы.ТоварыРасшифровкаСкидки.Видимость = Истина;
		Элементы.УслугиРасшифровкаСкидки.Видимость = Истина;
		Элементы.ОСРасшифровкаСкидки.Видимость = Истина;
	КонецЕсли;		
	
	Если Объект.БезналичныйРасчет Тогда
		Элементы.ТоварыСуммаНСП.Видимость 	= Ложь;
		Элементы.УслугиСуммаНСП.Видимость 	= Ложь;
		Элементы.ОССуммаНСП.Видимость 		= Ложь;
		Элементы.ИтогСуммаНСП.Видимость 	= Ложь;
	Иначе
		Элементы.ТоварыСуммаНСП.Видимость 	= Истина;
		Элементы.УслугиСуммаНСП.Видимость 	= Истина;
		Элементы.ОССуммаНСП.Видимость 		= Истина;
		Элементы.ИтогСуммаНСП.Видимость 	= Истина;
	КонецЕсли;	

	Если Объект.СтавкаНДС = Справочники.СтавкиНДС.Нулевая
		ИЛИ Объект.СтавкаНДС = Справочники.СтавкиНДС.Освобожденная
		ИЛИ Объект.СтавкаНДС = Справочники.СтавкиНДС.Необлагаемая Тогда
		Элементы.ТоварыСуммаНДС.Видимость 	= Ложь;
		Элементы.УслугиСуммаНДС.Видимость 	= Ложь;
		Элементы.ОССуммаНДС.Видимость 		= Ложь;
	Иначе
		Элементы.ТоварыСуммаНДС.Видимость 	= Истина;
		Элементы.УслугиСуммаНДС.Видимость 	= Истина;
		Элементы.ОССуммаНДС.Видимость 		= Истина;
	КонецЕсли;
	
	Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		Элементы.ПечататьКурсИСуммуВРегламентированнойВалюте.Видимость = Ложь;	
	Иначе
		Элементы.ПечататьКурсИСуммуВРегламентированнойВалюте.Видимость = Истина;
	КонецЕсли;	
	
	Если Объект.СуммаВключаетНалоги Тогда
		Элементы.ТоварыСумма.Видимость 	= Истина;
		Элементы.УслугиСумма.Видимость 	= Истина;
		Элементы.ОССумма.Видимость 		= Истина;
		
		Элементы.ТоварыСуммаДохода1.Видимость = Ложь;
		Элементы.УслугиСуммаДохода1.Видимость = Ложь;
		Элементы.ОССуммаДохода1.Видимость 	= Ложь;
		
		Элементы.ТоварыВсего.Видимость 	= Ложь;
		Элементы.УслугиВсего.Видимость 	= Ложь;
		Элементы.ОСВсего.Видимость 		= Ложь;
		
		Элементы.ТоварыСуммаДохода2.Видимость = Истина;
		Элементы.УслугиСуммаДохода2.Видимость = Истина;
		Элементы.ОССуммаДохода2.Видимость 	= Истина;
	Иначе
		Элементы.ТоварыСумма.Видимость 	= Ложь;
		Элементы.УслугиСумма.Видимость 	= Ложь;
		Элементы.ОССумма.Видимость 		= Ложь;
		
		Элементы.ТоварыСуммаДохода1.Видимость = Истина;
		Элементы.УслугиСуммаДохода1.Видимость = Истина;
		Элементы.ОССуммаДохода1.Видимость 	= Истина;
		
		Элементы.ТоварыВсего.Видимость 	= Истина;
		Элементы.УслугиВсего.Видимость 	= Истина;
		Элементы.ОСВсего.Видимость 		= Истина;
		
		Элементы.ТоварыСуммаДохода2.Видимость = Ложь;
		Элементы.УслугиСуммаДохода2.Видимость = Ложь;
		Элементы.ОССуммаДохода2.Видимость 	= Ложь;
	КонецЕсли;	
	
	Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		Элементы.Курс.Видимость 	 = Ложь;
		Элементы.Кратность.Видимость = Ложь;
	Иначе
		Элементы.Курс.Видимость 	 = Истина;
		Элементы.Кратность.Видимость = Истина;	
	КонецЕсли;	
	
	// Видимость СФ.
	Если ЗначениеЗаполнено(СчетФактураВыписанный1)
		Или ЗначениеЗаполнено(СчетФактураВыписанный2) Тогда 
		Элементы.ГруппаСФ.Видимость = Ложь;
		Элементы.ГруппаДанныеДляПечати.Видимость = Ложь;
		Элементы.СчетФактураВыписанный1.Видимость = Истина;
		Элементы.СчетФактураВыписанный2.Видимость = Истина;
	Иначе 
		Элементы.ГруппаСФ.Видимость = Истина;
		Элементы.ГруппаДанныеДляПечати.Видимость = Истина;
		Элементы.СчетФактураВыписанный1.Видимость = Ложь;
		Элементы.СчетФактураВыписанный2.Видимость = Ложь;
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(ДатаДокумента, Объект.ВалютаДокумента, Объект.ДоговорКонтрагента);
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура();
	СтруктураНадписи.Вставить("УчетВалютныхОпераций", Истина);
	СтруктураНадписи.Вставить("ВалютаДокумента", 	  Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("ТипЦен", 			  СтруктураДанные.ТипЦен);
	СтруктураНадписи.Вставить("СтавкаНДС", 			  Объект.СтавкаНДС);
	СтруктураНадписи.Вставить("СтавкаНСП", 			  Объект.СтавкаНСП);
	СтруктураНадписи.Вставить("СуммаВключаетНалоги",  Объект.СуммаВключаетНалоги);
		
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи, ДанныеУчетнойПолитики.ПлательщикНДС);

КонецПроцедуры 

// Процедура устанавливает текущую страницу при открытии формы.
//
&НаКлиенте
Процедура УстановитьТекущуюСтраницу()	
	Если Объект.Товары.Количество() > 0 Тогда 
		Возврат;
	ИначеЕсли Объект.Услуги.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаУслуги;
	ИначеЕсли Объект.ОС.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаОС;
	КонецЕсли;	
КонецПроцедуры

// Процедура устанавливает функциональные опции формы документа.
//
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма, Объект.Организация, ДатаДокумента);
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением, ВалютаДокумента)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	ВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаНовая);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Пересчитать курс кратность валюты расчетов
//
// Параметры:
//  СтруктураДанные	- Структура - 
//		* ВалютаКурсКратность - Структура
//			* Курс - Число
//			* Кратность - Число
//
&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		Или Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(Объект.Курс) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(КурсНовый) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'На дату документа у валюты расчетов %1 был задан курс.
									|Установить курс расчетов %2 в соответствии с курсом валюты?'"),
									КурсВалютыСтрокой, КурсНовыйВалютыСтрокой);
		
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПересчитатьКурсКратностьВалютыДокументаЗавершение", ЭтотОбъект, Новый Структура("КратностьНовый, КурсНовый", КратностьНовый, КурсНовый)), ТекстСообщения, Режим, 0);
		Возврат;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КратностьНовый = ДополнительныеПараметры.КратностьНовый;
	КурсНовый = ДополнительныеПараметры.КурсНовый;
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Курс = КурсНовый;
		Объект.Кратность = КратностьНовый;
	КонецЕсли;
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанию
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ВидыДоговораДляДокумента(Документ);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Период, ВалютаДокумента, ДоговорКонтрагента)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорКонтрагента.ВалютаРасчетов);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаРасчетов, Период));
	
	СтруктураДанные.Вставить(
		"ТипЦен",
		ДоговорКонтрагента.ТипЦен);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНалоги",
		ДоговорКонтрагента.СуммаВключаетНалоги);
	
	СтруктураДанные.Вставить(
		"СтавкаНДС",
		ДоговорКонтрагента.СтавкаНДС);
		
	СтруктураДанные.Вставить(
		"ВидПоставкиНДС",
		ДоговорКонтрагента.ВидПоставкиНДС);
	
	СчетаУчета = БухгалтерскийУчетВызовСервера.ПолучитьСчетаРасчетовСКонтрагентом(ДоговорКонтрагента.Организация, ДоговорКонтрагента.Владелец, ДоговорКонтрагента);

	СтруктураДанные.Вставить(
		"СчетРасчетов",
		СчетаУчета.СчетРасчетовПокупателя);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаКлиенте
Процедура ОбработатьИзменениеДоговора(МодифицированДоговор = Ложь)
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(ДатаДокумента, Объект.ВалютаДокумента, Объект.ДоговорКонтрагента);

	// Обработка изменения валюты
	СтруктураКурсыПред = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	
	Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
	Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
	Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	
	СтруктураКурсы = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	
	// Обработка изменения налогообложения
	Объект.СуммаВключаетНалоги = СтруктураДанные.СуммаВключаетНалоги;
	Объект.СтавкаНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, СтруктураДанные.СтавкаНДС, 
							ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));
	Объект.ВидПоставкиНДС = СтруктураДанные.ВидПоставкиНДС;

	// Обработка изменения отражения в учете
	Объект.СчетРасчетов = СтруктураДанные.СчетРасчетов;
	
	ТипЦенПередИзменением = ТипЦен;
	ТипЦен = СтруктураДанные.ТипЦен;
	
	// Вопрос изменения
	ИзменилсяТипЦен = ТипЦенПередИзменением <> ТипЦен
		И ЗначениеЗаполнено(ТипЦен);
	ИзмениласьВалютаРасчетов = СтруктураКурсыПред.Валюта <> СтруктураДанные.ВалютаРасчетов
		И ЗначениеЗаполнено(Объект.ВалютаДокумента); 
	ПересчетНеобходим = (Объект.Товары.Количество() > 0)
		Или (Объект.Услуги.Количество() > 0);	
		
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) 
		И (ИзменилсяТипЦен Или ИзмениласьВалютаРасчетов)
		И ПересчетНеобходим Тогда
		
		ТекстСообщение = "";
		
		Если ИзменилсяТипЦен Тогда 
			ТекстСообщение = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, 
				|отличные от установленных в документе. 
				|Возможно, необходимо перезаполнить цены.'") + Символы.ПС + Символы.ПС;
		КонецЕсли;
		
		Если ИзмениласьВалютаРасчетов Тогда 
			ТекстСообщение = ТекстСообщение + НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом!
				|Возможно, необходимо перезаполнить цены.'") + Символы.ПС + Символы.ПС;
		КонецЕсли;

		ТекстСообщение = ТекстСообщение + НСтр("ru = 'Пересчитать документ в соответствии с договором?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьИзменениеДоговораФрагментЗавершение", ЭтотОбъект, 
		
		Новый Структура("СтруктураКурсыПред, СтруктураКурсы", СтруктураКурсыПред, СтруктураКурсы)), 
			ТекстСообщение,
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;	
		
	// Пересчет табличной части
	// Цена, Сумма
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Товары", Объект.ТочностьЦены);
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Услуги", Объект.ТочностьЦены);
	// Налоги
	МассивТабличныхЧастей = Новый Массив();
	МассивТабличныхЧастей.Добавить("Товары");
	МассивТабличныхЧастей.Добавить("Услуги");
	МассивТабличныхЧастей.Добавить("ОС");
	
	Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
		
		Если ТабличнаяЧасть = "Товары" Тогда
			СтавкаНСП = Объект.СтавкаНСП;
		ИначеЕсли ТабличнаяЧасть = "Услуги" Тогда
			СтавкаНСП = Объект.СтавкаНСПУслуги;
		Иначе
			СтавкаНСП = ПредопределенноеЗначение("Справочник.СтавкиНСП.Прочее");
		КонецЕсли;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть] Цикл
			Если Объект.СуммаВключаетНалоги Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				
				Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;	
					
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
				СтрокаТабличнойЧасти, 
				ДатаДокумента,
				Объект.Организация, 
				Истина, 
				?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
				?(ДанныеУчетнойПолитики.ПлательщикНСП, СтавкаНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
				Объект.БезналичныйРасчет);
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
				
			Иначе
				Если ТабличнаяЧасть <> "ОС" Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
				КонецЕсли;	
					
				СтруктураДопПараметров = Новый Структура();
				СтруктураДопПараметров.Вставить("Период", 			 ДатаДокумента);
				СтруктураДопПараметров.Вставить("Организация", 		 Объект.Организация);
				СтруктураДопПараметров.Вставить("БезналичныйРасчет", Объект.БезналичныйРасчет);
				СтруктураДопПараметров.Вставить("СтавкаНДС", 		 Объект.СтавкаНДС);
				СтруктураДопПараметров.Вставить("СтавкаНСП", 		 СтавкаНСП);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтруктураДопПараметров);	
				
				Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;	
					
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
				СтрокаТабличнойЧасти, 
				ДатаДокумента,
				Объект.Организация, 
				Истина, 
				?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
				?(ДанныеУчетнойПолитики.ПлательщикНСП, СтавкаНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
				Объект.БезналичныйРасчет);
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
				
				// После расчета Всего и налогов пересчет Дохода, чтобы исключить разницу в копейки.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
		
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговораФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СтруктураКурсыПред = ДополнительныеПараметры.СтруктураКурсыПред;
		СтруктураКурсы = ДополнительныеПараметры.СтруктураКурсы;
		
		// Цена, Сумма
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Товары", Объект.ТочностьЦены);
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Услуги", Объект.ТочностьЦены);
	КонецЕсли;	
	
	// Налоги
	МассивТабличныхЧастей = Новый Массив();
	МассивТабличныхЧастей.Добавить("Товары");
	МассивТабличныхЧастей.Добавить("Услуги");
	МассивТабличныхЧастей.Добавить("ОС");
	
	Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
		
		Если ТабличнаяЧасть = "Товары" Тогда
			СтавкаНСП = Объект.СтавкаНСП;
		ИначеЕсли ТабличнаяЧасть = "Услуги" Тогда
			СтавкаНСП = Объект.СтавкаНСПУслуги;
		Иначе
			СтавкаНСП = ПредопределенноеЗначение("Справочник.СтавкиНСП.Прочее");
		КонецЕсли;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть] Цикл
			Если Объект.СуммаВключаетНалоги Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				
				Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;	
					
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
				СтрокаТабличнойЧасти, 
				ДатаДокумента,
				Объект.Организация, 
				Истина, 
				?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
				?(ДанныеУчетнойПолитики.ПлательщикНСП, СтавкаНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
				Объект.БезналичныйРасчет);
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
				
			Иначе
				Если ТабличнаяЧасть <> "ОС" Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
				КонецЕсли;	
					
				СтруктураДопПараметров = Новый Структура();
				СтруктураДопПараметров.Вставить("Период", 			 ДатаДокумента);
				СтруктураДопПараметров.Вставить("Организация", 		 Объект.Организация);
				СтруктураДопПараметров.Вставить("БезналичныйРасчет", Объект.БезналичныйРасчет);
				СтруктураДопПараметров.Вставить("СтавкаНДС", 		 Объект.СтавкаНДС);
				СтруктураДопПараметров.Вставить("СтавкаНСП", 		 СтавкаНСП);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтруктураДопПараметров);	
				
				Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;	
					
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
				СтрокаТабличнойЧасти, 
				ДатаДокумента,
				Объект.Организация, 
				Истина, 
				?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
				?(ДанныеУчетнойПолитики.ПлательщикНСП, СтавкаНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
				Объект.БезналичныйРасчет);
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
				
				// После расчета Всего и налогов пересчет Дохода, чтобы исключить разницу в копейки.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ТекстПредупреждения = "")
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  	Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  	Объект.Курс);
	СтруктураПараметров.Вставить("Кратность",			  	Объект.Кратность);
	СтруктураПараметров.Вставить("СтавкаНДС",	  			Объект.СтавкаНДС);
	СтруктураПараметров.Вставить("СтавкаНСП",	  			Объект.СтавкаНСП);
	СтруктураПараметров.Вставить("СтавкаНСПУслуги",	  		Объект.СтавкаНСПУслуги);
	СтруктураПараметров.Вставить("СуммаВключаетНалоги",	  	Объект.СуммаВключаетНалоги);
	СтруктураПараметров.Вставить("Контрагент",			  	Объект.Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",		Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",			  	Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  	ДатаДокумента);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  	ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  	ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  	Ложь);
	СтруктураПараметров.Вставить("ТекстПредупреждения",   	ТекстПредупреждения);

	// Открытие формы "Цены и Валюта".
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(ДатаДокумента, Объект.ВалютаДокумента, Объект.ДоговорКонтрагента);
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура();
	СтруктураНадписи.Вставить("УчетВалютныхОпераций", Истина);
	СтруктураНадписи.Вставить("ВалютаДокумента", 	  Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("ТипЦен", 			  СтруктураДанные.ТипЦен);
	СтруктураНадписи.Вставить("СтавкаНДС", 			  Объект.СтавкаНДС);
	СтруктураНадписи.Вставить("СтавкаНСП", 			  Объект.СтавкаНСП);
	СтруктураНадписи.Вставить("СуммаВключаетНалоги",  Объект.СуммаВключаетНалоги);
		
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи, ДанныеУчетнойПолитики.ПлательщикНДС);
	
КонецПроцедуры // ОткрытьФормуЦеныИВалютаЗавершение()

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи, ПлательщикНДС)
	
	ТекстНадписи = "";
	
	// Валюта
	Если СтруктураНадписи.УчетВалютныхОпераций Тогда
		Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
			ТекстНадписи = НСтр("ru = '%Валюта%'");
			ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
		КонецЕсли;
	КонецЕсли;
	
	// Тип цен
	Если ЗначениеЗаполнено(СтруктураНадписи.ТипЦен) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ТипЦен%'");
		Иначе	
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ТипЦен%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ТипЦен%", СокрЛП(Строка(СтруктураНадписи.ТипЦен)));
	КонецЕсли;
	
	// Ставка НДС
	Если ЗначениеЗаполнено(СтруктураНадписи.СтавкаНДС) И ПлательщикНДС Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%СтавкаНДС%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %СтавкаНДС%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%СтавкаНДС%", СокрЛП(Строка(СтруктураНадписи.СтавкаНДС)));
	КонецЕсли;
	
	// Ставка НСП
	Если ЗначениеЗаполнено(СтруктураНадписи.СтавкаНСП) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%СтавкаНСП%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %СтавкаНСП%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%СтавкаНСП%", СокрЛП(Строка(СтруктураНадписи.СтавкаНСП)));
	КонецЕсли;
	
	// Флаг сумма включает налоги
	Если СтруктураНадписи.СуммаВключаетНалоги Тогда
		ТекстНадписиСуммаВключаетНалоги = НСтр("ru = 'Сумма включает налоги'");
	Иначе
		ТекстНадписиСуммаВключаетНалоги = НСтр("ru = 'Сумма не включает налоги'");
	КонецЕсли;

	Если ПустаяСтрока(ТекстНадписи) Тогда
		ТекстНадписи = ТекстНадписи + НСтр("ru = '%СуммаВключаетНалоги%'");
	Иначе
		ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %СуммаВключаетНалоги%'");
	КонецЕсли;
	ТекстНадписи = СтрЗаменить(ТекстНадписи, "%СуммаВключаетНалоги%", ТекстНадписиСуммаВключаетНалоги);
	
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦеныИВалюта()

&НаКлиенте
Процедура ОбработатьИзменениеУчетнойПолитики()	
	
	НовыеДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	Если НЕ ДанныеУчетнойПолитики = НовыеДанныеУчетнойПолитики Тогда 
		ДанныеУчетнойПолитики = НовыеДанныеУчетнойПолитики;
		
		Объект.СтавкаНСП = ДанныеУчетнойПолитики.СтавкаНСПРеализацииТовары;
		Объект.СтавкаНСПУслуги = ДанныеУчетнойПолитики.СтавкаНСПРеализацииУслуги;
		
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(
			Объект,
			ДатаДокумента,
			Объект.Организация,
			"Товары",
			Объект.СуммаВключаетНалоги, 
			?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
			?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")),
			Объект.БезналичныйРасчет,
			?(Объект.СуммаВключаетНалоги, Ложь, Истина));
			
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(
			Объект,
			ДатаДокумента,
			Объект.Организация,
			"Услуги",
			Объект.СуммаВключаетНалоги, 
			?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
			?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСПУслуги, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")),
			Объект.БезналичныйРасчет,
			?(Объект.СуммаВключаетНалоги, Ложь, Истина));
			
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(
			Объект,
			ДатаДокумента,
			Объект.Организация,
			"ОС",
			Объект.СуммаВключаетНалоги, 
			?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
			?(ДанныеУчетнойПолитики.ПлательщикНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.Прочее"), ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
			Объект.БезналичныйРасчет,
			?(Объект.СуммаВключаетНалоги, Ложь, Истина));	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетФактураВыписанный()

	// На одну реализацию может быть выписано 2 счета-фактуры
	// по товарам и по услугам.	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	СчетаФактурыВыписанные.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.СчетаФактурыВыписанные КАК СчетаФактурыВыписанные
		|ГДЕ
		|	СчетаФактурыВыписанные.Организация = &Организация
		|	И СчетаФактурыВыписанные.Документ = &Документ
		|	И НЕ СчетаФактурыВыписанные.Регистратор = &Документ";
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		СчетФактураВыписанный1 = ВыборкаДетальныеЗаписи.Регистратор;
		Если ЗначениеЗаполнено(Объект.СерияБланкаСФ)
			Или ЗначениеЗаполнено(Объект.НомерБланкаСФ) Тогда 
			Объект.СерияБланкаСФ = "";
			Объект.НомерБланкаСФ = "";
		КонецЕсли;	
	КонецЕсли;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		СчетФактураВыписанный2 = ВыборкаДетальныеЗаписи.Регистратор;	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетФактураВыписанный()

&НаКлиенте
Процедура ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Дата", ДатаДокумента);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Контрагент", Объект.Контрагент);
	СтруктураДанные.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНалоги", Объект.СуммаВключаетНалоги);
	СтруктураДанные.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	СтруктураДанные.Вставить("СтавкаНСП", ?(ИмяТабличнойЧасти = "Товары", Объект.СтавкаНСП, Объект.СтавкаНСПУслуги));
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

	// Заполнение по данным номенклатуры
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.СчетДохода = СтруктураДанные.СчетДохода;
	СтрокаТабличнойЧасти.СтатьяДохода = СтруктураДанные.СтатьяДохода;
	
	Если ИмяТабличнойЧасти = "Товары" Тогда 
		СтрокаТабличнойЧасти.СчетУчета = СтруктураДанные.СчетУчета;
		СтрокаТабличнойЧасти.СчетСебестоимости = СтруктураДанные.СчетРасхода;
		СтрокаТабличнойЧасти.СтатьяРасхода = СтруктураДанные.СтатьяРасхода;
	ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда
		СтрокаТабличнойЧасти.ДополнительныеСведения = НаименованиеУслуги(СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;	
	
	// Расчет суммы
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		
		Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;	
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.Организация, 
		Истина, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, СтруктураДанные.СтавкаНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		
	Иначе
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		
		СтруктураДопПараметров = Новый Структура();
		СтруктураДопПараметров.Вставить("Период", 			 ДатаДокумента);
		СтруктураДопПараметров.Вставить("Организация", 		 Объект.Организация);
		СтруктураДопПараметров.Вставить("БезналичныйРасчет", Объект.БезналичныйРасчет);
		СтруктураДопПараметров.Вставить("СтавкаНДС", 		 Объект.СтавкаНДС);
		СтруктураДопПараметров.Вставить("СтавкаНСП", 		 СтруктураДанные.СтавкаНСП);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтруктураДопПараметров);	
		
		Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;	
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
		СтрокаТабличнойЧасти, 
		ДатаДокумента,
		Объект.Организация, 
		Истина, 
		?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
		?(ДанныеУчетнойПолитики.ПлательщикНСП, СтруктураДанные.СтавкаНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
		Объект.БезналичныйРасчет);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		
		// После расчета Всего и налогов пересчет Дохода, чтобы исключить разницу в копейки.
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
	КонецЕсли;	
	
	ОбновитьПодвалФормы();
КонецПроцедуры	

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Счета учета
	СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(СтруктураДанные.Организация, СтруктураДанные.Номенклатура);
	СтруктураДанные.Вставить("СчетУчета", СчетаУчетаНоменклатуры.СчетУчета);
	СтруктураДанные.Вставить("СчетДохода", СчетаУчетаНоменклатуры.СчетДохода);
	СтруктураДанные.Вставить("СчетРасхода", СчетаУчетаНоменклатуры.СчетРасхода);
	СтруктураДанные.Вставить("СтатьяДохода", СчетаУчетаНоменклатуры.СтатьяДохода);
	СтруктураДанные.Вставить("СтатьяРасхода", СчетаУчетаНоменклатуры.СтатьяРасхода);
	
	// Цены 
	СтруктураДанные.Вставить("ТипЦен", СтруктураДанные.ДоговорКонтрагента.ТипЦен);
	Цена = БухгалтерскийУчетСервер.ПолучитьЦенуНоменклатуры(СтруктураДанные);
	СтруктураДанные.Вставить("Цена", Цена);
	
	Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе	
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Получает наименование Услуги
//
&НаСервереБезКонтекста
Функция НаименованиеУслуги(Номенклатура)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "НаименованиеПолное");
КонецФункции 

// Производит расчет суммы скидки/наценки
//
&НаКлиенте
Процедура ВидСкидкиПриИзмененииНаКлиенте()
	
	МассивТабличныхЧастей = Новый Массив();
	МассивТабличныхЧастей.Добавить("Товары");
	МассивТабличныхЧастей.Добавить("Услуги");
	МассивТабличныхЧастей.Добавить("ОС");
	
	Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
		
		Если ТабличнаяЧасть = "Товары" Тогда
			СтавкаНСП = Объект.СтавкаНСП;
		ИначеЕсли ТабличнаяЧасть = "Услуги" Тогда
			СтавкаНСП = Объект.СтавкаНСПУслуги;
		Иначе
			СтавкаНСП = ПредопределенноеЗначение("Справочник.СтавкиНСП.Прочее");
		КонецЕсли;	
			
		Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть] Цикл
			Если НЕ ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда 
				Объект.ПроцентСкидкиНаценки = 0;
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
			ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентОбщий") Тогда 
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
			ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентПоСтроке") Тогда 
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
			ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда 
				Объект.ПроцентСкидкиНаценки = 0;
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
			КонецЕсли;
			
			Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			КонецЕсли;	
				
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
				СтрокаТабличнойЧасти, 
				ДатаДокумента,
				Объект.Организация, 
				Истина, 
				?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
				?(ДанныеУчетнойПолитики.ПлательщикНСП, СтавкаНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
				Объект.БезналичныйРасчет);
				
			Если Объект.СуммаВключаетНалоги Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
			Иначе
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
				
				// После расчета Всего и налогов пересчет Дохода, чтобы исключить разницу в копейки.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	ОбновитьПодвалФормы();	
КонецПроцедуры // ВидСкидкиПриИзмененииНаКлиенте()

// Процедура рассчитывает итоги для подвала формы.
//
&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Сумма");
	ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС");
	ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП");
	
	ИтогСуммаСкидки = Объект.Товары.Итог("СуммаСкидки") + Объект.Услуги.Итог("СуммаСкидки") + Объект.ОС.Итог("СуммаСкидки");
	
КонецПроцедуры // ОбновитьПодвалФормы()

// Процедура устанавливает формат и формат редактирования элементов "Цена" в ТЧ "Товары" и "Услуги"
//
&НаКлиенте
Процедура УстановитьФорматЦены()

	Если Объект.ТочностьЦены = 4 Тогда
		
		Элементы.ТоварыЦена.ФорматРедактирования = "ЧЦ=15; ЧДЦ=4";
		Элементы.ТоварыЦена.Формат = "ЧЦ=15; ЧДЦ=4";
		Элементы.УслугиЦена.ФорматРедактирования = "ЧЦ=15; ЧДЦ=4";
		Элементы.УслугиЦена.Формат = "ЧЦ=15; ЧДЦ=4";
		
	ИначеЕсли Объект.ТочностьЦены = 3 Тогда
		
		Элементы.ТоварыЦена.ФорматРедактирования = "ЧЦ=15; ЧДЦ=3";
		Элементы.ТоварыЦена.Формат = "ЧЦ=15; ЧДЦ=3";
		Элементы.УслугиЦена.ФорматРедактирования = "ЧЦ=15; ЧДЦ=3";
		Элементы.УслугиЦена.Формат = "ЧЦ=15; ЧДЦ=3";
		
	Иначе
		Элементы.ТоварыЦена.ФорматРедактирования = "ЧЦ=15; ЧДЦ=2";
		Элементы.ТоварыЦена.Формат = "ЧЦ=15; ЧДЦ=2";
		Элементы.УслугиЦена.ФорматРедактирования = "ЧЦ=15; ЧДЦ=2";
		Элементы.УслугиЦена.Формат = "ЧЦ=15; ЧДЦ=2";
	КонецЕсли;	

	ОбновитьИнтерфейс();
КонецПроцедуры

// Процедура формирования списка серий счетов-фактур.
//
&НаКлиенте
Процедура СформироватьСериюСчетаФактуры()
		
	Элементы.СерияБланкаСФ.СписокВыбора.Очистить();
	СписокСерийБланковСФ = БухгалтерскийУчетВызовСервера.СформироватьСписокСерийСФ(Объект.Организация, Истина);
	Элементы.СерияБланкаСФ.СписокВыбора.ЗагрузитьЗначения(СписокСерийБланковСФ);
	
КонецПроцедуры	

// Процедура формирования списка номеров серии счет фактуры.
//
&НаКлиенте
Процедура СформироватьНомераСчетФактур(НомерБланкаСФ = "0")
	
	Элементы.НомерБланкаСФ.СписокВыбора.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.СерияБланкаСФ) Тогда 
		Возврат;
	КонецЕсли;
	
	СписокНомеров = БухгалтерскийУчетВызовСервера.СформироватьСписокНомеровБланковСФ(Объект.Организация, Объект.СерияБланкаСФ, НомерБланкаСФ);
	
	Для Каждого НомерБланка Из СписокНомеров Цикл
		Элементы.НомерБланкаСФ.СписокВыбора.Добавить(НомерБланка.Значение, НомерБланка.Представление);
	КонецЦикла;
КонецПроцедуры	

// Процедура - обработчик подбора товаров.
//
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, СчетУчета", СтрокаЗагрузки.Номенклатура, СтрокаЗагрузки.СчетУчета));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
		
		// Расчет суммы
		Если ИмяТабличнойЧасти = "Услуги" Тогда 
			СтавкаНСП = Объект.СтавкаНСПУслуги;
		Иначе 
			СтавкаНСП = Объект.СтавкаНСП;
		КонецЕсли;
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Дата", ДатаДокумента);
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Контрагент", Объект.Контрагент);
		СтруктураДанные.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНалоги", Объект.СуммаВключаетНалоги);
		СтруктураДанные.Вставить("СтавкаНДС", Объект.СтавкаНДС);
		СтруктураДанные.Вставить("СтавкаНСП", СтавкаНСП);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

		// Заполнение по данным номенклатуры
		// Цена переносится из подбора.
		СтрокаТабличнойЧасти.СчетДохода = СтруктураДанные.СчетДохода;
		СтрокаТабличнойЧасти.СчетСебестоимости = СтруктураДанные.СчетРасхода;
		СтрокаТабличнойЧасти.СтатьяДохода = СтруктураДанные.СтатьяДохода;
		СтрокаТабличнойЧасти.СтатьяРасхода = СтруктураДанные.СтатьяРасхода;
		
		// Расчет суммы
		Если Объект.СуммаВключаетНалоги Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			
			Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			КонецЕсли;	
				
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
			СтрокаТабличнойЧасти, 
			ДатаДокумента,
			Объект.Организация, 
			Истина, 
			?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
			?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
			Объект.БезналичныйРасчет);
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
			
		Иначе
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
			
			СтруктураДопПараметров = Новый Структура();
			СтруктураДопПараметров.Вставить("Период", 			 ДатаДокумента);
			СтруктураДопПараметров.Вставить("Организация", 		 Объект.Организация);
			СтруктураДопПараметров.Вставить("БезналичныйРасчет", Объект.БезналичныйРасчет);
			СтруктураДопПараметров.Вставить("СтавкаНДС", 		 Объект.СтавкаНДС);
			СтруктураДопПараметров.Вставить("СтавкаНСП", 		 Объект.СтавкаНСП);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,, СтруктураДопПараметров);	
			
			Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			КонецЕсли;	
				
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(
			СтрокаТабличнойЧасти, 
			ДатаДокумента,
			Объект.Организация, 
			Истина, 
			?(ДанныеУчетнойПолитики.ПлательщикНДС, Объект.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")),
			?(ДанныеУчетнойПолитики.ПлательщикНСП, Объект.СтавкаНСП, ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")), 
			Объект.БезналичныйРасчет);
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
			
			// После расчета Всего и налогов пересчет Дохода, чтобы исключить разницу в копейки.
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ПолучитьТоварыИзХранилища()

// Процедура получает список ОС из временного хранилища
//
&НаСервере
Процедура ПолучитьОСИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	МассивОсновныхСредств = Новый Массив;
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект.ОС.НайтиСтроки(Новый Структура("ОсновноеСредство", СтрокаЗагрузки.ОсновноеСредство));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Объект.ОС.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
		СтрокаТабличнойЧасти.СчетЗатрат = ПланыСчетов.Хозрасчетный.РасходыПоВыбытиюАктивов; // 9540
		СтрокаТабличнойЧасти.СчетДохода = ПланыСчетов.Хозрасчетный.ПрочиеДоходыОтНеоперационнойДеятельности; // 9190
		
		МассивОсновныхСредств.Добавить(СтрокаТабличнойЧасти.ОсновноеСредство);
	КонецЦикла;
	
	ДополнитьСтрокиНаСервере(МассивОсновныхСредств);
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// Процедура заполняет строки
//
// Параметры:
//  МассивОсновныхСредств  - Массив - массив ОС, по которым нужно заполнить строки, если не указано- заполняются все строки
//
&НаСервере
Процедура ДополнитьСтрокиНаСервере(МассивОсновныхСредств = Неопределено)
	Если МассивОсновныхСредств = Неопределено Тогда 
		МассивОсновныхСредств = Объект.ОС.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	КонецЕсли;		
	
	Если МассивОсновныхСредств.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;	
	
	УправлениеВнеоборотнымиАктивами.ЗаполнитьДанныеОсновныхСредствВТабличнойЧасти(Объект.Ссылка, ДатаДокумента, Объект.Организация, Объект.ОС, МассивОсновныхСредств);
КонецПроцедуры // ДополнитьСтрокиНаСервере()

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// ПодключаемоеОборудование

// Процедура - Получены штрихкоды
//
// Параметры:
//  ДанныеШтрихкодов	 - Структура/Массив - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов, ИмяТабличнойЧасти) Экспорт
	
	Модифицированность = Истина;
	
	НедобавленныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов, ИмяТабличнойЧасти);
	
	// Неизвестные штрихкоды.
	Если НедобавленныеШтрихкоды.НеизвестныеШтрихкоды.Количество() > 0 Тогда
		Для Каждого СтруктураДанные Из НедобавленныеШтрихкоды.НеизвестныеШтрихкоды Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Данные по штрихкоду не найдены: %1'"), СтруктураДанные.Штрихкод);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	// Штрихкоды некорректного типа.
	ИначеЕсли НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа.Количество() > 0 Тогда 
		Для Каждого СтруктураДанные Из НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Найденная по штрихкоду %1 номенклатура: ""%2"", не подходит для этой табличной части'"),
				СтруктураДанные.ТекШтрихкод, СтруктураДанные.Номенклатура);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоШтрихкоду(ТекШтрихкод)
	
	Номенклатура = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьНоменклатуруПоШтрихкоду(ТекШтрихкод);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", Номенклатура);
	СтруктураДанные.Вставить("ТипНоменклатурыУслуга", ?(ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура"), Номенклатура.Услуга, Ложь));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПоШтрихкоду()

// Функция - Заполнить по данным штрихкодов
//
// Параметры:
//  ДанныеШтрихкодов		 - 	 - Структура/Массив	 - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
// 
// Возвращаемое значение:
//  Структура - Массивы неизвестных штрих кодов
//
&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов, ИмяТабличнойЧасти) 
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	Для каждого ТекШтрихкод Из МассивШтрихкодов Цикл
		СтруктураДанные = ПолучитьДанныеПоШтрихкоду(ТекШтрихкод);
		
		Если НЕ ЗначениеЗаполнено(СтруктураДанные.Номенклатура) Тогда 
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли ИмяТабличнойЧасти = "Товары"
			И СтруктураДанные.ТипНоменклатурыУслуга Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("ТекШтрихкод, Номенклатура", ТекШтрихкод, СтруктураДанные.Номенклатура));
		ИначеЕсли ИмяТабличнойЧасти = "Услуги"
			И НЕ СтруктураДанные.ТипНоменклатурыУслуга Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("ТекШтрихкод, Номенклатура", ТекШтрихкод, СтруктураДанные.Номенклатура));
		Иначе 
			СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
			СтрокаТабличнойЧасти.Номенклатура = СтруктураДанные.Номенклатура;
			СтрокаТабличнойЧасти.Количество = ТекШтрихкод.Количество;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",
		НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);

КонецФункции // ЗаполнитьПоДаннымШтрихкодов()
// Конец ПодключаемоеОборудование

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура ТоварыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВставитьСтроки(Команда)
	
	ВставитьСтроки("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКопироватьСтроки(Команда)
	
	КопироватьСтроки("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиВставитьСтроки(Команда)
	
	ВставитьСтроки("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
