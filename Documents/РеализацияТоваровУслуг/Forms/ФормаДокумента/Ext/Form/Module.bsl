
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();	
	ТипЦен = Объект.ДоговорКонтрагента.ТипЦен;	
	СуммаСкидкиПоСтроке = Объект.ВидСкидкиНаценки = Перечисления.ВидыСкидокНаценок.СуммаПоСтроке;
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	ЗаполнитьСчетФактураВыписанный();
	
	УстановитьФункциональныеОпцииФормы();

	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	// ГрупповоеИзменениеСтрок
	ЗаполнитьСписокДействий("Товары");
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер("Товары"), ЭтотОбъект.ИзменениеСтрокТоварыДействие);
	ИзменениеСтрокТоварыДействиеПриОткрытии = ИзменениеСтрокТоварыДействие;
	УстановитьПометку("Товары", Истина);
	
	ЗаполнитьСписокДействий("Услуги");
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер("Услуги"), ЭтотОбъект.ИзменениеСтрокУслугиДействие);
	ИзменениеСтрокУслугиДействиеПриОткрытии = ИзменениеСтрокУслугиДействие;
	УстановитьПометку("Услуги", Истина);

	ЗаполнитьСписокДействий("ОС");
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер("ОС"), ЭтотОбъект.ИзменениеСтрокОСДействие);
	ИзменениеСтрокОСДействиеПриОткрытии = ИзменениеСтрокОСДействие;
	УстановитьПометку("ОС", Истина);
	// Конец ГрупповоеИзменениеСтрок
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСервере(Элементы, "Товары");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСервере(Элементы, "Услуги");
	// Конец КопированиеСтрокТабличныхЧастей
	
	// РаботаСФормами
	РаботаСФормамиСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РаботаСФормами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеБППовтИсп.ИспользоватьПодключаемоеОборудование();
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьТекущуюСтраницу();
	ОбновитьПодвалФормы();
	         
    СформироватьСериюСчетаФактуры();
	СформироватьНомераСчетФактур();
	УстановитьФорматЦены();
	
	// ГрупповоеИзменениеСтрок
	ОпределитьОбъектИзменений("Товары");
	ОпределитьОбъектИзменений("Услуги");
	ОпределитьОбъектИзменений("ОС");
	// Конец ГрупповоеИзменениеСтрок

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		// ГрупповоеИзменениеСтрок
		СохранитьТекущееДействиеИзмененияСтрок();
		// Конец ГрупповоеИзменениеСтрок
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "МодифицированДоговораКонтрагента"
		И Параметр = Объект.ДоговорКонтрагента Тогда
		ОбработатьИзменениеДоговора(Истина);
		
	ИначеЕсли ИмяСобытия = "ПодборНоменклатурыПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище, "Товары");
		
		ОбновитьПодвалФормы();
	ИначеЕсли ИмяСобытия = "ПодборОСПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		ПолучитьОСИзХранилища(АдресЗапасовВХранилище, "ОС");
		
	ИначеЕсли ИмяСобытия = "СчетФактураВыписанныйПослеЗаписи"
		И НЕ Параметр.Найти(Объект.Ссылка) = Неопределено Тогда  
		
		ЗаполнитьСчетФактураВыписанный();
		УстановитьВидимостьДоступностьЭлементов();
	Иначе 
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Товары");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Услуги");
	КонецЕсли;
	// Конец КопированиеСтрокТабличныхЧастей
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату.
			Если Параметр[1] = Неопределено Тогда
				ТекШтрихкод = Параметр[0]; // Достаем штрихкод из основных данных
			Иначе
				ТекШтрихкод = Параметр[1][1]; // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			ПоискПоШтрихкодуЗавершение(ТекШтрихкод, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары"));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если НЕ ВладелецФормы = Неопределено Тогда		
		Если ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения") Тогда
		
			ЗакрыватьПриВыборе = Ложь;
			
			СтруктураОповещения = Новый Структура();
			СтруктураОповещения.Вставить("Ссылка", Объект.Ссылка);   
			СтруктураОповещения.Вставить("Представление", Строка(Объект.Ссылка));
			
			Если СтрНайти(ВладелецФормы.ИмяФормы, "ФормаДокумента") <> 0    
				И ВладелецФормы.Объект.Ссылка = Объект.ДокументОснование Тогда
				
				Представление = Неопределено;
				ОповеститьОВыборе(СтруктураОповещения);			
			Иначе			
				Оповестить("СозданаРеализацияДляДвиженияМБП", СтруктураОповещения);
			КонецЕсли; 
		КонецЕсли;	
	Иначе
		Оповестить("СозданаРеализацияДляДвиженияМБП", СтруктураОповещения);		
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	// ГрупповоеИзменениеСтрок
	Если Элементы.ГруппаИзменениеСтрокТовары.Видимость Тогда
		УстановитьПометку("Товары", Истина);
	КонецЕсли;
	Если Элементы.ГруппаИзменениеСтрокУслуги.Видимость Тогда
		УстановитьПометку("Услуги", Истина);
	КонецЕсли;
	Если Элементы.ГруппаИзменениеСтрокОС.Видимость Тогда
		УстановитьПометку("ОС", Истина);
	КонецЕсли;
	// Конец ГрупповоеИзменениеСтрок
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчета.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением, Объект.ВалютаДокумента);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		ОбработатьИзменениеУчетнойПолитики();

		Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные);
		КонецЕсли;	
	КонецЕсли;
	
	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);	
	УстановитьФункциональныеОпцииФормы();
	
	ОбработатьИзменениеДоговора();
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер = "";
	Объект.БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Объект.Организация);

    СформироватьСериюСчетаФактуры();
	СформироватьНомераСчетФактур();

	ОбработатьИзменениеУчетнойПолитики();

	БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует(Объект.Организация, ДатаДокумента, Истина, Объект.Ссылка);
	УстановитьФункциональныеОпцииФормы();
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);	
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ОбработатьИзменениеДоговора();
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация);
	
	Объект.ДоговорКонтрагента = СтруктураДанные.ДоговорКонтрагента;
	ОбработатьИзменениеДоговора();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор контрагента.
//
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ОбработатьИзменениеДоговора();
КонецПроцедуры

// Процедура - обработчик события Нажатие поля надписи ЦеныИВалюта.
//
&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	Модифицированность = Истина;
	
КонецПроцедуры // РедактироватьЦеныИВалюту()

// Процедура - обработчик события ПриИзменении поля ввода Вид скидки.
//
&НаКлиенте
Процедура ВидСкидкиПриИзменении(Элемент)
	// Заполнение счета учета отражения скидок
	Если НЕ ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда 
		Объект.СчетУчетаСкидок = Неопределено;
		
		// Очистка скидок
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;		
			СтрокаТабличнойЧасти.СуммаСкидки = 0;		
		КонецЦикла;	
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;		
			СтрокаТабличнойЧасти.СуммаСкидки = 0;		
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;		
			СтрокаТабличнойЧасти.СуммаСкидки = 0;		
		КонецЦикла;	
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.СчетУчетаСкидок) Тогда  
		Объект.СчетУчетаСкидок = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ВозвратПроданныхТоваровИСкидки");
	КонецЕсли;	
	
	СуммаСкидкиПоСтроке = Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке");
	ВидСкидкиПриИзмененииНаКлиенте();
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Скидка процент.
//
&НаКлиенте
Процедура ПроцентСкидкиНаценкиПриИзменении(Элемент)
	ВидСкидкиПриИзмененииНаКлиенте()
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Серия бланка счет-фактуры.
//
&НаКлиенте
Процедура СерияБланкаСФПриИзменении(Элемент)

	СформироватьНомераСчетФактур();
		
	Если ЗначениеЗаполнено(Объект.СерияБланкаСФ) 
		И (НЕ ЗначениеЗаполнено(Объект.ДатаСФ)) Тогда
		Объект.ДатаСФ = ДатаДокумента;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора поля ввода Номер бланка счет-фактуры.
//
&НаКлиенте
Процедура НомерБланкаСФОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = "000000" Тогда
		СтандартнаяОбработка = Ложь;
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("НомерБланкаСФОбработкаВыбораЗавершение", ЭтотОбъект);
		ПоказатьВводСтроки(ОбработчикОповещенияОЗакрытии, "", НСтр("ru = 'Укажите номер'"), 6);
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флага Безналичный расчет.
//
&НаКлиенте
Процедура БезналичныйРасчетПриИзменении(Элемент)
	
	// Товары
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект,ПараметрыРасчета);
	
	// Услуги
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект,ПараметрыРасчета);
	
	// ОС
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("ОС");		
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект,ПараметрыРасчета);	
		
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();	
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля выбора Точность цены.
//
&НаКлиенте
Процедура ТочностьЦеныПриИзменении(Элемент)
	
	УстановитьФорматЦены();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НДС.
//
&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	МассивТабличныхЧастей = Новый Массив();
	МассивТабличныхЧастей.Добавить("Товары");
	МассивТабличныхЧастей.Добавить("Услуги");
	МассивТабличныхЧастей.Добавить("ОС");
	
	Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
		
		ПараметрыРасчета = ПодготовитьПараметрыРасчета(ТабличнаяЧасть);
		
		Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть] Цикл
			Если Объект.СуммаВключаетНалоги Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			Иначе
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
			КонецЕсли;	
				
			Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			КонецЕсли;	
				
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			
			Если ТабличнаяЧасть <> "ОС" Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НСП.
//
&НаКлиенте
Процедура СтавкаНСППриИзменении(Элемент)
	
	Если НЕ Объект.БезналичныйРасчет Тогда					
						
		ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");						
						
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл	
			
			Если Объект.СуммаВключаетНалоги Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			Иначе
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
			КонецЕсли;
			
			Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			КонецЕсли;	
				
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);				
		КонецЦикла;
		
		ОбновитьПодвалФормы();
		// Установить видимость и доступность элементов формы
		УстановитьВидимостьДоступностьЭлементов();
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ставка НСП для Услуг.
//
&НаКлиенте
Процедура СтавкаНСПУслугиПриИзменении(Элемент)
	
	Если НЕ Объект.БезналичныйРасчет Тогда
		
		ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");						
						
		Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
			
			Если Объект.СуммаВключаетНалоги Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			Иначе
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
			КонецЕсли;
			
			Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			КонецЕсли;	
				
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
		КонецЦикла;
		
		ОбновитьПодвалФормы();
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Процедура - обработчик события ПередНачаломДобавления таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Сумма") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;
		
		ИтогСуммаСкидки = Объект.Товары.Итог("СуммаСкидки") + Объект.Услуги.Итог("СуммаСкидки") + Объект.ОС.Итог("СуммаСкидки") + Элемент.ТекущиеДанные.СуммаСкидки;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		
		Если Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентОбщий") Тогда 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
		КонецЕсли;
	КонецЕсли;
	
	// ГрупповоеИзменениеСтрок
	Элемент.ТекущиеДанные.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы Товары.
//
&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, "Товары");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
					
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");					
					
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;	
		
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыЦена.
//
&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
					
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");					
					
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаДохода1ПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары", Истина);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	// После расчета Всего и налогов пересчет Дохода, чтобы исключить разницу в копейки.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
	
	ОбновитьПодвалФормы();	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыПроцентСкидкиНаценки.
//
&НаКлиенте
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
					
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");					
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;			
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТоварыСуммаСкидки.
//
&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
					
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");					
					
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

// Процедура - обработчик события ПередНачаломДобавления таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Сумма") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;
		
		ИтогСуммаСкидки = Объект.Товары.Итог("СуммаСкидки") + Объект.Услуги.Итог("СуммаСкидки") + Объект.ОС.Итог("СуммаСкидки") + Элемент.ТекущиеДанные.СуммаСкидки;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
		
		Если Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентОбщий") Тогда 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
		КонецЕсли;
	КонецЕсли;
	
	// ГрупповоеИзменениеСтрок
	Элемент.ТекущиеДанные.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок

КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы Услуги.
//
&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, "Услуги");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
					
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");					
					
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
		
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода УслугиЦена.
//
&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
					
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");					
					
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
		
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);	
		
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаДохода1ПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги", Истина);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	// После расчета Всего и налогов пересчет Дохода, чтобы исключить разницу в копейки.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		
	ОбновитьПодвалФормы();		
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода УслугиПроцентСкидкиНаценки.
//
&НаКлиенте
Процедура УслугиПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
					
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");					
					
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
		
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;		
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода УслугиСуммаСкидки.
//
&НаКлиенте
Процедура УслугиСуммаСкидкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
					
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");					
					
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

// Процедура - обработчик события ПередНачаломДобавления таблицы ОС.
//
&НаКлиенте
Процедура ОСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Сумма") + Элемент.ТекущиеДанные.Сумма;
		ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП") + Элемент.ТекущиеДанные.СуммаНСП;
		
		ИтогСуммаСкидки = Объект.Товары.Итог("СуммаСкидки") + Объект.Услуги.Итог("СуммаСкидки") + Объект.ОС.Итог("СуммаСкидки") + Элемент.ТекущиеДанные.СуммаСкидки;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы ОС.
//
&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
		
		Если Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентОбщий") Тогда 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
		КонецЕсли;
	КонецЕсли;
	
	// ГрупповоеИзменениеСтрок
	Элемент.ТекущиеДанные.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы ОС.
//
&НаКлиенте
Процедура ОСПослеУдаления(Элемент)
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)
		
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("ОС");
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);	
		
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаДохода1ПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
					
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("ОС");					
					
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
	
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	ОбновитьПодвалФормы();		
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОСПроцентСкидкиНаценки.
//
&НаКлиенте
Процедура ОСПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
					
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("ОС");					
					
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
		
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		
	ОбновитьПодвалФормы();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОССуммаСкидки.
//
&НаКлиенте
Процедура ОССуммаСкидкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
					
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("ОС");					
					
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе	
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
	КонецЕсли;	
		
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОсновноеСредство) Тогда
		СтрокаТабличнойЧасти.СчетЗатрат = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасходыПоВыбытиюАктивов"); // 9540
		СтрокаТабличнойЧасти.СчетДохода = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПрочиеДоходыОтНеоперационнойДеятельности"); // 9190
		
		МассивОсновныхСредств = Новый Массив();
		МассивОсновныхСредств.Добавить(СтрокаТабличнойЧасти.ОсновноеСредство);
		
		ДополнитьСтрокиНаСервере(МассивОсновныхСредств);
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("ОсновноеСредство", СтрокаТабличнойЧасти.ОсновноеСредство);
		
		СтруктураДанные = ПолучитьДанныеОСПриИзменении(СтруктураДанные);
		СтрокаТабличнойЧасти.ИнвентарныйНомер = СтруктураДанные.ИнвентарныйНомер;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик события действия команды Подбор в табличную часть Товары.
// Открывает форму подбора.
//
&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	РаботаСПодборомНоменклатурыКлиент.ОткрытьПодбор(ЭтаФорма, "Товары", "Реализация");
КонецПроцедуры

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура ПодборОС(Команда)
	УправлениеВнеоборотнымиАктивамиКлиент.ОткрытьПодбор(ЭтаФорма, "ОС");  
КонецПроцедуры

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкодуТовары(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", 
		ЭтотОбъект, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары")), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
		
КонецПроцедуры
	
&НаКлиенте
Процедура ПоискПоШтрихкодуУслуги(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", 
		ЭтотОбъект, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Услуги")), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
    
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
        ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1), ДополнительныеПараметры.ИмяТабличнойЧасти);
	КонецЕсли;	

КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	ПодключаемоеОборудованиеБПКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, "Товары");
КонецПроцедуры // ЗагрузитьДанныеИзТСД()
// Конец ПодключаемоеОборудование

// Процедура - обработчик события команды ПодборФизическихЛиц.
// Открывает форму выбора.
//
&НаКлиенте
Процедура ПодборФизическихЛиц(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, Элементы.Комиссия);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаСкидки(Команда)
	
	СтруктураПараметры = Новый Структура();
	
	Если Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаТовары" Тогда
		
		СтруктураПараметры.Вставить("ИмяТаблицы",		"Товары");
		СтруктураПараметры.Вставить("ЭтоНоменклатура", 	Истина);
		СтруктураПараметры.Вставить("СтавкаНСП", 		?(ДанныеУчетнойПолитики.ПлательщикНСП, 
														 Объект.СтавкаНСП, 
														 ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")));
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаУслуги" Тогда
		
		СтруктураПараметры.Вставить("ИмяТаблицы", 		"Услуги");
		СтруктураПараметры.Вставить("ЭтоНоменклатура", 	Истина);
		СтруктураПараметры.Вставить("СтавкаНСП", 		?(ДанныеУчетнойПолитики.ПлательщикНСП, 
														 Объект.СтавкаНСПУслуги, 
														 ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")));
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаОС" Тогда
		
		СтруктураПараметры.Вставить("ИмяТаблицы", 		"ОС");
		СтруктураПараметры.Вставить("ЭтоНоменклатура", 	Ложь);
		СтруктураПараметры.Вставить("СтавкаНСП", 		?(ДанныеУчетнойПолитики.ПлательщикНСП, 
														 ПредопределенноеЗначение("Справочник.СтавкиНСП.Прочее"), 
														 ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка")));
	КонецЕсли;	
	
	СтруктураПараметры.Вставить("Дата", 				ДатаДокумента);
	СтруктураПараметры.Вставить("ДанныеУчетнойПолитики",ДанныеУчетнойПолитики);
	СтруктураПараметры.Вставить("Объект",				Объект);
	СтруктураПараметры.Вставить("СтавкаНДС", 			?(ДанныеУчетнойПолитики.ПлательщикНДС, 
														Объект.СтавкаНДС, 
														ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")));
	
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаРасшифровкиСкидки", СтруктураПараметры,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
КонецПроцедуры

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьТоварыИзФайла(Команда)
    ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
    ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "РеализацияТоваровУслуг.Товары";
    ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка списка товаров из файла'");
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьТоварыИзФайлаЗавершение", ЭтотОбъект);
    ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

&НаКлиенте
Процедура СохранитьВЭлектроннойФорме(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		Или Модифицированность Тогда 
		ТекстСообщения = НСтр("ru='Для формирования отчета по подоходному налогу в электронной форме необходимо записать документ.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	
	
	Если ТребуетсяНастройкаАвторизацияИнтернетПоддержки() Тогда
		ТекстВопроса = НСтр("ru='Для формирования отчета по подоходному налогу в электронной форме
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПодключенииИнтернетПоддержки", ЭтотОбъект, Новый Структура("НаправлениеВыгрузки", "СохранитьВЭлектроннойФорме"));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключиться'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		ПродолжитьСохранение();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ИзменениеСтрок

#Область ИзменениеСтрокТовары

&НаКлиенте
Процедура ИзменениеСтрокТоварыИзменитьСтроки(Команда)
	ПоказатьСкрытьПанельРедактирования("Товары", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокТоварыСнятьФлажки(Команда)
	УстановитьПометку("Товары", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокТоварыУстановитьФлажки(Команда)
	УстановитьПометку("Товары", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокТоварыДействиеПриИзменении(Элемент)
	ОпределитьОбъектИзменений("Товары");
	НастроитьОформлениеПанелиРедактирования("Товары", 2);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокТоварыЗначениеПриИзменении(Элемент)
	НастроитьОформлениеПанелиРедактирования("Товары", 3);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокТоварыВыполнитьДействие(Команда)
	ОбработатьТаблицу("Товары");
	НастроитьОформлениеПанелиРедактирования("Товары", 4);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокТоварыОтменитьИзменения(Команда)
	ПоказатьСкрытьПанельРедактирования("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПометкаПриИзменении(Элемент)
	ГрупповоеИзменениеСтрокКлиент.СтрокаПометкаПриИзменении(Объект.Товары, Элементы.ИзменениеСтрокТоварыУстановитьФлажки, Элементы.ИзменениеСтрокТоварыСнятьФлажки);
КонецПроцедуры

#КонецОбласти

#Область ИзменениеСтрокУслуги

&НаКлиенте
Процедура ИзменениеСтрокУслугиИзменитьСтроки(Команда)
	ПоказатьСкрытьПанельРедактирования("Услуги", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокУслугиСнятьФлажки(Команда)
	УстановитьПометку("Услуги", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокУслугиУстановитьФлажки(Команда)
	УстановитьПометку("Услуги", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокУслугиДействиеПриИзменении(Элемент)
	ОпределитьОбъектИзменений("Услуги");
	НастроитьОформлениеПанелиРедактирования("Услуги", 2);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокУслугиЗначениеПриИзменении(Элемент)
	НастроитьОформлениеПанелиРедактирования("Услуги", 3);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокУслугиВыполнитьДействие(Команда)
	ОбработатьТаблицу("Услуги");
	НастроитьОформлениеПанелиРедактирования("Услуги", 4);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокУслугиОтменитьИзменения(Команда)
	ПоказатьСкрытьПанельРедактирования("Услуги");
КонецПроцедуры

&НаКлиенте
Процедура УслугиПометкаПриИзменении(Элемент)
	ГрупповоеИзменениеСтрокКлиент.СтрокаПометкаПриИзменении(Объект.Услуги, Элементы.ИзменениеСтрокУслугиУстановитьФлажки, Элементы.ИзменениеСтрокУслугиСнятьФлажки);
КонецПроцедуры

#КонецОбласти

#Область ИзменениеСтрокОС

&НаКлиенте
Процедура ИзменениеСтрокОСИзменитьСтроки(Команда)
	ПоказатьСкрытьПанельРедактирования("ОС", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокОССнятьФлажки(Команда)
	УстановитьПометку("ОС", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокОСУстановитьФлажки(Команда)
	УстановитьПометку("ОС", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокОСДействиеПриИзменении(Элемент)
	ОпределитьОбъектИзменений("ОС");
	НастроитьОформлениеПанелиРедактирования("ОС", 2);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокОСЗначениеПриИзменении(Элемент)
	НастроитьОформлениеПанелиРедактирования("ОС", 3);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокОСВыполнитьДействие(Команда)
	ОбработатьТаблицу("ОС");
	НастроитьОформлениеПанелиРедактирования("ОС", 4);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокОСОтменитьИзменения(Команда)
	ПоказатьСкрытьПанельРедактирования("ОС");
КонецПроцедуры

&НаКлиенте
Процедура ОСПометкаПриИзменении(Элемент)
	ГрупповоеИзменениеСтрокКлиент.СтрокаПометкаПриИзменении(Объект.ОС, Элементы.ИзменениеСтрокОСУстановитьФлажки, Элементы.ИзменениеСтрокОССнятьФлажки);
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьСписокДействий(ИмяТЧ)
	
	Если ИмяТЧ = "Товары" Тогда
		
		Действия = Новый Массив;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
		
		Элементы.ИзменениеСтрокТоварыДействие.СписокВыбора.Очистить();
		Для каждого Действие Из Действия Цикл
			ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
			Элементы.ИзменениеСтрокТоварыДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
		КонецЦикла;
		
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		
		Действия = Новый Массив;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
		
		Элементы.ИзменениеСтрокУслугиДействие.СписокВыбора.Очистить();
		Для каждого Действие Из Действия Цикл
			ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
			Элементы.ИзменениеСтрокУслугиДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
		КонецЦикла;

	ИначеЕсли ИмяТЧ = "ОС" Тогда
		
		Действия = Новый Массив;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
		
		Элементы.ИзменениеСтрокОСДействие.СписокВыбора.Очистить();
		Для каждого Действие Из Действия Цикл
			ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
			Элементы.ИзменениеСтрокОСДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьПанельРедактирования(ИмяТЧ, ИзменяетДанные = Неопределено)
	
	Перем СостояниеПерехода;
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ),
		СостояниеПерехода,
		ИзменяетДанные);
	
	УправлениеРезервнымиКопиямиТаблицы(ИмяТЧ, СостояниеПерехода, ИзменяетДанные);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеРезервнымиКопиямиТаблицы(ИмяТЧ, СостояниеПерехода, ИзменяетДанные)
	
	Если ИмяТЧ = "Товары" Тогда
		РеквизитРезервнаяКопияТаблицыАдрес = "ИзменениеСтрокТоварыРезервнаяКопияТаблицыАдрес";
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		РеквизитРезервнаяКопияТаблицыАдрес = "ИзменениеСтрокУслугиРезервнаяКопияТаблицыАдрес";
	ИначеЕсли ИмяТЧ = "ОС" Тогда
		РеквизитРезервнаяКопияТаблицыАдрес = "ИзменениеСтрокОСРезервнаяКопияТаблицыАдрес";
	КонецЕсли;
	
	ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
		ЭтотОбъект,
		Объект[ИмяТЧ],
		ЭтотОбъект[РеквизитРезервнаяКопияТаблицыАдрес],
		СостояниеПерехода,
		ИзменяетДанные);
	
КонецПроцедуры

&НаКлиенте
Функция НаборЭлементовГрупповогоИзмененияСтрокКлиент(ИмяТЧ)
	
	Если ИмяТЧ = "Товары" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Товары");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаИзменениеСтрокТовары);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ИзменениеСтрокТоварыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ИзменениеСтрокТоварыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ИзменениеСтрокТоварыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ТоварыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ТоварыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ИзменениеСтрокТоварыДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ИзменениеСтрокТоварыДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ИзменениеСтрокТоварыЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ИзменениеСтрокТоварыЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ИзменениеСтрокТоварыОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ИзменениеСтрокТоварыОбъектИзмененийЭлемент), 
		                                                     Элементы[ИзменениеСтрокТоварыОбъектИзмененийЭлемент], Неопределено));
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Услуги");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаИзменениеСтрокУслуги);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ИзменениеСтрокУслугиУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ИзменениеСтрокУслугиСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ИзменениеСтрокУслугиВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.УслугиПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.УслугиНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ИзменениеСтрокУслугиДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ИзменениеСтрокУслугиДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ИзменениеСтрокУслугиЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ИзменениеСтрокУслугиЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ИзменениеСтрокУслугиОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ИзменениеСтрокУслугиОбъектИзмененийЭлемент), 
		                                                     Элементы[ИзменениеСтрокУслугиОбъектИзмененийЭлемент], Неопределено));
	ИначеЕсли ИмяТЧ = "ОС" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "ОС");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаИзменениеСтрокОС);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ИзменениеСтрокОСУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ИзменениеСтрокОССнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ИзменениеСтрокОСВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ОСПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ОСНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ИзменениеСтрокОСДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ИзменениеСтрокОСДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ИзменениеСтрокОСЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ИзменениеСтрокОСЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ИзменениеСтрокОСОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ИзменениеСтрокОСОбъектИзмененийЭлемент), 
		                                                     Элементы[ИзменениеСтрокОСОбъектИзмененийЭлемент], Неопределено));
	КонецЕсли;
	
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Функция НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ)
	
	Если ИмяТЧ = "Товары" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Товары");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаИзменениеСтрокТовары);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ИзменениеСтрокТоварыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ИзменениеСтрокТоварыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ИзменениеСтрокТоварыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ТоварыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ТоварыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ИзменениеСтрокТоварыДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ИзменениеСтрокТоварыДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ИзменениеСтрокТоварыЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ИзменениеСтрокТоварыЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ИзменениеСтрокТоварыОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ИзменениеСтрокТоварыОбъектИзмененийЭлемент), 
		                                                     Элементы[ИзменениеСтрокТоварыОбъектИзмененийЭлемент], Неопределено));
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Услуги");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаИзменениеСтрокУслуги);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ИзменениеСтрокУслугиУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ИзменениеСтрокУслугиСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ИзменениеСтрокУслугиВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.УслугиПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.УслугиНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ИзменениеСтрокУслугиДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ИзменениеСтрокУслугиДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ИзменениеСтрокУслугиЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ИзменениеСтрокУслугиЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ИзменениеСтрокУслугиОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ИзменениеСтрокУслугиОбъектИзмененийЭлемент), 
		                                                     Элементы[ИзменениеСтрокУслугиОбъектИзмененийЭлемент], Неопределено));
	ИначеЕсли ИмяТЧ = "ОС" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "ОС");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаИзменениеСтрокОС);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ИзменениеСтрокОСУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ИзменениеСтрокОССнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ИзменениеСтрокОСВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ОСПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ОСНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ИзменениеСтрокОСДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ИзменениеСтрокОСДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ИзменениеСтрокОСЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ИзменениеСтрокОСЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ИзменениеСтрокОСОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ИзменениеСтрокОСОбъектИзмененийЭлемент), 
		                                                     Элементы[ИзменениеСтрокОСОбъектИзмененийЭлемент], Неопределено));
	КонецЕсли;
	
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Процедура УстановитьПометку(ИмяТЧ, Пометка)
	
	НаборЭлементов = НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ);
	НаборЭлементов.КнопкаСнятьФлажки.Видимость = НЕ НаборЭлементов.КнопкаСнятьФлажки.Видимость;
	НаборЭлементов.КнопкаУстановитьФлажки.Видимость = НЕ НаборЭлементов.КнопкаУстановитьФлажки.Видимость;
	
	Для каждого Строка Из Объект[НаборЭлементов.ИмяТЧ] Цикл
		Строка.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьОбъектИзменений(ИмяТЧ)
	
	Если ИмяТЧ = "Товары" Тогда
		
		Если ИзменениеСтрокТоварыДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
			
			ИзменениеСтрокТоварыОбъектИзмененийРеквизит = "Сумма";
			ИзменениеСтрокТоварыОбъектИзмененийЭлемент = "ТоварыСумма";
			
		ИначеЕсли ИзменениеСтрокТоварыДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			ИзменениеСтрокТоварыОбъектИзмененийРеквизит = "Сумма";
			ИзменениеСтрокТоварыОбъектИзмененийЭлемент = "ТоварыСумма";
			
		ИначеЕсли ИзменениеСтрокТоварыДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки") Тогда
			
			ИзменениеСтрокТоварыОбъектИзмененийРеквизит = "";
			ИзменениеСтрокТоварыОбъектИзмененийЭлемент = "";
			
		КонецЕсли;
		
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		
		Если ИзменениеСтрокУслугиДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
			
			ИзменениеСтрокУслугиОбъектИзмененийРеквизит = "Сумма";
			ИзменениеСтрокУслугиОбъектИзмененийЭлемент = "УслугиСумма";
			
		ИначеЕсли ИзменениеСтрокУслугиДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			ИзменениеСтрокУслугиОбъектИзмененийРеквизит = "Сумма";
			ИзменениеСтрокУслугиОбъектИзмененийЭлемент = "УслугиСумма";
			
		ИначеЕсли ИзменениеСтрокУслугиДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки") Тогда
			
			ИзменениеСтрокУслугиОбъектИзмененийРеквизит = "";
			ИзменениеСтрокУслугиОбъектИзмененийЭлемент = "";
			
		КонецЕсли;
		
	ИначеЕсли ИмяТЧ = "ОС" Тогда
		
		Если ИзменениеСтрокОСДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			ИзменениеСтрокОСОбъектИзмененийРеквизит = "Сумма";
			ИзменениеСтрокОСОбъектИзмененийЭлемент = "ОССумма";
			
		ИначеЕсли ИзменениеСтрокОСДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки") Тогда
			
			ИзменениеСтрокОСОбъектИзмененийРеквизит = "";
			ИзменениеСтрокОСОбъектИзмененийЭлемент = "";
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОформлениеПанелиРедактирования(ИмяТЧ, Состояние, СохранитьИзменения = Неопределено)
	
	Если ИмяТЧ = "Товары" Тогда
		РеквизитЗначение = "ИзменениеСтрокТоварыЗначение";
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		РеквизитЗначение = "ИзменениеСтрокУслугиЗначение";
	ИначеЕсли ИмяТЧ = "ОС" Тогда
		РеквизитЗначение = "ИзменениеСтрокОСЗначение";
	КонецЕсли;
	
	Результат = ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокКлиент(ИмяТЧ),
		Состояние,
		ЭтотОбъект[РеквизитЗначение]);
	
	Если Результат.Свойство("УстановитьСвязиПараметровВыбора") И Результат.УстановитьСвязиПараметровВыбора Тогда
		УстановитьСвязиПараметровВыбораДляЗначения(ИмяТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораДляЗначения(ИмяТЧ)
	
	ГрупповоеИзменениеСтрокСервер.УстановитьСвязиПараметровВыбора(
		НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТаблицу(ИмяТЧ)
	
	ОбработатьТаблицуНаСервере(ИмяТЧ);
	
	Если ИмяТЧ = "Товары" Тогда

		ИзменяемыеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Пометка", Истина));

		ПараметрыРасчета = ПодготовитьПараметрыРасчета(ИмяТЧ);
		
		Для каждого СтрокаТабличнойЧасти Из ИзменяемыеСтроки Цикл

			Если ИзменениеСтрокТоварыДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству")
				ИЛИ ИзменениеСтрокТоварыДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
					
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
				
				Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;	
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
				
				ОбновитьПодвалФормы();		
			КонецЕсли;
		КонецЦикла;
	
	ИначеЕсли ИмяТЧ = "Услуги" Тогда

		ИзменяемыеСтроки = Объект.Услуги.НайтиСтроки(Новый Структура("Пометка", Истина));

		ПараметрыРасчета = ПодготовитьПараметрыРасчета(ИмяТЧ);
		
		Для каждого СтрокаТабличнойЧасти Из ИзменяемыеСтроки Цикл

			Если ИзменениеСтрокУслугиДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству")
				ИЛИ ИзменениеСтрокУслугиДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
					
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
				
				Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;	
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
				
				ОбновитьПодвалФормы();			
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяТЧ = "ОС" Тогда

		ИзменяемыеСтроки = Объект.ОС.НайтиСтроки(Новый Структура("Пометка", Истина));

		ПараметрыРасчета = ПодготовитьПараметрыРасчета(ИмяТЧ);
		
		Для каждого СтрокаТабличнойЧасти Из ИзменяемыеСтроки Цикл

			Если ИзменениеСтрокОСДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
					
				Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				
				Если Объект.СуммаВключаетНалоги Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
				КонецЕсли;	
					
				ОбновитьПодвалФормы();				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТаблицуНаСервере(ИмяТЧ)
	
	Если ИмяТЧ = "Товары" Тогда
		
		ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
			ЭтотОбъект,
			Объект.Товары,
			ИзменениеСтрокТоварыДействие,
			ИзменениеСтрокТоварыОбъектИзмененийРеквизит,
			ИзменениеСтрокТоварыЗначение,
			"ТоварыНоменклатура");
			
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		
		ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
			ЭтотОбъект,
			Объект.Услуги,
			ИзменениеСтрокУслугиДействие,
			ИзменениеСтрокУслугиОбъектИзмененийРеквизит,
			ИзменениеСтрокУслугиЗначение,
			"УслугиНоменклатура");
			
	ИначеЕсли ИмяТЧ = "ОС" Тогда
		
		ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
			ЭтотОбъект,
			Объект.ОС,
			ИзменениеСтрокОСДействие,
			ИзменениеСтрокОСОбъектИзмененийРеквизит,
			ИзменениеСтрокОСЗначение,
			"ОСНоменклатура");
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущееДействиеИзмененияСтрок()
	
	// Товары.
	СохраняемыеНастройки = "";
	
	Если ИзменениеСтрокТоварыДействие <> ИзменениеСтрокТоварыДействиеПриОткрытии Тогда
		СохраняемыеНастройки = "Товары";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СохраняемыеНастройки) Тогда
		СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки);
	КонецЕсли;
	
	// Услуги.
	СохраняемыеНастройки = "";
	
	Если ИзменениеСтрокУслугиДействие <> ИзменениеСтрокУслугиДействиеПриОткрытии Тогда
		СохраняемыеНастройки = "Услуги";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СохраняемыеНастройки) Тогда
		СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки);
	КонецЕсли;
	
	// ОС.
	СохраняемыеНастройки = "";
	
	Если ИзменениеСтрокОСДействие <> ИзменениеСтрокОСДействиеПриОткрытии Тогда
		СохраняемыеНастройки = "ОС";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СохраняемыеНастройки) Тогда
		СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки)
	
	ИменаТЧ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СохраняемыеНастройки);
	Для каждого ИмяТЧ Из ИменаТЧ Цикл
		ГрупповоеИзменениеСтрокСервер.СохранитьНастройки(НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииКомиссия

// Процедура - обработчик события ПередУдалением таблицы Комиссия.
//
&НаКлиенте
Процедура КомиссияПередУдалением(Элемент, Отказ)

	ТекущаяСтрокаТЧ = Элементы.Комиссия.ТекущиеДанные;
	Если ТекущаяСтрокаТЧ.Председатель Тогда
		ИндексУдаляемойСтроки = Объект.Комиссия.Индекс(ТекущаяСтрокаТЧ);
		КоличествоСтрок = Объект.Комиссия.Количество() - 1;

		Если КоличествоСтрок > 0 Тогда
			Если ИндексУдаляемойСтроки <= КоличествоСтрок - 1 Тогда
				ИндексНовогоПредседателя = ИндексУдаляемойСтроки + 1;
			Иначе
				ИндексНовогоПредседателя = КоличествоСтрок - 1;
			КонецЕсли;
			Объект.Комиссия[ИндексНовогоПредседателя].Председатель = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы Комиссия.
//
&НаКлиенте
Процедура КомиссияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если Копирование Тогда
		ТекущаяСтрокаТЧ = Элементы.Комиссия.ТекущиеДанные;
		ТекущаяСтрокаТЧ.ФизЛицо = Неопределено;
		ТекущаяСтрокаТЧ.Председатель = Ложь;
	Иначе // Создание заново
		Если Объект.Комиссия.Количество() = 1 Тогда
			Объект.Комиссия[0].Председатель = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора таблицы Комиссия.
//
&НаКлиенте
Процедура КомиссияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Строки = Объект.Комиссия.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение));

	Если Строки.Количество() > 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Физическое лицо ""%1"" уже подобрано!'"), ВыбранноеЗначение);
		ПоказатьПредупреждение(, ТекстСообщения, 60);
	Иначе
		НоваяСтрока = Объект.Комиссия.Добавить();
		НоваяСтрока.ФизЛицо = ВыбранноеЗначение;
		Если Объект.Комиссия.Количество() = 1 Тогда
			НоваяСтрока.Председатель = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Председатель.
//
&НаКлиенте
Процедура КомиссияПредседательПриИзменении(Элемент)

	ТекущаяСтрокаТЧ = Элементы.Комиссия.ТекущиеДанные;

	Если НЕ ТекущаяСтрокаТЧ.Председатель Тогда
		// Снимать флажок нельзя
		ТекущаяСтрокаТЧ.Председатель = Истина;
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТЧ Из Объект.Комиссия Цикл
		Если СтрокаТЧ.НомерСтроки <> ТекущаяСтрокаТЧ.НомерСтроки Тогда
			СтрокаТЧ.Председатель = Ложь;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ФизЛицо.
//
&НаКлиенте
Процедура КомиссияФизЛицоПриИзменении(Элемент)

	Если Объект.Комиссия.Количество() = 1 Тогда
		Объект.Комиссия[0].Председатель = Истина;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора поля ввода ФизЛицо.
//
&НаКлиенте
Процедура КомиссияФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ТекущаяСтрокаТЧ = Элементы.Комиссия.ТекущиеДанные;

	Если ТекущаяСтрокаТЧ.ФизЛицо <> ВыбранноеЗначение Тогда

		СтрокиТабличнойЧасти = Объект.Комиссия.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение));

		Если СтрокиТабличнойЧасти.Количество() > 0 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Физическое лицо ""%1"" уже включено в состав комиссии!'"), ВыбранноеЗначение);
			ПоказатьПредупреждение(, ТекстСообщения, 60);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура НомерБланкаСФОбработкаВыбораЗавершение(НомерБланкаСФ, ДополнительныеПараметры) Экспорт
	Если НомерБланкаСФ <> Неопределено Тогда
		СформироватьНомераСчетФактур(НомерБланкаСФ);
		
		Если НЕ Элементы.НомерБланкаСФ.СписокВыбора.НайтиПоЗначению(НомерБланкаСФ) = Неопределено Тогда 
			Объект.НомерБланкаСФ = НомерБланкаСФ;	
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьТоварыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
    Если АдресЗагруженныхДанных = Неопределено Тогда 
        Возврат;
    КонецЕсли;
    ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

&НаКлиенте
Процедура ОткрытьПроводник(ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ПолноеИмяФайла) Тогда 
		ФайловаяСистемаКлиент.ОткрытьПроводник(ДополнительныеПараметры.ПолноеИмяФайла);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()	
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда 
		Элементы.ПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.СчетУчетаСкидок.Видимость = Ложь;
		Элементы.ТоварыПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ТоварыСуммаСкидки.Видимость = Ложь;
		
		Элементы.УслугиПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.УслугиСуммаСкидки.Видимость = Ложь;
		
		Элементы.ОСПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ОССуммаСкидки.Видимость = Ложь;
		
		Элементы.ИтогСуммаСкидки.Видимость = Ложь;
		
		Элементы.ТоварыРасшифровкаСкидки.Видимость = Ложь;
		Элементы.УслугиРасшифровкаСкидки.Видимость = Ложь;
		Элементы.ОСРасшифровкаСкидки.Видимость = Ложь;
		
	ИначеЕсли Объект.ВидСкидкиНаценки = Перечисления.ВидыСкидокНаценок.ПроцентПоСтроке Тогда 
		Элементы.ПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.СчетУчетаСкидок.Видимость = Истина;
		
		Элементы.ТоварыПроцентСкидкиНаценки.Видимость = Истина;
		Элементы.ТоварыСуммаСкидки.Видимость = Истина;
		Элементы.ТоварыСуммаСкидки.ТолькоПросмотр = Истина;

		Элементы.УслугиПроцентСкидкиНаценки.Видимость = Истина;
		Элементы.УслугиСуммаСкидки.Видимость = Истина;
		Элементы.УслугиСуммаСкидки.ТолькоПросмотр = Истина;
		
		Элементы.ОСПроцентСкидкиНаценки.Видимость = Истина;
		Элементы.ОССуммаСкидки.Видимость = Истина;
		Элементы.ОССуммаСкидки.ТолькоПросмотр = Истина;
		
		Элементы.ИтогСуммаСкидки.Видимость = Истина;
		
		Элементы.ТоварыРасшифровкаСкидки.Видимость = Истина;
		Элементы.УслугиРасшифровкаСкидки.Видимость = Истина;
		Элементы.ОСРасшифровкаСкидки.Видимость = Истина;
		
	ИначеЕсли Объект.ВидСкидкиНаценки = Перечисления.ВидыСкидокНаценок.СуммаПоСтроке Тогда 
		Элементы.ПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.СчетУчетаСкидок.Видимость = Истина;
		Элементы.ТоварыПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ТоварыСуммаСкидки.Видимость = Истина;
		Элементы.ТоварыСуммаСкидки.ТолькоПросмотр = Ложь;
		
		Элементы.УслугиПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.УслугиСуммаСкидки.Видимость = Истина;
		Элементы.УслугиСуммаСкидки.ТолькоПросмотр = Ложь;
		
		Элементы.ОСПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ОССуммаСкидки.Видимость = Истина;
		Элементы.ОССуммаСкидки.ТолькоПросмотр = Ложь;

		Элементы.ИтогСуммаСкидки.Видимость = Истина;
		
		Элементы.ТоварыРасшифровкаСкидки.Видимость = Истина;
		Элементы.УслугиРасшифровкаСкидки.Видимость = Истина;
		Элементы.ОСРасшифровкаСкидки.Видимость = Истина;
		
	ИначеЕсли Объект.ВидСкидкиНаценки = Перечисления.ВидыСкидокНаценок.ПроцентОбщий Тогда 
		Элементы.ПроцентСкидкиНаценки.Видимость = Истина;
		Элементы.СчетУчетаСкидок.Видимость = Истина;
		Элементы.ТоварыПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ТоварыСуммаСкидки.Видимость = Истина;
		Элементы.ТоварыСуммаСкидки.ТолькоПросмотр = Истина;
		
		Элементы.УслугиПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.УслугиСуммаСкидки.Видимость = Истина;
		Элементы.УслугиСуммаСкидки.ТолькоПросмотр = Истина;
		
		Элементы.ОСПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.ОССуммаСкидки.Видимость = Истина;
		Элементы.ОССуммаСкидки.ТолькоПросмотр = Истина;
		
		Элементы.ИтогСуммаСкидки.Видимость = Истина;
		
		Элементы.ТоварыРасшифровкаСкидки.Видимость = Истина;
		Элементы.УслугиРасшифровкаСкидки.Видимость = Истина;
		Элементы.ОСРасшифровкаСкидки.Видимость = Истина;
	КонецЕсли;		
	
	Если Объект.БезналичныйРасчет Тогда
		Элементы.ТоварыСуммаНСП.Видимость 	= Ложь;
		Элементы.УслугиСуммаНСП.Видимость 	= Ложь;
		Элементы.ОССуммаНСП.Видимость 		= Ложь;
		Элементы.ИтогСуммаНСП.Видимость 	= Ложь;
	Иначе
		Элементы.ТоварыСуммаНСП.Видимость 	= Истина;
		Элементы.УслугиСуммаНСП.Видимость 	= Истина;
		Элементы.ОССуммаНСП.Видимость 		= Истина;
		Элементы.ИтогСуммаНСП.Видимость 	= Истина;
	КонецЕсли;	

	Если Объект.СтавкаНДС = Справочники.СтавкиНДС.Нулевая
		ИЛИ Объект.СтавкаНДС = Справочники.СтавкиНДС.Освобожденная
		ИЛИ Объект.СтавкаНДС = Справочники.СтавкиНДС.Необлагаемая Тогда
		Элементы.ТоварыСуммаНДС.Видимость 	= Ложь;
		Элементы.УслугиСуммаНДС.Видимость 	= Ложь;
		Элементы.ОССуммаНДС.Видимость 		= Ложь;
	Иначе
		Элементы.ТоварыСуммаНДС.Видимость 	= Истина;
		Элементы.УслугиСуммаНДС.Видимость 	= Истина;
		Элементы.ОССуммаНДС.Видимость 		= Истина;
	КонецЕсли;
	
	Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		Элементы.ПечататьКурсИСуммуВРегламентированнойВалюте.Видимость = Ложь;	
	Иначе
		Элементы.ПечататьКурсИСуммуВРегламентированнойВалюте.Видимость = Истина;
	КонецЕсли;	
	
	Если Объект.СуммаВключаетНалоги Тогда
		Элементы.ТоварыСумма.Видимость 	= Истина;
		Элементы.УслугиСумма.Видимость 	= Истина;
		Элементы.ОССумма.Видимость 		= Истина;
		
		Элементы.ТоварыСуммаДохода1.Видимость = Ложь;
		Элементы.УслугиСуммаДохода1.Видимость = Ложь;
		Элементы.ОССуммаДохода1.Видимость 	= Ложь;
		
		Элементы.ТоварыВсего.Видимость 	= Ложь;
		Элементы.УслугиВсего.Видимость 	= Ложь;
		Элементы.ОСВсего.Видимость 		= Ложь;
		
		Элементы.ТоварыСуммаДохода2.Видимость = Истина;
		Элементы.УслугиСуммаДохода2.Видимость = Истина;
		Элементы.ОССуммаДохода2.Видимость 	= Истина;
	Иначе
		Элементы.ТоварыСумма.Видимость 	= Ложь;
		Элементы.УслугиСумма.Видимость 	= Ложь;
		Элементы.ОССумма.Видимость 		= Ложь;
		
		Элементы.ТоварыСуммаДохода1.Видимость = Истина;
		Элементы.УслугиСуммаДохода1.Видимость = Истина;
		Элементы.ОССуммаДохода1.Видимость 	= Истина;
		
		Элементы.ТоварыВсего.Видимость 	= Истина;
		Элементы.УслугиВсего.Видимость 	= Истина;
		Элементы.ОСВсего.Видимость 		= Истина;
		
		Элементы.ТоварыСуммаДохода2.Видимость = Ложь;
		Элементы.УслугиСуммаДохода2.Видимость = Ложь;
		Элементы.ОССуммаДохода2.Видимость 	= Ложь;
	КонецЕсли;	
	
	Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		Элементы.Курс.Видимость 	 = Ложь;
		Элементы.Кратность.Видимость = Ложь;
	Иначе
		Элементы.Курс.Видимость 	 = Истина;
		Элементы.Кратность.Видимость = Истина;	
	КонецЕсли;	
	
	// Видимость СФ.
	Если ЗначениеЗаполнено(СчетФактураВыписанный1)
		Или ЗначениеЗаполнено(СчетФактураВыписанный2) Тогда 
		Элементы.ГруппаСФ.Видимость = Ложь;
		Элементы.ГруппаДанныеДляПечати.Видимость = Ложь;
		Элементы.СчетФактураВыписанный1.Видимость = Истина;
		Элементы.СчетФактураВыписанный2.Видимость = Истина;
	Иначе 
		Элементы.ГруппаСФ.Видимость = Истина;
		Элементы.ГруппаДанныеДляПечати.Видимость = Истина;
		Элементы.СчетФактураВыписанный1.Видимость = Ложь;
		Элементы.СчетФактураВыписанный2.Видимость = Ложь;
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(ДатаДокумента, Объект.ВалютаДокумента, Объект.ДоговорКонтрагента);
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура();
	СтруктураНадписи.Вставить("УчетВалютныхОпераций", Истина);
	СтруктураНадписи.Вставить("ВалютаДокумента", 	  Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("ТипЦен", 			  СтруктураДанные.ТипЦен);
	СтруктураНадписи.Вставить("СтавкаНДС", 			  Объект.СтавкаНДС);
	СтруктураНадписи.Вставить("СтавкаНСП", 			  Объект.СтавкаНСП);
	СтруктураНадписи.Вставить("СуммаВключаетНалоги",  Объект.СуммаВключаетНалоги);
		
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи, ДанныеУчетнойПолитики.ПлательщикНДС);

КонецПроцедуры 

// Процедура устанавливает текущую страницу при открытии формы.
//
&НаКлиенте
Процедура УстановитьТекущуюСтраницу()	
	Если Объект.Товары.Количество() > 0 Тогда 
		Возврат;
	ИначеЕсли Объект.Услуги.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаУслуги;
	ИначеЕсли Объект.ОС.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаОС;
	КонецЕсли;	
КонецПроцедуры

// Процедура устанавливает функциональные опции формы документа.
//
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма, Объект.Организация, ДатаДокумента);
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением, ВалютаДокумента)
	РазностьДат = БухгалтерскийУчетСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	ВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаНовая);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность);
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - Пересчитать курс кратность валюты расчетов
//
// Параметры:
//  СтруктураДанные	- Структура - 
//		* ВалютаКурсКратность - Структура
//			* Курс - Число
//			* Кратность - Число
//
&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		Или Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(Объект.Курс) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(КурсНовый) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'На дату документа у валюты расчетов %1 был задан курс.
									|Установить курс расчетов %2 в соответствии с курсом валюты?'"),
									КурсВалютыСтрокой, КурсНовыйВалютыСтрокой);
		
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПересчитатьКурсКратностьВалютыДокументаЗавершение", ЭтотОбъект, Новый Структура("КратностьНовый, КурсНовый", КратностьНовый, КурсНовый)), ТекстСообщения, Режим, 0);
		Возврат;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КратностьНовый = ДополнительныеПараметры.КратностьНовый;
	КурсНовый = ДополнительныеПараметры.КурсНовый;
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Курс = КурсНовый;
		Объект.Кратность = КратностьНовый;
	КонецЕсли;
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорКонтрагента",
		ДоговорПоУмолчанию);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанию
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ВидыДоговораДляДокумента(Документ);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Период, ВалютаДокумента, ДоговорКонтрагента)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорКонтрагента.ВалютаРасчетов);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаРасчетов, Период));
	
	СтруктураДанные.Вставить(
		"ТипЦен",
		ДоговорКонтрагента.ТипЦен);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНалоги",
		ДоговорКонтрагента.СуммаВключаетНалоги);
	
	СтруктураДанные.Вставить(
		"СтавкаНДС",
		ДоговорКонтрагента.СтавкаНДС);
		
	СтруктураДанные.Вставить(
		"ВидПоставкиНДС",
		ДоговорКонтрагента.ВидПоставкиНДС);
	
	СчетаУчета = БухгалтерскийУчетВызовСервера.ПолучитьСчетаРасчетовСКонтрагентом(ДоговорКонтрагента.Организация, ДоговорКонтрагента.Владелец, ДоговорКонтрагента);

	СтруктураДанные.Вставить(
		"СчетРасчетов",
		СчетаУчета.СчетРасчетовПокупателя);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаКлиенте
Процедура ОбработатьИзменениеДоговора(МодифицированДоговор = Ложь)
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(ДатаДокумента, Объект.ВалютаДокумента, Объект.ДоговорКонтрагента);

	// Обработка изменения валюты
	СтруктураКурсыПред = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	
	Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
	Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
	Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	
	СтруктураКурсы = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.Курс, Объект.Кратность);
	
	// Обработка изменения налогообложения
	Объект.СуммаВключаетНалоги = СтруктураДанные.СуммаВключаетНалоги;
	Объект.СтавкаНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, СтруктураДанные.СтавкаНДС, 
							ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));
	Объект.ВидПоставкиНДС = СтруктураДанные.ВидПоставкиНДС;

	// Обработка изменения отражения в учете
	Объект.СчетРасчетов = СтруктураДанные.СчетРасчетов;
	
	ТипЦенПередИзменением = ТипЦен;
	ТипЦен = СтруктураДанные.ТипЦен;
	
	// Серия бланка СФ
	Если Объект.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.Освобожденная")
		ИЛИ Объект.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.Необлагаемая") Тогда
		Объект.СерияБланкаСФ = "ДПБУ";			
	ИначеЕсли Объект.СерияБланкаСФ = "ДПБУ" Тогда
		Объект.СерияБланкаСФ = "";
	КонецЕсли;	
	
	// Вопрос изменения
	ИзменилсяТипЦен = ТипЦенПередИзменением <> ТипЦен
		И ЗначениеЗаполнено(ТипЦен);
	ИзмениласьВалютаРасчетов = СтруктураКурсыПред.Валюта <> СтруктураДанные.ВалютаРасчетов
		И ЗначениеЗаполнено(Объект.ВалютаДокумента); 
	ПересчетНеобходим = (Объект.Товары.Количество() > 0)
		Или (Объект.Услуги.Количество() > 0);	
		
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) 
		И (ИзменилсяТипЦен Или ИзмениласьВалютаРасчетов)
		И ПересчетНеобходим Тогда
		
		ТекстСообщение = "";
		
		Если ИзменилсяТипЦен Тогда 
			ТекстСообщение = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, 
				|отличные от установленных в документе. 
				|Возможно, необходимо перезаполнить цены.'") + Символы.ПС + Символы.ПС;
		КонецЕсли;
		
		Если ИзмениласьВалютаРасчетов Тогда 
			ТекстСообщение = ТекстСообщение + НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом!
				|Возможно, необходимо перезаполнить цены.'") + Символы.ПС + Символы.ПС;
		КонецЕсли;

		ТекстСообщение = ТекстСообщение + НСтр("ru = 'Пересчитать документ в соответствии с договором?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьИзменениеДоговораФрагментЗавершение", ЭтотОбъект, 
		
		Новый Структура("СтруктураКурсыПред, СтруктураКурсы", СтруктураКурсыПред, СтруктураКурсы)), 
			ТекстСообщение,
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;	
		
	// Пересчет табличной части
	// Цена, Сумма
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Товары", Объект.ТочностьЦены);
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Услуги", Объект.ТочностьЦены);
	// Налоги
	МассивТабличныхЧастей = Новый Массив();
	МассивТабличныхЧастей.Добавить("Товары");
	МассивТабличныхЧастей.Добавить("Услуги");
	МассивТабличныхЧастей.Добавить("ОС");
						
	Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
				
		ПараметрыРасчета = ПодготовитьПараметрыРасчета(ТабличнаяЧасть);
		
		Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть] Цикл
			
			Если Объект.СуммаВключаетНалоги Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			Иначе	
				Если ТабличнаяЧасть <> "ОС" Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
				КонецЕсли;	
					
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
			КонецЕсли;
				
			Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			КонецЕсли;	
				
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			
			Если ТабличнаяЧасть <> "ОС" ИЛИ Объект.СуммаВключаетНалоги Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
		
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговораФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СтруктураКурсыПред = ДополнительныеПараметры.СтруктураКурсыПред;
		СтруктураКурсы = ДополнительныеПараметры.СтруктураКурсы;
		
		// Цена, Сумма
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Товары", Объект.ТочностьЦены);
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ДатаДокумента, СтруктураКурсыПред, СтруктураКурсы, "Услуги", Объект.ТочностьЦены);
	КонецЕсли;	
	
	// Налоги
	МассивТабличныхЧастей = Новый Массив();
	МассивТабличныхЧастей.Добавить("Товары");
	МассивТабличныхЧастей.Добавить("Услуги");
	МассивТабличныхЧастей.Добавить("ОС");
						
	Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
				
		ПараметрыРасчета = ПодготовитьПараметрыРасчета(ТабличнаяЧасть);
		
		Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть] Цикл
			
			Если Объект.СуммаВключаетНалоги Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			Иначе	
				Если ТабличнаяЧасть <> "ОС" Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
				КонецЕсли;	
					
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
			КонецЕсли;
			
			Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			КонецЕсли;	
				
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			
			Если ТабличнаяЧасть <> "ОС" ИЛИ Объект.СуммаВключаетНалоги Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ТекстПредупреждения = "")
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  	Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  	Объект.Курс);
	СтруктураПараметров.Вставить("Кратность",			  	Объект.Кратность);
	СтруктураПараметров.Вставить("СтавкаНДС",	  			Объект.СтавкаНДС);
	СтруктураПараметров.Вставить("СтавкаНСП",	  			Объект.СтавкаНСП);
	СтруктураПараметров.Вставить("СтавкаНСПУслуги",	  		Объект.СтавкаНСПУслуги);
	СтруктураПараметров.Вставить("СуммаВключаетНалоги",	  	Объект.СуммаВключаетНалоги);
	СтруктураПараметров.Вставить("Контрагент",			  	Объект.Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",		Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",			  	Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  	ДатаДокумента);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  	ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  	ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  	Ложь);
	СтруктураПараметров.Вставить("ТекстПредупреждения",   	ТекстПредупреждения);

	// Открытие формы "Цены и Валюта".
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(ДатаДокумента, Объект.ВалютаДокумента, Объект.ДоговорКонтрагента);
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура();
	СтруктураНадписи.Вставить("УчетВалютныхОпераций", Истина);
	СтруктураНадписи.Вставить("ВалютаДокумента", 	  Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("ТипЦен", 			  СтруктураДанные.ТипЦен);
	СтруктураНадписи.Вставить("СтавкаНДС", 			  Объект.СтавкаНДС);
	СтруктураНадписи.Вставить("СтавкаНСП", 			  Объект.СтавкаНСП);
	СтруктураНадписи.Вставить("СуммаВключаетНалоги",  Объект.СуммаВключаетНалоги);
		
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи, ДанныеУчетнойПолитики.ПлательщикНДС);
	
КонецПроцедуры // ОткрытьФормуЦеныИВалютаЗавершение()

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи, ПлательщикНДС)
	
	ТекстНадписи = "";
	
	// Валюта
	Если СтруктураНадписи.УчетВалютныхОпераций Тогда
		Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
			ТекстНадписи = НСтр("ru = '%Валюта%'");
			ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
		КонецЕсли;
	КонецЕсли;
	
	// Тип цен
	Если ЗначениеЗаполнено(СтруктураНадписи.ТипЦен) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ТипЦен%'");
		Иначе	
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ТипЦен%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ТипЦен%", СокрЛП(Строка(СтруктураНадписи.ТипЦен)));
	КонецЕсли;
	
	// Ставка НДС
	Если ЗначениеЗаполнено(СтруктураНадписи.СтавкаНДС) И ПлательщикНДС Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%СтавкаНДС%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %СтавкаНДС%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%СтавкаНДС%", СокрЛП(Строка(СтруктураНадписи.СтавкаНДС)));
	КонецЕсли;
	
	// Ставка НСП
	Если ЗначениеЗаполнено(СтруктураНадписи.СтавкаНСП) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%СтавкаНСП%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %СтавкаНСП%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%СтавкаНСП%", СокрЛП(Строка(СтруктураНадписи.СтавкаНСП)));
	КонецЕсли;
	
	// Флаг сумма включает налоги
	Если СтруктураНадписи.СуммаВключаетНалоги Тогда
		ТекстНадписиСуммаВключаетНалоги = НСтр("ru = 'Сумма включает налоги'");
	Иначе
		ТекстНадписиСуммаВключаетНалоги = НСтр("ru = 'Сумма не включает налоги'");
	КонецЕсли;

	Если ПустаяСтрока(ТекстНадписи) Тогда
		ТекстНадписи = ТекстНадписи + НСтр("ru = '%СуммаВключаетНалоги%'");
	Иначе
		ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %СуммаВключаетНалоги%'");
	КонецЕсли;
	ТекстНадписи = СтрЗаменить(ТекстНадписи, "%СуммаВключаетНалоги%", ТекстНадписиСуммаВключаетНалоги);
	
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦеныИВалюта()

&НаКлиенте
Процедура ОбработатьИзменениеУчетнойПолитики()	
	
	НовыеДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	Если НЕ ДанныеУчетнойПолитики = НовыеДанныеУчетнойПолитики Тогда 
		ДанныеУчетнойПолитики = НовыеДанныеУчетнойПолитики;
		
		Объект.СтавкаНСП = ДанныеУчетнойПолитики.СтавкаНСПРеализацииТовары;
		Объект.СтавкаНСПУслуги = ДанныеУчетнойПолитики.СтавкаНСПРеализацииУслуги;
		
		// Товары
		ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");	
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ПараметрыРасчета);
		
		// Услуги
		ПараметрыРасчета = ПодготовитьПараметрыРасчета("Услуги");
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ПараметрыРасчета);
		
		// ОС
		ПараметрыРасчета = ПодготовитьПараметрыРасчета("ОС");		
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьНалогиТабличнойЧасти(Объект, ПараметрыРасчета);	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетФактураВыписанный()

	// На одну реализацию может быть выписано 2 счета-фактуры
	// по товарам и по услугам.	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	СчетаФактурыВыписанные.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.СчетаФактурыВыписанные КАК СчетаФактурыВыписанные
		|ГДЕ
		|	СчетаФактурыВыписанные.Организация = &Организация
		|	И СчетаФактурыВыписанные.Документ = &Документ
		|	И НЕ СчетаФактурыВыписанные.Регистратор = &Документ";
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		СчетФактураВыписанный1 = ВыборкаДетальныеЗаписи.Регистратор;
		Если ЗначениеЗаполнено(Объект.СерияБланкаСФ)
			Или ЗначениеЗаполнено(Объект.НомерБланкаСФ) Тогда 
			Объект.СерияБланкаСФ = "";
			Объект.НомерБланкаСФ = "";
		КонецЕсли;	
	КонецЕсли;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		СчетФактураВыписанный2 = ВыборкаДетальныеЗаписи.Регистратор;	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетФактураВыписанный()

&НаКлиенте
Процедура ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	
	СтавкаНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, 
					Объект.СтавкаНДС, 
					ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));
					
	СтавкаНСП = ?(ДанныеУчетнойПолитики.ПлательщикНСП, 
					?(ИмяТабличнойЧасти = "Товары", Объект.СтавкаНСП, Объект.СтавкаНСПУслуги), 
					ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка"));
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Дата", ДатаДокумента);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Контрагент", Объект.Контрагент);
	СтруктураДанные.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНалоги", Объект.СуммаВключаетНалоги);
	СтруктураДанные.Вставить("СтавкаНДС", СтавкаНДС);
	СтруктураДанные.Вставить("СтавкаНСП", СтавкаНСП);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

	// Заполнение по данным номенклатуры
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.СчетДохода = СтруктураДанные.СчетДохода;
	СтрокаТабличнойЧасти.СтатьяДохода = СтруктураДанные.СтатьяДохода;
	
	Если ИмяТабличнойЧасти = "Товары" Тогда 
		СтрокаТабличнойЧасти.СчетУчета = СтруктураДанные.СчетУчета;
		СтрокаТабличнойЧасти.СчетСебестоимости = СтруктураДанные.СчетРасхода;
		СтрокаТабличнойЧасти.СтатьяРасхода = СтруктураДанные.СтатьяРасхода;
	ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда
		СтрокаТабличнойЧасти.ДополнительныеСведения = НаименованиеУслуги(СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;	
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета(ИмяТабличнойЧасти);
	
	// Расчет суммы
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
		
	Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;	
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	
	ОбновитьПодвалФормы();
КонецПроцедуры	

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Счета учета
	СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(СтруктураДанные.Организация, СтруктураДанные.Номенклатура);
	СтруктураДанные.Вставить("СчетУчета", СчетаУчетаНоменклатуры.СчетУчета);
	СтруктураДанные.Вставить("СчетДохода", СчетаУчетаНоменклатуры.СчетДохода);
	СтруктураДанные.Вставить("СчетРасхода", СчетаУчетаНоменклатуры.СчетРасхода);
	СтруктураДанные.Вставить("СтатьяДохода", СчетаУчетаНоменклатуры.СтатьяДохода);
	СтруктураДанные.Вставить("СтатьяРасхода", СчетаУчетаНоменклатуры.СтатьяРасхода);
	
	// Цены 
	СтруктураДанные.Вставить("ТипЦен", СтруктураДанные.ДоговорКонтрагента.ТипЦен);
	Цена = БухгалтерскийУчетСервер.ПолучитьЦенуНоменклатуры(СтруктураДанные);
	СтруктураДанные.Вставить("Цена", Цена);
	
	Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе	
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Получает наименование Услуги
//
&НаСервереБезКонтекста
Функция НаименованиеУслуги(Номенклатура)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "НаименованиеПолное");
КонецФункции 

// Производит расчет суммы скидки/наценки
//
&НаКлиенте
Процедура ВидСкидкиПриИзмененииНаКлиенте()
	
	МассивТабличныхЧастей = Новый Массив();
	МассивТабличныхЧастей.Добавить("Товары");
	МассивТабличныхЧастей.Добавить("Услуги");
	МассивТабличныхЧастей.Добавить("ОС");
	
	Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
		
		Если ТабличнаяЧасть = "Товары" Тогда
			СтавкаНСП = Объект.СтавкаНСП;
		ИначеЕсли ТабличнаяЧасть = "Услуги" Тогда
			СтавкаНСП = Объект.СтавкаНСПУслуги;
		Иначе
			СтавкаНСП = ПредопределенноеЗначение("Справочник.СтавкиНСП.Прочее");
		КонецЕсли;	
		
		ПараметрыРасчета = ПодготовитьПараметрыРасчета(ТабличнаяЧасть);
		
		Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть] Цикл
			Если НЕ ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда 
				Объект.ПроцентСкидкиНаценки = 0;
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
			ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентОбщий") Тогда 
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
			ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентПоСтроке") Тогда 
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
			ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда 
				Объект.ПроцентСкидкиНаценки = 0;
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
			КонецЕсли;
			
			Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
			КонецЕсли;	
				
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
				
			Если Объект.СуммаВключаетНалоги Тогда
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
				
			Иначе
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				
				Если ТабличнаяЧасть <> "ОС" Тогда
					// После расчета Всего и налогов пересчет Дохода, чтобы исключить разницу в копейки.
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	ОбновитьПодвалФормы();	
КонецПроцедуры // ВидСкидкиПриИзмененииНаКлиенте()

// Процедура рассчитывает итоги для подвала формы.
//
&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего") + Объект.ОС.Итог("Сумма");
	ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС");
	ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП") + Объект.ОС.Итог("СуммаНСП");
	
	ИтогСуммаСкидки = Объект.Товары.Итог("СуммаСкидки") + Объект.Услуги.Итог("СуммаСкидки") + Объект.ОС.Итог("СуммаСкидки");
	
КонецПроцедуры // ОбновитьПодвалФормы()

// Процедура устанавливает формат и формат редактирования элементов "Цена" в ТЧ "Товары" и "Услуги"
//
&НаКлиенте
Процедура УстановитьФорматЦены()

	Если Объект.ТочностьЦены = 4 Тогда
		
		Элементы.ТоварыЦена.ФорматРедактирования = "ЧЦ=15; ЧДЦ=4";
		Элементы.ТоварыЦена.Формат = "ЧЦ=15; ЧДЦ=4";
		Элементы.УслугиЦена.ФорматРедактирования = "ЧЦ=15; ЧДЦ=4";
		Элементы.УслугиЦена.Формат = "ЧЦ=15; ЧДЦ=4";
		
	ИначеЕсли Объект.ТочностьЦены = 3 Тогда
		
		Элементы.ТоварыЦена.ФорматРедактирования = "ЧЦ=15; ЧДЦ=3";
		Элементы.ТоварыЦена.Формат = "ЧЦ=15; ЧДЦ=3";
		Элементы.УслугиЦена.ФорматРедактирования = "ЧЦ=15; ЧДЦ=3";
		Элементы.УслугиЦена.Формат = "ЧЦ=15; ЧДЦ=3";
		
	Иначе
		Элементы.ТоварыЦена.ФорматРедактирования = "ЧЦ=15; ЧДЦ=2";
		Элементы.ТоварыЦена.Формат = "ЧЦ=15; ЧДЦ=2";
		Элементы.УслугиЦена.ФорматРедактирования = "ЧЦ=15; ЧДЦ=2";
		Элементы.УслугиЦена.Формат = "ЧЦ=15; ЧДЦ=2";
	КонецЕсли;	

	Элементы.Товары.Обновить();
	Элементы.Услуги.Обновить();
	
КонецПроцедуры

// Процедура формирования списка серий счетов-фактур.
//
&НаКлиенте
Процедура СформироватьСериюСчетаФактуры()
		
	Элементы.СерияБланкаСФ.СписокВыбора.Очистить();
	СписокСерийБланковСФ = БухгалтерскийУчетВызовСервера.СформироватьСписокСерийСФ(Объект.Организация, Истина);
	Элементы.СерияБланкаСФ.СписокВыбора.ЗагрузитьЗначения(СписокСерийБланковСФ);
	
КонецПроцедуры	

// Процедура формирования списка номеров серии счет фактуры.
//
&НаКлиенте
Процедура СформироватьНомераСчетФактур(НомерБланкаСФ = "0")
	
	Элементы.НомерБланкаСФ.СписокВыбора.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.СерияБланкаСФ) Тогда 
		Возврат;
	КонецЕсли;
	
	СписокНомеров = БухгалтерскийУчетВызовСервера.СформироватьСписокНомеровБланковСФ(Объект.Организация, Объект.СерияБланкаСФ, НомерБланкаСФ);
	
	Для Каждого НомерБланка Из СписокНомеров Цикл
		Элементы.НомерБланкаСФ.СписокВыбора.Добавить(НомерБланка.Значение, НомерБланка.Представление);
	КонецЦикла;
КонецПроцедуры	

// Процедура - обработчик подбора товаров.
//
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	СтавкаНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, 
					Объект.СтавкаНДС, 
					ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));
					
	ПараметрыРасчета = ПодготовитьПараметрыРасчета(ИмяТабличнойЧасти);					
					
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, СчетУчета", СтрокаЗагрузки.Номенклатура, СтрокаЗагрузки.СчетУчета));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
		
		// Расчет суммы
		Если ИмяТабличнойЧасти = "Услуги" Тогда 
			СтавкаНСП = ?(ДанныеУчетнойПолитики.ПлательщикНСП, 
							Объект.СтавкаНСПУслуги, 
							ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка"));
		Иначе 
			СтавкаНСП = ?(ДанныеУчетнойПолитики.ПлательщикНСП, 
						Объект.СтавкаНСП, 
						ПредопределенноеЗначение("Справочник.СтавкиНСП.ПустаяСсылка"));
		КонецЕсли;
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Дата", ДатаДокумента);
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Контрагент", Объект.Контрагент);
		СтруктураДанные.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНалоги", Объект.СуммаВключаетНалоги);
		СтруктураДанные.Вставить("СтавкаНДС", СтавкаНДС);
		СтруктураДанные.Вставить("СтавкаНСП", СтавкаНСП);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

		// Заполнение по данным номенклатуры
		// Цена переносится из подбора.
		СтрокаТабличнойЧасти.СчетДохода = СтруктураДанные.СчетДохода;
		СтрокаТабличнойЧасти.СчетСебестоимости = СтруктураДанные.СчетРасхода;
		СтрокаТабличнойЧасти.СтатьяДохода = СтруктураДанные.СтатьяДохода;
		СтрокаТабличнойЧасти.СтатьяРасхода = СтруктураДанные.СтатьяРасхода;
		
		// Расчет суммы
		Если Объект.СуммаВключаетНалоги Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		Иначе		
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		КонецЕсли;
			
		Если Объект.ВидСкидкиНаценки <> ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;	
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	КонецЦикла;
КонецПроцедуры // ПолучитьТоварыИзХранилища()

// Процедура получает список ОС из временного хранилища
//
&НаСервере
Процедура ПолучитьОСИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	МассивОсновныхСредств = Новый Массив;
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект.ОС.НайтиСтроки(Новый Структура("ОсновноеСредство", СтрокаЗагрузки.ОсновноеСредство));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Объект.ОС.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
		СтрокаТабличнойЧасти.СчетЗатрат = ПланыСчетов.Хозрасчетный.РасходыПоВыбытиюАктивов; // 9540
		СтрокаТабличнойЧасти.СчетДохода = ПланыСчетов.Хозрасчетный.ПрочиеДоходыОтНеоперационнойДеятельности; // 9190
		
		Если Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентОбщий") Тогда 
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
		КонецЕсли;	
			
		МассивОсновныхСредств.Добавить(СтрокаТабличнойЧасти.ОсновноеСредство);
	КонецЦикла;
	
	ДополнитьСтрокиНаСервере(МассивОсновныхСредств);
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// Процедура заполняет строки
//
// Параметры:
//  МассивОсновныхСредств  - Массив - массив ОС, по которым нужно заполнить строки, если не указано- заполняются все строки
//
&НаСервере
Процедура ДополнитьСтрокиНаСервере(МассивОсновныхСредств = Неопределено)
	Если МассивОсновныхСредств = Неопределено Тогда 
		МассивОсновныхСредств = Объект.ОС.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	КонецЕсли;		
	
	Если МассивОсновныхСредств.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;	
	
	УправлениеВнеоборотнымиАктивами.ЗаполнитьДанныеОсновныхСредствВТабличнойЧасти(Объект.Ссылка, ДатаДокумента, Объект.Организация, Объект.ОС, МассивОсновныхСредств);
КонецПроцедуры // ДополнитьСтрокиНаСервере()

// Получает набор данных с сервера для процедуры ОСПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеОСПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить(
		"ИнвентарныйНомер",
		СтруктураДанные.ОсновноеСредство.Код);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОСПриИзменении()

// Подготовка параметров для расчетов
//
// Параметры:
//	ИмяТабличнойЧасти - Строка - наименование табличной части
//	СчитатьОтДохода - Булево - признак того, что расчет необходимо делать от реквизита "Доход"
//
// Возвращаемое значение:
//	Структура - разделенные данные URI
//		*Период - Дата - дата документа
//		*Организация - СправочникСсылка.Организации - организация документа
//		*ПризнакСтраныЕАЭС - Булево - признак страны ЕАЭС или нет
//		*ПризнакСтраныИмпортЭкспорт - Булево - признак страны ИмпортЭкспорт или нет
//		*СуммаВключаетНалоги - Булево - сумма включает налоги или нет
//		*БезналичныйРасчет - Булево - признак безначличного расчета
//		*СчитатьОтДохода - Булево - признак того, что расчет необходимо делать от реквизита "Доход"
//		*ИмяТабличнойЧасти - Строка - наименование табличной части
//		*Точность - Булево - точность цены (количество знаков цены после запятой)
//		*СтавкаНДС - СправочникСсылка.СтавкиНДС - ставка НДС
//		*СтавкаНСП - СправочникСсылка.СтавкиНСП - ставка НСП
//
&НаСервере
Функция ПодготовитьПараметрыРасчета(ИмяТабличнойЧасти, СчитатьОтДохода = Ложь)

	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Период", 					ДатаДокумента);
	ПараметрыРасчета.Вставить("Организация", 				Объект.Организация);
	ПараметрыРасчета.Вставить("ПризнакСтраныЕАЭС", 			Ложь);
	ПараметрыРасчета.Вставить("ПризнакСтраныИмпортЭкспорт", Ложь);
	
	// СуммаВключаетНалоги - всегда ИСТИНА, потому что расчет налогов идет от "Всего", а "Всего" всегда с налогами.
	ПараметрыРасчета.Вставить("СуммаВключаетНалоги", 		Истина);
	
	ПараметрыРасчета.Вставить("БезналичныйРасчет", 			Объект.БезналичныйРасчет);
	ПараметрыРасчета.Вставить("СчитатьОтДохода", 			СчитатьОтДохода);
	ПараметрыРасчета.Вставить("ИмяТабличнойЧасти", 			ИмяТабличнойЧасти);
	ПараметрыРасчета.Вставить("Точность", 					?(Объект.ТочностьЦены = 0, 2, Объект.ТочностьЦены));
	ПараметрыРасчета.Вставить("СтавкаНДС", 					?(ДанныеУчетнойПолитики.ПлательщикНДС, 
																Объект.СтавкаНДС, Справочники.СтавкиНДС.ПустаяСсылка()));
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		ПараметрыРасчета.Вставить("СтавкаНСП", ?(ДанныеУчетнойПолитики.ПлательщикНСП, 
												Объект.СтавкаНСП, Справочники.СтавкиНСП.ПустаяСсылка()));
		
	ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда
		ПараметрыРасчета.Вставить("СтавкаНСП", ?(ДанныеУчетнойПолитики.ПлательщикНСП, 
												Объект.СтавкаНСПУслуги, Справочники.СтавкиНСП.ПустаяСсылка()));
		
	Иначе
		ПараметрыРасчета.Вставить("СтавкаНСП", ?(ДанныеУчетнойПолитики.ПлательщикНСП, 
												Справочники.СтавкиНСП.Прочее, Справочники.СтавкиНСП.ПустаяСсылка()));
	КонецЕсли;	
	
	Возврат ПараметрыРасчета;
КонецФункции

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаСервере
Процедура ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
    ТоварыДобавлены = Ложь;
	
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
        Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда 
            Продолжить;
        КонецЕсли;
        НоваяСтрокаТабличнойЧасти = Объект.Товары.Добавить();
        НоваяСтрокаТабличнойЧасти.Номенклатура 	= СтрокаТаблицы.Номенклатура;
        НоваяСтрокаТабличнойЧасти.Количество 	= СтрокаТаблицы.Количество;
		НоваяСтрокаТабличнойЧасти.Сумма 	 	= СтрокаТаблицы.Сумма;
		НоваяСтрокаТабличнойЧасти.СуммаНДС 	 	= СтрокаТаблицы.СуммаНДС;
		НоваяСтрокаТабличнойЧасти.СуммаНСП 	 	= СтрокаТаблицы.СуммаНСП;
		
		// Счета учета
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
		СтруктураДанные.Вставить("Дата", ДатаДокумента);
		СтруктураДанные.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);

		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		НоваяСтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		НоваяСтрокаТабличнойЧасти.СчетУчета 	= СтруктураДанные.СчетУчета;
		НоваяСтрокаТабличнойЧасти.СчетДохода = СтруктураДанные.СчетДохода;
		НоваяСтрокаТабличнойЧасти.СчетСебестоимости = СтруктураДанные.СчетРасхода;
		НоваяСтрокаТабличнойЧасти.СтатьяДохода = СтруктураДанные.СтатьяДохода;
		НоваяСтрокаТабличнойЧасти.СтатьяРасхода = СтруктураДанные.СтатьяРасхода;
		
		ТоварыДобавлены = Истина;
    КонецЦикла;
	
	Если ТоварыДобавлены Тогда
        Модифицированность = Истина;
    КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// ПодключаемоеОборудование

// Процедура - Получены штрихкоды
//
// Параметры:
//  ДанныеШтрихкодов	 - Структура/Массив - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов, ИмяТабличнойЧасти) Экспорт
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов, ИмяТабличнойЧасти);
	
	// Неизвестные штрихкоды.
	Если НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды.Количество() > 0 Тогда
		Для Каждого СтруктураДанные Из НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Данные по штрихкоду не найдены: %1'"), СтруктураДанные.Штрихкод);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	// Штрихкоды некорректного типа.
	ИначеЕсли НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа.Количество() > 0 Тогда 
		Для Каждого СтруктураДанные Из НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Найденная по штрихкоду %1 номенклатура: ""%2"", не подходит для этой табличной части'"),
				СтруктураДанные.ТекШтрихкод, СтруктураДанные.Номенклатура);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоШтрихкоду(ТекШтрихкод)
	
	Номенклатура = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьНоменклатуруПоШтрихкоду(ТекШтрихкод);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", Номенклатура);
	СтруктураДанные.Вставить("ТипНоменклатурыУслуга", ?(ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура"), Номенклатура.Услуга, Ложь));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПоШтрихкоду()

// Функция - Заполнить по данным штрихкодов
//
// Параметры:
//  ДанныеШтрихкодов		 - 	 - Структура/Массив	 - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
// 
// Возвращаемое значение:
//  Структура - Массивы неизвестных штрих кодов
//
&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов, ИмяТабличнойЧасти) 
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	Для каждого ТекШтрихкод Из МассивШтрихкодов Цикл
		СтруктураДанные = ПолучитьДанныеПоШтрихкоду(ТекШтрихкод);
		
		Если НЕ ЗначениеЗаполнено(СтруктураДанные.Номенклатура) Тогда 
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли ИмяТабличнойЧасти = "Товары"
			И СтруктураДанные.ТипНоменклатурыУслуга Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("ТекШтрихкод, Номенклатура", ТекШтрихкод, СтруктураДанные.Номенклатура));
		ИначеЕсли ИмяТабличнойЧасти = "Услуги"
			И НЕ СтруктураДанные.ТипНоменклатурыУслуга Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("ТекШтрихкод, Номенклатура", ТекШтрихкод, СтруктураДанные.Номенклатура));
		Иначе 
			СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
			СтрокаТабличнойЧасти.Номенклатура = СтруктураДанные.Номенклатура;
			СтрокаТабличнойЧасти.Количество = ТекШтрихкод.Количество;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",
		НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);

КонецФункции // ЗаполнитьПоДаннымШтрихкодов()
// Конец ПодключаемоеОборудование

&НаСервере
Функция ТребуетсяНастройкаАвторизацияИнтернетПоддержки()
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		Возврат Не МодульИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ПриПодключенииИнтернетПоддержки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодключенияИнтернетПоддержки", ЭтотОбъект, ДополнительныеПараметры);
		МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияИнтернетПоддержки(Результат, ДополнительныеПараметры) Экспорт
	Если Не (ТипЗнч(Результат) = Тип("Структура")
		И ЗначениеЗаполнено(Результат.Логин)
		И ЗначениеЗаполнено(Результат.Пароль)) Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьСохранение();	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеЗаявленияВЭлектронномФормате

&НаКлиенте
Процедура ПродолжитьСохранение()
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Укажите путь для сохранения файла'");
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ДиалогОткрытияФайлаЗавершение", ЭтотОбъект);
	ДиалогОткрытияФайла.Показать(Оповещение);

КонецПроцедуры // ПродолжитьСохранение()

&НаКлиенте
Процедура ДиалогОткрытияФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() > 0 Тогда
		Попытка
			СтруктураДанных = ФормированиеФайлаXML();
			
			Если СтруктураДанных = Неопределено Тогда
				Возврат;	
			КонецЕсли;	
			
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось завершить формирование файла.
				|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;	
		
		// Формирование имени файла.
		КаталогФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВыбранныеФайлы[0]);
		ИмяФайла = СтруктураДанных.ИмяФайла;
		ПолноеИмяФайла = КаталогФайла + ИмяФайла;
		
		// Сохранение файла.
		Двоичное = ПолучитьИзВременногоХранилища(СтруктураДанных.АдресВременногоХранилища);
		Двоичное.Записать(ПолноеИмяФайла);	
		
		ТекстОповещения = НСтр("ru = 'Файл успешно сформирован'");
		ТекстПояснения = ИмяФайла;
		ПоказатьОповещениеПользователя(
			ТекстОповещения, 
			Новый ОписаниеОповещения("ОткрытьПроводник", ЭтотОбъект, Новый Структура("ПолноеИмяФайла", ПолноеИмяФайла)), 
			ТекстПояснения, 
			БиблиотекаКартинок.Информация32);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция СоздатьОбъектXDTO(ТипОбъекта)
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.sample-package3.org", ТипОбъекта));
	
КонецФункции // СоздатьОбъектXDTO()

// Процедура создания XML файла
//
&НаСервере
Функция ФормированиеФайлаXML()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИмяФайла", "");
	СтруктураДанных.Вставить("АдресВременногоХранилища", "");
			
	Дата = Формат(Объект.Дата, "ДФ=yyyy-MM-dd");
	
	ШаблонИмениФайла = СтрШаблон(НСтр("ru = 'Реализация №%1 от %2.'"), Объект.Номер, Дата);
	ИмяФайла = ШаблонИмениФайла + ".xml";
	
	// Массив для описания ошибок и если ошибки есть то отмена создания XML файла.
	МассивОшибок = Новый Массив();
	
	ОбъектXDTO = СоздатьОбъектXDTO("receipts");

	Если Объект.Товары.Количество() > 0 Тогда
		ОбъектXDTOreceipt = СоздатьОбъектXDTO("receipt");
		
		КонтрагентИНН = Объект.Контрагент.ИНН;
		
		ОбъектXDTOserialNumber = СоздатьОбъектXDTO("serialNumber"); // Номер бланка СФ
		ОбъектXDTOserialNumber.Text = Объект.НомерБланкаСФ;
		ОбъектXDTOreceipt.serialNumber.Добавить(ОбъектXDTOserialNumber);
		
		ОбъектXDTOreceiptTypeCode = СоздатьОбъектXDTO("receiptTypeCode"); // Признак услуг или товаров
		ОбъектXDTOreceiptTypeCode.Text = 10;
		ОбъектXDTOreceipt.receiptTypeCode.Добавить(ОбъектXDTOreceiptTypeCode);
		
		ОбъектXDTObankAccount = СоздатьОбъектXDTO("bankAccount"); // Банковский счет организации
		ОбъектXDTObankAccount.Text = "";
		ОбъектXDTOreceipt.bankAccount.Добавить(ОбъектXDTObankAccount);
		
		ОбъектXDTOcontractorPin = СоздатьОбъектXDTO("contractorPin"); // ИНН контрагента
		ОбъектXDTOcontractorPin.Text = КонтрагентИНН;
		ОбъектXDTOreceipt.contractorPin.Добавить(ОбъектXDTOcontractorPin);
		
		ОбъектXDTOcontractorDepartmentName = СоздатьОбъектXDTO("contractorDepartmentName"); // Подразделение контрагента
		ОбъектXDTOcontractorDepartmentName.Text = "";
		ОбъектXDTOreceipt.contractorDepartmentName.Добавить(ОбъектXDTOcontractorDepartmentName);
		
		ОбъектXDTOcontractorBankAccount = СоздатьОбъектXDTO("contractorBankAccount"); // Банковский счет контрагента
		ОбъектXDTOcontractorBankAccount.Text = "";
		ОбъектXDTOreceipt.contractorBankAccount.Добавить(ОбъектXDTOcontractorBankAccount);
		
		ОбъектXDTOdeliveryContractNumber = СоздатьОбъектXDTO("deliveryContractNumber"); // Номер договора
		ОбъектXDTOdeliveryContractNumber.Text = Объект.ДоговорКонтрагента.НомерДоговора;
		ОбъектXDTOreceipt.deliveryContractNumber.Добавить(ОбъектXDTOdeliveryContractNumber);
		
		ОбъектXDTOdeliveryContractDate = СоздатьОбъектXDTO("deliveryContractDate"); // Дата договора
		ОбъектXDTOdeliveryContractDate.Text = Формат(Объект.ДоговорКонтрагента.ДатаДоговора, "ДФ=yyyy-MM-dd");
		ОбъектXDTOreceipt.deliveryContractDate.Добавить(ОбъектXDTOdeliveryContractDate);
		
		ОбъектXDTOconsigneePin = СоздатьОбъектXDTO("consigneePin"); // ИНН контрагента (получателя)
		ОбъектXDTOconsigneePin.Text = КонтрагентИНН;
		ОбъектXDTOreceipt.consigneePin.Добавить(ОбъектXDTOconsigneePin);
		
		ОбъектXDTOreceipt.consigneeAddress.Добавить(Address("consigneeAddress")); // Данные адреса пункта приема товара

		ОбъектXDTOshipperPin = СоздатьОбъектXDTO("shipperPin"); // ИНН организации (отправителя)
		ОбъектXDTOshipperPin.Text = Объект.Организация.ИНН;
		ОбъектXDTOreceipt.shipperPin.Добавить(ОбъектXDTOshipperPin); 
		
		ОбъектXDTOreceipt.shipmentAddress.Добавить(Address("shipmentAddress")); // Данные адреса пункта отправки товара
		
		ОбъектXDTOgoodsDeliveryTypeCode = СоздатьОбъектXDTO("goodsDeliveryTypeCode"); // Код способа отправки
		ОбъектXDTOgoodsDeliveryTypeCode.Text = 20;
		ОбъектXDTOreceipt.goodsDeliveryTypeCode.Добавить(ОбъектXDTOgoodsDeliveryTypeCode);
		
		ОбъектXDTOpaymentTypeCode = СоздатьОбъектXDTO("paymentTypeCode"); // Код формы оплаты
		ОбъектXDTOpaymentTypeCode.Text = ?(Объект.БезналичныйРасчет, 20, 10);
		ОбъектXDTOreceipt.paymentTypeCode.Добавить(ОбъектXDTOpaymentTypeCode);
		
		ОбъектXDTOinvoiceDeliveryTypeCode = СоздатьОбъектXDTO("invoiceDeliveryTypeCode"); // Код поставки НДС
		ОбъектXDTOinvoiceDeliveryTypeCode.Text = Объект.ВидПоставкиНДС.Код;
		ОбъектXDTOreceipt.invoiceDeliveryTypeCode.Добавить(ОбъектXDTOinvoiceDeliveryTypeCode);
		
		ОбъектXDTOvatDeliveryTypeCode = СоздатьОбъектXDTO("vatDeliveryTypeCode"); // 
		ОбъектXDTOvatDeliveryTypeCode.Text = "";
		ОбъектXDTOreceipt.vatDeliveryTypeCode.Добавить(ОбъектXDTOvatDeliveryTypeCode);
		
		ОбъектXDTOcurrencyCode = СоздатьОбъектXDTO("currencyCode"); // Код валюты
		ОбъектXDTOcurrencyCode.Text = Объект.ВалютаДокумента.Код;
		ОбъектXDTOreceipt.currencyCode.Добавить(ОбъектXDTOcurrencyCode);
		
		ОбъектXDTOexchangeRate = СоздатьОбъектXDTO("exchangeRate"); // Курс
		ОбъектXDTOexchangeRate.Text = Объект.Курс;
		ОбъектXDTOreceipt.exchangeRate.Добавить(ОбъектXDTOexchangeRate);
		
		ОбъектXDTOcontractorCitizenshipCode = СоздатьОбъектXDTO("contractorCitizenshipCode"); // Код страны
		ОбъектXDTOcontractorCitizenshipCode.Text = Объект.Контрагент.СтранаРезидентства.Код;
		ОбъектXDTOreceipt.contractorCitizenshipCode.Добавить(ОбъектXDTOcontractorCitizenshipCode);
		
		ОбъектXDTOnote = СоздатьОбъектXDTO("note"); // Комментарий
		ОбъектXDTOnote.Text = Объект.Комментарий;
		ОбъектXDTOreceipt.note.Добавить(ОбъектXDTOnote);
		
		ОбъектXDTOreceipt.goods.Добавить(goods("Товары")); // Запись данных о товарах
		
		ОбъектXDTO.receipt.Добавить(ОбъектXDTOreceipt);
	КонецЕсли;
	
	Если Объект.Услуги.Количество() > 0 Тогда
		ОбъектXDTOreceipt = СоздатьОбъектXDTO("receipt");
		
		КонтрагентИНН = Объект.Контрагент.ИНН;
		
		ОбъектXDTOserialNumber = СоздатьОбъектXDTO("serialNumber"); // Номер бланка СФ
		ОбъектXDTOserialNumber.Text = Объект.НомерБланкаСФ;
		ОбъектXDTOreceipt.serialNumber.Добавить(ОбъектXDTOserialNumber);
		
		ОбъектXDTOreceiptTypeCode = СоздатьОбъектXDTO("receiptTypeCode"); // Признак услуг или товаров
		ОбъектXDTOreceiptTypeCode.Text = 20;
		ОбъектXDTOreceipt.receiptTypeCode.Добавить(ОбъектXDTOreceiptTypeCode);
		
		ОбъектXDTObankAccount = СоздатьОбъектXDTO("bankAccount"); // Банковский счет организации
		ОбъектXDTObankAccount.Text = "";
		ОбъектXDTOreceipt.bankAccount.Добавить(ОбъектXDTObankAccount);
		
		ОбъектXDTOcontractorPin = СоздатьОбъектXDTO("contractorPin"); // ИНН контрагента
		ОбъектXDTOcontractorPin.Text = КонтрагентИНН;
		ОбъектXDTOreceipt.contractorPin.Добавить(ОбъектXDTOcontractorPin);
		
		ОбъектXDTOcontractorDepartmentName = СоздатьОбъектXDTO("contractorDepartmentName"); // Подразделение контрагента
		ОбъектXDTOcontractorDepartmentName.Text = "";
		ОбъектXDTOreceipt.contractorDepartmentName.Добавить(ОбъектXDTOcontractorDepartmentName);
		
		ОбъектXDTOcontractorBankAccount = СоздатьОбъектXDTO("contractorBankAccount"); // Банковский счет контрагента
		ОбъектXDTOcontractorBankAccount.Text = "";
		ОбъектXDTOreceipt.contractorBankAccount.Добавить(ОбъектXDTOcontractorBankAccount);
		
		ОбъектXDTOdeliveryContractNumber = СоздатьОбъектXDTO("deliveryContractNumber"); // Номер договора
		ОбъектXDTOdeliveryContractNumber.Text = Объект.ДоговорКонтрагента.НомерДоговора;
		ОбъектXDTOreceipt.deliveryContractNumber.Добавить(ОбъектXDTOdeliveryContractNumber);
		
		ОбъектXDTOdeliveryContractDate = СоздатьОбъектXDTO("deliveryContractDate"); // Дата договора
		ОбъектXDTOdeliveryContractDate.Text = Формат(Объект.ДоговорКонтрагента.ДатаДоговора, "ДФ=yyyy-MM-dd");
		ОбъектXDTOreceipt.deliveryContractDate.Добавить(ОбъектXDTOdeliveryContractDate);
		
		ОбъектXDTOconsigneePin = СоздатьОбъектXDTO("consigneePin"); // ИНН контрагента (получателя)
		ОбъектXDTOconsigneePin.Text = КонтрагентИНН;
		ОбъектXDTOreceipt.consigneePin.Добавить(ОбъектXDTOconsigneePin);
		
		ОбъектXDTOreceipt.consigneeAddress.Добавить(Address("consigneeAddress")); // Данные адреса пункта приема товара

		ОбъектXDTOshipperPin = СоздатьОбъектXDTO("shipperPin"); // ИНН организации (отправителя)
		ОбъектXDTOshipperPin.Text = Объект.Организация.ИНН;
		ОбъектXDTOreceipt.shipperPin.Добавить(ОбъектXDTOshipperPin); 
		
		ОбъектXDTOreceipt.shipmentAddress.Добавить(Address("shipmentAddress")); // Данные адреса пункта отправки товара
		
		ОбъектXDTOgoodsDeliveryTypeCode = СоздатьОбъектXDTO("goodsDeliveryTypeCode"); // Код способа отправки
		ОбъектXDTOgoodsDeliveryTypeCode.Text = 20;
		ОбъектXDTOreceipt.goodsDeliveryTypeCode.Добавить(ОбъектXDTOgoodsDeliveryTypeCode);
		
		ОбъектXDTOpaymentTypeCode = СоздатьОбъектXDTO("paymentTypeCode"); // Код формы оплаты
		ОбъектXDTOpaymentTypeCode.Text = ?(Объект.БезналичныйРасчет, 20, 10);
		ОбъектXDTOreceipt.paymentTypeCode.Добавить(ОбъектXDTOpaymentTypeCode);
		
		ОбъектXDTOinvoiceDeliveryTypeCode = СоздатьОбъектXDTO("invoiceDeliveryTypeCode"); // Код поставки НДС
		ОбъектXDTOinvoiceDeliveryTypeCode.Text = Объект.ВидПоставкиНДС.Код;
		ОбъектXDTOreceipt.invoiceDeliveryTypeCode.Добавить(ОбъектXDTOinvoiceDeliveryTypeCode);
		
		ОбъектXDTOvatDeliveryTypeCode = СоздатьОбъектXDTO("vatDeliveryTypeCode"); // 
		ОбъектXDTOvatDeliveryTypeCode.Text = "";
		ОбъектXDTOreceipt.vatDeliveryTypeCode.Добавить(ОбъектXDTOvatDeliveryTypeCode);
		
		ОбъектXDTOcurrencyCode = СоздатьОбъектXDTO("currencyCode"); // Код валюты
		ОбъектXDTOcurrencyCode.Text = Объект.ВалютаДокумента.Код;
		ОбъектXDTOreceipt.currencyCode.Добавить(ОбъектXDTOcurrencyCode);
		
		ОбъектXDTOexchangeRate = СоздатьОбъектXDTO("exchangeRate"); // Курс
		ОбъектXDTOexchangeRate.Text = Объект.Курс;
		ОбъектXDTOreceipt.exchangeRate.Добавить(ОбъектXDTOexchangeRate);
		
		ОбъектXDTOcontractorCitizenshipCode = СоздатьОбъектXDTO("contractorCitizenshipCode"); // Код страны
		ОбъектXDTOcontractorCitizenshipCode.Text = Объект.Контрагент.СтранаРезидентства.Код;
		ОбъектXDTOreceipt.contractorCitizenshipCode.Добавить(ОбъектXDTOcontractorCitizenshipCode);
		
		ОбъектXDTOnote = СоздатьОбъектXDTO("note");
		ОбъектXDTOnote.Text = Объект.Комментарий;
		ОбъектXDTOreceipt.note.Добавить(ОбъектXDTOnote);
		
		ОбъектXDTOreceipt.goods.Добавить(goods("Услуги"));
		
		ОбъектXDTO.receipt.Добавить(ОбъектXDTOreceipt);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.НомерБланкаСФ) Тогда
		МассивОшибок.Добавить(НСтр("ru = 'Не указан номер бланка счет-фактуры.'"));
	КонецЕсли;	
	
	
	
	
	
	
	
	
	
	
		
	// Если есть ошибки файл не создается.
	Если МассивОшибок.Количество() > 0 Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Файл XML не сформирован по следующим причинам:'"));
		
		Для Каждого СтрокаМассива Из МассивОшибок Цикл
			ОбщегоНазначения.СообщитьПользователю(СтрокаМассива);			
		КонецЦикла;	
		
		Возврат Неопределено;
		
	Иначе
		// Создание файла.
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		ЗаписьXML = Новый ЗаписьXML;
		ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь);	
		ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, ПараметрыЗаписиXML);
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
		ЗаписьXML.Закрыть();
		
		// Удаление лишнего текста из xml файла
		ТекстДокумент = Новый ТекстовыйДокумент;
		ТекстДокумент.Прочитать(ИмяВременногоФайла);
		ТекстФайла = ТекстДокумент.ПолучитьТекст();
		ТекстФайла = СтрЗаменить(
			ТекстФайла,
			" xmlns=""http://www.sample-package3.org"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""",
			"");
		ТекстДокумент.УстановитьТекст(ТекстФайла);	
		ТекстДокумент.Записать(ИмяВременногоФайла);	
		
		Двоичное = Новый ДвоичныеДанные(ИмяВременногоФайла);
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Двоичное, УникальныйИдентификатор);
		
		// Удаление временного файла
		ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
		
		СтруктураДанных.ИмяФайла = ИмяФайла;
		СтруктураДанных.АдресВременногоХранилища = АдресВременногоХранилища;
		
		Возврат СтруктураДанных;
	КонецЕсли;
КонецФункции // ФормированиеФайла()

&НаСервере
Функция Address(НаименованиеОбъекта)

	ОбъектXDTO = СоздатьОбъектXDTO(НаименованиеОбъекта); // адрес пункта приема/отправки товара
	
	ОбъектXDTOateCode = СоздатьОбъектXDTO("ateCode"); // код местности по базе darek.kg
	ОбъектXDTOateCode.Text = "";
	ОбъектXDTO.ateCode.Добавить(ОбъектXDTOateCode);
	
	ОбъектXDTOstreetCode = СоздатьОбъектXDTO("streetCode"); // код улицы по базе darek.kg
	ОбъектXDTOstreetCode.Text = "";
	ОбъектXDTO.streetCode.Добавить(ОбъектXDTOstreetCode);
	
	ОбъектXDTOhouseNumber = СоздатьОбъектXDTO("houseNumber"); // номер дома
	ОбъектXDTOhouseNumber.Text = "";
	ОбъектXDTO.houseNumber.Добавить(ОбъектXDTOhouseNumber);
	
	ОбъектXDTOapartmentNumber = СоздатьОбъектXDTO("apartmentNumber"); // номер квартиры
	ОбъектXDTOapartmentNumber.Text = "";
	ОбъектXDTO.apartmentNumber.Добавить(ОбъектXDTOapartmentNumber);
	
	Возврат ОбъектXDTO;	
КонецФункции // Address()

&НаСервере
Функция goods(ИмяТабличнойЧасти)

	ОбъектXDTOgoods = СоздатьОбъектXDTO("goods");
	
	КодСтавкиНДС = ?(Объект.СтавкаНДС = Справочники.СтавкиНДС.Стандарт, 60, 30);
	
	КодСтавкиНСП = "";
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		Если Объект.СтавкаНСП = Справочники.СтавкиНСП.Прочее Тогда
			КодСтавкиНСП = 80;
			
		ИначеЕсли Объект.СтавкаНСП = Справочники.СтавкиНСП.СотоваяСвязь Тогда
			КодСтавкиНСП = 40;
			
		ИначеЕсли Объект.СтавкаНСП = Справочники.СтавкиНСП.Торговля Тогда
			КодСтавкиНСП = 10;
			
		ИначеЕсли Объект.СтавкаНСП = Справочники.СтавкиНСП.УслугиБанка Тогда
			КодСтавкиНСП = 20;
		КонецЕсли;
		
	Иначе	
		Если Объект.СтавкаНСПУслуги = Справочники.СтавкиНСП.Прочее Тогда
			КодСтавкиНСП = 80;
			
		ИначеЕсли Объект.СтавкаНСПУслуги = Справочники.СтавкиНСП.СотоваяСвязь Тогда
			КодСтавкиНСП = 40;
			
		ИначеЕсли Объект.СтавкаНСПУслуги = Справочники.СтавкиНСП.Торговля Тогда
			КодСтавкиНСП = 10;
			
		ИначеЕсли Объект.СтавкаНСПУслуги = Справочники.СтавкиНСП.УслугиБанка Тогда
			КодСтавкиНСП = 20;
		КонецЕсли;	
	КонецЕсли;	
	
	Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
		
		ОбъектXDTOgood = СоздатьОбъектXDTO("good");
		
		ОбъектXDTOvatCode = СоздатьОбъектXDTO("vatCode"); // Код ставки НДС
		ОбъектXDTOvatCode.Text = КодСтавкиНДС;
		ОбъектXDTOgood.vatCode.Добавить(ОбъектXDTOvatCode);
		
		ОбъектXDTOstCode = СоздатьОбъектXDTO("stCode"); // Код ставки НСП
		ОбъектXDTOstCode.Text = КодСтавкиНСП;
		ОбъектXDTOgood.stCode.Добавить(ОбъектXDTOstCode);
		
		ОбъектXDTOgoodsName = СоздатьОбъектXDTO("goodsName"); // Наименование товара/услуги
		ОбъектXDTOgoodsName.Text = СтрокаТабличнойЧасти.Номенклатура.НаименованиеПолное;
		ОбъектXDTOgood.goodsName.Добавить(ОбъектXDTOgoodsName);
		
		ОбъектXDTObaseCount = СоздатьОбъектXDTO("baseCount"); // Количество
		ОбъектXDTObaseCount.Text = СтрокаТабличнойЧасти.Количество;
		ОбъектXDTOgood.baseCount.Добавить(ОбъектXDTObaseCount);
		
		ОбъектXDTOprice = СоздатьОбъектXDTO("price"); // Цена
		ОбъектXDTOprice.Text = СтрокаТабличнойЧасти.Цена;
		ОбъектXDTOgood.price.Добавить(ОбъектXDTOprice);
		
		ОбъектXDTOgoods.good.Добавить(ОбъектXDTOgood);
	КонецЦикла;	
	
	Возврат ОбъектXDTOgoods;	
КонецФункции // goods()

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура ТоварыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВставитьСтроки(Команда)
	
	ВставитьСтроки("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКопироватьСтроки(Команда)
	
	КопироватьСтроки("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиВставитьСтроки(Команда)
	
	ВставитьСтроки("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
