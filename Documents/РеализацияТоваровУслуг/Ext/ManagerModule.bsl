#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПроцедурыПроведенияДокумента

// Формирует таблицу значений, содержащую данные для проведения по регистру бухгалтерии Хозрасчетный.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаХозрасчетный(ДокументСсылка,СтруктураДополнительныеСвойства, Отказ)
	
	// Подготовка данных	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Ссылка КАК Регистратор,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	&Содержание КАК Содержание,
		|	ВременнаяТаблицаШапка.Склад КАК Склад
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимСписка КАК СинонимСписка,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаШапка.Склад КАК Склад,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
		|	0 КАК Себестоимость,
		|	ВременнаяТаблицаТовары.Количество КАК Количество,
		|	ВременнаяТаблицаТовары.СчетСебестоимости КАК КорСчетСписания,
		|	ВременнаяТаблицаТовары.СтатьяРасхода КАК КорСубконто1,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимСписка КАК СинонимСписка,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаШапка.Склад КАК Склад,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
		|	0 КАК Себестоимость,
		|	ВременнаяТаблицаТовары.Количество КАК Количество,
		|	ВременнаяТаблицаТовары.СчетСебестоимости КАК КорСчетСписания,
		|	ВременнаяТаблицаТовары.СтатьяРасхода КАК КорСубконто1,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВременнаяТаблицаТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Запрос.УстановитьПараметр("Содержание", НСтр("ru = 'Списание товаров'")); 
	Запрос.УстановитьПараметр("СинонимСписка", НСтр("ru = 'Товары'"));
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизиты = МассивРезультатов[0].Выгрузить();
	ТаблицаТовары = МассивРезультатов[1].Выгрузить();
	ТаблицаМБП = МассивРезультатов[2].Выгрузить();
	
	ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(ТаблицаТовары, ТаблицаРеквизиты, Отказ);
	ТаблицаСписанныеМБП = УчетМБП.ПодготовитьТаблицуСписанныеМБП(ТаблицаМБП, ТаблицаРеквизиты, Отказ);
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСписанныеТовары", ТаблицаСписанныеТовары);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСписанныеМБП", ТаблицаСписанныеМБП);

	// Подготовка данных для ОС.	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаОС.СчетЗатрат КАК СчетЗатрат,
		|	ВременнаяТаблицаОС.СтатьяЗатрат КАК СтатьяЗатрат
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС";
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаОС = МассивРезультатов[0].Выгрузить();
	
	ТаблицаСписанныеОС = УправлениеВнеоборотнымиАктивами.ПодготовитьТаблицуСписанныеОС(ТаблицаОС, СтруктураДополнительныеСвойства);
	ТаблицаРаспределениеПоСпособуОтражения = УправлениеВнеоборотнымиАктивами.ПодготовитьТаблицуРаспределениеПоСпособуОтраженияРасходовПоАмортизации(ТаблицаОС, СтруктураДополнительныеСвойства, Неопределено);
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСписанныеОС", ТаблицаСписанныеОС);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРаспределениеПоСпособуОтражения", ТаблицаРаспределениеПоСпособуОтражения);
	
	// 1. Доход от реализации товаров
	// 2. НДС товары
	// 3. НСП товары
	// 4. Скидки товары
	
	// 5. Доход от реализации услуг
	// 6. НДС услуги
	// 7. НСП услуги
	// 8. Скидки услуги
	
	// 9. Доход от реализации ОС
	// 10. НДС ОС
	// 11. НСП ОС
	// 12. Скидки ОС
	
	// ОС 
	// 13. Распределение расходов по амортизации за месяц
	// 14. Списание амортизации
	// 15. Списание остаточной стоимости
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов КАК СчетДт,
		|	ВременнаяТаблицаТовары.СчетДохода КАК СчетКт,
		|	ВременнаяТаблицаШапка.Контрагент КАК СубконтоДт1,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ВременнаяТаблицаТовары.СтатьяДохода КАК СубконтоКт1,
		|	ВременнаяТаблицаТовары.НоменклатурнаяГруппа КАК СубконтоКт2,
		|	ВременнаяТаблицаТовары.Номенклатура КАК СубконтоКт3,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.СуммаСкидки <> 0
		|			ТОГДА ВЫРАЗИТЬ(ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаНСПВВалютеРеглУчета + ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета * 100 / (100 + ЕСТЬNULL(ВременнаяТаблицаСтавкиНДС.ЗначениеСтавки, 0) + ЕСТЬNULL(ВременнаяТаблицаСтавкиНСП.ЗначениеСтавки, 0)) КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ВременнаяТаблицаТовары.СуммаДоходаВВалютеРеглУчета
		|	КОНЕЦ КАК Сумма,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДт,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаКт,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.СуммаСкидки <> 0
		|			ТОГДА ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Всего - ВременнаяТаблицаТовары.СуммаСкидки - ВременнаяТаблицаТовары.СуммаНДС - ВременнаяТаблицаТовары.СуммаНСП + ВременнаяТаблицаТовары.СуммаСкидки * 100 / (100 + ЕСТЬNULL(ВременнаяТаблицаСтавкиНДС.ЗначениеСтавки, 0) + ЕСТЬNULL(ВременнаяТаблицаСтавкиНСП.ЗначениеСтавки, 0)) КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ВременнаяТаблицаТовары.СуммаДохода
		|	КОНЕЦ КАК ВалютнаяСуммаДт,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.СуммаСкидки <> 0
		|			ТОГДА ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Всего - ВременнаяТаблицаТовары.СуммаСкидки - ВременнаяТаблицаТовары.СуммаНДС - ВременнаяТаблицаТовары.СуммаНСП + ВременнаяТаблицаТовары.СуммаСкидки * 100 / (100 + ЕСТЬNULL(ВременнаяТаблицаСтавкиНДС.ЗначениеСтавки, 0) + ЕСТЬNULL(ВременнаяТаблицаСтавкиНСП.ЗначениеСтавки, 0)) КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ВременнаяТаблицаТовары.СуммаДохода
		|	КОНЕЦ КАК ВалютнаяСуммаКт,
		|	ВЫРАЗИТЬ(&СодержаниеТоварыДоход КАК СТРОКА(150)) КАК Содержание,
		|	0 КАК КоличествоДт,
		|	0 КАК КоличествоКт,
		|	ЛОЖЬ КАК КорректироватьНУ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтавкиНДС КАК ВременнаяТаблицаСтавкиНДС
		|		ПО ВременнаяТаблицаШапка.СтавкаНДС = ВременнаяТаблицаСтавкиНДС.СтавкаНДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтавкиНСП КАК ВременнаяТаблицаСтавкиНСП
		|		ПО ВременнаяТаблицаШапка.СтавкаНСП = ВременнаяТаблицаСтавкиНСП.СтавкаНСП
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов,
		|	ВременнаяТаблицаШапка.СчетУчетаНДС,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета,
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаТовары.СуммаНДС,
		|	ВременнаяТаблицаТовары.СуммаНДС,
		|	&СодержаниеТоварыНДС,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	&ПлательщикНДС
		|	И НЕ ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов,
		|	ВременнаяТаблицаШапка.СчетУчетаНСП,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаТовары.СуммаНСПВВалютеРеглУчета,
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаТовары.СуммаНСП,
		|	ВременнаяТаблицаТовары.СуммаНСП,
		|	&СодержаниеТоварыНСП,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.СуммаНСПВВалютеРеглУчета = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СчетУчетаСкидок,
		|	ВременнаяТаблицаШапка.СчетРасчетов,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета * 100 / (100 + ЕСТЬNULL(ВременнаяТаблицаСтавкиНДС.ЗначениеСтавки, 0) + ЕСТЬNULL(ВременнаяТаблицаСтавкиНСП.ЗначениеСтавки, 0)) КАК ЧИСЛО(15, 2)),
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.СуммаСкидки * 100 / (100 + ЕСТЬNULL(ВременнаяТаблицаСтавкиНДС.ЗначениеСтавки, 0) + ЕСТЬNULL(ВременнаяТаблицаСтавкиНСП.ЗначениеСтавки, 0)) КАК ЧИСЛО(15, 2)),
		|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.СуммаСкидки * 100 / (100 + ЕСТЬNULL(ВременнаяТаблицаСтавкиНДС.ЗначениеСтавки, 0) + ЕСТЬNULL(ВременнаяТаблицаСтавкиНСП.ЗначениеСтавки, 0)) КАК ЧИСЛО(15, 2)),
		|	&СодержаниеТоварыСкидка,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтавкиНДС КАК ВременнаяТаблицаСтавкиНДС
		|		ПО ВременнаяТаблицаШапка.СтавкаНДС = ВременнаяТаблицаСтавкиНДС.СтавкаНДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтавкиНСП КАК ВременнаяТаблицаСтавкиНСП
		|		ПО ВременнаяТаблицаШапка.СтавкаНСП = ВременнаяТаблицаСтавкиНСП.СтавкаНСП
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	5,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов,
		|	ВременнаяТаблицаУслуги.СчетДохода,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаУслуги.СтатьяДохода,
		|	ВременнаяТаблицаУслуги.НоменклатурнаяГруппа,
		|	ВременнаяТаблицаУслуги.Номенклатура,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаУслуги.СуммаСкидки <> 0
		|			ТОГДА ВЫРАЗИТЬ(ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета + ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета * 100 / (100 + ЕСТЬNULL(ВременнаяТаблицаСтавкиНДС.ЗначениеСтавки, 0) + ЕСТЬNULL(ВременнаяТаблицаСтавкиНСП.ЗначениеСтавки, 0)) КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ВременнаяТаблицаУслуги.СуммаДоходаВВалютеРеглУчета
		|	КОНЕЦ,
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаУслуги.СуммаСкидки <> 0
		|			ТОГДА ВЫРАЗИТЬ(ВременнаяТаблицаУслуги.Всего - ВременнаяТаблицаУслуги.СуммаСкидки - ВременнаяТаблицаУслуги.СуммаНДС - ВременнаяТаблицаУслуги.СуммаНСП + ВременнаяТаблицаУслуги.СуммаСкидки * 100 / (100 + ЕСТЬNULL(ВременнаяТаблицаСтавкиНДС.ЗначениеСтавки, 0) + ЕСТЬNULL(ВременнаяТаблицаСтавкиНСП.ЗначениеСтавки, 0)) КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ВременнаяТаблицаУслуги.СуммаДохода
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаУслуги.СуммаСкидки <> 0
		|			ТОГДА ВЫРАЗИТЬ(ВременнаяТаблицаУслуги.Всего - ВременнаяТаблицаУслуги.СуммаСкидки - ВременнаяТаблицаУслуги.СуммаНДС - ВременнаяТаблицаУслуги.СуммаНСП + ВременнаяТаблицаУслуги.СуммаСкидки * 100 / (100 + ЕСТЬNULL(ВременнаяТаблицаСтавкиНДС.ЗначениеСтавки, 0) + ЕСТЬNULL(ВременнаяТаблицаСтавкиНСП.ЗначениеСтавки, 0)) КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ВременнаяТаблицаУслуги.СуммаДохода
		|	КОНЕЦ,
		|	&СодержаниеУслугиДоход,
		|	0,
		|	0,
		|	ЛОЖЬ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтавкиНДС КАК ВременнаяТаблицаСтавкиНДС
		|		ПО ВременнаяТаблицаШапка.СтавкаНДС = ВременнаяТаблицаСтавкиНДС.СтавкаНДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтавкиНСП КАК ВременнаяТаблицаСтавкиНСП
		|		ПО ВременнаяТаблицаШапка.СтавкаНСПУслуги = ВременнаяТаблицаСтавкиНСП.СтавкаНСП
		|ГДЕ
		|	НЕ ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	6,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов,
		|	ВременнаяТаблицаШапка.СчетУчетаНДС,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета,
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаУслуги.СуммаНДС,
		|	ВременнаяТаблицаУслуги.СуммаНДС,
		|	&СодержаниеУслугиНДС,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО (ИСТИНА)
		|ГДЕ
		|	&ПлательщикНДС
		|	И НЕ ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	7,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов,
		|	ВременнаяТаблицаШапка.СчетУчетаНСП,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета,
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаУслуги.СуммаНСП,
		|	ВременнаяТаблицаУслуги.СуммаНСП,
		|	&СодержаниеУслугиНСП,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	8,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СчетУчетаСкидок,
		|	ВременнаяТаблицаШапка.СчетРасчетов,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета * 100 / (100 + ЕСТЬNULL(ВременнаяТаблицаСтавкиНДС.ЗначениеСтавки, 0) + ЕСТЬNULL(ВременнаяТаблицаСтавкиНСП.ЗначениеСтавки, 0)) КАК ЧИСЛО(15, 2)),
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаУслуги.СуммаСкидки * 100 / (100 + ЕСТЬNULL(ВременнаяТаблицаСтавкиНДС.ЗначениеСтавки, 0) + ЕСТЬNULL(ВременнаяТаблицаСтавкиНСП.ЗначениеСтавки, 0)) КАК ЧИСЛО(15, 2)),
		|	ВЫРАЗИТЬ(ВременнаяТаблицаУслуги.СуммаСкидки * 100 / (100 + ЕСТЬNULL(ВременнаяТаблицаСтавкиНДС.ЗначениеСтавки, 0) + ЕСТЬNULL(ВременнаяТаблицаСтавкиНСП.ЗначениеСтавки, 0)) КАК ЧИСЛО(15, 2)),
		|	&СодержаниеУслугиСкидка,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтавкиНДС КАК ВременнаяТаблицаСтавкиНДС
		|		ПО ВременнаяТаблицаШапка.СтавкаНДС = ВременнаяТаблицаСтавкиНДС.СтавкаНДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтавкиНСП КАК ВременнаяТаблицаСтавкиНСП
		|		ПО ВременнаяТаблицаШапка.СтавкаНСПУслуги = ВременнаяТаблицаСтавкиНСП.СтавкаНСП
		|ГДЕ
		|	НЕ ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	9,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов,
		|	ВременнаяТаблицаОС.СчетДохода,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаОС.СуммаСкидки <> 0
		|			ТОГДА ВЫРАЗИТЬ(ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНСПВВалютеРеглУчета + ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета * 100 / (100 + ЕСТЬNULL(ВременнаяТаблицаСтавкиНДС.ЗначениеСтавки, 0) + ЕСТЬNULL(ВременнаяТаблицаСтавкиНСП.ЗначениеСтавки, 0)) КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ВременнаяТаблицаОС.СуммаДоходаВВалютеРеглУчета
		|	КОНЕЦ,
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаОС.СуммаСкидки <> 0
		|			ТОГДА ВЫРАЗИТЬ(ВременнаяТаблицаОС.Всего - ВременнаяТаблицаОС.СуммаСкидки - ВременнаяТаблицаОС.СуммаНДС - ВременнаяТаблицаОС.СуммаНСП + ВременнаяТаблицаОС.СуммаСкидки * 100 / (100 + ЕСТЬNULL(ВременнаяТаблицаСтавкиНДС.ЗначениеСтавки, 0) + ЕСТЬNULL(ВременнаяТаблицаСтавкиНСП.ЗначениеСтавки, 0)) КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ВременнаяТаблицаОС.СуммаДохода
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаОС.СуммаСкидки <> 0
		|			ТОГДА ВЫРАЗИТЬ(ВременнаяТаблицаОС.Всего - ВременнаяТаблицаОС.СуммаСкидки - ВременнаяТаблицаОС.СуммаНДС - ВременнаяТаблицаОС.СуммаНСП + ВременнаяТаблицаОС.СуммаСкидки * 100 / (100 + ЕСТЬNULL(ВременнаяТаблицаСтавкиНДС.ЗначениеСтавки, 0) + ЕСТЬNULL(ВременнаяТаблицаСтавкиНСП.ЗначениеСтавки, 0)) КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ВременнаяТаблицаОС.СуммаДохода
		|	КОНЕЦ,
		|	&СодержаниеОСДоход,
		|	0,
		|	0,
		|	ИСТИНА
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтавкиНДС КАК ВременнаяТаблицаСтавкиНДС
		|		ПО ВременнаяТаблицаШапка.СтавкаНДС = ВременнаяТаблицаСтавкиНДС.СтавкаНДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтавкиНСП КАК ВременнаяТаблицаСтавкиНСП
		|		ПО ВременнаяТаблицаШапка.СтавкаНСПОС = ВременнаяТаблицаСтавкиНСП.СтавкаНСП
		|ГДЕ
		|	НЕ ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	10,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов,
		|	ВременнаяТаблицаШапка.СчетУчетаНДС,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета,
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаОС.СуммаНДС,
		|	ВременнаяТаблицаОС.СуммаНДС,
		|	&СодержаниеОСНДС,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ИСТИНА
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|ГДЕ
		|	&ПлательщикНДС
		|	И НЕ ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	11,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СчетРасчетов,
		|	ВременнаяТаблицаШапка.СчетУчетаНСП,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаОС.СуммаНСПВВалютеРеглУчета,
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаОС.СуммаНСП,
		|	ВременнаяТаблицаОС.СуммаНСП,
		|	&СодержаниеОСНСП,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ИСТИНА
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаОС.СуммаНСПВВалютеРеглУчета = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	12,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СчетУчетаСкидок,
		|	ВременнаяТаблицаШапка.СчетРасчетов,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета * 100 / (100 + ЕСТЬNULL(ВременнаяТаблицаСтавкиНДС.ЗначениеСтавки, 0) + ЕСТЬNULL(ВременнаяТаблицаСтавкиНСП.ЗначениеСтавки, 0)) КАК ЧИСЛО(15, 2)),
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВременнаяТаблицаШапка.ВалютаДокумента,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаОС.СуммаСкидки * 100 / (100 + ЕСТЬNULL(ВременнаяТаблицаСтавкиНДС.ЗначениеСтавки, 0) + ЕСТЬNULL(ВременнаяТаблицаСтавкиНСП.ЗначениеСтавки, 0)) КАК ЧИСЛО(15, 2)),
		|	ВЫРАЗИТЬ(ВременнаяТаблицаОС.СуммаСкидки * 100 / (100 + ЕСТЬNULL(ВременнаяТаблицаСтавкиНДС.ЗначениеСтавки, 0) + ЕСТЬNULL(ВременнаяТаблицаСтавкиНСП.ЗначениеСтавки, 0)) КАК ЧИСЛО(15, 2)),
		|	&СодержаниеОССкидка,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ИСТИНА
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтавкиНДС КАК ВременнаяТаблицаСтавкиНДС
		|		ПО ВременнаяТаблицаШапка.СтавкаНДС = ВременнаяТаблицаСтавкиНДС.СтавкаНДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтавкиНСП КАК ВременнаяТаблицаСтавкиНСП
		|		ПО ВременнаяТаблицаШапка.СтавкаНСПОС = ВременнаяТаблицаСтавкиНСП.СтавкаНСП
		|ГДЕ
		|	НЕ ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета = 0";
	Запрос.УстановитьПараметр("СодержаниеТоварыДоход", 	НСтр("ru = 'Доход от реализации товаров'")); 
	Запрос.УстановитьПараметр("СодержаниеТоварыНДС", 	НСтр("ru = 'НДС (товары)'")); 
	Запрос.УстановитьПараметр("СодержаниеТоварыНСП", 	НСтр("ru = 'НСП (товары)'")); 
	Запрос.УстановитьПараметр("СодержаниеТоварыСкидка", НСтр("ru = 'Скидка на товары'")); 
	
	Запрос.УстановитьПараметр("СодержаниеУслугиДоход", 	НСтр("ru = 'Доход от реализации услуг'")); 
	Запрос.УстановитьПараметр("СодержаниеУслугиНДС", 	НСтр("ru = 'НДС (услуги)'")); 
	Запрос.УстановитьПараметр("СодержаниеУслугиНСП", 	НСтр("ru = 'НСП (услуги)'")); 
	Запрос.УстановитьПараметр("СодержаниеУслугиСкидка", НСтр("ru = 'Скидка на услуги'")); 
	
	Запрос.УстановитьПараметр("СодержаниеОСДоход", 		НСтр("ru = 'Доход от реализации ОС'")); 
	Запрос.УстановитьПараметр("СодержаниеОСНДС", 		НСтр("ru = 'НДС (ОС)'")); 
	Запрос.УстановитьПараметр("СодержаниеОСНСП", 		НСтр("ru = 'НСП (ОС)'")); 
	Запрос.УстановитьПараметр("СодержаниеОССкидка", 	НСтр("ru = 'Скидка на ОС'")); 

	Запрос.УстановитьПараметр("ПлательщикНДС", СтруктураДополнительныеСвойства.УчетнаяПолитика.ПлательщикНДС);
	
	РезультатЗапроса = Запрос.Выполнить();	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", РезультатЗапроса.Выгрузить());	
		
КонецПроцедуры // СформироватьТаблицаХозрасчетный()

// Формирует таблицу значений, содержащую данные для проведения по регистру бухгалтерии Хозрасчетный.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажи(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	// 1. Товары
	// 2. Усуги
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.Ссылка КАК ДокументРеализации,
		|	ВременнаяТаблицаШапка.Склад КАК Склад,
		|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК Договор,
		|	ВременнаяТаблицаШапка.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаШапка.СтавкаНСП КАК СтавкаНСП,
		|	ВременнаяТаблицаШапка.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	СУММА(ВременнаяТаблицаТовары.Количество) КАК Количество,
		|	СУММА(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаНСПВВалютеРеглУчета КАК ЧИСЛО(15, 2))) КАК Сумма,
		|	СУММА(ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета) КАК СуммаНДС,
		|	СУММА(ВременнаяТаблицаТовары.СуммаНСПВВалютеРеглУчета) КАК СуммаНСП,
		|	СУММА(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета КАК ЧИСЛО(15, 2))) КАК СуммаСкидки,
		|	СУММА(ВЫБОР
		|			КОГДА ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета <> 0
		|				ТОГДА ВЫРАЗИТЬ(ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаНСПВВалютеРеглУчета + ВременнаяТаблицаТовары.СуммаСкидкиВВалютеРеглУчета * 100 / (100 + ЕСТЬNULL(ВременнаяТаблицаСтавкиНДС.ЗначениеСтавки, 0) + ЕСТЬNULL(ВременнаяТаблицаСтавкиНСП.ЗначениеСтавки, 0)) КАК ЧИСЛО(15, 2))
		|			ИНАЧЕ ВременнаяТаблицаТовары.СуммаДоходаВВалютеРеглУчета
		|		КОНЕЦ) КАК СуммаДохода,
		|	СУММА(0) КАК Себестоимость
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтавкиНДС КАК ВременнаяТаблицаСтавкиНДС
		|		ПО ВременнаяТаблицаШапка.СтавкаНДС = ВременнаяТаблицаСтавкиНДС.СтавкаНДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтавкиНСП КАК ВременнаяТаблицаСтавкиНСП
		|		ПО ВременнаяТаблицаШапка.СтавкаНСП = ВременнаяТаблицаСтавкиНСП.СтавкаНСП
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.Ссылка,
		|	ВременнаяТаблицаШапка.Склад,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	ВременнаяТаблицаШапка.СтавкаНДС,
		|	ВременнаяТаблицаШапка.СтавкаНСП,
		|	ВременнаяТаблицаШапка.БезналичныйРасчет,
		|	ВременнаяТаблицаТовары.Номенклатура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.Ссылка,
		|	ВременнаяТаблицаШапка.Склад,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	ВременнаяТаблицаШапка.СтавкаНДС,
		|	ВременнаяТаблицаШапка.СтавкаНСПУслуги,
		|	ВременнаяТаблицаШапка.БезналичныйРасчет,
		|	ВременнаяТаблицаУслуги.Номенклатура,
		|	СУММА(ВременнаяТаблицаУслуги.Количество),
		|	СУММА(ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета),
		|	СУММА(ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета),
		|	СУММА(ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета),
		|	СУММА(ВЫРАЗИТЬ(ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета КАК ЧИСЛО(15, 2))),
		|	СУММА(ВЫБОР
		|			КОГДА ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета <> 0
		|				ТОГДА ВЫРАЗИТЬ(ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета + ВременнаяТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета * 100 / (100 + ЕСТЬNULL(ВременнаяТаблицаСтавкиНДС.ЗначениеСтавки, 0) + ЕСТЬNULL(ВременнаяТаблицаСтавкиНСП.ЗначениеСтавки, 0)) КАК ЧИСЛО(15, 2))
		|			ИНАЧЕ ВременнаяТаблицаУслуги.СуммаДоходаВВалютеРеглУчета
		|		КОНЕЦ),
		|	СУММА(0)
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтавкиНДС КАК ВременнаяТаблицаСтавкиНДС
		|		ПО ВременнаяТаблицаШапка.СтавкаНДС = ВременнаяТаблицаСтавкиНДС.СтавкаНДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтавкиНСП КАК ВременнаяТаблицаСтавкиНСП
		|		ПО ВременнаяТаблицаШапка.СтавкаНСПУслуги = ВременнаяТаблицаСтавкиНСП.СтавкаНСП
		|ГДЕ
		|	НЕ ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.Ссылка,
		|	ВременнаяТаблицаШапка.Склад,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	ВременнаяТаблицаШапка.СтавкаНДС,
		|	ВременнаяТаблицаШапка.СтавкаНСПУслуги,
		|	ВременнаяТаблицаШапка.БезналичныйРасчет,
		|	ВременнаяТаблицаУслуги.Номенклатура";
	РезультатЗапроса = Запрос.Выполнить();	
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажи", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаРеализацияТоваров(ДокументСсылка, СтруктураДополнительныеСвойства) 

// Формирует таблицу значений, содержащую данные для проведения по регистру бухгалтерии Хозрасчетный.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажиОсновныхСредств(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.Ссылка КАК ДокументРеализации,
		|	ВременнаяТаблицаШапка.Склад КАК Склад,
		|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК Договор,
		|	ВременнаяТаблицаШапка.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаШапка.СтавкаНСП КАК СтавкаНСП,
		|	ВременнаяТаблицаШапка.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	СУММА(ВЫРАЗИТЬ(ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНСП КАК ЧИСЛО(15, 2))) КАК Сумма,
		|	СУММА(ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета) КАК СуммаНДС,
		|	СУММА(ВременнаяТаблицаОС.СуммаНСПВВалютеРеглУчета) КАК СуммаНСП,
		|	СУММА(ВЫРАЗИТЬ(ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета * 100 / (100 + ЕСТЬNULL(ВременнаяТаблицаСтавкиНДС.ЗначениеСтавки, 0) + ЕСТЬNULL(ВременнаяТаблицаСтавкиНСП.ЗначениеСтавки, 0)) КАК ЧИСЛО(15, 2))) КАК СуммаСкидки,
		|	СУММА(ВЫБОР
		|			КОГДА ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета <> 0
		|				ТОГДА ВЫРАЗИТЬ(ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНСПВВалютеРеглУчета + ВременнаяТаблицаОС.СуммаСкидкиВВалютеРеглУчета * 100 / (100 + ЕСТЬNULL(ВременнаяТаблицаСтавкиНДС.ЗначениеСтавки, 0) + ЕСТЬNULL(ВременнаяТаблицаСтавкиНСП.ЗначениеСтавки, 0)) КАК ЧИСЛО(15, 2))
		|			ИНАЧЕ ВременнаяТаблицаОС.СуммаДоходаВВалютеРеглУчета
		|		КОНЕЦ) КАК СуммаДохода,
		|	СУММА(0) КАК Себестоимость
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтавкиНДС КАК ВременнаяТаблицаСтавкиНДС
		|		ПО ВременнаяТаблицаШапка.СтавкаНДС = ВременнаяТаблицаСтавкиНДС.СтавкаНДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтавкиНСП КАК ВременнаяТаблицаСтавкиНСП
		|		ПО ВременнаяТаблицаШапка.СтавкаНСПОС = ВременнаяТаблицаСтавкиНСП.СтавкаНСП
		|ГДЕ
		|	НЕ ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.Ссылка,
		|	ВременнаяТаблицаШапка.Склад,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	ВременнаяТаблицаШапка.СтавкаНДС,
		|	ВременнаяТаблицаШапка.СтавкаНСП,
		|	ВременнаяТаблицаШапка.БезналичныйРасчет,
		|	ВременнаяТаблицаОС.ОсновноеСредство";
	РезультатЗапроса = Запрос.Выполнить();	
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиОсновныхСредств", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаРеализацияТоваров(ДокументСсылка, СтруктураДополнительныеСвойства) 

// Формирует таблицу значений, содержащую данные для проведения по регистру бухгалтерии Хозрасчетный.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаБланкиСчетовФактур(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СерияБланкаСФ,
		|	ВременнаяТаблицаШапка.НомерБланкаСФ,
		|	1 КАК Количество,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|ГДЕ
		|	НЕ ВременнаяТаблицаШапка.СерияБланкаСФ = """"
		|	И НЕ ВременнаяТаблицаШапка.НомерБланкаСФ = """"";		
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаБланкиСчетовФактур", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаСотрудники()

// Формирует таблицу значений, содержащую данные для проведения по регистру бухгалтерии Хозрасчетный.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаНДС(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	// 1. Товары
	// 2. Усуги
	// 3. ОС
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =	
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВременнаяТаблицаШапка.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета КАК СуммаНДС,
		|	ВременнаяТаблицаТовары.СуммаНСПВВалютеРеглУчета КАК СуммаНСП,
		|	ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаНСПВВалютеРеглУчета КАК СуммаБезНДС
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	ВременнаяТаблицаШапка.СтавкаНДС,
		|	ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета,
		|	ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета,
		|	ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	ВременнаяТаблицаШапка.Дата,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.Контрагент,
		|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
		|	ВременнаяТаблицаШапка.СтавкаНДС,
		|	ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета,
		|	ВременнаяТаблицаОС.СуммаНСПВВалютеРеглУчета,
		|	ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНСПВВалютеРеглУчета
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета = 0";
	РезультатЗапроса = Запрос.Выполнить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаНДС", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСостоянияОС(ДокументСсылка, СтруктураДополнительныеСвойства)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ТаблицаДокумента.ОсновноеСредство,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.Передано) КАК Состояние
		|ИЗ
		|	ВременнаяТаблицаОСВключаяОСКомплектов КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСостоянияОС", РезультатЗапроса.Выгрузить()); 
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСобытияОС(ДокументСсылка, СтруктураДополнительныеСвойства) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Реализация) КАК Событие,
		|	ВременнаяТаблицаШапка.Номер КАК НомерДокумента,
		|	""Реализация ОС"" КАК НазваниеДокумента
		|ИЗ
		|	ВременнаяТаблицаОС КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСобытияОС", РезультатЗапроса.Выгрузить());
КонецПроцедуры     

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДвижениеОСНУ(ДокументСсылка, СтруктураДополнительныеСвойства) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ПараметрыУчетаОССрезПоследних.ГруппаНУ КАК ГруппаНУ,
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНСПВВалютеРеглУчета КАК Выбытие,
		|	ВЫРАЗИТЬ((ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНСПВВалютеРеглУчета) * (12 - МЕСЯЦ(ВременнаяТаблицаШапка.Дата) + 0.5) / 12 КАК ЧИСЛО(15, 2)) КАК ТекущееВыбытие
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
		|				&Период,
		|				Организация = &Организация
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаОС.ОсновноеСредство
		|						ИЗ
		|							ВременнаяТаблицаОС КАК ВременнаяТаблицаОС)) КАК ПараметрыУчетаОССрезПоследних
		|		ПО ВременнаяТаблицаОС.ОсновноеСредство = ПараметрыУчетаОССрезПоследних.ОсновноеСредство
		|ГДЕ
		|	НЕ ПараметрыУчетаОССрезПоследних.ГруппаНУ = ЗНАЧЕНИЕ(Справочник.ГруппыНалоговогоУчетаОС.ПустаяСсылка)";		
	Запрос.УстановитьПараметр("Период", СтруктураДополнительныеСвойства.ДляПроведения.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвижениеОСНУ", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры 

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСчетаФактурыВыписанные(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;	
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ВременнаяТаблицаШапка.Дата КАК Дата,
	|	ВременнаяТаблицаШапка.Дата КАК ДатаПоставки,
	|	ВременнаяТаблицаШапка.Организация КАК Организация,
	|	ВременнаяТаблицаШапка.Ссылка КАК Документ,
	|	ВременнаяТаблицаШапка.СерияБланкаСФ КАК СерияБланкаСФ,
	|	ВременнаяТаблицаШапка.НомерБланкаСФ КАК НомерБланкаСФ,
	|	ВременнаяТаблицаШапка.ПризнакСтраны КАК ПризнакСтраны,
	|	ВременнаяТаблицаШапка.ВидПоставкиНДС КАК ВидПоставкиНДС,
	|	ВременнаяТаблицаШапка.ДатаСФ КАК ДатаСФ,
	|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаШапка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВременнаяТаблицаШапка.СтавкаНДС КАК СтавкаНДС,
	|	ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаТовары.СуммаНСПВВалютеРеглУчета КАК СуммаБезНДС,
	|	ВременнаяТаблицаТовары.СуммаНДСВВалютеРеглУчета КАК СуммаНДС,
	|	ВременнаяТаблицаТовары.СуммаНСПВВалютеРеглУчета КАК СуммаНеоблагаемая
	|ПОМЕСТИТЬ ВременнаяТаблицаДокумента
	|ИЗ
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ ВременнаяТаблицаТовары.ВсегоВВалютеРеглУчета = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ВременнаяТаблицаШапка.Дата,
	|	ВременнаяТаблицаШапка.Дата,
	|	ВременнаяТаблицаШапка.Организация,
	|	ВременнаяТаблицаШапка.Ссылка,
	|	ВременнаяТаблицаШапка.СерияБланкаСФ,
	|	ВременнаяТаблицаШапка.НомерБланкаСФ,
	|	ВременнаяТаблицаШапка.ПризнакСтраны,
	|	ВременнаяТаблицаШапка.ВидПоставкиНДС,
	|	ВременнаяТаблицаШапка.ДатаСФ,
	|	ВременнаяТаблицаШапка.Контрагент,
	|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
	|	ВременнаяТаблицаШапка.СтавкаНДС,
	|	ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета,
	|	ВременнаяТаблицаУслуги.СуммаНДСВВалютеРеглУчета,
	|	ВременнаяТаблицаУслуги.СуммаНСПВВалютеРеглУчета
	|ИЗ
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ ВременнаяТаблицаУслуги.ВсегоВВалютеРеглУчета = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	ВременнаяТаблицаШапка.Дата,
	|	ВременнаяТаблицаШапка.Дата,
	|	ВременнаяТаблицаШапка.Организация,
	|	ВременнаяТаблицаШапка.Ссылка,
	|	ВременнаяТаблицаШапка.СерияБланкаСФ,
	|	ВременнаяТаблицаШапка.НомерБланкаСФ,
	|	ВременнаяТаблицаШапка.ПризнакСтраны,
	|	ВременнаяТаблицаШапка.ВидПоставкиНДС,
	|	ВременнаяТаблицаШапка.ДатаСФ,
	|	ВременнаяТаблицаШапка.Контрагент,
	|	ВременнаяТаблицаШапка.ДоговорКонтрагента,
	|	ВременнаяТаблицаШапка.СтавкаНДС,
	|	ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета - ВременнаяТаблицаОС.СуммаНСПВВалютеРеглУчета,
	|	ВременнаяТаблицаОС.СуммаНДСВВалютеРеглУчета,
	|	ВременнаяТаблицаОС.СуммаНСПВВалютеРеглУчета
	|ИЗ
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ ВременнаяТаблицаОС.ВсегоВВалютеРеглУчета = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаДокумента.Дата КАК Дата,
	|	ВременнаяТаблицаДокумента.ДатаПоставки КАК ДатаПоставки,
	|	ВременнаяТаблицаДокумента.Организация КАК Организация,
	|	ВременнаяТаблицаДокумента.Документ КАК Документ,
	|	ВременнаяТаблицаДокумента.СерияБланкаСФ КАК СерияБланкаСФ,
	|	ВременнаяТаблицаДокумента.НомерБланкаСФ КАК НомерБланкаСФ,
	|	ВременнаяТаблицаДокумента.ПризнакСтраны КАК ПризнакСтраны,
	|	ВременнаяТаблицаДокумента.ВидПоставкиНДС КАК ВидПоставкиНДС,
	|	ВременнаяТаблицаДокумента.ДатаСФ КАК ДатаСФ,
	|	ВременнаяТаблицаДокумента.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВременнаяТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ВременнаяТаблицаДокумента.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ВременнаяТаблицаДокумента.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ВременнаяТаблицаДокумента.СуммаНеоблагаемая) КАК СуммаНеоблагаемая
	|ИЗ
	|	ВременнаяТаблицаДокумента КАК ВременнаяТаблицаДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаДокумента.Дата,
	|	ВременнаяТаблицаДокумента.ДатаПоставки,
	|	ВременнаяТаблицаДокумента.Организация,
	|	ВременнаяТаблицаДокумента.ДоговорКонтрагента,
	|	ВременнаяТаблицаДокумента.ДатаСФ,
	|	ВременнаяТаблицаДокумента.Документ,
	|	ВременнаяТаблицаДокумента.Контрагент,
	|	ВременнаяТаблицаДокумента.ПризнакСтраны,
	|	ВременнаяТаблицаДокумента.СерияБланкаСФ,
	|	ВременнаяТаблицаДокумента.ВидПоставкиНДС,
	|	ВременнаяТаблицаДокумента.НомерБланкаСФ,
	|	ВременнаяТаблицаДокумента.СтавкаНДС";

	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСчетаФактурыВыписанные", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСоставОС(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаОС.СостояниеВСоставеОС КАК СостояниеВСоставеОС
		|ПОМЕСТИТЬ ВременнаяТаблицаОСВсе
		|ИЗ
		|	ВременнаяТаблицаОСВключаяОСКомплектов КАК ВременнаяТаблицаОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Период,
		|	СоставОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	СоставОССрезПоследних.ОсновноеСредствоВСоставеКомплекта КАК ОсновноеСредствоВСоставеКомплекта,
		|	ВременнаяТаблицаОСВсе.СостояниеВСоставеОС КАК СостояниеВСоставеОС
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставОС.СрезПоследних(
		|				&Период,
		|				ОсновноеСредствоВСоставеКомплекта В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаОСВсе.ОсновноеСредство КАК ОсновноеСредство
		|						ИЗ
		|							ВременнаяТаблицаОСВсе КАК ВременнаяТаблицаОСВсе)
		|					И НЕ Регистратор = &ДокументСсылка) КАК СоставОССрезПоследних
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОСВсе КАК ВременнаяТаблицаОСВсе
		|			ПО СоставОССрезПоследних.ОсновноеСредствоВСоставеКомплекта = ВременнаяТаблицаОСВсе.ОсновноеСредство
		|		ПО (ИСТИНА)
		|ГДЕ
		|	(СоставОССрезПоследних.СостояниеВСоставеОС = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектацияОС.Комплектация)
		|			ИЛИ СоставОССрезПоследних.СостояниеВСоставеОС = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектацияОС.Добавление))";
	
	Запрос.Параметры.Вставить("Период", СтруктураДополнительныеСвойства.ДляПроведения.Дата);
	Запрос.Параметры.Вставить("ДокументСсылка", ДокументСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСоставОС", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаКорректировкиНУ(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ПОМЕСТИТЬ ВременнаяТаблицаСчетов
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Временный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаХозрасчетный.Период КАК Период,
		|	ТаблицаХозрасчетный.Организация КАК Организация,
		|	ТаблицаХозрасчетный.СчетДт КАК СчетДт,
		|	ТаблицаХозрасчетный.СчетКт КАК СчетКт,
		|	ТаблицаХозрасчетный.СубконтоКт1 КАК СубконтоКт1,
		|	ТаблицаХозрасчетный.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаХозрасчетный
		|ИЗ
		|	&ТаблицаХозрасчетный КАК ТаблицаХозрасчетный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаХозрасчетный.Период КАК Период,
		|	ВременнаяТаблицаХозрасчетный.Организация КАК Организация,
		|	ВременнаяТаблицаХозрасчетный.СчетДт КАК СчетДт,
		|	ВременнаяТаблицаХозрасчетный.СчетКт КАК СчетКт,
		|	ВременнаяТаблицаХозрасчетный.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаХозрасчетныйОтбор
		|ИЗ
		|	ВременнаяТаблицаХозрасчетный КАК ВременнаяТаблицаХозрасчетный
		|	 	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаОС КАК ВременнаяТаблицаОС)) КАК ПараметрыУчетаОССрезПоследних
		|		ПО ВременнаяТаблицаХозрасчетный.СубконтоКт1 = ПараметрыУчетаОССрезПоследних.ОсновноеСредство
		|ГДЕ
		|	НЕ ПараметрыУчетаОССрезПоследних.ГруппаНУ = ЗНАЧЕНИЕ(Справочник.ГруппыНалоговогоУчетаОС.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаХозрасчетныйОтбор.Период КАК Период,
		|	ВременнаяТаблицаХозрасчетныйОтбор.Организация КАК Организация,
		|	ВременнаяТаблицаХозрасчетныйОтбор.СчетДт КАК Счет,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыУчета.ВР) КАК ВидУчета,
		|	ВременнаяТаблицаХозрасчетныйОтбор.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаКорректировкиНУ
		|ИЗ
		|	ВременнаяТаблицаХозрасчетныйОтбор КАК ВременнаяТаблицаХозрасчетныйОтбор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСчетов КАК ВременнаяТаблицаСчетов
		|		ПО ВременнаяТаблицаХозрасчетныйОтбор.СчетДт = ВременнаяТаблицаСчетов.Счет
		|ГДЕ
		|	ВременнаяТаблицаХозрасчетныйОтбор.СчетДт В
		|			(ВЫБРАТЬ
		|				ВременнаяТаблицаСчетов.Счет
		|			ИЗ
		|				ВременнаяТаблицаСчетов КАК ВременнаяТаблицаСчетов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаХозрасчетный.Период,
		|	ВременнаяТаблицаХозрасчетный.Организация,
		|	ВременнаяТаблицаХозрасчетный.СчетКт,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыУчета.ВР),
		|	ВременнаяТаблицаХозрасчетный.Сумма
		|ИЗ
		|	ВременнаяТаблицаХозрасчетныйОтбор КАК ВременнаяТаблицаХозрасчетный
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСчетов КАК ВременнаяТаблицаСчетов
		|		ПО ВременнаяТаблицаХозрасчетный.СчетКт = ВременнаяТаблицаСчетов.Счет
		|ГДЕ
		|	ВременнаяТаблицаХозрасчетный.СчетКт В
		|			(ВЫБРАТЬ
		|				ВременнаяТаблицаСчетов.Счет
		|			ИЗ
		|				ВременнаяТаблицаСчетов КАК ВременнаяТаблицаСчетов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаКорректировкиНУ.Период КАК Период,
		|	ВременнаяТаблицаКорректировкиНУ.Организация КАК Организация,
		|	ВременнаяТаблицаКорректировкиНУ.Счет КАК Счет,
		|	ВременнаяТаблицаКорректировкиНУ.ВидУчета КАК ВидУчета,
		|	СУММА(ВременнаяТаблицаКорректировкиНУ.Сумма) КАК Сумма
		|ИЗ
		|	ВременнаяТаблицаКорректировкиНУ КАК ВременнаяТаблицаКорректировкиНУ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаКорректировкиНУ.Счет,
		|	ВременнаяТаблицаКорректировкиНУ.ВидУчета,
		|	ВременнаяТаблицаКорректировкиНУ.Организация,
		|	ВременнаяТаблицаКорректировкиНУ.Период";
	Запрос.УстановитьПараметр("ТаблицаХозрасчетный", СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаХозрасчетный);
	Запрос.УстановитьПараметр("Период", СтруктураДополнительныеСвойства.ДляПроведения.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаКорректировкиНУ", РезультатЗапроса.Выгрузить());
КонецПроцедуры

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства, Отказ) Экспорт 
	
	ТаблицаОСВходящихВКомплекты = ТаблицаОСВходящихВКомплекты(ДокументСсылка, СтруктураДополнительныеСвойства);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Номер КАК Номер,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ТаблицаДокумента.Склад КАК Склад,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.Контрагент.ПризнакСтраны КАК ПризнакСтраны,
		|	ТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаДокумента.СчетРасчетов КАК СчетРасчетов,
		|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента,
		|	ТаблицаДокумента.Курс КАК Курс,
		|	ТаблицаДокумента.Кратность КАК Кратность,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСКОплате) КАК СчетУчетаНДС,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НалогСПродаж) КАК СчетУчетаНСП,
		|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаДокумента.СтавкаНСП КАК СтавкаНСП,
		|	ТаблицаДокумента.СтавкаНСПУслуги КАК СтавкаНСПУслуги,
		|	ЗНАЧЕНИЕ(Справочник.СтавкиНСП.Прочее) КАК СтавкаНСПОС,
		|	ТаблицаДокумента.СуммаВключаетНалоги КАК СуммаВключаетНалоги,
		|	ТаблицаДокумента.ВидПоставкиНДС КАК ВидПоставкиНДС,
		|	ТаблицаДокумента.СерияБланкаСФ КАК СерияБланкаСФ,
		|	ТаблицаДокумента.НомерБланкаСФ КАК НомерБланкаСФ,
		|	ТаблицаДокумента.ДатаСФ КАК ДатаСФ,
		|	ТаблицаДокумента.СчетУчетаСкидок КАК СчетУчетаСкидок,
		|	ТаблицаДокумента.МОЛ КАК МОЛ,
		|	ТаблицаДокумента.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ТаблицаДокумента.Количество КАК Количество,
		|	ТаблицаДокумента.Всего КАК Всего,
		|	ТаблицаДокумента.Сумма КАК Сумма,
		|	ТаблицаДокумента.СуммаДохода КАК СуммаДохода,
		|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
		|	ТаблицаДокумента.СуммаНСП КАК СуммаНСП,
		|	ТаблицаДокумента.СуммаСкидки КАК СуммаСкидки,
		|	ТаблицаДокумента.ВсегоВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаВВалютеРеглУчета КАК СуммаВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаДоходаВВалютеРеглУчета КАК СуммаДоходаВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаНДСВВалютеРеглУчета КАК СуммаНДСВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаНСПВВалютеРеглУчета КАК СуммаНСПВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаСкидкиВВалютеРеглУчета КАК СуммаСкидкиВВалютеРеглУчета,
		|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
		|	ТаблицаДокумента.СчетДохода КАК СчетДохода,
		|	ТаблицаДокумента.СтатьяДохода КАК СтатьяДохода,
		|	ТаблицаДокумента.СчетСебестоимости КАК СчетСебестоимости,
		|	ТаблицаДокумента.СтатьяРасхода КАК СтатьяРасхода
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ТаблицаДокумента.Количество КАК Количество,
		|	ТаблицаДокумента.Всего КАК Всего,
		|	ТаблицаДокумента.Сумма КАК Сумма,
		|	ТаблицаДокумента.СуммаДохода КАК СуммаДохода,
		|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
		|	ТаблицаДокумента.СуммаНСП КАК СуммаНСП,
		|	ТаблицаДокумента.СуммаСкидки КАК СуммаСкидки,
		|	ТаблицаДокумента.ВсегоВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаВВалютеРеглУчета КАК СуммаВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаДоходаВВалютеРеглУчета КАК СуммаДоходаВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаНДСВВалютеРеглУчета КАК СуммаНДСВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаНСПВВалютеРеглУчета КАК СуммаНСПВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаСкидкиВВалютеРеглУчета КАК СуммаСкидкиВВалютеРеглУчета,
		|	ТаблицаДокумента.СчетДохода КАК СчетДохода,
		|	ТаблицаДокумента.СтатьяДохода КАК СтатьяДохода
		|ПОМЕСТИТЬ ВременнаяТаблицаУслуги
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаДокумента.ОсновноеСредство.ЭтоКомплект КАК ЭтоКомплект,
		|	ТаблицаДокумента.Всего КАК Всего,
		|	ТаблицаДокумента.Сумма КАК Сумма,
		|	ТаблицаДокумента.СуммаДохода КАК СуммаДохода,
		|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
		|	ТаблицаДокумента.СуммаНСП КАК СуммаНСП,
		|	ТаблицаДокумента.СуммаСкидки КАК СуммаСкидки,
		|	ТаблицаДокумента.ВсегоВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаВВалютеРеглУчета КАК СуммаВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаДоходаВВалютеРеглУчета КАК СуммаДоходаВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаНДСВВалютеРеглУчета КАК СуммаНДСВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаНСПВВалютеРеглУчета КАК СуммаНСПВВалютеРеглУчета,
		|	ТаблицаДокумента.СуммаСкидкиВВалютеРеглУчета КАК СуммаСкидкиВВалютеРеглУчета,
		|	ТаблицаДокумента.СчетЗатрат КАК СчетЗатрат,
		|	ТаблицаДокумента.СчетДохода КАК СчетДохода,
		|	ТаблицаДокумента.СтатьяЗатрат КАК СтатьяЗатрат
		|ПОМЕСТИТЬ ВременнаяТаблицаОС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.ОС КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаДокумента.СчетЗатрат КАК СчетЗатрат,
		|	ТаблицаДокумента.СтатьяЗатрат КАК СтатьяЗатрат
		|ПОМЕСТИТЬ ВременнаяТаблицаОСКомплектов
		|ИЗ
		|	&ТаблицаОСВходящихВКомплекты КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектацияОС.ВыводИзКомплекта) КАК СостояниеВСоставеОС
		|ПОМЕСТИТЬ ВременнаяТаблицаОСВключаяОСКомплектов
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|ГДЕ
		|	НЕ ВременнаяТаблицаОС.ЭтоКомплект		
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОСКомплектов.ОсновноеСредство,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектацияОС.Ликвидация)
		|ИЗ
		|	ВременнаяТаблицаОСКомплектов КАК ВременнаяТаблицаОСКомплектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтавкиНДССрезПоследних.СтавкаНДС КАК СтавкаНДС,
		|	СтавкиНДССрезПоследних.Ставка КАК ЗначениеСтавки
		|ПОМЕСТИТЬ ВременнаяТаблицаСтавкиНДС
		|ИЗ
		|	РегистрСведений.СтавкиНДС.СрезПоследних(
		|			&Период,
		|			СтавкаНДС В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаШапка.СтавкаНДС
		|				ИЗ
		|					ВременнаяТаблицаШапка)) КАК СтавкиНДССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтавкиНСПСрезПоследних.СтавкаНСП КАК СтавкаНСП,
		|	СтавкиНСПСрезПоследних.Ставка КАК ЗначениеСтавки
		|ПОМЕСТИТЬ ВременнаяТаблицаСтавкиНСП
		|ИЗ
		|	РегистрСведений.СтавкиНСП.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И (СтавкаНСП В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаШапка.СтавкаНСП
		|					ИЗ
		|						ВременнаяТаблицаШапка)
		|				ИЛИ СтавкаНСП В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаШапка.СтавкаНСПУслуги
		|					ИЗ
		|						ВременнаяТаблицаШапка)
		|				ИЛИ СтавкаНСП В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаШапка.СтавкаНСПОС
		|					ИЗ
		|						ВременнаяТаблицаШапка))) КАК СтавкиНСПСрезПоследних";		
	Запрос.УстановитьПараметр("Ссылка", 					 ДокументСсылка);
	Запрос.УстановитьПараметр("ТаблицаОСВходящихВКомплекты", ТаблицаОСВходящихВКомплекты);
	Запрос.УстановитьПараметр("Период", 					 СтруктураДополнительныеСвойства.ДляПроведения.Дата);
	Запрос.УстановитьПараметр("Организация", 				 СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	РезультатЗапроса = Запрос.Выполнить();
	
	СформироватьТаблицаХозрасчетный(ДокументСсылка, СтруктураДополнительныеСвойства, Отказ);
	СформироватьТаблицаПродажи(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПродажиОсновныхСредств(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаНДС(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаБланкиСчетовФактур(ДокументСсылка, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаСостоянияОС(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаСобытияОС(ДокументСсылка, СтруктураДополнительныеСвойства); 	
	СформироватьТаблицаДвижениеОСНУ(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаСчетаФактурыВыписанные(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаСоставОС(ДокументСсылка, СтруктураДополнительныеСвойства);
	//СформироватьТаблицаКорректировкиНУ(ДокументСсылка, СтруктураДополнительныеСвойства);
КонецПроцедуры

#КонецОбласти	

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Функция формирует табличный документ с печатной формой ПечатьНакладной
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьНакладной(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "РеализацияТоваровУслуг_Накладная";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваровУслуг.ПФ_MXL_Накладная");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Номер КАК Номер,
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента,
		|	ТаблицаДокумента.Склад КАК Склад,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Склад) КАК СкладПредставление,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.Контрагент.НаименованиеПолное КАК КонтрагентПредставление,
		|	ТаблицаДокумента.ВыводитьКомментарийВНаименование КАК ВыводитьКомментарийВНаименование,
		|	ТаблицаДокумента.Комментарий КАК Комментарий,
		|	ТаблицаДокумента.Товары.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|		СуммаСкидки КАК СуммаСкидки,
		|		СуммаДохода КАК СуммаДохода,
		|		Всего КАК Всего,
		|		СчетУчета КАК СчетУчета,
		|		СчетДохода КАК СчетДохода,
		|		СчетСебестоимости КАК СчетСебестоимости,
		|		СтатьяРасхода КАК СтатьяРасхода,
		|		СтатьяДохода КАК СтатьяДохода,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Товары.Номенклатура.ЕдиницаИзмерения) КАК ЕИ
		|	) КАК Товары,
		|	ТаблицаДокумента.Услуги.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|		СуммаСкидки КАК СуммаСкидки,
		|		СуммаДохода КАК СуммаДохода,
		|		Всего КАК Всего,
		|		СчетДохода КАК СчетДохода,
		|		СтатьяДохода КАК СтатьяДохода,
		|		ДополнительныеСведения КАК ДополнительныеСведения,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Услуги.Номенклатура.ЕдиницаИзмерения) КАК ЕИ
		|	) КАК Услуги,
		|	ТаблицаДокумента.ОС.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		ОсновноеСредство КАК ОсновноеСредство,
		|		ИнвентарныйНомер КАК ИнвентарныйНомер,
		|		Сумма КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		СуммаДохода КАК СуммаДохода,
		|		Всего КАК Всего,
		|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|		СуммаСкидки КАК СуммаСкидки,
		|		СчетДохода КАК СчетДохода,
		|		СчетЗатрат КАК СчетЗатрат,
		|		СтатьяЗатрат КАК СтатьяЗатрат,
		|		ОсновноеСредство.НаименованиеПолное КАК НоменклатураПредставление
		|	) КАК ОС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&СписокДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	НомерСтроки,
		|	НомерСтроки";		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;
		
		ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, НСтр("ru = 'Накладная на реализацию'"));
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДанныеПечати.Вставить("ОрганизацияПредставление", Шапка.ОрганизацияПредставление);
		ДанныеПечати.Вставить("СкладПредставление", Шапка.СкладПредставление);
		ДанныеПечати.Вставить("ПолучательПредставление", Шапка.КонтрагентПредставление);
		ДанныеПечати.Вставить("Комментарий", Шапка.Комментарий);
		ТаблицаТовары = Шапка.Товары.Выгрузить();
		ТаблицаУслуги = Шапка.Услуги.Выгрузить();
		ТаблицаОС = Шапка.ОС.Выгрузить();
		
		Всего = ТаблицаТовары.Итог("Всего") + ТаблицаУслуги.Итог("Всего") + ТаблицаОС.Итог("Всего");
		ВсегоНДС = ТаблицаТовары.Итог("СуммаНДС") + ТаблицаУслуги.Итог("СуммаНДС") + ТаблицаОС.Итог("СуммаНДС");
		ВсегоНСП = ТаблицаТовары.Итог("СуммаНСП") + ТаблицаУслуги.Итог("СуммаНСП") + ТаблицаОС.Итог("СуммаНСП");
		КоличествоНаименований = ТаблицаТовары.Количество() + ТаблицаУслуги.Количество() + ТаблицаОС.Количество();		
		
		ВсегоСкидка = ТаблицаТовары.Итог("СуммаСкидки") + ТаблицаУслуги.Итог("СуммаСкидки") + ТаблицаОС.Итог("СуммаСкидки");
		ЕстьСкидка = ВсегоСкидка <> 0;
		
		ДанныеПечати.Вставить("Всего", Всего);
		ДанныеПечати.Вставить("ВсегоНДС", ВсегоНДС);
		ДанныеПечати.Вставить("ВсегоНСП", ВсегоНСП);
		ДанныеПечати.Вставить("ВсегоСкидка", ВсегоСкидка);
		ДанныеПечати.Вставить("ИтоговаяСтрока", 
			СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"), 
			Формат(КоличествоНаименований, "ЧН=0; ЧГ=0"), Формат(ДанныеПечати.Всего, "ЧЦ=15; ЧДЦ=2")));
		ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(ДанныеПечати.Всего, Шапка.ВалютаДокумента));

		// Области
		МассивОбластейМакета = Новый Массив;
		МассивОбластейМакета.Добавить("Заголовок");
		Если Шапка.ВыводитьКомментарийВНаименование Тогда
			МассивОбластейМакета.Добавить("Комментарий");
		КонецЕсли;
		Если ЕстьСкидка Тогда 
			МассивОбластейМакета.Добавить("ШапкаТаблицыСоСкидкой");
			МассивОбластейМакета.Добавить("СтрокаСоСкидкой");
		Иначе 
			МассивОбластейМакета.Добавить("ШапкаТаблицы");
			МассивОбластейМакета.Добавить("Строка");
		КонецЕсли;	
		МассивОбластейМакета.Добавить("Подвал");
		МассивОбластейМакета.Добавить("Итоги");
		МассивОбластейМакета.Добавить("ИтогиНДС");
		МассивОбластейМакета.Добавить("ИтогиНСП");
		Если ЕстьСкидка Тогда 
			МассивОбластейМакета.Добавить("ИтогиСкидка");
		КонецЕсли;	
		МассивОбластейМакета.Добавить("СуммаПрописью");
		МассивОбластейМакета.Добавить("Подписи");
	
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			
			Если ИмяОбласти = "Строка" ИЛИ ИмяОбласти = "СтрокаСоСкидкой" Тогда 
				Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
				Для Каждого СтрокаТаблицы Из ТаблицаУслуги Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
				Для Каждого СтрокаТаблицы Из ТаблицаОС Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
			Иначе //Если ИмяОбласти <> "Строка" ИЛИ ИмяОбласти <> "СтрокаСоСкидкой" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);	
			КонецЕсли;	
		КонецЦикла;
		
		БухгалтерскиеОтчеты.ВыводПодписиРуководителей(ТабличныйДокумент, Шапка);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует табличный документ с печатной формой Счет-фактура
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, КоличествоСтрокСчетаФактуры, СчетФактураВВалюте = Ложь)
	Перем Ошибки, ПервыйДокумент, НомерСтрокиНачало;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;		
	ТабличныйДокумент.КлючПараметровПечати = "РеализацияТоваровУслуг_СчетФактура";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщиеМакеты.СчетФактура");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслуг.Номер КАК Номер,
		|	РеализацияТоваровУслуг.Дата КАК Дата,
		|	РеализацияТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента,
		|	РеализацияТоваровУслуг.Курс КАК Курс,
		|	РеализацияТоваровУслуг.Кратность КАК Кратность,
		|	РеализацияТоваровУслуг.ЭкспортнаяПоставка КАК ЭкспортнаяПоставка,
		|	РеализацияТоваровУслуг.СуммаВключаетНалоги КАК СуммаВключаетНалоги,
		|	РеализацияТоваровУслуг.ПечатьВРегламентированнойВалюте КАК ПечатьВРегламентированнойВалюте,
		|	РеализацияТоваровУслуг.ПечататьКурсИСуммуВРегламентированнойВалюте КАК ПечататьКурсИСуммуВРегламентированнойВалюте,
		|	РеализацияТоваровУслуг.ВыводитьКомментарийВНаименование КАК ВыводитьКомментарийВНаименование,
		|	РеализацияТоваровУслуг.ВидПоставкиНДС.Код КАК ВидПоставкиНДС,
		|	РеализацияТоваровУслуг.Организация КАК Организация,
		|	РеализацияТоваровУслуг.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	РеализацияТоваровУслуг.Организация.ИНН КАК ИННОрганизации,
		|	РеализацияТоваровУслуг.Организация.ГНС КАК ГНСОрганизации,
		|	РеализацияТоваровУслуг.Организация.ГНС.Код КАК КодГНСОрганизации,
		|	РеализацияТоваровУслуг.Организация.ФайлЛоготип КАК ФайлЛоготип,
		|	РеализацияТоваровУслуг.БанковскийСчет.НомерСчета КАК НомерБанковскогоСчетаОрганизации,
		|	РеализацияТоваровУслуг.БанковскийСчет.Банк.Код КАК БикБанкаОрганизации,
		|	РеализацияТоваровУслуг.БанковскийСчет.Банк.Наименование КАК НаименованиеБанкаОрганизации,
		|	ВЫБОР
		|		КОГДА &ПечататьСчетаФактурыСГоловнымКонтрагентом
		|				И НЕ РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент
		|		ИНАЧЕ РеализацияТоваровУслуг.Контрагент
		|	КОНЕЦ КАК Контрагент,
		|	РеализацияТоваровУслуг.НомерБланкаСФ КАК НомерБланкаСФ,
		|	РеализацияТоваровУслуг.СерияБланкаСФ КАК СерияБланкаСФ,
		|	РеализацияТоваровУслуг.ДатаСФ КАК ДатаСФ,
		|	РеализацияТоваровУслуг.БезналичныйРасчет КАК БезналичныйРасчет,
		|	РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
		|	РеализацияТоваровУслуг.СтавкаНСП КАК СтавкаНСП,
		|	РеализацияТоваровУслуг.СтавкаНСПУслуги КАК СтавкаНСПУслуги,
		|	РеализацияТоваровУслуг.Комментарий КАК Комментарий
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка В(&СписокДокументов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаШапка.СуммаВключаетНалоги КАК СуммаВключаетНалоги,
		|	ВременнаяТаблицаШапка.Курс КАК Курс,
		|	ВременнаяТаблицаШапка.Кратность КАК Кратность
		|ПОМЕСТИТЬ ВременнаяТаблицаДокументыДляПересчета
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|ГДЕ
		|	(ВременнаяТаблицаШапка.ПечатьВРегламентированнойВалюте
		|			ИЛИ ВременнаяТаблицаШапка.ПечататьКурсИСуммуВРегламентированнойВалюте
		|			ИЛИ &СчетФактураВВалюте)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаШапка.СуммаВключаетНалоги КАК СуммаВключаетНалоги
		|ПОМЕСТИТЬ ВременнаяТаблицаДокументыСИсходнымиСуммами
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|ГДЕ
		|	(НЕ ВременнаяТаблицаШапка.ПечатьВРегламентированнойВалюте
		|			ИЛИ &СчетФактураВВалюте)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка КАК Ссылка,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|	МАКСИМУМ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Наименование) КАК ЕдиницаИзмерения,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество,
		|	СУММА(ТаблицаТовары.Сумма) КАК Сумма,
		|	СУММА(ТаблицаТовары.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ТаблицаТовары.СуммаНСП) КАК СуммаНСП,
		|	СУММА(ТаблицаТовары.Всего) КАК Всего,
		|	СУММА(ТаблицаТовары.СуммаДохода) КАК СуммаДохода,
		|	СУММА(ТаблицаТовары.СуммаВВалютеРеглУчета) КАК СуммаВВалютеРеглУчета,
		|	СУММА(ТаблицаТовары.СуммаНДСВВалютеРеглУчета) КАК СуммаНДСВВалютеРеглУчета,
		|	СУММА(ТаблицаТовары.СуммаНСПВВалютеРеглУчета) КАК СуммаНСПВВалютеРеглУчета,
		|	СУММА(ТаблицаТовары.ВсегоВВалютеРеглУчета) КАК ВсегоВВалютеРеглУчета,
		|	СУММА(ТаблицаТовары.СуммаДоходаВВалютеРеглУчета) КАК СуммаДоходаВВалютеРеглУчета,
		|	МАКСИМУМ(ТаблицаТовары.Номенклатура.КодТНВЭД) КАК КодТНВЭД,
		|	""Товар"" КАК ТипТовара,
		|	"""" КАК ДополнительныеСведения,
		|	СУММА(ТаблицаТовары.СуммаСкидки) КАК СуммаСкидки,
		|	СУММА(ТаблицаТовары.СуммаСкидкиВВалютеРеглУчета) КАК СуммаСкидкиВВалютеРеглУчета
		|ПОМЕСТИТЬ ВременнаяТаблицаСгруппированныеСтроки
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка В(&СписокДокументов)
		|	И ТаблицаТовары.Ссылка.ГруппироватьПоНоменклатуре
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Номенклатура.НаименованиеПолное
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаУслуги.Ссылка,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.Номенклатура.НаименованиеПолное,
		|	МАКСИМУМ(ТаблицаУслуги.Номенклатура.ЕдиницаИзмерения.Наименование),
		|	СУММА(ТаблицаУслуги.Количество),
		|	СУММА(ТаблицаУслуги.Сумма),
		|	СУММА(ТаблицаУслуги.СуммаНДС),
		|	СУММА(ТаблицаУслуги.СуммаНСП),
		|	СУММА(ТаблицаУслуги.Всего),
		|	СУММА(ТаблицаУслуги.СуммаДохода),
		|	СУММА(ТаблицаУслуги.СуммаВВалютеРеглУчета),
		|	СУММА(ТаблицаУслуги.СуммаНДСВВалютеРеглУчета),
		|	СУММА(ТаблицаУслуги.СуммаНСПВВалютеРеглУчета),
		|	СУММА(ТаблицаУслуги.ВсегоВВалютеРеглУчета),
		|	СУММА(ТаблицаУслуги.СуммаДоходаВВалютеРеглУчета),
		|	МАКСИМУМ(ТаблицаУслуги.Номенклатура.КодТНВЭД),
		|	""Услуга"",
		|	ТаблицаУслуги.ДополнительныеСведения,
		|	СУММА(ТаблицаУслуги.СуммаСкидки),
		|	СУММА(ТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета)
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК ТаблицаУслуги
		|ГДЕ
		|	ТаблицаУслуги.Ссылка В(&СписокДокументов)
		|	И ТаблицаУслуги.Ссылка.ГруппироватьПоНоменклатуре
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаУслуги.Ссылка,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.Номенклатура.НаименованиеПолное,
		|	ТаблицаУслуги.ДополнительныеСведения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаОС.Ссылка,
		|	ТаблицаОС.ОсновноеСредство,
		|	ТаблицаОС.ОсновноеСредство.НаименованиеПолное,
		|	НЕОПРЕДЕЛЕНО,
		|	СУММА(1),
		|	СУММА(ТаблицаОС.Сумма),
		|	СУММА(ТаблицаОС.СуммаНДС),
		|	СУММА(ТаблицаОС.СуммаНСП),
		|	СУММА(ТаблицаОС.Всего),
		|	СУММА(ТаблицаОС.СуммаДохода),
		|	СУММА(ТаблицаОС.СуммаВВалютеРеглУчета),
		|	СУММА(ТаблицаОС.СуммаНДСВВалютеРеглУчета),
		|	СУММА(ТаблицаОС.СуммаНСПВВалютеРеглУчета),
		|	СУММА(ТаблицаОС.ВсегоВВалютеРеглУчета),
		|	СУММА(ТаблицаОС.СуммаДоходаВВалютеРеглУчета),
		|	НЕОПРЕДЕЛЕНО,
		|	""ОС"",
		|	"""",
		|	СУММА(ТаблицаОС.СуммаСкидки),
		|	СУММА(ТаблицаОС.СуммаСкидкиВВалютеРеглУчета)
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.ОС КАК ТаблицаОС
		|ГДЕ
		|	ТаблицаОС.Ссылка В(&СписокДокументов)
		|	И ТаблицаОС.Ссылка.ГруппироватьПоНоменклатуре
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОС.Ссылка,
		|	ТаблицаОС.ОсновноеСредство,
		|	ТаблицаОС.ОсновноеСредство.НаименованиеПолное
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка КАК Ссылка,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Ссылка.ВыводитьЦенуСНалогами
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.Всего / ТаблицаТовары.Количество КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаТовары.СуммаДохода / ТаблицаТовары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК Цена,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.СуммаНСП КАК СуммаНСП,
		|	ТаблицаТовары.Всего КАК Всего,
		|	ТаблицаТовары.СуммаДохода КАК СуммаДохода,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Ссылка.ВыводитьЦенуСНалогами
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.ВсегоВВалютеРеглУчета / ТаблицаТовары.Количество КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаТовары.СуммаДоходаВВалютеРеглУчета / ТаблицаТовары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК ЦенаВВалютеРеглУчета,
		|	ТаблицаТовары.СуммаВВалютеРеглУчета КАК СуммаВВалютеРеглУчета,
		|	ТаблицаТовары.СуммаНДСВВалютеРеглУчета КАК СуммаНДСВВалютеРеглУчета,
		|	ТаблицаТовары.СуммаНСПВВалютеРеглУчета КАК СуммаНСПВВалютеРеглУчета,
		|	ТаблицаТовары.ВсегоВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
		|	ТаблицаТовары.СуммаДоходаВВалютеРеглУчета КАК СуммаДоходаВВалютеРеглУчета,
		|	ТаблицаТовары.Номенклатура.КодТНВЭД КАК КодТНВЭД,
		|	""Товар"" КАК ТипТовара,
		|	"""" КАК ДополнительныеСведения,
		|	ТаблицаТовары.СуммаСкидки КАК СуммаСкидки,
		|	ТаблицаТовары.СуммаСкидкиВВалютеРеглУчета КАК СуммаСкидкиВВалютеРеглУчета
		|ПОМЕСТИТЬ ВременнаяТаблицаСтроки
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка В(&СписокДокументов)
		|	И НЕ ТаблицаТовары.Ссылка.ГруппироватьПоНоменклатуре
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаУслуги.Ссылка,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.Номенклатура.ЕдиницаИзмерения.Наименование,
		|	ТаблицаУслуги.Количество,
		|	ВЫБОР
		|		КОГДА ТаблицаУслуги.Ссылка.ВыводитьЦенуСНалогами
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаУслуги.Всего / ТаблицаУслуги.Количество КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаУслуги.СуммаДохода / ТаблицаУслуги.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ,
		|	ТаблицаУслуги.Сумма,
		|	ТаблицаУслуги.СуммаНДС,
		|	ТаблицаУслуги.СуммаНСП,
		|	ТаблицаУслуги.Всего,
		|	ТаблицаУслуги.СуммаДохода,
		|	ВЫБОР
		|		КОГДА ТаблицаУслуги.Ссылка.ВыводитьЦенуСНалогами
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаУслуги.ВсегоВВалютеРеглУчета / ТаблицаУслуги.Количество КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаУслуги.СуммаДоходаВВалютеРеглУчета / ТаблицаУслуги.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ,
		|	ТаблицаУслуги.СуммаВВалютеРеглУчета,
		|	ТаблицаУслуги.СуммаНДСВВалютеРеглУчета,
		|	ТаблицаУслуги.СуммаНСПВВалютеРеглУчета,
		|	ТаблицаУслуги.ВсегоВВалютеРеглУчета,
		|	ТаблицаУслуги.СуммаДоходаВВалютеРеглУчета,
		|	ТаблицаУслуги.Номенклатура.КодТНВЭД,
		|	""Услуга"",
		|	ТаблицаУслуги.ДополнительныеСведения,
		|	ТаблицаУслуги.СуммаСкидки,
		|	ТаблицаУслуги.СуммаСкидкиВВалютеРеглУчета
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК ТаблицаУслуги
		|ГДЕ
		|	ТаблицаУслуги.Ссылка В(&СписокДокументов)
		|	И НЕ ТаблицаУслуги.Ссылка.ГруппироватьПоНоменклатуре
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаОС.Ссылка,
		|	ТаблицаОС.ОсновноеСредство,
		|	НЕОПРЕДЕЛЕНО,
		|	1,
		|	ВЫБОР
		|		КОГДА ТаблицаОС.Ссылка.ВыводитьЦенуСНалогами
		|			ТОГДА ТаблицаОС.Всего
		|		ИНАЧЕ ТаблицаОС.СуммаДохода
		|	КОНЕЦ,
		|	ТаблицаОС.Сумма,
		|	ТаблицаОС.СуммаНДС,
		|	ТаблицаОС.СуммаНСП,
		|	ТаблицаОС.Всего,
		|	ТаблицаОС.СуммаДохода,
		|	ВЫБОР
		|		КОГДА ТаблицаОС.Ссылка.ВыводитьЦенуСНалогами
		|			ТОГДА ТаблицаОС.ВсегоВВалютеРеглУчета
		|		ИНАЧЕ ТаблицаОС.СуммаДоходаВВалютеРеглУчета
		|	КОНЕЦ,
		|	ТаблицаОС.СуммаВВалютеРеглУчета,
		|	ТаблицаОС.СуммаНДСВВалютеРеглУчета,
		|	ТаблицаОС.СуммаНСПВВалютеРеглУчета,
		|	ТаблицаОС.ВсегоВВалютеРеглУчета,
		|	ТаблицаОС.СуммаДоходаВВалютеРеглУчета,
		|	НЕОПРЕДЕЛЕНО,
		|	""ОС"",
		|	"""",
		|	ТаблицаОС.СуммаСкидки,
		|	ТаблицаОС.СуммаСкидкиВВалютеРеглУчета
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.ОС КАК ТаблицаОС
		|ГДЕ
		|	ТаблицаОС.Ссылка В(&СписокДокументов)
		|	И НЕ ТаблицаОС.Ссылка.ГруппироватьПоНоменклатуре
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСгруппированныеСтроки.Ссылка,
		|	ТаблицаСгруппированныеСтроки.Номенклатура,
		|	ТаблицаСгруппированныеСтроки.ЕдиницаИзмерения,
		|	ТаблицаСгруппированныеСтроки.Количество,
		|	ВЫБОР
		|		КОГДА ТаблицаСгруппированныеСтроки.Ссылка.ВыводитьЦенуСНалогами
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаСгруппированныеСтроки.Всего / ТаблицаСгруппированныеСтроки.Количество КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаСгруппированныеСтроки.СуммаДохода / ТаблицаСгруппированныеСтроки.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ,
		|	ТаблицаСгруппированныеСтроки.Сумма,
		|	ТаблицаСгруппированныеСтроки.СуммаНДС,
		|	ТаблицаСгруппированныеСтроки.СуммаНСП,
		|	ТаблицаСгруппированныеСтроки.Всего,
		|	ТаблицаСгруппированныеСтроки.СуммаДохода,
		|	ВЫБОР
		|		КОГДА ТаблицаСгруппированныеСтроки.Ссылка.ВыводитьЦенуСНалогами
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаСгруппированныеСтроки.ВсегоВВалютеРеглУчета / ТаблицаСгруппированныеСтроки.Количество КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаСгруппированныеСтроки.СуммаДоходаВВалютеРеглУчета / ТаблицаСгруппированныеСтроки.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ,
		|	ТаблицаСгруппированныеСтроки.СуммаВВалютеРеглУчета,
		|	ТаблицаСгруппированныеСтроки.СуммаНДСВВалютеРеглУчета,
		|	ТаблицаСгруппированныеСтроки.СуммаНСПВВалютеРеглУчета,
		|	ТаблицаСгруппированныеСтроки.ВсегоВВалютеРеглУчета,
		|	ТаблицаСгруппированныеСтроки.СуммаДоходаВВалютеРеглУчета,
		|	ТаблицаСгруппированныеСтроки.Номенклатура.КодТНВЭД,
		|	ТаблицаСгруппированныеСтроки.ТипТовара,
		|	ТаблицаСгруппированныеСтроки.ДополнительныеСведения,
		|	ТаблицаСгруппированныеСтроки.СуммаСкидки,
		|	ТаблицаСгруппированныеСтроки.СуммаСкидкиВВалютеРеглУчета
		|ИЗ
		|	ВременнаяТаблицаСгруппированныеСтроки КАК ТаблицаСгруппированныеСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСтроки.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаСтроки.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаСтроки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВременнаяТаблицаСтроки.Количество КАК Количество,
		|	ВременнаяТаблицаСтроки.Цена КАК Цена,
		|	ВременнаяТаблицаСтроки.СуммаНДС КАК СуммаНДС,
		|	ВременнаяТаблицаСтроки.СуммаНСП КАК СуммаНСП,
		|	ВременнаяТаблицаСтроки.Всего - ВременнаяТаблицаСтроки.СуммаСкидки КАК Всего,
		|	ВременнаяТаблицаСтроки.СуммаДохода КАК Стоимость,
		|	ВременнаяТаблицаСтроки.КодТНВЭД КАК КодТНВЭД,
		|	ВременнаяТаблицаСтроки.ТипТовара КАК ТипТовара,
		|	ВременнаяТаблицаСтроки.ДополнительныеСведения КАК ДополнительныеСведения,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСтроки.ДополнительныеСведения = """"
		|			ТОГДА ВременнаяТаблицаСтроки.Номенклатура.НаименованиеПолное
		|		ИНАЧЕ ВременнаяТаблицаСтроки.ДополнительныеСведения
		|	КОНЕЦ КАК НоменклатураПредставление,
		|	ВременнаяТаблицаСтроки.СуммаСкидки КАК СуммаСкидки
		|ИЗ
		|	ВременнаяТаблицаСтроки КАК ВременнаяТаблицаСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументыСИсходнымиСуммами КАК ВременнаяТаблицаДокументыСИсходнымиСуммами
		|		ПО ВременнаяТаблицаСтроки.Ссылка = ВременнаяТаблицаДокументыСИсходнымиСуммами.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСтроки.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаДокументыДляПересчета.Курс КАК Курс,
		|	ВременнаяТаблицаДокументыДляПересчета.Кратность КАК Кратность,
		|	ВременнаяТаблицаСтроки.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаСтроки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВременнаяТаблицаСтроки.Количество КАК Количество,
		|	ВременнаяТаблицаСтроки.ЦенаВВалютеРеглУчета КАК Цена,
		|	ВременнаяТаблицаСтроки.СуммаНДСВВалютеРеглУчета КАК СуммаНДС,
		|	ВременнаяТаблицаСтроки.СуммаНСПВВалютеРеглУчета КАК СуммаНСП,
		|	ВременнаяТаблицаСтроки.ВсегоВВалютеРеглУчета - ВременнаяТаблицаСтроки.СуммаСкидкиВВалютеРеглУчета КАК Всего,
		|	ВременнаяТаблицаСтроки.СуммаДоходаВВалютеРеглУчета КАК Стоимость,
		|	ВременнаяТаблицаСтроки.КодТНВЭД КАК КодТНВЭД,
		|	ВременнаяТаблицаСтроки.ТипТовара КАК ТипТовара,
		|	ВременнаяТаблицаСтроки.ДополнительныеСведения КАК ДополнительныеСведения,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаСтроки.ДополнительныеСведения = """"
		|			ТОГДА ВременнаяТаблицаСтроки.Номенклатура.НаименованиеПолное
		|		ИНАЧЕ ВременнаяТаблицаСтроки.ДополнительныеСведения
		|	КОНЕЦ КАК НоменклатураПредставление,
		|	ВременнаяТаблицаСтроки.СуммаСкидкиВВалютеРеглУчета КАК СуммаСкидкиВВалютеРеглУчета
		|ИЗ
		|	ВременнаяТаблицаСтроки КАК ВременнаяТаблицаСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументыДляПересчета КАК ВременнаяТаблицаДокументыДляПересчета
		|		ПО ВременнаяТаблицаСтроки.Ссылка = ВременнаяТаблицаДокументыДляПересчета.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаШапка.Номер КАК Номер,
		|	ВременнаяТаблицаШапка.Дата КАК Дата,
		|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДокумента,
		|	ВременнаяТаблицаШапка.Курс КАК Курс,
		|	ВременнаяТаблицаШапка.Кратность КАК Кратность,
		|	ВременнаяТаблицаШапка.ЭкспортнаяПоставка КАК ЭкспортнаяПоставка,
		|	ВременнаяТаблицаШапка.СуммаВключаетНалоги КАК СуммаВключаетНалоги,
		|	ВременнаяТаблицаШапка.ПечатьВРегламентированнойВалюте КАК ПечатьВРегламентированнойВалюте,
		|	ВременнаяТаблицаШапка.ПечататьКурсИСуммуВРегламентированнойВалюте КАК ПечататьКурсИСуммуВРегламентированнойВалюте,
		|	ВременнаяТаблицаШапка.ВыводитьКомментарийВНаименование КАК ВыводитьКомментарийВНаименование,
		|	ВременнаяТаблицаШапка.Комментарий КАК Комментарий,
		|	ВременнаяТаблицаШапка.ВидПоставкиНДС КАК ВидПоставкиНДС,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.ОрганизацияПредставление КАК ОрганизацияПредставление,
		|	ВременнаяТаблицаШапка.ИННОрганизации КАК ИННОрганизации,
		|	ВременнаяТаблицаШапка.ГНСОрганизации КАК ГНСОрганизации,
		|	ВременнаяТаблицаШапка.КодГНСОрганизации КАК КодГНСОрганизации,
		|	ВременнаяТаблицаШапка.ФайлЛоготип КАК ФайлЛоготип,
		|	ВременнаяТаблицаШапка.НомерБанковскогоСчетаОрганизации КАК НомерБанковскогоСчетаОрганизации,
		|	ВременнаяТаблицаШапка.БикБанкаОрганизации КАК БикБанкаОрганизации,
		|	ВременнаяТаблицаШапка.НаименованиеБанкаОрганизации КАК НаименованиеБанкаОрганизации,
		|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаШапка.НомерБланкаСФ КАК НомерБланкаСФ,
		|	ВременнаяТаблицаШапка.СерияБланкаСФ КАК СерияБланкаСФ,
		|	ВременнаяТаблицаШапка.ДатаСФ КАК ДатаСФ,
		|	ВременнаяТаблицаШапка.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ВременнаяТаблицаШапка.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаШапка.СтавкаНСП КАК СтавкаНСП,
		|	ВременнаяТаблицаШапка.СтавкаНСПУслуги КАК СтавкаНСПУслуги
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПечататьСчетаФактурыСГоловнымКонтрагентом", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьЗначениеКонстанты("ПечататьСчетаФактурыСГоловнымКонтрагентом"));
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("СчетФактураВВалюте", СчетФактураВВалюте);
	 
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Шапка = РезультатЗапроса[7].Выбрать();
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	
		ДанныеУчетнойПолитикиОрганизаций = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(НачалоМесяца(Шапка.Дата), Шапка.Организация);
		ПлательщикНДС = ДанныеУчетнойПолитикиОрганизаций.ПлательщикНДС;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;
		ДанныеПечати.Вставить("НомерОтчета", ?(КоличествоСтрокСчетаФактуры = 20,"001","002"));
		ДанныеПечати.Вставить("НомерПриложения", ?(КоличествоСтрокСчетаФактуры = 20,"2","3"));
		ДанныеПечати.Вставить("НомерБланкаСФ", ?(ПлательщикНДС ИЛИ ЗначениеЗаполнено(Шапка.НомерБланкаСФ), Шапка.НомерБланкаСФ, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер)));
		ДанныеПечати.Вставить("СерияБланкаСФ", Шапка.СерияБланкаСФ);
		ДанныеПечати.Вставить("ТипПоставки", ?(Шапка.ЭкспортнаяПоставка, "Экспорт", "Внутренняя"));
		ДанныеПечати.Вставить("ВидПлатежа", ?(Шапка.БезналичныйРасчет, "Безналичная", "Наличная"));
		ДанныеПечати.Вставить("ВидПоставки", Шапка.ВидПоставкиНДС);
		
		ДанныеПечати.Вставить("ТекстЗаголовка", НСтр("ru = 'СЧЕТ-ФАКТУРА НДС'"));
		ДанныеПечати.Вставить("ДатаПоставки", Формат(Шапка.Дата,"ДЛФ=DD"));
		ДанныеПечати.Вставить("БанкПоставщика", Шапка.НаименованиеБанкаОрганизации);		
		
		ДанныеПечати.Вставить("ФайлЛоготип", Шапка.ФайлЛоготип);

		ПредставлениеПоставщика = "";
		Организация = Шапка.Организация;
		ИНН = Шапка.ИННОрганизации;
	    ГНС = Шапка.ГНСОрганизации;
	    КодГНС = Шапка.КодГНСОрганизации;
		
		ПредставлениеПоставщика = Шапка.ОрганизацияПредставление;
		
		ДатаСФ = Формат(?(ПлательщикНДС ИЛИ ЗначениеЗаполнено(Шапка.ДатаСФ), Шапка.ДатаСФ, Шапка.Дата), "ДЛФ=D");              
		ДанныеПечати.Вставить("Дата1", Сред(ДатаСФ,1,1));
		ДанныеПечати.Вставить("Дата2", Сред(ДатаСФ,2,1));
		ДанныеПечати.Вставить("Дата3", Сред(ДатаСФ,4,1));
		ДанныеПечати.Вставить("Дата4", Сред(ДатаСФ,5,1));
		ДанныеПечати.Вставить("Дата5", Сред(ДатаСФ,7,1));
		ДанныеПечати.Вставить("Дата6", Сред(ДатаСФ,8,1));
		ДанныеПечати.Вставить("Дата7", Сред(ДатаСФ,9,1));
		ДанныеПечати.Вставить("Дата8", Сред(ДатаСФ,10,1));
		
		ДанныеПечати.Вставить("ИННПост1", Сред(ИНН,1,1));
		ДанныеПечати.Вставить("ИННПост2", Сред(ИНН,2,1));
		ДанныеПечати.Вставить("ИННПост3", Сред(ИНН,3,1));
		ДанныеПечати.Вставить("ИННПост4", Сред(ИНН,4,1));
		ДанныеПечати.Вставить("ИННПост5", Сред(ИНН,5,1));
		ДанныеПечати.Вставить("ИННПост6", Сред(ИНН,6,1));
		ДанныеПечати.Вставить("ИННПост7", Сред(ИНН,7,1));
		ДанныеПечати.Вставить("ИННПост8", Сред(ИНН,8,1));
		ДанныеПечати.Вставить("ИННПост9", Сред(ИНН,9,1));
		ДанныеПечати.Вставить("ИННПост10", Сред(ИНН,10,1));
		ДанныеПечати.Вставить("ИННПост11", Сред(ИНН,11,1));
		ДанныеПечати.Вставить("ИННПост12", Сред(ИНН,12,1));
		ДанныеПечати.Вставить("ИННПост13", Сред(ИНН,13,1));
		ДанныеПечати.Вставить("ИННПост14", Сред(ИНН,14,1));

        БИК = Шапка.БикБанкаОрганизации;
		ДанныеПечати.Вставить("КодБанкаПоставщика1", Сред(БИК,1,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика2", Сред(БИК,2,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика3", Сред(БИК,3,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика4", Сред(БИК,4,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика5", Сред(БИК,5,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика6", Сред(БИК,6,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика7", Сред(БИК,7,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика8", Сред(БИК,8,1));
		ДанныеПечати.Вставить("КодБанкаПоставщика9", Сред(БИК,9,1));		
		
		НомерСчета = Шапка.НомерБанковскогоСчетаОрганизации;
		ДанныеПечати.Вставить("СчетПоставщика1", Сред(НомерСчета,1,1));		
		ДанныеПечати.Вставить("СчетПоставщика2", Сред(НомерСчета,2,1));		
		ДанныеПечати.Вставить("СчетПоставщика3", Сред(НомерСчета,3,1));		
		ДанныеПечати.Вставить("СчетПоставщика4", Сред(НомерСчета,4,1));		
		ДанныеПечати.Вставить("СчетПоставщика5", Сред(НомерСчета,5,1));		
		ДанныеПечати.Вставить("СчетПоставщика6", Сред(НомерСчета,6,1));		
		ДанныеПечати.Вставить("СчетПоставщика7", Сред(НомерСчета,7,1));		
		ДанныеПечати.Вставить("СчетПоставщика8", Сред(НомерСчета,8,1));		
		ДанныеПечати.Вставить("СчетПоставщика9", Сред(НомерСчета,9,1));		
		ДанныеПечати.Вставить("СчетПоставщика10", Сред(НомерСчета,10,1));		
		ДанныеПечати.Вставить("СчетПоставщика11", Сред(НомерСчета,11,1));		
		ДанныеПечати.Вставить("СчетПоставщика12", Сред(НомерСчета,12,1));		
		ДанныеПечати.Вставить("СчетПоставщика13", Сред(НомерСчета,13,1));		
		ДанныеПечати.Вставить("СчетПоставщика14", Сред(НомерСчета,14,1));		
		ДанныеПечати.Вставить("СчетПоставщика15", Сред(НомерСчета,15,1));		
		ДанныеПечати.Вставить("СчетПоставщика16", Сред(НомерСчета,16,1));		
		
		ДанныеПечати.Вставить("ГНСПоставщика1", Сред(КодГНС,1,1));		
		ДанныеПечати.Вставить("ГНСПоставщика2", Сред(КодГНС,2,1));		
		ДанныеПечати.Вставить("ГНСПоставщика3", Сред(КодГНС,3,1));		

		ДанныеПечати.Вставить("НаименованиеГНСПоставщика", ГНС);		
		ДанныеПечати.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);		
		
		АдресПоставщика = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Шапка.Дата); 
		ДанныеПечати.Вставить("АдресПоставщика", АдресПоставщика);		

		// Данные по контрагенту
		СведенияОКонтрагенте = БухгалтерскийУчетСервер.ПолучитьСведенияОКонтрагенте(Шапка.Контрагент);
		
		ДанныеПечати.Вставить("ПредставлениеПокупателя", СведенияОКонтрагенте.НаименованиеПолное);
		
		ВыводДопИнформацииПоКонтрагенту = БухгалтерскийУчетСервер.ПолучитьПризнакПатентаПоКонтрагенту(Шапка.Контрагент) ИЛИ
			(Шапка.Контрагент.СтранаРезидентства = Справочники.СтраныМира.Киргизия ИЛИ Шапка.Контрагент.СтранаРезидентства.УчастникЕАЭС);
		
		Если ВыводДопИнформацииПоКонтрагенту Тогда
			ДанныеПечати.Вставить("НаименованиеГНСПокупателя", СведенияОКонтрагенте.ГНСНаименование);
			КодГНСКонтрагента = СведенияОКонтрагенте.ГНСКод;
			ДанныеПечати.Вставить("ГНСПокупателя1", Сред(КодГНСКонтрагента,1,1));		
			ДанныеПечати.Вставить("ГНСПокупателя2", Сред(КодГНСКонтрагента,2,1));		
			ДанныеПечати.Вставить("ГНСПокупателя3", Сред(КодГНСКонтрагента,3,1));
		Иначе
			ДанныеПечати.Вставить("НаименованиеГНСПокупателя", "отсутствует");
		КонецЕсли;
		
		ДанныеПечати.Вставить("АдресПокупателя", СведенияОКонтрагенте.АдрЮР);		
		
		ИННКонтрагента = СведенияОКонтрагенте.ИНН;
		ДанныеПечати.Вставить("ИННПок1", Сред(ИННКонтрагента,1,1));		
		ДанныеПечати.Вставить("ИННПок2", Сред(ИННКонтрагента,2,1));		
		ДанныеПечати.Вставить("ИННПок3", Сред(ИННКонтрагента,3,1));		
		ДанныеПечати.Вставить("ИННПок4", Сред(ИННКонтрагента,4,1));		
		ДанныеПечати.Вставить("ИННПок5", Сред(ИННКонтрагента,5,1));		
		ДанныеПечати.Вставить("ИННПок6", Сред(ИННКонтрагента,6,1));		
		ДанныеПечати.Вставить("ИННПок7", Сред(ИННКонтрагента,7,1));		
		ДанныеПечати.Вставить("ИННПок8", Сред(ИННКонтрагента,8,1));		
		ДанныеПечати.Вставить("ИННПок9", Сред(ИННКонтрагента,9,1));		
		ДанныеПечати.Вставить("ИННПок10", Сред(ИННКонтрагента,10,1));		
		ДанныеПечати.Вставить("ИННПок11", Сред(ИННКонтрагента,11,1));		
		ДанныеПечати.Вставить("ИННПок12", Сред(ИННКонтрагента,12,1));		
		ДанныеПечати.Вставить("ИННПок13", Сред(ИННКонтрагента,13,1));		
		ДанныеПечати.Вставить("ИННПок14", Сред(ИННКонтрагента,14,1));		
		
				
		
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.НомерСчета) И ВыводДопИнформацииПоКонтрагенту Тогда 
			НомерСчетаКонтрагента = СведенияОКонтрагенте.НомерСчета;
			ДанныеПечати.Вставить("СчетПокупателя1", Сред(НомерСчетаКонтрагента,1,1));		
			ДанныеПечати.Вставить("СчетПокупателя2", Сред(НомерСчетаКонтрагента,2,1));		
			ДанныеПечати.Вставить("СчетПокупателя3", Сред(НомерСчетаКонтрагента,3,1));		
			ДанныеПечати.Вставить("СчетПокупателя4", Сред(НомерСчетаКонтрагента,4,1));		
			ДанныеПечати.Вставить("СчетПокупателя5", Сред(НомерСчетаКонтрагента,5,1));		
			ДанныеПечати.Вставить("СчетПокупателя6", Сред(НомерСчетаКонтрагента,6,1));		
			ДанныеПечати.Вставить("СчетПокупателя7", Сред(НомерСчетаКонтрагента,7,1));		
			ДанныеПечати.Вставить("СчетПокупателя8", Сред(НомерСчетаКонтрагента,8,1));		
			ДанныеПечати.Вставить("СчетПокупателя9", Сред(НомерСчетаКонтрагента,9,1));		
			ДанныеПечати.Вставить("СчетПокупателя10", Сред(НомерСчетаКонтрагента,10,1));		
			ДанныеПечати.Вставить("СчетПокупателя11", Сред(НомерСчетаКонтрагента,11,1));		
			ДанныеПечати.Вставить("СчетПокупателя12", Сред(НомерСчетаКонтрагента,12,1));		
			ДанныеПечати.Вставить("СчетПокупателя13", Сред(НомерСчетаКонтрагента,13,1));		
			ДанныеПечати.Вставить("СчетПокупателя14", Сред(НомерСчетаКонтрагента,14,1));
			ДанныеПечати.Вставить("СчетПокупателя15", Сред(НомерСчетаКонтрагента,15,1));		
			ДанныеПечати.Вставить("СчетПокупателя16", Сред(НомерСчетаКонтрагента,16,1));
			
			БикБанкаКонтрагента = СведенияОКонтрагенте.БИКБанка;
			ДанныеПечати.Вставить("КодБанкаПокупателя1", Сред(БикБанкаКонтрагента,1,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя2", Сред(БикБанкаКонтрагента,2,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя3", Сред(БикБанкаКонтрагента,3,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя4", Сред(БикБанкаКонтрагента,4,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя5", Сред(БикБанкаКонтрагента,5,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя6", Сред(БикБанкаКонтрагента,6,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя7", Сред(БикБанкаКонтрагента,7,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя8", Сред(БикБанкаКонтрагента,8,1));		
			ДанныеПечати.Вставить("КодБанкаПокупателя9", Сред(БикБанкаКонтрагента,9,1));		
			
			ДанныеПечати.Вставить("БанкПокупателя", СведенияОКонтрагенте.Банк);
		Иначе 	
			// Отсутствует
			ДанныеПечати.Вставить("СчетПокупателя1","о");
			ДанныеПечати.Вставить("СчетПокупателя2","т");
			ДанныеПечати.Вставить("СчетПокупателя3","с");
			ДанныеПечати.Вставить("СчетПокупателя4","у");
			ДанныеПечати.Вставить("СчетПокупателя5","т");
			ДанныеПечати.Вставить("СчетПокупателя6","с");
			ДанныеПечати.Вставить("СчетПокупателя7","т");
			ДанныеПечати.Вставить("СчетПокупателя8","в");
			ДанныеПечати.Вставить("СчетПокупателя9","у");
			ДанныеПечати.Вставить("СчетПокупателя10","е");
			ДанныеПечати.Вставить("СчетПокупателя11","т");	

			ДанныеПечати.Вставить("БанкПокупателя", "отсутствует");
		КонецЕсли;	
		
		// Таблицы
		ПараметрыОтбора = Новый Структура("Ссылка", Шапка.Ссылка);
		
		ТаблицаИсходныеДанные 		= РезультатЗапроса[5].Выгрузить();
		ТаблицаПересчитанныеДанные 	= РезультатЗапроса[6].Выгрузить();
		ТаблицаИсходныеДанные.Индексы.Добавить("Ссылка");
		ТаблицаПересчитанныеДанные.Индексы.Добавить("Ссылка");
		
		ПересчитаннаяТаблица = Неопределено;
		ИсходнаяТаблица = Неопределено;
		
		Если Шапка.ПечатьВРегламентированнойВалюте ИЛИ Шапка.ПечататьКурсИСуммуВРегламентированнойВалюте ИЛИ СчетФактураВВалюте Тогда
			ПересчитаннаяТаблица = ТаблицаПересчитанныеДанные.Скопировать(ПараметрыОтбора);
			ПересчитаннаяТаблица.Индексы.Добавить("Ссылка");
			ПересчитаннаяТаблица.Индексы.Добавить("Номенклатура");
			ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		КонецЕсли;	
		
		Если НЕ Шапка.ПечатьВРегламентированнойВалюте Тогда
			ИсходнаяТаблица = ТаблицаИсходныеДанные.Скопировать(ПараметрыОтбора);
			ИсходнаяТаблица.Индексы.Добавить("Ссылка");
			ИсходнаяТаблица.Индексы.Добавить("Номенклатура");
		КонецЕсли;
		
		КоличествоСтрок = 0;
		
		//ВсегоСуммаСкидкиИсходная = 0;
		//ВсегоСуммаСкидкиПересчитанная = 0;
		
		// Итоги по исходным суммам
		Если ИсходнаяТаблица <> Неопределено Тогда		
			ВсегоСтоимостьИсходная = ИсходнаяТаблица.Итог("Стоимость");
			ВсегоИсходная = ИсходнаяТаблица.Итог("Всего");
			ВсегоНДСИсходная = ИсходнаяТаблица.Итог("СуммаНДС");
			ВсегоНСПИсходная = ИсходнаяТаблица.Итог("СуммаНСП");
			//ВсегоСуммаСкидкиИсходная = ИсходнаяТаблица.Итог("СуммаСкидки");
			КоличествоСтрок = ИсходнаяТаблица.Количество();
			
			// Если пересчитанных сумм нет, то итоговая строка будет одна,
			// поэтому используется строка итогов, которая находится в области "Подвал" и 
			// названия параметров задаются соответственно этой области. 
			// Если пересчитанные суммы есть, то итоговых строки будет две 
			// (с исходными суммами и с пересчитанными), поэтому будет задействована область
			// "ИсходныйИтог" и параметры соответственно именуем как они указаны в данной области.
			Если ПересчитаннаяТаблица = Неопределено Тогда
				ДанныеПечати.Вставить("ВсегоСтоимость", ВсегоСтоимостьИсходная);
				ДанныеПечати.Вставить("Всего", ВсегоИсходная);
				ДанныеПечати.Вставить("ВсегоНДС", ВсегоНДСИсходная);
				ДанныеПечати.Вставить("ВсегоНСП", ВсегоНСПИсходная);
				
				Если Шапка.ПечатьВРегламентированнойВалюте Тогда 
					ДанныеПечати.Вставить("Валюта", " (" + ВалютаРегламентированногоУчета + ")");
				Иначе
					ДанныеПечати.Вставить("Валюта", " (" + Шапка.ВалютаДокумента + ")");
				КонецЕсли;
			Иначе
				ДанныеПечати.Вставить("ВсегоСтоимостьИсходная", ВсегоСтоимостьИсходная);
				ДанныеПечати.Вставить("ВсегоИсходная", ВсегоИсходная);
				ДанныеПечати.Вставить("ВсегоНДСИсходная", ВсегоНДСИсходная);
				ДанныеПечати.Вставить("ВсегоНСПИсходная", ВсегоНСПИсходная);
				
				ДанныеПечати.Вставить("ВалютаИсходная", " (" + Шапка.ВалютаДокумента + ")");
			КонецЕсли;
		КонецЕсли;
		
		// Итоги по пересчитанным суммам
		Если ПересчитаннаяТаблица <> Неопределено Тогда
			ВсегоСтоимостьПересчитанная = ПересчитаннаяТаблица.Итог("Стоимость");
			ВсегоПересчитанная = ПересчитаннаяТаблица.Итог("Всего");
			ВсегоНДСПересчитанная = ПересчитаннаяТаблица.Итог("СуммаНДС");
			ВсегоНСППересчитанная = ПересчитаннаяТаблица.Итог("СуммаНСП");
			//ВсегоСуммаСкидкиПересчитанная = ПересчитаннаяТаблица.Итог("СуммаСкидки");
			КоличествоСтрок = КоличествоСтрок + ПересчитаннаяТаблица.Количество();
			
			ДанныеПечати.Вставить("ВсегоСтоимость", ВсегоСтоимостьПересчитанная);
			ДанныеПечати.Вставить("Всего", ВсегоПересчитанная);
			ДанныеПечати.Вставить("ВсегоНДС", ВсегоНДСПересчитанная);
			ДанныеПечати.Вставить("ВсегоНСП", ВсегоНСППересчитанная);
			
			ДанныеПечати.Вставить("Валюта", " (" + ВалютаРегламентированногоУчета + ")");
		КонецЕсли;
		
		// Ставки
		Если Шапка.БезналичныйРасчет Тогда 
			ЗначениеСтавкиНСП = "0";
			ЗначениеСтавкиНСПУслуги = "0";
			ЗначениеСтавкиНСПОС = "0";
		Иначе 
			ЗначениеСтавкиНСП 		= УчетНДСВызовСервера.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, Шапка.СтавкаНСП);
			ЗначениеСтавкиНСПУслуги = УчетНДСВызовСервера.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, Шапка.СтавкаНСПУслуги);
			ЗначениеСтавкиНСПОС 	= УчетНДСВызовСервера.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, Справочники.СтавкиНСП.Прочее);
		КонецЕсли;
				
		ЗначениеСтавкиНДС = УчетНДСВызовСервера.ПолучитьСтавкуНДС(Шапка.Дата, Шапка.СтавкаНДС);
		//ДанныеПечати.Вставить("СтавкаНДС", ?(ЗначениеЗаполнено(ЗначениеСтавкиНДС), Строка(ЗначениеСтавкиНДС) + "%",""));
		ДанныеПечати.Вставить("СтавкаНДС", Строка(ЗначениеСтавкиНДС) + "%");
		ДанныеПечати.Вставить("СтавкаНСП", ?(ЗначениеЗаполнено(ЗначениеСтавкиНСП), Строка(ЗначениеСтавкиНСП) + "%",""));
		ДанныеПечати.Вставить("СтавкаНСПУслуги", ?(ЗначениеЗаполнено(ЗначениеСтавкиНСПУслуги), Строка(ЗначениеСтавкиНСПУслуги) + "%",""));
		ДанныеПечати.Вставить("СтавкаНСПОС", ?(ЗначениеЗаполнено(ЗначениеСтавкиНСПОС), Строка(ЗначениеСтавкиНСПОС) + "%",""));
		
		//// Скидка
		//ЕстьСкидка = Ложь;
		//Если ВсегоСуммаСкидкиИсходная > 0 Тогда								
		//	ЕстьСкидка = Истина;
		//	ДанныеПечати.Вставить("СтоимостьСкидка", 0);
		//	ДанныеПечати.Вставить("СуммаНДССкидка",  0);
		//	ДанныеПечати.Вставить("СуммаНСПСкидка",  0);
		//	ДанныеПечати.Вставить("ВсегоСкидка", 	 0);
		//КонецЕсли;
		//
		//ЕстьПересчитаннаяСкидка = Ложь;
		//Если ВсегоСуммаСкидкиПересчитанная > 0 Тогда								
		//	ЕстьПересчитаннаяСкидка = Истина;
		//	ДанныеПечати.Вставить("СтоимостьСкидкаПересчитанная", 0);
		//	ДанныеПечати.Вставить("СуммаНДССкидкаПересчитанная",  0);
		//	ДанныеПечати.Вставить("СуммаНСПСкидкаПересчитанная",  0);
		//	ДанныеПечати.Вставить("ВсегоСкидкаПересчитанная", 	  0);
		//КонецЕсли;

		// Информация подвала
		ТекстОКоличестве = СтрШаблон("%1 %2", КоличествоСтрокСчетаФактуры, ?(КоличествоСтрокСчетаФактуры = 20,"(двадцати)","(семи)"));
		ДанныеПечати.Вставить("РазрешенноеКолвоСтрок", ТекстОКоличестве);
		ДанныеПечати.Вставить("НомерОтчета", ?(КоличествоСтрокСчетаФактуры = 20,"001","002"));
		
		// Области
		МассивОбластейМакета = Новый Массив;
		
		Если СчетФактураВВалюте Тогда
			МассивОбластейМакета.Добавить("ЗаголовокСФВВалюте");
		Иначе
			МассивОбластейМакета.Добавить("Заголовок");
		КонецЕсли;
		
		МассивОбластейМакета.Добавить("Шапка");
		
		Если СчетФактураВВалюте Тогда
			МассивОбластейМакета.Добавить("ШапкаТаблицыВВалюте");
			МассивОбластейМакета.Добавить("СтрокаСФВВалюте");
		Иначе
			МассивОбластейМакета.Добавить("ШапкаТаблицы");
			МассивОбластейМакета.Добавить("Строка");
		КонецЕсли;
		
		//Если ЕстьСкидка Тогда 
		//	МассивОбластейМакета.Добавить("СтрокаСоСкидкой");
		//КонецЕсли;
		//
		//Если ЕстьПересчитаннаяСкидка Тогда 
		//	МассивОбластейМакета.Добавить("ПересчитаннаяСтрокаСоСкидкой");
		//КонецЕсли;
		
		Если ДанныеПечати.Свойство("ВалютаИсходная") Тогда
			МассивОбластейМакета.Добавить("ИсходныйИтог");
		КонецЕсли;	
		
		МассивОбластейМакета.Добавить("ПодвалСФаксимиле");
		
		ДанныеПечатиСтроки = Новый Структура("КодТовара1, КодТовара2, КодТовара3, КодТовара4","0","0","0","0");
		
		ДанныеПечатиПустаяСтрока = Новый Структура();
		ДанныеПечатиПустаяСтрока.Вставить("КодТовара1", 				"");
		ДанныеПечатиПустаяСтрока.Вставить("КодТовара2", 				"");
		ДанныеПечатиПустаяСтрока.Вставить("КодТовара3", 				"");
		ДанныеПечатиПустаяСтрока.Вставить("КодТовара4", 				"");
		ДанныеПечатиПустаяСтрока.Вставить("Количество", 				"Х");
		ДанныеПечатиПустаяСтрока.Вставить("СтавкаНДС", 					"Х");
		ДанныеПечатиПустаяСтрока.Вставить("СтавкаНСП", 					"Х");
		ДанныеПечатиПустаяСтрока.Вставить("Стоимость", 					"Х");	
		ДанныеПечатиПустаяСтрока.Вставить("СуммаНДС", 					"Х");
		ДанныеПечатиПустаяСтрока.Вставить("СуммаНСП", 					"Х");
		ДанныеПечатиПустаяСтрока.Вставить("НоменклатураПредставление", 	"Х");   
		ДанныеПечатиПустаяСтрока.Вставить("ЕдиницаИзмерения",			"Х");
		ДанныеПечатиПустаяСтрока.Вставить("Цена", 						"Х");
		ДанныеПечатиПустаяСтрока.Вставить("Всего", 						"Х");
		
		Если СчетФактураВВалюте Тогда
			ДанныеПечатиПустаяСтрока.Вставить("НоменклатураПредставлениеСКурсом", 	"Х");
			ДанныеПечатиПустаяСтрока.Вставить("ЦенаВРеглВалюте", 					"Х");
			ДанныеПечатиПустаяСтрока.Вставить("СтоимостьВРеглВалюте", 				"Х");
			ДанныеПечатиПустаяСтрока.Вставить("СуммаНДСВРеглВалюте", 				"Х");
			ДанныеПечатиПустаяСтрока.Вставить("СуммаНСПВРеглВалюте", 				"Х");
			ДанныеПечатиПустаяСтрока.Вставить("ВсегоВРеглВалюте", 					"Х");
		КонецЕсли;	
				
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			
			Если ИмяОбласти <> "Строка" И ИмяОбласти <> "СтрокаСФВВалюте" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			Иначе
				СтруктураНоменклатура = Новый Структура();
				Если СчетФактураВВалюте Тогда
					СтруктураНоменклатура.Вставить("НоменклатураПредставлениеСКурсом", "");	
				Иначе
					СтруктураНоменклатура.Вставить("НоменклатураПредставление", "");	
				КонецЕсли;	
				
				Если (ИсходнаяТаблица <> Неопределено И ПересчитаннаяТаблица <> Неопределено)
					ИЛИ ИсходнаяТаблица <> Неопределено Тогда
					
					ОбластьМакетаДопСтрока = Неопределено;
					
					// Заготовка необходимых структур
					Если ПересчитаннаяТаблица <> Неопределено Тогда
						ОбластьМакетаДопСтрока = Макет.ПолучитьОбласть("ПересчитаннаяСтрока");
						СтруктураОтбора = Новый Структура();
						СтруктураОтбора.Вставить("Ссылка", );
						СтруктураОтбора.Вставить("Номенклатура", );
					КонецЕсли;
						
					Для Каждого СтрокаТаблицы Из ИсходнаяТаблица Цикл
						КодТНВЭД = ?(ЗначениеЗаполнено(СтрокаТаблицы.КодТНВЭД), СтрокаТаблицы.КодТНВЭД, "0000");
						ДанныеПечатиСтроки.КодТовара1 = Сред(КодТНВЭД,1,1);
						ДанныеПечатиСтроки.КодТовара2 = Сред(КодТНВЭД,2,1);
						ДанныеПечатиСтроки.КодТовара3 = Сред(КодТНВЭД,3,1);
						ДанныеПечатиСтроки.КодТовара4 = Сред(КодТНВЭД,4,1);
						
						Если ОбластьМакетаДопСтрока = Неопределено Тогда
							ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
							ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
							ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСтроки);
							
							Если Шапка.ВыводитьКомментарийВНаименование Тогда
								СтруктураНоменклатура.НоменклатураПредставление = СтрШаблон(НСтр("ru = '%1, %2'"),
									СтрокаТаблицы.НоменклатураПредставление,
									Шапка.Комментарий);
									
								ОбластьМакета.Параметры.Заполнить(СтруктураНоменклатура);
							КонецЕсли;
							
							// Заполнение ставки НСП
							Если СтрокаТаблицы.ТипТовара = "Товар" Тогда
								СтавкаНСП = ДанныеПечати.СтавкаНСП;
								ЗначениеСтавкиНСПРасчетное = ЗначениеСтавкиНСП;
							ИначеЕсли СтрокаТаблицы.ТипТовара = "Услуга" Тогда	
								СтавкаНСП = ДанныеПечати.СтавкаНСПУслуги;
								ЗначениеСтавкиНСПРасчетное = ЗначениеСтавкиНСПУслуги;
							Иначе
								СтавкаНСП = ДанныеПечати.СтавкаНСПОС;
								ЗначениеСтавкиНСПРасчетное = ЗначениеСтавкиНСПОС;
							КонецЕсли;
							
							//Если ЕстьСкидка Тогда
							//	СтоимостьСкидка = СтрокаТаблицы.СуммаСкидки * 100 / (100 + ЗначениеСтавкиНДС + ЗначениеСтавкиНСПРасчетное);
							//	СуммаНДССкидка 	= СтрокаТаблицы.СуммаСкидки * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС + ЗначениеСтавкиНСПРасчетное);
							//	
							//	ДанныеПечати.СтоимостьСкидка = ДанныеПечати.СтоимостьСкидка - СтоимостьСкидка;
							//	ДанныеПечати.СуммаНДССкидка = ДанныеПечати.СуммаНДССкидка - СуммаНДССкидка;
							//	ДанныеПечати.СуммаНСПСкидка = ДанныеПечати.СуммаНСПСкидка - (СтрокаТаблицы.СуммаСкидки - СтоимостьСкидка - СуммаНДССкидка);
							//	ДанныеПечати.ВсегоСкидка = ДанныеПечати.ВсегоСкидка - СтрокаТаблицы.СуммаСкидки;
							//КонецЕсли;	
								
							ОбластьМакета.Параметры.Заполнить(Новый Структура("СтавкаНСП", СтавкаНСП));
							ТабличныйДокумент.Вывести(ОбластьМакета);
							
						// Вывод основной строки с исходной суммой (к номенклатуре добавляется курс),
						// а затем вывод дополнительной строки с пересчитанными суммами.
						Иначе
							Если Шапка.ВыводитьКомментарийВНаименование Тогда
								Если СчетФактураВВалюте Тогда
									СтруктураНоменклатура.НоменклатураПредставлениеСКурсом = СтрШаблон(НСтр("ru = '%1, %2, курс %3'"),
										СтрокаТаблицы.НоменклатураПредставление,
										Шапка.Комментарий,
										Шапка.Курс);
								Иначе	
									СтруктураНоменклатура.НоменклатураПредставление = СтрШаблон(НСтр("ru = '%1, %2, курс %3'"),
										СтрокаТаблицы.НоменклатураПредставление,
										Шапка.Комментарий,
										Шапка.Курс);
								КонецЕсли;
							Иначе
								Если СчетФактураВВалюте Тогда
									СтруктураНоменклатура.НоменклатураПредставлениеСКурсом = СтрШаблон(НСтр("ru = '%1, курс %2'"),
										СтрокаТаблицы.НоменклатураПредставление,
										Шапка.Курс);
								Иначе	
									СтруктураНоменклатура.НоменклатураПредставление = СтрШаблон(НСтр("ru = '%1, курс %2'"),
										СтрокаТаблицы.НоменклатураПредставление,
										Шапка.Курс);
								КонецЕсли;
							КонецЕсли;	
														
							ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
							ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
							ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСтроки);
							ОбластьМакета.Параметры.Заполнить(СтруктураНоменклатура);
							
							Если СчетФактураВВалюте Тогда
								СтрутктураЦены = Новый Структура();
								СтрутктураЦены.Вставить("Цена", Строка(Формат(СтрокаТаблицы.Цена, "ЧДЦ=2; ЧВН=")) + " (" + Шапка.ВалютаДокумента + ")");
								ОбластьМакета.Параметры.Заполнить(СтрутктураЦены);
							КонецЕсли;
							
							// Заполнение ставки НСП
							Если СтрокаТаблицы.ТипТовара = "Товар" Тогда
								СтавкаНСП = ДанныеПечати.СтавкаНСП;
								ЗначениеСтавкиНСПРасчетное = ЗначениеСтавкиНСП;
							ИначеЕсли СтрокаТаблицы.ТипТовара = "Услуга" Тогда	
								СтавкаНСП = ДанныеПечати.СтавкаНСПУслуги;
								ЗначениеСтавкиНСПРасчетное = ЗначениеСтавкиНСПУслуги;
							Иначе
								СтавкаНСП = ДанныеПечати.СтавкаНСПОС;
								ЗначениеСтавкиНСПРасчетное = ЗначениеСтавкиНСПОС;
							КонецЕсли;
							
							//Если ЕстьСкидка Тогда
							//	СтоимостьСкидка = СтрокаТаблицы.СуммаСкидки * 100 / (100 + ЗначениеСтавкиНДС + ЗначениеСтавкиНСПРасчетное);
							//	СуммаНДССкидка 	= СтрокаТаблицы.СуммаСкидки * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС + ЗначениеСтавкиНСПРасчетное);
							//	
							//	ДанныеПечати.СтоимостьСкидка = ДанныеПечати.СтоимостьСкидка - СтоимостьСкидка;
							//	ДанныеПечати.СуммаНДССкидка = ДанныеПечати.СуммаНДССкидка - СуммаНДССкидка;
							//	ДанныеПечати.СуммаНСПСкидка = ДанныеПечати.СуммаНСПСкидка - (СтрокаТаблицы.СуммаСкидки - СтоимостьСкидка - СуммаНДССкидка);
							//	ДанныеПечати.ВсегоСкидка = ДанныеПечати.ВсегоСкидка - СтрокаТаблицы.СуммаСкидки;
							//КонецЕсли;	
								
							ОбластьМакета.Параметры.Заполнить(Новый Структура("СтавкаНСП", СтавкаНСП));
							
							Если НЕ СчетФактураВВалюте Тогда
								ТабличныйДокумент.Вывести(ОбластьМакета);
							КонецЕсли;
							
							ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы);
							
							Строки = ПересчитаннаяТаблица.НайтиСтроки(СтруктураОтбора);
							Если Строки.Количество() > 0 Тогда
								Данные = Строки[0];
								
								Если СтрокаТаблицы.ТипТовара = "Товар" Тогда
									СтавкаНСП = ДанныеПечати.СтавкаНСП;
									ЗначениеСтавкиНСПРасчетное = ЗначениеСтавкиНСП;
								ИначеЕсли СтрокаТаблицы.ТипТовара = "Услуга" Тогда	
									СтавкаНСП = ДанныеПечати.СтавкаНСПУслуги;
									ЗначениеСтавкиНСПРасчетное = ЗначениеСтавкиНСПУслуги;
								Иначе
									СтавкаНСП = ДанныеПечати.СтавкаНСПОС;
									ЗначениеСтавкиНСПРасчетное = ЗначениеСтавкиНСПОС;
								КонецЕсли;
								                                                                       
								Если СчетФактураВВалюте Тогда
									СтрутктураСуммВРеглВалюте = Новый Структура();
									СтрутктураСуммВРеглВалюте.Вставить("ЦенаВРеглВалюте", 		Строка(Формат(Данные.Цена, "ЧДЦ=2; ЧВН=")) + " (" + ВалютаРегламентированногоУчета + ")");
									СтрутктураСуммВРеглВалюте.Вставить("СтоимостьВРеглВалюте", 	Данные.Стоимость);
									СтрутктураСуммВРеглВалюте.Вставить("СуммаНДСВРеглВалюте", 	Данные.СуммаНДС);
									СтрутктураСуммВРеглВалюте.Вставить("СуммаНСПВРеглВалюте", 	Данные.СуммаНСП);
									СтрутктураСуммВРеглВалюте.Вставить("ВсегоВРеглВалюте", 		Данные.Всего);
									ОбластьМакета.Параметры.Заполнить(СтрутктураСуммВРеглВалюте);
								Иначе
									КодТНВЭД = ?(ЗначениеЗаполнено(Данные.КодТНВЭД), Данные.КодТНВЭД, "0000");
									ДанныеПечатиСтроки.КодТовара1 = Сред(КодТНВЭД,1,1);
									ДанныеПечатиСтроки.КодТовара2 = Сред(КодТНВЭД,2,1);
									ДанныеПечатиСтроки.КодТовара3 = Сред(КодТНВЭД,3,1);
									ДанныеПечатиСтроки.КодТовара4 = Сред(КодТНВЭД,4,1);
									
									ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
									ОбластьМакета.Параметры.Заполнить(Данные);
									ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСтроки);
									
									Если Шапка.ВыводитьКомментарийВНаименование Тогда
										СтруктураНоменклатура.НоменклатураПредставление = СтрШаблон(НСтр("ru = '%1, %2'"),
											Данные.НоменклатураПредставление,
											Шапка.Комментарий);
											
										ОбластьМакета.Параметры.Заполнить(СтруктураНоменклатура);
									КонецЕсли;
									
									// Заполнение ставки НСП
									ОбластьМакета.Параметры.Заполнить(Новый Структура("СтавкаНСП", СтавкаНСП));
								КонецЕсли;	
								
								//Если ЕстьПересчитаннаяСкидка Тогда
								//	СтоимостьСкидка = Данные.СуммаСкидки * 100 / (100 + ЗначениеСтавкиНДС + ЗначениеСтавкиНСПРасчетное);
								//	СуммаНДССкидка 	= Данные.СуммаСкидки * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС + ЗначениеСтавкиНСПРасчетное);
								//	
								//	ДанныеПечати.СтоимостьСкидкаПересчитанная = ДанныеПечати.СтоимостьСкидкаПересчитанная - СтоимостьСкидка;
								//	ДанныеПечати.СуммаНДССкидкаПересчитанная = ДанныеПечати.СуммаНДССкидкаПересчитанная - СуммаНДССкидка;
								//	ДанныеПечати.СуммаНСПСкидкаПересчитанная = ДанныеПечати.СуммаНСПСкидкаПересчитанная - (Данные.СуммаСкидки - СтоимостьСкидка - СуммаНДССкидка);
								//	ДанныеПечати.ВсегоСкидкаПересчитанная = ДанныеПечати.ВсегоСкидкаПересчитанная - Данные.СуммаСкидки;
								//КонецЕсли;	
									
								ТабличныйДокумент.Вывести(ОбластьМакета);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					Для Каждого СтрокаТаблицы Из ПересчитаннаяТаблица Цикл 
						КодТНВЭД = ?(ЗначениеЗаполнено(СтрокаТаблицы.КодТНВЭД), СтрокаТаблицы.КодТНВЭД, "0000");
						ДанныеПечатиСтроки.КодТовара1 = Сред(КодТНВЭД,1,1);
						ДанныеПечатиСтроки.КодТовара2 = Сред(КодТНВЭД,2,1);
						ДанныеПечатиСтроки.КодТовара3 = Сред(КодТНВЭД,3,1);
						ДанныеПечатиСтроки.КодТовара4 = Сред(КодТНВЭД,4,1);
						
						ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
						ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
						ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСтроки);
						
						Если Шапка.ВыводитьКомментарийВНаименование Тогда
							СтруктураНоменклатура.НоменклатураПредставление = СтрШаблон(НСтр("ru = '%1, %2'"),
								СтрокаТаблицы.НоменклатураПредставление,
								Шапка.Комментарий);
								
							ОбластьМакета.Параметры.Заполнить(СтруктураНоменклатура);
						КонецЕсли;
						
						// Заполнение ставки НСП
						Если СтрокаТаблицы.ТипТовара = "Товар" Тогда
							СтавкаНСП = ДанныеПечати.СтавкаНСП;
							ЗначениеСтавкиНСПРасчетное = ЗначениеСтавкиНСП;
						ИначеЕсли СтрокаТаблицы.ТипТовара = "Услуга" Тогда	
							СтавкаНСП = ДанныеПечати.СтавкаНСПУслуги;
							ЗначениеСтавкиНСПРасчетное = ЗначениеСтавкиНСПУслуги;
						Иначе
							СтавкаНСП = ДанныеПечати.СтавкаНСПОС;
							ЗначениеСтавкиНСПРасчетное = ЗначениеСтавкиНСПОС;
						КонецЕсли;
						
						//Если ЕстьПересчитаннаяСкидка Тогда
						//	СтоимостьСкидка = Данные.СуммаСкидки * 100 / (100 + ЗначениеСтавкиНДС + ЗначениеСтавкиНСПРасчетное);
						//	СуммаНДССкидка 	= Данные.СуммаСкидки * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС + ЗначениеСтавкиНСПРасчетное);
						//	
						//	ДанныеПечати.СтоимостьСкидкаПересчитанная = ДанныеПечати.СтоимостьСкидкаПересчитанная - СтоимостьСкидка;
						//	ДанныеПечати.СуммаНДССкидкаПересчитанная = ДанныеПечати.СуммаНДССкидкаПересчитанная - СуммаНДССкидка;
						//	ДанныеПечати.СуммаНСПСкидкаПересчитанная = ДанныеПечати.СуммаНСПСкидкаПересчитанная - (Данные.СуммаСкидки - СтоимостьСкидка - СуммаНДССкидка);
						//	ДанныеПечати.ВсегоСкидкаПересчитанная = ДанныеПечати.ВсегоСкидкаПересчитанная - Данные.СуммаСкидки;
						//КонецЕсли;
						
						ОбластьМакета.Параметры.Заполнить(Новый Структура("СтавкаНСП", СтавкаНСП));
						
						ТабличныйДокумент.Вывести(ОбластьМакета);
					КонецЦикла;
				КонецЕсли;
						
				// Добавление пустых строк
				Если КоличествоСтрокСчетаФактуры > КоличествоСтрок Тогда 
					Для Счетчик = 1 По КоличествоСтрокСчетаФактуры - КоличествоСтрок Цикл
						ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПустаяСтрока);
						ТабличныйДокумент.Вывести(ОбластьМакета);		
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;	
КонецФункции

// Функция формирует табличный документ с печатной формой Счет-фактура
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьСчетФактураБезНДС(МассивОбъектов, ОбъектыПечати)
	Перем Ошибки, ПервыйДокумент, НомерСтрокиНачало;

	ТабличныйДокумент = Новый ТабличныйДокумент;	
	ТабличныйДокумент.КлючПараметровПечати = "РеализацияТоваровУслуг_СчетФактураБезНДС";

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщиеМакеты.СчетФактураБезНДС");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслуг.Номер КАК Номер,
		|	РеализацияТоваровУслуг.Дата КАК Дата,
		|	РеализацияТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента,
		|	РеализацияТоваровУслуг.Курс КАК Курс,
		|	РеализацияТоваровУслуг.Кратность КАК Кратность,
		|	РеализацияТоваровУслуг.ПечатьВРегламентированнойВалюте КАК ПечатьВРегламентированнойВалюте,
		|	РеализацияТоваровУслуг.Организация КАК Организация,
		|	РеализацияТоваровУслуг.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	РеализацияТоваровУслуг.Организация.ФайлЛоготип КАК ФайлЛоготип,
		|	ВЫБОР
		|		КОГДА &ПечататьСчетаФактурыСГоловнымКонтрагентом
		|				И НЕ РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент.НаименованиеПолное
		|		ИНАЧЕ РеализацияТоваровУслуг.Контрагент.НаименованиеПолное
		|	КОНЕЦ КАК КонтрагентПредставление,
		|	РеализацияТоваровУслуг.Организация.ИНН КАК ИНН,
		|	РеализацияТоваровУслуг.Организация.ОсновнойБанковскийСчет.НомерСчета КАК НомерСчета,
		|	РеализацияТоваровУслуг.Организация.ОсновнойБанковскийСчет.Банк.Наименование КАК БанкПредставление,
		|	РеализацияТоваровУслуг.Организация.ОсновнойБанковскийСчет.Банк.Код КАК БИКБанка,
		|	РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
		|	РеализацияТоваровУслуг.СтавкаНСП КАК СтавкаНСП,
		|	РеализацияТоваровУслуг.СтавкаНСПУслуги КАК СтавкаНСПУслуги,
		|	РеализацияТоваровУслуг.ЭкспортнаяПоставка КАК ЭкспортнаяПоставка,
		|	РеализацияТоваровУслуг.Товары.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		СуммаДохода КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		Всего - СуммаСкидки КАК Всего,
		|		СуммаДоходаВВалютеРеглУчета КАК СуммаВВалютеРеглУчета,
		|		СуммаНДСВВалютеРеглУчета КАК СуммаНДСВВалютеРеглУчета,
		|		СуммаНСПВВалютеРеглУчета КАК СуммаНСПВВалютеРеглУчета,
		|		ВсегоВВалютеРеглУчета - СуммаСкидкиВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
		|		СуммаСкидкиВВалютеРеглУчета КАК СуммаСкидкиВВалютеРеглУчета,
		|		СуммаСкидки КАК СуммаСкидки
		|	) КАК Товары,
		|	РеализацияТоваровУслуг.Услуги.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		ВЫБОР
		|			КОГДА (ВЫРАЗИТЬ(РеализацияТоваровУслуг.Услуги.ДополнительныеСведения КАК СТРОКА(100))) = """"
		|				ТОГДА РеализацияТоваровУслуг.Услуги.Номенклатура.НаименованиеПолное
		|			ИНАЧЕ РеализацияТоваровУслуг.Услуги.ДополнительныеСведения
		|		КОНЕЦ КАК НоменклатураПредставление,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		СуммаДохода КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		Всего - СуммаСкидки КАК Всего,
		|		СуммаДоходаВВалютеРеглУчета КАК СуммаВВалютеРеглУчета,
		|		СуммаНДСВВалютеРеглУчета КАК СуммаНДСВВалютеРеглУчета,
		|		СуммаНСПВВалютеРеглУчета - СуммаСкидкиВВалютеРеглУчета КАК СуммаНСПВВалютеРеглУчета,
		|		ВсегоВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
		|		СуммаСкидки КАК СуммаСкидки,
		|		СуммаСкидкиВВалютеРеглУчета КАК СуммаСкидкиВВалютеРеглУчета
		|	) КАК Услуги,
		|	РеализацияТоваровУслуг.ОС.(
		|		НомерСтроки КАК НомерСтроки,
		|		ОсновноеСредство КАК Номенклатура,
		|		ОсновноеСредство.НаименованиеПолное КАК НоменклатураПредставление,
		|		1 КАК Количество,
		|		Всего КАК Цена,
		|		СуммаДохода КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		Всего - СуммаСкидки КАК Всего,
		|		СуммаДоходаВВалютеРеглУчета КАК СуммаВВалютеРеглУчета,
		|		СуммаНДСВВалютеРеглУчета КАК СуммаНДСВВалютеРеглУчета,
		|		СуммаНСПВВалютеРеглУчета КАК СуммаНСПВВалютеРеглУчета,
		|		ВсегоВВалютеРеглУчета - СуммаСкидкиВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
		|		СуммаСкидки КАК СуммаСкидки,
		|		СуммаСкидкиВВалютеРеглУчета КАК СуммаСкидкиВВалютеРеглУчета
		|	) КАК ОС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка В(&СписокДокументов)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПечататьСчетаФактурыСГоловнымКонтрагентом", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьЗначениеКонстанты("ПечататьСчетаФактурыСГоловнымКонтрагентом"));
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ДанныеПечати = Новый Структура;
		
		ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, НСтр("ru = 'Счет-фактура'"));
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДанныеПечати.Вставить("Дата", Шапка.Дата);
		ДанныеПечати.Вставить("ОрганизацияПредставление", Шапка.ОрганизацияПредставление);
		ДанныеПечати.Вставить("ФайлЛоготип", Шапка.ФайлЛоготип);
		ДанныеПечати.Вставить("ПолучательПредставление", Шапка.КонтрагентПредставление);
		ДанныеПечати.Вставить("Адрес", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Шапка.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Шапка.Дата));
			
		ДанныеПечати.Вставить("ИНН", Шапка.ИНН);
		ДанныеПечати.Вставить("БанкПредставление", Шапка.БанкПредставление);
		ДанныеПечати.Вставить("РассчетныйСчетПредставление", Шапка.НомерСчета + " " + Шапка.БанкПредставление);
		ДанныеПечати.Вставить("БИКБанка", Шапка.БИКБанка);
		
		ДанныеПечати.Вставить("ТипПоставки", ?(Шапка.ЭкспортнаяПоставка, НСтр("ru = 'Экспорт'"), НСтр("ru = 'Внутренняя'")));
		
		ДанныеПечати.Вставить("ЗначениеСтавкиНДС", УчетНДСВызовСервера.ПолучитьСтавкуНДС(Шапка.Дата, Шапка.СтавкаНДС));
		ДанныеПечати.Вставить("ЗначениеСтавкиНСП", УчетНДСВызовСервера.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, Шапка.СтавкаНСП));
		ДанныеПечати.Вставить("ЗначениеСтавкиНСПУслуги", УчетНДСВызовСервера.ПолучитьСтавкуНСП(Шапка.Дата, Шапка.Организация, Шапка.СтавкаНСПУслуги));
		
		// Подписи.
		РасшифровкаПодписиРуководителя = "";
		РасшифровкаПодписиГлавногоБухгалтера = "";
		ОтветственныеЛица = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата);
		БухгалтерскийУчетСервер.ФамилияИнициалыПоНаименованию(РасшифровкаПодписиРуководителя, ОтветственныеЛица.Руководитель);
		БухгалтерскийУчетСервер.ФамилияИнициалыПоНаименованию(РасшифровкаПодписиГлавногоБухгалтера, ОтветственныеЛица.ГлавныйБухгалтер);
		
		ДанныеПечати.Вставить("РасшифровкаПодписиРуководителя", РасшифровкаПодписиРуководителя);
		ДанныеПечати.Вставить("РасшифровкаПодписиГлавногоБухгалтера", РасшифровкаПодписиГлавногоБухгалтера);
		
		// Области.
		МассивОбластейМакета = Новый Массив;
		МассивОбластейМакета.Добавить("Заголовок");
		МассивОбластейМакета.Добавить("ШапкаТаблицы");
		МассивОбластейМакета.Добавить("СтрокаТаблицы");
		МассивОбластейМакета.Добавить("Подвал");
		МассивОбластейМакета.Добавить("СуммаПрописью");
		МассивОбластейМакета.Добавить("ПодписиСФаксимиле");
		
		// Подготовка перед заполнением.
		// Порядок выборок в массиве важен! 
		// 1. Товары
		// 2. Услуги
		// 3. ОС
		МассивВыборок = Новый Массив();
		МассивВыборок.Добавить(Шапка.Товары.Выбрать());
		МассивВыборок.Добавить(Шапка.Услуги.Выбрать());
		МассивВыборок.Добавить(Шапка.ОС.Выбрать());
		
		Всего = 0;
		Сумма = 0;
		ВсегоНДС = 0;
		ВсегоНСП = 0;
		КоличествоНаименований = 0;
		
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			
			Если ИмяОбласти = "ЗаголовокСЛоготипом" Тогда
				Логотип = Новый Соответствие; // Ключ - имя каринки в области, Значение - имя реквизита
				Логотип.Вставить("Логотип", "ФайлЛоготип");
				ЗаполнитьЛоготипФаксимилеВОбластиМакета(ОбластьМакета, ДанныеПечати, Логотип, Ошибки);
			КонецЕсли;	

			Если ИмяОбласти <> "СтрокаТаблицы" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			ИначеЕсли ИмяОбласти = "СтрокаТаблицы" Тогда 
				
				Индекс = 0;
				СтрктураСтавкиНСПУслуги = Новый Структура("ЗначениеСтавкиНСП", ДанныеПечати.ЗначениеСтавкиНСПУслуги);
				
				Для Каждого Выборка Из МассивВыборок Цикл
					
					Пока Выборка.Следующий() Цикл
						СтруктураСтроки = Новый Структура();
						
						Если Шапка.ПечатьВРегламентированнойВалюте Тогда
							СтруктураСтроки.Вставить("Цена", 	 Выборка.Цена * Шапка.Курс / Шапка.Кратность);
							СтруктураСтроки.Вставить("Сумма", 	 Выборка.СуммаВВалютеРеглУчета);
							СтруктураСтроки.Вставить("СуммаНДС", Выборка.СуммаНДСВВалютеРеглУчета);
							СтруктураСтроки.Вставить("СуммаНСП", Выборка.СуммаНСПВВалютеРеглУчета);
							СтруктураСтроки.Вставить("Всего", 	 Выборка.ВсегоВВалютеРеглУчета);
							
							Всего = Всего + СтруктураСтроки.Всего;
							Сумма = Сумма + СтруктураСтроки.Сумма;
							ВсегоНДС = ВсегоНДС + СтруктураСтроки.СуммаНДС;
							ВсегоНСП = ВсегоНСП + СтруктураСтроки.СуммаНСП;
							КоличествоНаименований = КоличествоНаименований + 1;
							
						Иначе
							Всего = Всего + Выборка.Всего;
							Сумма = Сумма + Выборка.Сумма;
							ВсегоНДС = ВсегоНДС + Выборка.СуммаНДС;
							ВсегоНСП = ВсегоНСП + Выборка.СуммаНСП;
							КоличествоНаименований = КоличествоНаименований + 1;
						КонецЕсли;
						
						ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
						ОбластьМакета.Параметры.Заполнить(Выборка);
						ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
						
						// Если идет обход выборки ТЧ "Услуги" то заменяется значение ставки.
						Если Индекс = 1 Тогда
							ОбластьМакета.Параметры.Заполнить(СтрктураСтавкиНСПУслуги);	
						КонецЕсли;	
						
						ТабличныйДокумент.Вывести(ОбластьМакета);
					КонецЦикла;
					
					Индекс = Индекс + 1;
				КонецЦикла;
				
				// Подвал.
				ДанныеПечати.Вставить("Всего", Всего);
				ДанныеПечати.Вставить("Сумма", Сумма);
				ДанныеПечати.Вставить("ВсегоНДС", ВсегоНДС);
				ДанныеПечати.Вставить("ВсегоНСП", ВсегоНСП);
				ДанныеПечати.Вставить("ИтоговаяСтрока", 
					СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"), 
					Формат(КоличествоНаименований, "ЧН=0; ЧГ=0"), Формат(Всего, "ЧЦ=15; ЧДЦ=2")));
					
				Если Шапка.ПечатьВРегламентированнойВалюте Тогда
					ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(Всего, ВалютаРегламентированногоУчета));
				Иначе
					ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(Всего, Шапка.ВалютаДокумента));
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
 			
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
		
КонецФункции

// Функция формирует табличный документ с печатной формой Акт об оказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "РеализацияТоваровУслуг_Акт";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваровУслуг.ПФ_MXL_Акт");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Номер КАК Номер,
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	ТаблицаДокумента.Организация.ИНН КАК ИННОрганизации,
		|	ТаблицаДокумента.Организация.ОсновнойБанковскийСчет.Наименование КАК РасчетныйСчетОрганизации,
		|	ТаблицаДокумента.Организация.ОсновнойБанковскийСчет.Банк.Код КАК БИКОрганизации,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.Контрагент.ИНН КАК ИННКонтрагента,
		|	ТаблицаДокумента.Контрагент.НаименованиеПолное КАК КонтрагентПредставление,
		|	ТаблицаДокумента.Контрагент.ОсновнойБанковскийСчет.Наименование КАК РасчетныйСчетКонтрагента,
		|	ТаблицаДокумента.Контрагент.ОсновнойБанковскийСчет.Банк.Код КАК БИККонтрагента,
		|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента,
		|	ТаблицаДокумента.Услуги.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		ВЫБОР
		|			КОГДА (ВЫРАЗИТЬ(ТаблицаДокумента.Услуги.ДополнительныеСведения КАК СТРОКА(100))) = """"
		|				ТОГДА ТаблицаДокумента.Услуги.Номенклатура.НаименованиеПолное
		|			ИНАЧЕ ТаблицаДокумента.Услуги.ДополнительныеСведения
		|		КОНЕЦ КАК НоменклатураПредставление,
		|		ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Услуги.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		СуммаСкидки КАК СуммаСкидки,
		|		Всего КАК Всего
		|	) КАК Услуги
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&СписокДокументов)";		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;
		ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, НСтр("ru = 'Акт об оказании услуг'"));
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		
		// Сведения об организации
		СведенияОбОрганизации = БухгалтерскийУчетСервер.ПолучитьСведенияОбОрганизации(Шапка.Организация);
		АдресОрганизации = ?(СведенияОбОрганизации.Улица    = "","",СведенияОбОрганизации.Улица + ",")
		+ ?(СведенияОбОрганизации.Дом      = "",""," " + СведенияОбОрганизации.Дом + ",")
		+ ?(СведенияОбОрганизации.Корпус   = "",""," " + СведенияОбОрганизации.Корпус + ",")
		+ ?(СведенияОбОрганизации.Квартира = "",""," " + СведенияОбОрганизации.Квартира);
		ДанныеПечати.Вставить("АдресОрганизации", АдресОрганизации);

		// Сведения о контрагенте
		АдресКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Шапка.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента); 
		ДанныеПечати.Вставить("АдресКонтрагента", АдресКонтрагента);
		
		ТаблицаУслуги = Шапка.Услуги.Выгрузить();
		
		Всего = ТаблицаУслуги.Итог("Всего");
		ВсегоНДС = ТаблицаУслуги.Итог("СуммаНДС");
		ВсегоНСП = ТаблицаУслуги.Итог("СуммаНСП");
		КоличествоНаименований = ТаблицаУслуги.Количество();		
		
		ВсегоСкидка = ТаблицаУслуги.Итог("СуммаСкидки");
		ЕстьСкидка = ВсегоСкидка <> 0;
		
		ДанныеПечати.Вставить("Всего", Всего);
		ДанныеПечати.Вставить("ВсегоНДС", ВсегоНДС);
		ДанныеПечати.Вставить("ВсегоНСП", ВсегоНСП);
		ДанныеПечати.Вставить("ИтоговаяСтрока", 
			СтрШаблон(НСтр("ru = 'Всего оказано услуг %1, на сумму %2 %3'"), 
			Формат(КоличествоНаименований, "ЧН=0; ЧГ=0"), Формат(ДанныеПечати.Всего, "ЧЦ=15; ЧДЦ=2"), Шапка.ВалютаДокумента));
		ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(ДанныеПечати.Всего, Шапка.ВалютаДокумента));
		
		// Области
		МассивОбластейМакета = Новый Массив;
		МассивОбластейМакета.Добавить("Заголовок");
		Если ЕстьСкидка Тогда 
			МассивОбластейМакета.Добавить("ШапкаТаблицыСоСкидкой");
			МассивОбластейМакета.Добавить("СтрокаСоСкидкой");
		Иначе 
			МассивОбластейМакета.Добавить("ШапкаТаблицы");
			МассивОбластейМакета.Добавить("Строка");
		КонецЕсли;
		МассивОбластейМакета.Добавить("Подвал");
		МассивОбластейМакета.Добавить("Итоги");
		МассивОбластейМакета.Добавить("ИтогиНДС");
		МассивОбластейМакета.Добавить("ИтогиНСП");	
		МассивОбластейМакета.Добавить("СуммаПрописью");
		МассивОбластейМакета.Добавить("Подписи");
	
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			Если ИмяОбласти <> "Строка" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Шапка);
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			ИначеЕсли ИмяОбласти = "Строка" Тогда 
				Для Каждого СтрокаТаблицы Из ТаблицаУслуги Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
			КонецЕсли;	
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует табличный документ с печатной формой Товарный чек
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьТоварныйЧек(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "РеализацияТоваровУслуг_ТоварныйЧек";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваровУслуг.ПФ_MXL_ТоварныйЧек");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Номер КАК Номер,
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	ТаблицаДокумента.Организация.ИНН КАК ОрганизацияИНН,
		|	ТаблицаДокумента.Склад КАК Склад,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Склад) КАК СкладПредставление,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.Контрагент.НаименованиеПолное КАК КонтрагентПредставление,
		|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента,
		|	ТаблицаДокумента.Товары.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		Номенклатура.Код КАК НоменклатураКод,
		|		ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Товары.Номенклатура.ЕдиницаИзмерения) КАК ЕИ,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		СуммаСкидки КАК СуммаСкидки,
		|		Всего КАК Всего
		|	) КАК Товары,
		|	ТаблицаДокумента.Услуги.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		Номенклатура.Код КАК НоменклатураКод,
		|		ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Услуги.Номенклатура.ЕдиницаИзмерения) КАК ЕИ,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		СуммаСкидки КАК СуммаСкидки,
		|		Всего КАК Всего
		|	) КАК Услуги,
		|	ТаблицаДокумента.ОС.(
		|		НомерСтроки КАК НомерСтроки,
		|		ОсновноеСредство КАК Номенклатура,
		|		ОсновноеСредство.НаименованиеПолное КАК НоменклатураПредставление,
		|		ОсновноеСредство.Код КАК НоменклатураКод,
		|		НЕОПРЕДЕЛЕНО КАК ЕИ,
		|		1 КАК Количество,
		|		Сумма КАК Цена,
		|		Сумма КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаНСП КАК СуммаНСП,
		|		СуммаСкидки КАК СуммаСкидки,
		|		Всего КАК Всего
		|	) КАК ОС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&СписокДокументов)";		

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;
		
		ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, НСтр("ru = 'Товарный чек'"));
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДанныеПечати.Вставить("ОрганизацияПредставление", Шапка.ОрганизацияПредставление);
		ДанныеПечати.Вставить("ПолучательПредставление", Шапка.КонтрагентПредставление);

		ТаблицаТовары = Шапка.Товары.Выгрузить();
		ТаблицаУслуги = Шапка.Услуги.Выгрузить();
		ТаблицаОС = Шапка.ОС.Выгрузить();
		
		Всего = ТаблицаТовары.Итог("Всего") + ТаблицаУслуги.Итог("Всего") + ТаблицаОС.Итог("Всего");
		ВсегоНДС = ТаблицаТовары.Итог("СуммаНДС") + ТаблицаУслуги.Итог("СуммаНДС") + ТаблицаОС.Итог("СуммаНДС");
		ВсегоНСП = ТаблицаТовары.Итог("СуммаНСП") + ТаблицаУслуги.Итог("СуммаНСП") + ТаблицаОС.Итог("СуммаНСП");
		КоличествоНаименований = ТаблицаТовары.Количество() + ТаблицаУслуги.Количество() + ТаблицаОС.Количество();		
				
		ДанныеПечати.Вставить("Всего", Всего);
		ДанныеПечати.Вставить("ВсегоНДС", ВсегоНДС);
		ДанныеПечати.Вставить("ВсегоНСП", ВсегоНСП);
		ДанныеПечати.Вставить("ИтоговаяСтрока", 
			СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"), 
			Формат(КоличествоНаименований, "ЧН=0; ЧГ=0"), Формат(ДанныеПечати.Всего, "ЧЦ=15; ЧДЦ=2")));
		ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(ДанныеПечати.Всего, Шапка.ВалютаДокумента));		
		
		// Области
		МассивОбластейМакета = Новый Массив;
		МассивОбластейМакета.Добавить("Заголовок");
		МассивОбластейМакета.Добавить("ШапкаТаблицы");
		МассивОбластейМакета.Добавить("Строка");	
		МассивОбластейМакета.Добавить("Итоги");
		МассивОбластейМакета.Добавить("ИтогиНДС");
		МассивОбластейМакета.Добавить("ИтогиНСП");	
		МассивОбластейМакета.Добавить("СуммаПрописью");
		МассивОбластейМакета.Добавить("Подписи");
	
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			Если ИмяОбласти <> "Строка" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Шапка);
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			ИначеЕсли ИмяОбласти = "Строка" Тогда 
				Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
				Для Каждого СтрокаТаблицы Из ТаблицаУслуги Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
				Для Каждого СтрокаТаблицы Из ТаблицаОС Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
			КонецЕсли;	
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует табличный документ с печатной формой ТТН
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьТТН(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "РеализацияТоваровУслуг_ТТН";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.АвтоМасштаб = Истина;

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваровУслуг.ПФ_MXL_ТТН");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Номер КАК Номер,
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	ТаблицаДокумента.Организация.ИНН КАК ОрганизацияИНН,
		|	ТаблицаДокумента.Организация.КодПоОКПО КАК ОрганизацияКодПоОКПО,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.Контрагент.НаименованиеПолное КАК КонтрагентПредставление,
		|	ТаблицаДокумента.Контрагент.КодПоОКПО КАК КонтрагентКодПоОКПО,
		|	ТаблицаДокумента.Контрагент.ИНН КАК КонтрагентИНН,
		|	ТаблицаДокумента.ДоговорКонтрагента.СуммаВключаетНалоги КАК СуммаВключаетНалоги,
		|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента,
		|	ТаблицаДокумента.Курс КАК Курс,
		|	ТаблицаДокумента.Автомобиль КАК МаркаАвтомобиля,
		|	ТаблицаДокумента.Водитель КАК ПредставлениеВодителя,
		|	ТаблицаДокумента.ПутевойЛист КАК ПутевойЛист,
		|	ТаблицаДокумента.МассаГруза КАК МассаГруза,
		|	ТаблицаДокумента.КоличествоМест КАК КоличествоМест,
		|	ТаблицаДокумента.Товары.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		Номенклатура.Код КАК НоменклатураКод,
		|		ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Товары.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		Всего КАК Всего,
		|		ВсегоВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
		|		СуммаНДС КАК СуммаНДС
		|	) КАК Товары,
		|	ТаблицаДокумента.Услуги.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		Номенклатура.Код КАК НоменклатураКод,
		|		НЕОПРЕДЕЛЕНО КАК ЕдиницаИзмерения,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		Всего КАК Всего,
		|		ВсегоВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
		|		СуммаНДС КАК СуммаНДС
		|	) КАК Услуги,
		|	ТаблицаДокумента.ОС.(
		|		НомерСтроки КАК НомерСтроки,
		|		ОсновноеСредство КАК Номенклатура,
		|		ОсновноеСредство.НаименованиеПолное КАК НоменклатураПредставление,
		|		ОсновноеСредство.Код КАК НоменклатураКод,
		|		НЕОПРЕДЕЛЕНО КАК ЕдиницаИзмерения,
		|		1 КАК Количество,
		|		Сумма КАК Цена,
		|		Сумма КАК Сумма,
		|		Всего КАК Всего,
		|		ВсегоВВалютеРеглУчета КАК ВсегоВВалютеРеглУчета,
		|		СуммаНДС КАК СуммаНДС
		|	) КАК ОС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&СписокДокументов)";		

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;
		
		ДанныеПечати.Вставить("ДатаДокумента", Формат(Шапка.Дата, "ДЛФ=D"));
		НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер);
		ДанныеПечати.Вставить("НомерДокумента", НомерНаПечать);
		ДанныеПечати.Вставить("Валюта", Шапка.ВалютаДокумента);
		ДанныеПечати.Вставить("НомерСтраницы", ""); 
		ДанныеПечати.Вставить("КоличествоМест", Шапка.КоличествоМест);
		
		// Сведения об организации
		СведенияОбОрганизации = БухгалтерскийУчетСервер.ПолучитьСведенияОбОрганизации(Шапка.Организация);
		АдресОрганизации = ?(СведенияОбОрганизации.Улица    = "","",СведенияОбОрганизации.Улица + ",")
		+ ?(СведенияОбОрганизации.Дом      = "",""," " + СведенияОбОрганизации.Дом + ",")
		+ ?(СведенияОбОрганизации.Корпус   = "",""," " + СведенияОбОрганизации.Корпус + ",")
		+ ?(СведенияОбОрганизации.Квартира = "",""," " + СведенияОбОрганизации.Квартира);
		Телефон = СведенияОбОрганизации.Тел;
		
		ДанныеПечати.Вставить("ОрганизацияПредставление", "" + Шапка.ОрганизацияПредставление 
		+ ?(ЗначениеЗаполнено(Шапка.ОрганизацияИНН),", " + Шапка.ОрганизацияИНН, "") 
		+ ?(ЗначениеЗаполнено(АдресОрганизации),", " + АдресОрганизации, "")
		+ ", " + Телефон);

		// Сведения о контрагенте
		АдресКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Шапка.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента); 
		ТелефонКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Шапка.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента); 
		
		ДанныеПечати.Вставить("КонтрагентПредставление", "" + Шапка.КонтрагентПредставление 
		+ ?(ЗначениеЗаполнено(Шапка.КонтрагентИНН),", " + Шапка.КонтрагентИНН, "") 
		+ ?(ЗначениеЗаполнено(АдресКонтрагента),", " + АдресКонтрагента, "")
		+ ", " + ТелефонКонтрагента);
		
		// Заполнение шапки
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);			
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// Заполение таблицы		
		ОбластьЗаголовокТаблицы      = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьМакета                = Макет.ПолучитьОбласть("Строка");
		ОбластьИтоговПоСтранице      = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьВсего                 = Макет.ПолучитьОбласть("Всего");
		ОбластьПодвала               = Макет.ПолучитьОбласть("Подвал");
		ОбластьТранспортногоРаздела  = Макет.ПолучитьОбласть("ТранспортныйРаздел");
		ОбластьСведенийОГрузе        = Макет.ПолучитьОбласть("СведенияОГрузе");
		ОбластьПодвалаСведенийОГрузе = Макет.ПолучитьОбласть("ПодвалСведенийОГрузе");
		ОбластьПрочихСведений        = Макет.ПолучитьОбласть("ПрочиеСведения");
		ОбластьПогрузочныеОперации	 = Макет.ПолучитьОбласть("ПогрузочныеОперации");
		
		ТаблицаТовары 	= Шапка.Товары.Выгрузить();
		ТаблицаУслуги 	= Шапка.Услуги.Выгрузить();
		ТаблицаОС 		= Шапка.ОС.Выгрузить();
		
		СтруктураОбластейМакета = Новый Структура();
		СтруктураОбластейМакета.Вставить("ОбластьМакета", ОбластьМакета);
		СтруктураОбластейМакета.Вставить("ОбластьЗаголовокТаблицы", ОбластьЗаголовокТаблицы);
		СтруктураОбластейМакета.Вставить("ОбластьИтоговПоСтранице", ОбластьИтоговПоСтранице);
		СтруктураОбластейМакета.Вставить("ОбластьВсего", ОбластьВсего);
		СтруктураОбластейМакета.Вставить("ОбластьПодвала", ОбластьПодвала);
		
		МассивТаблицЗначений = Новый Массив();
		МассивТаблицЗначений.Добавить(ТаблицаТовары);
		МассивТаблицЗначений.Добавить(ТаблицаУслуги);
		МассивТаблицЗначений.Добавить(ТаблицаОС);
		
		СтруктураПеременных = Новый Структура();
		СтруктураПеременных.Вставить("КоличествоСтрок", ТаблицаТовары.Количество() + ТаблицаУслуги.Количество() + ТаблицаОС.Количество());
		СтруктураПеременных.Вставить("ИтоговыеСуммы", СтруктураИтоговыеСуммыТТН());
		СтруктураПеременных.Вставить("НомерСтроки", 0);
		СтруктураПеременных.Вставить("СуммаВключаетНалоги", Шапка.СуммаВключаетНалоги);
		СтруктураПеременных.Вставить("Курс", Шапка.Курс);
		
		ЗаполнитьИВывестиСтрокиМакетаТТН(СтруктураОбластейМакета, МассивТаблицЗначений, ТабличныйДокумент, ДанныеПечати, СтруктураПеременных);
				
		// Выводим итоги по последней странице
		ОбластьИтоговПоСтранице.Параметры.Заполнить(СтруктураПеременных.ИтоговыеСуммы);
		ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьВсего.Параметры.Заполнить(СтруктураПеременных.ИтоговыеСуммы);		
		ТабличныйДокумент.Вывести(ОбластьВсего);
		
		// Выводим подвал документа				
		ПолнаяДатаДокумента = Формат(Шапка.Дата, "ДЛФ=DD");
		ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
		ПервыйРазделитель = Найти(ПолнаяДатаДокумента, " ");
		ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
		
		ДанныеПечати.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(СтруктураПеременных.НомерСтроки, ,",,,,,,,,0"));
		ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(СтруктураПеременных.ИтоговыеСуммы.ИтогоВсего, Шапка.ВалютаДокумента));
		ДанныеПечати.Вставить("ДатаДокументаДень", """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель -1 ) + """");
		ДанныеПечати.Вставить("ДатаДокументаМесяц", Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1));
		ДанныеПечати.Вставить("ДатаДокументаГод", Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель));
		ДанныеПечати.Вставить("ВсегоНаименованийПрописью", ЧислоПрописью(СтруктураПеременных.КоличествоСтрок, ,",,,,,,,,0"));
		ДанныеПечати.Вставить("ВсегоМестПрописью", ЧислоПрописью(Шапка.КоличествоМест, ,",,,,,,,,0"));
		
		МассаГрузаЦелаяЧасть = Цел(Шапка.МассаГруза);
		МассаГрузаДробнаяЧасть = (Шапка.МассаГруза - Цел(Шапка.МассаГруза)) * 1000;
		МассаГрузаДробнаяЧастьСтрокой = Строка(МассаГрузаДробнаяЧасть);
		
		Если МассаГрузаДробнаяЧасть <> 0 И СтрДлина(МассаГрузаДробнаяЧастьСтрокой) = 1 Тогда
			МассаГрузаДробнаяЧастьСтрокой = "00" + МассаГрузаДробнаяЧастьСтрокой;
			
		ИначеЕсли СтрДлина(МассаГрузаДробнаяЧастьСтрокой) = 2 Тогда
			МассаГрузаДробнаяЧастьСтрокой = "0" + МассаГрузаДробнаяЧастьСтрокой;
		КонецЕсли;	
		
		ДанныеПечати.Вставить("МассаГрузаНеттоПрописью", ЧислоПрописью(МассаГрузаЦелаяЧасть, ,"тонна, тонны, тонн, ж,,,,,0") 
									+ " " + МассаГрузаДробнаяЧастьСтрокой + " " + "кг");
		ДанныеПечати.Вставить("МассаГрузаНетто", Шапка.МассаГруза);
		
		// Подписи.
		ФамилияИОРуковолителя = "";                    
		ФамилияИОГлавногоБухгалтера = "";
		ОтветственныеЛица = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата);
		БухгалтерскийУчетСервер.ФамилияИнициалыПоНаименованию(ФамилияИОРуковолителя, ОтветственныеЛица.Руководитель);
		БухгалтерскийУчетСервер.ФамилияИнициалыПоНаименованию(ФамилияИОГлавногоБухгалтера, ОтветственныеЛица.ГлавныйБухгалтер);
		
		ДанныеПечати.Вставить("ФамилияИОРуковолителя", ФамилияИОРуковолителя);
		ДанныеПечати.Вставить("ФамилияИОГлавногоБухгалтера", ФамилияИОГлавногоБухгалтера);
		ДанныеПечати.Вставить("РуководительДолжность", ОтветственныеЛица.РуководительДолжность);
				
		ОбластьПодвала.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьПодвала);
				
		МассивВыводимыхОбластей.Очистить();
		МассивВыводимыхОбластей.Добавить(ОбластьТранспортногоРаздела);
		МассивВыводимыхОбластей.Добавить(ОбластьСведенийОГрузе);
		МассивВыводимыхОбластей.Добавить(ОбластьПодвалаСведенийОГрузе);
		МассивВыводимыхОбластей.Добавить(ОбластьПогрузочныеОперации);
		МассивВыводимыхОбластей.Добавить(ОбластьПрочихСведений);
		
		Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ОбластьТранспортногоРаздела.Параметры.Заполнить(ДанныеПечати);
		ОбластьТранспортногоРаздела.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьТранспортногоРаздела);
		ТабличныйДокумент.Вывести(ОбластьСведенийОГрузе);
		ТабличныйДокумент.Вывести(ОбластьПодвалаСведенийОГрузе);
		ТабличныйДокумент.Вывести(ОбластьПогрузочныеОперации);
		ТабличныйДокумент.Вывести(ОбластьПрочихСведений);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует табличный документ с печатной формой ТТН
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьТТНВВалюте(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "РеализацияТоваровУслуг_ТТНВВалюте";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.АвтоМасштаб = Истина;

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваровУслуг.ПФ_MXL_ТТНВВалюте");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Номер КАК Номер,
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Организация.НаименованиеПолное КАК ОрганизацияПредставление,
		|	ТаблицаДокумента.Организация.ИНН КАК ОрганизацияИНН,
		|	ТаблицаДокумента.Организация.КодПоОКПО КАК ОрганизацияКодПоОКПО,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.Контрагент.НаименованиеПолное КАК КонтрагентПредставление,
		|	ТаблицаДокумента.Контрагент.КодПоОКПО КАК КонтрагентКодПоОКПО,
		|	ТаблицаДокумента.Контрагент.ИНН КАК КонтрагентИНН,
		|	ТаблицаДокумента.ДоговорКонтрагента.СуммаВключаетНалоги КАК СуммаВключаетНалоги,
		|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента,
		|	ТаблицаДокумента.Автомобиль КАК МаркаАвтомобиля,
		|	ТаблицаДокумента.Водитель КАК ПредставлениеВодителя,
		|	ТаблицаДокумента.ПутевойЛист КАК ПутевойЛист,
		|	ТаблицаДокумента.МассаГруза КАК МассаГруза,
		|	ТаблицаДокумента.КоличествоМест КАК КоличествоМест,
		|	ТаблицаДокумента.Товары.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		Номенклатура.Код КАК НоменклатураКод,
		|		ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Товары.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		Всего КАК Всего,
		|		СуммаНДС КАК СуммаНДС
		|	) КАК Товары,
		|	ТаблицаДокумента.Услуги.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|		Номенклатура.Код КАК НоменклатураКод,
		|		НЕОПРЕДЕЛЕНО КАК ЕдиницаИзмерения,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		Всего КАК Всего,
		|		СуммаНДС КАК СуммаНДС
		|	) КАК Услуги,
		|	ТаблицаДокумента.ОС.(
		|		НомерСтроки КАК НомерСтроки,
		|		ОсновноеСредство КАК Номенклатура,
		|		ОсновноеСредство.НаименованиеПолное КАК НоменклатураПредставление,
		|		ОсновноеСредство.Код КАК НоменклатураКод,
		|		НЕОПРЕДЕЛЕНО КАК ЕдиницаИзмерения,
		|		1 КАК Количество,
		|		Сумма КАК Цена,
		|		Сумма КАК Сумма,
		|		Всего КАК Всего,
		|		СуммаНДС КАК СуммаНДС
		|	) КАК ОС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&СписокДокументов)";		

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Пока Шапка.Следующий() Цикл
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовка данных
		ДанныеПечати = Новый Структура;
		
		ДанныеПечати.Вставить("ДатаДокумента", Формат(Шапка.Дата, "ДЛФ=D"));
		НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер);
		ДанныеПечати.Вставить("НомерДокумента", НомерНаПечать);
		ДанныеПечати.Вставить("Валюта", Шапка.ВалютаДокумента);
		ДанныеПечати.Вставить("НомерСтраницы", ""); 
		ДанныеПечати.Вставить("КоличествоМест", Шапка.КоличествоМест);
		
		СведенияОбОрганизации = БухгалтерскийУчетСервер.ПолучитьСведенияОбОрганизации(Шапка.Организация);
		АдресОрганизации = ?(СведенияОбОрганизации.Улица    = "","",СведенияОбОрганизации.Улица + ",")
		+ ?(СведенияОбОрганизации.Дом      = "",""," " + СведенияОбОрганизации.Дом + ",")
		+ ?(СведенияОбОрганизации.Корпус   = "",""," " + СведенияОбОрганизации.Корпус + ",")
		+ ?(СведенияОбОрганизации.Квартира = "",""," " + СведенияОбОрганизации.Квартира);
		Телефон = СведенияОбОрганизации.Тел;
		
		ДанныеПечати.Вставить("ОрганизацияПредставление", "" + Шапка.ОрганизацияПредставление 
		+ ?(ЗначениеЗаполнено(Шапка.ОрганизацияИНН),", " + Шапка.ОрганизацияИНН, "") 
		+ ?(ЗначениеЗаполнено(АдресОрганизации),", " + АдресОрганизации, "")
		+ ", " + Телефон);

		// Сведения о контрагенте
		АдресКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Шапка.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента); 
		ТелефонКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Шапка.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента); 
		
		ДанныеПечати.Вставить("КонтрагентПредставление", "" + Шапка.КонтрагентПредставление 
		+ ?(ЗначениеЗаполнено(Шапка.КонтрагентИНН),", " + Шапка.КонтрагентИНН, "") 
		+ ?(ЗначениеЗаполнено(АдресКонтрагента),", " + АдресКонтрагента, "")
		+ ", " + ТелефонКонтрагента);

		// Заполнение шапки
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// Заполение таблицы		
		ОбластьЗаголовокТаблицы      = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьМакета                = Макет.ПолучитьОбласть("Строка");
		ОбластьИтоговПоСтранице      = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьВсего                 = Макет.ПолучитьОбласть("Всего");
		ОбластьПодвала               = Макет.ПолучитьОбласть("Подвал");
		ОбластьТранспортногоРаздела  = Макет.ПолучитьОбласть("ТранспортныйРаздел");
		ОбластьСведенийОГрузе        = Макет.ПолучитьОбласть("СведенияОГрузе");
		ОбластьПодвалаСведенийОГрузе = Макет.ПолучитьОбласть("ПодвалСведенийОГрузе");
		ОбластьПрочихСведений        = Макет.ПолучитьОбласть("ПрочиеСведения");
		ОбластьПогрузочныеОперации	 = Макет.ПолучитьОбласть("ПогрузочныеОперации");
		
		ТаблицаТовары 	= Шапка.Товары.Выгрузить();
		ТаблицаУслуги 	= Шапка.Услуги.Выгрузить();
		ТаблицаОС 		= Шапка.ОС.Выгрузить();
		
		СтруктураОбластейМакета = Новый Структура();
		СтруктураОбластейМакета.Вставить("ОбластьМакета", ОбластьМакета);
		СтруктураОбластейМакета.Вставить("ОбластьЗаголовокТаблицы", ОбластьЗаголовокТаблицы);
		СтруктураОбластейМакета.Вставить("ОбластьИтоговПоСтранице", ОбластьИтоговПоСтранице);
		СтруктураОбластейМакета.Вставить("ОбластьВсего", ОбластьВсего);
		СтруктураОбластейМакета.Вставить("ОбластьПодвала", ОбластьПодвала);
		
		МассивТаблицЗначений = Новый Массив();
		МассивТаблицЗначений.Добавить(ТаблицаТовары);
		МассивТаблицЗначений.Добавить(ТаблицаУслуги);
		МассивТаблицЗначений.Добавить(ТаблицаОС);
		
		СтруктураПеременных = Новый Структура();
		СтруктураПеременных.Вставить("КоличествоСтрок", ТаблицаТовары.Количество() + ТаблицаУслуги.Количество() + ТаблицаОС.Количество());
		СтруктураПеременных.Вставить("ИтоговыеСуммы", СтруктураИтоговыеСуммыТТН());
		СтруктураПеременных.Вставить("НомерСтроки", 0);
		СтруктураПеременных.Вставить("СуммаВключаетНалоги", Шапка.СуммаВключаетНалоги);
		                                
		ЗаполнитьИВывестиСтрокиМакетаТТН(СтруктураОбластейМакета, МассивТаблицЗначений, ТабличныйДокумент, ДанныеПечати, СтруктураПеременных);
		
		// Выводим итоги по последней странице
		ОбластьИтоговПоСтранице.Параметры.Заполнить(СтруктураПеременных.ИтоговыеСуммы);
		ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьВсего.Параметры.Заполнить(СтруктураПеременных.ИтоговыеСуммы);		
		ТабличныйДокумент.Вывести(ОбластьВсего);
		
		// Выводим подвал документа		
		ПолнаяДатаДокумента = Формат(Шапка.Дата, "ДЛФ=DD");
		ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
		ПервыйРазделитель = Найти(ПолнаяДатаДокумента, " ");
		ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
		
		ДанныеПечати.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(СтруктураПеременных.НомерСтроки, ,",,,,,,,,0"));
		ДанныеПечати.Вставить("СуммаПрописью", БухгалтерскийУчетСервер.СформироватьСуммуПрописью(СтруктураПеременных.ИтоговыеСуммы.ИтогоВсего, Шапка.ВалютаДокумента));
		ДанныеПечати.Вставить("ДатаДокументаДень", """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель -1 ) + """");
		ДанныеПечати.Вставить("ДатаДокументаМесяц", Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1));
		ДанныеПечати.Вставить("ДатаДокументаГод", Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель));
		ДанныеПечати.Вставить("ВсегоНаименованийПрописью", ЧислоПрописью(СтруктураПеременных.КоличествоСтрок, ,",,,,,,,,0"));
		ДанныеПечати.Вставить("ВсегоМестПрописью", ЧислоПрописью(Шапка.КоличествоМест, ,",,,,,,,,0"));
		
		МассаГрузаЦелаяЧасть = Цел(Шапка.МассаГруза);
		МассаГрузаДробнаяЧасть = (Шапка.МассаГруза - Цел(Шапка.МассаГруза)) * 1000;
		МассаГрузаДробнаяЧастьСтрокой = Строка(МассаГрузаДробнаяЧасть);
		
		Если МассаГрузаДробнаяЧасть <> 0 И СтрДлина(МассаГрузаДробнаяЧастьСтрокой) = 1 Тогда
			МассаГрузаДробнаяЧастьСтрокой = "00" + МассаГрузаДробнаяЧастьСтрокой;
			
		ИначеЕсли СтрДлина(МассаГрузаДробнаяЧастьСтрокой) = 2 Тогда
			МассаГрузаДробнаяЧастьСтрокой = "0" + МассаГрузаДробнаяЧастьСтрокой;
		КонецЕсли;	
		
		ДанныеПечати.Вставить("МассаГрузаНеттоПрописью", ЧислоПрописью(МассаГрузаЦелаяЧасть, ,"тонна, тонны, тонн, ж,,,,,0") 
									+ " " + МассаГрузаДробнаяЧастьСтрокой + " " + "кг");
		ДанныеПечати.Вставить("МассаГрузаНетто", Шапка.МассаГруза);
		
		// Подписи.
		ФамилияИОРуковолителя = "";
		ФамилияИОГлавногоБухгалтера = "";
		ОтветственныеЛица = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата);
		БухгалтерскийУчетСервер.ФамилияИнициалыПоНаименованию(ФамилияИОРуковолителя, ОтветственныеЛица.Руководитель);
		БухгалтерскийУчетСервер.ФамилияИнициалыПоНаименованию(ФамилияИОГлавногоБухгалтера, ОтветственныеЛица.ГлавныйБухгалтер);
		
		ДанныеПечати.Вставить("ФамилияИОРуковолителя", ФамилияИОРуковолителя);
		ДанныеПечати.Вставить("ФамилияИОГлавногоБухгалтера", ФамилияИОГлавногоБухгалтера);
		ДанныеПечати.Вставить("РуководительДолжность", ОтветственныеЛица.РуководительДолжность);
			
		ОбластьПодвала.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьПодвала);		
		
		МассивВыводимыхОбластей.Очистить();
		МассивВыводимыхОбластей.Добавить(ОбластьТранспортногоРаздела);
		МассивВыводимыхОбластей.Добавить(ОбластьСведенийОГрузе);
		МассивВыводимыхОбластей.Добавить(ОбластьПодвалаСведенийОГрузе);
		МассивВыводимыхОбластей.Добавить(ОбластьПогрузочныеОперации);
		МассивВыводимыхОбластей.Добавить(ОбластьПрочихСведений);
		
		Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ОбластьТранспортногоРаздела.Параметры.Заполнить(ДанныеПечати);
		ОбластьТранспортногоРаздела.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьТранспортногоРаздела);
		ТабличныйДокумент.Вывести(ОбластьСведенийОГрузе);
		ТабличныйДокумент.Вывести(ОбластьПодвалаСведенийОГрузе);
		ТабличныйДокумент.Вывести(ОбластьПогрузочныеОперации);
		ТабличныйДокумент.Вывести(ОбластьПрочихСведений);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"Накладная", НСтр("ru = 'Накладная на сторону'"), ПечатьНакладной(МассивОбъектов, ОбъектыПечати),,
		"Документ.РеализацияТоваровУслуг.ПФ_MXL_Накладная");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура001") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактура001", НСтр("ru = 'Счет-фактура (001)'"), ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, 20));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура002") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактура002", НСтр("ru = 'Счет-фактура (002)'"), ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, 7));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактураВВалюте") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СчетФактураВВалюте", НСтр("ru = 'Счет-фактура в валюте'"), ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, 1, Истина));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактураБезНДС") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"СчетФактураБезНДС", НСтр("ru = 'Счет-фактура без бланка НДС'"), ПечатьСчетФактураБезНДС(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Акт") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"Акт", НСтр("ru = 'Акт об оказании услуг'"), ПечатьАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТоварныйЧек") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"ТоварныйЧек", НСтр("ru = 'Товарный чек'"), ПечатьТоварныйЧек(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТТН") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"ТТН", НСтр("ru = 'ТТН'"), ПечатьТТН(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТТНВВалюте") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"ТТНВВалюте", НСтр("ru = 'ТТН в валюте'"), ПечатьТТНВВалюте(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru = 'Накладная'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 1;

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура001";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (001)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 2;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура002";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (002)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 3;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактураВВалюте";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура в валюте'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 4;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактураБезНДС";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура без бланка НДС'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 5;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Акт";
	КомандаПечати.Представление = НСтр("ru = 'Акт об оказании услуг'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 6;
	
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "ТоварныйЧек";
	//КомандаПечати.Представление = НСтр("ru = 'Товарный чек'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	//КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	//КомандаПечати.Порядок = 7;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТТН";
	КомандаПечати.Представление = НСтр("ru = 'ТТН'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 8;

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТТНВВалюте";
	КомандаПечати.Представление = НСтр("ru = 'ТТН в валюте'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок = 9;	
	
	Если НЕ ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		// Настраиваемый комплект документов.
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "Накладная,СчетФактура001,СчетФактура002,СчетФактураБезНДС,Акт,ТТН,ТТНВВалюте";
		КомандаПечати.Представление = НСтр("ru = 'Комплект'");
		КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
		КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
		КомандаПечати.Порядок = 75;
	КонецЕсли;
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "РеестрРеализацияТоваровУслуг";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Реализация товаров и услуг""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет строку макета ТТН (ТТН в валюте)
//
// Параметры:
//  СтруктураОбластейМакета - Структура - структура с областями;
//  МассивТаблицЗначений - Массив - массив таблиц значений ТЧ "Товары", "Услуги" и "ОС";
//	ТабличныйДокумент - ТабличныйДокумент - табличный документ, в который выводятся данные
//	ДанныеПечати - Структура - данные для печати
//	СтруктураПеременных - Структура - структура переменных, необходимых для подсчета или вычисления.
//
Процедура ЗаполнитьИВывестиСтрокиМакетаТТН(СтруктураОбластейМакета, МассивТаблицЗначений, ТабличныйДокумент, ДанныеПечати, СтруктураПеременных)

	МассивВыводимыхОбластей = Новый Массив;
	НомерСтраницы = 1;
	
	Для Каждого ТаблицаЗначений Из МассивТаблицЗначений Цикл
		Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
				
			ДанныеСтроки = СтруктураДанныеСтрокиТТН();
			СтруктураПеременных.НомерСтроки = СтруктураПеременных.НомерСтроки + 1;			
			ДанныеСтроки.Номер = СтруктураПеременных.НомерСтроки;
			Если СтруктураПеременных.Свойство("Курс") Тогда
				ДанныеСтроки.Всего = СтрокаТаблицы.ВсегоВВалютеРеглУчета;
				ДанныеСтроки.Цена = Окр(СтрокаТаблицы.Цена * СтруктураПеременных.Курс, 2);
			Иначе
				ДанныеСтроки.Всего = Окр(СтрокаТаблицы.Всего, 2);
				ДанныеСтроки.Цена = Окр(СтрокаТаблицы.Цена, 2);
			КонецЕсли;
			ДанныеСтроки.Количество = Окр(СтрокаТаблицы.Количество, 3);

			СтруктураОбластейМакета.ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
			СтруктураОбластейМакета.ОбластьМакета.Параметры.Заполнить(ДанныеСтроки);
			
			ДанныеСтроки.КоличествоМест = ДанныеПечати.КоличествоМест;
			
			СтруктураОбластейМакета.ОбластьМакета.Параметры.КоличествоМест 		= ДанныеПечати.КоличествоМест;
			СтруктураОбластейМакета.ОбластьМакета.Параметры.КоличествоВТоннах 	= Окр(СтрокаТаблицы.Количество, 3);
			
			Если СтруктураПеременных.НомерСтроки = 1 Тогда // первая строка
				ДанныеПечати.НомерСтраницы = "Страница " + НомерСтраницы; 
				СтруктураОбластейМакета.ОбластьЗаголовокТаблицы.Параметры.Заполнить(ДанныеПечати);
				ТабличныйДокумент.Вывести(СтруктураОбластейМакета.ОбластьЗаголовокТаблицы);

			Иначе
				МассивВыводимыхОбластей.Очистить();
				МассивВыводимыхОбластей.Добавить(СтруктураОбластейМакета.ОбластьМакета);
				МассивВыводимыхОбластей.Добавить(СтруктураОбластейМакета.ОбластьИтоговПоСтранице);
				
				Если СтруктураПеременных.НомерСтроки = СтруктураПеременных.КоличествоСтрок Тогда
					МассивВыводимыхОбластей.Добавить(СтруктураОбластейМакета.ОбластьВсего);
					МассивВыводимыхОбластей.Добавить(СтруктураОбластейМакета.ОбластьПодвала);					
				КонецЕсли;				
				
				Если СтруктураПеременных.НомерСтроки <> 1 И Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
					
					СтруктураОбластейМакета.ОбластьИтоговПоСтранице.Параметры.Заполнить(СтруктураПеременных.ИтоговыеСуммы);
					ТабличныйДокумент.Вывести(СтруктураОбластейМакета.ОбластьИтоговПоСтранице);
					
					 //Очистим итоги по странице.
					ОбнулитьИтогиПоСтраницеТТН(СтруктураПеременных.ИтоговыеСуммы);
					
					НомерСтраницы = НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
					ДанныеПечати.НомерСтраницы = "Страница " + НомерСтраницы; 
					СтруктураОбластейМакета.ОбластьЗаголовокТаблицы.Параметры.Заполнить(ДанныеПечати);
					ТабличныйДокумент.Вывести(СтруктураОбластейМакета.ОбластьЗаголовокТаблицы);
				
				КонецЕсли;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(СтруктураОбластейМакета.ОбластьМакета);
			РассчитатьИтоговыеСуммыТТН(СтруктураПеременных.ИтоговыеСуммы, ДанныеСтроки);
						
		КонецЦикла;	
	КонецЦикла;

КонецПроцедуры

// Возвращает заголовок документа для печатной формы.
//
// Параметры:
//  Шапка - любая структура с полями:
//           Номер         - Строка или Число - номер документа;
//           Дата          - Дата - дата документа;
//           Представление - Строка - (необязательный) платформенное представление ссылки на документ.
//                                    Если параметр НазваниеДокумента не задан, то название документа будет вычисляться
//                                    из этого параметра.
//  НазваниеДокумента - Строка - название документа (например, "Счет на оплату").
//
// Возвращаемое значение:
//  Строка - заголовок документа.
//
Функция СформироватьЗаголовокДокумента(Шапка, Знач НазваниеДокумента = "")
	
	ДанныеДокумента = Новый Структура("Номер,Дата,Представление");
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, Шапка);
	
	// Если название документа не передано, получим название по представлению документа.
	Если ПустаяСтрока(НазваниеДокумента) И ЗначениеЗаполнено(ДанныеДокумента.Представление) Тогда
		ПоложениеНомера = СтрНайти(ДанныеДокумента.Представление, ДанныеДокумента.Номер);
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(ДанныеДокумента.Представление, ПоложениеНомера - 1));
		КонецЕсли;
	КонецЕсли;

	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.Номер);
	Возврат СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),
		НазваниеДокумента, НомерНаПечать, Формат(ДанныеДокумента.Дата, "ДЛФ=DD"));
	
КонецФункции

Процедура ЗаполнитьЛоготипФаксимилеВОбластиМакета(ОбластьМакета, ДанныеОбъекта, ПодписиИФаксимиле, Ошибки)
	
	Для каждого ЭлементСоответствия Из ПодписиИФаксимиле Цикл
		
		ПлашкаПодписи = ПолучитьПлашкуПодписиБезопасно(ОбластьМакета, ЭлементСоответствия.Ключ, , Ошибки);
		Если ПлашкаПодписи = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеОбъекта[ЭлементСоответствия.Значение]) Тогда
			
			ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ДанныеОбъекта[ЭлементСоответствия.Значение]);
			Если ЗначениеЗаполнено(ДвоичныеДанные) Тогда
				
				ПлашкаПодписи.Картинка = Новый Картинка(ДвоичныеДанные);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПлашкуПодписиБезопасно(ОбластьМакета, ИмяПлашки, ПредставлениеПодписи, Ошибки)
	
	ПлашкаПодписи = ОбластьМакета.Области.Найти(ИмяПлашки);
	Если ПлашкаПодписи = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Нет места для картинки %1. Возможно используется пользовательский макет.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ?(ПустаяСтрока(ПредставлениеПодписи), ИмяПлашки, ПредставлениеПодписи));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстСообщения, Неопределено);
		
	КонецЕсли;
	
	ПлашкаПодписи.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
	
	Возврат ПлашкаПодписи;
	
КонецФункции

// Функция формирования структуры хранения данных строки.
//
// Параметры:
//	КоэффициентПересчета - Число - Коэффициент пересчета в валюту регл. учета
//
// Возвращаемое значение:
//	Структура - Структура данных строки товаров
//
Функция СтруктураДанныеСтрокиТТН()
	
	Структура = Новый Структура;
	Структура.Вставить("Номер", 0);
	Структура.Вставить("Мест", 0);
	Структура.Вставить("Количество", 0);
	Структура.Вставить("Цена", 0);
	Структура.Вставить("Всего", 0);
	Структура.Вставить("КоэффициентПересчета", 1);
	Структура.Вставить("МассаБрутто", 0);
	Структура.Вставить("МассаНетто", 0);
	Структура.Вставить("КоличествоМест", 0);
	
	Возврат Структура;
	
КонецФункции // СтруктураДанныеСтроки()

// Функция формирования структуры хранения итоговых суммы.
//
// Возвращаемое значение:
//	Структура - Структура хранения итоговых сумм
//
Функция СтруктураИтоговыеСуммыТТН()
	
	Структура = Новый Структура;
	
	// Инициализация итогов по странице.
	Структура.Вставить("ИтогоМассаБруттоНаСтранице", 0);
	Структура.Вставить("ИтогоМестНаСтранице", 0);
	Структура.Вставить("ИтогоКоличествоНаСтранице", 0);
	Структура.Вставить("ИтогоВсегоНаСтранице", 0);
	Структура.Вставить("ИтогоМассаНеттоНаСтранице", 0);
	Структура.Вставить("ИтогоКоличествоВТоннахНаСтранице", 0);
	Структура.Вставить("ИтогоКоличествоМестНаСтранице", 0);
	
	// Инициализация итогов по документу.
	Структура.Вставить("ИтогоМассаБрутто", 0);
	Структура.Вставить("ИтогоМест", 0);
	Структура.Вставить("ИтогоКоличество", 0);
	Структура.Вставить("ИтогоВсего", 0);
	Структура.Вставить("ИтогоМассаНетто", 0);
	Структура.Вставить("ИтогоКоличествоВТоннах", 0);
	Структура.Вставить("ИтогоКоличествоМест", 0);
	
	Структура.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", 0);
	Структура.Вставить("СуммаПрописью", "");
	
	Возврат Структура;
	
КонецФункции // СтруктураИтоговыеСуммы()

// Процедура рассчитывает итоговые суммы с учетом строки товаров.
//
// Параметры:
//	ИтоговыеСуммы - Структура - Структура итоговых сумм документа
//	ДанныеСтроки - Структура - Структура данных строки товаров
//
Процедура РассчитатьИтоговыеСуммыТТН(ИтоговыеСуммы, ДанныеСтроки)
	
	// Увеличим итоги по странице.
	ИтоговыеСуммы.ИтогоМестНаСтранице       		= ИтоговыеСуммы.ИтогоМестНаСтранице        			+ ДанныеСтроки.Мест;
	ИтоговыеСуммы.ИтогоКоличествоНаСтранице  		= ИтоговыеСуммы.ИтогоКоличествоНаСтранице  			+ ДанныеСтроки.Количество;
	ИтоговыеСуммы.ИтогоВсегоНаСтранице       		= ИтоговыеСуммы.ИтогоВсегоНаСтранице       			+ ДанныеСтроки.Всего;
	ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице 		= ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице 			+ ДанныеСтроки.МассаБрутто;
	ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  		= ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  			+ ДанныеСтроки.МассаНетто;
	ИтоговыеСуммы.ИтогоКоличествоВТоннахНаСтранице  = ИтоговыеСуммы.ИтогоКоличествоВТоннахНаСтранице  	+ ДанныеСтроки.Количество;
	ИтоговыеСуммы.ИтогоКоличествоМестНаСтранице  	= ИтоговыеСуммы.ИтогоКоличествоМестНаСтранице  		+ ДанныеСтроки.КоличествоМест;
	
	// Увеличим итоги по документу.
	ИтоговыеСуммы.ИтогоМест        			= ИтоговыеСуммы.ИтогоМест        		+ ДанныеСтроки.Мест;
	ИтоговыеСуммы.ИтогоКоличество  			= ИтоговыеСуммы.ИтогоКоличество  		+ ДанныеСтроки.Количество;
	ИтоговыеСуммы.ИтогоВсего       			= ИтоговыеСуммы.ИтогоВсего       		+ ДанныеСтроки.Всего;
	ИтоговыеСуммы.ИтогоМассаБрутто 			= ИтоговыеСуммы.ИтогоМассаБрутто 		+ ДанныеСтроки.МассаБрутто;
	ИтоговыеСуммы.ИтогоМассаНетто  			= ИтоговыеСуммы.ИтогоМассаНетто 		+ ДанныеСтроки.МассаНетто;
	ИтоговыеСуммы.ИтогоКоличествоВТоннах  	= ИтоговыеСуммы.ИтогоКоличествоВТоннах  + ДанныеСтроки.Количество; 
	ИтоговыеСуммы.ИтогоКоличествоМест  		= ИтоговыеСуммы.ИтогоКоличествоМест  	+ ДанныеСтроки.КоличествоМест;
	
КонецПроцедуры // РассчитатьИтоговыеСуммы()

// Процедура обнуления итоговых сумм по странице.
//
Процедура ОбнулитьИтогиПоСтраницеТТН(ИтоговыеСуммы)
	
	ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = 0;
	ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = 0;
	ИтоговыеСуммы.ИтогоМестНаСтранице        = 0;
	ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = 0;
	ИтоговыеСуммы.ИтогоВсегоНаСтранице       = 0;
	
КонецПроцедуры // ОбнулитьИтогиПоСтранице()

Функция ТаблицаОСВходящихВКомплекты(ДокументСсылка, СтруктураДополнительныеСвойства)
	ДатаДокумента = СтруктураДополнительныеСвойства.ДляПроведения.Дата;
	Организация = СтруктураДополнительныеСвойства.ДляПроведения.Организация;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаДокумента.СчетЗатрат КАК СчетЗатрат,
		|	ТаблицаДокумента.СтатьяЗатрат КАК СтатьяЗатрат
		|ПОМЕСТИТЬ ВременнаяТаблицаКомплекты
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.ОС КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|	И ТаблицаДокумента.ОсновноеСредство.ЭтоКомплект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоставОССрезПоследних.ОсновноеСредствоВСоставеКомплекта КАК ОсновноеСредство,
		|	ВременнаяТаблицаКомплекты.СчетЗатрат КАК СчетЗатрат,
		|	ВременнаяТаблицаКомплекты.СтатьяЗатрат КАК СтатьяЗатрат
		|ИЗ
		|	ВременнаяТаблицаКомплекты КАК ВременнаяТаблицаКомплекты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставОС.СрезПоследних(
		|				&МомВрем,
		|				ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаКомплекты.ОсновноеСредство КАК ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаКомплекты КАК ВременнаяТаблицаКомплекты)) КАК СоставОССрезПоследних
		|		ПО ВременнаяТаблицаКомплекты.ОсновноеСредство = СоставОССрезПоследних.ОсновноеСредство
		|			И (СоставОССрезПоследних.СостояниеВСоставеОС = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектацияОС.Комплектация)
		|					ИЛИ СоставОССрезПоследних.СостояниеВСоставеОС = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектацияОС.Добавление))";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Параметры.Вставить("МомВрем", Новый Граница(ДокументСсылка.МоментВремени(), ВидГраницы.Исключая));
	ТаблицаОС = Запрос.Выполнить().Выгрузить();
	
	МассивОсновныхСредств = ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство");
	УправлениеВнеоборотнымиАктивами.ЗаполнитьДанныеОсновныхСредствВТабличнойЧасти(ДокументСсылка, ДатаДокумента, Организация, ТаблицаОС, МассивОсновныхСредств);
	
	Возврат ТаблицаОС;

КонецФункции

#КонецОбласти

#КонецЕсли