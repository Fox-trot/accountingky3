#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоСчетуНаОплатуПокупателю(ДанныеЗаполнения) Экспорт
	
	ДокументОснование = ДанныеЗаполнения;
	
	Организация				= ДанныеЗаполнения.Организация;
	Склад					= ДанныеЗаполнения.Склад;
	БезналичныйРасчет		= ДанныеЗаполнения.БезналичныйРасчет;
	// Сведения о контрагенте
	Контрагент          	= ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента  	= ДанныеЗаполнения.ДоговорКонтрагента;
	СчетаРасчетовСКонтрагентом = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	СчетРасчетов 			= СчетаРасчетовСКонтрагентом.СчетРасчетовПокупателя;			
	// Валюта
	ВалютаДокумента     	= ДанныеЗаполнения.ВалютаДокумента;
	Курс					= ДанныеЗаполнения.Курс;
	Кратность				= ДанныеЗаполнения.Кратность;
	// Налоги
	СтавкаНДС				= ДанныеЗаполнения.СтавкаНДС;
	СтавкаНСП				= ДанныеЗаполнения.СтавкаНСП;
	СтавкаНСПУслуги			= ДанныеЗаполнения.СтавкаНСПУслуги;
	СуммаВключаетНалоги		= ДанныеЗаполнения.СуммаВключаетНалоги;
	// Скидки
	ВидСкидкиНаценки    	= ДанныеЗаполнения.ВидСкидкиНаценки;
	ПроцентСкидкиНаценки 	= ДанныеЗаполнения.ПроцентСкидкиНаценки;
	Если ЗначениеЗаполнено(ВидСкидкиНаценки) Тогда 
		СчетУчетаСкидок 	= ПланыСчетов.Хозрасчетный.ВозвратПроданныхТоваровИСкидки;
	КонецЕсли;	
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.СуммаДохода = НоваяСтрокаТабличнойЧасти.Всего - НоваяСтрокаТабличнойЧасти.СуммаНДС - НоваяСтрокаТабличнойЧасти.СуммаНСП;
		
		СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СчетаУчетаНоменклатуры);
		НоваяСтрокаТабличнойЧасти.СчетСебестоимости = СчетаУчетаНоменклатуры.СчетРасхода;
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Услуги Цикл
		НоваяСтрокаТабличнойЧасти = Услуги.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.СуммаДохода = НоваяСтрокаТабличнойЧасти.Всего - НоваяСтрокаТабличнойЧасти.СуммаНДС - НоваяСтрокаТабличнойЧасти.СуммаНСП;
		
		СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СчетаУчетаНоменклатуры);
		
		НоваяСтрокаТабличнойЧасти.ДополнительныеСведения = СтрокаТабличнойЧасти.Номенклатура.Наименование;
	КонецЦикла;

	СуммаДокумента = Товары.Итог("Всего") + Услуги.Итог("Всего");
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//
Процедура ЗаполнитьПоДвижениюМБП(ДанныеЗаполнения) Экспорт
	ДокументОснование 	= ДанныеЗаполнения;
	Организация 		= ДанныеЗаполнения.Организация;
	Дата 				= ДанныеЗаполнения.Дата;
 	Для каждого СтрокаТабличнойЧасти Из ДокументОснование.Товары Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		НоваяСтрока.СчетСебестоимости = СтрокаТабличнойЧасти.СчетЗатрат;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.СчетНаОплатуПокупателю")] = "ЗаполнитьПоСчетуНаОплатуПокупателю";
	СтратегияЗаполнения[Тип("ДокументСсылка.ДвижениеМБП")] = "ЗаполнитьПоДвижениюМБП";
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(БанковскийСчет) Тогда		
		БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Организация);		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСФ) Тогда 
		ДатаСФ = ТекущаяДатаСеанса();	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.СтавкаНДС = Справочники.СтавкиНДС.Освобожденная Тогда
	 	СерияБланкаСФ = "ДПБУ";
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	// Проверка заполнения табличных частей
	Если Товары.Количество() = 0
		И Услуги.Количество() = 0
		И ОС.Количество() = 0 Тогда	
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнен ни один список.'"),,,,Отказ)		
	ИначеЕсли Товары.Количество() = 0 Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("СтавкаНСП");
	ИначеЕсли Услуги.Количество() = 0 Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("СтавкаНСПУслуги");
	КонецЕсли;
	
	Если Товары.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;	
	
	// Проверка заполнения Скидки/Наценки
	Если НЕ ЗначениеЗаполнено(ВидСкидкиНаценки) Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаСкидок");
	КонецЕсли;	
	
	Если Курс = 0 Или Кратность = 0 Тогда 
		ТекстСообщения = НСтр("ru = 'Не заполнен курс валюты ""%1"". Откройте список валют (Банк и касса - Валюты) и проверьте,
			|что у валюты ""%1"" установлен курс на дату %2 или ранее.
			|Перевыберите договор и заново проведите документ.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ВалютаДокумента, Формат(Дата, "ДЛФ=D"));	
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;

	Если ЗначениеЗаполнено(СерияБланкаСФ) И НЕ ЗначениеЗаполнено(НомерБланкаСФ) 
		И Контрагент.ПризнакСтраны = Перечисления.ПризнакиСтраны.КР Тогда 
		ТекстСообщения = НСтр("ru = 'Необходимо заполнить поле ""Номер бланка СФ"" или очистить поле ""Серия бланка СФ"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.НомерБланкаСФ",, Отказ);
	КонецЕсли;
	
	ОбщегоНазначенияБПСервер.ДобавитьНепроверяемыеРеквизитыПоПараметрамФункциональныхОпций(МассивНепроверяемыхРеквизитов, Организация, Дата);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ВыполнитьПредварительныйКонтроль(Отказ);	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СерияБланкаСФ) 
		И ЗначениеЗаполнено(ДоговорКонтрагента) 
		И ДоговорКонтрагента.СтавкаНДС = Справочники.СтавкиНДС.Освобожденная Тогда
	 	СерияБланкаСФ = "ДПБУ";
	КонецЕсли;

	
	СуммаДокумента = Товары.Итог("Всего") + Услуги.Итог("Всего") + ОС.Итог("Всего");
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.РеализацияТоваровУслуг.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	УчетТоваров.СформироватьДвиженияСписаниеТоваров(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСписанныеТовары, 
		ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты, Движения, Отказ, ДополнительныеСвойства);
	УчетМБП.СформироватьДвиженияСписаниеМБП(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСписанныеМБП, 
		ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты, Движения, Отказ, ДополнительныеСвойства);
		
	УправлениеВнеоборотнымиАктивами.СформироватьДвиженияСписаниеОС(ДополнительныеСвойства, Движения, Отказ);
	
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	
	БухгалтерскийУчетСервер.ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьПродажиОсновныхСредств(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСчетаФактурыВыписанные(ДополнительныеСвойства, Движения, Отказ);

	БухгалтерскийУчетСервер.ОтразитьБланкиСчетовФактур(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьНДС(ДополнительныеСвойства, Движения, Отказ);
	
	БухгалтерскийУчетСервер.ОтразитьСобытияОС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСостоянияОС(ДополнительныеСвойства, Движения, Отказ); 
	БухгалтерскийУчетСервер.ОтразитьДвижениеОСНУ(ДополнительныеСвойства, Движения, Отказ);

	БухгалтерскийУчетСервер.ОтразитьСоставОС(ДополнительныеСвойства, Движения, Отказ);
	
	НалоговыйУчет.СформироватьДвиженияКорректировкаНУ(ДополнительныеСвойства, Движения, Отказ);
		
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	// Проверка наличия серии и номера СФ в базе.
	Если ЗначениеЗаполнено(СерияБланкаСФ) И СерияБланкаСФ <> "ДПБУ" Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	БланкиСчетовФактурОбороты.СерияБланкаСФ КАК СерияБланкаСФ,
			|	БланкиСчетовФактурОбороты.Регистратор КАК Регистратор,
			|	ЕСТЬNULL(БланкиСчетовФактурОбороты.КоличествоРасход, 0) КАК КоличествоРасход,
			|	ЕСТЬNULL(БланкиСчетовФактурОбороты.КоличествоПриход, 0) КАК КоличествоПриход
			|ИЗ
			|	РегистрНакопления.БланкиСчетовФактур.Обороты(
			|			,
			|			,
			|			Авто,
			|			Организация = &Организация
			|				И СерияБланкаСФ = &СерияБланкаСФ
			|				И НомерБланкаСФ = &НомерБланкаСФ) КАК БланкиСчетовФактурОбороты
			|ГДЕ
			|	НЕ БланкиСчетовФактурОбороты.Регистратор = &Ссылка";
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("СерияБланкаСФ", СерияБланкаСФ);
		Запрос.УстановитьПараметр("НомерБланкаСФ", НомерБланкаСФ);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		              
		Если РезультатЗапроса.Пустой() Тогда
			ТекстСообщения = НСтр("ru = 'Указанных серии или номера СФ нет в базе. Необходимо оформить документ ""Поступление бланков счетов-фактур"".'");
			БухгалтерскийУчетСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,, Отказ);	
		Иначе
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
				Если ВыборкаДетальныеЗаписи.КоличествоРасход > 0 Тогда 
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Указанные серия и номер СФ уже использованы. %1.'"), ВыборкаДетальныеЗаписи.Регистратор);
					БухгалтерскийУчетСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,, Отказ);	
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;			
	КонецЕсли;	
КонецПроцедуры // ВыполнитьПредварительныйКонтроль()

#КонецОбласти

#КонецЕсли