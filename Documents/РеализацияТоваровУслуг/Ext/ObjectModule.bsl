#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыИФункцииОбщегоНазначения

Процедура УстановитьДополнительныеСвойства(ДополнительныеСвойства)
	УПП = БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций(Дата, Организация);
	Если Товары.Количество() > 0 Тогда	
		ДополнительныеСвойства.ДляПроведения.Вставить("СпособОценки", ?(ЗначениеЗаполнено(Ссылка.Товары[0].СпособОценки), Ссылка.Товары[0].СпособОценки, Перечисления.СпособыОценки.ПоСредней));
	Иначе
		ДополнительныеСвойства.ДляПроведения.Вставить("СпособОценки", Перечисления.СпособыОценки.ПоСредней);			
	КонецЕсли;	
	
	ДополнительныеСвойства.ДляПроведения.Вставить("СкладРасход", 			Склад);
	ДополнительныеСвойства.ДляПроведения.Вставить("ПлательщикНДС", 			УПП.ПлательщикНДС);
	ДополнительныеСвойства.ДляПроведения.Вставить("ПлательщикНСП", 			УПП.ПлательщикНСП);
	ДополнительныеСвойства.ДляПроведения.Вставить("КонтрСчетУчетаСкидок", 	ПланыСчетов.Хозрасчетный.ВозвратПроданныхТоваровИСкидки);
КонецПроцедуры

// Выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если Товары.Количество() = 0 И Услуги.Количество() = 0 И ОС.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Требуется, чтобы была заполнена хотя бы одна табличная часть.'");
		БухгалтерскийУчетСервер.СообщитьОбОшибке(
		ЭтотОбъект,
		ТекстСообщения,
		,
		,
		,
		Отказ);
	КонецЕсли;	
	
КонецПроцедуры

Функция ПересчетСуммыДокумента()
	
	СуммаДокумента = Товары.Итог("Итого") + Услуги.Итог("Итого") + ОС.Итог("Сумма");
	
КонецФункции // ПересчетСуммыДокумента()

#КонецОбласти	

#Область ПроцедурыЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоСчетуНаОплатуПокупателю(ДанныеЗаполнения) Экспорт
	
	ЭтотОбъект.ДокументОснование = ДанныеЗаполнения;

	Организация			= ДанныеЗаполнения.Организация;
	ВалютаДокумента     = ДанныеЗаполнения.ВалютаДокумента;
	Курс                = ДанныеЗаполнения.Курс;
	БанковскийСчет      = ДанныеЗаполнения.БанковскийСчет;
	Контрагент          = ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента  = ДанныеЗаполнения.ДоговорКонтрагента;
	Склад               = ДанныеЗаполнения.Склад;
	ВидСкидки           = ДанныеЗаполнения.ВидСкидки;
	СкидкаПроцент       = ДанныеЗаполнения.СкидкаПроцент;
	СуммаСкидки         = ДанныеЗаполнения.СуммаСкидки;
	ВидПоставкиНДС      = ДанныеЗаполнения.ВидПоставкиНДС;
	ТипЦен              = ДанныеЗаполнения.ТипЦен;
	СуммаДокумента      = ДанныеЗаполнения.СуммаДокумента;
	СуммаНДС            = ДанныеЗаполнения.СуммаНДС;
	СуммаНСП            = ДанныеЗаполнения.СуммаНСП;
	Дата = ТекущаяДата();
	
	УПП = БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций(Дата, Организация);
	
	СчетаУчета 	= БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	СчетРасчетов= СчетаУчета.СчетРасчетовПокупателя;		
	СчетАвансов	= СчетаУчета.СчетАвансовПокупателя;
	
	Для каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрока = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
	    СтруктураСчетовУчета 	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСчетовУчета);
		НоваяСтрока.СпособОценки = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСпособОценкиЗапасов(СтрокаТабличнойЧасти.СчетУчета, Перечисления.СпособыОценки.ПоСредней);
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Услуги Цикл
		НоваяСтрока = Услуги.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
	    СтруктураСчетовУчета 	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСчетовУчета);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.СчетНаОплатуПокупателю")] = "ЗаполнитьПоСчетуНаОплатуПокупателю";
	
	ЗаполнениеОбъектов.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ДатаДокумента = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата());
	Если НЕ ЗначениеЗаполнено(БанковскийСчет) Тогда		
		БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Организация);		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) 
		И ЗначениеЗаполнено(ДоговорКонтрагента)
		И ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаРасчетов)Тогда
		ВалютаДокумента = ДоговорКонтрагента.ВалютаРасчетов;			
	Иначе	
		ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Курс) Тогда
		Курс = 1;
		Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
			КурсСтруктура	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()));
			Курс 			= КурсСтруктура.Курс;
		КонецЕсли;
	КонецЕсли;
	КонтрСчетУчетаСкидок = ПланыСчетов.Хозрасчетный.ВозвратПроданныхТоваровИСкидки;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	УПП = БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций(Дата, Организация);
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	УстановитьДополнительныеСвойства(ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.РеализацияТоваровУслуг.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьМБПСклад(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьРеализация(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьБланкиСФ(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьНДС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьРеализацияИтоги(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьМБПЭксплуатация(ДополнительныеСвойства,Движения, Отказ);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Если Товары.Количество() <> 0 Тогда
		БухгалтерскийУчетСервер.ВыполнитьКонтрольЗапасы(Ссылка, ДополнительныеСвойства, Отказ);
		
		Отбор 	 = Новый Структура("СчетУчета", ПланыСчетов.Хозрасчетный.МБП);
		МБП		 = Товары.НайтиСтроки(Отбор);	
		Если МБП.Количество() <> 0 Тогда
			Если МБПЭксплуатация Тогда
			 	БухгалтерскийУчетСервер.ВыполнитьКонтрольМБПЭксплуатация(Ссылка, ДополнительныеСвойства, Отказ);
			Иначе
				БухгалтерскийУчетСервер.ВыполнитьКонтрольМБПСклад(Ссылка, ДополнительныеСвойства, Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	БухгалтерскийУчетСервер.ВыполнитьКонтрольЗапасы(Ссылка, ДополнительныеСвойства, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	// Предварительный контроль
	
	//Проверка одного и того же значения поля "СтавкаНДС" во всех строках табличных частей "Товары" и "Услуги"
	Если Товары.Количество() = 1 И Услуги.Количество() = 0 ИЛИ Товары.Количество() = 0 И Услуги.Количество() = 1 Тогда	
	Иначе
		Если Товары.Количество() > 0 Тогда
			Ноль = 0;
			
			Пока Товары.Количество() > Ноль Цикл 
				Если Товары[0].СтавкаНДС = Товары[Ноль].СтавкаНДС Тогда	
				Иначе
					Сообщить("Ставка НДС должна быть одинакова для всех строк в закладке ""Товары"" и в закладке ""Услуги"" ");
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				Ноль = Ноль + 1;
			КонецЦикла;
			
			Если Услуги.Количество() > 0 Тогда
				
				Ноль = 0;
				
				Пока Услуги.Количество() > Ноль Цикл 
					Если Товары[0].СтавкаНДС = Услуги[Ноль].СтавкаНДС Тогда	
					Иначе
						Сообщить("Ставка НДС должна быть одинакова для всех строк в закладке ""Товары"" и в закладке ""Услуги"" ");
						Отказ = Истина;
						Возврат;
					КонецЕсли;
				Ноль = Ноль + 1;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Ноль = 0;
				
			Пока Услуги.Количество() > Ноль Цикл 
				Если Услуги[0].СтавкаНДС = Услуги[Ноль].СтавкаНДС Тогда	
				Иначе
					Сообщить("Ставка НДС должна быть одинакова для всех строк в закладке ""Товары"" и в закладке ""Услуги"" ");
					Отказ = Истина;
					Возврат;
				КонецЕсли;
			Ноль = Ноль + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьПредварительныйКонтроль(Отказ);

	Если МБПЭксплуатация Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Товары.СчетСебестоимости"));
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ПересчетСуммыДокумента()
	
	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли