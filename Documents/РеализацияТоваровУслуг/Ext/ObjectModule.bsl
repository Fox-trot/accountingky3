#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ЗаполненияДокумента

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоСчетуНаОплатуПокупателю(ДанныеЗаполнения) Экспорт
	
	ДокументОснование = ДанныеЗаполнения;
	
	Организация				= ДанныеЗаполнения.Организация;
	Склад					= ДанныеЗаполнения.Склад;
	БезналичныйРасчет		= ДанныеЗаполнения.БезналичныйРасчет;
	// Сведения о контрагенте
	Контрагент          	= ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента  	= ДанныеЗаполнения.ДоговорКонтрагента;
	СчетаРасчетовСКонтрагентом = БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	СчетРасчетов 			= СчетаРасчетовСКонтрагентом.СчетРасчетовПокупателя;
	// Серия бланка СФ
	Если ДоговорКонтрагента.СтавкаНДС = Справочники.СтавкиНДС.Освобожденная 
		ИЛИ ДоговорКонтрагента.СтавкаНДС = Справочники.СтавкиНДС.Необлагаемая Тогда
	 	СерияБланкаСФ = "ДПБУ";
	КонецЕсли;
	// Валюта
	ВалютаДокумента     	= ДанныеЗаполнения.ВалютаДокумента;
	Курс					= ДанныеЗаполнения.Курс;
	Кратность				= ДанныеЗаполнения.Кратность;
	// Налоги
	СтавкаНДС				= ДанныеЗаполнения.СтавкаНДС;
	СтавкаНСП				= ДанныеЗаполнения.СтавкаНСП;
	СтавкаНСПУслуги			= ДанныеЗаполнения.СтавкаНСПУслуги;
	СуммаВключаетНалоги		= ДанныеЗаполнения.СуммаВключаетНалоги;
	// Скидки
	ВидСкидкиНаценки    	= ДанныеЗаполнения.ВидСкидкиНаценки;
	ПроцентСкидкиНаценки 	= ДанныеЗаполнения.ПроцентСкидкиНаценки;
	Если ЗначениеЗаполнено(ВидСкидкиНаценки) Тогда 
		СчетУчетаСкидок 	= ПланыСчетов.Хозрасчетный.ВозвратПроданныхТоваровИСкидки;
	КонецЕсли;	
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.СуммаДохода = НоваяСтрокаТабличнойЧасти.Всего - НоваяСтрокаТабличнойЧасти.СуммаНДС - НоваяСтрокаТабличнойЧасти.СуммаНСП;
		
		СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СчетаУчетаНоменклатуры);
		НоваяСтрокаТабличнойЧасти.СчетСебестоимости = СчетаУчетаНоменклатуры.СчетРасхода;
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Услуги Цикл
		НоваяСтрокаТабличнойЧасти = Услуги.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		НоваяСтрокаТабличнойЧасти.СуммаДохода = НоваяСтрокаТабличнойЧасти.Всего - НоваяСтрокаТабличнойЧасти.СуммаНДС - НоваяСтрокаТабличнойЧасти.СуммаНСП;
		
		СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СчетаУчетаНоменклатуры);
		
		НоваяСтрокаТабличнойЧасти.ДополнительныеСведения = СтрокаТабличнойЧасти.Номенклатура.Наименование;
	КонецЦикла;

	СуммаДокумента = Товары.Итог("Всего") + Услуги.Итог("Всего");
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//
Процедура ЗаполнитьПоДвижениюМБП(ДанныеЗаполнения) Экспорт
	ДокументОснование 	= ДанныеЗаполнения;
	Организация 		= ДанныеЗаполнения.Организация;
	Дата 				= ДанныеЗаполнения.Дата;
 	Для каждого СтрокаТабличнойЧасти Из ДокументОснование.Товары Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		НоваяСтрока.СчетСебестоимости = СтрокаТабличнойЧасти.СчетЗатрат;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоПоступлениюТоваровУслуг(ДанныеЗаполнения) Экспорт
	
	ДокументОснование 		= ДанныеЗаполнения;	
	Организация				= ДанныеЗаполнения.Организация;
	Склад					= ДанныеЗаполнения.Склад;
	// Сведения о контрагенте
	Контрагент 				= ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента 		= ДанныеЗаполнения.ДоговорКонтрагента;
	СчетРасчетов 			= ДанныеЗаполнения.СчетРасчетов;
	// Серия бланка СФ
	Если ДоговорКонтрагента.СтавкаНДС = Справочники.СтавкиНДС.Освобожденная 
		ИЛИ ДоговорКонтрагента.СтавкаНДС = Справочники.СтавкиНДС.Необлагаемая Тогда
	 	СерияБланкаСФ = "ДПБУ";
	КонецЕсли;
	// Валюта
	ВалютаДокумента 		= ДанныеЗаполнения.ВалютаДокумента;			
	Курс 					= ДанныеЗаполнения.Курс;			
	Кратность 				= ДанныеЗаполнения.Кратность;
	// Налоги
	ЗначениеСтавкиНДС		= ДанныеЗаполнения.ЗначениеСтавкиНДС;
	ЗначениеСтавкиНСП		= ДанныеЗаполнения.ЗначениеСтавкиНСП;
	ЗначениеСтавкиНСПДляОС	= ДанныеЗаполнения.ЗначениеСтавкиНСПДляОС;
	СуммаВключаетНалоги 	= ДанныеЗаполнения.СуммаВключаетНалоги;
	БезналичныйРасчет		= ДанныеЗаполнения.БезналичныйРасчет;	
	// Флаги
	ИспользоватьДопЕдиницы 	= ДанныеЗаполнения.ИспользоватьДопЕдиницы;
	
	МассивТаблиц = ПолучитьДанныеПоПоступлению(Ложь);
	
	Товары.Очистить();
	Услуги.Очистить();
	Ос.Очистить();
	
	Если МассивТаблиц.Количество() <> 0 Тогда 
		Для Каждого СтрокаТаблицы Из МассивТаблиц[0] Цикл
			СтрокаТабличнойЧасти = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы);
			СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура);
			СтрокаТабличнойЧасти.СчетДохода = СчетаУчетаНоменклатуры.СчетДохода;
			СтрокаТабличнойЧасти.СуммаДохода = Окр(СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.СуммаНДС - СтрокаТабличнойЧасти.СуммаНСП, 2);
		КонецЦикла;	
		
		Для Каждого СтрокаТаблицы Из МассивТаблиц[1] Цикл		
			СтрокаТабличнойЧасти = Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы);
			СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура);
			СтрокаТабличнойЧасти.СчетДохода = СчетаУчетаНоменклатуры.СчетДохода;
			СтрокаТабличнойЧасти.СуммаДохода = Окр(СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.СуммаНДС - СтрокаТабличнойЧасти.СуммаНСП, 2);
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из МассивТаблиц[2] Цикл		
			СтрокаТабличнойЧасти = ОС.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы);
			СтрокаТабличнойЧасти.СчетЗатрат = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасходыПоВыбытиюАктивов"); // 9540
			СтрокаТабличнойЧасти.СчетДохода = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПрочиеДоходыОтНеоперационнойДеятельности"); // 9190
			СтрокаТабличнойЧасти.СуммаДохода = Окр(СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.СуммаНДС - СтрокаТабличнойЧасти.СуммаНСП, 2);
		КонецЦикла;
	КонецЕсли;
	
	СуммаДокумента = Товары.Итог("Всего") + Услуги.Итог("Всего") + ОС.Итог("Всего");
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоПеремещениюТоваров(ДанныеЗаполнения) Экспорт
	
	ДокументОснование 		= ДанныеЗаполнения;	
	Организация				= ДанныеЗаполнения.Организация;
	Склад					= ДанныеЗаполнения.СкладПолучатель;
		
	Товары.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПеремещениеТоваровТовары.Ссылка КАК Ссылка,
		|	ПеремещениеТоваровТовары.НомерСтроки КАК НомерСтроки,
		|	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
		|	ПеремещениеТоваровТовары.Количество КАК Количество,
		|	ПеремещениеТоваровТовары.СчетУчета КАК СчетУчета,
		|	ПеремещениеТоваровТовары.НовыйСчетУчета КАК НовыйСчетУчета
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		|ГДЕ
		|	ПеремещениеТоваровТовары.Ссылка = &ДокументОснование";
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ТаблицаТовары 	= Запрос.Выполнить().Выгрузить();
	Если ТаблицаТовары.Количество() <> 0 Тогда 
		Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
			СтрокаТабличнойЧасти = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы);
			СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура);
			СтрокаТабличнойЧасти.СчетДохода = СчетаУчетаНоменклатуры.СчетДохода;
			СтрокаТабличнойЧасти.СуммаДохода = Окр(СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.СуммаНДС - СтрокаТабличнойЧасти.СуммаНСП, 2);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоЗаказуНаПроизводство(ДанныеЗаполнения) Экспорт
	ДокументОснование 		= ДанныеЗаполнения;	
	Организация				= ДанныеЗаполнения.Организация;
	Склад					= ДанныеЗаполнения.Склад;
	
	// Сведения о контрагенте
	Контрагент 				= ДанныеЗаполнения.Контрагент;
	ДоговорКонтрагента 		= ДанныеЗаполнения.ДоговорКонтрагента;
	
	// Серия бланка СФ
	Если ДоговорКонтрагента.СтавкаНДС = Справочники.СтавкиНДС.Освобожденная 
		ИЛИ ДоговорКонтрагента.СтавкаНДС = Справочники.СтавкиНДС.Необлагаемая Тогда
	 	СерияБланкаСФ = "ДПБУ";
	КонецЕсли;
	
	// Валюта
	ВалютаДокумента 			= ДанныеЗаполнения.ВалютаДокумента;	
	ВалютаРасчетовКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеЗаполнения.ДоговорКонтрагента.ВалютаРасчетов, ДокументОснование.Дата);
	Курс 		= ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
	Кратность 	= ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1, ВалютаРасчетовКурсКратность.Кратность);
	
	// Налоги
	СтавкаНДС				= ДанныеЗаполнения.СтавкаНДС;
	СтавкаНСП				= ДанныеЗаполнения.СтавкаНСП;
	СуммаВключаетНалоги 	= ДанныеЗаполнения.ДоговорКонтрагента.СуммаВключаетНалоги;	
	
	СчетРасчетов = БухгалтерскийУчетВызовСервера.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента).СчетРасчетовПокупателя;
	
	// Скидки
	ОбщийПроцент 	= ДанныеЗаполнения.Продукция.Итог("ПроцентСкидкиНаценки");
	ОбщаяСкидка 	= ДанныеЗаполнения.Продукция.Итог("СуммаСкидки");
	
	Если ОбщийПроцент > 0 Тогда
		ВидСкидкиНаценки = Перечисления.ВидыСкидокНаценок.ПроцентПоСтроке;	
	ИначеЕсли ОбщаяСкидка > 0 Тогда	
		ВидСкидкиНаценки = Перечисления.ВидыСкидокНаценок.СуммаПоСтроке;
	КонецЕсли;	
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Продукция Цикл
		НоваяСтрокаТабличнойЧасти = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧасти, СтрокаТабличнойЧасти);
		СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(Организация, НоваяСтрокаТабличнойЧасти.Номенклатура);
		НоваяСтрокаТабличнойЧасти.СчетДохода = СчетаУчетаНоменклатуры.СчетДохода;
		НоваяСтрокаТабличнойЧасти.СчетУчета = СчетаУчетаНоменклатуры.СчетУчета;
		НоваяСтрокаТабличнойЧасти.СчетСебестоимости = СчетаУчетаНоменклатуры.СчетРасхода;
		НоваяСтрокаТабличнойЧасти.СтатьяРасхода = СчетаУчетаНоменклатуры.СтатьяРасхода;
		НоваяСтрокаТабличнойЧасти.СуммаДохода = Окр(НоваяСтрокаТабличнойЧасти.Всего - НоваяСтрокаТабличнойЧасти.СуммаНДС - НоваяСтрокаТабличнойЧасти.СуммаНСП, 2);
	КонецЦикла;	
	
	СуммаДокумента = Товары.Итог("Всего");	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.СчетНаОплатуПокупателю")] = "ЗаполнитьПоСчетуНаОплатуПокупателю";
	СтратегияЗаполнения[Тип("ДокументСсылка.ДвижениеМБП")] = "ЗаполнитьПоДвижениюМБП";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПоступлениеТоваровУслуг")] = "ЗаполнитьПоПоступлениюТоваровУслуг";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПеремещениеТоваров")] = "ЗаполнитьПоПеремещениюТоваров";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказНаПроизводство")] = "ЗаполнитьПоЗаказуНаПроизводство";
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(БанковскийСчет) Тогда		
		БанковскийСчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьОсновнойБанковскийСчетОрганизации(Организация);		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСФ) Тогда 
		ДатаСФ = ТекущаяДатаСеанса();	
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	// Проверка заполнения табличных частей
	Если Товары.Количество() = 0
		И Услуги.Количество() = 0
		И ОС.Количество() = 0 Тогда	
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не заполнен ни один список.'"),,,,Отказ)		
	ИначеЕсли Товары.Количество() = 0 Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("СтавкаНСП");
	ИначеЕсли Услуги.Количество() = 0 Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("СтавкаНСПУслуги");
	КонецЕсли;
	
	Если БезналичныйРасчет Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтавкаНСП");
		МассивНепроверяемыхРеквизитов.Добавить("СтавкаНСПУслуги");
	КонецЕсли;	
	
	Если Товары.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;	
	
	// Проверка заполнения Скидки/Наценки
	Если НЕ ЗначениеЗаполнено(ВидСкидкиНаценки) Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаСкидок");
	КонецЕсли;	
	
	Если Курс = 0 Или Кратность = 0 Тогда 
		ТекстСообщения = НСтр("ru = 'Не заполнен курс валюты ""%1"". Откройте список валют (Банк и касса - Валюты) и проверьте,
			|что у валюты ""%1"" установлен курс на дату %2 или ранее.
			|Перевыберите договор и заново проведите документ.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ВалютаДокумента, Формат(Дата, "ДЛФ=D"));	
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;

	// Если на реализацию выписан счет-фактура, то очищаем серию и номер.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СчетаФактурыВыписанные.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.СчетаФактурыВыписанные КАК СчетаФактурыВыписанные
		|ГДЕ
		|	СчетаФактурыВыписанные.Организация = &Организация
		|	И СчетаФактурыВыписанные.Документ = &Документ
		|	И НЕ СчетаФактурыВыписанные.Регистратор = &Документ";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Документ", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Если ЗначениеЗаполнено(СерияБланкаСФ)
			Или ЗначениеЗаполнено(НомерБланкаСФ) Тогда 
			СерияБланкаСФ = "";
			НомерБланкаСФ = "";
		КонецЕсли;	
	КонецЕсли;
	
	// Проверка заполнения СФ и номера.	
	Если (ЗначениеЗаполнено(СерияБланкаСФ) И НЕ ЗначениеЗаполнено(НомерБланкаСФ) 
		И Контрагент.ПризнакСтраны = Перечисления.ПризнакиСтраны.КР)
		И (СерияБланкаСФ = "ДПБУ" И СтавкаНДС <> Справочники.СтавкиНДС.Освобожденная 
		И СтавкаНДС <> Справочники.СтавкиНДС.Необлагаемая) Тогда 
		
		ТекстСообщения = НСтр("ru = 'Необходимо заполнить поле ""Номер бланка СФ"" или очистить поле ""Серия бланка СФ"".'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.НомерБланкаСФ",, Отказ);
	КонецЕсли;
	
	ПлательщикНДС = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Дата, Организация).ПлательщикНДС;
	
	Если НЕ ПлательщикНДС Тогда
		МассивТабличныхЧастей = Новый Массив();
		МассивТабличныхЧастей.Добавить(Товары);
		МассивТабличныхЧастей.Добавить(Услуги);
		МассивТабличныхЧастей.Добавить(ОС);
		ПрерватьЦикл = Ложь;
		
		Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
			
			Если ПрерватьЦикл Тогда
				Прервать;				
			КонецЕсли;	
			
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
				
				Если СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.СуммаСкидки
					ИЛИ СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.СуммаСкидки Тогда
					
					МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаДохода");
					МассивНепроверяемыхРеквизитов.Добавить("Услуги.СуммаДохода");
					МассивНепроверяемыхРеквизитов.Добавить("ОС.СуммаДохода");
					ПрерватьЦикл = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;	
	КонецЕсли;
		
	ОбщегоНазначенияБПСервер.ДобавитьНепроверяемыеРеквизитыПоПараметрамФункциональныхОпций(МассивНепроверяемыхРеквизитов, Организация, Дата);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ВыполнитьПредварительныйКонтроль(Отказ);	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = Товары.Итог("Всего") + Услуги.Итог("Всего") + ОС.Итог("Всего");
		
	Если (ЗначениеЗаполнено(СерияБланкаСФ) Или ЗначениеЗаполнено(НомерБланкаСФ)) И Не ЗначениеЗаполнено(ДатаСФ) Тогда 
		ДатаСФ = Дата;
	КонецЕсли;

	РассчитатьСуммыВРегламентированнойВалюте();	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанные(Отказ, РежимПроведения);
	
	ОтразитьДвижения(Отказ, РежимПроведения);
		
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	СерияБланкаСФ = "";
	НомерБланкаСФ = "";
	ДатаСФ = '00010101';
	
	СтруктураДанные = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаРасчетов, Дата);
	Курс      = ?(СтруктураДанные.Курс = 0, 1, СтруктураДанные.Курс);
	Кратность = ?(СтруктураДанные.Кратность = 0, 1, СтруктураДанные.Кратность);
	
	КурсНБКР      = ?(СтруктураДанные.Курс = 0, 1, СтруктураДанные.Курс);
	КратностьНБКР = ?(СтруктураДанные.Кратность = 0, 1, СтруктураДанные.Кратность);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбработкаПроведения

// Процедура инициализирует данные документа
// и подготавливает таблицы для движения в регистры
//
Процедура ИнициализироватьДанные(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.РеализацияТоваровУслуг.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
КонецПроцедуры
	
// Процедура заполняет регистры данными
//
Процедура ОтразитьДвижения(Отказ, РежимПроведения)

	// Отражение в разделах учета.
	УчетТоваров.СформироватьДвиженияСписаниеТоваров(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСписанныеТовары, 
		ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты, Движения, Отказ, ДополнительныеСвойства);
	УчетМБП.СформироватьДвиженияСписаниеМБП(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСписанныеМБП, 
		ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеквизиты, Движения, Отказ, ДополнительныеСвойства);
		
	УправлениеВнеоборотнымиАктивами.СформироватьДвиженияСписаниеОС(ДополнительныеСвойства, Движения, Отказ);
	
	БухгалтерскийУчетСервер.ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ);
	
	БухгалтерскийУчетСервер.ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьПродажиОсновныхСредств(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСчетаФактурыВыписанные(ДополнительныеСвойства, Движения, Отказ);

	БухгалтерскийУчетСервер.ОтразитьБланкиСчетовФактур(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьНДС(ДополнительныеСвойства, Движения, Отказ);
	
	БухгалтерскийУчетСервер.ОтразитьСобытияОС(ДополнительныеСвойства, Движения, Отказ);
	БухгалтерскийУчетСервер.ОтразитьСостоянияОС(ДополнительныеСвойства, Движения, Отказ); 
	БухгалтерскийУчетСервер.ОтразитьДвижениеОСНУ(ДополнительныеСвойства, Движения, Отказ);

	БухгалтерскийУчетСервер.ОтразитьСоставОС(ДополнительныеСвойства, Движения, Отказ);
	
	НалоговыйУчет.СформироватьДвиженияКорректировкаНУ(ДополнительныеСвойства, Движения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	// Проверка наличия серии и номера СФ в базе.
	Если ЗначениеЗаполнено(СерияБланкаСФ) И СерияБланкаСФ <> "ДПБУ" Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	БланкиСчетовФактурОбороты.СерияБланкаСФ КАК СерияБланкаСФ,
			|	БланкиСчетовФактурОбороты.Регистратор КАК Регистратор,
			|	ЕСТЬNULL(БланкиСчетовФактурОбороты.КоличествоРасход, 0) КАК КоличествоРасход,
			|	ЕСТЬNULL(БланкиСчетовФактурОбороты.КоличествоПриход, 0) КАК КоличествоПриход
			|ПОМЕСТИТЬ ВременнаяТаблицаБланкиСчетовФактур
			|ИЗ
			|	РегистрНакопления.БланкиСчетовФактур.Обороты(
			|			,
			|			&КонецПериода,
			|			Авто,
			|			Организация = &Организация
			|				И СерияБланкаСФ = &СерияБланкаСФ
			|				И НомерБланкаСФ = &НомерБланкаСФ) КАК БланкиСчетовФактурОбороты
			|ГДЕ
			|	НЕ БланкиСчетовФактурОбороты.Регистратор = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВременнаяТаблицаБланкиСчетовФактур.СерияБланкаСФ КАК СерияБланкаСФ,
			|	ВременнаяТаблицаБланкиСчетовФактур.КоличествоПриход КАК КоличествоПриход
			|ИЗ
			|	ВременнаяТаблицаБланкиСчетовФактур КАК ВременнаяТаблицаБланкиСчетовФактур
			|ГДЕ
			|	ВременнаяТаблицаБланкиСчетовФактур.КоличествоПриход > 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВременнаяТаблицаБланкиСчетовФактур.СерияБланкаСФ КАК СерияБланкаСФ,
			|	ВременнаяТаблицаБланкиСчетовФактур.Регистратор КАК Регистратор,
			|	ВременнаяТаблицаБланкиСчетовФактур.КоличествоРасход КАК КоличествоРасход
			|ИЗ
			|	ВременнаяТаблицаБланкиСчетовФактур КАК ВременнаяТаблицаБланкиСчетовФактур
			|ГДЕ
			|	ВременнаяТаблицаБланкиСчетовФактур.КоличествоРасход > 0";
		
		КонецПериода = ?(ЗначениеЗаполнено(ДатаСФ),ДатаСФ, Дата);
		
		Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(КонецПериода));
		Запрос.УстановитьПараметр("Организация", 	Организация);
		Запрос.УстановитьПараметр("СерияБланкаСФ", 	СерияБланкаСФ);
		Запрос.УстановитьПараметр("НомерБланкаСФ", 	НомерБланкаСФ);
		Запрос.УстановитьПараметр("Ссылка", 		Ссылка);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		              
		Если МассивРезультатов[1].Пустой() Тогда
			ТекстСообщения = НСтр("ru = 'Указанных серии или номера СФ нет в базе. Необходимо оформить документ ""Поступление бланков счетов-фактур"".'");
			БухгалтерскийУчетСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,, Отказ);	
		ИначеЕсли НЕ МассивРезультатов[2].Пустой() Тогда
			ВыборкаДетальныеЗаписи = МассивРезультатов[2].Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Указанные серия и номер СФ уже использованы. %1.'"), ВыборкаДетальныеЗаписи.Регистратор);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,, Отказ);	
		КонецЕсли;			
	КонецЕсли;	
	
	// Контроль ОС.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаОС.СчетЗатрат КАК СчетЗатрат,
		|	ТаблицаОС.СчетДохода КАК СчетДохода
		|ПОМЕСТИТЬ ВременнаяТаблицаОС
		|ИЗ
		|	&ТаблицаОС КАК ТаблицаОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияОССрезПоследних.НомерСтроки КАК НомерСтроки,
		|	СостоянияОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	РегистрСведений.СостоянияОС.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаОС КАК ВременнаяТаблицаОС)
		|				И НЕ Регистратор = &Ссылка) КАК СостоянияОССрезПоследних
		|ГДЕ
		|	(СостоянияОССрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)
		|			ИЛИ СостоянияОССрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.Передано))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МестонахождениеОССрезПоследних.НомерСтроки КАК НомерСтроки,
		|	МестонахождениеОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	РегистрСведений.МестонахождениеОС.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаОС КАК ВременнаяТаблицаОС)
		|				И НЕ Регистратор = &Ссылка) КАК МестонахождениеОССрезПоследних
		|ГДЕ
		|	НЕ(МестонахождениеОССрезПоследних.МОЛ = &МОЛ
		|				И МестонахождениеОССрезПоследних.Подразделение = &Подразделение)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаОСДублиСтрок.НомерСтроки) КАК НомерСтроки,
		|	ТаблицаОСДублиСтрок.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ТаблицаОСДублиСтрок
		|		ПО ВременнаяТаблицаОС.НомерСтроки <> ТаблицаОСДублиСтрок.НомерСтроки
		|			И ВременнаяТаблицаОС.ОсновноеСредство = ТаблицаОСДублиСтрок.ОсновноеСредство
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОСДублиСтрок.ОсновноеСредство
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ВременнаяТаблицаОС.ОсновноеСредство КАК Справочник.ОсновныеСредства).Представление КАК ОсновноеСредствоПредставление,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СостоянияОССрезПоследних.Состояние, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)
		|				И ЕСТЬNULL(ПараметрыУчетаОССрезПоследних.Консервация, ЛОЖЬ)
		|				И ВременнаяТаблицаОС.СчетЗатрат <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыПоВыбытиюНеамортизируемыхАктивов)
		|			ТОГДА 1
		|		КОГДА ЕСТЬNULL(СостоянияОССрезПоследних.Состояние, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)
		|				И НЕ ЕСТЬNULL(ПараметрыУчетаОССрезПоследних.Консервация, ЛОЖЬ)
		|				И ВременнаяТаблицаОС.СчетЗатрат = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыПоВыбытиюНеамортизируемыхАктивов)
		|			ТОГДА 2
		|		КОГДА ЕСТЬNULL(СостоянияОССрезПоследних.Состояние, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)
		|				И ВременнаяТаблицаОС.СчетЗатрат <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыПоВыбытиюНеамортизируемыхАктивов)
		|			ТОГДА 3
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КодОшибкиПоСчетуЗатрат,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СостоянияОССрезПоследних.Состояние, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)
		|				И ЕСТЬNULL(ПараметрыУчетаОССрезПоследних.Консервация, ЛОЖЬ)
		|				И ВременнаяТаблицаОС.СчетДохода <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДоходыОтРеализацииНеамортизируемыхАктивов)
		|			ТОГДА 1
		|		КОГДА ЕСТЬNULL(СостоянияОССрезПоследних.Состояние, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)
		|				И НЕ ЕСТЬNULL(ПараметрыУчетаОССрезПоследних.Консервация, ЛОЖЬ)
		|				И ВременнаяТаблицаОС.СчетДохода = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДоходыОтРеализацииНеамортизируемыхАктивов)
		|			ТОГДА 2
		|		КОГДА ЕСТЬNULL(СостоянияОССрезПоследних.Состояние, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)
		|				И ВременнаяТаблицаОС.СчетДохода <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДоходыОтРеализацииНеамортизируемыхАктивов)
		|			ТОГДА 3
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КодОшибкиПоСчетуДохода,
		|	СостоянияОССрезПоследних.Состояние КАК Состояние
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
		|				&Период,
		|				Организация = &Организация
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаОС.ОсновноеСредство
		|						ИЗ
		|							ВременнаяТаблицаОС)
		|					И НЕ Регистратор = &Ссылка) КАК ПараметрыУчетаОССрезПоследних
		|		ПО ВременнаяТаблицаОС.ОсновноеСредство = ПараметрыУчетаОССрезПоследних.ОсновноеСредство,
		|	РегистрСведений.СостоянияОС.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаОС)
		|				И НЕ Регистратор = &Ссылка) КАК СостоянияОССрезПоследних");                          	
	Запрос.УстановитьПараметр("Ссылка", 		Ссылка);
	Запрос.Параметры.Вставить("Период",			Дата);
	Запрос.Параметры.Вставить("Организация", 	Организация);
	Запрос.Параметры.Вставить("МОЛ", 			МОЛ);
	Запрос.Параметры.Вставить("Подразделение", 	Подразделение);
	Запрос.Параметры.Вставить("ТаблицаОС", 		ОС.Выгрузить());
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Регистр "Состояния ОС".
	Если НЕ МассивРезультатов[1].Пустой() Тогда
		ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Нельзя реализовывать основное средство снятое с учета. Строка %1 списка ""Основные средства"".'"), 
							ВыборкаИзРезультатаЗапроса.НомерСтроки);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				"ОС",
				ВыборкаИзРезультатаЗапроса.НомерСтроки,
				"ОсновноеСредство",
				Отказ);
		КонецЦикла;
	КонецЕсли;

	// Дубли строк.
	Если НЕ МассивРезультатов[3].Пустой() Тогда
		ВыборкаИзРезультатаЗапроса = МассивРезультатов[3].Выбрать();
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Основное средство указывается повторно в строке %1 списка ""Основные средства"".'"), 
							ВыборкаИзРезультатаЗапроса.НомерСтроки);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				"ОС",
				ВыборкаИзРезультатаЗапроса.НомерСтроки,
				"ОсновноеСредство",
				Отказ);
		КонецЦикла;
	КонецЕсли;	

	Выборка = МассивРезультатов[4].Выбрать();
	Пока Выборка.Следующий() Цикл
			
		Если Выборка.КодОшибкиПоСчетуЗатрат = 1 Тогда	
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Основное средство %1 законсервировано и для него необходимо указать счет затрат 9541'"), 
								Выборка.ОсновноеСредствоПредставление);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			
		ИначеЕсли Выборка.КодОшибкиПоСчетуЗатрат = 2 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Основное средство %1 не законсервировано и для него невозможно указать счет затрат 9541'"), 
								Выборка.ОсновноеСредствоПредставление);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			
		ИначеЕсли Выборка.КодОшибкиПоСчетуЗатрат = 3 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Основное средство %1 не принято к учету и для него необходимо указать счет затрат 9541'"), 
								Выборка.ОсновноеСредствоПредставление);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);	
		КонецЕсли;
		
		Если Выборка.КодОшибкиПоСчетуДохода = 1 Тогда	
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Основное средство %1 законсервировано и для него необходимо указать счет дохода 9191'"), 
								Выборка.ОсновноеСредствоПредставление);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			
		ИначеЕсли Выборка.КодОшибкиПоСчетуДохода = 2 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Основное средство %1 не законсервировано и для него невозможно указать счет дохода 9191'"), 
								Выборка.ОсновноеСредствоПредставление);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			
		ИначеЕсли Выборка.КодОшибкиПоСчетуДохода = 3 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Основное средство %1 не принято к учету и для него необходимо указать счет дохода 9191'"), 
								Выборка.ОсновноеСредствоПредставление);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ВыполнитьПредварительныйКонтроль()

// Процедура рассчитывает суммы табличных частей в валюте регламентированного учета
//
Процедура РассчитатьСуммыВРегламентированнойВалюте()

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		
		МассивТабличныхЧастей = Новый Массив();
		МассивТабличныхЧастей.Добавить(Товары);
		МассивТабличныхЧастей.Добавить(Услуги);
		МассивТабличныхЧастей.Добавить(ОС);
		
		Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл					
				СтрокаТабличнойЧасти.СуммаВВалютеРеглУчета 		 = СтрокаТабличнойЧасти.Сумма;
				СтрокаТабличнойЧасти.СуммаНДСВВалютеРеглУчета 	 = СтрокаТабличнойЧасти.СуммаНДС;
				СтрокаТабличнойЧасти.СуммаНСПВВалютеРеглУчета 	 = СтрокаТабличнойЧасти.СуммаНСП;
				СтрокаТабличнойЧасти.СуммаСкидкиВВалютеРеглУчета = СтрокаТабличнойЧасти.СуммаСкидки;
				СтрокаТабличнойЧасти.СуммаДоходаВВалютеРеглУчета = СтрокаТабличнойЧасти.СуммаДохода;
				СтрокаТабличнойЧасти.ВсегоВВалютеРеглУчета 		 = СтрокаТабличнойЧасти.Всего;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(Дата, Организация);	
		МассивТабличныхЧастей = Новый Массив();
		МассивТабличныхЧастей.Добавить(Товары);
		МассивТабличныхЧастей.Добавить(Услуги);
		МассивТабличныхЧастей.Добавить(ОС);
		
		СтавкаНДСДляРасчета = ?(ДанныеУчетнойПолитики.ПлательщикНДС, 
								СтавкаНДС, 
								Справочники.СтавкиНДС.ПустаяСсылка());
								
		Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
			
			Если ТабличнаяЧасть = Товары Тогда
				СтавкаНСПДляРасчета = ?(ДанныеУчетнойПолитики.ПлательщикНСП, 
										СтавкаНСП, 
										Справочники.СтавкиНСП.ПустаяСсылка());
				
			ИначеЕсли ТабличнаяЧасть = Услуги Тогда
				СтавкаНСПДляРасчета = ?(ДанныеУчетнойПолитики.ПлательщикНСП, 
										СтавкаНСПУслуги, 
										Справочники.СтавкиНСП.ПустаяСсылка());
				
			Иначе
				СтавкаНСПДляРасчета = ?(ДанныеУчетнойПолитики.ПлательщикНСП, 
										Справочники.СтавкиНСП.Прочее, 
										Справочники.СтавкиНСП.ПустаяСсылка());			
			КонецЕсли;
			
			ПараметрыРасчета = Новый Структура;
			ПараметрыРасчета.Вставить("Период", 				Дата);
			ПараметрыРасчета.Вставить("Организация", 			Организация);
			ПараметрыРасчета.Вставить("ПризнакСтраныЕАЭС", 		Ложь);
			ПараметрыРасчета.Вставить("СуммаВключаетНалоги", 	Истина);	
			ПараметрыРасчета.Вставить("БезналичныйРасчет", 		БезналичныйРасчет);
			ПараметрыРасчета.Вставить("Точность", 				?(ТочностьЦены = 0, 2, ТочностьЦены));
			ПараметрыРасчета.Вставить("СтавкаНДС", 				СтавкаНДСДляРасчета); 
			ПараметрыРасчета.Вставить("СтавкаНСП", 				СтавкаНСПДляРасчета);
							
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		
				// Структура для пересчета и заполнения суммами в валюте регламетированного учета.
				Структура = Новый Структура();	
				Структура.Вставить("Всего", 	 			СтрокаТабличнойЧасти.Всего);
				Структура.Вставить("СуммаНДС", 				СтрокаТабличнойЧасти.СуммаНДС);
				Структура.Вставить("СуммаНСП", 				СтрокаТабличнойЧасти.СуммаНСП);
				Структура.Вставить("ПроцентСкидкиНаценки", 	СтрокаТабличнойЧасти.ПроцентСкидкиНаценки);
				Структура.Вставить("СтавкаНДС", 			СтавкаНДСДляРасчета);
				Структура.Вставить("СтавкаНСП", 			СтавкаНСПДляРасчета);
				
				Если ВидСкидкиНаценки = Перечисления.ВидыСкидокНаценок.СуммаПоСтроке Тогда
					Структура.Вставить("СуммаСкидки", Окр(СтрокаТабличнойЧасти.СуммаСкидки * Курс / Кратность, 2));	
				Иначе	
					Структура.Вставить("СуммаСкидки", СтрокаТабличнойЧасти.СуммаСкидки);
				КонецЕсли;
				
				Если СуммаВключаетНалоги Тогда
					Структура.Вставить("Сумма", 	 	Окр(СтрокаТабличнойЧасти.Сумма * Курс / Кратность, 2));
					Структура.Вставить("СуммаДохода", 	СтрокаТабличнойЧасти.СуммаДохода);	
				Иначе
					Структура.Вставить("Сумма", 	 	СтрокаТабличнойЧасти.Сумма);
					Структура.Вставить("СуммаДохода", 	Окр(СтрокаТабличнойЧасти.СуммаДохода * Курс / Кратность, 2));	
				КонецЕсли;
				
				Если ТабличнаяЧасть <> ОС Тогда
					Структура.Вставить("Цена", 	 		Окр(СтрокаТабличнойЧасти.Цена * Курс / Кратность, 2));
					Структура.Вставить("Количество", 	СтрокаТабличнойЧасти.Количество);	
				КонецЕсли;	
					
				Если СуммаВключаетНалоги Тогда					
					Если ВидСкидкиНаценки <> Перечисления.ВидыСкидокНаценок.СуммаПоСтроке Тогда
						ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(Структура);
					КонецЕсли;	
						
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(Структура, ПараметрыРасчета);	
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(Структура);
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(Структура, Истина);
					
				Иначе
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(Структура, ПараметрыРасчета);	
					
					Если ВидСкидкиНаценки <> Перечисления.ВидыСкидокНаценок.СуммаПоСтроке Тогда
						ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(Структура);
					КонецЕсли;
					
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(Структура, ПараметрыРасчета);		
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(Структура);
				КонецЕсли;
					
				СтрокаТабличнойЧасти.СуммаВВалютеРеглУчета 		 = Структура.Сумма;
				СтрокаТабличнойЧасти.СуммаНДСВВалютеРеглУчета 	 = Структура.СуммаНДС;
				СтрокаТабличнойЧасти.СуммаНСПВВалютеРеглУчета 	 = Структура.СуммаНСП;
				СтрокаТабличнойЧасти.СуммаСкидкиВВалютеРеглУчета = Структура.СуммаСкидки;
				СтрокаТабличнойЧасти.СуммаДоходаВВалютеРеглУчета = Структура.СуммаДохода;
				СтрокаТабличнойЧасти.ВсегоВВалютеРеглУчета 		 = Структура.Всего;
			КонецЦикла;	
		КонецЦикла;			
	КонецЕсли;	
КонецПроцедуры

// Функция возвращает выборку данных ТЧ "Товары" и "Услуги" из запроса 
// по документу поступления одновременно проверяя не было ли ранее
// возвратов по этому поступлению и если были, вычитает то что уже возвращено.
//
Функция ПолучитьДанныеПоПоступлению(ПоказатьСообщение) Экспорт

	МассивВозврата = Новый Массив();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.Ссылка КАК Ссылка,
		|	ПоступлениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
		|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	ПоступлениеТоваровУслугТовары.КоличествоДопЕдиницы КАК КоличествоДопЕдиницы,
		|	ПоступлениеТоваровУслугТовары.КоэффициентДопЕдиницы КАК КоэффициентДопЕдиницы,
		|	ПоступлениеТоваровУслугТовары.Количество КАК Количество,
		|	ПоступлениеТоваровУслугТовары.Цена КАК Цена,
		|	ПоступлениеТоваровУслугТовары.Сумма КАК Сумма,
		|	ПоступлениеТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
		|	ПоступлениеТоваровУслугТовары.СуммаНСП КАК СуммаНСП,
		|	ПоступлениеТоваровУслугТовары.Всего КАК Всего,
		|	ПоступлениеТоваровУслугТовары.ЗачетНДС КАК ЗачетНДС,
		|	ПоступлениеТоваровУслугТовары.СчетУчета КАК СчетУчета,
		|	ПоступлениеТоваровУслугТовары.Вес КАК Вес,
		|	ПоступлениеТоваровУслугТовары.СуммаАкциза КАК СуммаАкциза,
		|	ПоступлениеТоваровУслугТовары.ИмпортОсвобожденныйОтНДС КАК ИмпортОсвобожденныйОтНДС
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка = &ДокументПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугУслуги.Ссылка КАК Ссылка,
		|	ПоступлениеТоваровУслугУслуги.НомерСтроки КАК НомерСтроки,
		|	ПоступлениеТоваровУслугУслуги.Номенклатура КАК Номенклатура,
		|	ПоступлениеТоваровУслугУслуги.Количество КАК Количество,
		|	ПоступлениеТоваровУслугУслуги.Цена КАК Цена,
		|	ПоступлениеТоваровУслугУслуги.Сумма КАК Сумма,
		|	ПоступлениеТоваровУслугУслуги.СуммаНДС КАК СуммаНДС,
		|	ПоступлениеТоваровУслугУслуги.СуммаНСП КАК СуммаНСП,
		|	ПоступлениеТоваровУслугУслуги.Всего КАК Всего,
		|	ПоступлениеТоваровУслугУслуги.ЗачетНДС КАК ЗачетНДС,
		|	ПоступлениеТоваровУслугУслуги.СчетРасхода КАК СчетРасхода,
		|	ПоступлениеТоваровУслугУслуги.Субконто1 КАК Субконто1,
		|	ПоступлениеТоваровУслугУслуги.Субконто2 КАК Субконто2,
		|	ПоступлениеТоваровУслугУслуги.Субконто3 КАК Субконто3,
		|	ПоступлениеТоваровУслугУслуги.СуммаАкциза КАК СуммаАкциза
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		|ГДЕ
		|	ПоступлениеТоваровУслугУслуги.Ссылка = &ДокументПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугОС.Ссылка КАК Ссылка,
		|	ПоступлениеТоваровУслугОС.НомерСтроки КАК НомерСтроки,
		|	ПоступлениеТоваровУслугОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ПоступлениеТоваровУслугОС.Сумма КАК Сумма,
		|	ПоступлениеТоваровУслугОС.СуммаНДС КАК СуммаНДС,
		|	ПоступлениеТоваровУслугОС.СуммаНСП КАК СуммаНСП,
		|	ПоступлениеТоваровУслугОС.Всего КАК Всего,
		|	ПоступлениеТоваровУслугОС.СуммаАкциза КАК СуммаАкциза,
		|	ПоступлениеТоваровУслугОС.ЗачетНДС КАК ЗачетНДС,
		|	ПоступлениеТоваровУслугОС.СчетУчета КАК СчетУчета
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.ОС КАК ПоступлениеТоваровУслугОС
		|ГДЕ
		|	ПоступлениеТоваровУслугОС.Ссылка = &ДокументПоступления";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДокументПоступления", ДокументОснование);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаТовары 	= МассивРезультатов[0].Выгрузить();
	ТаблицаУслуги 	= МассивРезультатов[1].Выгрузить();
	ТаблицаОС 		= МассивРезультатов[2].Выгрузить();
	
	Если ПоказатьСообщение И ТаблицаТовары.Количество() = 0 И ТаблицаУслуги.Количество() = 0 И ТаблицаОС.Количество() = 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'По поступлению ""%1"" возвращены все позиции.'"), ДокументОснование);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);	
	Иначе
		МассивВозврата.Добавить(ТаблицаТовары);
		МассивВозврата.Добавить(ТаблицаУслуги);
		МассивВозврата.Добавить(ТаблицаОС);
	КонецЕсли;

	Возврат МассивВозврата;
КонецФункции // ПолучитьДанныеПоПоступлению()

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли