#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеОбъектовБП.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
	
	Если Не ЗначениеЗаполнено(ПериодРегистрации) Тогда 
		ПериодРегистрации = ?(ЗначениеЗаполнено(Дата), НачалоМесяца(Дата), НачалоМесяца(ТекущаяДатаСеанса()));
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.Отработка.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	БухгалтерскийУчетСервер.ОтразитьТабельПоЧасам(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей.
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	БухгалтерскийУчетСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	БухгалтерскийУчетСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	БухгалтерскийУчетСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;

	ПроверяемыеРеквизиты.Добавить("Сотрудники");	
	
	Если ВидДниЧасы = 0 Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("Сотрудники.Часов");
	Иначе 
		МассивНепроверяемыхРеквизитов.Добавить("Сотрудники.ДатаНачала");
		МассивНепроверяемыхРеквизитов.Добавить("Сотрудники.ДатаОкончания");
		МассивНепроверяемыхРеквизитов.Добавить("Сотрудники.Дней");
	КонецЕсли;	
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	// Предварительный контроль.
	ВыполнитьПредварительныйКонтроль(Отказ);	

КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет контроль противоречий.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСотрудники.ГрафикРаботы КАК ГрафикРаботы
		|ПОМЕСТИТЬ ВременнаяТаблицаСотрудники
		|ИЗ
		|	&ТаблицаСотрудники КАК ТаблицаСотрудники
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТаблицаСотрудники.ГрафикРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСотрудники.ГрафикРаботы КАК ГрафикРаботы
		|ИЗ
		|	ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|		ПО ВременнаяТаблицаСотрудники.ГрафикРаботы = ДанныеПроизводственногоКалендаря.ГрафикРаботы
		|			И (ДанныеПроизводственногоКалендаря.Год МЕЖДУ &ГодНачалоПериода И &ГодКонецПериода)
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ГрафикРаботы ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаСотрудники.ГрафикРаботы";
	Запрос.УстановитьПараметр("ТаблицаСотрудники", Сотрудники.Выгрузить());
	Запрос.УстановитьПараметр("ГодНачалоПериода", Год(ПериодРегистрации));
	Запрос.УстановитьПараметр("ГодКонецПериода", Год(ПериодРегистрации));

	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Контроль заполнения графика работы.
	Если НЕ МассивРезультатов[1].Пустой() Тогда
		ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			ТекстСообщения = СтрШаблон(НСтр("ru = 'График работы ""%1"" не заполнен. По регистру ""Данные производственного календаря"".'"), 
							ВыборкаИзРезультатаЗапроса.ГрафикРаботы);
			БухгалтерскийУчетСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				,
				,
				"ПериодРегистрации",
				Отказ);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры
	
#КонецОбласти

#КонецЕсли
