#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. возвращаемое значение ФункцииОтчетовКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.ФормироватьСразу = Истина; 
КонецПроцедуры

#КонецОбласти

// Процедура - обработчик события ПриКомпоновкеРезультата.
// Выполняет компоновку.
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	КлючВарианта = НеОпределено;
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта", КлючВарианта);
	
	Попытка
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетныйЛисток";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ДокументРезультат.АвтоМасштаб = Истина;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		
		Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("Период") Тогда
			НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("Период", КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Период);
		КонецЕсли; 
		
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
			НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ЭлементыПользовательскихПолей = НастройкиОтчета.ПользовательскиеПоля.Элементы;
		
		СоответствиеПользовательскихПолей = Новый Соответствие;
		Для каждого Элемент Из ЭлементыПользовательскихПолей Цикл
			СоответствиеПользовательскихПолей.Вставить(Элемент.Заголовок, СтрЗаменить(Элемент.ПутьКДанным,".",""));
		КонецЦикла;
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ДанныеОтчета = Новый ДеревоЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.РасчетныйЛисток.ПФ_MXL_РасчетныйЛисток");
		
		Макеты = Новый Структура("Шапка,НачисленоУдержано,ПрочиеВыплачено,СтрокаДвижений,Итог12,Итог34,Сальдо,СтатьяФинансирования,Группировка,ИтогСтатьяФинансирования,Итог12ДопДоход");
		
		Макеты.Шапка = Макет.ПолучитьОбласть("Шапка");
		Макеты.НачисленоУдержано = Макет.ПолучитьОбласть("НачисленоУдержано");
		Макеты.ПрочиеВыплачено = Макет.ПолучитьОбласть("ПрочиеВыплачено");
		Макеты.СтрокаДвижений = Макет.ПолучитьОбласть("СтрокаДвижений");
		Макеты.Итог12 = Макет.ПолучитьОбласть("Итог12");
		Макеты.Итог12ДопДоход = Макет.ПолучитьОбласть("Итог12ДопДоход");
		Макеты.Итог34 = Макет.ПолучитьОбласть("Итог34");
		Макеты.Сальдо = Макет.ПолучитьОбласть("Сальдо");
		Макеты.Группировка = Макет.ПолучитьОбласть("Группировка");
		
		// Нужно проверить включена ли группировка по подразделениям
		ЕстьГруппировкаПоПодразделению = Ложь;
		ПараметрГруппировки = Новый ПараметрКомпоновкиДанных("РазбиватьПоПодразделениям");
		ЕстьГруппировкаПоПодразделению = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГруппировки).Значение;
		
		Для каждого СтрокаМесяца Из ДанныеОтчета.Строки Цикл
			Для Каждого СтрокаОрганизации Из СтрокаМесяца.Строки Цикл
				ВывестиОрганизациюРасчетныйЛисток(СтрокаОрганизации, ДокументРезультат, Макеты, ЕстьГруппировкаПоПодразделению, СоответствиеПользовательскихПолей);
			КонецЦикла;
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		
		БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета("РасчетныйЛисток", ДокументРезультат);
		
	Исключение
		Отказ = Истина;
		Инфо = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'В настройку отчета ""Расчетный листок"" внесены критичные изменения. Отчет не будет сформирован.'") + " " + Инфо.Описание;
	КонецПопытки;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции формирование отчета по макету РасчетныйЛисток

Процедура ВывестиОрганизациюРасчетныйЛисток(СтрокаОрганизации, ДокументРезультат, Макеты, ЕстьГруппировкаПоПодразделению, СоответствиеПользовательскихПолей)
	
	Если ЕстьГруппировкаПоПодразделению Тогда
		Для Каждого СтрокаПодразделения Из СтрокаОрганизации.Строки Цикл
			ВывестиПодразделениеРасчетныйЛисток(СтрокаПодразделения, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей);
		КонецЦикла;
	Иначе
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Макеты.Группировка.Параметры.НазваниеПараметра = "Организация";
		Макеты.Группировка.Параметры.Значение = СтрокаОрганизации["Организация"];
	
		ДокументРезультат.Вывести(Макеты.Группировка);
	
		Для Каждого СтрокаПодразделения Из СтрокаОрганизации.Строки Цикл
			//ДанныеПоНалогам  = ДанныеПоНалогам(СтрокаПодразделения.Строки, СтрокаПодразделения.МесяцНачисления);
			Для Каждого СтрокаСотрудника Из СтрокаПодразделения.Строки Цикл
				ВывестиСотрудникаРасчетныйЛисток(СтрокаСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиПодразделениеРасчетныйЛисток(СтрокаПодразделения, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей)
	
	Макеты.Группировка.Параметры.НазваниеПараметра = "Подразделение";
	Макеты.Группировка.Параметры.Значение = СтрокаПодразделения["Подразделение"];
	
	ДокументРезультат.Вывести(Макеты.Группировка);
	
	//ДанныеПоНалогам  = ДанныеПоНалогам(СтрокаПодразделения.Строки, СтрокаПодразделения.МесяцНачисления);
	
	Для Каждого СтрокаСотрудника Из СтрокаПодразделения.Строки Цикл
		ВывестиСотрудникаРасчетныйЛисток(СтрокаСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиСотрудникаРасчетныйЛисток(СтрокаСотрудника, ДокументРезультатПромежуточный, Макеты, СоответствиеПользовательскихПолей)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	СтрокаШапки = СтрокаСотрудника.Строки[0];
	
	Макеты.Шапка.Параметры.Заполнить(СтрокаШапки);
	Макеты.Шапка.Параметры.ПериодПредставление = Формат(СтрокаШапки.МесяцНачисления, "ДФ='ММММ гггг'");
	
	ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаШапки, СоответствиеПользовательскихПолей);
	ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаСотрудника, СоответствиеПользовательскихПолей, "СуммаКВыплате");

	Если НЕ ЗначениеЗаполнено(Макеты.Шапка.Параметры.СуммаКВыплате) 
		ИЛИ Макеты.Шапка.Параметры.СуммаКВыплате < 0 Тогда
		Макеты.Шапка.Параметры.СуммаКВыплате = 0;
	КонецЕсли;
	
	//СтрокаДанныхПоналогам = ДанныеПоНалогам.Найти(СтрокаШапки.ФизЛицо, "ФизЛицо");
	//Если СтрокаДанныхПоналогам <> Неопределено Тогда
	//	Макеты.Шапка.Параметры.Заполнить(СтрокаДанныхПоналогам);
	//КонецЕсли; 
	
	ДокументРезультат.Вывести(Макеты.Шапка);
	
	ИтогиПоГруппам = ВывестиТелоРасчетногоЛистка(ДокументРезультат, СтрокаСотрудника, Макеты, СоответствиеПользовательскихПолей);
	
	//Если СтрокаДанныхПоналогам <> Неопределено Тогда
	//	Макеты.Сальдо.Параметры.Заполнить(СтрокаДанныхПоналогам);
	//КонецЕсли; 
	
	Если ЗначениеЗаполнено(ИтогиПоГруппам.СуммаДолгаНаКонецМесяца) И ИтогиПоГруппам.СуммаДолгаНаКонецМесяца >= 0 Тогда
		Макеты.Сальдо.Параметры.ТекстДолгНаКонецПериода = "Долг за предприятием на конец месяца";
		Макеты.Сальдо.Параметры.СуммаДолгНаКонецПериода = ИтогиПоГруппам.СуммаДолгаНаКонецМесяца;
	ИначеЕсли ЗначениеЗаполнено(ИтогиПоГруппам.СуммаДолгаНаКонецМесяца) И ИтогиПоГруппам.СуммаДолгаНаКонецМесяца < 0 Тогда
		Макеты.Сальдо.Параметры.ТекстДолгНаКонецПериода = "Долг за работником на конец месяца";
		Макеты.Сальдо.Параметры.СуммаДолгНаКонецПериода = -ИтогиПоГруппам.СуммаДолгаНаКонецМесяца;
	Иначе
		Макеты.Сальдо.Параметры.ТекстДолгНаКонецПериода = "Долг за предприятием на конец месяца";
		Макеты.Сальдо.Параметры.СуммаДолгНаКонецПериода = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца) И ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца >= 0 Тогда
		Макеты.Сальдо.Параметры.ТекстДолгНаНачалоПериода = "Долг за предприятием на начало месяца";
		Макеты.Сальдо.Параметры.СуммаДолгНаНачалоПериода = ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца;
	ИначеЕсли ЗначениеЗаполнено(ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца) И ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца < 0 Тогда
		Макеты.Сальдо.Параметры.ТекстДолгНаНачалоПериода = "Долг за работником на начало месяца";
		Макеты.Сальдо.Параметры.СуммаДолгНаНачалоПериода = -ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца;
	Иначе
		Макеты.Сальдо.Параметры.ТекстДолгНаНачалоПериода = "Долг за предприятием на начало месяца";
		Макеты.Сальдо.Параметры.СуммаДолгНаНачалоПериода = "";
	КонецЕсли;
	
	ДокументРезультат.Вывести(Макеты.Сальдо);
	
	Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультатПромежуточный, ДокументРезультат) Тогда
		ДокументРезультатПромежуточный.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ДокументРезультатПромежуточный.Вывести(ДокументРезультат);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыПользовательскихПолей(Макет, Данные, СоответствиеПользовательскихПолей, ИменаЗаполняемыхПолей = "") Экспорт
	
	ЗаполняемыеПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаЗаполняемыхПолей);
	
	СтруктураДанных = Новый Структура;
	Для каждого СоответствиеПользовательскогоПоля Из СоответствиеПользовательскихПолей Цикл
		
		Если ЗаполняемыеПоля.Количество() > 0
			И ЗаполняемыеПоля.Найти(СоответствиеПользовательскогоПоля.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураДанных.Вставить(СоответствиеПользовательскогоПоля.Значение);
		
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Данные);
	
	СтруктураЗначенийПользовательскихПолей = Новый Структура;
	Для каждого СоответствиеПользовательскогоПоля Из СоответствиеПользовательскихПолей Цикл
		
		Если ЗаполняемыеПоля.Количество() > 0
			И ЗаполняемыеПоля.Найти(СоответствиеПользовательскогоПоля.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураЗначенийПользовательскихПолей.Вставить(СоответствиеПользовательскогоПоля.Ключ, СтруктураДанных[СоответствиеПользовательскогоПоля.Значение]);
		
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Макет.Параметры, СтруктураЗначенийПользовательскихПолей);
	
КонецПроцедуры

Функция ВывестиТелоРасчетногоЛистка(ДокументРезультат, СтрокаСотрудника, Макеты, СоответствиеПользовательскихПолей)
	
	ИтогиПоГруппам = Новый Структура("СуммаДолгаНаНачалоМесяца, СуммаДолгаНаКонецМесяца", 0, 0);
	
	СуммаНачисленоДополнительныйДоход = 0;
	СуммаНачисления = 0;
	СуммаУдержания = 0;
	
	КоллекцияРабочихМест = Новый Массив;
	СтрокиУдержаний = Новый Соответствие;
	ИмяПоляСуммаУдержано = СоответствиеПользовательскихПолей.Получить("СуммаУдержано");
	
	// Начисления и удержания
	ЭлементКоллекции = Новый Структура("СтрокаСотрудника,СтрокиНачислений,СтрокиУдержаний", СтрокаСотрудника, Новый Массив, Новый Массив);
	
	СтрокаГруппы = СтрокаСотрудника.Строки.Найти("Начислено", "Группа");
	Если СтрокаГруппы <> Неопределено Тогда
		ЭлементКоллекции.СтрокиНачислений = СтрокаГруппы.Строки;
	КонецЕсли;
	
	СтрокаГруппы = СтрокаСотрудника.Строки.Найти("Удержано", "Группа");
	Если СтрокаГруппы <> Неопределено Тогда
		
		Для каждого СтрокаУдержаний Из СтрокаГруппы.Строки Цикл
			
			СтрокаКоллекции = СтрокиУдержаний.Получить(СтрокаУдержаний.ВидРасчета);
			Если СтрокаКоллекции = Неопределено Тогда
				СтрокаКоллекции = СтрокаУдержаний;
			Иначе
				СтрокаКоллекции[ИмяПоляСуммаУдержано] = СтрокаКоллекции[ИмяПоляСуммаУдержано] + СтрокаУдержаний[ИмяПоляСуммаУдержано];
			КонецЕсли;
			СтрокиУдержаний.Вставить(СтрокаКоллекции.ВидРасчета, СтрокаКоллекции);
			
		КонецЦикла;
		
	КонецЕсли;
	
	КоллекцияРабочихМест.Добавить(ЭлементКоллекции);
		
	Если СтрокиУдержаний.Количество() > 0 Тогда
		КоллекцияРабочихМест[0].СтрокиУдержаний = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиУдержаний, "Значение");
	КонецЕсли; 
	
	ШапкаВыводилась = Ложь;
	Для каждого РабочееМесто Из КоллекцияРабочихМест Цикл
		
		СтрокаСотрудника = РабочееМесто.СтрокаСотрудника;
		СтрокиНачислений = РабочееМесто.СтрокиНачислений;
		СтрокиУдержаний = РабочееМесто.СтрокиУдержаний;
		
		Если СтрокиНачислений.Количество() > 0 ИЛИ СтрокиУдержаний.Количество() > 0 Тогда
			
			Если НЕ ШапкаВыводилась Тогда
				ДокументРезультат.Вывести(Макеты.НачисленоУдержано);
				ШапкаВыводилась = Истина;
			КонецЕсли; 
			
			НомерСтроки = 0;
			Пока НомерСтроки < СтрокиНачислений.Количество() ИЛИ НомерСтроки < СтрокиУдержаний.Количество() Цикл
				
				Для НомерПараметра = 0 По Макеты.СтрокаДвижений.Параметры.Количество() -1 Цикл
					Макеты.СтрокаДвижений.Параметры.Установить(НомерПараметра, "");
				КонецЦикла;
				
				// заполнение начислений
				Если НомерСтроки < СтрокиНачислений.Количество() Тогда
					
					СтрокаНачислений = СтрокиНачислений[НомерСтроки];
					
					ЗаполнитьЗначенияСвойств(Макеты.СтрокаДвижений.Параметры, СтрокаНачислений);
					
					ЗаполнитьПараметрыПользовательскихПолей(
						Макеты.СтрокаДвижений,
						СтрокаНачислений,
						СоответствиеПользовательскихПолей,
						"Начисление,СуммаНачислено");
					
				КонецЕсли;
				
				Если НомерСтроки < СтрокиУдержаний.Количество() Тогда
					
					СтрокаУдержаний = СтрокиУдержаний[НомерСтроки];
					
					//Макеты.СтрокаДвижений.Параметры.ПериодДействияУдержаний = СтрокаУдержаний.Период;
					ЗаполнитьПараметрыПользовательскихПолей(
						Макеты.СтрокаДвижений,
						СтрокаУдержаний,
						СоответствиеПользовательскихПолей,
						"Удержание,СуммаУдержано");
						
					СуммаУдержания = СуммаУдержания + СтрокаУдержаний[СоответствиеПользовательскихПолей.Получить("СуммаУдержано")];
							
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
				
				ДокументРезультат.Вывести(Макеты.СтрокаДвижений);
				
			КонецЦИкла;
			
			Если ТипЗнч(СтрокиНачислений) <> Тип("Массив") Тогда
				СуммаНачисления = СуммаНачисления + СтрокиНачислений.Итог(СоответствиеПользовательскихПолей.Получить("СуммаНачислено"));
				СуммаНачисленоДополнительныйДоход = СуммаНачисленоДополнительныйДоход + СтрокиНачислений.Итог(СоответствиеПользовательскихПолей.Получить("СуммаНачисленоДополнительныйДоход"));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	Если СуммаНачисления <> 0 ИЛИ СуммаУдержания <> 0 Тогда
		Макеты.Итог12.Параметры.СуммаНачисления = СуммаНачисления;
		Макеты.Итог12.Параметры.СуммаУдержания = СуммаУдержания;
		ДокументРезультат.Вывести(Макеты.Итог12);
	КонецЕсли;
	
	Если СуммаНачисленоДополнительныйДоход <> 0 Тогда
		Макеты.Итог12ДопДоход.Параметры.СуммаНачисления = СуммаНачисленоДополнительныйДоход;
		ДокументРезультат.Вывести(Макеты.Итог12ДопДоход);
	КонецЕсли;
	
	// Справочно и выплаты	
	СуммаДолгаНаНачалоМесяца = 0;
	СуммаДолгаНаКонецМесяца = 0;
	
	СуммаНачисления = 0;
	СуммаВыплат = 0;
	
	ШапкаВыводилась = Ложь;
		
	СтрокаГруппы = СтрокаСотрудника.Строки.Найти("Справочно", "Группа");
	Если СтрокаГруппы = Неопределено Тогда
		СтрокиСправочно = Новый Массив;
	Иначе
		СтрокиСправочно = СтрокаГруппы.Строки;
	КонецЕсли;
	
	СтрокаГруппы = СтрокаСотрудника.Строки.Найти("Выплачено", "Группа");
	Если СтрокаГруппы = Неопределено Тогда
		СтрокиВыплачено = Новый Массив;
	Иначе
		СтрокиВыплачено = СтрокаГруппы.Строки;
	КонецЕсли;
	
	Если СтрокиСправочно.Количество() > 0 ИЛИ СтрокиВыплачено.Количество() > 0 Тогда
		
		Если НЕ ШапкаВыводилась Тогда
			ДокументРезультат.Вывести(Макеты.ПрочиеВыплачено);
			ШапкаВыводилась = Истина;
		КонецЕсли; 
		
		НомерСтроки = 0;
		Пока НомерСтроки < СтрокиСправочно.Количество() ИЛИ НомерСтроки < СтрокиВыплачено.Количество() Цикл
			
			Для НомерПараметра = 0 По Макеты.СтрокаДвижений.Параметры.Количество() -1 Цикл
				Макеты.СтрокаДвижений.Параметры.Установить(НомерПараметра, "");
			КонецЦикла;
			
			Если НомерСтроки < СтрокиСправочно.Количество() Тогда
				
				СтрокаСправочно = СтрокиСправочно[НомерСтроки];
				
				Макеты.СтрокаДвижений.Параметры.Заполнить(СтрокаСправочно);
				ЗаполнитьПараметрыПользовательскихПолей(
					Макеты.СтрокаДвижений,
					СтрокаСправочно,
					СоответствиеПользовательскихПолей,
					"Начисление,СуммаНачислено");
				
			КонецЕсли;
			
			Если НомерСтроки < СтрокиВыплачено.Количество() Тогда
				
				СтрокаВыплачено = СтрокиВыплачено[НомерСтроки];
				
				//Макеты.СтрокаДвижений.Параметры.ПериодДействияУдержаний = СтрокаВыплачено.Период;
				Макеты.СтрокаДвижений.Параметры.Заполнить(СтрокаВыплачено);
				ЗаполнитьПараметрыПользовательскихПолей(
					Макеты.СтрокаДвижений,
					СтрокаВыплачено,
					СоответствиеПользовательскихПолей,
					"Удержание,СуммаУдержано");
					
				// Перезаполнения для периода
				ТекстВыплаты = "" + Макеты.СтрокаДвижений.Параметры.Удержание 
					+ " №" + ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрокаВыплачено.Регистратор.Номер)
					+ " от " + Формат(СтрокаВыплачено.Регистратор.Дата, "ДФ=dd.MM.yyyy");
				Макеты.СтрокаДвижений.Параметры.Удержание = ТекстВыплаты;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
			ДокументРезультат.Вывести(Макеты.СтрокаДвижений);
			
		КонецЦИкла;
		
		Если ТипЗнч(СтрокиСправочно) <> Тип("Массив") Тогда
			СуммаНачисления = СуммаНачисления + СтрокиСправочно.Итог(СоответствиеПользовательскихПолей.Получить("СуммаНачислено"));
		КонецЕсли;
		
		Если ТипЗнч(СтрокиВыплачено) <> Тип("Массив") Тогда
			СуммаВыплат	 = СуммаВыплат + СтрокиВыплачено.Итог(СоответствиеПользовательскихПолей.Получить("СуммаУдержано"));
		КонецЕсли;
		
	КонецЕсли; 
	
	СтрокаГруппы = СтрокаСотрудника.Строки.Найти("Сальдо", "Группа");
	Если СтрокаГруппы <> Неопределено Тогда
		СуммаДолгаНаНачалоМесяца = СуммаДолгаНаНачалоМесяца + СтрокаГруппы.СуммаДолгНаНачалоПериода;
	КонецЕсли;
	
	СтрокаГруппы = СтрокаСотрудника.Строки.Найти("Сальдо", "Группа");
	Если СтрокаГруппы <> Неопределено Тогда
		СуммаДолгаНаКонецМесяца = СуммаДолгаНаКонецМесяца + СтрокаГруппы.СуммаДолгНаКонецПериода;
	КонецЕсли;
	
	Если СуммаНачисления <> 0 ИЛИ СуммаВыплат <> 0 Тогда
		Макеты.Итог34.Параметры.СуммаНачисления = СуммаНачисления;
		Макеты.Итог34.Параметры.СуммаВыплат	 = СуммаВыплат;
		ДокументРезультат.Вывести(Макеты.Итог34);
	КонецЕсли;
	
	ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца = СуммаДолгаНаНачалоМесяца;
	ИтогиПоГруппам.СуммаДолгаНаКонецМесяца = СуммаДолгаНаКонецМесяца;
	
	Возврат ИтогиПоГруппам;
	
КонецФункции

#КонецЕсли