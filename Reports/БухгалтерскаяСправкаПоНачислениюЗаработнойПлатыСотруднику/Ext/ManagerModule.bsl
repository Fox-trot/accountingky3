#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки размещения в панели отчетов.
//
// Параметры:
//   Настройки - Коллекция - Используется для описания настроек отчетов и вариантов
//       см. описание к ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации()
//   НастройкиОтчета - СтрокаДереваЗначений - Настройки размещения всех вариантов отчета.
//       см. "Реквизиты для изменения" функции ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации().
//
// Описание:
//   См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//
// Вспомогательные методы:
//   НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//   ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Истина/Ложь); // Отчет поддерживает только этот режим.
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
	МодульВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Истина);
	
	НастройкиВарианта = МодульВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "");
	НастройкиВарианта.Описание = НСтр("ru = 'Бухгалтерская справка по начислению заработной платы сотрудников.'");

	НастройкиВарианта.НастройкиДляПоиска.НаименованияПолей =
		НСтр("ru = 'ДЕБЕТ
		|КРЕДИТ
		|Счет
		|Аналит. учет
		|Сумма
		|Всего по предприятию за текущий месяц
		|Группа
		|Итого по группе'");
	НастройкиВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов =
		НСтр("ru = 'НачалоПериода
		|КонецПериода
		|Организация'");
	НастройкиВарианта.НастройкиДляПоиска.КлючевыеСлова = НСтр("ru = 'Бухгалтерская справка по начислению заработной платы сотрудников'");
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Процедура формирования отчета.
//
// Параметры:
// ПараметрыОтчета - структура - набор параметров, необходимых для построения отчета.
// 	АдресХранилища - адрес временного хранилища.
Процедура Сформировать(СтруктураПараметров, АдресХранилища) Экспорт
	
	РезультатФормирования = Новый Структура("Результат, ОписаниеОшибки", Неопределено, "");
	СформироватьТабличныйДокумент(СтруктураПараметров, РезультатФормирования);
	ПоместитьВоВременноеХранилище(РезультатФормирования, АдресХранилища);
	
КонецПроцедуры

// Процедура - Сформировать табличный документ
//
// Параметры:
//  СтруктураПараметров	 - Структура - Параметры формирования отчета.
//  РезультатФормирования	 	- Структура - 
//
Процедура СформироватьТабличныйДокумент(СтруктураПараметров, РезультатФормирования)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "БухгалтерскаяСправкаПоНачислениюЗаработнойПлатыСотруднику_БухСправкаПоНачислению";
	
	Организация = СтруктураПараметров.Организация;
	НачалоПериода = НачалоДня(СтруктураПараметров.НачалоПериода);
	КонецПериода = КонецДня(СтруктураПараметров.КонецПериода);
	
	Макет = ПолучитьМакет("ПФ_MXL_БухСправкаПоНачислению");

	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.ПериодПредставление = ПредставлениеПериода(НачалоПериода, КонецПериода);
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ОбластьШапкаТаблицы	= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	
	Запрос = Новый Запрос;
	ТекстЗапроса =		
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
	|	ХозрасчетныйОборотыДтКт.СчетДт.Код КАК СчетДтКод,
	|	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетКт,
	|	ХозрасчетныйОборотыДтКт.СчетКт.Код КАК СчетКтКод,
	|	"""" КАК ГруппаНачисления,
	|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот) КАК Сумма,
	|	"""" КАК ПредставлениеГруппаНачисления,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1.Наименование КАК ПредставлениеАналитикаДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			,
	|			,
	|			,
	|			,
	|			ТИПЗНАЧЕНИЯ(СубконтоКт3) = ТИП(ПланВидовРасчета.ВидыНачислений)
	|				И Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ХозрасчетныйОборотыДтКт.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НачисленнаяЗаработнаяПлата)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОборотыДтКт.СчетДт,
	|	ХозрасчетныйОборотыДтКт.СчетКт,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1.Наименование,
	|	ХозрасчетныйОборотыДтКт.СчетДт.Код,
	|	ХозрасчетныйОборотыДтКт.СчетКт.Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГруппаНачисления,
	|	СчетДт
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	ГруппаНачисления";
	
	Запрос.УстановитьПараметр("НачалоПериода",	НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",	КонецДня(КонецПериода));
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.УстановитьПараметр("Организация", Организация);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Организация = &Организация", "Истина");
	КонецЕсли;		
	
	Запрос.Текст = ТекстЗапроса;
	ВыборкаПоГруппеНачисления = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СуммаИтогОбщий = 0;
		
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();	
	Пока ВыборкаПоГруппеНачисления.Следующий() Цикл
		ИтогПоГруппеНачисления = ВыборкаПоГруппеНачисления.Сумма;
		
		ОбластьГруппаНачисления	= Макет.ПолучитьОбласть("ГруппаНачисления");
		ОбластьГруппаНачисления.Параметры.Заполнить(ВыборкаПоГруппеНачисления);
		ТабличныйДокумент.Вывести(ОбластьГруппаНачисления, ВыборкаПоГруппеНачисления.Уровень());

		ВыборкаСтрока = ВыборкаПоГруппеНачисления.Выбрать();
		Пока ВыборкаСтрока.Следующий() Цикл
			ОбластьСтрока	= Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.Заполнить(ВыборкаСтрока);
			ТабличныйДокумент.Вывести(ОбластьСтрока, ВыборкаСтрока.Уровень());
		КонецЦикла;
		ИтогПоГруппе	= Макет.ПолучитьОбласть("ИтогПоГруппе");
		ИтогПоГруппе.Параметры.ИтогПоГруппе 	= ИтогПоГруппеНачисления;
		ТабличныйДокумент.Вывести(ИтогПоГруппе);//, ВыборкаПоГруппеНачисления.Уровень());
		СуммаИтогОбщий = СуммаИтогОбщий  + ИтогПоГруппеНачисления;
	КонецЦикла;
	ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
	
	ИтогОбщий	= Макет.ПолучитьОбласть("ИтогОбщий");
	ИтогОбщий.Параметры.ИтогОбщий 	= СуммаИтогОбщий;
	ТабличныйДокумент.Вывести(ИтогОбщий);	
			
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
	РезультатФормирования.Результат = ТабличныйДокумент;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
