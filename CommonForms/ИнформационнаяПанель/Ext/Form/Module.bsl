&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем БыстроеОбновлениеДанных;

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВызовОнлайнПоддержки
	ЕстьПравоДоступаКБухфону = ПравоДоступа("Просмотр", Метаданные.ОбщиеКоманды.СвязатьсяСоСпециалистомОнлайнПоддержки);
	Если ЕстьПравоДоступаКБухфону Тогда
		НастройкиПользователя = ВызовОнлайнПоддержкиВызовСервера.НастройкиУчетнойЗаписиПользователя();
		Элементы.ОнлайнПоддержка.Видимость = НастройкиПользователя.ВидимостьКнопкиВызовОнлайнПоддержки;
	Иначе
		Элементы.ОнлайнПоддержка.Видимость = Ложь;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВызовОнлайнПоддержки
	
	Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	РеквизитыОрганизации = Организация; // Ссылка, отображаемая при однофирменном учете
	Элементы.РеквизитыОрганизации.Видимость = Истина; // Видимость управляется функциональными опциями
	
	ВариантОкругления = 1;
	
	ПоказыватьСравнениеСПрошлымГодом = ПоказыватьСравнениеСПрошлымГодом(Организация);
	
	ДанныеАктуальны = Истина;
	
	// Инициализация таблицы настроек
	ИнформационнаяПанель.ДобавитьПредопределенныеБлоки(ТаблицаБлоков);
	
	// Накладываем пользовательские настройки
	ИнформационнаяПанель.ПрименитьНастройки(ТаблицаБлоков);
	
	РасставитьБлоки();
	
	ПрочитатьДанныеБлоков();
	
	УправлениеБлокомПокупателиПриСозданииНаСервере();
	УправлениеБлокомПоставщикиПриСозданииНаСервере();
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	БыстроеОбновлениеДанных = Истина;
	
	ЗадержкаПередЗапускомФоновыхЗаданий = 16;
	ПодключитьОбработчикОжидания("Подключаемый_ОбновлениеДанныхБлоков", ЗадержкаПередЗапускомФоновыхЗаданий, Истина);
	
	// Запланируем обновление на завтра
	Интервал = Макс(ИнтервалОбновленияДанных(ТекущаяДата()), ЗадержкаПередЗапускомФоновыхЗаданий);
	ПодключитьОбработчикОжидания("Подключаемый_ЕжедневноеОбновление", Интервал, Истина);
	
	ЗапуститьПереключениеНовостей();
	ЗапуститьПереключениеТекущиеДела();
	ЗапуститьПереключениеЗаметки();
	
	ТекущийЭлемент = Элементы.Обновить;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		
		Если Организация <> Параметр Тогда
			Организация = Параметр;
			ОрганизацияОбработатьИзменение();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Организации" Тогда
		ЭтаФорма.ОбновитьОтображениеДанных();	
		
	ИначеЕсли ИмяСобытия = "ИзмененаНастройкаИнформационнойПанели" Тогда
		
		НастройкаИнформационнойПанелиПриИзменении();
		
		// Полное обновление всех блоков
		БыстроеОбновление = Ложь;
		ПрочитатьДанныеСтатическихБлоков = Истина;
		ОбновитьДанныеБлоков(БыстроеОбновление, ПрочитатьДанныеСтатическихБлоков);
		
		ЗапуститьПереключениеНовостей();
		ЗапуститьПереключениеТекущиеДела();
		ЗапуститьПереключениеЗаметки();
		
	ИначеЕсли ИмяСобытия = "ПериодическиеПлатежи_Изменение"
		ИЛИ ИмяСобытия = "СписокЗадачБухгалтера_Изменение" Тогда
		
		// Изменение данных блока задачи
		ИмяБлока = БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаЗадачи();
		
		Если БлокВключен(ИмяБлока) Тогда
			ПрочитатьДанныеБлоков(ИмяБлока);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Новости. Новость прочтена"
		Или   ИмяСобытия = "Новости. Изменена прочтенность списка новостей"
		Или   ИмяСобытия = "Новости. Загружены новости" Тогда
		
		ИмяБлока = БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаНовости();
		Если БлокВключен(ИмяБлока) Тогда
			ПрочитатьДанныеБлоков(ИмяБлока);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ДобавитьБлокИнформационнойПанели" Тогда
		
		ИмяБлока = Строка(Параметр);
		
		Если ДобавитьБлок(ИмяБлока) Тогда
			
			РасставитьБлоки();
			
			// Полное обновление всех блоков
			БыстроеОбновление = Ложь;
			ПрочитатьДанныеСтатическихБлоков = Истина;
			ОбновитьДанныеБлоков(БыстроеОбновление, ПрочитатьДанныеСтатическихБлоков);
			
			ЗапуститьПереключениеНовостей();
			ЗапуститьПереключениеТекущиеДела();
			ЗапуститьПереключениеЗаметки();
			
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВызовОнлайнПоддержки
	Если ЕстьПравоДоступаКБухфону Тогда
		ВызовОнлайнПоддержкиКлиент.ОбработкаОповещения(ИмяСобытия, Элементы.ОнлайнПоддержка);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВызовОнлайнПоддержки
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияОбработатьИзменение();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Настройка(Команда)
	
	СписокБлоков = Новый СписокЗначений;
	Для Каждого Блок Из ТаблицаБлоков Цикл
		СписокБлоков.Добавить(Блок.Имя, Блок.Синоним, Блок.Пометка);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокБлоков", СписокБлоков);
	
	ОткрытьФорму("ОбщаяФорма.ИнформационнаяПанельНастройка", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	// Быстрое обновление динамических блоков
	БыстроеОбновление = Ложь;
	ПрочитатьДанныеСтатическихБлоков = Ложь;
	ОбновитьДанныеБлоков(БыстроеОбновление, ПрочитатьДанныеСтатическихБлоков);
	
КонецПроцедуры

// СтандартныеПодсистемы.ВызовОнлайнПоддержки
&НаКлиенте
Процедура ОнлайнПоддержка(Команда)
	
	ВызовОнлайнПоддержкиКлиент.ВызватьОнлайнПоддержку();
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВызовОнлайнПоддержки

#КонецОбласти

#Область Задачи

&НаКлиенте
Процедура ЗадачиВсеЗадачиНажатие(Элемент)
	
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("Организация", Организация);
	//ПараметрыФормы.Вставить("ОткрыватьВНовойЗакладке", Истина);
	//
	//ОткрытьФорму("ОбщаяФорма.СписокЗадач", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОстаткиДенежныхСредств

&НаКлиенте
Процедура ОстаткиДенежныхСредствВсеОстаткиНажатие(Элемент)
	
	ОтбораПоВидуДенежныхСредств = Новый Структура;
	ОтбораПоВидуДенежныхСредств.Вставить("Поле",         "ВидДенежныхСредств");
	ОтбораПоВидуДенежныхСредств.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.НеРавно);
	ОтбораПоВидуДенежныхСредств.Вставить("Значение",     "Деньги у подотчетных лиц");
	
	ОтборыОтчета = Новый Массив;
	ОтборыОтчета.Добавить(ОтбораПоВидуДенежныхСредств);
	
	ОткрытьОтчет("Отчет.ОстаткиДенежныхСредств.Форма", , ОтборыОтчета);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеБлокомОстаткиДенежныхСредств(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Элементы.ОстаткиДенежныхСредств.Родитель = Элементы.БлокиПанели Тогда
		Возврат;
	КонецЕсли;
	
	ИндексИтогов = Форма.ОстаткиДенежныхСредств_ИндексИтога;
	
	БезРамки = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоВалютныхОстатков();
	
	Если ИндексИтогов = 0 Тогда
		
		ЧертаСверху = Новый Рамка(ТипРамкиЭлементаУправления.ЧертаСверху);
		
		Элементы.ОстаткиДенежныхСредств_Остаток0.Рамка = ЧертаСверху; // Черта над итоговой строкой
		Для Индекс = 1 По ВГраница Цикл
			ЭлементФормы = Элементы[СтрШаблон("ОстаткиДенежныхСредств_Остаток%1", Индекс)];
			ЭлементФормы.Рамка = БезРамки;
		КонецЦикла;
		
	Иначе
		
		// Подчеркиваем элемент, расположенный над итоговой строкой
		
		Подчеркивание = Новый Рамка(ТипРамкиЭлементаУправления.Подчеркивание);
		
		ЭлементСверху = Элементы.ОстаткиДенежныхСредств_Банк;
		Для Индекс = 0 По ВГраница Цикл
			ЭлементСверху.Рамка = ?(Индекс = ИндексИтогов, Подчеркивание, БезРамки);
			ЭлементСверху = Элементы[СтрШаблон("ОстаткиДенежныхСредств_Остаток%1", Индекс)];
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Покупатели

&НаКлиенте
Процедура ПокупателиЗадолженностьНажатие(Элемент)
	
	ОткрытьОтчет("Отчет.ЗадолженностьПокупателей.Форма",,,,,, НачалоМесяца(Период), Период);
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиПросроченнаяЗадолженностьНажатие(Элемент)
	
	ОтборПоСроку = Новый Структура;
	ОтборПоСроку.Вставить("Поле",         "СрокОплаты");
	ОтборПоСроку.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Меньше);
	ОтборПоСроку.Вставить("Значение",     ТекущаяДата());
	
	ОтборыОтчета = Новый Массив;
	ОтборыОтчета.Добавить(ОтборПоСроку);

	ОткрытьОтчетСКД("АнализНеоплаченныхСчетовПокупателям",, ОтборыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиНеоплаченныеСчетаНажатие(Элемент)
	
	ОткрытьОтчетСКД("АнализНеоплаченныхСчетовПокупателям");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчет(Команда)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Организация", Организация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.СчетНаОплатуПокупателю.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАкт(Команда)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Организация", Организация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПКО(Команда)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Организация", Организация);
	ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтПокупателя"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.ПриходныйКассовыйОрдер.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеБлокомПокупателиПриСозданииНаСервере()
	
	Если Покупатели_ДоступностьРазделов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Счет.Видимость = Покупатели_ДоступностьРазделов.СозданиеСчета;
	Элементы.Акт.Видимость       = Покупатели_ДоступностьРазделов.СозданиеРеализации;
	Элементы.Накладная.Видимость = Покупатели_ДоступностьРазделов.СозданиеРеализации;
	
	ПоказыватьПокупателиЗадолженность = Покупатели_ДоступностьРазделов.ЗадолженностьПокупателей;
	Элементы.ГруппаПокупателиЗадолженность.Видимость = ПоказыватьПокупателиЗадолженность;
	
	//ПоказыватьПокупателиПросрочено = Покупатели_ДоступностьРазделов.ЗадолженностьПокупателейПоСрокамДолга;
	//Элементы.ГруппаПокупателиПросрочено.Видимость = ПоказыватьПокупателиПросрочено;
	
	ПоказыватьПокупателиНеоплаченныеСчета = Покупатели_ДоступностьРазделов.АнализНеоплаченныхСчетовПокупателям;
	Элементы.ГруппаПокупателиНеоплаченныеСчета.Видимость = ПоказыватьПокупателиНеоплаченныеСчета;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеБлокомПокупатели(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Элементы.Покупатели.Родитель = Элементы.БлокиПанели Тогда
		// Блок отключен
		Возврат;
	КонецЕсли;
	
	ПоказыватьСравнениеСПрошлымГодом = Форма.ПоказыватьСравнениеСПрошлымГодом;
	
	Элементы.Покупатели_ЗадолженностьОтклонение.Видимость             = ПоказыватьСравнениеСПрошлымГодом;
	Элементы.Покупатели_ПросроченнаяЗадолженностьОтклонение.Видимость = ПоказыватьСравнениеСПрошлымГодом;
	
КонецПроцедуры

#КонецОбласти

#Область Поставщики

&НаКлиенте
Процедура ПоставщикиЗадолженностьНажатие(Элемент)
	
	РеквизитыОтчета = Новый Структура;
	РеквизитыОтчета.Вставить("Счет", ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.СчетаКОплате"));

	Показатели = Новый Массив;
	Показатели.Добавить("ПоСубсчетам");
	Показатели.Добавить("ПоказательБУ");
	Показатели.Добавить("ПоказательВалютнаяСумма");
	
	ОткрытьОтчет("Отчет.ОборотноСальдоваяВедомостьПоСчету.Форма",,, РеквизитыОтчета, Показатели,, НачалоМесяца(Период), Период);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиПросроченнаяЗадолженностьНажатие(Элемент)
	
	КлючВарианта = "ЗадолженностьПоставщикамПоСрокамДолга";
	
	//ОткрытьОтчет("Отчет.ЗадолженностьПоставщикамПоСрокамДолга.Форма",, КлючВарианта, НачалоМесяца(Период), Период);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиНеоплаченныеСчетаНажатие(Элемент)
	
	КлючВарианта = "НеоплаченныеСчетаПоставщиков";
	
	//ОткрытьОтчет("Отчет.АнализНеоплаченныхСчетовПоставщиков.Форма",, КлючВарианта);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеБлокомПоставщикиПриСозданииНаСервере()
	
	Если Поставщики_ДоступностьРазделов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказыватьПоставщикиЗадолженность = Поставщики_ДоступностьРазделов.ЗадолженностьПоставщикам;
	Элементы.ГруппаПоставщикиЗадолженность.Видимость = ПоказыватьПоставщикиЗадолженность;
	
	//ПоказыватьПоставщикиПросрочено = Поставщики_ДоступностьРазделов.ЗадолженностьПоставщикамПоСрокамДолга;
	//Элементы.ГруппаПоставщикиПросрочено.Видимость = ПоказыватьПоставщикиПросрочено;
	
	//ПоказыватьПоставщикиНеоплаченныеСчета = Поставщики_ДоступностьРазделов.АнализНеоплаченныхСчетовПоставщиков;
	//Элементы.ГруппаПоставщикиНеоплаченныеСчета.Видимость = ПоказыватьПоставщикиНеоплаченныеСчета;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеБлокомПоставщики(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Элементы.Поставщики.Родитель = Элементы.БлокиПанели Тогда
		// Блок отключен
		Возврат;
	КонецЕсли;
	
	ПоказыватьСравнениеСПрошлымГодом = Форма.ПоказыватьСравнениеСПрошлымГодом;
	
	Элементы.Поставщики_ЗадолженностьОтклонение.Видимость            = ПоказыватьСравнениеСПрошлымГодом;
	Элементы.Поставщки_ПросроченнаяЗадолженностьОтклонение.Видимость = ПоказыватьСравнениеСПрошлымГодом;
	
КонецПроцедуры

#КонецОбласти

#Область Продажи

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеБлокомПродажи(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Элементы.Продажи.Родитель = Элементы.БлокиПанели Тогда
		// Блок отключен
		Возврат;
	КонецЕсли;
	
	ПоказыватьСравнениеСПрошлымГодом = Форма.ПоказыватьСравнениеСПрошлымГодом;
	
	ВГраницаИндекса = БлокиИнформационнойПанелиКлиентСервер.КоличествоПериодовПродаж() - 1;
	Для Индекс = 0 По ВГраницаИндекса Цикл
		ОтклонениеПродаж = БлокиИнформационнойПанелиКлиентСервер.СвойствоОтклонениеПродаж(Индекс);
		Элементы[ОтклонениеПродаж].Видимость = ПоказыватьСравнениеСПрошлымГодом;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Продажи_Период0ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Продажи_ПериодОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Продажи_Период1ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Продажи_ПериодОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Продажи_Период2ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Продажи_ПериодОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Продажи_Период3ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Продажи_ПериодОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Продажи_ПериодОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиТекущегоМесяца() Тогда
		
		КонецПериода  = КонецДня(Период);
		НачалоПериода = НачалоМесяца(КонецПериода);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиТекущегоМесяцаСНачалаГода() Тогда
		
		КонецПериода  = КонецДня(Период);
		НачалоПериода = НачалоГода(КонецПериода);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиПрошлогоМесяца() Тогда
		
		КонецПериода  = КонецМесяца(ДобавитьМесяц(Период, -1));
		НачалоПериода = НачалоМесяца(КонецПериода);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиПрошлогоМесяцаСНачалаГода() Тогда
		
		КонецПериода  = КонецМесяца(ДобавитьМесяц(Период, -1));
		НачалоПериода = НачалоГода(КонецПериода);
		
	КонецЕсли;
	
	Показатели = Новый Массив;
	Показатели.Добавить("ПоказательСумма");
	
	ОткрытьОтчет("Отчет.Продажи.Форма",,,, Показатели,, НачалоПериода, КонецПериода);
	
	//ПользовательскиеПараметры = Новый Массив;
	//Если НачалоПериода <> Неопределено
	//	И КонецПериода <> Неопределено Тогда 
	//	СтандартныйПериод = Новый СтандартныйПериод;
	//	СтандартныйПериод.ДатаНачала = НачалоПериода;
	//	СтандартныйПериод.ДатаОкончания = КонецПериода;
	//	СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	//	ПользовательскиеПараметры.Добавить(Новый Структура("ИмяПараметра, Значение", "СтПериод", СтандартныйПериод));
	//КонецЕсли;	
	//
	//ОткрытьОтчетСКД("Продажи", "Продажи",, ПользовательскиеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область Новости

&НаКлиенте
Процедура НовостиВсеНовостиНажатие(Элемент)
	
	ИмяФормыНовостей = "Справочник.Новости.Форма.ФормаКонтекстныхНовостей";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяМетаданных",                 "ИнформационнаяПанель");
	ПараметрыФормы.Вставить("ЗаголовокФормы",                НСтр("ru = 'Новости'"));
	ПараметрыФормы.Вставить("РежимОткрытияОкна",             "Независимый");
	ПараметрыФормы.Вставить("ПропуститьЗаполнениеНовостями", Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуЛентаНовостей",  Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуПодзаголовок",   Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуДатаПубликации", Истина);
	ПараметрыФормы.Вставить("ПоказыватьПанельНавигации",     Ложь);
	
	ОткрытьФорму(ИмяФормыНовостей, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Новости_НовостьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если СсылкиНовостей.Количество() > Новости_Индекс Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Новость = СсылкиНовостей[Новости_Индекс].Значение;
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Ключ", Новость);
		ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна", "БлокироватьОкноВладельца");
		
		ОбработкаНовостейКлиент.ПоказатьНовость(Новость, ПараметрыОткрытияФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Новости_ПереключательНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Индекс = ИндексЭлементаФормы(Элемент.Имя);
	Если Индекс <> Неопределено Тогда
		ПоказатьНовость(Индекс);
	КонецЕсли;
	
	// Перезапускаем обработчик ожидания
	ЗапуститьПереключениеНовостей();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПереключениеНовостей()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПереключениеНовостей");
	Если БлокВключен(БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаНовости()) И ТекстыНовостей.Количество() > 0 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПереключениеНовостей", БлокиИнформационнойПанелиКлиентСервер.ИнтервалПереключенияНовостей());
	Иначе
		ОтключитьОбработчикОжидания("Подключаемый_ПереключениеНовостей");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПереключениеНовостей()
	
	ВГраницаИндекса = ТекстыНовостей.Количество() - 1;
	Если 0 <= Новости_Индекс И Новости_Индекс < ВГраницаИндекса Тогда
		ИндексНовости = Новости_Индекс + 1;
	Иначе
		ИндексНовости = 0;
	КонецЕсли;
	
	ПоказатьНовость(ИндексНовости);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНовость(ИндексНовости)
	
	Если ТекстыНовостей.Количество() > ИндексНовости Тогда
		Новости_Индекс = ИндексНовости;
		Новости_Текст  = ТекстыНовостей[ИндексНовости].Значение;
	Иначе
		Новости_Индекс = 0;
		Новости_Текст  = БлокиИнформационнойПанелиКлиентСервер.ТекстОтсутствияНовостей();
	КонецЕсли;
	
	УправлениеБлокомНовости(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеБлокомНовости(Форма)
	
	Элементы = Форма.Элементы;
	
	КоличествоНовостей = Форма.ТекстыНовостей.Количество();
	
	ВГраницаИндекса = БлокиИнформационнойПанелиКлиентСервер.КоличествоНовостей() - 1;
	Для Индекс = 0 По ВГраницаИндекса Цикл
		
		ИмяПереключателя = БлокиИнформационнойПанелиКлиентСервер.СвойствоПереключатель(Индекс);
		
		ПереключательДоступен = (Индекс < КоличествоНовостей);
		Элементы[ИмяПереключателя].Доступность = ПереключательДоступен;
		
		Если ПереключательДоступен Тогда
			АктивностьПереключателя = (Индекс = Форма.Новости_Индекс);
			Форма[ИмяПереключателя] = БлокиИнформационнойПанелиКлиентСервер.ИндексКартинкиПереключателя(АктивностьПереключателя);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокНовостей()
	
	Если ПустаяСтрока(Новости_АдресХранилища) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстыНовостей.Очистить();
	СсылкиНовостей.Очистить();
	
	Если ЭтоАдресВременногоХранилища(Новости_АдресХранилища) Тогда
		
		ДанныеНовостей = ПолучитьИзВременногоХранилища(Новости_АдресХранилища);
		Если ТипЗнч(ДанныеНовостей) = Тип("Структура") Тогда
			Для Каждого ТекстНовости Из ДанныеНовостей.ТекстыНовостей Цикл
				ТекстыНовостей.Добавить(ТекстНовости.Значение);
			КонецЦикла;
			Для Каждого СсылкаНовости Из ДанныеНовостей.СсылкиНовостей Цикл
				СсылкиНовостей.Добавить(СсылкаНовости.Значение);
			КонецЦикла;
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(Новости_АдресХранилища);
		Новости_АдресХранилища = "";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

&НаКлиенте
Процедура ТекущиеДелаВсеТекущиеДелаНажатие(Элемент)	
	ОткрытьФорму("Обработка.ТекущиеДела.Форма");   	
КонецПроцедуры

&НаКлиенте
Процедура ТекущиеДела_ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если СсылкиТекущиеДела.Количество() > ТекущиеДела_Индекс Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ФормаТекущиеДела = СсылкиТекущиеДела[ТекущиеДела_Индекс].Значение;
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьНажатиеНаГиперссылкуЗавершениеТекущиеДела", ЭтотОбъект);
		ОткрытьФорму(ФормаТекущиеДела,, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущиеДела_ПереключательНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Индекс = ИндексЭлементаФормы(Элемент.Имя);
	Если Индекс <> Неопределено Тогда
		ПоказатьТекущиеДела(Индекс);
	КонецЕсли;
	
	// Перезапускаем обработчик ожидания
	ЗапуститьПереключениеТекущиеДела();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПереключениеТекущиеДела()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПереключениеТекущиеДела");
	Если БлокВключен(БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаТекущиеДела()) И ТекстыТекущиеДела.Количество() > 0 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПереключениеТекущиеДела", БлокиИнформационнойПанелиКлиентСервер.ИнтервалПереключенияТекущиеДела());
	Иначе
		ОтключитьОбработчикОжидания("Подключаемый_ПереключениеТекущиеДела");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПереключениеТекущиеДела()
	
	ВГраницаИндекса = ТекстыТекущиеДела.Количество() - 1;
	Если 0 <= ТекущиеДела_Индекс И ТекущиеДела_Индекс < ВГраницаИндекса Тогда
		ИндексТекущиеДела = ТекущиеДела_Индекс + 1;
	Иначе
		ИндексТекущиеДела = 0;
	КонецЕсли;
	
	ПоказатьТекущиеДела(ИндексТекущиеДела);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТекущиеДела(ИндексТекущиеДела)
	
	Если ТекстыТекущиеДела.Количество() > ИндексТекущиеДела Тогда
		ТекущиеДела_Индекс = ИндексТекущиеДела;
		ТекущиеДела_Текст  = ТекстыТекущиеДела[ИндексТекущиеДела].Значение;
	Иначе
		ТекущиеДела_Индекс = 0;
		ТекущиеДела_Текст  = БлокиИнформационнойПанелиКлиентСервер.ТекстОтсутствияТекущиеДела();
	КонецЕсли;
	
	УправлениеБлокомТекущиеДела(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеБлокомТекущиеДела(Форма)
	
	Элементы = Форма.Элементы;
	
	КоличествоТекущиеДела = Форма.ТекстыТекущиеДела.Количество();
	
	ВГраницаИндекса = БлокиИнформационнойПанелиКлиентСервер.КоличествоТекущиеДела() - 1;
	Для Индекс = 0 По ВГраницаИндекса Цикл
		
		ИмяПереключателя = БлокиИнформационнойПанелиКлиентСервер.СвойствоПереключательТекущиеДела(Индекс);
		
		ПереключательДоступен = (Индекс < КоличествоТекущиеДела);
		Элементы[ИмяПереключателя].Доступность = ПереключательДоступен;
		
		Если ПереключательДоступен Тогда
			АктивностьПереключателя = (Индекс = Форма.ТекущиеДела_Индекс);
			Форма[ИмяПереключателя] = БлокиИнформационнойПанелиКлиентСервер.ИндексКартинкиПереключателя(АктивностьПереключателя);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокТекущиеДела()
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	БлокиИнформационнойПанели.ТекущиеДела(Новый Структура("АдресХранилища, УникальныйИдентификатор", АдресХранилища, УникальныйИдентификатор));
	Данные = ПолучитьИзВременногоХранилища(АдресХранилища);
	ТекущиеДела_АдресХранилища = Данные.ТекущиеДела_АдресХранилища;
		
	Если ПустаяСтрока(ТекущиеДела_АдресХранилища) Тогда
		Возврат;
	КонецЕсли;	
	
	ТекстыТекущиеДела.Очистить();
	СсылкиТекущиеДела.Очистить();
	
	Если ЭтоАдресВременногоХранилища(ТекущиеДела_АдресХранилища) Тогда
		
		ДанныеТекущиеДела = ПолучитьИзВременногоХранилища(ТекущиеДела_АдресХранилища);
		Если ТипЗнч(ДанныеТекущиеДела) = Тип("Структура") Тогда
			Для Каждого ТекстТекущиеДела Из ДанныеТекущиеДела.ТекстыТекущиеДела Цикл
				ТекстыТекущиеДела.Добавить(ТекстТекущиеДела.Значение);
			КонецЦикла;
			Для Каждого СсылкаТекущиеДела Из ДанныеТекущиеДела.СсылкиТекущиеДела Цикл
				СсылкиТекущиеДела.Добавить(СсылкаТекущиеДела.Значение);
			КонецЦикла;
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(ТекущиеДела_АдресХранилища);
		ТекущиеДела_АдресХранилища = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНаГиперссылкуЗавершениеТекущиеДела(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьСписокТекущиеДела();
КонецПроцедуры

#КонецОбласти

#Область Заметки

&НаКлиенте
Процедура ЗаметкиВсеЗаметкиНажатие(Элемент)	
	ОткрытьФорму("Справочник.Заметки.Форма.МоиЗаметки");   	
КонецПроцедуры

&НаКлиенте
Процедура Заметки_ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если СсылкиЗаметки.Количество() > Заметки_Индекс Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Заметка = СсылкиЗаметки[Заметки_Индекс].Значение;
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Ключ", Заметка);
		ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна", "БлокироватьОкноВладельца");
		
		ОткрытьФорму("Справочник.Заметки.ФормаОбъекта", ПараметрыОткрытияФормы, ЭтотОбъект); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Заметки_ПереключательНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Индекс = ИндексЭлементаФормы(Элемент.Имя);
	Если Индекс <> Неопределено Тогда
		ПоказатьЗаметки(Индекс);
	КонецЕсли;
	
	// Перезапускаем обработчик ожидания
	ЗапуститьПереключениеЗаметки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПереключениеЗаметки()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПереключениеЗаметки");
	Если БлокВключен(БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаЗаметки()) И ТекстыЗаметки.Количество() > 0 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПереключениеЗаметки", БлокиИнформационнойПанелиКлиентСервер.ИнтервалПереключенияЗаметки());
	Иначе
		ОтключитьОбработчикОжидания("Подключаемый_ПереключениеЗаметки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПереключениеЗаметки()
	
	ВГраницаИндекса = ТекстыЗаметки.Количество() - 1;
	Если 0 <= Заметки_Индекс И Заметки_Индекс < ВГраницаИндекса Тогда
		ИндексЗаметки = Заметки_Индекс + 1;
	Иначе
		ИндексЗаметки = 0;
	КонецЕсли;
	
	ПоказатьЗаметки(ИндексЗаметки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗаметки(ИндексЗаметки)
	
	Если ТекстыЗаметки.Количество() > ИндексЗаметки Тогда
		Заметки_Индекс = ИндексЗаметки;
		Заметки_Текст  = ТекстыЗаметки[ИндексЗаметки].Значение;
		Заметки_ИндексКартинки = КартинкиЗаметки[ИндексЗаметки].Значение;
	Иначе
		Заметки_Индекс = 0;
		Заметки_Текст  = БлокиИнформационнойПанелиКлиентСервер.ТекстОтсутствияЗаметки();
		Заметки_ИндексКартинки = 1;
	КонецЕсли;
	
	УправлениеБлокомЗаметки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеБлокомЗаметки(Форма)
	
	Элементы = Форма.Элементы;
	
	КоличествоЗаметки = Форма.ТекстыЗаметки.Количество();
	
	ВГраницаИндекса = БлокиИнформационнойПанелиКлиентСервер.КоличествоЗаметки() - 1;
	Для Индекс = 0 По ВГраницаИндекса Цикл
		
		ИмяПереключателя = БлокиИнформационнойПанелиКлиентСервер.СвойствоПереключательЗаметки(Индекс);
		
		ПереключательДоступен = (Индекс < КоличествоЗаметки);
		Элементы[ИмяПереключателя].Доступность = ПереключательДоступен;
		
		Если ПереключательДоступен Тогда
			АктивностьПереключателя = (Индекс = Форма.Заметки_Индекс);
			Форма[ИмяПереключателя] = БлокиИнформационнойПанелиКлиентСервер.ИндексКартинкиПереключателя(АктивностьПереключателя);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗаметки()
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	БлокиИнформационнойПанели.Заметки(Новый Структура("АдресХранилища, УникальныйИдентификатор", АдресХранилища, УникальныйИдентификатор));
	Данные = ПолучитьИзВременногоХранилища(АдресХранилища);
	Заметки_АдресХранилища = Данные.Заметки_АдресХранилища;
		
	Если ПустаяСтрока(Заметки_АдресХранилища) Тогда
		Возврат;
	КонецЕсли;	
	
	ТекстыЗаметки.Очистить();
	СсылкиЗаметки.Очистить();
	КартинкиЗаметки.Очистить();
	
	Если ЭтоАдресВременногоХранилища(Заметки_АдресХранилища) Тогда
		
		ДанныеЗаметки = ПолучитьИзВременногоХранилища(Заметки_АдресХранилища);
		Если ТипЗнч(ДанныеЗаметки) = Тип("Структура") Тогда
			Для Каждого ТекстЗаметки Из ДанныеЗаметки.ТекстыЗаметки Цикл
				ТекстыЗаметки.Добавить(ТекстЗаметки.Значение);
			КонецЦикла;
			Для Каждого СсылкаЗаметки Из ДанныеЗаметки.СсылкиЗаметки Цикл
				СсылкиЗаметки.Добавить(СсылкаЗаметки.Значение);
			КонецЦикла;
			Для Каждого КартинкаЗаметки Из ДанныеЗаметки.КартинкиЗаметки Цикл
				КартинкиЗаметки.Добавить(КартинкаЗаметки.Значение);
			КонецЦикла;
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(Заметки_АдресХранилища);
		Заметки_АдресХранилища = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНаГиперссылкуЗавершениеЗаметки(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьСписокЗаметки();
КонецПроцедуры

#КонецОбласти

#Область МетодическаяПоддержка

&НаКлиенте
Процедура ВсеСсылкиНажатие(Элемент)
	
	ОткрытьФорму("Обработка.МетодическаяПоддержка.Форма.Форма");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Форма.Элементы.КартинкаФоновоеЗаданиеЗапущено.Видимость = (Форма.ФоновоеЗаданиеЗапущено Или Не Форма.ДанныеАктуальны);
	
	//УправлениеБлокомОтчетность(Форма);
	
	УправлениеБлокомНовости(Форма);
	
	УправлениеБлокомТекущиеДела(Форма);
	
	УправлениеБлокомЗаметки(Форма);
	
	УправлениеБлокомОстаткиДенежныхСредств(Форма);
	
	УправлениеБлокомПродажи(Форма);
	
	УправлениеБлокомПокупатели(Форма);
	
	УправлениеБлокомПоставщики(Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеБлоков(БыстроеОбновление, ПрочитатьДанныеСтатическихБлоков, ПрочитатьДанныеДинамическихБлоков = Ложь)
	
	Если ПрочитатьДанныеСтатическихБлоков И Не ПустаяСтрока(СтатическиеБлоки) Тогда
		ПрочитатьДанныеБлоков(СтатическиеБлоки);
	КонецЕсли;
	
	Если ФоновоеЗаданиеЗапущено Тогда
		// Текущее фоновое задание неактуально
		ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеЗапущено);
	КонецЕсли;
	
	Если ПустаяСтрока(ДинамическиеБлоки) Тогда
		
		ДанныеАктуальны = Истина;
		
	Иначе
		
		Если ПрочитатьДанныеДинамическихБлоков Тогда
			// Принудительное чтение данных до начала выполнения фонового задания
			ПрочитатьДанныеБлоков(ДинамическиеБлоки);
		Иначе
			// Чтение данных после завершения фонового задания
			ИнициализироватьДанныеБлоков(ДинамическиеБлоки);
		КонецЕсли;
		
		БыстроеОбновлениеДанных = БыстроеОбновление;
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновлениеДанныхБлоков", 0.1, Истина);
		
		ДанныеАктуальны = Ложь;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура РасставитьБлоки()
	
	// Инициализация свойств
	
	ОбщиеСвойстваБлоков = ОбщиеСвойстваБлоков();
	
	ЭлементыБлоков = Новый Соответствие; // Соответствие элемента формы имени блока
	
	Для Каждого Блок Из ТаблицаБлоков Цикл
		ЭлементФормы = Элементы.Найти(Блок.Имя);
		Если ЭлементФормы <> Неопределено Тогда
			ЭлементыБлоков.Вставить(Блок.Имя, ЭлементФормы);
			ЭлементФормы.ЦветФона = Блок.ЦветФона;
			ЗаполнитьЗначенияСвойств(ЭлементФормы, ОбщиеСвойстваБлоков);
		КонецЕсли;
	КонецЦикла;
	
	// Возвращаем все блоки в невидимую группу БлокиПанели
	
	Для ИндексСтроки = 0 По ИнформационнаяПанель.КоличествоСтрок() - 1 Цикл
		Для ИндексКолонки = 0 По ИнформационнаяПанель.КоличествоКолонок() - 1 Цикл
			Контейнер = Элементы[ИмяКонтейнераБлока(ИндексСтроки, ИндексКолонки)];
			Для Каждого ПодчиненныйЭлемент Из Контейнер.ПодчиненныеЭлементы Цикл
				Элементы.Переместить(ПодчиненныйЭлемент, Элементы.БлокиПанели)
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Распределение блоков по контейнерам
	
	ИндексСтроки  = 0;
	ИндексКолонки = 0;
	
	ВГраницаСтрок   = ИнформационнаяПанель.КоличествоСтрок() - 1;
	ВГраницаКолонок = ИнформационнаяПанель.КоличествоКолонок() - 1;
	
	СтатическиеБлоки  = "";
	ДинамическиеБлоки = "";
	
	Для Каждого Блок Из ТаблицаБлоков Цикл
		
		Если Не Блок.Пометка Тогда
			// Блок выключен
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(Блок.ПроцедураОбновленияДанных) Тогда
			СтатическиеБлоки = СтатическиеБлоки + ?(ПустаяСтрока(СтатическиеБлоки), "", ",") + Блок.Имя;
		Иначе
			ДинамическиеБлоки = ДинамическиеБлоки + ?(ПустаяСтрока(ДинамическиеБлоки), "", ",") + Блок.Имя;
		КонецЕсли;
		
		// Перемещаем блок из группы БлокиПанели в контейнер
		Контейнер = Элементы[ИмяКонтейнераБлока(ИндексСтроки, ИндексКолонки)];
		Если Контейнер <> Неопределено Тогда
			Элементы.Переместить(ЭлементыБлоков[Блок.Имя], Контейнер);
		КонецЕсли;
		
		Если ИндексКолонки = ВГраницаКолонок Тогда
			ИндексКолонки = 0;
			ИндексСтроки  = ИндексСтроки + 1;
		Иначе
			ИндексКолонки = ИндексКолонки + 1;
		КонецЕсли;
		
		Если ИндексСтроки > ВГраницаСтрок Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбщиеСвойстваБлоков()
	
	Возврат Новый Структура("Ширина,Высота,РастягиватьПоВертикали,РастягиватьПоГоризонтали", 30, 12, Ложь, Ложь);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяКонтейнераБлока(ИндексСтроки, ИндексКолонки)
	
	Возврат СтрШаблон("Контейнер%1%2", ИндексСтроки, ИндексКолонки);
	
КонецФункции

&НаСервере
Процедура ИнициализироватьДанныеБлоков(СтрокаОтбора = "")
	
	ПолучитьДанныеБлоков(СтрокаОтбора, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеБлоков(СтрокаОтбора = "")
	
	ПолучитьДанныеБлоков(СтрокаОтбора, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеБлоков(СтрокаОтбора, Инициализация)
	
	ОбновитьЗаголовокФормы();
	
	УстановленОтбор = Не ПустаяСтрока(СтрокаОтбора);
	Если УстановленОтбор Тогда
		ОтборБлоков = СтрРазделить(СтрокаОтбора, ", ", Ложь);
	КонецЕсли;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("УникальныйИдентификатор",          УникальныйИдентификатор);
	СтруктураПараметров.Вставить("АдресХранилища",                   АдресХранилища);
	СтруктураПараметров.Вставить("Организация",                      Организация);
	СтруктураПараметров.Вставить("ВариантОкругления",                ВариантОкругления);
	СтруктураПараметров.Вставить("ПоказыватьСравнениеСПрошлымГодом", ПоказыватьСравнениеСПрошлымГодом);
	СтруктураПараметров.Вставить("Инициализация",                    Инициализация);
	
	ПараметрыПроцедуры = Новый Массив();
	ПараметрыПроцедуры.Добавить(СтруктураПараметров);
	
	Для Каждого Блок Из ТаблицаБлоков Цикл
		
		Если Не Блок.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если УстановленОтбор И (ОтборБлоков.Найти(Блок.Имя) = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПустаяСтрока(Блок.ПроцедураПолученияДанных) Тогда
			
			ОбщегоНазначения.ВыполнитьМетодКонфигурации(Блок.ПроцедураПолученияДанных, ПараметрыПроцедуры);
			
			ДанныеБлока = ПолучитьИзВременногоХранилища(АдресХранилища);
			Если ТипЗнч(ДанныеБлока) = Тип("Структура") Тогда
				Если Инициализация Тогда
					ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеБлока);
				Иначе
					ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеБлока, Блок.РеквизитыФормы);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСписокНовостей();
	ОбновитьСписокТекущиеДела();
	ОбновитьСписокЗаметки();
	
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		УдалитьИзВременногоХранилища(АдресХранилища);
		АдресХранилища = "";
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	Период = ТекущаяДатаСеанса();
	
	ПредставлениеТекущейДаты = Формат(Период, "Л=ru_RU; ДФ='d MMMM, dddd'");
	
	Заголовок = СтрШаблон(НСтр("ru = 'Сегодня: %1'"), ПредставлениеТекущейДаты);
	
КонецПроцедуры

&НаСервере
Процедура НастройкаИнформационнойПанелиПриИзменении()
	
	ИнформационнаяПанель.ПрименитьНастройки(ТаблицаБлоков);
	
	РасставитьБлоки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработатьИзменение()
	
	РеквизитыОрганизации = Организация;
	
	ПоказыватьСравнениеСПрошлымГодом = ПоказыватьСравнениеСПрошлымГодом(Организация);
	
	БыстроеОбновление = Ложь;
	ПрочитатьДанныеСтатическихБлоков  = Ложь;
	ПрочитатьДанныеДинамическихБлоков = Истина;
	
	ОбновитьДанныеБлоков(БыстроеОбновление, ПрочитатьДанныеСтатическихБлоков, ПрочитатьДанныеДинамическихБлоков);
	
КонецПроцедуры

&НаКлиенте
Функция ИндексЭлементаФормы(Знач Имя)
	
	Цифры = "1234567890";
	НомерСтрокой = "";
	
	ДлинаИмени = СтрДлина(Имя);
	
	ВГраница   = ДлинаИмени - 1;
	Для Индекс = 0 По ВГраница Цикл
		Позиция = ДлинаИмени - Индекс;
		Символ = Сред(Имя,Позиция,1);
		Если СтрНайти(Цифры, Символ) = 0 Тогда
			Прервать;
		КонецЕсли;
		НомерСтрокой = Символ + НомерСтрокой;
	КонецЦикла;
	
	Если ПустаяСтрока(НомерСтрокой) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Возврат Число(НомерСтрокой);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОтчетСКД(ИмяОтчета, КлючВарианта = Неопределено, Отборы = Неопределено, ПользовательскиеПараметры = Неопределено)
		
	ПараметрыОтчета = Новый Структура;
	//ПараметрыОтчета.Вставить("Расшифровка", Истина);
	//ПараметрыОтчета.Вставить("ВидРасшифровки", 2);
	
	ПользовательскиеНастройки = ДобавитьПользовательскиеНастройки(ИмяОтчета, КлючВарианта, Отборы, ПользовательскиеПараметры);
	ПараметрыОтчета.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыОтчета.Вставить("КлючВарианта", КлючВарианта);
	ПараметрыОтчета.Вставить("Отбор", Новый Структура("Организация", Организация));
	
	ПолноеИмяОтчета = "Отчет.%ИмяОтчета%.Форма";
	ПолноеИмяОтчета = СтрЗаменить(ПолноеИмяОтчета, "%ИмяОтчета%", ИмяОтчета);
	ОткрытьФорму(ПолноеИмяОтчета, ПараметрыОтчета, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаСервере
Функция ДобавитьПользовательскиеНастройки(ИмяОтчета, КлючВарианта, Отборы, ПользовательскиеПараметры)
	
	// Инициализация пользовательских настроек.
	СхемаКомпоновки = Отчеты[ИмяОтчета].ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	// Параметры.
	Если НЕ ПользовательскиеПараметры = Неопределено Тогда 
		Для Каждого Параметр Из ПользовательскиеПараметры Цикл
			// Получение пользовательского параметра.
			ЗначениеПараметраНастроекКомпоновкиДанных = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, Параметр.ИмяПараметра);
			Если ЗначениеПараметраНастроекКомпоновкиДанных = Неопределено Тогда 
				Продолжить;
			КонецЕсли;	
			
			// Установка значение и идентификатора.
			ЗначениеПараметра = ПользовательскиеНастройки.Элементы.Добавить(Тип("ЗначениеПараметраНастроекКомпоновкиДанных"));
			ЗначениеПараметра.Использование = Истина;
			ЗначениеПараметра.Значение = Параметр.Значение;
			ЗначениеПараметра.Параметр = Новый ПараметрКомпоновкиДанных(Параметр.ИмяПараметра);
			ЗначениеПараметра.ИдентификаторПользовательскойНастройки = ЗначениеПараметраНастроекКомпоновкиДанных.ИдентификаторПользовательскойНастройки;
		КонецЦикла;	
	КонецЕсли;	
	
	// Отборы.
	Если Не Отборы = Неопределено Тогда
		НастройкаОтбора = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		НастройкаОтбора.ИдентификаторПользовательскойНастройки = "Отбор";
		Для Каждого Отбор Из Отборы Цикл
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(НастройкаОтбора, Отбор.Поле, Отбор.Значение, Отбор.ВидСравнения);
		КонецЦикла;
	КонецЕсли;

	// Условное оформление.
	Если ВариантОкругления = 1000 Тогда
		// Установим формат цифр для сумм
		УсловноеОформление = ПользовательскиеНастройки.Элементы.Добавить(Тип("УсловноеОформлениеКомпоновкиДанных"));
		УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Представление = НСтр("ru = 'Суммы в тыс.'");
		ЭлементУсловногоОформления.Использование = Истина;
		
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ЭлементУсловногоОформления.Оформление, "Формат", "ЧДЦ=; ЧС=3");
	КонецЕсли;
	
	Возврат ПользовательскиеНастройки;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОтчет(Отчет, ГруппировкаОтчета = Неопределено, 
	Отборы = Неопределено, РеквизитыОтчета = Неопределено, Показатели = Неопределено, КлючВарианта = Неопределено, 
	НачалоПериода = Неопределено, КонецПериода = Неопределено)
	
	ПользовательскиеНастройки = ПользовательскиеНастройкиДляРасшифровки(НачалоПериода, КонецПериода);
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	
	Если ГруппировкаОтчета <> Неопределено И ТипЗнч(ГруппировкаОтчета) = Тип("Массив") Тогда
		ДополнительныеСвойства.Вставить("Группировка", ГруппировкаОтчета);
	КонецЕсли;
	
	Если ТипЗнч(Отборы) = Тип("Массив") Тогда
		
		НастройкаОтбора = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		НастройкаОтбора.ИдентификаторПользовательскойНастройки = "Отбор";
		Для Каждого Отбор Из Отборы Цикл
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(НастройкаОтбора, Отбор.Поле, Отбор.Значение, Отбор.ВидСравнения);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(РеквизитыОтчета) = Тип("Структура") Тогда
		Для Каждого РеквизитОтчета Из РеквизитыОтчета Цикл
			ДополнительныеСвойства.Вставить(РеквизитОтчета.Ключ, РеквизитОтчета.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(Показатели) = Тип("Массив") Тогда
		Для Каждого Показатель Из Показатели Цикл
			ДополнительныеСвойства.Вставить(Показатель, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Если КлючВарианта <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("КлючВарианта", КлючВарианта);
	КонецЕсли;
	
	ЗаполняемыеНастройки = Новый Структура("Показатели, Группировка, Отбор, ВыводимыеДанные", Истина, Истина, Ложь, Ложь);

	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("РежимРасшифровки"         , Истина);
	ПараметрыОтчета.Вставить("ВидРасшифровки"           , 2);
	ПараметрыОтчета.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыОтчета.Вставить("ЗаполняемыеНастройки", ЗаполняемыеНастройки);

	
	ОткрытьФорму(Отчет, ПараметрыОтчета, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ПользовательскиеНастройкиДляРасшифровки(НачалоПериода = Неопределено, КонецПериода = Неопределено)
	
	// Инициализация пользовательских настроек
	// Добавим в настройки все параметры которые могут использоваться в отчетах руководителю
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	ДополнительныеСвойства.Вставить("Организация", Организация);
	ДополнительныеСвойства.Вставить("Период", Период);
	
	Если НачалоПериода <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	КонецЕсли;
	Если КонецПериода <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("КонецПериода", КонецПериода);
	КонецЕсли;
	
	Если ВариантОкругления = 1000 Тогда
		
		// Установим формат цифр для рублевых сумм
		УсловноеОформление = ПользовательскиеНастройки.Элементы.Добавить(Тип("УсловноеОформлениеКомпоновкиДанных"));
		УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Представление = НСтр("ru = 'Суммы в тыс.'");
		ЭлементУсловногоОформления.Использование = Истина;
		
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ЭлементУсловногоОформления.Оформление, "Формат", "ЧДЦ=; ЧС=3");
		
	КонецЕсли;
	
	Возврат ПользовательскиеНастройки;
	
КонецФункции

&НаКлиенте
Функция БлокВключен(ИмяБлока)
	
	ПараметрыОтбора = Новый Структура("Имя", ИмяБлока);
	НайденныеБлоки = ТаблицаБлоков.НайтиСтроки(ПараметрыОтбора);
	
	Возврат НайденныеБлоки.Количество() > 0 И НайденныеБлоки[0].Пометка;
	
КонецФункции

&НаКлиенте
Функция ДобавитьБлок(ИмяБлока)
	
	ПараметрыОтбора = Новый Структура("Имя", ИмяБлока);
	НайденныеБлоки = ТаблицаБлоков.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеБлоки.Количество() > 0 И Не НайденныеБлоки[0].Пометка Тогда
		НайденныеБлоки[0].Пометка = Истина;
		СоставИзменен = Истина;
	Иначе
		СоставИзменен = Ложь;
	КонецЕсли;
	
	Возврат СоставИзменен;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоказыватьСравнениеСПрошлымГодом(Знач Организация)
	
	ДатаНачалаВеденияУчета = Константы.ДатаПервогоВходаВСистему.Получить();
	
	Если ДатаНачалаВеденияУчета = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ДатаНачалаВеденияУчета < НачалоГода(ТекущаяДатаСеанса());
	
КонецФункции

#Область ОбновлениеИнформационнойПанели

&НаКлиенте
Процедура Подключаемый_ОбновлениеДанныхБлоков()
	
	Если ПустаяСтрока(ДинамическиеБлоки) Тогда
		Возврат;
	КонецЕсли;
	
	БыстроеОбновление = (БыстроеОбновлениеДанных = Неопределено Или БыстроеОбновлениеДанных);
	
	Если ЗапуститьОбновлениеДанныхБлоков(БыстроеОбновление) Тогда
		ЖдатьОбновленияДанныхБлоков();
	Иначе
		// Включен монопольный режим, попробуем обновить позже
		ИнтервалМеждуПопыткамиОбновления = 60;
		ПодключитьОбработчикОжидания("Подключаемый_ОбновлениеДанныхБлоков", ИнтервалМеждуПопыткамиОбновления, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЕжедневноеОбновление()
	
	// Полное обновление всех блоков
	БыстроеОбновление = Ложь;
	ПрочитатьДанныеСтатическихБлоков = Истина;
	ОбновитьДанныеБлоков(БыстроеОбновление, ПрочитатьДанныеСтатическихБлоков);
	
	// Запланируем обновление на завтра
	ПодключитьОбработчикОжидания("Подключаемый_ЕжедневноеОбновление", ИнтервалОбновленияДанных(ТекущаяДата()), Истина);
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьОбновлениеДанныхБлоков(БыстроеОбновление = Ложь)
	
	Если МонопольныйРежим() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Возможно, что фоновое задание было запущено раньше, 
	// пользователь дал команду его отменить, однако задание не отменено.
	// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
	Если ФоновоеЗаданиеЗапущено И Не ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПроцедурыОбновленияДанных = Новый Массив;
	Для Каждого Блок Из ТаблицаБлоков Цикл
		Если Блок.Пометка И Не ПустаяСтрока(Блок.ПроцедураОбновленияДанных) Тогда
			ПроцедурыОбновленияДанных.Добавить(Блок.ПроцедураОбновленияДанных);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("БыстроеОбновление",                БыстроеОбновление);
	СтруктураПараметров.Вставить("Организация",                      Организация);
	СтруктураПараметров.Вставить("ПроцедурыОбновленияДанных",        ПроцедурыОбновленияДанных);
	СтруктураПараметров.Вставить("ПоказыватьСравнениеСПрошлымГодом", ПоказыватьСравнениеСПрошлымГодом);
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"ИнформационнаяПанель.ОбновитьДанныеБлоков",
		СтруктураПараметров,
		НСтр("ru = 'Обновление данных блоков Информационной панели'"));
	
	ФоновоеЗаданиеИдентификатор = Результат.ИдентификаторЗадания;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ДанныеАктуальны = Истина;
		ПрочитатьДанныеБлоков(ДинамическиеБлоки);
	Иначе
		ФоновоеЗаданиеЗапущено = Истина;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЖдатьОбновленияДанныхБлоков()
	
	Если Не ФоновоеЗаданиеЗапущено Тогда
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПодключитьОбработчикОжиданияЗавершенияДлительнойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеДлительнойОперации()
	
	Если Не ФоновоеЗаданиеЗапущено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
		ФоновоеЗаданиеЗапущено = Ложь;
		ДанныеАктуальны = Истина;
		ПрочитатьДанныеБлоков(ДинамическиеБлоки);
	Иначе
		ПодключитьОбработчикОжиданияЗавершенияДлительнойОперации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияЗавершенияДлительнойОперации()
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьЗавершениеДлительнойОперации",
		ПараметрыОбработчикаОжидания.ТекущийИнтервал,
		Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания, ЗаданиеЗапущено)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	ЗаданиеЗапущено = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ИнтервалОбновленияДанных(ДатаОбновленияДанных)
	
	Возврат (КонецДня(ДатаОбновленияДанных) + 1) - ДатаОбновленияДанных + 59;
	
КонецФункции

#КонецОбласти

#КонецОбласти