
#Область ОбработчикиСобытийЭлементовФормы

// Процедура - обработчик события "ПередНачаломДобавления" элемента Список.
//
&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Копирование Тогда
		ОткрытьФорму("Документ._ДемоЧек.Форма.ФормаДокументаМастер",,ЭтаФорма);
		Отказ = Истина;
	Иначе
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ПараметрыОткрытия = Новый Структура("Основание", ТекущиеДанные.Ссылка);
		ОткрытьФорму("Документ._ДемоЧек.Форма.ФормаДокументаМастер", ПараметрыОткрытия);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедур - обработчик события "Выбор" списка формы.
//
&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	ПараметрыОткрытия = Новый Структура("Ключ", ВыбраннаяСтрока);
	Если ТекущиеДанные.Статус <> ПредопределенноеЗначение("Перечисление._ДемоСтатусыЧековККМ.Фискализирован") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Документ._ДемоЧек.Форма.ФормаДокументаМастер", ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Имясобытия = "ОбновитьСписок" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура вызывается при нажатии на кнопку "Открыть кассовую смену".
//
&НаКлиенте
Процедура ОткрытьКассовуюСмену(Команда)
	
	ОчиститьСообщения();
	Элементы.ГруппаКасса.Доступность = Ложь;
	
	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
	ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОткрытьКассовуюСмену_Завершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОткрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКассовуюСмену_Завершение(РезультатВыполнения, Параметры) Экспорт
	
	Элементы.ГруппаКасса.Доступность = Истина;
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении команды открытия смены на фискальном устройстве произошла ошибка.
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКассовуюСмену(Команда)
	
	ОчиститьСообщения();
	
	Элементы.ГруппаКасса.Доступность = Ложь;
	
	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
	ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗакрытьКассовуюСмену_Завершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьЗакрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКассовуюСмену_Завершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		Если НЕ ЗаархивироватьДокументыНаСервере() Тогда
			ТекстПредупреждения = НСтр("ru = 'Ошибка записи документов'");
			ПоказатьПредупреждение(, ТекстПредупреждения, 10);
			Возврат;
		КонецЕсли;
		ОписаниеОшибки = "";
	КонецЕсли;
	
	Элементы.ГруппаКасса.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОТекущемСостоянииРасчетов(Команда)
	
	ОчиститьСообщения();
	
	Элементы.ГруппаКасса.Доступность = Ложь;
	
	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперации();
	ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ВыполнениеКоманды_Завершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьФормированиеОтчетаОТекущемСостоянииРасчетов(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетБезГашения(Команда)
	
	ОчиститьСообщения();
	
	Элементы.ГруппаКасса.Доступность = Ложь;
	
	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперации();
	ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ВыполнениеКоманды_Завершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьФормированиеОтчетаБезГашения(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнесениеДенег(Команда)
	
	ВнесениеВыемкаДенежныхСредств(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыемкаДенег(Команда)
	
	ВнесениеВыемкаДенежныхСредств(0);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнесениеВыемкаДенежныхСредств(ПараметрВнесенияВыемки)
	
	Результат = Ложь;
	
	Если ПараметрВнесенияВыемки = 1 Тогда
		ТекстЗаголовка = НСтр("ru = 'Введите сумму внесения'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Введите сумму выемки'");
	КонецЕсли;
	   
	Оповещение = Новый ОписаниеОповещения("ВнесениеВыемкаДенежныхСредств_ВводЧислаЗавершение", ЭтотОбъект, ПараметрВнесенияВыемки); 
	ПоказатьВводЧисла(Оповещение, 0, ТекстЗаголовка, 10, 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнесениеВыемкаДенежныхСредств_ВводЧислаЗавершение(ВыбЗнач, ПараметрВнесенияВыемки) Экспорт
	
	Если Не ПустаяСтрока(ВыбЗнач) Тогда 
		
		Элементы.ГруппаКасса.Доступность = Ложь;
		
		ОчиститьСообщения();
		
		ПараметрыОперации = Новый Структура("ТипИнкассации, Сумма", ПараметрВнесенияВыемки, ВыбЗнач);
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ВыполнениеКоманды_Завершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации); 
		
	КонецЕсли;     
	
КонецПроцедуры

Процедура ВыполнениеКоманды_Завершение(РезультатВыполнения, Параметры) Экспорт
	
	Элементы.ГруппаКасса.Доступность = Истина;
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЗаархивироватьДокументыНаСервере()
	
	Возврат _ДемоПодключаемоеОборудованиеВызовСервера.ЗаархивироватьДокументыПередЗакрытиемСмены();
	
КонецФункции

#КонецОбласти
