#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает результат запроса по классификатору банков
//
Функция ПолучитьРезультатЗапросаПоКлассификатору(БИК, КоррСчет, Наименование, Адрес) Экспорт
	
	Возврат ПолучитьДанныеИзКлассификатора(БИК, КоррСчет, Наименование, Адрес);
		
КонецФункции // ПолучитьРезультатЗапросаПоКлассификатору()

// Функция получает таблицу ссылок на банки по Коду или корреспондетскому счету.
//
// Параметры:
//	Поле - Строка - Имя поля (Код или КоррСчет)
//	Значение - Строка - Значение Код или Корреспондентского счета
//
// Возвращаемое значение:
//	ТаблицаЗначений - Найденые банки
//
Функция ПолучитьТаблицуБанковПоРеквизитам(Поле, Значение) Экспорт
	
	ТаблицаБанков = Новый ТаблицаЗначений;
	Колонки = ТаблицаБанков.Колонки;
	Колонки.Добавить("Ссылка");
	Колонки.Добавить("Код");
	Колонки.Добавить("КоррСчет");
	
	ЭтоКод = Ложь;
	ЭтоКоррСчет = Ложь;
	Если Найти(Поле, "Код") <> 0 Тогда
		ЭтоКод = Истина;
	ИначеЕсли Найти(Поле, "КоррСчет") <> 0 Тогда
		ЭтоКоррСчет = Истина;
	КонецЕсли;
	
	Если ЭтоКод И СтрДлина(Значение) = 9
	 ИЛИ ЭтоКоррСчет И СтрДлина(Значение) = 20
	Тогда
		
		Если ЭтоКод Тогда
			СтруктураОтбора = Новый Структура("Код", Значение);
			
		ИначеЕсли ЭтоКоррСчет Тогда
			СтруктураОтбора = Новый Структура("КоррСчет", Значение);
			
		КонецЕсли;
		
		Выборка = Справочники.Банки.Выбрать( , , СтруктураОтбора, "Код Возр");
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаБанков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
		
		Если ТаблицаБанков.Количество() = 0 Тогда
			ДобавитьБанкиИзКлассификатора(
				?(ЭтоКод, Значение, ""), // Код
				?(ЭтоКоррСчет, Значение, ""), // КоррСчет
				ТаблицаБанков
			);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаБанков;
	
КонецФункции // ПолучитьТаблицуБанковПоРеквизитам()

// Функция получает реквизиты банка.
//
// Параметры:
//  Банк - СправочникСсылка.Банки - Ссылка на банк
//
// Возвращаемое значение:
//	Структура - Реквизиты банка
//
Функция ПолучитьРеквизитыБанка(Банк) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Банки.Адрес КАК Адрес
		|ИЗ
		|	Справочник.Банки КАК Банки
		|ГДЕ
		|	Банки.Ссылка = &Банк");
	Запрос.УстановитьПараметр("Банк", Банк);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Адрес = Выборка.Адрес;
	Иначе
		Адрес = "";
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Адрес",
		Адрес
	);
	
	Возврат СтруктураРеквизитов;

КонецФункции // ПолучитьРеквизитыБанка()

// Процедура - Заполнить по умолчанию
// Выполняет первоночальное заполнение
Процедура ЗаполнитьПоУмолчанию() Экспорт 
	СправочникМенеджер = Справочники.Банки;
	
	КлассификаторXML = СправочникМенеджер.ПолучитьМакет("МакетЗаполнения").ПолучитьТекст();
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	Для Каждого СтрокаТаблицыЗначений Из КлассификаторТаблица Цикл 
		Код					  = СокрЛП(СтрокаТаблицыЗначений.Код);
		Наименование 		  = СокрЛП(СтрокаТаблицыЗначений.Наименование);
		Адрес                 = СокрЛП(СтрокаТаблицыЗначений.Адрес);
		Город    		      = СокрЛП(СтрокаТаблицыЗначений.Город);
		SWIFT    		      = СокрЛП(СтрокаТаблицыЗначений.SWIFT);
		
		СправочникСсылка = СправочникМенеджер.НайтиПоНаименованию(Наименование, Истина);
		
		Если СправочникСсылка.Пустая() тогда
			СправочникОбъект = СправочникМенеджер.СоздатьЭлемент();
		Иначе
			СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		КонецЕсли;	
		
		СправочникОбъект.Код				   = Код;
		СправочникОбъект.Наименование 	       = Наименование;
		СправочникОбъект.Адрес 	               = Адрес;
		СправочникОбъект.Наименование          = Наименование;
		СправочникОбъект.SWIFT           	   = SWIFT;
		СправочникОбъект.Город           	   = Город;
		
		БухгалтерскийУчетКлиентСервер.ЗаписатьСправочникОбъект(СправочникОбъект, Истина);
	КонецЦикла;
КонецПроцедуры // ЗаполнитьПоУмолчанию()	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает источник данных ориентируясь на режим работы конфигурации
// 
Функция ПолучитьИсточникДанных()
	
	// Получение из двоичных данных
	//ИмяВременногоФайла		= ПолучитьИмяВременногоФайла();
	//Макет					= Справочники.Банки.ПолучитьМакет("КлассификаторБанков");
	//Макет.Записать(ИмяВременногоФайла);
	//ИсточникДанных			= ЗначениеИзФайла(ИмяВременногоФайла);
	
	// Получение из XML.
	КлассификаторXML = Справочники.Банки.ПолучитьМакет("Классификатор").ПолучитьТекст();
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;	
	
	Возврат КлассификаторТаблица;
	
КонецФункции // ПолучитьИсточникДанных()

// Добавить элемент отбора построителя отчета
//
Процедура ДобавитьЭлементОтбораПостроителяОтбора(Построитель, Имя, Значение, ЗначениеВидаСравнения)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		
		ЭлементОтбора = Построитель.Отбор.Добавить(Имя);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ЭлементОтбора.ВидСравнения = ЗначениеВидаСравнения;
	ЭлементОтбора.Значение = Значение;
	ЭлементОтбора.Использование = Истина;
	
КонецПроцедуры //ДобавитьЭлементОтбораПостроителяОтбора()

// Функция формирует результат запроса по классификатору банков
// с отбором по Код, корреспондентскому счету, наименованию банка, Адресу
//
// - разделение даных включено, источником данных выступает справочник классификатор банков
// - разделение даных не включено, источником данных выступает макет, приложенный к справочнику банков
//
// Параметры:
//	Код - Строка (9) - Код банка
//	КорСчет - Строка (20) - Корреспондентский счет банка
//
// Возвращаемое значение:
//	РезультатЗапроса - Результат запроса по классификатору.
//
Функция ПолучитьДанныеИзКлассификатора(БИК, КоррСчет, Наименование, Адрес)
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ПолучитьИсточникДанных());
	
	ИмяПоляБИК = "БИК";
	
	ДобавитьЭлементОтбораПостроителяОтбора(Построитель, ИмяПоляБИК, 	СокрЛП(БИК),			ВидСравнения.Содержит);
	ДобавитьЭлементОтбораПостроителяОтбора(Построитель, "КоррСчет", 	СокрЛП(КоррСчет),		ВидСравнения.Содержит);
	ДобавитьЭлементОтбораПостроителяОтбора(Построитель, "Наименование", СокрЛП(Наименование), 	ВидСравнения.Содержит);
	ДобавитьЭлементОтбораПостроителяОтбора(Построитель, "Адрес", 		СокрЛП(Адрес), 			ВидСравнения.Содержит);
	
	Построитель.Выполнить();
	
	Возврат Построитель.Результат;
	
КонецФункции // ПолучитьРезультатЗапросаПоКлассификаторуВРазделенномРежиме()

// Процедура добавляет новый банк из классификатора
// по значению Код или корреспондентскому счету.
//
// Параметры:
//	Код - Строка (9) - Код банка
//	КоррСчет - Строка (20) - Корреспондентский счет банка
//	ТаблицаБанков - ТаблицаЗначений - Таблица банков
//
Процедура ДобавитьБанкиИзКлассификатора(Код, КоррСчет, ТаблицаБанков)
	
	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса	= ПолучитьРезультатЗапросаПоКлассификатору(Код, КоррСчет, "", "");
	
	МассивБанков		= Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивБанков.Добавить(Выборка.Ссылка);
	КонецЦикла;
		
	Для каждого Строка Из МассивБанков Цикл
		
		НайденныйБанк = Справочники.Банки.НайтиПоКоду(Строка.Код);
		Если НайденныйБанк <> Неопределено Тогда
			НоваяСтрока = ТаблицаБанков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныйБанк);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьБанкиИзКлассификатора()

#КонецОбласти

#КонецЕсли
