
&НаКлиенте
Процедура КодыПлатежейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОбработатьВыборВСпискеКодовПлатежей(СтандартнаяОбработка);  
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборВСпискеКодовПлатежей(СтандартнаяОбработка = Неопределено)
		
	// Добавление элемента справочника и вывод результата пользователю
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСсылка = СохранитьВыбранныеСтроки(Элементы.КодыПлатежей.ВыделенныеСтроки);
	
	ОповеститьОВыборе(ТекущаяСсылка);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Коды платежей добавлены.'"), , "",БиблиотекаКартинок.Информация32);
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция СохранитьВыбранныеСтроки(Знач ВыбранныеСтроки)
	
	ТекущаяСсылка = Неопределено;
	
	Для каждого НомерСтроки Из ВыбранныеСтроки Цикл
		ТекущиеДанные = КодыПлатежей[НомерСтроки];
		
		КодБезГруппировки = СокрЛП(ТекущиеДанные.КодПлатежа);
		
		СтрокаВБазе = Справочники.КодыПлатежей.НайтиПоКоду(КодБезГруппировки);
		Если ЗначениеЗаполнено(СтрокаВБазе) Тогда
			Если НомерСтроки = Элементы.КодыПлатежей.ТекущаяСтрока Или ТекущаяСсылка = Неопределено Тогда
				ТекущаяСсылка = СтрокаВБазе;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Справочники.КодыПлатежей.СоздатьЭлемент(); 		
		НоваяСтрока.Код             = КодБезГруппировки;
		НоваяСтрока.Наименование	= ТекущиеДанные.Наименование;   			
		НоваяСтрока.Записать();
		
		Если НомерСтроки = Элементы.КодыПлатежей.ТекущаяСтрока Или ТекущаяСсылка = Неопределено Тогда
			ТекущаяСсылка = НоваяСтрока.Ссылка;
		КонецЕсли;               		
				
	КонецЦикла;
	
	Возврат ТекущаяСсылка;

КонецФункции



#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли; 
	
	ЗакрыватьПриВыборе = Ложь;
	ЗаполнитьКодыПлатежей();
	
	УстановитьУсловноеОформление();  
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьКодыПлатежей()
	
	// Заполняет региональные коэффицента из Макета
	
	КлассификаторXML = Справочники.КодыПлатежей.ПолучитьМакет("МакетЗаполнения").ПолучитьТекст();
	
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	Для Каждого ЗаписьОКВ Из КлассификаторТаблица Цикл
		НоваяСтрока = КодыПлатежей.Добавить();
		НоваяСтрока.КодПлатежа 	     = ДобавитьПустыеСимволыДляГруппировки(ЗаписьОКВ.КодПлатежа) + ЗаписьОКВ.КодПлатежа;
		НоваяСтрока.Наименование 	 = ЗаписьОКВ.Наименование; 
		НоваяСтрока.ЭтоГруппа        = ЭтоГруппаКодаПлатежа(ЗаписьОКВ.КодПлатежа);
	КонецЦикла;
	
	
	
КонецПроцедуры 

&НаСервере
Функция ЭтоГруппаКодаПлатежа(КодПлатежа)
	
	КопияКодПлатежа = КодПлатежа;
	
	Для i = 1 ПО СтрДлина(КодПлатежа) Цикл 		
				
		ВозможныйНоль = Прав(КопияКодПлатежа, 1);
		
		Если ВозможныйНоль <> "0" Тогда
			КоличествоПустыхСимволов = СтрДлина(КодПлатежа) - i;
			Прервать;
		КОнецЕсли;
		
		Если i = 4 Тогда
			Возврат Истина;
		КонецЕсли;
		
		КопияКодПлатежа = Лев(КопияКодПлатежа, СтрДлина(КопияКодПлатежа) - 1);  
		
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции


&НаСервере
Функция ДобавитьПустыеСимволыДляГруппировки(КодПлатежа)
	
	ПустыеСимволы = "";
		
	КоличествоПустыхСимволов = 0;
	
	КопияКодПлатежа = КодПлатежа;
	
	Для i = 1 ПО СтрДлина(КодПлатежа) Цикл 		
				
		ВозможныйНоль = Прав(КопияКодПлатежа, 1);
		
		Если ВозможныйНоль <> "0" Тогда
			КоличествоПустыхСимволов = СтрДлина(КодПлатежа) - i;
			Прервать;
		КОнецЕсли;
		
		КопияКодПлатежа = Лев(КопияКодПлатежа, СтрДлина(КопияКодПлатежа) - 1);
		
	КонецЦикла; 	   
	
	Для i = 1 По КоличествоПустыхСимволов  Цикл
		ПустыеСимволы = ПустыеСимволы + "     ";
	КонецЦикла;
	
	Возврат ПустыеСимволы;   	
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	//ЭтаФорма.УсловноеОформление.Элементы.Очистить();
	
	ЭлементУсловногоОформленияКомпоновкиДанных = УсловноеОформление.Элементы.Добавить();

	// указание параметров оформления
	ЗначениеПараметраНастроекКомпоновкиДанных = ЭлементУсловногоОформленияКомпоновкиДанных.Оформление.Элементы.Найти("ЦветФона");
	ЗначениеПараметраНастроекКомпоновкиДанных.Значение = WebЦвета.СветлоЗолотистый;
	ЗначениеПараметраНастроекКомпоновкиДанных.Использование = Истина;
	
	// добавление полей отбора
	ЭлементОтбора = ЭлементУсловногоОформленияКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КодыПлатежей.ЭтоГруппа");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;     	
	ЭлементОтбора.Использование = Истина;
	
	// указание полей оформления
	ОформляемоеПолеКомпоновкиДанных = ЭлементУсловногоОформленияКомпоновкиДанных.Поля.Элементы.Добавить();
	ОформляемоеПолеКомпоновкиДанных.Поле = Новый ПолеКомпоновкиДанных("КодыПлатежей");
	ОформляемоеПолеКомпоновкиДанных.Использование = Истина;
	
	
КонецПроцедуры



