#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ДатаСведений = ТекущаяДата();
	Если ЗначениеЗаполнено(Параметры.ТекстЗаполнения) Тогда
		Объект.НаименованиеПолное = Параметры.ТекстЗаполнения;	
	КонецЕсли;
	
	ЗаполнитьОписания();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьДоступностьЭлементов();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаИмуществаПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура КатегорияГСПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаДокументСнятияСУчетаБУНажатие(Элемент)
	Если Не ЗначениеЗаполнено(ДокументСнятоСУчетаБУ) Тогда
		Возврат;	
	КонецЕсли;  
		
	Попытка   		
		П = Новый Структура;
	    П.Вставить("Ключ", ДокументСнятоСУчетаБУ);
		Если ТипЗнч(ДокументСнятоСУчетаБУ) = ТИП("ДокументСсылка.СписаниеОС") Тогда
			ОткрытьФорму("Документ.СписаниеОС.Форма.ФормаДокумента", П);
			
		ИначеЕсли ТипЗнч(ДокументСнятоСУчетаБУ) = ТИП("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		    ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента", П);
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаДокументПринятияКУчетуНажатие(Элемент)
	Если НЕ ЗначениеЗаполнено(ДокументПринятияКУчету) Тогда
		Возврат;	
	КонецЕсли;  
		
	Попытка   		
		ПараметрыФормы = Новый Структура;
	    ПараметрыФормы.Вставить("Ключ", ДокументПринятияКУчету);
		
		ОткрытьФорму("Документ.ПринятиеКУчетуОС.Форма.ФормаДокумента", ПараметрыФормы);  		
	Исключение
		
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()	
	Элементы.Организация.Видимость = ПолучитьФункциональнуюОпциюНаСервере("УчетПоНесколькимОрганизациям");
	Элементы.ГруппаСведенияОГоссобственности.Видимость = ЗначениеЗаполнено(ГруппаИмущества);
	Элементы.ИдентификационныйНомерИмущества.Видимость = Ложь;		
	Элементы.Местонахождение.Видимость = Ложь;
	
	Элементы.СтраницаНедвижимость.Видимость = ГруппаИмущества = ПредопределенноеЗначение("Справочник.ГруппыИмущества.ГИ1") 
											ИЛИ ГруппаИмущества = ПредопределенноеЗначение("Справочник.ГруппыИмущества.ГИ2")
											ИЛИ ГруппаИмущества = ПредопределенноеЗначение("Справочник.ГруппыИмущества.ГИ3");
	Элементы.СтраницаТранспортныйНалог.Видимость = ГруппаИмущества = ПредопределенноеЗначение("Справочник.ГруппыИмущества.ГИ4");
	
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()    

// Процедура заполняет доступные только для чтения реквизиты формы 
// 
&НаСервере
Процедура ЗаполнитьОписания()
	ЗаполнитьСтраницуОсновныеСведения(ДатаСведений, ЭтаФорма, Объект.Ссылка);	
	ЗаполнитьСтраницуНедвижимость(ДатаСведений, ЭтаФорма, Объект.Ссылка);
	ЗаполнитьСтраницуТранспортныйНалог(ДатаСведений, ЭтаФорма, Объект.Ссылка);
КонецПроцедуры // ЗаполнитьПоляУчета()

&НаСервереБезКонтекста
Процедура ЗаполнитьСтраницуТранспортныйНалог(Дата, ЭтаФорма, ОсновноеСредство)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СобытияОССрезПервых.ОсновноеСредство,
		|	СобытияОССрезПервых.Период КАК ДатаПриобретения
		|ПОМЕСТИТЬ ВременнаяТаблицаСобытиеПоступление
		|ИЗ
		|	РегистрСведений.СобытияОС.СрезПервых(
		|			,
		|			ОсновноеСредство = &ОсновноеСредство
		|				И (Событие.ВидСобытияОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Поступление)
		|					ИЛИ Событие.ВидСобытияОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчету))) КАК СобытияОССрезПервых
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОТранспортеСрезПоследних.ОсновноеСредство,
		|	СведенияОТранспортеСрезПоследних.ГруппаИмущества,
		|	СведенияОТранспортеСрезПоследних.ДатаВводаВЭксплуатацию,
		|	СведенияОТранспортеСрезПоследних.ВидТранспорта,
		|	СведенияОТранспортеСрезПоследних.ОбъемДвигателя,
		|	СведенияОТранспортеСрезПоследних.ГосНомер,
		|	ВременнаяТаблицаСобытиеПоступление.ДатаПриобретения
		|ИЗ
		|	РегистрСведений.СведенияОТранспорте.СрезПоследних(&Дата, ОсновноеСредство = &ОсновноеСредство) КАК СведенияОТранспортеСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСобытиеПоступление КАК ВременнаяТаблицаСобытиеПоступление
		|		ПО СведенияОТранспортеСрезПоследних.ОсновноеСредство = ВременнаяТаблицаСобытиеПоступление.ОсновноеСредство";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ВыборкаДетальныеЗаписи)
	КонецЕсли;

КонецПроцедуры // ЗаполнитьНедвижимость(Дата, ЭтаФорма, ОсновноеСредство)

&НаСервереБезКонтекста
Процедура ЗаполнитьСтраницуНедвижимость(Дата, ЭтаФорма, ОсновноеСредство)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СобытияОССрезПервых.ОсновноеСредство,
		|	СобытияОССрезПервых.Период КАК ДатаПриобретения
		|ПОМЕСТИТЬ ВременнаяТаблицаСобытиеПоступление
		|ИЗ
		|	РегистрСведений.СобытияОС.СрезПервых(
		|			,
		|			ОсновноеСредство = &ОсновноеСредство
		|				И (Событие.ВидСобытияОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Поступление)
		|					ИЛИ Событие.ВидСобытияОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчету))) КАК СобытияОССрезПервых
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОбИмуществеСрезПоследних.МатериалСтен,
		|	СведенияОбИмуществеСрезПоследних.ЖилаяПлощадь + СведенияОбИмуществеСрезПоследних.НежилаяПлощадь КАК ОсновнаяПлощадь,
		|	СведенияОбИмуществеСрезПоследних.РегиональныйКоэффициент,
		|	СведенияОбИмуществеСрезПоследних.ЗональныйКоэффициент,
		|	ОтраслевыеКоэффициентыНалогаНаИмущество.Коэффициент КАК ОтраслевойКоэффициент,
		|	СведенияОбИмуществеСрезПоследних.КодПользователяИмущества,
		|	СведенияОбИмуществеСрезПоследних.ГруппаИмущества,
		|	ВременнаяТаблицаСобытиеПоступление.ДатаПриобретения
		|ИЗ
		|	РегистрСведений.СведенияОбИмуществе.СрезПоследних(&Дата, ОсновноеСредство = &ОсновноеСредство) КАК СведенияОбИмуществеСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОтраслевыеКоэффициентыНалогаНаИмущество КАК ОтраслевыеКоэффициентыНалогаНаИмущество
		|		ПО СведенияОбИмуществеСрезПоследних.КодНазначенияИмущества = ОтраслевыеКоэффициентыНалогаНаИмущество.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСобытиеПоступление КАК ВременнаяТаблицаСобытиеПоступление
		|		ПО СведенияОбИмуществеСрезПоследних.ОсновноеСредство = ВременнаяТаблицаСобытиеПоступление.ОсновноеСредство";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ВыборкаДетальныеЗаписи)
	КонецЕсли;

КонецПроцедуры // ЗаполнитьНедвижимость(Дата, ЭтаФорма, ОсновноеСредство)

&НаСервереБезКонтекста
Процедура ЗаполнитьСтраницуОсновныеСведения(Дата, ЭтаФорма, ОсновноеСредство)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МестонахождениеОССрезПоследних.Организация КАК Организация,
		|	ПараметрыУчетаОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	ПараметрыУчетаОССрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ПараметрыУчетаОССрезПоследних.СчетУчета КАК СчетУчета,
		|	ПараметрыУчетаОССрезПоследних.ГруппаНУ КАК ГруппаНУ,
		|	ПараметрыУчетаОССрезПоследних.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.СрокСлужбы КАК СрокСлужбы,
		|	ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
		|	ПараметрыУчетаОССрезПоследних.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
		|	ПараметрыУчетаОССрезПоследних.ПараметрВыработки КАК ПараметрВыработки,
		|	ПараметрыУчетаОССрезПоследних.ОбъемПродукцииРабот КАК ОбъемПродукцииРабот,
		|	ПараметрыУчетаОССрезПоследних.СпособПоступления КАК СпособПоступления,
		|	МестонахождениеОССрезПоследних.Подразделение КАК ПодразделениеБУ,
		|	МестонахождениеОССрезПоследних.МОЛ КАК МОЛБУ,
		|	ВЫБОР
		|		КОГДА СостоянияОС.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)
		|			ТОГДА СостоянияОС.Период
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ПринятоКУчетуБУ,
		|	ВЫБОР
		|		КОГДА СостоянияОС.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)
		|			ТОГДА СостоянияОС.Период
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СнятоСУчетаБУ,
		|	ВЫБОР
		|		КОГДА СостоянияОС.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)
		|			ТОГДА СостоянияОС.Регистратор
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДокументПринятияКУчету,
		|	ВЫБОР
		|		КОГДА СостоянияОС.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)
		|			ТОГДА СостоянияОС.Регистратор
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДокументСнятоСУчетаБУ,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК НакопленныйИзнос,
		|	ЕСТЬNULL(ПараметрыУчетаОССрезПоследних.ПервоначальнаяСтоимость, 0) - ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК БалансоваяСтоимость,
		|	ПараметрыУчетаОССрезПоследних.СчетУчета.ПарныйСчет КАК СчетУчетаАмортизации,
		|	ВЫБОР
		|		КОГДА ПараметрыУчетаОССрезПоследних.СрокСлужбы = 0
		|			ТОГДА 0
		|		ИНАЧЕ 100 * 12 / ПараметрыУчетаОССрезПоследних.СрокСлужбы
		|	КОНЕЦ КАК ПроцентГодовойАмортизации
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(&Дата, ОсновноеСредство = &ОсновноеСредство) КАК ПараметрыУчетаОССрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС.СрезПоследних(&Дата, ОсновноеСредство = &ОсновноеСредство) КАК МестонахождениеОССрезПоследних
		|		ПО ПараметрыУчетаОССрезПоследних.ОсновноеСредство = МестонахождениеОССрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОС КАК СостоянияОС
		|		ПО ПараметрыУчетаОССрезПоследних.ОсновноеСредство = СостоянияОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата, , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), ) КАК ХозрасчетныйОстатки
		|		ПО ПараметрыУчетаОССрезПоследних.ОсновноеСредство = ХозрасчетныйОстатки.Субконто1
		|			И ПараметрыУчетаОССрезПоследних.СчетУчета.ПарныйСчет = ХозрасчетныйОстатки.Счет";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ВыборкаДетальныеЗаписи)
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСтраницуОсновныеСведения(Дата, ЭтаФорма, ОсновноеСредство)

&НаСервереБезКонтекста
Функция ПолучитьФункциональнуюОпциюНаСервере(ФО)
	Возврат ПолучитьФункциональнуюОпцию(ФО);	
КонецФункции // ПолучитьФункциональнуюОпциюНаСервере()

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти  




