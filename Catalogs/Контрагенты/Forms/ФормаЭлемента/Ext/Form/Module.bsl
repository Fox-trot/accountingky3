#Область ПроцедурыИФункцииОбщегоНазначения

// Присваивает соответствующее значение переменной ФормироватьНаименованиеПолноеАвтоматически.
//
//
&НаКлиентеНаСервереБезКонтекста
Функция УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(Наименование, НаименованиеПолное, КодПравовойФормы)
	Возврат (СтрШаблон("%1 ""%2""", КодПравовойФормы, Наименование) = НаименованиеПолное ИЛИ ПустаяСтрока(НаименованиеПолное));
КонецФункции // УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

&НаСервере
// Процедура отражает изменения в форме элемента справочника при изменении реквизита юр/физ лицо 
//
Процедура ОтразитьИзменениеФормыСобственностиОрганизации(ПриСоздании = Ложь)
	
	Если Объект.ЮрФизЛицо = ЮрЛицо 
		И НЕ ПриСоздании 
		И ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		
		Объект.ФизЛицо = Неопределено;
	КонецЕсли;
	
	СтруктураДляПроверкиИНН.Вставить("ИНН",	 		 Объект.ИНН);
	СтруктураДляПроверкиИНН.Вставить("ЭтоЮрЛицо",	 Объект.ЮрФизЛицо = ЮрЛицо);
	СтруктураДляПроверкиИНН.Вставить("ПроверитьИНН", Истина);
	
	Если Не Объект.ЮрФизЛицо = ЮрЛицо и Не Объект.ЮрФизЛицо = Неопределено Тогда 
		 СформироватьСтруктуруПроверкиИННДляФизЛица(СтруктураДляПроверкиИНН);
	КонецЕсли;
	
	ПроверитьКорректностьИНН(СтруктураДляПроверкиИНН, ЭтаФорма);
	
	Если СтруктураДляПроверкиИНН.ИННВведенКорректно Тогда
		ПроверитьДублиКонтрагентов(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры // ОтразитьИзменениеФормыСобственностиОрганизации()

// Процедура управляет информационными надписями о наличии дублей контрагента.
// 
&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьДублиКонтрагентов(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	КоличествоЭлементовДублей = 0;
	
	КоличествоЭлементовДублей = ПолучитьКоличествоДублейСервер(Объект.ИНН, Объект.Ссылка);
	
	ЭтоЮрЛицо = Объект.ЮрФизЛицо = Форма.ЮрЛицо;
	
	Если КоличествоЭлементовДублей > 0 Тогда
		
		СтруктураПараметровСообщенияОДублях = Новый Структура;
		
		Если КоличествоЭлементовДублей = 1 Тогда
			
			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоЭлементовДублей", НСтр("ru = 'один'"));
			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагент'"));
			
		ИначеЕсли КоличествоЭлементовДублей < 5 Тогда
			
			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоЭлементовДублей", КоличествоЭлементовДублей);
			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагента'"));
			
		Иначе
			
			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоЭлементовДублей", КоличествоЭлементовДублей);
			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагентов'"));
			
		КонецЕсли;	
		
		СтруктураПараметровСообщенияОДублях.Вставить("ИНН", НСтр("ru = 'ИНН'"));
		
		ТекстНадписиОДублях = НСтр("ru = 'С таким [ИНН] есть [КоличествоЭлементовДублей] [СклонениеКонтрагентов]'");
		
		Элементы.ПоказатьДубли.Заголовок = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстНадписиОДублях, 
																										   СтруктураПараметровСообщенияОДублях);
		Форма.СтруктураДляПроверкиИНН.ЕстьДубли = Истина;
		
	Иначе
		
		Форма.СтруктураДляПроверкиИНН.ЕстьДубли = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоДублейСервер(Знач ИНН, Знач Ссылка)
	Возврат Справочники.Контрагенты.ПроверитьДублиСправочникаКонтрагентыПоИНН(СокрЛП(ИНН), Ссылка).Количество();
КонецФункции	

// Продедура открытия вспомогательной формы сравнения дублированных контрагентов.
// 
&НаКлиенте
Процедура ОбработатьСитуациюВыбораДубля(Элемент)
		
	ПараметрыПередачи = Новый Структура;
	ПараметрыПередачи.Вставить("ИНН", СокрЛП(Объект.ИНН));
	ПараметрыПередачи.Вставить("ЭтоЮрЛицо", Объект.ЮрФизЛицо = ЮрЛицо);
	ПараметрыПередачи.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	
	ЧтоВыполнитьПослеЗакрытия = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСпискаДублей", ЭтаФорма);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбораДублей", 
				  ПараметрыПередачи, 
				  Элемент,
				  ,
				  ,
				  ,
				  ЧтоВыполнитьПослеЗакрытия,
				  РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыСпискаДублей(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	ПроверитьДублиКонтрагентов(ЭтаФорма);
КонецПроцедуры	

// Процедура управляет информационными надписями о корректности заполнения ИНН.
// 
&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьКорректностьИНН(СтруктураПараметров, Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ВозвращеннаяСтруктура = БухгалтерскийУчетКлиентСервер.ПроверитьКорректностьИНН(СтруктураПараметров);
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ВозвращеннаяСтруктура);
	ЗаполнитьЗначенияСвойств(Форма, ВозвращеннаяСтруктура);
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает видимость и доступность элементов.
//
Процедура УстановитьВидимостьДоступностьЭлементов()
	Элементы.ГруппаРезидент.Видимость = Не Объект.Ссылка = ПредопределенноеЗначение("Справочник.СтраныМира.Киргизия");
	Элементы.ГруппаГНС.Видимость = Объект.ЮрФизЛицо = ЮрЛицо;
	Элементы.ФизЛицо.Видимость = НЕ Объект.ЮрФизЛицо = ЮрЛицо;
	Элементы.ПоказатьДубли.Видимость = СтруктураДляПроверкиИНН.ЕстьДубли;
	Элементы.НадписьПоясненияНекорректногоИНН.Видимость = НЕ СтруктураДляПроверкиИНН.ИННВведенКорректно;	
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()

&НаСервереБезКонтекста
// По переданной ссылке получает электронные адреса.
//
Функция ПолучитьEMAILКонтрагент(СсылкаНаТекущийЭлемент)
	
	Если СсылкаНаТекущийЭлемент = Справочники.Контрагенты.ПустаяСсылка() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Результат = Новый Массив;
	МассивАдресовПочты = Новый Массив;
	СтруктураПолучателя = Новый Структура("Представление, Адрес", СсылкаНаТекущийЭлемент);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаТекущийЭлемент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Ссылка.Наименование КАК ПредставлениеКонтакта,
	|	КонтрагентыКонтактнаяИнформация.АдресЭП КАК АдресЭП,
	|	1 КАК Порядок
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	ДобавитьЭлектронныйАдресКонтрагента = Истина;
	Пока ВыборкаИзЗапроса.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаИзЗапроса.АдресЭП)
			ИЛИ (ВыборкаИзЗапроса.Порядок = 2 И НЕ ДобавитьЭлектронныйАдресКонтрагента) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если МассивАдресовПочты.Найти(ВыборкаИзЗапроса.АдресЭП) = Неопределено Тогда
			
			МассивАдресовПочты.Добавить(ВыборкаИзЗапроса.АдресЭП);
			ДобавитьЭлектронныйАдресКонтрагента = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПолучателя.Адрес = СтрСоединить(МассивАдресовПочты, "; ");
	Результат.Добавить(СтруктураПолучателя);
	
	Возврат Результат;
	
КонецФункции //ПолучитьEMAILКонтрагент()

&НаСервере
Процедура СформироватьСтруктуруПроверкиИННДляФизЛица(СтруктураДляПроверкиИНН)

	    СтруктураДляПроверкиИНН.Вставить("ДатаРождения", Объект.ФизЛицо.ДатаРождения);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВидВыбранногоОсновногоДоговораПриИзмененииНаСервере(ОсновнойДоговорКонтрагента)
	Возврат ОсновнойДоговорКонтрагента.ВидДоговора;
КонецФункции

&НаКлиенте
// Процедура формирует полное наименование.
//
Процедура СформироватьНаименованиеПолноеАвтоматически()

	Если НЕ ФормироватьНаименованиеПолноеАвтоматически Тогда 
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.КодПравовойФормы) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	Иначе
		Объект.НаименованиеПолное = СтрШаблон("%1 ""%2""", Объект.КодПравовойФормы, Объект.Наименование);
	КонецЕсли;

КонецПроцедуры // СформироватьНаименованиеПолноеАвтоматически()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	
	ФормироватьНаименованиеПолноеАвтоматически = УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(
		Объект.Наименование,
		Объект.НаименованиеПолное,
		Объект.КодПравовойФормы
	);

	Если Пользователи.ЭтоПолноправныйПользователь()
		ИЛИ (РольДоступна("ВыводНаПринтерФайлБуферОбмена")
		И РаботаСПочтовымиСообщениями.ПроверитьСистемнаяУчетнаяЗаписьДоступна()) Тогда
		
		СистемнаяУчетнаяЗаписьЭлектроннойПочты = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	Иначе
		Элементы.ФормаОтправитьEmailКонтрагенту.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда   // это новый		
		Если ПараметрыСеанса.ТипПоследнегоОткрытогоДокумента = "С покупателем" Тогда 
			Объект.ВидОсновногоДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		ИначеЕсли ПараметрыСеанса.ТипПоследнегоОткрытогоДокумента = "С поставщиком" Тогда 
			Объект.ВидОсновногоДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
		ИначеЕсли ПараметрыСеанса.ТипПоследнегоОткрытогоДокумента = "Прочее" Тогда 
			Объект.ВидОсновногоДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;			
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(Объект.СтранаРезидентства) Тогда
			Объект.СтранаРезидентства = Справочники.СтраныМира.Киргизия;
		КонецЕсли;

	КонецЕсли;
	
	ЮрЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	
	СтруктураДляПроверкиИНН = Новый Структура;
	
	СтруктураДляПроверкиИНН.Вставить("ИНН",							Объект.ИНН);
	СтруктураДляПроверкиИНН.Вставить("ЭтоЮрЛицо",					Объект.ЮрФизЛицо = ЮрЛицо);
	СтруктураДляПроверкиИНН.Вставить("ПроверитьИНН",				Истина);
	СтруктураДляПроверкиИНН.Вставить("ИННВведенКорректно",			Ложь);
	СтруктураДляПроверкиИНН.Вставить("ПустойИНН",					Ложь);
	СтруктураДляПроверкиИНН.Вставить("ЕстьДубли",					Ложь);
	
	ОтразитьИзменениеФормыСобственностиОрганизации(Истина);

	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаКонтактнаяИнформация");
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсисте.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаВажныеКоманды);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация 	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// Обработчик механизма "Свойства".
	//  Из списка договоров установили новый договор по умолчанию
	//  Из списка контактных лиц установили новое контактное лицо по умолчанию
	//  Загрузили данные контрагента из XML (БЭД)
	Если Найти("ПеречитатьДоговорПоУмолчанию, ПеречитатьКонтактноеЛицоПоУмолчанию, ИзмененОсновнойБанковскийСчет, ОбновитьСостояниеЭД", ИмяСобытия) > 0 Тогда
		ЭтаФорма.Прочитать();
	КонецЕсли;
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
КонецПроцедуры

// Процедура обработчик события ПередЗаписью.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ПослеЗаписиКонтрагента", Объект.Ссылка);
КонецПроцедуры // ПослеЗаписи()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтправитьEmailКонтрагенту(Команда)
	
	СписокЭлектронныхАдресов = ПолучитьEMAILКонтрагент(Объект.Ссылка);
	
	Если СписокЭлектронныхАдресов = Неопределено Тогда
		
		СписокЭлектронныхАдресов = Новый СписокЗначений;
		ТекстСообщения = НСтр("ru = 'Контрагент не записан. Список электронных адресов будет пуст.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	ПараметрыОтправки = Новый Структура("Получатель, УдалятьФайлыПослеОтправки", СписокЭлектронныхАдресов, Истина);
	РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
	
КонецПроцедуры // ОтправитьEmailКонтрагенту()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

// Процедура обработчик события ПриИзменении поля ввода Наименование.
//
&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	СформироватьНаименованиеПолноеАвтоматически();
КонецПроцедуры // НаименованиеПриИзменении()

// Процедура обработчик события ПриИзменении поля ввода ЮрФизЛицо.
//
&НаКлиенте
Процедура ЮрФизЛицоПриИзменении(Элемент)
	
	ОтразитьИзменениеФормыСобственностиОрганизации();
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры // ЮрФизЛицоПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита ИНН
//
&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	СтруктураДляПроверкиИНН.Вставить("ИНН", Объект.ИНН);
	Если Не ЮрЛицо = Объект.ЮрФизЛицо и Не Объект.ЮрФизЛицо = Неопределено Тогда 
		  СформироватьСтруктуруПроверкиИННДляФизЛица(СтруктураДляПроверкиИНН);		
	КонецЕсли;
	
	ПроверитьКорректностьИНН(СтруктураДляПроверкиИНН, ЭтаФорма);
	
	Если СтруктураДляПроверкиИНН.ИННВведенКорректно Тогда
		ПроверитьДублиКонтрагентов(ЭтаФорма);
	КонецЕсли;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

// Процедура - обработчик события Нажатие элемента ПоказатьДубли.
//
&НаКлиенте
Процедура ПоказатьДублиНажатие(Элемент)
	ОбработатьСитуациюВыбораДубля(Элемент);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ОсновнойБанковскийСчет.
//
&НаКлиенте
Процедура ОсновнойБанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекстСообщения = НСтр("ru = 'Элемент справочника еще не записан.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // ОсновнойБанковскийСчетНачалоВыбора()

// Процедура - обработчик события НачалоВыбора поля ДоговорПоУмолчанию.
//
&НаКлиенте
Процедура ОсновнойДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекстСообщения = НСтр("ru = 'Элемент справочника еще не записан.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // ДоговорПоУмолчаниюНачалоВыбора()

// Процедура - обработчик события ПриИзменении реквизита НаименованиеПолное
//
&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	ФормироватьНаименованиеПолноеАвтоматически = УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(
		Объект.Наименование,
		Объект.НаименованиеПолное,
		Объект.КодПравовойФормы
	);
	
КонецПроцедуры // НаименованиеПолноеПриИзменении()

&НаКлиенте
Процедура ОсновнойДоговорКонтрагентаПриИзменении(Элемент)
	Объект.ВидОсновногоДоговора = ПолучитьВидВыбранногоОсновногоДоговораПриИзмененииНаСервере(Объект.ОсновнойДоговорКонтрагента);
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойДоговорКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВидОсновногоДоговораОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура КодПравовойФормыПриИзменении(Элемент)
	СформироватьНаименованиеПолноеАвтоматически();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

