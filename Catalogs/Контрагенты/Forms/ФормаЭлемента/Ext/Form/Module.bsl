#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	ФормироватьНаименованиеПолноеАвтоматически = УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(
		Объект.Наименование,
		Объект.НаименованиеПолное,
		Объект.КодПравовойФормы);

	// Обработка создания нового контрагента из документа. 
	Если Параметры.ПараметрыВыбора.Свойство("ДокументВладелец")
		И НЕ ЗначениеЗаполнено(Объект.ВидОсновногоДоговора) Тогда
		
		ВидОперацииВладелец = Неопределено;
		Если Параметры.ПараметрыВыбора.Свойство("ВидОперацииВладелец") Тогда 
			ВидОперацииВладелец = Параметры.ПараметрыВыбора.ВидОперацииВладелец;
		КонецЕсли;	
		
		ЗаполнитьВидОсновногоДоговора(Параметры.ПараметрыВыбора.ДокументВладелец, ВидОперацииВладелец);
	КонецЕсли;	
	
	Если Пользователи.ЭтоПолноправныйПользователь()
		ИЛИ (Пользователи.РолиДоступны("ВыводНаПринтерФайлБуферОбмена")
		И РаботаСПочтовымиСообщениями.ПроверитьСистемнаяУчетнаяЗаписьДоступна()) Тогда
		
		СистемнаяУчетнаяЗаписьЭлектроннойПочты = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	Иначе
		Элементы.ФормаОтправитьEmailКонтрагенту.Видимость = Ложь;
	КонецЕсли;
	
	ЮрЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	
	СтруктураДляПроверкиИНН = Новый Структура;
	
	СтруктураДляПроверкиИНН.Вставить("ИНН",							Объект.ИНН);
	СтруктураДляПроверкиИНН.Вставить("ЭтоЮрЛицо",					Объект.ЮрФизЛицо = ЮрЛицо);
	СтруктураДляПроверкиИНН.Вставить("ПроверитьИНН",				?(Объект.СтранаРезидентства = Справочники.СтраныМира.Киргизия, Истина, Ложь));
	СтруктураДляПроверкиИНН.Вставить("ИННВведенКорректно",			Ложь);
	СтруктураДляПроверкиИНН.Вставить("ПустойИНН",					Ложь);
	СтруктураДляПроверкиИНН.Вставить("ЕстьДубли",					Ложь);
	
	ОтразитьИзменениеФормыСобственностиОрганизации(Истина);

	// Установить видимость и доступность элементов формы.
	УстановитьВидимостьДоступностьЭлементов();

	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаКонтактнаяИнформация");
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация 
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Объект.Ссылка = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка") 
		И ЗначениеЗаполнено(Объект.Наименование) И НЕ ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		СформироватьНаименованиеПолноеАвтоматически();		
	КонецЕсли;	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УстановкаОсновногоСчета" И Параметр.Владелец = Объект.Ссылка Тогда
		
		Объект.ОсновнойБанковскийСчет = Параметр.НовыйОсновнойСчет;
		Если НЕ Модифицированность Тогда
			Записать();
		КонецЕсли;
		Оповестить("УстановкаОсновногоСчетаВыполнена");
	КонецЕсли;	
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если Модифицированность Тогда 
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;	
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства	
КонецПроцедуры

// Процедура обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_Контрагент", Объект.Ссылка, ЭтотОбъект);
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	КонтрольВеденияУчета.ПослеЗаписиНаСервере(ТекущийОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ЭтотОбъект.ПараметрыСвойств.Свойство(ТекущаяСтраница.Имя)
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

// Процедура обработчик события ПриИзменении поля ввода Наименование.
//
&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	СформироватьНаименованиеПолноеАвтоматически();
КонецПроцедуры // НаименованиеПриИзменении()

// Процедура обработчик события ПриИзменении поля ввода ЮрФизЛицо.
//
&НаКлиенте
Процедура ЮрФизЛицоПриИзменении(Элемент)
	
	ОтразитьИзменениеФормыСобственностиОрганизации();
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры // ЮрФизЛицоПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита ИНН
//
&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	СтруктураДляПроверкиИНН.Вставить("ИНН", Объект.ИНН);
	Если Не ЮрЛицо = Объект.ЮрФизЛицо И Не Объект.ЮрФизЛицо = Неопределено Тогда 
		СформироватьСтруктуруПроверкиИННДляФизЛица(СтруктураДляПроверкиИНН);		
	КонецЕсли;
	
	ПроверитьКорректностьИНН(СтруктураДляПроверкиИНН, ЭтаФорма);
	
	Если СтруктураДляПроверкиИНН.ИННВведенКорректно Тогда
		ПроверитьДублиКонтрагентов(ЭтаФорма);
	КонецЕсли;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

// Процедура - обработчик события Нажатие элемента ПоказатьДубли.
//
&НаКлиенте
Процедура ПоказатьДублиНажатие(Элемент)
	ОбработатьСитуациюВыбораДубля(Элемент);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ОсновнойБанковскийСчет.
//
&НаКлиенте
Процедура ОсновнойБанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекстСообщения = НСтр("ru = 'Элемент справочника еще не записан.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // ОсновнойБанковскийСчетНачалоВыбора()

// Процедура - обработчик события ПриИзменении реквизита НаименованиеПолное
//
&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	ФормироватьНаименованиеПолноеАвтоматически = УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(
		Объект.Наименование,
		Объект.НаименованиеПолное,
		Объект.КодПравовойФормы);
	
КонецПроцедуры // НаименованиеПолноеПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода КодПравовойФормы.
//
&НаКлиенте
Процедура КодПравовойФормыПриИзменении(Элемент)
	СформироватьНаименованиеПолноеАвтоматически();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СтранаРезидентства.
//
&НаКлиенте
Процедура СтранаРезидентстваПриИзменении(Элемент)
	Объект.ПризнакСтраны = ПолучитьПризнакСтраны(Объект.СтранаРезидентства);
	
	СтруктураДляПроверкиИНН.Вставить("ИНН",	 		 Объект.ИНН);
	СтруктураДляПроверкиИНН.Вставить("ПроверитьИНН", ?(Объект.СтранаРезидентства = ПредопределенноеЗначение("Справочник.СтраныМира.Киргизия"), Истина, Ложь));
	
	ПроверитьКорректностьИНН(СтруктураДляПроверкиИНН, ЭтаФорма);
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура СтранаРезидентстваОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.СтранаМираОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтправитьEmailКонтрагенту(Команда)
	
	СписокЭлектронныхАдресов = ПолучитьEMAILКонтрагент(Объект.Ссылка);
	
	Если СписокЭлектронныхАдресов = Неопределено Тогда
		
		СписокЭлектронныхАдресов = Новый СписокЗначений;
		ТекстСообщения = НСтр("ru = 'Контрагент не записан. Список электронных адресов будет пуст.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	ПараметрыОтправки = Новый Структура("Получатель, УдалятьФайлыПослеОтправки", СписокЭлектронныхАдресов, Истина);
	РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
	
КонецПроцедуры // ОтправитьEmailКонтрагенту()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Присваивает соответствующее значение переменной ФормироватьНаименованиеПолноеАвтоматически.
//
//
&НаКлиентеНаСервереБезКонтекста
Функция УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(Наименование, НаименованиеПолное, КодПравовойФормы)
	Возврат (СтрШаблон("%1 ""%2""", КодПравовойФормы, Наименование) = НаименованиеПолное ИЛИ ПустаяСтрока(НаименованиеПолное));
КонецФункции // УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

&НаСервере
// Процедура отражает изменения в форме элемента справочника при изменении реквизита юр/физ лицо 
//
Процедура ОтразитьИзменениеФормыСобственностиОрганизации(ПриСоздании = Ложь)
	
	Если Объект.ЮрФизЛицо = ЮрЛицо 
		И НЕ ПриСоздании 
		И ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		
		Объект.ФизЛицо = Неопределено;
	КонецЕсли;
	
	СтруктураДляПроверкиИНН.Вставить("ИНН",	 		 Объект.ИНН);
	СтруктураДляПроверкиИНН.Вставить("ЭтоЮрЛицо",	 Объект.ЮрФизЛицо = ЮрЛицо);
	СтруктураДляПроверкиИНН.Вставить("ПроверитьИНН", ?(Объект.СтранаРезидентства = Справочники.СтраныМира.Киргизия, Истина, Ложь));
	
	Если Не Объект.ЮрФизЛицо = ЮрЛицо И Не Объект.ЮрФизЛицо = Неопределено Тогда 
		СформироватьСтруктуруПроверкиИННДляФизЛица(СтруктураДляПроверкиИНН);
	КонецЕсли;
	
	ПроверитьКорректностьИНН(СтруктураДляПроверкиИНН, ЭтаФорма);
	
	Если СтруктураДляПроверкиИНН.ИННВведенКорректно Тогда
		ПроверитьДублиКонтрагентов(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры // ОтразитьИзменениеФормыСобственностиОрганизации()

// Процедура управляет информационными надписями о наличии дублей контрагента.
// 
&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьДублиКонтрагентов(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	КоличествоЭлементовДублей = 0;
	
	КоличествоЭлементовДублей = ПолучитьКоличествоДублейСервер(Объект.ИНН, Объект.Ссылка);
	
	ЭтоЮрЛицо = Объект.ЮрФизЛицо = Форма.ЮрЛицо;
	
	Если КоличествоЭлементовДублей > 0 Тогда
		
		СтруктураПараметровСообщенияОДублях = Новый Структура;
		
		Если КоличествоЭлементовДублей = 1 Тогда
			
			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоЭлементовДублей", НСтр("ru = 'один'"));
			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагент'"));
			
		ИначеЕсли КоличествоЭлементовДублей < 5 Тогда
			
			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоЭлементовДублей", КоличествоЭлементовДублей);
			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагента'"));
			
		Иначе
			
			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоЭлементовДублей", КоличествоЭлементовДублей);
			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагентов'"));
			
		КонецЕсли;	
		
		СтруктураПараметровСообщенияОДублях.Вставить("ИНН", НСтр("ru = 'ИНН'"));
		
		ТекстНадписиОДублях = НСтр("ru = 'С таким [ИНН] есть [КоличествоЭлементовДублей] [СклонениеКонтрагентов]'");
		
		Элементы.ПоказатьДубли.Заголовок = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстНадписиОДублях, 
																										   СтруктураПараметровСообщенияОДублях);
		Форма.СтруктураДляПроверкиИНН.ЕстьДубли = Истина;
		
	Иначе
		
		Форма.СтруктураДляПроверкиИНН.ЕстьДубли = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоДублейСервер(Знач ИНН, Знач Ссылка)
	Возврат Справочники.Контрагенты.ПроверитьДублиСправочникаКонтрагентыПоИНН(СокрЛП(ИНН), Ссылка).Количество();
КонецФункции	

// Процедура открытия вспомогательной формы сравнения дублированных контрагентов.
// 
&НаКлиенте
Процедура ОбработатьСитуациюВыбораДубля(Элемент)
		
	ПараметрыПередачи = Новый Структура;
	ПараметрыПередачи.Вставить("ИНН", СокрЛП(Объект.ИНН));
	ПараметрыПередачи.Вставить("ЭтоЮрЛицо", Объект.ЮрФизЛицо = ЮрЛицо);
	ПараметрыПередачи.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	
	ЧтоВыполнитьПослеЗакрытия = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСпискаДублей", ЭтаФорма);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбораДублей", 
				  ПараметрыПередачи, 
				  Элемент,
				  ,
				  ,
				  ,
				  ЧтоВыполнитьПослеЗакрытия,
				  РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыСпискаДублей(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	ПроверитьДублиКонтрагентов(ЭтаФорма);
КонецПроцедуры	

// Процедура управляет информационными надписями о корректности заполнения ИНН.
// 
&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьКорректностьИНН(СтруктураПараметров, Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ВозвращеннаяСтруктура = БухгалтерскийУчетКлиентСервер.ПроверитьКорректностьИНН(СтруктураПараметров);
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ВозвращеннаяСтруктура);
	ЗаполнитьЗначенияСвойств(Форма, ВозвращеннаяСтруктура);
	
КонецПроцедуры

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	Элементы.ПоказатьДубли.Видимость = СтруктураДляПроверкиИНН.ЕстьДубли;
	
	Если Объект.ЮрФизЛицо = ЮрЛицо Тогда 
		Элементы.ФизЛицо.Видимость = Ложь;
		Элементы.КодПравовойФормы.Видимость = Истина;
		Элементы.КодПоОКПО.Видимость = Истина;
	Иначе
		Элементы.ФизЛицо.Видимость = Истина;
		Элементы.КодПравовойФормы.Видимость = Ложь;
		Элементы.КодПоОКПО.Видимость = Ложь;
	КонецЕсли;	
	
	Если Объект.СтранаРезидентства = Справочники.СтраныМира.Киргизия Тогда 
		//Элементы.ГруппаГНС.Видимость = Объект.ЮрФизЛицо = ЮрЛицо;
		Элементы.НадписьПоясненияНекорректногоИНН.Видимость = НЕ СтруктураДляПроверкиИНН.ИННВведенКорректно;	
	Иначе 
		Элементы.ГНС.Видимость = Ложь;	
		Элементы.ГНСКод.Видимость = Ложь;	
		Элементы.НадписьПоясненияНекорректногоИНН.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И ЗначениеЗаполнено(Объект.ВидОсновногоДоговора) Тогда 
		Элементы.ВидОсновногоДоговора.Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры 

&НаСервереБезКонтекста
// По переданной ссылке получает электронные адреса.
//
Функция ПолучитьEMAILКонтрагент(СсылкаНаТекущийЭлемент)
	
	Если СсылкаНаТекущийЭлемент = Справочники.Контрагенты.ПустаяСсылка() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Результат = Новый Массив;
	МассивАдресовПочты = Новый Массив;
	СтруктураПолучателя = Новый Структура("Представление, Адрес", СсылкаНаТекущийЭлемент);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаТекущийЭлемент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Ссылка.Наименование КАК ПредставлениеКонтакта,
	|	КонтрагентыКонтактнаяИнформация.АдресЭП КАК АдресЭП,
	|	1 КАК Порядок
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	ДобавитьЭлектронныйАдресКонтрагента = Истина;
	Пока ВыборкаИзЗапроса.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаИзЗапроса.АдресЭП)
			ИЛИ (ВыборкаИзЗапроса.Порядок = 2 И НЕ ДобавитьЭлектронныйАдресКонтрагента) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если МассивАдресовПочты.Найти(ВыборкаИзЗапроса.АдресЭП) = Неопределено Тогда
			
			МассивАдресовПочты.Добавить(ВыборкаИзЗапроса.АдресЭП);
			ДобавитьЭлектронныйАдресКонтрагента = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПолучателя.Адрес = СтрСоединить(МассивАдресовПочты, "; ");
	Результат.Добавить(СтруктураПолучателя);
	
	Возврат Результат;
	
КонецФункции //ПолучитьEMAILКонтрагент()

&НаСервере
Процедура СформироватьСтруктуруПроверкиИННДляФизЛица(СтруктураДляПроверкиИНН)

	    СтруктураДляПроверкиИНН.Вставить("ДатаРождения", Объект.ФизЛицо.ДатаРождения);

КонецПроцедуры

&НаКлиенте
// Процедура формирует полное наименование.
//
Процедура СформироватьНаименованиеПолноеАвтоматически()

	Если НЕ ФормироватьНаименованиеПолноеАвтоматически Тогда 
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.КодПравовойФормы) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	Иначе
		Объект.НаименованиеПолное = СтрШаблон("%1 ""%2""", Объект.КодПравовойФормы, Объект.Наименование);
	КонецЕсли;

КонецПроцедуры // СформироватьНаименованиеПолноеАвтоматически()

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
    УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

// Функция - Получить признак страны
// 
// Возвращаемое значение:
//  Перечисление.ПризнакиСтраны - 
//
&НаСервереБезКонтекста
Функция ПолучитьПризнакСтраны(Страна)
	
	Если НЕ ЗначениеЗаполнено(Страна) Тогда 
		Возврат Перечисления.ПризнакиСтраны.ПустаяСсылка();
	КонецЕсли;	
	
	Если Страна = Справочники.СтраныМира.Киргизия Тогда
		Возврат Перечисления.ПризнакиСтраны.КР;
	ИначеЕсли Страна.УчастникЕАЭС Тогда 
		Возврат Перечисления.ПризнакиСтраны.ЕАЭС;
	Иначе 
		Возврат Перечисления.ПризнакиСтраны.ИмпортЭкспорт;
	КонецЕсли;	
	
КонецФункции

// Процедура - Установить пиктограмму комментария.
//
&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.ГруппаДополнительнаяИнформация, Объект.Комментарий);
КонецПроцедуры

// Определяет вид основного договора по типу документа.
//
// Параметры:
//  ДокументВладелец	 - ДокументСсылка	 - Ссылка на документ, из которого создается новый контрагент.
//  ВидОперацииВладелец	 - Перечисление.ВидОперации	 - Вид операции документа, из которого создается новый контрагент.
//
&НаСервере
Процедура ЗаполнитьВидОсновногоДоговора(ДокументВладелец, ВидОперацииВладелец)

	Если НЕ ВидОперацииВладелец = Неопределено
		И (ТипЗнч(ДокументВладелец) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее")
		Или ТипЗнч(ДокументВладелец) = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
		Или ТипЗнч(ДокументВладелец) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
		Или ТипЗнч(ДокументВладелец) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")) Тогда 

		Если ВидОперацииВладелец = Перечисления.ВидыОперацийПКО.ОплатаОтПокупателя
			Или ВидОперацииВладелец = Перечисления.ВидыОперацийППВ.ОплатаОтПокупателя
			Или ВидОперацииВладелец = Перечисления.ВидыОперацийРКО.ВозвратПокупателю
			Или ВидОперацииВладелец = Перечисления.ВидыОперацийППИ.ВозвратПокупателю Тогда 
			
			Объект.ВидОсновногоДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		Иначе 
			Объект.ВидОсновногоДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
		КонецЕсли;	
	
	ИначеЕсли ТипЗнч(ДокументВладелец) = Тип("ДокументСсылка.АвансовыйОтчет") 
		Или ТипЗнч(ДокументВладелец) = Тип("ДокументСсылка.ПоступлениеБланковСчетовФактур")
		Или ТипЗнч(ДокументВладелец) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		Или ТипЗнч(ДокументВладелец) = Тип("ДокументСсылка.ГТДПоИмпорту")
		Или ТипЗнч(ДокументВладелец) = Тип("ДокументСсылка.Доверенность")
		Или ТипЗнч(ДокументВладелец) = Тип("ДокументСсылка.ДополнительныеРасходы")
		Или ТипЗнч(ДокументВладелец) = Тип("ДокументСсылка.ОтчетВзаимнойОТорговлеЕАЭС")
		Или ТипЗнч(ДокументВладелец) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров")
		Или ТипЗнч(ДокументВладелец) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее")
		Или ТипЗнч(ДокументВладелец) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		Или ТипЗнч(ДокументВладелец) = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
		Или ТипЗнч(ДокументВладелец) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")
		Или ТипЗнч(ДокументВладелец) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда 
		
		Объект.ВидОсновногоДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
		
	ИначеЕсли ТипЗнч(ДокументВладелец) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		Или ТипЗнч(ДокументВладелец) = Тип("ДокументСсылка.ЗаказНаПроизводство")
		Или ТипЗнч(ДокументВладелец) = Тип("ДокументСсылка.ОтчетПоПроизводству")
		Или ТипЗнч(ДокументВладелец) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
		Или ТипЗнч(ДокументВладелец) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		Или ТипЗнч(ДокументВладелец) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипЗнч(ДокументВладелец) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")
		Или ТипЗнч(ДокументВладелец) = Тип("ДокументСсылка.СчетФактураВыписанный") Тогда
		
		Объект.ВидОсновногоДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		
	КонецЕсли;	

КонецПроцедуры // ЗаполнитьВидОсновногоДоговора()

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыОткрытия = Новый Структура("Страна", Объект.СтранаРезидентства);
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка, ПараметрыОткрытия);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	ПараметрыОткрытия = Новый Структура("Страна", Объект.СтранаРезидентства);
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка, ПараметрыОткрытия);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_РедактироватьСоставСвойств()

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

