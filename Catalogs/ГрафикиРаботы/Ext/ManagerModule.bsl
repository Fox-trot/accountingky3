#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура - Заполнить по умолчанию
// Выполняет первоночальное заполнение
Процедура ЗаполнитьПоУмолчанию() Экспорт 
	СправочникМенеджер = Справочники.ГрафикиРаботы;
	
	КлассификаторXML = СправочникМенеджер.ПолучитьМакет("МакетЗаполнения").ПолучитьТекст();
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;     
	
	НомерТекущегоГода = Год(ТекущаяДатаСеанса());

	Для Каждого СтрокаТаблицыЗначений Из КлассификаторТаблица Цикл
		Наименование = СтрокаТаблицыЗначений.Наименование;
		УчитыватьПраздники = ?(ВРег(СтрокаТаблицыЗначений.УчитыватьПраздники) = "ДА", Истина, Ложь);
		НормаЧасовЗаполнения = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаТаблицыЗначений.НормаЧасовЗаполнения);
		ПериодВДняхЗаполения = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаТаблицыЗначений.ПериодВДняхЗаполения);
		
		СправочникСсылка = СправочникМенеджер.НайтиПоНаименованию(Наименование, Истина);
		
		Если СправочникСсылка.Пустая() Тогда
			СправочникСсылка = СправочникМенеджер.ПолучитьСсылку();			
			СправочникОбъект = СправочникМенеджер.СоздатьЭлемент();
			СправочникОбъект.УстановитьСсылкуНового(СправочникСсылка);
		Иначе
			СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		КонецЕсли;	
		
		СправочникОбъект.Наименование = Наименование;
		
		БухгалтерскийУчетКлиентСервер.ЗаписатьСправочникОбъект(СправочникОбъект,,,,Истина);
		
		// Заполнение периодичности.
		ТаблицаПериодичность = Новый ТаблицаЗначений;
		ТаблицаПериодичность.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
		ТаблицаПериодичность.Колонки.Добавить("Часы", Новый ОписаниеТипов("Число"));
		ТаблицаПериодичность.Колонки.Добавить("ВидДня", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДнейПроизводственногоКалендаря"));
		
		ДеньНачалоЗаполнения = Дата(НомерТекущегоГода, 1 , 1);
		ДеньОкончаниеЗаполнения	= ДеньНачалоЗаполнения + ПериодВДняхЗаполения * 86400;
		
		Пока ДеньНачалоЗаполнения < ДеньОкончаниеЗаполнения Цикл
			СтрокаТабличнойЧасти = ТаблицаПериодичность.Добавить();
			СтрокаТабличнойЧасти.Дата = ДеньНачалоЗаполнения; 
			СтрокаТабличнойЧасти.ВидДня = ОпределитьТипДеняНедели(СтрокаТабличнойЧасти.Дата);	
			СтрокаТабличнойЧасти.Часы = ?(СтрокаТабличнойЧасти.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий, НормаЧасовЗаполнения, 0);
			
			ДеньНачалоЗаполнения = ДеньНачалоЗаполнения + 86400;
		КонецЦикла;
		
		ЗаполнитьПериодичностьКалендаря(ТаблицаПериодичность, СправочникСсылка, НомерТекущегоГода);
		ЗаполнитьДанныеПроизводственногоКалендаря(ТаблицаПериодичность, СправочникСсылка, НомерТекущегоГода, УчитыватьПраздники);
		

	КонецЦикла;
КонецПроцедуры // ЗаполнитьПоУмолчанию()	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция составляет список всевозможных видов дней производственного календаря 
// по метаданным перечисления ВидыДнейПроизводственногоКалендаря.
//
// Возвращаемое значение
//	СписокВидовДня - список значений, содержащий значение перечисления 
//  					и его синоним в качестве представления.
//
Функция СписокВидовДня() Экспорт
	
	СписокВидовДня = Новый СписокЗначений;
	
	Для Каждого МетаданныеВидаДней Из Метаданные.Перечисления.ВидыДнейПроизводственногоКалендаря.ЗначенияПеречисления Цикл
		СписокВидовДня.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря[МетаданныеВидаДней.Имя], МетаданныеВидаДней.Синоним);
	КонецЦикла;
	
	Возврат СписокВидовДня;
	
КонецФункции

// Процедура - Заполнить периодичность календаря
//
// Параметры:
//  ТаблицаПериодичность - ТаблицаЗначений	 - таблица, по данным которой будет заполнен регистр сведений Периодичность календаря.
//  	*Дата - Дата
//  	*Часы - Число - количество часов в день
//  	*ВидДня - ПеречислениеСсылка.ВидыДнейПроизводственногоКалендаря
//  ГрафикРаботы		 - СправочникСсылка.ГрафикиРаботы - 
//  НомерГода			 - Число - 
//
Процедура ЗаполнитьПериодичностьКалендаря(ТаблицаПериодичность, ГрафикРаботы, НомерГода) Экспорт

	// Предварительная очистка.
	НаборЗаписей = РегистрыСведений.ПериодичностьКалендаря.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ГрафикРаботы.Установить(ГрафикРаботы);
	НаборЗаписей.Отбор.Год.Установить(НомерГода);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();

	Для Каждого СтрокаТабличнойЧасти Из ТаблицаПериодичность Цикл
		Запись = НаборЗаписей.Добавить();
		Запись.ГрафикРаботы = ГрафикРаботы;
		Запись.Год = НомерГода;
		Запись.Дата = СтрокаТабличнойЧасти.Дата;    
		Запись.ВидДня = СтрокаТабличнойЧасти.ВидДня;    
		Запись.Часы = СтрокаТабличнойЧасти.Часы;    
	КонецЦикла;	
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры 

// Процедура - Заполнить данные производственного календаря
//
// Параметры:
//  ТаблицаПериодичность - ТаблицаЗначений	 - таблица, по данным которой будет заполнен регистр сведений Данные производственного календаря.
//  	*Дата - Дата
//  	*Часы - Число - количество часов в день
//  	*ВидДня - ПеречислениеСсылка.ВидыДнейПроизводственногоКалендаря
//  ГрафикРаботы		 - СправочникСсылка.ГрафикиРаботы - 
//  НомерГода			 - Число - 
//  УчитыватьПраздники	 - Булево	 - 
//
Процедура ЗаполнитьДанныеПроизводственногоКалендаря(ТаблицаПериодичность, ГрафикРаботы, НомерГода, УчитыватьПраздники) Экспорт 
	
	// набор записей
	НаборЗаписей = РегистрыСведений.ДанныеПроизводственногоКалендаря.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ГрафикРаботы.Установить(ГрафикРаботы);
	НаборЗаписей.Отбор.Год.Установить(НомерГода);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();

	// учет праздничных дней
	МассивПраздничныхДней = Новый Массив;
	МассивПредПраздничныхДней = Новый Массив;
	
	Если УчитыватьПраздники Тогда
		МассивПраздничныхДней.Добавить("0101"); //, "Новый год");
		МассивПраздничныхДней.Добавить("0107"); //, "Православное Рождество");
		МассивПраздничныхДней.Добавить("0223"); //, "День защитника  Отечества");
		МассивПраздничныхДней.Добавить("0308"); //, "Международный женский день");
		МассивПраздничныхДней.Добавить("0321"); //, "Народный праздник Нооруз");
		МассивПраздничныхДней.Добавить("0407"); //, "День народной апрельской революции");
		МассивПраздничныхДней.Добавить("0501"); //, "День международной солидарности");
		МассивПраздничныхДней.Добавить("0505"); //, "День Конституции");  
		МассивПраздничныхДней.Добавить("0509"); //, "День Победы");
		МассивПраздничныхДней.Добавить("0831"); //, "День Государственной независимости Кыргызской Республики");
		МассивПраздничныхДней.Добавить("1107"); //, "День истории и памяти предков");
		МассивПраздничныхДней.Добавить("1108"); //, "День истории и памяти предков");
		
		МассивПредПраздничныхДней.Добавить("1231");
		МассивПредПраздничныхДней.Добавить("0106");
		МассивПредПраздничныхДней.Добавить("0222");
		МассивПредПраздничныхДней.Добавить("0307");
		МассивПредПраздничныхДней.Добавить("0320");
		МассивПредПраздничныхДней.Добавить("0307");
		МассивПредПраздничныхДней.Добавить("0430");
		МассивПредПраздничныхДней.Добавить("0504");  
		МассивПредПраздничныхДней.Добавить("0508");
		МассивПредПраздничныхДней.Добавить("0830");
		МассивПредПраздничныхДней.Добавить("1106");
	КонецЕсли;	
	
	// заполнение данных производственного календаря
	ТекущаяДата 			= Дата(НомерГода,1,1);
	ДатаОкончанияИнтервала 	= Дата(НомерГода,12,31);
	
	ВидДняРабочий = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий;
	ВидДняПраздник = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник;
	ВидДняПредпраздничный = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный;
	
	Пока ТекущаяДата <= ДатаОкончанияИнтервала Цикл
		Для Каждого СтрокаТабличнойЧасти Из ТаблицаПериодичность Цикл
			Если ТекущаяДата > ДатаОкончанияИнтервала Тогда 
				Прервать;
			КонецЕсли;	
				
			// определение праздничного дня
			ПраздничныйДень = МассивПраздничныхДней.Найти(Формат(ТекущаяДата, "ДФ=MMdd"));
			ПредПраздничныйДень = МассивПредПраздничныхДней.Найти(Формат(ТекущаяДата, "ДФ=MMdd"));
			
			Запись = НаборЗаписей.Добавить();
			Запись.ГрафикРаботы = ГрафикРаботы;
			Запись.Год = НомерГода;
			Запись.Дата = ТекущаяДата;    
			
			Запись.ЗначениеДней = ?(ПраздничныйДень = Неопределено И СтрокаТабличнойЧасти.ВидДня = ВидДняРабочий, 1, 0);
			Запись.ЗначениеЧасов = ?(ПраздничныйДень = Неопределено И СтрокаТабличнойЧасти.ВидДня = ВидДняРабочий, СтрокаТабличнойЧасти.Часы, 0); 
			Запись.ВидДня = ?(ПраздничныйДень = Неопределено И ПредПраздничныйДень = Неопределено, СтрокаТабличнойЧасти.ВидДня, 
							?(ПраздничныйДень = Неопределено, ВидДняПредпраздничный, ВидДняПраздник)); 
			
			ТекущаяДата = ТекущаяДата + 86400;
		КонецЦикла;	
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры 

// Функция возвращает вид дня недели по его номеру
//
// Параметры:
//  Дата - Дата	- дата для получения вида дня
// Возвращаемое значение:
//  Перечисление.ВидыДнейПроизводственногоКалендаря - вид дня
//    
Функция ОпределитьТипДеняНедели(Дата) 
	
	НомерДняНедели = ДеньНедели(Дата);
	
	Если НомерДняНедели = 7 Тогда
		ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье;
	ИначеЕсли НомерДняНедели = 6 Тогда
		ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота;
	Иначе
		ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий;
	КонецЕсли;
	
	Возврат	ВидДня;
КонецФункции

#КонецОбласти

#КонецЕсли