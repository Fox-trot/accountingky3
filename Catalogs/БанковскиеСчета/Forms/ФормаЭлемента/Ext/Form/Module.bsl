#Область ОписаниеПеременных

&НаКлиенте
Перем УстановитьОсновнойБанковскийСчет; // Признак установки основного банковского счета из формы контрагента/организации

&НаКлиенте
Перем УстановкаОсновногоСчетаВыполнена; // Признак успешной установки основного банковского счета из формы контрагента/организации

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	// Заполним БИК и кор.счет банка.
	ЗаполнитьБИКиКоррСчет(Объект.Банк, БИКБанка, КоррСчетБанка);
	
	ЗаполнитьСписокВариантовПредставленийСчетаСервер();
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// БиблиотекаЭлектронныхДокументов.ОбменСБанками
	ОбновитьРеквизитыБанкаНаФорме(ЭтотОбъект, Объект.Банк);
	ОбновитьЗаголовоки(ЭтотОбъект);
	// Конец БиблиотекаЭлектронныхДокументов.ОбменСБанками
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьОсновнойБанковскийСчет = Ложь;

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ОбработкаОповещения.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УстановкаОсновногоСчетаВыполнена" Тогда
		УстановкаОсновногоСчетаВыполнена = Истина;
	КонецЕсли;	
	
	// БиблиотекаЭлектронныхДокументов.ОбменСБанками
	Если ИмяСобытия = "ИзмененаНастройкаОбмена" Тогда
		ОбновитьЗаголовокНастройкиОбменаСБанком(Элементы.НастройкаОбмена,
			Объект.Владелец, Объект.Банк);
	КонецЕсли;
	// Конец БиблиотекаЭлектронныхДокументов.ОбменСБанками
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью формы.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Заполним текст корреспондента.
	Если РедактироватьТекстКорреспондента Тогда
		Объект.ТекстКорреспондента = ТекстКорреспондента;
	Иначе
		Объект.ТекстКорреспондента = "";
	КонецЕсли;
	   
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ПередЗакрытием.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	// Назначение банковского счета основным.
	Если УстановитьОсновнойБанковскийСчет Тогда 
		Отказ = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросУстановитьОсновнойБанковскийСчет", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Использовать данный банковский счет как основной для подстановки в документы?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	УстановитьОсновнойБанковскийСчет = Ложь;
	
	// Назначение банковского счета основным.
	Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда 
		// Проверка основного банковского счета
		ОсновнойБанковскийСчет = ОсновнойБанковскийСчетКонтрагента(Объект.Владелец);
		Если ЗначениеЗаполнено(ОсновнойБанковскийСчет) Тогда 
			Возврат;
		КонецЕсли;
		
		УстановитьОсновнойБанковскийСчет = Истина;
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// БиблиотекаЭлектронныхДокументов.ОбменСБанками
&НаКлиенте
Процедура НастройкаОбменаНажатие(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность
		Или Объект.РежимОбменаСБанком <> 1 Тогда
		
		Если ПроверитьЗаполнение() Тогда
			Объект.РежимОбменаСБанком = 1;
			РежимОбменаПриИзменении();
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПослеСозданияНастройкиОбмена", ЭтотОбъект);
	ОбменСБанкамиКлиент.ОткрытьСоздатьНастройкуОбмена(Объект.Владелец, Объект.Банк, Объект.НомерСчета, Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияНастройкиОбмена(НастройкаОбмена, Параметры) Экспорт
	
	ОбновитьЗаголовокНастройкиОбменаСБанком(Элементы.НастройкаОбмена, Объект.Владелец, Объект.Банк);
	
КонецПроцедуры

// Конец БиблиотекаЭлектронныхДокументов.ОбменСБанками

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля Владелец.
//
&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля БИКБанка.
//
&НаКлиенте
Процедура БИКБанкаПриИзменении(Элемент)
	
	Объект.Наименование = Лев(СокрЛп(Объект.НомерСчета) + ?(ЗначениеЗаполнено(Объект.Банк), ", в " + Строка(Объект.Банк), ""), 100);
	
	ЗаполнитьСписокВариантовПредставленийСчета();
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля БИКБанка.
//
&НаКлиенте
Процедура БИКБанкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьФормуВыбораБанка(Истина);
	
КонецПроцедуры // БИКБанкаНачалоВыбора()

// Процедура - обработчик события ОбработкаВыбора поля БИКБанка.
//
&НаКлиенте
Процедура БИКБанкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗаполнитьБИКиКоррСчет(ВыбранноеЗначение, БИКБанка, КоррСчетБанка);
	Объект.Банк = ВыбранноеЗначение;
	Объект.Наименование = Лев(СокрЛп(Объект.НомерСчета) + ?(ЗначениеЗаполнено(Объект.Банк), ", в " + Строка(Объект.Банк), ""), 100);
	
	Если ПустаяСтрока(БИКБанка) Тогда
		
		ЭтаФорма.ТекущийЭлемент = Элементы.БИКБанка;
		
	КонецЕсли;
	
	ЗаполнитьСписокВариантовПредставленийСчета();
	
КонецПроцедуры // БИКБанкаОбработкаВыбора()

// Процедура - обработчик события ОкончаниеВводаТекста поля БИКБанка.
//
&НаКлиенте
Процедура БИКБанкаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	#Если ВебКлиент Тогда
		
		Если СтрДлина(Текст) > 9 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Введенное значение превышает допустимую длину БИК 9 символов!'");
			Сообщение.Сообщить();
			
			СтандартнаяОбработка = Ложь;
			
			Возврат;
			
		КонецЕсли;
		
	#КонецЕсли
	
	СписокНайденныхБанков = НайтиБанки(Текст, Элемент.Имя, Объект.ВалютаДенежныхСредств <> ВалютаРегламентированногоУчета);
	Если ТипЗнч(СписокНайденныхБанков) = Тип("СписокЗначений") Тогда
		
		Если СписокНайденныхБанков.Количество() = 1 Тогда
			
			ОповеститьОбИзменении(Тип("СправочникСсылка.Банки"));
			
			Объект.Банк = СписокНайденныхБанков[0].Значение;
			ЗаполнитьБИКиКоррСчет(Объект.Банк,  БИКБанка, КоррСчетБанка);
			
		ИначеЕсли СписокНайденныхБанков.Количество() > 1 Тогда
			
			ОповеститьОбИзменении(Тип("СправочникСсылка.Банки"));
			
			ОткрытьФормуВыбораБанка(Истина, СписокНайденныхБанков);
			
		Иначе
			
			ОткрытьФормуВыбораБанка(Истина);
			
		КонецЕсли;
		
	Иначе
		
		ЭтаФорма.ТекущийЭлемент = Элемент;
		
	КонецЕсли;
	
КонецПроцедуры // БИКБанкаОкончаниеВводаТекста()

// Процедура - обработчик события ОкончаниеВводаТекста поля КоррСчетБанка.
//
&НаКлиенте
Процедура КоррСчетБанкаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокНайденныхБанков = НайтиБанки(СокрЛП(Текст), Элемент.Имя, Объект.ВалютаДенежныхСредств <> ВалютаРегламентированногоУчета);
	Если ТипЗнч(СписокНайденныхБанков) = Тип("СписокЗначений") Тогда
		
		Если СписокНайденныхБанков.Количество() = 1 Тогда
			
			ОповеститьОбИзменении(Тип("СправочникСсылка.Банки"));
			
			Объект.Банк = СписокНайденныхБанков[0].Значение;
			ЗаполнитьБИКиКоррСчет(Объект.Банк,  БИКБанка, КоррСчетБанка);
			
		ИначеЕсли СписокНайденныхБанков.Количество() > 1 Тогда
			
			ОповеститьОбИзменении(Тип("СправочникСсылка.Банки"));
			
			ОткрытьФормуВыбораБанка(Истина, СписокНайденныхБанков);
			
		Иначе
			
			ОткрытьФормуВыбораБанка(Истина);
			
		КонецЕсли;
		
	Иначе
		
		ЭтаФорма.ТекущийЭлемент = Элемент;
		
	КонецЕсли;
	
КонецПроцедуры // КоррСчетБанкаОкончаниеВводаТекста()

// Процедура - обработчик события ОбработкаВыбора поля БИКБанкаРасчетов.
//
&НаКлиенте
Процедура КоррСчетБанкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗаполнитьБИКиКоррСчет(ВыбранноеЗначение, БИКБанка, КоррСчетБанка);
	Объект.Банк = ВыбранноеЗначение;
	Объект.Наименование = Лев(СокрЛп(Объект.НомерСчета) + ?(ЗначениеЗаполнено(Объект.Банк), ", в " + Строка(Объект.Банк), ""), 100);
	
КонецПроцедуры // БИКБанкаОбработкаВыбора()

// Процедура - обработчик события ПриИзменении флажка РедактироватьТекстПлательщика.
//
&НаКлиенте
Процедура РедактироватьТекстПлательщикаПриИзменении(Элемент)
	
	Элементы.ТекстПлательщика.Доступность = РедактироватьТекстКорреспондента;
	
	Если НЕ РедактироватьТекстКорреспондента Тогда
		ЗаполнитьТекстКорреспондента();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флажка РедактироватьТекстПолучателя.
//
&НаКлиенте
Процедура РедактироватьТекстПолучателяПриИзменении(Элемент)
	
	Элементы.ТекстПолучателя.Доступность = РедактироватьТекстКорреспондента;
	
	Если НЕ РедактироватьТекстКорреспондента Тогда
		ЗаполнитьТекстКорреспондента();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля НомерСчета.
//
&НаКлиенте
Процедура НомерСчетаПриИзменении(Элемент)
	
	Объект.Наименование = Лев(СокрЛп(Объект.НомерСчета) + ?(ЗначениеЗаполнено(Объект.Банк), ", в " + Строка(Объект.Банк), ""), 100);
	
	ЗаполнитьСписокВариантовПредставленийСчета();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ВалютаДенежныхСредств.
//
&НаКлиенте
Процедура ВалютаДенежныхСредствПриИзменении(Элемент)
	
	ЗаполнитьСписокВариантовПредставленийСчета();
	
КонецПроцедуры

// Процедура - обработчик события ОкончаниеВводаТекста поля НомерСчета.
//
&НаКлиенте
Процедура НомерСчетаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	#Если ВебКлиент Тогда
		
		Если СтрДлина(Текст) > 20 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Введенное значение превышает допустимую длину номера счета 20 символов!'");
			Сообщение.Сообщить();
			
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

// БиблиотекаЭлектронныхДокументов.ОбменСБанками
&НаКлиенте
Процедура РежимОбменаОтключенПриИзменении(Элемент)
	РежимОбменаПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура РежимОбменаПрямойОбменПриИзменении(Элемент)
	РежимОбменаПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура РежимОбменаКлиентБанкаПриИзменении(Элемент)
	РежимОбменаПриИзменении();
КонецПроцедуры
// Конец БиблиотекаЭлектронныхДокументов.ОбменСБанками

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
// Процедура-обработчик результата вопроса о подборе банка из классификатора.
//
Процедура ОпределитьНеобходимостьВыбораБанкаИзСправочника(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = "Выбрать" Тогда
		
		ОткрытьФормуВыбораБанка(ДополнительныеПараметры.ЭтоБанк);
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНеобходимостьПодбораБанкаИзКлассификатора()

// Процедура-обработчик результата вопроса об установке основного банковского счета.
//
&НаКлиенте
Процедура ОтветНаВопросУстановитьОсновнойБанковскийСчет(РезультатВопроса, ДополнительныеПараметры) Экспорт	
	УстановитьОсновнойБанковскийСчет = Ложь;

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		//УстановитьОсновнойБанковсчийСчетКонтрагента(Объект.Владелец, Объект.Ссылка);		
		//Оповестить("ИзмененОсновнойБанковскийСчет");
		
		НовыйОсновнойСчет = Объект.Ссылка;
	
		// Если открыта форма контрагента/организации, то изменение основного счета выполняем в ней.
		УстановкаОсновногоСчетаВыполнена = Ложь;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Владелец", Объект.Владелец);
		СтруктураПараметров.Вставить("НовыйОсновнойСчет", НовыйОсновнойСчет);
		
		Оповестить("УстановкаОсновногоСчета", СтруктураПараметров, ЭтотОбъект);
		
		// Если форма контрагента/организации закрыта, то запишем основной счет контрагента/организации самостоятельно.
		Если Не УстановкаОсновногоСчетаВыполнена Тогда
			ЗаписатьОсновнойСчет(СтруктураПараметров);
		КонецЕсли;
	КонецЕсли;
	
	ЭтаФорма.Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	Элементы.Владелец.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Владелец);
	
	РедактироватьТекстКорреспондента = ЗначениеЗаполнено(Объект.ТекстКорреспондента);
	Элементы.ТекстПлательщика.Доступность = РедактироватьТекстКорреспондента;
	Элементы.ТекстПолучателя.Доступность = РедактироватьТекстКорреспондента;
	
	ВладелецОрганизация = ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Организации");
	Элементы.ГруппаРеквизитыСчетаОрганизации.Видимость 	= ВладелецОрганизация;
	Элементы.СуммаКомиссияБанка.Видимость = ВладелецОрганизация;
	Элементы.ГруппаРеквизитыСчетаКонтрагента.Видимость 	= НЕ ВладелецОрганизация;
	Элементы.ГруппаВидСчета.Видимость = ВладелецОрганизация; 
	Элементы.СтраницаНастройкаПечати.Видимость = ВладелецОрганизация;
	
	Если РедактироватьТекстКорреспондента Тогда
		ТекстКорреспондента = Объект.ТекстКорреспондента;
	Иначе
		ЗаполнитьТекстКорреспондента();
	КонецЕсли;
КонецПроцедуры 

// Процедура заполняет значения полей БИК и КоррСчет.
//
&НаСервереБезКонтекста
Процедура ЗаполнитьБИКиКоррСчет(Банк, Бик, КоррСчет)
	
	Если НЕ ЗначениеЗаполнено(Банк) Тогда
		Возврат;
	КонецЕсли;
	
	Бик = Банк.Код;
	КоррСчет = Банк.КоррСчет;
	
КонецПроцедуры // ЗаполнитьБИКиКоррСчет()

// Процедура заполняет значения поля ТекстКорреспондента.
//
&НаСервере
Процедура ЗаполнитьТекстКорреспондента()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Владелец);
		
	Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Организации") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.НаименованиеПолное КАК НаименованиеПолное
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Ссылка";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Контрагенты.НаименованиеПолное
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Ссылка";
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ТекстКорреспондента = СокрЛП(Выборка.НаименованиеПолное);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТекстКорреспондента()

// Процедура открывает форму списка банков для ручного выбора
//
&НаКлиенте
Процедура ОткрытьФормуВыбораБанка(ЭтоБанк, СписокНайденныхБанков = Неопределено)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяСтрока", ?(ЭтоБанк, Объект.Банк, Объект.БанкРасчетов));
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("МножественныхВыбор", Ложь);
	
	Если СписокНайденныхБанков <> Неопределено Тогда
		
		ПараметрыФормы.Вставить("СписокНайденныхБанков", СписокНайденныхБанков);
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Банки.ФормаВыбора", ПараметрыФормы, ?(ЭтоБанк, Элементы.БИКБанка, Элементы.БИКБанкаДляРасчетов));
	
КонецПроцедуры // ОткрытьФормуВыбораБанка()

&НаСервереБезКонтекста
Функция ПолучитьСписокБанковПоРеквизитам(Знач Поле, Знач Значение) Экспорт

	СписокБанков = Новый СписокЗначений;
	
	Если ПустаяСтрока(Значение) Тогда
	
		Возврат СписокБанков;
		
	КонецЕсли;
	
	ТаблицаБанков = Справочники.Банки.ПолучитьТаблицуБанковПоРеквизитам(Поле, Значение);
	
	СписокБанков.ЗагрузитьЗначения(ТаблицаБанков.ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокБанков;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьКорректностьНомераСчета(Номер, ВалютныйСчет = Ложь, ТекстОшибки = "")

	Результат = Истина;
	
	Если ПустаяСтрока(Номер) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекстОшибки = "";
	Если НЕ ВалютныйСчет И СтрДлина(Номер) <> 20 Тогда
		
		ТекстОшибки = НСтр("ru = 'Возможно номер счета указан не полностью'");
		Результат = Ложь;
		
	ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Номер) Тогда
		
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", " ") +
			НСтр("ru = 'В номере банковского счета присутствуют не только цифры.
				|Возможно, номер указан неверно'");
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьКорректностьБИК(БИК, ТекстОшибки = "")
	
	Если ПустаяСтрока(БИК) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ТекстОшибки = "";
	Если СтрДлина(БИК) <> 9 Тогда
		
		ТекстОшибки = НСтр("ru = 'По указанному БИК банк не найден. Возможно БИК указан не полностью.'");
		
	ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(БИК) Тогда
		
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", " ") +
			НСтр("ru = 'В составе БИК банка должны быть только цифры'");
		
	ИначеЕсли НЕ Лев(БИК, 2) = "04" Тогда
		
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", " ") +
			НСтр("ru = 'Первые 2 цифры БИК банка должны быть ""04""'");
		
	КонецЕсли;
	
	Возврат ПустаяСтрока(ТекстОшибки);
	
КонецФункции

// Функция возвращает список значений с банком/банками подходящих условию поиска
// 
// В случае неудачи возвращает Неопределено или пустой список значений.
//
&НаКлиенте
Функция НайтиБанки(ТекстДляПоиска, Поле, Валютный = Ложь)
	
	Перем ТекстОшибки;
	
	ЭтоБанк = (Поле = "БИКБанка") ИЛИ (Поле = "КоррСчетБанка");
	ОчититьЗначенияВСвязаныхПоляхФормы(ЭтоБанк);
	
	Если ПустаяСтрока(ТекстДляПоиска) Тогда
		
		ОчиститьСообщения();
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Поле ""%1"" заполнено не корректно.'"), 
			?(Найти(Поле, "БИК") > 0, "БИК", "Корр. счет"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если Найти(Поле, "БИК") = 1 Тогда
		
		ОбластьПоиска = "Код";
		
	ИначеЕсли Найти(Поле, "КоррСчет") = 1 Тогда
		
		ОбластьПоиска = "КоррСчет";
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	СписокНайденныхБанков = ПолучитьСписокБанковПоРеквизитам(ОбластьПоиска, ТекстДляПоиска);
	Если СписокНайденныхБанков.Количество() = 0 Тогда
		
		Если ОбластьПоиска = "Код" Тогда
			
			Если НЕ ПроверитьКорректностьБИК(ТекстДляПоиска, ТекстОшибки) Тогда
				
				ОчиститьСообщения();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, Поле);
				Возврат Неопределено;
				
			КонецЕсли;
			
			ТекстВопроса = СтрШаблон(
				НСтр("ru = 'Банк с БИК ""%1"" не найден в справочнике банков'"), ТекстДляПоиска);
			
		ИначеЕсли ОбластьПоиска = "КоррСчет" Тогда
			
			Если НЕ ПроверитьКорректностьНомераСчета(ТекстДляПоиска, Валютный, ТекстОшибки) Тогда
				ОчиститьСообщения();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, Поле);
				Возврат Неопределено;
			КонецЕсли;
			
			ТекстВопроса = СтрШаблон(
				НСтр("ru = 'Банк с корр. счетом ""%1"" не найден в справочнике банков'"), ТекстДляПоиска);
			
		КонецЕсли;
		
		// Сформируем варианты
		Кнопки	= Новый СписокЗначений;
		Кнопки.Добавить("Выбрать",     НСтр("ru = 'Выбрать из справочника'"));
		Кнопки.Добавить("Отменить",   НСтр("ru = 'Отменить ввод'"));
		
		// Обработка выбора
		ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьВыбораБанкаИзСправочника", ЭтотОбъект, Новый Структура("ЭтоБанк", ЭтоБанк));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,, "Выбрать", НСтр("ru = 'Банк не найден'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СписокНайденныхБанков;
	
КонецФункции // НайтиБанки()

// Функция формирует наименование банковского счета.
//
&НаКлиенте
Процедура ЗаполнитьСписокВариантовПредставленийСчета()
	
	Элементы.Наименование.СписокВыбора.Очистить();
	
	СтрокаНаименования = СокрЛп(Объект.НомерСчета) + ?(ЗначениеЗаполнено(Объект.Банк), ", в " + Строка(Объект.Банк), "");
	СтрокаНаименования = Лев(СтрокаНаименования, 100);
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	СтрокаНаименования = ?(ЗначениеЗаполнено(Объект.Банк), Строка(Объект.Банк), "") + " (" + Строка(Объект.ВалютаДенежныхСредств) + ")";
	СтрокаНаименования = Лев(СтрокаНаименования, 100);
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
КонецПроцедуры // ЗаполнитьСписокВариантовПредставленийСчета()

// Функция формирует наименование банковского счета.
//
&НаСервере
Процедура ЗаполнитьСписокВариантовПредставленийСчетаСервер()
	
	Элементы.Наименование.СписокВыбора.Очистить();
	
	СтрокаНаименования = СокрЛп(Объект.НомерСчета) + ?(ЗначениеЗаполнено(Объект.Банк), ", в " + Строка(Объект.Банк), "");
	СтрокаНаименования = Лев(СтрокаНаименования, 100);
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	СтрокаНаименования = ?(ЗначениеЗаполнено(Объект.Банк), Строка(Объект.Банк), "") + " (" + Строка(Объект.ВалютаДенежныхСредств) + ")";
	СтрокаНаименования = Лев(СтрокаНаименования, 100);
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
КонецПроцедуры // ЗаполнитьСписокВариантовПредставленийСчетаСервер()

// Процедура очищает значения полей в связанных полях формы
//
// Актуальна для случая, когда пользователь откроет форму выбора и откажеться от выбора значения.
//
&НаКлиенте
Процедура ОчититьЗначенияВСвязаныхПоляхФормы(ЭтоБанк)
	
	Если ЭтоБанк Тогда
		
		Объект.Банк = Неопределено;
		БИКБанка = "";
		КоррСчетБанка = "";
		
	Иначе
		
		Объект.БанкРасчетов = Неопределено;
		БИКБанкаДляРасчетов = "";
		КоррСчетБанкаДляРасчетов = "";
		
	КонецЕсли;
	
КонецПроцедуры // ОчититьЗначенияВСвязаныхПоляхФормы()

// Функция получает основной банковский счет Контрагента.
//
// Параметры:
//  Контрагент	 - СправочникСсылка.Контрагнеты	 - Владелец счета
// 
// Возвращаемое значение:
//  ОсновнойБанковскийСчет - СправочникСсылка.БанковскиеСчета 
//
&НаСервереБезКонтекста
Функция ОсновнойБанковскийСчетКонтрагента(Контрагент)
	Возврат Контрагент.ОсновнойБанковскийСчет
КонецФункции // ОсновнойБанковскийСчетКонтрагента()

&НаСервереБезКонтекста
Процедура ЗаписатьОсновнойСчет(СтруктураПараметров)
	
	ВладелецОбъект = СтруктураПараметров.Владелец.ПолучитьОбъект();
	ВладелецУспешноЗаблокирован = Истина;
	
	Попытка
		ВладелецОбъект.Заблокировать();
	Исключение
		
		ВладелецУспешноЗаблокирован = Ложь;
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось заблокировать %1: %2, для изменения основного банковского счета, по причине:
				|%3'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
				СтруктураПараметров.Владелец.Метаданные().ПредставлениеОбъекта, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Предупреждение,, ВладелецОбъект, ОписаниеОшибки());
		
	КонецПопытки;
	
	// Если удалось заблокировать, изменим банковский счет по умолчанию у контрагента/организации.
	Если ВладелецУспешноЗаблокирован Тогда
		ВладелецОбъект.ОсновнойБанковскийСчет = СтруктураПараметров.НовыйОсновнойСчет;
		ВладелецОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// БиблиотекаЭлектронныхДокументов.ОбменСБанками
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьРеквизитыБанкаНаФорме(Форма, БанкСсылка)
	
	Если ЗначениеЗаполнено(БанкСсылка) Тогда

		РеквизитыБанка = ПолучитьЗначенияРеквизитовПоСсылке(БанкСсылка, "Наименование, Код");
		
		Форма.ВозможенПрямойОбмен = ВозможенПрямойОбменСБанком(РеквизитыБанка.Код);
	Иначе
		Форма.ВозможенПрямойОбмен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначенияРеквизитовПоСсылке(Ссылка, Реквизиты)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты)
	
КонецФункции

&НаСервереБезКонтекста
Функция ВозможенПрямойОбменСБанком(БИКБанка)
	Возврат ОбменСБанками.ВозможенПрямойОбменСБанком(БИКБанка, "1");
КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьЗаголовоки(Форма)
	
	Форма.Элементы.СтраницаОбменСБанком.Видимость = ЗначениеЗаполнено(Форма.Объект.Владелец)
		И (ТипЗнч(Форма.Объект.Владелец) = Тип("СправочникСсылка.Организации"))
		И ПолучитьФункциональнуюОпцию("_ДемоПоказыватьПодсистемуОбменСБанками");
	
	Если Форма.ВозможенПрямойОбмен Тогда
		Форма.Элементы.РежимОбменаДиректБанк.СписокВыбора[0].Представление = НСтр("ru = 'Сервис 1С:ДиректБанк (рекомендуется)'");
	Иначе
		Форма.Элементы.РежимОбменаДиректБанк.СписокВыбора[0].Представление = НСтр("ru = 'Сервис 1С:ДиректБанк'");
	КонецЕсли;

	ОбновитьЗаголовокНастройкиОбменаСБанком(Форма.Элементы.НастройкаОбмена, 
		Форма.Объект.Владелец, Форма.Объект.Банк);
	
	ОбновитьЗаголовокГруппыОбменСБанком(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗаголовокНастройкиОбменаСБанком(Элемент, Знач Организация, Знач Банк)
	
	ВключенаФО = Ложь;
	ТекущаяНастройка = НастройкаОбмена(Организация, Банк, ВключенаФО);
	
	Если Не ВключенаФО ИЛИ НЕ ЗначениеЗаполнено(ТекущаяНастройка) Тогда
		Элемент.Заголовок = НСтр("ru = 'Подключить'");
	Иначе
		РеквизитыНастройкиОбмена = РеквизитыНастройкиОбмена(ТекущаяНастройка);
		Если НЕ РеквизитыНастройкиОбмена.Недействительна И НЕ РеквизитыНастройкиОбмена.ПометкаУдаления Тогда
			Элемент.Заголовок = НСтр("ru = 'Подключен'");
		Иначе
			Элемент.Заголовок = НСтр("ru = 'Не подключен'");
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкаОбмена(Знач Организация, Знач Банк, ВключенаФО)
	
	УстановитьПривилегированныйРежим(Истина);
	ВключенаФО = Константы.ИспользоватьОбменСБанками.Получить();
	Возврат ОбменСБанками.НастройкаОбмена(Организация, Банк);
	
КонецФункции

&НаСервереБезКонтекста
Функция РеквизитыНастройкиОбмена(НастройкаОбмена)
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаОбмена, "Недействительна, ПометкаУдаления");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗаголовокГруппыОбменСБанком(Форма)
	РежимОбменаСБанком = Форма.Объект.РежимОбменаСБанком;
		
	Если РежимОбменаСБанком = 1 Тогда
		Шаблон = НСтр("ru = 'Обмен с банком (%1 сервис 1С:ДиректБанк)'");
		ЗаголовокГруппы = СтрШаблон(Шаблон, НРег(Форма.Элементы.НастройкаОбмена.Заголовок));
	ИначеЕсли РежимОбменаСБанком = 2 Тогда
		ЗаголовокГруппы = НСтр("ru = 'Обмен с банком (через Клиент-банк)'");
	Иначе
		ЗаголовокГруппы = НСтр("ru = 'Обмен с банком (выключен)'");
	КонецЕсли;
	
	Форма.Элементы.СтраницаОбменСБанком.Заголовок = ЗаголовокГруппы;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимОбменаПриИзменении()
	ОбновитьЗаголовокГруппыОбменСБанком(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПрефиксПриИзменении(Элемент)
	Если Найти(Объект.Префикс, "-") > 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нельзя в префиксе банковского счета использовать символ ""-"".'"));
		Объект.Префикс = СтрЗаменить(Объект.Префикс, "-", "");
	КонецЕсли;
КонецПроцедуры
// Конец БиблиотекаЭлектронныхДокументов.ОбменСБанками

#КонецОбласти

