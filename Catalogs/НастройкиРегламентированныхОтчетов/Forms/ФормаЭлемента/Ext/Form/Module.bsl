#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Установка реквизитов формы.
	Родитель = Объект.Родитель;
	ИмяТабличнойЧасти = "СтрокиОтчета";
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	Если НЕ Объект.Родитель = Родитель Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьНастройки", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличные части будут перезаполнены настройками по умолчанию. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);	
	КонецЕсли;	
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ВсеСтрокиПриИзменении(Элемент)
	Если ВсеСтроки Тогда 
		Элементы.НастройкиСтрок.ОтборСтрок = Неопределено;
		Элементы.НастройкиСтрокОДДС.ОтборСтрок = Неопределено;
		Элементы.НастройкиСтрокОИК.ОтборСтрок = Неопределено;
	Иначе 
		БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "НастройкиСтрок");
		БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "НастройкиСтрокОДДС");
		БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "НастройкиСтрокОИК");
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

// Процедура - обработчик события ПриАктивизации строки табличной части СтрокиОтчета.
//
&НаКлиенте
Процедура СтрокиОтчетаПриАктивизацииСтроки(Элемент)
	Если НЕ ВсеСтроки Тогда
		БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "НастройкиСтрок");
		БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "НастройкиСтрокОДДС");
		БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "НастройкиСтрокОИК");
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПередУдалением строки табличной части СтрокиОтчета.
//
&НаКлиенте
Процедура СтрокиОтчетаПередУдалением(Элемент, Отказ)
	БухгалтерскийУчетКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтаФорма, "НастройкиСтрок");
	БухгалтерскийУчетКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтаФорма, "НастройкиСтрокОДДС");
	БухгалтерскийУчетКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтаФорма, "НастройкиСтрокОИК");
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования строки табличной части СтрокиОтчета.
//
&НаКлиенте
Процедура СтрокиОтчетаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		БухгалтерскийУчетКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтаФорма);
		
		Если НЕ ВсеСтроки Тогда
			БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "НастройкиСтрок");
			БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "НастройкиСтрокОДДС");
			БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "НастройкиСтрокОИК");
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПередНачаломДобавления строки табличной части НастройкиСтрок.
//
&НаКлиенте
Процедура НастройкиСтрокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = БухгалтерскийУчетКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтаФорма, Элемент.Имя);
	
	Если НЕ Отказ И ВсеСтроки Тогда 
		ТекстСообщения = НСтр("ru = 'Для добавления строки необходимо отключить режим ""Все строки"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования строки табличной части НастройкиСтрок.
//
&НаКлиенте
Процедура НастройкиСтрокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		БухгалтерскийУчетКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтаФорма, Элемент.Имя);
		
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		СтрокаТабличнойЧасти.КодСтроки = Элементы.СтрокиОтчета.ТекущиеДанные.КодСтроки;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПередНачаломДобавления строки табличной части НастройкиСтрокОДДС.
//
&НаКлиенте
Процедура НастройкиСтрокОДДСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = БухгалтерскийУчетКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтаФорма, Элемент.Имя);
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования строки табличной части НастройкиСтрокОДДС.
//
&НаКлиенте
Процедура НастройкиСтрокОДДСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		БухгалтерскийУчетКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтаФорма, Элемент.Имя);
				
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		СтрокаТабличнойЧасти.КодСтроки = Элементы.СтрокиОтчета.ТекущиеДанные.КодСтроки;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПередНачаломДобавления строки табличной части НастройкиСтрокОИК.
//
&НаКлиенте
Процедура НастройкиСтрокОИКПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = БухгалтерскийУчетКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтаФорма, Элемент.Имя);
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования строки табличной части НастройкиСтрокОИК.
//
&НаКлиенте
Процедура НастройкиСтрокОИКПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		БухгалтерскийУчетКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтаФорма, Элемент.Имя);
				
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		СтрокаТабличнойЧасти.КодСтроки = Элементы.СтрокиОтчета.ТекущиеДанные.КодСтроки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСтрокФормулаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//// Заполнение массива.
	//МассивФормул = Новый Массив;
	//МассивФормул.Добавить(ПредопределенноеЗначение("Перечисление.Формулы.СальдоКонечное"));
	//ФиксированныйМассив = Новый ФиксированныйМассив(МассивФормул);
	//// Добавление параметра.
	//НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", ФиксированныйМассив);
	//НовыйМассив = Новый Массив();
	//НовыйМассив.Добавить(НовыйПараметр);
	//НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	//Элемент.ПараметрыВыбора = НовыеПараметры;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Родитель) Тогда
		ТекстСообщения = НСтр("ru = 'Для заполнения необходимо указать группу настроек.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.Родитель",,Отказ);		
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Объект.СтрокиОтчета.Количество() > 0 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаполнитьНастройки", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличные части будут перезаполнены настройками по умолчанию. Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);	
	Иначе
		ЗаполнитьНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНастройки(Команда)
	ПроверитьНастройкиНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросЗаполнитьНастройки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.СтрокиОтчета.Очистить();
		Объект.НастройкиСтрок.Очистить();
		Объект.НастройкиСтрокОДДС.Очистить();
		
        ЗаполнитьНаСервере();
    КонецЕсли;
КонецПроцедуры // ЗаполнитьПоОснованию()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
// Процедура устанавливает видимость и доступность элементов.
//
Процедура УстановитьВидимостьДоступностьЭлементов()
	Если Объект.Родитель = ПредопределенноеЗначение("Справочник.НастройкиРегламентированныхОтчетов.Баланс")
		Или Объект.Родитель = ПредопределенноеЗначение("Справочник.НастройкиРегламентированныхОтчетов.ОПУ") Тогда 
		Элементы.СтраницаНастройкиСтрок.Видимость = Истина;
		Элементы.СтраницаНастройкиСтрокОДДС.Видимость = Ложь;
		Элементы.СтраницаНастройкиСтрокОИК.Видимость = Ложь;
	ИначеЕсли Объект.Родитель = ПредопределенноеЗначение("Справочник.НастройкиРегламентированныхОтчетов.ДДС") Тогда 
		Элементы.СтраницаНастройкиСтрок.Видимость = Ложь;
		Элементы.СтраницаНастройкиСтрокОДДС.Видимость = Истина;
		Элементы.СтраницаНастройкиСтрокОИК.Видимость = Ложь;
	ИначеЕсли Объект.Родитель = ПредопределенноеЗначение("Справочник.НастройкиРегламентированныхОтчетов.ОИК") Тогда 
		Элементы.СтраницаНастройкиСтрок.Видимость = Ложь;
		Элементы.СтраницаНастройкиСтрокОДДС.Видимость = Ложь;
		Элементы.СтраницаНастройкиСтрокОИК.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()

&НаСервере
Процедура ЗаполнитьНаСервере()
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	// Определение направления заполнения по группе настроек.
	Если Объект.Родитель = Справочники.НастройкиРегламентированныхОтчетов.Баланс Тогда 		
		СправочникОбъект.ЗаполнитьНастройкиБаланс();
	ИначеЕсли Объект.Родитель = Справочники.НастройкиРегламентированныхОтчетов.ОПУ Тогда 
		СправочникОбъект.ЗаполнитьНастройкиОПУ();
	ИначеЕсли Объект.Родитель = Справочники.НастройкиРегламентированныхОтчетов.ДДС Тогда 		
		СправочникОбъект.ЗаполнитьНастройкиОДДС();		
	ИначеЕсли Объект.Родитель = Справочники.НастройкиРегламентированныхОтчетов.ОИК Тогда 		
		СправочникОбъект.ЗаполнитьНастройкиОИК();
	Иначе 
		Возврат;
	КонецЕсли;	
	
	ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
	Модифицированность = Истина;
КонецПроцедуры

// Процедура проверяет заполненные настройки в зависимости от выбранной группы настроек. 
//
&НаСервере
Процедура ПроверитьНастройкиНаСервере()

	Если Объект.Родитель = Справочники.НастройкиРегламентированныхОтчетов.Баланс Тогда 
		// 1. Список счетов учета.
		// 4. Настройки.
		// 5. Контроль заполнения всех счетов в настройках, за исключением временных.
		// 6. Контроль дублирования счетов за исключением активно-пассивных.
		// 7. Контроль заполнения счетов в строках заголовков и групп.
		Запрос = Новый Запрос;
		Запрос.Текст = 
			// 1. Список счетов учета. 
			"ВЫБРАТЬ
			|	ХозрасчетныйОстатки.Счет КАК СчетУчета
			|ПОМЕСТИТЬ ВременнаяТаблицаСписокСчетов
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(, НЕ Счет.Временный, , ) КАК ХозрасчетныйОстатки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// 2. Настройки строк.
			|ВЫБРАТЬ
			|	НастройкиСтрок.КлючСвязи КАК КлючСвязи,
			|	НастройкиСтрок.СчетУчета КАК СчетУчета,
			|	НастройкиСтрок.НомерСтроки КАК НомерСтроки,
			|	НастройкиСтрок.КодСтроки КАК КодСтроки
			|ПОМЕСТИТЬ ВременнаяТаблицаНастройкиСтрок
			|ИЗ
			|	&НастройкиСтрок КАК НастройкиСтрок
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// 3. Строки отчета.
			|ВЫБРАТЬ
			|	СтрокиОтчета.КлючСвязи КАК КлючСвязи,
			|	СтрокиОтчета.ЭтоЗаголовок КАК ЭтоЗаголовок,
			|	СтрокиОтчета.Группа КАК Группа
			|ПОМЕСТИТЬ ВременнаяТаблицаСтрокиОтчета
			|ИЗ
			|	&СтрокиОтчета КАК СтрокиОтчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// 4. Настройки.
			|ВЫБРАТЬ
			|	ВременнаяТаблицаНастройкиСтрок.СчетУчета КАК СчетУчета,
			|	ВременнаяТаблицаНастройкиСтрок.НомерСтроки КАК НомерСтроки,
			|	ВременнаяТаблицаНастройкиСтрок.КодСтроки КАК КодСтроки,
			|	ВременнаяТаблицаСтрокиОтчета.ЭтоЗаголовок КАК ЭтоЗаголовок,
			|	ВременнаяТаблицаСтрокиОтчета.Группа КАК Группа
			|ПОМЕСТИТЬ ВременнаяТаблицаНастройки
			|ИЗ
			|	ВременнаяТаблицаСтрокиОтчета КАК ВременнаяТаблицаСтрокиОтчета
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаНастройкиСтрок КАК ВременнаяТаблицаНастройкиСтрок
			|		ПО ВременнаяТаблицаСтрокиОтчета.КлючСвязи = ВременнаяТаблицаНастройкиСтрок.КлючСвязи
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// 5. Контроль заполнения всех счетов в настройках, за исключением временных.
			|ВЫБРАТЬ
			|	ВременнаяТаблицаСписокСчетов.СчетУчета КАК СчетУчета
			|ИЗ
			|	ВременнаяТаблицаСписокСчетов КАК ВременнаяТаблицаСписокСчетов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНастройки КАК ВременнаяТаблицаНастройки
			|		ПО ВременнаяТаблицаСписокСчетов.СчетУчета = ВременнаяТаблицаНастройки.СчетУчета
			|ГДЕ
			|	ВременнаяТаблицаНастройки.НомерСтроки ЕСТЬ NULL
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// 6. Контроль дублирования счетов за исключением активно-пассивных.
			|ВЫБРАТЬ
			|	МАКСИМУМ(ВременнаяТаблицаНастройкиДубли.КодСтроки) КАК КодСтроки,
			|	ВременнаяТаблицаНастройкиДубли.СчетУчета КАК СчетУчета
			|ИЗ
			|	ВременнаяТаблицаНастройки КАК ВременнаяТаблицаНастройкиДубли
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаНастройки КАК ВременнаяТаблицаНастройки
			|		ПО ВременнаяТаблицаНастройкиДубли.НомерСтроки <> ВременнаяТаблицаНастройки.НомерСтроки
			|			И ВременнаяТаблицаНастройкиДубли.СчетУчета = ВременнаяТаблицаНастройки.СчетУчета
			|ГДЕ
			|	НЕ ВременнаяТаблицаНастройкиДубли.СчетУчета.Вид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
			|
			|СГРУППИРОВАТЬ ПО
			|	ВременнаяТаблицаНастройкиДубли.СчетУчета
			|
			|УПОРЯДОЧИТЬ ПО
			|	КодСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// 7. Контроль заполнения счетов в строках заголовков и групп.
			|ВЫБРАТЬ
			|	ВременнаяТаблицаНастройки.КодСтроки КАК КодСтроки
			|ИЗ
			|	ВременнаяТаблицаНастройки КАК ВременнаяТаблицаНастройки
			|ГДЕ
			|	ВременнаяТаблицаНастройки.ЭтоЗаголовок";
		Запрос.УстановитьПараметр("СтрокиОтчета", Объект.СтрокиОтчета.Выгрузить());
		Запрос.УстановитьПараметр("НастройкиСтрок", Объект.НастройкиСтрок.Выгрузить());
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		// Контроль заполнения всех счетов в настройках, за исключением временных.
		Если НЕ МассивРезультатов[4].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[4].Выбрать();
			Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Счет учета ""%1"" не указан в настройках.'"), ВыборкаИзРезультатаЗапроса.СчетУчета);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЦикла;
		КонецЕсли;		
		
		// Контроль дублирования счетов за исключением активно-пассивных.
		Если НЕ МассивРезультатов[5].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[5].Выбрать();
			Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Счет учета ""%1"" указывается повторно в строке с кодом %2.'"), 
					ВыборкаИзРезультатаЗапроса.СчетУчета, ВыборкаИзРезультатаЗапроса.КодСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЦикла;
		КонецЕсли;
		
		// Контроль заполнения счетов в строках заголовков и групп.
		Если НЕ МассивРезультатов[6].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[6].Выбрать();
			Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Для строки с кодом %1 следует очистить настройки.'"), ВыборкаИзРезультатаЗапроса.КодСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Объект.Родитель = Справочники.НастройкиРегламентированныхОтчетов.ОПУ Тогда	
		// 1. Список счетов учета.
		// 4. Настройки.
		// 5. Контроль заполнения всех счетов в настройках (только временные).
		// 6. Контроль дублирования счетов за исключением.
		// 7. Контроль заполнения счетов в строках заголовков и групп.
		Запрос = Новый Запрос;
		Запрос.Текст = 
			// 1. Список счетов учета. 
			"ВЫБРАТЬ
			|	ХозрасчетныйОбороты.Счет КАК СчетУчета
			|ПОМЕСТИТЬ ВременнаяТаблицаСписокСчетов
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(, , , Счет.Временный, , , , ) КАК ХозрасчетныйОбороты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// 2. Настройки строк.
			|ВЫБРАТЬ
			|	НастройкиСтрок.КлючСвязи КАК КлючСвязи,
			|	НастройкиСтрок.СчетУчета КАК СчетУчета,
			|	НастройкиСтрок.НомерСтроки КАК НомерСтроки,
			|	НастройкиСтрок.КодСтроки КАК КодСтроки
			|ПОМЕСТИТЬ ВременнаяТаблицаНастройкиСтрок
			|ИЗ
			|	&НастройкиСтрок КАК НастройкиСтрок
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// 3. Строки отчета.
			|ВЫБРАТЬ
			|	СтрокиОтчета.КлючСвязи КАК КлючСвязи,
			|	СтрокиОтчета.ЭтоЗаголовок КАК ЭтоЗаголовок,
			|	СтрокиОтчета.Группа КАК Группа
			|ПОМЕСТИТЬ ВременнаяТаблицаСтрокиОтчета
			|ИЗ
			|	&СтрокиОтчета КАК СтрокиОтчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// 4. Настройки.
			|ВЫБРАТЬ
			|	ВременнаяТаблицаНастройкиСтрок.СчетУчета КАК СчетУчета,
			|	ВременнаяТаблицаНастройкиСтрок.НомерСтроки КАК НомерСтроки,
			|	ВременнаяТаблицаНастройкиСтрок.КодСтроки КАК КодСтроки,
			|	ВременнаяТаблицаСтрокиОтчета.ЭтоЗаголовок КАК ЭтоЗаголовок,
			|	ВременнаяТаблицаСтрокиОтчета.Группа КАК Группа
			|ПОМЕСТИТЬ ВременнаяТаблицаНастройки
			|ИЗ
			|	ВременнаяТаблицаСтрокиОтчета КАК ВременнаяТаблицаСтрокиОтчета
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаНастройкиСтрок КАК ВременнаяТаблицаНастройкиСтрок
			|		ПО ВременнаяТаблицаСтрокиОтчета.КлючСвязи = ВременнаяТаблицаНастройкиСтрок.КлючСвязи
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// 5. Контроль заполнения всех счетов в настройках.
			|ВЫБРАТЬ
			|	ВременнаяТаблицаСписокСчетов.СчетУчета КАК СчетУчета
			|ИЗ
			|	ВременнаяТаблицаСписокСчетов КАК ВременнаяТаблицаСписокСчетов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНастройки КАК ВременнаяТаблицаНастройки
			|		ПО ВременнаяТаблицаСписокСчетов.СчетУчета = ВременнаяТаблицаНастройки.СчетУчета
			|ГДЕ
			|	ВременнаяТаблицаНастройки.НомерСтроки ЕСТЬ NULL
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// 6. Контроль дублирования счетов.
			|ВЫБРАТЬ
			|	МАКСИМУМ(ВременнаяТаблицаНастройкиДубли.КодСтроки) КАК КодСтроки,
			|	ВременнаяТаблицаНастройкиДубли.СчетУчета КАК СчетУчета
			|ИЗ
			|	ВременнаяТаблицаНастройки КАК ВременнаяТаблицаНастройкиДубли
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаНастройки КАК ВременнаяТаблицаНастройки
			|		ПО ВременнаяТаблицаНастройкиДубли.НомерСтроки <> ВременнаяТаблицаНастройки.НомерСтроки
			|			И ВременнаяТаблицаНастройкиДубли.СчетУчета = ВременнаяТаблицаНастройки.СчетУчета
			|
			|СГРУППИРОВАТЬ ПО
			|	ВременнаяТаблицаНастройкиДубли.СчетУчета
			|
			|УПОРЯДОЧИТЬ ПО
			|	КодСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// 7. Контроль заполнения счетов в строках заголовков и групп.
			|ВЫБРАТЬ
			|	ВременнаяТаблицаНастройки.КодСтроки КАК КодСтроки
			|ИЗ
			|	ВременнаяТаблицаНастройки КАК ВременнаяТаблицаНастройки
			|ГДЕ
			|	ВременнаяТаблицаНастройки.ЭтоЗаголовок";
		Запрос.УстановитьПараметр("СтрокиОтчета", Объект.СтрокиОтчета.Выгрузить());
		Запрос.УстановитьПараметр("НастройкиСтрок", Объект.НастройкиСтрок.Выгрузить());
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		// Контроль заполнения всех счетов в настройках.
		Если НЕ МассивРезультатов[4].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[4].Выбрать();
			Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Счет учета ""%1"" не указан в настройках.'"), ВыборкаИзРезультатаЗапроса.СчетУчета);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЦикла;
		КонецЕсли;		
		
		// Контроль дублирования счетов.
		Если НЕ МассивРезультатов[5].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[5].Выбрать();
			Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Счет учета ""%1"" указывается повторно в строке с кодом %2.'"), 
					ВыборкаИзРезультатаЗапроса.СчетУчета, ВыборкаИзРезультатаЗапроса.КодСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЦикла;
		КонецЕсли;
		
		// Контроль заполнения счетов в строках заголовков и групп.
		Если НЕ МассивРезультатов[6].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[6].Выбрать();
			Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Для строки с кодом %1 следует очистить настройки.'"), ВыборкаИзРезультатаЗапроса.КодСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЦикла;
		КонецЕсли;
		
		
	КонецЕсли;	
КонецПроцедуры // ПроверитьНастройкиНаСервере()

#КонецОбласти



