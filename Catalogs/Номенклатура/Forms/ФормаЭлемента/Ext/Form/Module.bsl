#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если НЕ ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) И ЗначениеЗаполнено(Объект.Родитель) Тогда
		Объект.ЕдиницаИзмерения = Объект.Родитель.ЕдиницаИзмерения;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) Тогда
		Штука = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт", Истина);
		Если НЕ Штука = Неопределено Тогда
			Объект.ЕдиницаИзмерения = Штука;
		КонецЕсли;
	КонецЕсли;
	
	Родитель = Объект.Родитель;
	
	Если Объект.Ссылка.Пустая() Тогда
		ОтобразитьОсновнуюСпецификацию();
	КонецЕсли;
	
	НастроитьЭлементыУправленияЦенами();
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Изображение
	Если ИмяСобытия = "Запись_Файл" Тогда
		Модифицированность	= Истина;
		
		Объект.ФайлКартинки = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
		ДвоичныеДанныеКартинки = ПолучитьНавигационнуюСсылкуКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
		Если ДвоичныеДанныеКартинки <> Неопределено Тогда
			АдресКартинки = ДвоичныеДанныеКартинки;
		КонецЕсли;
	// Конец Изображение
	ИначеЕсли ИмяСобытия = "ФормаНастройкаЦеныИзменена" Или ИмяСобытия = "Запись_НаборКонстант" Тогда
		ИзменениеНастройкиЦеныПродажи();
	ИначеЕсли ИмяСобытия = "НазначенаПоКнопкеОсновнаяСпецификацияВСпискеСпецификаций" Тогда
		
		// Спецификация может быть назначена основной из списка спецификаций, открытого в подчиненной форме.
		// Информация об основной спецификации хранится в справочнике Номенклатура.
		// Однако, непосредственно из списка спецификаций менять элемент номенклатуры не следует,
		// так как это может привести к выдаче пользователю непонятного ему сообщения 
		// "Данные были изменены другим пользователем".
		// Поэтому список посылает оповещение форме номенклатуры, которая записывает сама себя.
		Если Параметр.Номенклатура = Объект.Ссылка Тогда
			УстановитьОсновнуюСпецификацию(Параметр.ОсновнаяСпецификация);
			ОповеститьОбИзменении(Параметр.ОсновнаяСпецификация);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаписанаСпецификацияНоменклатуры" Тогда
		
		Если Параметр.Свойство("НоменклатураПредыдущийВладелец") Тогда
			
			Если Параметр.НоменклатураВладелец = Объект.Ссылка Или Параметр.НоменклатураПредыдущийВладелец  = Объект.Ссылка Тогда
				
				Если Не Модифицированность Тогда 
					Прочитать();
				Иначе
					
					// Записать изменения уже нельзя.
					// Предотвратим возможность выполнить явно бесполезные действия,
					// но оставим возможность скопировать введенные данные в буфер обмена.
					
					Если Параметр.НоменклатураПредыдущийВладелец  = Объект.Ссылка Тогда
						Объект.ОсновнаяСпецификацияНоменклатуры = Неопределено;
					Иначе
						Объект.ОсновнаяСпецификацияНоменклатуры = Параметр.ИзмененнаяСпецификация;
					КонецЕсли;
					
					ОтобразитьОсновнуюСпецификацию();
					
				КонецЕсли;
				
			КонецЕсли;
				
		ИначеЕсли Параметр.НоменклатураВладелец = Объект.Ссылка Тогда
			
			// Вызывается, в двух случаях
			// 1. редактируем новую (первую) спецификацию - и записали ее
			// 2. изменили состав спецификации
			
			Если Не ЗначениеЗаполнено(Объект.ОсновнаяСпецификацияНоменклатуры) Тогда
				// записали новую
				УстановитьОсновнуюСпецификацию(Параметр.ИзмененнаяСпецификация);
				ОповеститьОбИзменении(Параметр.ИзмененнаяСпецификация);
			ИначеЕсли Объект.ОсновнаяСпецификацияНоменклатуры = Параметр.ИзмененнаяСпецификация Тогда
				// изменили состав существующей
				ОсновнаяСпецификацияПредставление = Параметр.СпецификацияПредставление;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора.
//
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// Изображение
	Если ИсточникВыбора.ИмяФормы = "Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы"
		И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Объект.ФайлКартинки = ВыбранноеЗначение;
		ДвоичныеДанныеКартинки = ПолучитьНавигационнуюСсылкуКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
		Если ДвоичныеДанныеКартинки <> Неопределено Тогда
			АдресКартинки = ДвоичныеДанныеКартинки;
		КонецЕсли;
	КонецЕсли;
	// Конец Изображение
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПолучитьЗначениеЦен();
	ОтобразитьОсновнуюСпецификацию();

	// Изображение
	Если ЗначениеЗаполнено(ТекущийОбъект.ФайлКартинки) Тогда
		ДвоичныеДанныеКартинки = ПолучитьНавигационнуюСсылкуКартинки(ТекущийОбъект.ФайлКартинки, УникальныйИдентификатор);
		Если ДвоичныеДанныеКартинки <> Неопределено Тогда
			АдресКартинки = ДвоичныеДанныеКартинки;
		КонецЕсли;
	КонецЕсли;
	// Конец Изображение
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

// Процедура - обработчик события ПередЗаписьюНаСервере формы.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Если элемент справочника ранее был записан и изменилась группа,
	// то необходимо очистить сохраненные значения для определения счета учета при поступлении.
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ Объект.Родитель = Родитель Тогда
		ОбновитьПовторноИспользуемыеЗначения();		
	КонецЕсли;	                               	
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

// Процедура - обработчик события ПриЗаписиНаСервере формы.
//
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ЗаписатьИзменениеЦеныВРегистр(ТекущийОбъект);	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере формы.
//
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении Наименование.
//
&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	Объект.НаименованиеПолное = Объект.Наименование;	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяСпецификацияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УдалосьЗаписатьОбъект = Истина;
	
	Если (Объект.Ссылка.Пустая() Или Модифицированность) Тогда
		УдалосьЗаписатьОбъект = Записать();
	КонецЕсли;
	
	Если УдалосьЗаписатьОбъект Тогда
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Владелец", Объект.Ссылка);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ",                          Объект.ОсновнаяСпецификацияНоменклатуры);
		ПараметрыФормы.Вставить("ОткрытоИзКарточкиНоменклатуры", Истина);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения",            ЗначенияЗаполнения);
		
		ОткрытьФорму("Справочник.СпецификацииНоменклатуры.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугаПриИзменении(Элемент)
	
	Объект.КодГКЭД = Неопределено;
	Объект.КодТНВЭД = Неопределено;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ЦенаПродажиИзНоменклатурыПриИзменении(Элемент)
	ЦенаПродажиМодифицирована = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЦенаЗакупкиИзНоменклатурыПриИзменении(Элемент)
	ЦенаЗакупкиМодифицирована = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЦенаПлановаяИзНоменклатурыПриИзменении(Элемент)
	ЦенаПлановаяМодифицирована = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодсказкаЦеныПродажиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "e1cib/data/Обработка.ПанельАдминистрированияБП.Форма.ФормаНастройкиЦен" Тогда
		
		СтандартнаяОбработка = Ложь; // Форму будем открывать с параметром
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОткрытаИзКарточкиНоменклатуры", Истина);
		
		ОткрытьФорму("Обработка.ПанельАдминистрированияБП.Форма.ФормаНастройкиЦен", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаЦеныЗакупкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "e1cib/data/Обработка.ПанельАдминистрированияБП.Форма.ФормаНастройкиЦен" Тогда
		
		СтандартнаяОбработка = Ложь; // Форму будем открывать с параметром
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОткрытаИзКарточкиНоменклатуры", Истина);
		
		ОткрытьФорму("Обработка.ПанельАдминистрированияБП.Форма.ФормаНастройкиЦен", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаЦеныПлановойОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "e1cib/data/Обработка.ПанельАдминистрированияБП.Форма.ФормаНастройкиЦен" Тогда
		
		СтандартнаяОбработка = Ложь; // Форму будем открывать с параметром
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОткрытаИзКарточкиНоменклатуры", Истина);
		
		ОткрытьФорму("Обработка.ПанельАдминистрированияБП.Форма.ФормаНастройкиЦен", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОтобразитьОсновнуюСпецификацию()
	
	Если Не ЗначениеЗаполнено(Объект.ОсновнаяСпецификацияНоменклатуры) Тогда
		Элементы.ОсновнаяСпецификацияПредставление.Видимость = ПравоДоступа("Редактирование", Метаданные.Справочники.СпецификацииНоменклатуры);
		ОсновнаяСпецификацияПредставление = НСтр("ru = 'Заполнить'");
	Иначе
		ОсновнаяСпецификацияПредставление = УправлениеПроизводством.ПредставлениеОсновнойСпецификации(Объект.ОсновнаяСпецификацияНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОсновнуюСпецификацию(ИзмененнаяСпецификация)
	
	Объект.ОсновнаяСпецификацияНоменклатуры = ИзмененнаяСпецификация;
	Если НЕ Модифицированность Тогда 
		Записать();
	КонецЕсли;	
	ОсновнаяСпецификацияПредставление = УправлениеПроизводством.ПредставлениеОсновнойСпецификации(ИзмененнаяСпецификация);
	
КонецПроцедуры

&НаСервере
// Процедура устанавливает видимость и доступность элементов.
//
Процедура УстановитьВидимостьДоступностьЭлементов()
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТНВЭДКод",	"Видимость", НЕ Объект.Услуга);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТНВЭДНаименование",	"Видимость", НЕ Объект.Услуга);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГКЭДКод",	"Видимость", Объект.Услуга);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГКЭДНаименование",	"Видимость", Объект.Услуга);
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()

&НаСервере
Процедура ИзменениеНастройкиЦеныПродажи()
	
	ПолучитьЗначениеЦен();
	НастроитьЭлементыУправленияЦенами();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзменениеЦеныВРегистр(ТекущийОбъект)
	
	ПравоНаИзменениеРегистраЦен = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ЦеныНоменклатурыДокументов); 	
	
	Если ПравоНаИзменениеРегистраЦен Тогда
		
		РедактироватьВКарточкеНоменклатуры = 
			(Константы.НастройкаЗаполненияЦены.Получить() = Перечисления.НастройкаЗаполненияЦены.Номенклатура);
			
		// Цена продажи.
		Если РедактироватьВКарточкеНоменклатуры И ЦенаПродажиМодифицирована Тогда
			
			МенеджерЗаписи 						= РегистрыСведений.ЦеныНоменклатурыДокументов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Номенклатура 		= ТекущийОбъект.Ссылка;
			МенеджерЗаписи.СпособЗаполненияЦены = Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам;
			МенеджерЗаписи.Валюта				= ВалютаЦеныПродажи;
			МенеджерЗаписи.Цена 				= ЦенаПродажи;
			МенеджерЗаписи.ЦенаВключаетНалоги	= Истина;
			
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
		
		// Цена закупки.
		Если РедактироватьВКарточкеНоменклатуры И ЦенаЗакупкиМодифицирована Тогда
			
			МенеджерЗаписи 						= РегистрыСведений.ЦеныНоменклатурыДокументов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Номенклатура 		= ТекущийОбъект.Ссылка;
			МенеджерЗаписи.СпособЗаполненияЦены = Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам;
			МенеджерЗаписи.Валюта				= ВалютаЦеныЗакупки;
			МенеджерЗаписи.Цена 				= ЦенаЗакупки;
			МенеджерЗаписи.ЦенаВключаетНалоги	= Истина;
			
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
		
		// Цена плановая.
		Если РедактироватьВКарточкеНоменклатуры И ЦенаПлановаяМодифицирована Тогда
			
			МенеджерЗаписи 						= РегистрыСведений.ЦеныНоменклатурыДокументов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Номенклатура 		= ТекущийОбъект.Ссылка;
			МенеджерЗаписи.СпособЗаполненияЦены = Перечисления.СпособыЗаполненияЦен.ПоПлановымЦенам;
			МенеджерЗаписи.Валюта				= ВалютаЦеныПлановой;
			МенеджерЗаписи.Цена 				= ЦенаПлановая;
			МенеджерЗаписи.ЦенаВключаетНалоги	= Истина;
			
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗначениеЦен()
	
	Если Не ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЦеныНоменклатурыДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();	

	ЦенаПродажи = 0;
	ЦенаЗакупки = 0;
	ЦенаПлановая = 0;
	ВалютаЦеныПродажи = ВалютаРегламентированногоУчета;
	ВалютаЦеныЗакупки = ВалютаРегламентированногоУчета;
	ВалютаЦеныПлановой = ВалютаРегламентированногоУчета;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыДокументов.СпособЗаполненияЦены КАК СпособЗаполненияЦены,
		|	ЦеныНоменклатурыДокументов.Цена КАК Цена,
		|	ЦеныНоменклатурыДокументов.Валюта КАК Валюта
		//|	ЦеныНоменклатурыДокументов.ЦенаВключаетНалоги КАК ЦенаВключаетНалоги
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыДокументов КАК ЦеныНоменклатурыДокументов
		|ГДЕ
		|	ЦеныНоменклатурыДокументов.Номенклатура = &Номенклатура";
		
	// В форме номенклатуры цену всегда показываем как она записана в регистре.
	//СтавкаНДС = Справочники.СтавкиНДС.Стандарт;
	//СтавкаНСП = ?(Объект.Услуга, Справочники.СтавкиНСП.Прочее, Справочники.СтавкиНСП.Торговля);
	//ОрганизацияПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	//
	//Период = ТекущаяДатаСеанса();
	//
	//ЗначениеСтавкиНДС = УчетНДСВызовСервера.ПолучитьСтавкуНДС(Период, СтавкаНДС);
	//ЗначениеСтавкиНСП = УчетНДСВызовСервера.ПолучитьСтавкуНСП(Период, ОрганизацияПоУмолчанию, СтавкаНСП);

	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл 
		//Если Не ВыборкаДанных.ЦенаВключаетНалоги Тогда
		//	Цена = ВыборкаДанных.Цена * (1 + ЗначениеСтавкиНДС / 100 + ЗначениеСтавкиНСП / 100);
		//Иначе
			Цена = ВыборкаДанных.Цена;
		//КонецЕсли;
		
		ВалютаЦены = ВыборкаДанных.Валюта;
		
		Если ВыборкаДанных.СпособЗаполненияЦены = Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам Тогда 
			ЦенаПродажи = Цена;	
			ВалютаЦеныПродажи = ВалютаЦены;
		ИначеЕсли ВыборкаДанных.СпособЗаполненияЦены = Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам Тогда 	
			ЦенаЗакупки = Цена;	
			ВалютаЦеныЗакупки = ВалютаЦены;
		ИначеЕсли ВыборкаДанных.СпособЗаполненияЦены = Перечисления.СпособыЗаполненияЦен.ПоПлановымЦенам Тогда 	
			ЦенаПлановая = Цена;	
			ВалютаЦеныПлановой = ВалютаЦены;
		КонецЕсли;
			
	КонецЦикла;
	
	ЦенаПродажиМодифицирована = Ложь;	
	ЦенаЗакупкиМодифицирована = Ложь;	
	ЦенаПлановаяМодифицирована = Ложь;	
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыУправленияЦенами()
	
	ЧтениеЦен = ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЦеныНоменклатурыДокументов);
	
	Если Не ЧтениеЦен Тогда
		Элементы.ГруппаЦенаПродажи.Видимость = Ложь;
		Элементы.ГруппаЦенаЗакупки.Видимость = Ложь;
		Элементы.ГруппаЦенаПлановая.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ИзменениеЦен = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.ЦеныНоменклатурыДокументов);
	
	Элементы.ГруппаЦенаПродажи.Видимость = Истина;
	Элементы.ГруппаЦенаЗакупки.Видимость = Истина;
	Элементы.ГруппаЦенаПлановая.Видимость = Истина;
	
	РедактироватьВКарточкеНоменклатуры = (Константы.НастройкаЗаполненияЦены.Получить() = Перечисления.НастройкаЗаполненияЦены.Номенклатура);
	
	Если ИзменениеЦен Тогда
		Элементы.ЦенаПродажиИзНоменклатуры.ТолькоПросмотр = Не РедактироватьВКарточкеНоменклатуры;
		Элементы.ЦенаЗакупкиИзНоменклатуры.ТолькоПросмотр = Не РедактироватьВКарточкеНоменклатуры;
		Элементы.ЦенаПлановаяИзНоменклатуры.ТолькоПросмотр = Не РедактироватьВКарточкеНоменклатуры;
	Иначе
		Элементы.ЦенаПродажиИзНоменклатуры.ТолькоПросмотр = Истина;
		Элементы.ЦенаЗакупкиИзНоменклатуры.ТолькоПросмотр = Истина;
		Элементы.ЦенаПлановаяИзНоменклатуры.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ИзменениеНастройки = ПравоДоступа("Редактирование", Метаданные.Константы.НастройкаЗаполненияЦены);
	
	// Установка подсказки цены продажи.
	ЭлементыСтроки = Новый Массив;
	
	Если РедактироватьВКарточкеНоменклатуры Тогда
		ЭлементыСтроки.Добавить(НСтр("ru = 'По умолчанию цена продажи устанавливается в карточке номенклатуры.'"));
	Иначе
		ЭлементыСтроки.Добавить(НСтр("ru = 'По умолчанию цена продажи устанавливается в документах продажи (счетах, актах, накладных).'"));
	КонецЕсли;
	
	Если ИзменениеНастройки Тогда
		ЭлементыСтроки.Добавить(Символы.ПС);
		ЭлементыСтроки.Добавить(НСтр("ru = 'Изменить настройку можно в форме - '"));
		ЭлементыСтроки.Добавить(Новый ФорматированнаяСтрока("Заполнение цен",,,,"e1cib/data/Обработка.ПанельАдминистрированияБП.Форма.ФормаНастройкиЦен"));
	КонецЕсли;
	
	ТекстПодсказкиДляЦены = Новый ФорматированнаяСтрока(ЭлементыСтроки);
	Элементы.ВалютаЦеныПродажи.РасширеннаяПодсказка.Заголовок = ТекстПодсказкиДляЦены;
	
	// Установка подсказки цены закупки.
	ЭлементыСтроки = Новый Массив;
	
	Если РедактироватьВКарточкеНоменклатуры Тогда
		ЭлементыСтроки.Добавить(НСтр("ru = 'По умолчанию цена закупки устанавливается в карточке номенклатуры.'"));
	Иначе
		ЭлементыСтроки.Добавить(НСтр("ru = 'По умолчанию цена закупки устанавливается в документах поступления (счетах, накладных, авансовых отчетах).'"));
	КонецЕсли;
	
	Если ИзменениеНастройки Тогда
		ЭлементыСтроки.Добавить(Символы.ПС);
		ЭлементыСтроки.Добавить(НСтр("ru = 'Изменить настройку можно в форме - '"));
		ЭлементыСтроки.Добавить(Новый ФорматированнаяСтрока("Заполнение цен",,,,"e1cib/data/Обработка.ПанельАдминистрированияБП.Форма.ФормаНастройкиЦен"));
	КонецЕсли;
	
	ТекстПодсказкиДляЦены = Новый ФорматированнаяСтрока(ЭлементыСтроки);
	Элементы.ВалютаЦеныЗакупки.РасширеннаяПодсказка.Заголовок = ТекстПодсказкиДляЦены;
	
	// Установка подсказки цены плановой.
	ЭлементыСтроки = Новый Массив;
	
	Если РедактироватьВКарточкеНоменклатуры Тогда
		ЭлементыСтроки.Добавить(НСтр("ru = 'По умолчанию плановая цена устанавливается в карточке номенклатуры.'"));
	Иначе
		ЭлементыСтроки.Добавить(НСтр("ru = 'По умолчанию плановая цена устанавливается в документах производства (отчетах производства за смену, заказах на производство).'"));
	КонецЕсли;
	
	Если ИзменениеНастройки Тогда
		ЭлементыСтроки.Добавить(Символы.ПС);
		ЭлементыСтроки.Добавить(НСтр("ru = 'Изменить настройку можно в форме - '"));
		ЭлементыСтроки.Добавить(Новый ФорматированнаяСтрока("Заполнение цен",,,,"e1cib/data/Обработка.ПанельАдминистрированияБП.Форма.ФормаНастройкиЦен"));
	КонецЕсли;
	
	ТекстПодсказкиДляЦены = Новый ФорматированнаяСтрока(ЭлементыСтроки);
	Элементы.ВалютаЦеныПлановой.РасширеннаяПодсказка.Заголовок = ТекстПодсказкиДляЦены;
	
КонецПроцедуры

#КонецОбласти

#Область Изображение

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НЕ Объект.ФайлКартинки.Пустая() Тогда
		ПросмотретьПрисоединенныйФайл();
	Иначе
		ЗаблокироватьДанныеФормыДляРедактирования();
		ДобавитьИзображениеНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.ФайлКартинки);
	Иначе
		ТекстСообщения = НСтр("ru='Отсутстует изображение для редактирования'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Адрес");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	Объект.ФайлКартинки = Неопределено;
	АдресКартинки = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ИзПрисоединенныхФайлов(Команда)
	
	ВыбратьКартинкуИзПрисоединенныхФайлов();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор)
	        
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл()
	
	ОчиститьСообщения();
	
	ИмяРеквизитаОбъекта = "";
	
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		ДанныеФайла = ПолучитьДанныеФайла(Объект.ФайлКартинки, УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	Иначе
		ТекстСообщения = НСтр("ru='Отсутстует изображение для просмотра'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	
	ДобавитьИзображениеНаКлиентеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
	
	Перем ИдентификаторФайла, ИмяРеквизитаОбъекта, Фильтр;
	
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		
		ПросмотретьПрисоединенныйФайл();
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		
		Фильтр = НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
		+ "|Все файлы(*.*)|*.*"
		+ "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
		+ "|Формат GIF(*.gif*)|*.gif"
		+ "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
		+ "|Формат PNG(*.png*)|*.png"
		+ "|Формат TIFF(*.tif)|*.tif"
		+ "|Формат icon(*.ico)|*.ico"
		+ "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'");
		
		РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, Фильтр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла", Объект.Ссылка);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат
	КонецЕсли;
	
	Записать();
	
	ДобавитьИзображениеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФрагмент()
	
	Перем ИдентификаторФайла;
	
	ИдентификаторФайла = Новый УникальныйИдентификатор;	
	РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНавигационнуюСсылкуКартинки(ФайлКартинки, ИдентификаторФормы)
	
	Попытка
		Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_РедактироватьСоставСвойств()

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
