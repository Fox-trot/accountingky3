
#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ВызовВыполнитьЗапрос(Запрос)
	Возврат ПолучитьОбработку().ВыполнитьЗапрос(Запрос);
КонецФункции

&НаСервере
Функция ПолучитьОбработку()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ПроводкиЗаДень(Команда)
	ПроводкиЗаДеньНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыЗаДень(Команда)
	ЗатратыЗаДеньНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаВведенныеВручную(Команда)
	ОткрытьФорму("Обработка.МониторПроверок.Форма.СчетаВведенныеВручную");
КонецПроцедуры

&НаКлиенте
Процедура Организации(Команда)
	ОткрытьФорму("Обработка.МониторПроверок.Форма.Организации");
КонецПроцедуры

&НаКлиенте
Процедура СтраныМира(Команда)
	ОткрытьФорму("Обработка.МониторПроверок.Форма.СтраныМира");
КонецПроцедуры

&НаКлиенте
Процедура Общие(Команда)
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Объект.Результаты.Очистить();
	
	// 1. ОсновнаяОрганизация
	// 1.1. Наличие
	ОсновнаяОрганизация = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
	
	Если НЕ ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда 
		НоваяСтрока = Объект.Результаты.Добавить();
		НоваяСтрока.Раздел = "Настройки пользователей";
		НоваяСтрока.Наименование = "Основная организация";
		НоваяСтрока.Значение = "Не заполнено";
		НоваяСтрока.Комментарий = "НЕ ЗАПОЛНЕНО!";
	Иначе
		НоваяСтрока = Объект.Результаты.Добавить();
		НоваяСтрока.Раздел = "Настройки пользователей";
		НоваяСтрока.Параметр = "Основная организация";
		НоваяСтрока.Значение = ОсновнаяОрганизация;
		НоваяСтрока.Комментарий = "+";
	КонецЕсли;		
	
	// 1.2. ОсновнаяОрганизация - ИНН
	НоваяСтрока = Объект.Результаты.Добавить();
	НоваяСтрока.Раздел = "Организация";
	НоваяСтрока.Параметр = "ИНН";
	НоваяСтрока.Значение = ОсновнаяОрганизация.ИНН;	
	Если НЕ ЗначениеЗаполнено(ОсновнаяОрганизация.ИНН) Тогда 
		НоваяСтрока.Комментарий = "НЕ ЗАПОЛНЕНО!";
	КонецЕсли;
	
	// 1.4. ОсновнаяОрганизация - ОснКасса
	НоваяСтрока = Объект.Результаты.Добавить();
	НоваяСтрока.Раздел = "Организация";
	НоваяСтрока.Параметр = "Основная касса";
	НоваяСтрока.Значение = ОсновнаяОрганизация.ОсновнаяКасса;	
	Если НЕ ЗначениеЗаполнено(ОсновнаяОрганизация.ОсновнаяКасса) Тогда 
		НоваяСтрока.Комментарий = "НЕ ЗАПОЛНЕНО!";
	КонецЕсли;
	
	// 1.5. ОсновнаяОрганизация - ОснБСчет
	НоваяСтрока = Объект.Результаты.Добавить();
	НоваяСтрока.Раздел = "Организация";
	НоваяСтрока.Параметр = "Основная счет";
	НоваяСтрока.Значение = ОсновнаяОрганизация.ОсновнойБанковскийСчет;	
	Если НЕ ЗначениеЗаполнено(ОсновнаяОрганизация.ОсновнойБанковскийСчет) Тогда 
		НоваяСтрока.Комментарий = "НЕ ЗАПОЛНЕНО!";
	КонецЕсли;
	
	// 1.6. Учет по нескольким организациям
	НоваяСтрока = Объект.Результаты.Добавить();
	НоваяСтрока.Раздел = "Организация";
	НоваяСтрока.Параметр = "Учет по одной организации";
	НоваяСтрока.Значение = ОсновнаяОрганизация.ОсновнойБанковскийСчет;	
	Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимОрганизациям") Тогда 
		НоваяСтрока.Комментарий = "НЕ ПО ОДНОЙ!";
	Иначе			
		НоваяСтрока.Комментарий = "+";
	КонецЕсли;
	
	// 2. Учетная политика
	// 2. УП по организации
	// 2.1. Наличие на декабрь 2015
	УП = РегистрыСведений.УчетнаяПолитикаОрганизаций.СрезПоследних('20151201', Новый Структура("Организация", ОсновнаяОрганизация));
	
	НоваяСтрока = Объект.Результаты.Добавить();
	НоваяСтрока.Раздел = "УП";
	НоваяСтрока.Параметр = "Наличие на декабрь 2015";
	Если УП.Количество() = 0 Тогда 
		НоваяСтрока.Значение = "НЕТ";	
		НоваяСтрока.Комментарий = "НЕТ!";		
	Иначе		
		НоваяСтрока.Значение = "Есть";	
		НоваяСтрока.Комментарий = "+";
	КонецЕсли;
	
	
	// 2.2. УП. Налоги
	УПОснОрг = БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций('20151201', ОсновнаяОрганизация);
	
	НоваяСтрока = Объект.Результаты.Добавить();
	НоваяСтрока.Раздел = "УП";
	НоваяСтрока.Параметр = "Налоги";
	НоваяСтрока.Значение = "НДС, НСП, НП, НИ";		
	Если УПОснОрг.ПлательщикНДС 
		И УПОснОрг.ПлательщикНСП
		И УПОснОрг.ПлательщикНП
		И УПОснОрг.ПлательщикНИ
		И НЕ УПОснОрг.ПлательщикЕН Тогда 
		НоваяСтрока.Комментарий = "+";		
	Иначе		
		НоваяСтрока.Комментарий = "Должно быть НДС, НСП, НП, НИ и не ЕН!";
	КонецЕсли;
	
	// 2.3. НДС/НСП
	НоваяСтрока = Объект.Результаты.Добавить();
	НоваяСтрока.Раздел = "УП: НДС/НСП";
	НоваяСтрока.Параметр = "Ставки НДС, НСП, НДСА, НДСПИ, ПрЗачет, БезНДС в отчетах";
	НоваяСтрока.Значение = "Стандарт, Прочее, Да, Нет, Нет, Нет";		
	Если УПОснОрг.СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.Стандарт 
		И УПОснОрг.СтавкаНСППоУмолчанию = Справочники.СтавкиНСП.Прочее 
		И УПОснОрг.УчетНДСНаАвансы
		И НЕ УПОснОрг.НДСНаПошлинуОСИмпорт
		И НЕ УПОснОрг.УказыватьПризнакЗачетаНДСПриПоступлении 
		И НЕ УПОснОрг.НеУчитыватьЗакупкиБезНДСВОтчетах Тогда 
		НоваяСтрока.Комментарий = "+";		
	Иначе		
		НоваяСтрока.Комментарий = "ЧТО-ТО НЕ ТО!";
	КонецЕсли;
	
	
	// 2.4. УП ОС
	НоваяСтрока = Объект.Результаты.Добавить();
	НоваяСтрока.Раздел = "УП: ОС";
	НоваяСтрока.Параметр = "МинНУ, Ремонта, МинГруппыНУ, АО по месяцам";
	НоваяСтрока.Значение = "10000, 15000, 4500, Нет";		
	Если УПОснОрг.МинимумСтоимостиОСДляНУ = 10000 
		И УПОснОрг.МинимальнаяСтоимостьГруппыОС = 4500
		И УПОснОрг.ПредельнаяНормаНаРемонтОС = 15
		И НЕ УПОснОрг.РасчетАмортизационныхОтчисленийПоМесяцам Тогда 
		НоваяСтрока.Комментарий = "+";		
	Иначе		
		НоваяСтрока.Комментарий = "ЧТО-ТО НЕ ТО!";
	КонецЕсли;
	
	// 2.5. УП ТМЗ 1
	НоваяСтрока = Объект.Результаты.Добавить();
	НоваяСтрока.Раздел = "УП: ТМЗ";
	НоваяСтрока.Параметр = "СС, ТипПоставки, ВидПлатежа";
	НоваяСтрока.Значение = "СВЦ, Облагаемые, Перечисление";		
	Если УПОснОрг.ОсновнойТипПоставки = Справочники.КодыПоставокСФ.Облагаемые
		И УПОснОрг.ОсновнойВидПлатежа = Перечисления.ВидыПлатежей.Перечислением Тогда
		НоваяСтрока.Комментарий = "+";		
	Иначе		
		НоваяСтрока.Комментарий = "ЧТО-ТО НЕ ТО!";
	КонецЕсли;
	
	// 2.6. УП ТМЗ 2
	НоваяСтрока = Объект.Результаты.Добавить();
	НоваяСтрока.Раздел = "УП: ТМЗ";
	НоваяСтрока.Параметр = "Запрет перерасхода";
	
	//Если УПОснОрг.ЗапретПерерасходаТМЗ Тогда 
	//	НоваяСтрока.Значение = "Да";		
	//Иначе		
		НоваяСтрока.Значение = "Нет";		
	//КонецЕсли;
	
	
	// 2.7. УП ТМЗ 3
	НоваяСтрока = Объект.Результаты.Добавить();
	НоваяСтрока.Раздел = "УП: ТМЗ";
	НоваяСтрока.Параметр = "СчетПредварительныхДополнительныхРасходов";
	НоваяСтрока.Значение = "Нет"; //УПОснОрг.ЗапретПерерасходаТМЗ;
	
	
	// 2.8. УП ТМЗ МБП
	НоваяСтрока = Объект.Результаты.Добавить();
	НоваяСтрока.Раздел = "УП: МБП";
	НоваяСтрока.Параметр = "Износ МБП, Количественный учет";
	НоваяСтрока.Значение = Строка(УПОснОрг.ВидУчетаИзносаМБП) + ", " + ?(УПОснОрг.КоличественныйУчетМБП, "Да", "Нет");
	
	// 2.9. УП КР
	НоваяСтрока = Объект.Результаты.Добавить();
	НоваяСтрока.Раздел = "УП: КР";
	НоваяСтрока.Параметр = "Статья ДДС для КР";
	НоваяСтрока.Значение = УПОснОрг.СтатьяДДСДляКурсовыхРазниц;
	
	// 3.1. Ставки НДС и НСП
	// Проверяем, есть - ли ставки НДС и НСП 
	СтавкаНДС 	= БухгалтерскийУчетСервер.ПолучитьСтавкуНДС('20150101', Справочники.СтавкиНДС.Стандарт);
	СтавкаНСПТ 	= БухгалтерскийУчетСервер.ПолучитьСтавкуНСП('20150101', Справочники.СтавкиНСП.Торговля, Справочники.СтавкиНДС.Стандарт);
	СтавкаНСПП 	= БухгалтерскийУчетСервер.ПолучитьСтавкуНСП('20150101', Справочники.СтавкиНСП.Прочее, Справочники.СтавкиНДС.Стандарт);
	
	НоваяСтрока = Объект.Результаты.Добавить();
	НоваяСтрока.Раздел 		= "НДС/НСП";
	НоваяСтрока.Параметр 	= "Ставки: НДС, НСПТ, НСПП";
	НоваяСтрока.Значение 	= Строка(СтавкаНДС.Ставка) + ", " + Строка(СтавкаНСПТ.Ставка) + ", " + Строка(СтавкаНСПП.Ставка);
	Если СтавкаНДС.Ставка = 0 ИЛИ СтавкаНСПП.Ставка = 0 ИЛИ СтавкаНСПТ.Ставка = 0 Тогда 
		НоваяСтрока.Комментарий	= "ЧТО-ТО НЕ ТО!";
	КонецЕсли;		
	
	
	// 3.2. Валюты
	ВалСом = Справочники.Валюты.НайтиПоКоду("417");
	ВалUSD = Справочники.Валюты.НайтиПоКоду("840"); // доллар
	ВалРуб = Справочники.Валюты.НайтиПоКоду("643"); // рубль
	ВалТен = Справочники.Валюты.НайтиПоКоду("398"); // т
	ВалЕвр = Справочники.Валюты.НайтиПоКоду("978"); // е
	
	КурсС = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалСом, '20150101').Курс;
	КурсД = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалUSD, '20150101').Курс;
	КурсР = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалРуб, '20150101').Курс;
	КурсТ = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалТен, '20150101').Курс;
	КурсЕ = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалЕвр, '20150101').Курс;
	
	
	НоваяСтрока = Объект.Результаты.Добавить();
	НоваяСтрока.Раздел 		= "Валюты";
	НоваяСтрока.Параметр 	= "Курсы валют на 01.01.15: Сом, USD, EUR, Руб, Тенге";
	НоваяСтрока.Значение 	= Строка(КурсС) + ", " + Строка(КурсД) + ", " + Строка(КурсЕ) +  ", " + Строка(КурсР) +  ", " + Строка(КурсТ);
	Если КурсС = 0 ИЛИ КурсД = 0 ИЛИ КурсР = 0  ИЛИ КурсЕ = 0  ИЛИ КурсТ = 0 Тогда 
		НоваяСтрока.Комментарий	= "ЧТО-ТО НЕ ТО!";
	КонецЕсли;		
	
	
	
	
	// 4. Счета учета номенклатуры
	//
	
	
	
	
	
	
	
	//СтавкаНДС 	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Справочники.СтавкуНДС('20150101', Справочники.СтавкиНДС.Стандарт);
	СтавкаНСПТ 	= БухгалтерскийУчетСервер.ПолучитьСтавкуНСП('20150101', Справочники.СтавкиНСП.Торговля, Справочники.СтавкиНДС.Стандарт);
	СтавкаНСПП 	= БухгалтерскийУчетСервер.ПолучитьСтавкуНСП('20150101', Справочники.СтавкиНСП.Прочее, Справочники.СтавкиНДС.Стандарт);
	
	НоваяСтрока = Объект.Результаты.Добавить();
	НоваяСтрока.Раздел 		= "НДС/НСП";
	НоваяСтрока.Параметр 	= "Ставки: НДС, НСПТ, НСПП";
	НоваяСтрока.Значение 	= Строка(СтавкаНДС.Ставка) + ", " + Строка(СтавкаНСПТ.Ставка) + ", " + Строка(СтавкаНСПП.Ставка);
	Если СтавкаНДС.Ставка = 0 ИЛИ СтавкаНСПП.Ставка = 0 ИЛИ СтавкаНСПТ.Ставка = 0 Тогда 
		НоваяСтрока.Комментарий	= "ЧТО-ТО НЕ ТО!";
	КонецЕсли;		
	
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ЗаполнитьНаСервере();
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗатраты(Команда)
	ЗаполнитьЗатратыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗатратыНаСервере();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК Счет,
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
	|	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетКт,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Субконто,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Корсубконто,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК Сумма,
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачПериод, &КонПериод, Регистратор, , &СтЗ, , , СубконтоДт1 = ЗНАЧЕНИЕ(Справочник.СтатьиЗатратИДоходов.ПустаяСсылка)) КАК ХозрасчетныйОборотыДтКт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СчетКт,
	|	ХозрасчетныйОборотыДтКт.СчетДт,
	|	ХозрасчетныйОборотыДтКт.СчетКт,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот,
	|	ХозрасчетныйОборотыДтКт.Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачПериод, &конПериод, Регистратор, , , , &СтЗ, СубконтоКт1 = ЗНАЧЕНИЕ(Справочник.СтатьиЗатратИДоходов.ПустаяСсылка)) КАК ХозрасчетныйОборотыДтКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("НачПериод", Объект.НачПериод);
	Запрос.УстановитьПараметр("КонПериод", КонецДня(Объект.КонПериод));
	Запрос.УстановитьПараметр("СтЗ", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатратИДоходов);
	
	Результат = Запрос.Выполнить();
	ТЗ = Результат.Выгрузить();
	Объект.Затраты.Загрузить(ТЗ);
	
	
	
	
КонецПроцедуры

&НаСервере
Процедура ЗатратыЗаДеньНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК Счет,
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
	|	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетКт,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Субконто,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Корсубконто,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК Сумма,
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
	|	ХозрасчетныйОборотыДтКт.Период
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачПериод, &КонПериод, Регистратор, , &СтЗ, , , ) КАК ХозрасчетныйОборотыДтКт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СчетКт,
	|	ХозрасчетныйОборотыДтКт.СчетДт,
	|	ХозрасчетныйОборотыДтКт.СчетКт,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот,
	|	ХозрасчетныйОборотыДтКт.Регистратор,
	|	ХозрасчетныйОборотыДтКт.Период
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачПериод, &конПериод, Регистратор, , , , &СтЗ, ) КАК ХозрасчетныйОборотыДтКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет,
	|	Регистратор
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("НачПериод", Объект.НачПериод);
	Запрос.УстановитьПараметр("КонПериод", КонецДня(Объект.КонПериод));
	Запрос.УстановитьПараметр("СтЗ", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатратИДоходов);
	
	Результат = Запрос.Выполнить();
	ТЗ = Результат.Выгрузить();
	Объект.Затраты.Загрузить(ТЗ);
	
	
	
	
КонецПроцедуры


Процедура ПроводкиЗаДеньНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК Счет,
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
	|	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетКт,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Субконто,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Корсубконто,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК Сумма,
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
	|	ХозрасчетныйОборотыДтКт.Период
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачПериод, &КонПериод, Регистратор, , , , , ) КАК ХозрасчетныйОборотыДтКт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СчетКт,
	|	ХозрасчетныйОборотыДтКт.СчетДт,
	|	ХозрасчетныйОборотыДтКт.СчетКт,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот,
	|	ХозрасчетныйОборотыДтКт.Регистратор,
	|	ХозрасчетныйОборотыДтКт.Период
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачПериод, &конПериод, Регистратор, , , , , ) КАК ХозрасчетныйОборотыДтКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("НачПериод", Объект.НачПериод);
	Запрос.УстановитьПараметр("КонПериод", КонецДня(Объект.КонПериод));
	Запрос.УстановитьПараметр("СтЗ", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатратИДоходов);
	
	Результат = Запрос.Выполнить();
	ТЗ = Результат.Выгрузить();
	Объект.Затраты.Загрузить(ТЗ);
	
	

КонецПроцедуры

&НаКлиенте
Процедура ВидыОпераций(Команда)
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.Окно;			
	ВидыОперацийНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВидыОперацийНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""ПКО"" КАК Документ,
	|	ОперацииПКО.Ссылка КАК Ссылка,
	|	ОперацииПКО.Наименование,
	|	ОперацииПКО.СчетУчета,
	|	ОперацииПКО.СтатьяДвиженияДенежныхСредств,
	|	ОперацииПКО.ВидОперации,
	|	ОперацииПКО.Предопределенный
	|ИЗ
	|	Справочник.ОперацииПКО КАК ОперацииПКО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""РКО"",
	|	ОперацииРКО.Ссылка,
	|	ОперацииРКО.Наименование,
	|	ОперацииРКО.СчетУчета,
	|	ОперацииРКО.СтатьяДвиженияДенежныхСредств,
	|	ОперацииРКО.ВидОперации,
	|	ОперацииРКО.Предопределенный
	|ИЗ
	|	Справочник.ОперацииРКО КАК ОперацииРКО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ППИ"",
	|	ОперацииППИ.Ссылка,
	|	ОперацииППИ.Наименование,
	|	ОперацииППИ.СчетУчета,
	|	ОперацииППИ.СтатьяДвиженияДенежныхСредств,
	|	ОперацииППИ.ВидОперации,
	|	ОперацииППИ.Предопределенный
	|ИЗ
	|	Справочник.ОперацииППИ КАК ОперацииППИ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ППВ"",
	|	ОперацииППВ.Ссылка,
	|	ОперацииППВ.Наименование,
	|	ОперацииППВ.СчетУчета,
	|	ОперацииППВ.СтатьяДвиженияДенежныхСредств,
	|	ОперацииППВ.ВидОперации,
	|	ОперацииППВ.Предопределенный
	|ИЗ
	|	Справочник.ОперацииППВ КАК ОперацииППВ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	РезультатЗапроса = ВызовВыполнитьЗапрос(Запрос); 
	//ТЗ = Результат.Выгрузить();
	//ТЗ.ВыбратьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Запрос) Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.Окно;		
		
		ВыполнитьЗапросНаСервере();
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗапросНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = Объект.Запрос.ТекстЗапроса;
	РезультатЗапроса = ВызовВыполнитьЗапрос(Запрос); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРасчетов(Команда)
	ДублиВРНаСервере();
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.Таблица;			
	ОбновитьИнтерфейс();
КонецПроцедуры

&НаКлиенте
Процедура Приказы(Команда)
	ПриказыНаСервере();	
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.Таблица;			
	ОбновитьИнтерфейс();
КонецПроцедуры

&НаСервере
Процедура ДублиВРНаСервере()
	
	// дубли видов расчета
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыНачислений.Код КАК Код,
	|	СУММА(1) КАК Количество
	|ПОМЕСТИТЬ ВТКодыД
	|ИЗ
	|	ПланВидовРасчета.ВидыНачислений КАК ВидыНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыНачислений.Код
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыНачислений.Наименование КАК Наименование,
	|	СУММА(1) КАК Количество
	|ПОМЕСТИТЬ ВТНаимД
	|ИЗ
	|	ПланВидовРасчета.ВидыНачислений КАК ВидыНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыНачислений.Наименование
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТКодыД.Код,
	|	ВТКодыД.Количество,
	|	ВидыНачислений.Ссылка,
	|	ВидыНачислений.Наименование,
	|	""Совпадение по коду"" КАК Результат
	|ИЗ
	|	ВТКодыД КАК ВТКодыД
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ВидыНачислений КАК ВидыНачислений
	|		ПО ВТКодыД.Код = ВидыНачислений.Код
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыНачислений.Код,
	|	ВТНаимД.Количество,
	|	ВидыНачислений.Ссылка,
	|	ВТНаимД.Наименование,
	|	""Совпадение по наименованию""
	|ИЗ
	|	ВТНаимД КАК ВТНаимД
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ВидыНачислений КАК ВидыНачислений
	|		ПО ВТНаимД.Наименование = ВидыНачислений.Наименование";
	
	РезультатЗапроса = ВызовВыполнитьЗапрос(Запрос); 
	
КонецПроцедуры

&НаСервере
Процедура ПриказыНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	  "ВЫБРАТЬ
	  |	Сотрудники.Регистратор,
	  |	Сотрудники.Период КАК Период,
	  |	Сотрудники.ФизЛицо КАК ФизЛицо,
	  |	Сотрудники.Подразделение,
	  |	Сотрудники.Должность,
	  |	Сотрудники.ЗанимаемыхСтавок,
	  |	Сотрудники.ГрафикРаботы,
	  |	Сотрудники.ВидСобытия КАК ВидСобытия
	  |ИЗ
	  |	РегистрСведений.Сотрудники КАК Сотрудники
	  |ГДЕ
	  |	Сотрудники.Период МЕЖДУ &НачПериода И &КонПериода
	  |
	  |УПОРЯДОЧИТЬ ПО
	  |	ВидСобытия,
	  |	Период,
	  |	ФизЛицо
	  |АВТОУПОРЯДОЧИВАНИЕ";
	  Запрос.УстановитьПараметр("НачПериода", Объект.НачПериод);
	  Запрос.УстановитьПараметр("КонПериода", Объект.КонПериод);
	  
	 РезультатЗапроса = ВызовВыполнитьЗапрос(Запрос); 
	 
	 
	 
КонецПроцедуры


