#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если ТипЗнч(Параметры.Документ) = Тип("ДокументСсылка.ВедомостьЗП") Тогда
		Объект.Ведомость = Параметры.Документ;
	КонецЕсли;
	
	СписокРКОиППИ.Параметры.УстановитьЗначениеПараметра("Ведомость", Объект.Ведомость);
	Элементы.СписокРКОиППИ.Обновить();

	УстановитьВидимостьДоступностьЭлементов();
	
	ТипДокумента = "";
	Если ТипЗнч(Параметры.Документ) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		ТипДокумента = "ППИ";
		УстановитьЗаголовокКоманд(ТипДокумента);
	ИначеЕсли ТипЗнч(Параметры.Документ) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ТипДокумента = "РКО";
		УстановитьЗаголовокКоманд(ТипДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ведомость) Тогда
		ПроцедураОбращения = "ПриСозданииНаСервере";
		ДанныеДинамическогоСписка(ПроцедураОбращения);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

// Процедура - обработчик события ПриИзменении поля выбора Ведомость.
//
&НаКлиенте
Процедура ВедомостьПриИзменении(Элемент)
	СписокРКОиППИ.Параметры.УстановитьЗначениеПараметра("Ведомость", Объект.Ведомость);
	
	Элементы.СписокРКОиППИ.Обновить();
	
	ПроцедураОбращения = "ВедомостьПриИзменении";
	ДанныеДинамическогоСписка(ПроцедураОбращения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура вызывается при нажатии кнопки "СформироватьРКО" 
//
&НаКлиенте
Процедура СформироватьРКО(Команда)
	
	Отказ = Ложь;
	НаименованиеКомандыОбращения = "СформироватьРКО";
	ПроверкаДанныхПередФормированиемИПереформированием(НаименованиеКомандыОбращения, Отказ);
	
	Если Отказ Тогда 
		Возврат
	КонецЕсли;
	
	МассивДокументов = Новый Массив();
	СозданиеДокументовВыплаты(МассивДокументов, НаименованиеКомандыОбращения);
	
	Элементы.СписокРКОиППИ.Обновить();
	ОбновитьИнтерфейс();
	Оповестить("ОповеститьОСозданииНаОснованииВедомостьЗП");

	УстановитьВидимостьКоманд();
	Текст = НСтр("ru='Создание:'");
    Для каждого СтрокаДокумент Из МассивДокументов Цикл
        ПоказатьОповещениеПользователя(Текст, ПолучитьНавигационнуюСсылку(СтрокаДокумент), СтрокаДокумент, БиблиотекаКартинок.Информация32);
    КонецЦикла;

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ПереформироватьРКО" 
//
&НаКлиенте
Процедура ПереформироватьРКО(Команда)	
	
	Отказ = Ложь;	
	НаименованиеКомандыОбращения = "ПереформироватьРКО";	
	ПроверкаДанныхПередФормированиемИПереформированием(НаименованиеКомандыОбращения, Отказ);
	
	Если Отказ Тогда 
		Возврат
	КонецЕсли;
	
	МассивДокументов = Новый Массив();
	СозданиеДокументовВыплаты(МассивДокументов, НаименованиеКомандыОбращения);
	
	Элементы.СписокРКОиППИ.Обновить();
	ОбновитьИнтерфейс();
	Оповестить("ОповеститьОСозданииНаОснованииВедомостьЗП");

	Текст = НСтр("ru='Переформирование:'");
    Для каждого СтрокаДокумент Из МассивДокументов Цикл
        ПоказатьОповещениеПользователя(Текст, ПолучитьНавигационнуюСсылку(СтрокаДокумент), СтрокаДокумент, БиблиотекаКартинок.Информация32);
    КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура проверяет правильность заполнение данных.
//
// Параметры:
//  НаименованиеКомандыОбращения - Строка, содержит название команды из которой идет вызов процедуры 
//	Отказ - Булево, необходимо для отмены создания или переформирования документов, если не выполняется
//			правильность заполнения.
//
Процедура ПроверкаДанныхПередФормированиемИПереформированием(НаименованиеКомандыОбращения, Отказ)
	
	Если Переключатель = 0 Тогда
		Если НаименованиеКомандыОбращения = "ПереформироватьРКО" Тогда
			ТекстСообщения = НСтр("ru = 'Не выбран способ формирования документов выплаты: ""Общий"" или ""Индивидуальный"". Переформирование документов отменено!'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Не выбран способ формирования документов выплаты: ""Общий"" или ""Индивидуальный"". Формирование документов отменено!'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Переключатель",,Отказ)		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ведомость.СтатьяДвиженияДенежныхСредств) Тогда
		Если НаименованиеКомандыОбращения = "ПереформироватьРКО" Тогда
			ТекстСообщения = НСтр("ru = 'В выбранном документе ""Ведомость ЗП"" не заполнена статья движения денежных средств. Переформирование документов отменено!'");
		Иначе
			ТекстСообщения = НСтр("ru = 'В выбранном документе ""Ведомость ЗП"" не заполнена статья движения денежных средств. Формирование документов отменено!'");
		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Переключатель",,Отказ)		
	КонецЕсли;

	Если НаименованиеКомандыОбращения = "ПереформироватьРКО" Тогда
		Результат = ДанныеДинамическогоСписка(НаименованиеКомандыОбращения);
		
		КоличествоВедомостьЗарплата = Объект.Ведомость.Зарплата.Количество();
		КоличествоИмеющихсяДокументовВыплаты = Результат.Количество();
			
		Если Переключатель = 1 И
			 (Результат[0].Ссылка.Операция = ПредопределенноеЗначение("Справочник.ОперацииРКО.ВыплатаЗаработнойПлатыСотруднику")
			 ИЛИ Результат[0].Ссылка.Операция = ПредопределенноеЗначение("Справочник.ОперацииППИ.ПеречислениеЗаработнойПлатыСотруднику")) Тогда 
			 
			ТекстСообщения = НСтр("ru = 'Были созданы индивидуальные документы выплаты, невозможно создать общий документ выплаты. Переформирование документов отменено!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Переключатель",,Отказ)
		КонецЕсли;
		
		Если Переключатель = 2 И
			 (Результат[0].Ссылка.Операция = ПредопределенноеЗначение("Справочник.ОперацииРКО.ВыплатаЗаработнойПлатыПоВедомостям")
			 ИЛИ Результат[0].Ссылка.Операция = ПредопределенноеЗначение("Справочник.ОперацииППИ.ПеречислениеЗаработнойПлаты")) Тогда
			 
			ТекстСообщения = НСтр("ru = 'Был создан общий документ выплаты, невозможно создать индивидуальные документы выплаты. Переформирование документов отменено!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Переключатель",,Отказ)
		КонецЕсли;

		Если КоличествоВедомостьЗарплата < КоличествоИмеющихсяДокументовВыплаты И
			 (Результат[0].Ссылка.Операция = ПредопределенноеЗначение("Справочник.ОперацииРКО.ВыплатаЗаработнойПлатыСотруднику")
			 ИЛИ Результат[0].Ссылка.Операция = ПредопределенноеЗначение("Справочник.ОперацииППИ.ПеречислениеЗаработнойПлатыСотруднику")) Тогда
			
			ТекстСообщения = НСтр("ru = 'Количество сотрудников в документе ""Ведомость ЗП"" меньше, чем созданных документов выплаты. Переформирование документов отменено!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Переключатель",,Отказ)		
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

// Процедура создает и перезаполняет данные документов выплаты.
//
// Параметры:
//  МассивДокументов - Массив, в процедуру приходит пустым, а возвращает массив документов выплаты. 
//	НаименованиеКомандыОбращения - Строка, содержит название команды из которой идет вызов процедуры.
//
&НаСервере
Процедура СозданиеДокументовВыплаты(МассивДокументов, НаименованиеКомандыОбращения)

	НачатьТранзакцию();

	УстановитьПривилегированныйРежим(Истина);
	
	ДокументМенеджер = ?(Объект.Ведомость.ВидВыплаты = ПредопределенноеЗначение("Перечисление.ВидыВыплатыЗарплаты.ЧерезКассу"),
							Документы.РасходныйКассовыйОрдер,
							Документы.ПлатежноеПоручениеИсходящее);
													
	Если НаименованиеКомандыОбращения = "ПереформироватьРКО" Тогда

		Результат = ДанныеДинамическогоСписка(НаименованиеКомандыОбращения);
		
		// Общий для переформирования
		Если Переключатель = 1 И
			 (Результат[0].Ссылка.Операция = ПредопределенноеЗначение("Справочник.ОперацииРКО.ВыплатаЗаработнойПлатыПоВедомостям")
			 ИЛИ Результат[0].Ссылка.Операция = ПредопределенноеЗначение("Справочник.ОперацииППИ.ПеречислениеЗаработнойПлаты")) Тогда
			 
			СсылкаНаДокумент = Результат[0].Ссылка;
			ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
			ДокументОбъект.Дата							 = Объект.Ведомость.Дата;
			ДокументОбъект.СуммаДокумента 				 = Объект.Ведомость.СуммаДокумента;
			ДокументОбъект.СтатьяДвиженияДенежныхСредств = Объект.Ведомость.СтатьяДвиженияДенежныхСредств;
			
			ВыплатаЗаработнойПлаты = ДокументОбъект.ВыплатаЗаработнойПлаты;
			ВыплатаЗаработнойПлаты.Очистить();
			Для Каждого СтрокаТабличнойЧасти Из Объект.Ведомость.Зарплата Цикл
				НоваяСтрокаТабличнойЧасти = ВыплатаЗаработнойПлаты.Добавить();				
				НоваяСтрокаТабличнойЧасти.ФизЛицо = СтрокаТабличнойЧасти.ФизЛицо;
				НоваяСтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств = Объект.Ведомость.СтатьяДвиженияДенежныхСредств;
				НоваяСтрокаТабличнойЧасти.СуммаПлатежа = СтрокаТабличнойЧасти.СуммаКВыплате;
				НоваяСтрокаТабличнойЧасти.Ведомость = Объект.Ведомость;

			КонецЦикла;
					
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			МассивДокументов.Добавить(ДокументОбъект.Ссылка);
		
		
		// Индивидуальные для переформирования
		ИначеЕсли Переключатель = 2 И
				 (Результат[0].Ссылка.Операция = ПредопределенноеЗначение("Справочник.ОперацииРКО.ВыплатаЗаработнойПлатыСотруднику")
		 		 ИЛИ Результат[0].Ссылка.Операция = ПредопределенноеЗначение("Справочник.ОперацииППИ.ПеречислениеЗаработнойПлатыСотруднику")) Тогда
			 
			НомерДокументаПоСписку = 0;
			КоличествоВедомостьЗарплата = Объект.Ведомость.Зарплата.Количество();
			КоличествоИмеющихсяДокументовВыплаты = Результат.Количество();
			
			Для Каждого СтрокаТабличнойЧасти Из Объект.Ведомость.Зарплата Цикл
				
				Если КоличествоИмеющихсяДокументовВыплаты > 0 Тогда
					СсылкаНаДокумент = Результат[НомерДокументаПоСписку].Ссылка;
					ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
					ДокументОбъект.Дата							 = Объект.Ведомость.Дата;
					ДокументОбъект.СуммаДокумента 				 = Объект.Ведомость.СуммаДокумента;
					ДокументОбъект.СтатьяДвиженияДенежныхСредств = Объект.Ведомость.СтатьяДвиженияДенежныхСредств;
					
					ВыплатаЗаработнойПлаты = ДокументОбъект.ВыплатаЗаработнойПлаты;
					ВыплатаЗаработнойПлаты.Очистить();
					НоваяСтрокаТабличнойЧасти = ВыплатаЗаработнойПлаты.Добавить();				
					НоваяСтрокаТабличнойЧасти.ФизЛицо = СтрокаТабличнойЧасти.ФизЛицо;
					НоваяСтрокаТабличнойЧасти.СтатьяДвиженияДенежныхСредств = Объект.Ведомость.СтатьяДвиженияДенежныхСредств;
					НоваяСтрокаТабличнойЧасти.СуммаПлатежа = СтрокаТабличнойЧасти.СуммаКВыплате;
					НоваяСтрокаТабличнойЧасти.Ведомость = Объект.Ведомость;
										
					КоличествоИмеющихсяДокументовВыплаты = КоличествоИмеющихсяДокументовВыплаты - 1;
					НомерДокументаПоСписку = НомерДокументаПоСписку + 1;
					
				Иначе 
					ДокументОбъект = ДокументМенеджер.СоздатьДокумент();
					ДокументОбъект.Дата = Объект.Ведомость.Дата;
					ДокументОбъект.Заполнить(Новый Структура("Ведомость, Организация, Касса, БанковскийСчет, Контрагент, БанковскийСчетПолучателя, ФизЛицо, СуммаКВыплате, СтатьяДвиженияДенежныхСредств", 
												Объект.Ведомость, 
												Объект.Ведомость.Организация, 
												Объект.Ведомость.Касса, 
												Объект.Ведомость.БанковскийСчет,
												Объект.Ведомость.Контрагент,
												Объект.Ведомость.БанковскийСчетПолучателя, 
												СтрокаТабличнойЧасти.ФизЛицо, 
												СтрокаТабличнойЧасти.СуммаКВыплате,
												Объект.Ведомость.СтатьяДвиженияДенежныхСредств));
				КонецЕсли;

					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					
					МассивДокументов.Добавить(ДокументОбъект.Ссылка);
			
			КонецЦикла;
			
		Иначе
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
	ИначеЕсли НаименованиеКомандыОбращения = "СформироватьРКО" Тогда
		
		// Общий для формирования	
		Если Переключатель = 1 Тогда 
			ДокументОбъект = ДокументМенеджер.СоздатьДокумент();
			ДокументОбъект.Дата = Объект.Ведомость.Дата;
			ДокументОбъект.Заполнить(Объект.Ведомость);
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			МассивДокументов.Добавить(ДокументОбъект.Ссылка);
			
		// Индивидуальные для формирования	
		ИначеЕсли Переключатель = 2 Тогда 
			Для Каждого СтрокаТабличнойЧасти Из Объект.Ведомость.Зарплата Цикл     
				ДокументОбъект = ДокументМенеджер.СоздатьДокумент();
				ДокументОбъект.Дата = Объект.Ведомость.Дата;
				ДокументОбъект.Заполнить(Новый Структура("Ведомость, Организация, Касса, БанковскийСчет, Контрагент, БанковскийСчетПолучателя, ФизЛицо, СуммаКВыплате, СтатьяДвиженияДенежныхСредств", 
											Объект.Ведомость, 
											Объект.Ведомость.Организация, 
											Объект.Ведомость.Касса, 
											Объект.Ведомость.БанковскийСчет,
											Объект.Ведомость.Контрагент,
											Объект.Ведомость.БанковскийСчетПолучателя, 
											СтрокаТабличнойЧасти.ФизЛицо, 
											СтрокаТабличнойЧасти.СуммаКВыплате,
											Объект.Ведомость.СтатьяДвиженияДенежныхСредств));

				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				МассивДокументов.Добавить(ДокументОбъект.Ссылка);
			КонецЦикла;	
		Иначе
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;

	КонецЕсли;

	ЗафиксироватьТранзакцию();	
	
КонецПроцедуры

// Функция возвращает таблицу значений (документы выплаты сформированные на основании "ВедомостьЗП",
//			если таковые имеются). А также устанавливает видимость команд на форме.
// 
// Параметры:
//  ПроцедураОбращения - Строка, содержит название процедуры из которой идет вызов функции. 
//
&НаСервере
Функция ДанныеДинамическогоСписка(ПроцедураОбращения)
	
	Схема = Элементы.СписокРКОиППИ.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.СписокРКОиППИ.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если ПроцедураОбращения = "ВедомостьПриИзменении" ИЛИ ПроцедураОбращения = "ПриСозданииНаСервере" Тогда
		УстановитьЗаголовокКоманд();
		Если Результат.Количество() > 0 Тогда
			УстановитьВидимостьКоманд();
			Если Результат[0].Ссылка.Операция = ПредопределенноеЗначение("Справочник.ОперацииРКО.ВыплатаЗаработнойПлатыСотруднику")
				ИЛИ Результат[0].Ссылка.Операция = ПредопределенноеЗначение("Справочник.ОперацииППИ.ПеречислениеЗаработнойПлатыСотруднику")Тогда
				Переключатель = 2;
			ИначеЕсли Результат[0].Ссылка.Операция = ПредопределенноеЗначение("Справочник.ОперацииРКО.ВыплатаЗаработнойПлатыПоВедомостям")
				ИЛИ Результат[0].Ссылка.Операция = ПредопределенноеЗначение("Справочник.ОперацииППИ.ПеречислениеЗаработнойПлаты")Тогда
				Переключатель = 1;
			КонецЕсли;
		Иначе
			УстановитьВидимостьДоступностьЭлементов();
		КонецЕсли;
	Иначе
		Возврат Результат
	КонецЕсли;

КонецФункции

// Процедура установление видимости элементов формы
//
Процедура УстановитьВидимостьДоступностьЭлементов()

	Элементы.ПереформироватьРКО.Видимость 	   = Ложь;
	Элементы.СформироватьРКО.КнопкаПоУмолчанию = Истина;
	Элементы.СформироватьРКО.Видимость 	  	   = Истина;
	
КонецПроцедуры

// Процедура установление видимости команд формы
//
Процедура УстановитьВидимостьКоманд()

	Элементы.СформироватьРКО.Видимость 		   = Ложь;
	Элементы.СформироватьРКО.КнопкаПоУмолчанию = Ложь;
	
	Элементы.ПереформироватьРКО.Видимость		  = Истина;
	Элементы.ПереформироватьРКО.КнопкаПоУмолчанию = Истина;	

КонецПроцедуры

// Процедура установление заголовков для команд формы
//
Процедура УстановитьЗаголовокКоманд(ТипДокумента = Неопределено)

	Если Объект.Ведомость.ВидВыплаты = ПредопределенноеЗначение("Перечисление.ВидыВыплатыЗарплаты.ЧерезКассу") 
		ИЛИ ТипДокумента = "РКО" Тогда
		Элементы.СформироватьРКО.Заголовок = "СформироватьРКО";
		Элементы.ПереформироватьРКО.Заголовок = "ПереформироватьРКО";
	ИначеЕсли Объект.Ведомость.ВидВыплаты = ПредопределенноеЗначение("Перечисление.ВидыВыплатыЗарплаты.ЧерезБанк") 
		ИЛИ ТипДокумента = "ППИ" Тогда
		Элементы.СформироватьРКО.Заголовок = "СформироватьППИ";
		Элементы.ПереформироватьРКО.Заголовок = "ПереформироватьППИ";
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти
