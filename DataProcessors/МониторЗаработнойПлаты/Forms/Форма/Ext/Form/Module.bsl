#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОтборПериодРегистрации = НачалоМесяца(ТекущаяДатаСеанса());
	МесяцСтрокой = Формат(ОтборПериодРегистрации, "ДФ='MMMM yyyy'");	
	
	ОтборОрганизация = ПолучитьОрганизациюПоУмолчанию();
	
	ПолучитьДанныеУчетнойПолитикиПоПерсоналу();
	
	УчетЗаработнойПлатыВВалюте = ПолучитьФункциональнуюОпцию("УчетЗаработнойПлатыВВалюте");
	
	ПриказыКадровые.Параметры.УстановитьЗначениеПараметра("ФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());	
	СписокВыплаты.Параметры.УстановитьЗначениеПараметра("НачалоПериода", НачалоМесяца(ОтборПериодРегистрации) - 1);
	СписокВыплаты.Параметры.УстановитьЗначениеПараметра("КонецПериода", КонецМесяца(ОтборПериодРегистрации) + 1);	
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьПараметрыДинамическихСписков();
	СформироватьТаблицуСписокСотрудников();
	УстановитьОтборНаСписокСотрудников();
	
	СписокСотрудников.Сортировать("ФизЛицо, ТабельныйНомер");
КонецПроцедуры

// Процедура - обработчик события формы "ПриЗагрузкеДанныхИзНастроекНаСервере".
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОтборПериодРегистрации 	= Настройки.Получить("ОтборПериодРегистрации"); 
	
	Если НЕ ЗначениеЗаполнено(ОтборПериодРегистрации) Тогда 
		ОтборПериодРегистрации = ТекущаяДатаСеанса();
	КонецЕсли;	
	
	МесяцСтрокой = Формат(ОтборПериодРегистрации, "ДФ='MMMM yyyy'");
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода ОтборСотрудник.
//
&НаКлиенте
Процедура ОтборСотрудникПриИзменении(Элемент)
	УстановитьОтборНаСписокСотрудников();
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСотрудники;	
	
	Отбор = Новый Структура();
	Отбор.Вставить("ФизЛицо",ОтборСотрудник);
	Строки = СписокСотрудников.НайтиСтроки(Отбор);
	Если Строки.Количество() > 0 Тогда
		Элементы.СписокСотрудников.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор(); 
	КонецЕсли;	
	
	//Если ЗначениеЗаполнено(ОтборСотрудник) Тогда
	//	Элементы.ДекорацияСотрудникПодоходныйНалог.Заголовок 	= "Сотрудник: " + Строка(ОтборСотрудник);
	//	Элементы.ДекорацияСотрудникСоцотчисления.Заголовок 		= "Сотрудник: " + Строка(ОтборСотрудник);
	//Иначе
	//	Элементы.ДекорацияСотрудникПодоходныйНалог.Заголовок 	= "Сотрудник: " + Строка(ОтборФизЛицо);
	//	Элементы.ДекорацияСотрудникСоцотчисления.Заголовок 		= "Сотрудник: " + Строка(ОтборФизЛицо);
	//КонецЕсли;	
	
	УстановитьПараметрыДинамическихСписков();
	СформироватьЗаголовок();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборПодразделение.
//
&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСотрудники;
	УстановитьПараметрыДинамическихСписков();
	УстановитьОтборНаСписокСотрудников();
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПоТабельномуНомеруПриИзменении(Элемент)
	
	Если СортировкаПоТабельномуНомеру Тогда
		Сортировка = "ТабельныйНомер, ФизЛицо";
	Иначе
		Сортировка = "ФизЛицо, ТабельныйНомер";		
	КонецЕсли;
	
	СписокСотрудников.Сортировать(Сортировка);
КонецПроцедуры

&НаКлиенте
Процедура ВсеСотрудникиПриИзменении(Элемент)
	
	УстановитьПараметрыДинамическихСписков();	
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ОтборОрганизация = ПолучитьОрганизациюПоУмолчанию();
		
		ТекстСообщения = НСтр("ru = 'Организация не может быть пустой.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;	
	
	ПолучитьДанныеУчетнойПолитикиПоПерсоналу();
	
	УстановитьПараметрыДинамическихСписков();
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокСотрудников

// Процедура - обработчик события ПриАктивизацииСтроки ТЧ СписокСотрудников 
//
&НаКлиенте
Процедура СписокСотрудниковПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ОтборФизЛицо = ?(ЗначениеЗаполнено(ОтборСотрудник), ОтборСотрудник, Элемент.ТекущиеДанные.ФизЛицо);
		
		//Элементы.ДекорацияСотрудникПодоходныйНалог.Заголовок = "Сотрудник: " + Строка(ОтборФизЛицо);
		//Элементы.ДекорацияСотрудникСоцотчисления.Заголовок = "Сотрудник: " + Строка(ОтборФизЛицо);
		
		УстановитьПараметрыДинамическихСписков();		
		СформироватьЗаголовок();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПриказыКадровые

&НаКлиенте
Процедура ПриказыКадровыеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СсылкаДокумента = Элементы.ПриказыКадровые.ТекущиеДанные.Регистратор;
	НазваниеДокумента = ПолучитьНазваниеДокумента(СсылкаДокумента);
	ПараметрыФормы 	= Новый Структура("Ключ", СсылкаДокумента);
	ОткрытьФорму("Документ." + НазваниеДокумента + ".ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПлановыеНачисленияУдержания

&НаКлиенте
Процедура СписокПлановыеНачисленияУдержанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СсылкаДокумента = Элементы.СписокПлановыеНачисленияУдержания.ТекущиеДанные.РегистраторНачало;
	НазваниеДокумента = ПолучитьНазваниеДокумента(СсылкаДокумента);
	ПараметрыФормы 	= Новый Структура("Ключ", СсылкаДокумента);
	ОткрытьФорму("Документ." + НазваниеДокумента + ".ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНачисленияУдержания

&НаКлиенте
Процедура СписокНачисленияУдержанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СсылкаДокумента = Элементы.СписокНачисленияУдержания.ТекущиеДанные.Регистратор;
	НазваниеДокумента = ПолучитьНазваниеДокумента(СсылкаДокумента);
	ПараметрыФормы 	= Новый Структура("Ключ", СсылкаДокумента);
	ОткрытьФорму("Документ." + НазваниеДокумента + ".ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокВыплаты

&НаКлиенте
Процедура СписокВыплатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СсылкаДокумента = Элементы.СписокВыплаты.ТекущиеДанные.Регистратор;
	НазваниеДокумента = ПолучитьНазваниеДокумента(СсылкаДокумента);
	ПараметрыФормы 	= Новый Структура("Ключ", СсылкаДокумента);
	ОткрытьФорму("Документ." + НазваниеДокумента + ".ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПодоходныйНалог

&НаКлиенте
Процедура СписокПодоходныйНалогПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.СписокПодоходныйНалог.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено И Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "ГруппаПодоходныйНалог" Тогда
		
		УстановитьПараметрыДинамическихСписков(ТекущаяСтрока.ФизЛицо);	
		
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокСоциальныйФонд

&НаКлиенте
Процедура СписокСоциальныйФондПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.СписокСоциальныйФонд.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено И Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "ГруппаСоциальныйФонд" Тогда
		
		УстановитьПараметрыДинамическихСписков(ТекущаяСтрока.ФизЛицо);	
		
	КонецЕсли;		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСотрудники И ЗначениеЗаполнено(ОтборСотрудник)  Тогда 
		
		СформироватьТаблицуСписокСотрудников();
		УстановитьОтборНаСписокСотрудников();
		
		Отбор = Новый Структура();
		Отбор.Вставить("ФизЛицо",ОтборСотрудник);
		Строки = СписокСотрудников.НайтиСтроки(Отбор);
		Если Строки.Количество() > 0 Тогда
			Элементы.СписокСотрудников.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор(); 
		КонецЕсли;	
		
		УстановитьПараметрыДинамическихСписков();
	Иначе 
		УстановитьПараметрыДинамическихСписков();
		СформироватьТаблицуСписокСотрудников();
		УстановитьОтборНаСписокСотрудников()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерепровестиДокументы(Команда)
	ПоказатьРезультатПерепроведения = Истина;
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("МассивСсылок", ПолучитьМассивСсылокДляПерепроведения());
	РезультатВыполнения = ПерепровестиДокументыНаСервере(ПараметрыКоманды);
	ПараметрыОбработчикаОжидания = Новый Структура();
	
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуРасшифровка(Команда)
	ПоказатьРезультатПерепроведения = Ложь;
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаПоПерсоналу(Команда)
	ОткрытьФорму("РегистрСведений.УчетнаяПолитикаПоПерсоналу.ФормаСписка");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ВводМесяцаОбработкаВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	УстановитьПараметрыДинамическихСписков();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()	
	
//	Элементы.СписокПриказов_ПерепровестиДокументы.Видимость = НЕ ПоказатьРезультатПерепроведения;
	Элементы.ПриказыКадровые.Видимость = НЕ ПоказатьРезультатПерепроведения;
	
	Элементы.Результат.Видимость = ПоказатьРезультатПерепроведения;
	Элементы.СостояниеПрогресса.Видимость = ПоказатьРезультатПерепроведения;
	Элементы.ПоказатьТаблицуДокументов.Видимость = ПоказатьРезультатПерепроведения;
	
	ПННарастающимИтогом = НЕ ДанныеУчетнойПолитикиПоПерсоналу.РасчетПНБезНакопления;
	                                                              
	Элементы.СписокПодоходныйНалогНачисленоНГ.Видимость 		= ПННарастающимИтогом;
	Элементы.СписокПодоходныйНалогОблагаемыйДоходНГ.Видимость 	= ПННарастающимИтогом;
	Элементы.СписокПодоходныйНалогПФРНГ.Видимость 				= ПННарастающимИтогом;
	Элементы.СписокПодоходныйНалогГНПФРНГ.Видимость 			= ПННарастающимИтогом;
	Элементы.СписокПодоходныйНалогПИВНГ.Видимость 				= ПННарастающимИтогом;
	Элементы.СписокПодоходныйНалогМРДНГ.Видимость 				= ПННарастающимИтогом;
	Элементы.СписокПодоходныйНалогОДПННГ.Видимость 				= ПННарастающимИтогом;
	Элементы.СписокПодоходныйНалогПННГ.Видимость 				= ПННарастающимИтогом;
	Элементы.СписокПодоходныйНалогДПННГ.Видимость 				= ПННарастающимИтогом;
	
	Элементы.ДекорацияСотрудникПодоходныйНалог.Видимость 		= НЕ ВсеСотрудники;
	Элементы.СписокПодоходныйНалогМесяц.Видимость 				= НЕ ВсеСотрудники;
	Элементы.СписокПодоходныйНалогФизЛицо.Видимость 			= ВсеСотрудники;
	
	Элементы.ДекорацияСотрудникСоцотчисления.Видимость 			= НЕ ВсеСотрудники;
	Элементы.СписокСоциальныйФондМесяц.Видимость 				= НЕ ВсеСотрудники;
	Элементы.СписокСоциальныйФондФизЛицо.Видимость 				= ВсеСотрудники;
	
	Элементы.ПриказыКадровыеВалюта.Видимость 						= УчетЗаработнойПлатыВВалюте;
	Элементы.ПриказыКадровыеКурс.Видимость 							= УчетЗаработнойПлатыВВалюте;
	Элементы.ПриказыКадровыеРезультат.Видимость 					= УчетЗаработнойПлатыВВалюте;
	Элементы.СписокПлановыеНачисленияУдержанияВалюта.Видимость 		= УчетЗаработнойПлатыВВалюте;
	Элементы.СписокПлановыеНачисленияУдержанияКурс.Видимость 		= УчетЗаработнойПлатыВВалюте;
	Элементы.СписокПлановыеНачисленияУдержанияРезультат.Видимость 	= УчетЗаработнойПлатыВВалюте;
	Элементы.СписокНачисленияУдержанияВалюта.Видимость 				= УчетЗаработнойПлатыВВалюте;
	Элементы.СписокНачисленияУдержанияКурс.Видимость 				= УчетЗаработнойПлатыВВалюте;
	Элементы.СписокНачисленияУдержанияРезультат.Видимость 			= УчетЗаработнойПлатыВВалюте;
	
	Если ПННарастающимИтогом Тогда
		Элементы.ДекорацияРасчетПН.Заголовок = "Расчет ПН с накоплением";	
	Иначе
		Элементы.ДекорацияРасчетПН.Заголовок = "Расчет ПН без накоплением";
	КонецЕсли;	
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьПараметрыДинамическихСписков(ФизЛицоДляВидовНачислений = Неопределено)	
	
	НачалоПериода = НачалоМесяца(ОтборПериодРегистрации);
	КонецПериода  = КонецМесяца(ОтборПериодРегистрации);
	ОтборФизЛицо  = ?(ЗначениеЗаполнено(ОтборСотрудник), ОтборСотрудник, ОтборФизЛицо);
	
	// Виды начислений
	Если ФизЛицоДляВидовНачислений <> Неопределено Тогда	
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВидовНачисления, "КонецПериода", 	КонецПериода);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВидовНачисления, "Организация", 	ОтборОрганизация);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВидовНачисления, "ФизЛицо", 		ФизЛицоДляВидовНачислений);		
		Возврат;
	ИначеЕсли НЕ ВсеСотрудники Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВидовНачисления, "КонецПериода", 	КонецПериода);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВидовНачисления, "Организация", 	ОтборОрганизация);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВидовНачисления, "ФизЛицо", 		ОтборФизЛицо);
	КонецЕсли;
	
	// Приказы
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПриказыКадровые, "ФизЛицо", 		 ОтборФизЛицо);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПриказыКадровые, "Организация", 	 ОтборОрганизация);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПриказыКадровые, "Подразделение", ОтборПодразделение);
	
	// ПНУ
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПлановыеНачисленияУдержания, "НачалоПериода", 	НачалоПериода);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПлановыеНачисленияУдержания, "КонецПериода", 	КонецПериода);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПлановыеНачисленияУдержания, "Организация", 	 ОтборОрганизация);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПлановыеНачисленияУдержания, "ФизЛицо", 		ОтборФизЛицо);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПлановыеНачисленияУдержания, "Подразделение", 	ОтборПодразделение);
	
	// Выплаты
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВыплаты, "НачалоПериода", 	НачалоПериода);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВыплаты, "КонецПериода", 	КонецПериода);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВыплаты, "Организация", 	ОтборОрганизация);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВыплаты, "ФизЛицо", 		ОтборФизЛицо);
	
	// НиУ
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНачисленияУдержания, "НачалоПериода", 	НачалоПериода);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНачисленияУдержания, "КонецПериода", 	КонецПериода);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНачисленияУдержания, "Организация", 	ОтборОрганизация);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНачисленияУдержания, "ФизЛицо", 		ОтборФизЛицо);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНачисленияУдержания, "Подразделение", 	ОтборПодразделение);
	
	// Подоходный налог
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПодоходныйНалог, "НачалоГода", 	НачалоГода(НачалоПериода));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПодоходныйНалог, "КонецПериода", 	КонецПериода);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПодоходныйНалог, "Организация", 	ОтборОрганизация);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПодоходныйНалог, "ВсеСотрудники", 	ВсеСотрудники);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПодоходныйНалог, "Месяц", 			ОтборПериодРегистрации);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПодоходныйНалог, "ФизЛицо", 		
									?(ВсеСотрудники, ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка"), ОтборФизЛицо));
	
	// Социальный фонд
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСоциальныйФонд, "НачалоГода", 		НачалоГода(НачалоПериода));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСоциальныйФонд, "КонецПериода", 	КонецПериода);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСоциальныйФонд, "Организация", 	ОтборОрганизация);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСоциальныйФонд, "ВсеСотрудники", 	ВсеСотрудники);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСоциальныйФонд, "Месяц", 			ОтборПериодРегистрации);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСоциальныйФонд, "ФизЛицо", 		
									?(ВсеСотрудники, ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка"), ОтборФизЛицо));
									
	// Неявки
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНеявки, "НачалоПериода", НачалоПериода);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНеявки, "КонецПериода", КонецПериода);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНеявки, "Организация", ОтборОрганизация);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНеявки, "ФизЛицо", ОтборФизЛицо);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНеявки, "Подразделение", ОтборПодразделение);
КонецПроцедуры // УстановитьПараметрыДинамическихСписков()

&НаКлиенте
Процедура СформироватьЗаголовок()

	Если ЗначениеЗаполнено(ОтборСотрудник) Тогда
		Заголовок = СтрШаблон(НСтр("ru = 'Монитор заработной платы. Сотрудник: %1'"), Строка(ОтборСотрудник));
	Иначе
		Заголовок = СтрШаблон(НСтр("ru = 'Монитор заработной платы. Сотрудник: %1'"), Строка(ОтборФизЛицо));
	КонецЕсли;	

КонецПроцедуры // СформироватьЗаголовок()

&НаСервере
Процедура СформироватьТаблицуСписокСотрудников()
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиСрезПоследних.ФизЛицо.Код КАК ТабельныйНомер,
		|	СотрудникиСрезПоследних.ФизЛицо КАК ФизЛицо,
		|	СотрудникиСрезПоследних.Должность КАК Должность,
		|	СотрудникиСрезПоследних.Подразделение КАК Подразделение,
		|	СотрудникиСрезПоследних.Регистратор КАК Регистратор,
		|	СотрудникиСрезПоследних.ВидСобытия КАК ВидСобытия,
		|	СотрудникиСрезПоследних.ГрафикРаботы КАК ГрафикРаботы
		|ПОМЕСТИТЬ ВременнаяТаблицаРаботающиеНаНачалоПериода
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК СотрудникиСрезПоследних
		|ГДЕ
		|	СотрудникиСрезПоследних.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиСрезПоследних.ФизЛицо.Код КАК ТабельныйНомер,
		|	СотрудникиСрезПоследних.ФизЛицо КАК ФизЛицо,
		|	СотрудникиСрезПоследних.Должность КАК Должность,
		|	СотрудникиСрезПоследних.Подразделение КАК Подразделение,
		|	СотрудникиСрезПоследних.Регистратор КАК Регистратор,
		|	СотрудникиСрезПоследних.ВидСобытия КАК ВидСобытия,
		|	СотрудникиСрезПоследних.ГрафикРаботы КАК ГрафикРаботы
		|ПОМЕСТИТЬ ВременнаяТаблицаПринятыеВТеченииПериода
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПоследних(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И НЕ ФизЛицо В
		|						(ВЫБРАТЬ
		|							ТаблицаСотрудники.ФизЛицо
		|						ИЗ
		|							ВременнаяТаблицаРаботающиеНаНачалоПериода КАК ТаблицаСотрудники)) КАК СотрудникиСрезПоследних
		|ГДЕ
		|	СотрудникиСрезПоследних.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаРаботающиеНаНачалоПериода.ТабельныйНомер КАК ТабельныйНомер,
		|	ВременнаяТаблицаРаботающиеНаНачалоПериода.ФизЛицо КАК ФизЛицо,
		|	ВременнаяТаблицаРаботающиеНаНачалоПериода.Должность КАК Должность,
		|	ВременнаяТаблицаРаботающиеНаНачалоПериода.Подразделение КАК Подразделение,
		|	ВременнаяТаблицаРаботающиеНаНачалоПериода.Регистратор КАК Регистратор,
		|	ВременнаяТаблицаРаботающиеНаНачалоПериода.ВидСобытия КАК ВидСобытия,
		|	ВременнаяТаблицаРаботающиеНаНачалоПериода.ГрафикРаботы КАК ГрафикРаботы,
		|	ВременнаяТаблицаРаботающиеНаНачалоПериода.ФизЛицо.Наименование КАК ФизЛицоНаименование
		|ИЗ
		|	ВременнаяТаблицаРаботающиеНаНачалоПериода КАК ВременнаяТаблицаРаботающиеНаНачалоПериода
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаПринятыеВТеченииПериода.ТабельныйНомер,
		|	ВременнаяТаблицаПринятыеВТеченииПериода.ФизЛицо,
		|	ВременнаяТаблицаПринятыеВТеченииПериода.Должность,
		|	ВременнаяТаблицаПринятыеВТеченииПериода.Подразделение,
		|	ВременнаяТаблицаПринятыеВТеченииПериода.Регистратор,
		|	ВременнаяТаблицаПринятыеВТеченииПериода.ВидСобытия,
		|	ВременнаяТаблицаПринятыеВТеченииПериода.ГрафикРаботы,
		|	ВременнаяТаблицаПринятыеВТеченииПериода.ФизЛицо.Наименование
		|ИЗ
		|	ВременнаяТаблицаПринятыеВТеченииПериода КАК ВременнаяТаблицаПринятыеВТеченииПериода
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизЛицоНаименование";		
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоМесяца(ОтборПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", 	КонецМесяца(ОтборПериодРегистрации));
	Запрос.УстановитьПараметр("Организация", 	ОтборОрганизация);
	РезультатЗапроса = Запрос.Выполнить();
	СписокСотрудников.Загрузить(РезультатЗапроса.Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНаСписокСотрудников()

	СтруктураОтбора = Неопределено;
	МассивЗаполнения = Новый Массив();
	СтрокаКолонокФиксированнойСтруктуры = "";
	
	Если ЗначениеЗаполнено(ОтборСотрудник) Тогда
		СтрокаКолонокФиксированнойСтруктуры = "ФизЛицо";
		МассивЗаполнения.Добавить(ОтборСотрудник);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
		Если СтрокаКолонокФиксированнойСтруктуры = "" Тогда
			СтрокаКолонокФиксированнойСтруктуры = "Подразделение";
		Иначе
			СтрокаКолонокФиксированнойСтруктуры = СтрокаКолонокФиксированнойСтруктуры + ", Подразделение";
		КонецЕсли;	
		МассивЗаполнения.Добавить(ОтборПодразделение);
	КонецЕсли;
	
	
	Если МассивЗаполнения.Количество() = 1 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаКолонокФиксированнойСтруктуры, МассивЗаполнения[0]);
		
	ИначеЕсли МассивЗаполнения.Количество() = 2 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаКолонокФиксированнойСтруктуры, 
									МассивЗаполнения[0],
									МассивЗаполнения[1]);
	КонецЕсли;	
		
	Элементы.СписокСотрудников.ОтборСтрок = СтруктураОтбора;	
КонецПроцедуры

&НаСервере
Функция ПолучитьОрганизациюПоУмолчанию()

	Возврат Справочники.Организации.ОрганизацияПоУмолчанию();	

КонецФункции // ПолучитьОрганизациюПоУмолчанию()

&НаСервере
Процедура ПолучитьДанныеУчетнойПолитикиПоПерсоналу()

	ДанныеУчетнойПолитикиПоПерсоналу = БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиПоПерсоналу(ОтборПериодРегистрации, ОтборОрганизация);	

КонецПроцедуры

// Функция получения ссылок документов.
//
// Параметры:
//	Ссылка - ДокументСсылка - ссылка на выбранный документ.
//
// Возвращаемое значение:
//	Имя - Строка - название документа.
//
&НаСервереБезКонтекста
Функция ПолучитьНазваниеДокумента(Ссылка)
	
	Возврат Ссылка.Метаданные().Имя

КонецФункции

#КонецОбласти

#Область РедактированиеМесяцаСтрокой

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОповещениеЗавершения = Новый ОписаниеОповещения("ВводМесяцаОбработкаВыбораЗавершение", ЭтаФорма);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "ОтборПериодРегистрации", "МесяцСтрокой",,ОповещениеЗавершения);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПериодРегистрации.
//
&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "ОтборПериодРегистрации", "МесяцСтрокой", Модифицированность);
	
	ПолучитьДанныеУчетнойПолитикиПоПерсоналу();
	
	УстановитьПараметрыДинамическихСписков();
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "ОтборПериодРегистрации", "МесяцСтрокой", Направление, Модифицированность);
	УстановитьПараметрыДинамическихСписков();
КонецПроцедуры

&НаКлиенте
//Процедура обработчик события очистки данных поля ПериодРегистрации
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	ОтборПериодРегистрации = Неопределено;
	УстановитьПараметрыДинамическихСписков();
	
КонецПроцедуры //ОтборПериодРегистрацииОчистка()

&НаКлиенте
Процедура ПериодРегистрацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ФоновоеЗаданиеПерепровестиДокументы

&НаСервере
Функция ПолучитьМассивСсылокДляПерепроведения()

	Схема = Элементы.ПриказыКадровые.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.ПриказыКадровые.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаКадровыхПриказов = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	МассивСсылок = Новый Массив;

	Для Каждого СтрокаТаблицыЗначений Из ТаблицаКадровыхПриказов Цикл
		МассивСсылок.Добавить(СтрокаТаблицыЗначений.Регистратор);
	КонецЦикла;
	
	Возврат МассивСсылок;	

КонецФункции // ()

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЭтаФорма.СостояниеПрогресса = 100;
			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			ДанныеПрогресса = ПолучитьИзВременногоХранилища(АдресХранилищаПрогресса);
			ЭтаФорма.СостояниеПрогресса = ДанныеПрогресса;
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;	
КонецПроцедуры

&НаСервере
Функция ПерепровестиДокументыНаСервере(ПараметрыКоманды)
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	АдресРасшифровки = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресХранилищаПрогресса = ПоместитьВоВременноеХранилище(, УникальныйИдентификатор);
	ПараметрыКоманды.Вставить("АдресРасшифровки", АдресРасшифровки);
	ПараметрыКоманды.Вставить("АдресХранилищаПрогресса", АдресХранилищаПрогресса);
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.МониторЗП.ПерепровестиДокументы",
		ПараметрыКоманды,
		СтрШаблон(НСтр("ru = 'Перепроведение документов: %1'"), ЭтаФорма.Заголовок));
	
	АдресХранилища       = РезультатВыполнения.АдресХранилища;
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат         = РезультатВыполнения.Результат;
	
	ИдентификаторЗадания = Неопределено;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
КонецФункции

#КонецОбласти
