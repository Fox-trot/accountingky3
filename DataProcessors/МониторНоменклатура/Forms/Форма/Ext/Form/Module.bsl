#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Дата = ТекущаяДатаСеанса();
	ДатаНачала = НачалоМесяца(Дата);
	ДатаОкончания = КонецМесяца(Дата);

	ОсновнойТекстЗапросаСпискаТМЗ_Главный = СписокТМЗ_Главный.ТекстЗапроса;
	ОтборОрганизация = ПолучитьОрганизациюПоУмолчанию();
	
	Если Параметры.КлючНазначенияИспользования = "ЗапускМонитораИзДокумента" Тогда
		ОтборНоменклатура = Параметры.Номенклатура;
		ОтборОрганизация = Параметры.Организация;
		ДанныеФормыСтруктура  = Параметры.СтруктураДанных;
		СформироватьТабличныйДокументИзДокумента(Параметры.СтруктураДанных);
		ЗапускМонитораИзДокумента = Истина;
	КонецЕсли;
	
	ОтборПартионныйУчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаНачала, ОтборОрганизация).СпособОценкиТМЗ = Перечисления.СпособыОценки.ФИФО;
	
	УстановитьПараметрыДинамическихСписков();
	ЗаполнитьСписокДокументов();
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьОтборыСписокТМЗ_Главный();
	УстановитьОтборыСписокТМЗ_ПоСкладам();
	УстановитьОтборыСписокТМЗ_ПоСчетам();
	УстановитьОтборыСписокДокументов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	КорректностьДат = ПроверитьКорректностьУказаныхДат();	
	
	Если КорректностьДат Тогда
		ОтборПартионныйУчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаНачала, ОтборОрганизация).СпособОценкиТМЗ = ПредопределенноеЗначение("Перечисление.СпособыОценки.ФИФО");
	
		УстановитьВидимостьДоступностьЭлементов();
		
		УстановитьПараметрыДинамическихСписков(Истина);
		ЗаполнитьСписокДокументов();
		УстановитьОтборыСписокДокументов();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	КорректностьДат = ПроверитьКорректностьУказаныхДат();	
	
	Если КорректностьДат Тогда
		УстановитьПараметрыДинамическихСписков(Истина);
		ЗаполнитьСписокДокументов();
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокТМЗ

&НаКлиенте
Процедура СписокТМЗПриАктивизацииСтроки(Элемент)
	ТекущаяСтрока = Элементы.СписокТМЗ_Главный.ТекущиеДанные;
	
	Если ОтборПартионныйУчет И ТекущаяСтрока <> Неопределено Тогда
		Партия = ТекущаяСтрока.Партия;
	Иначе
		Партия = Неопределено;
	КонецЕсли;	
	
	УстановитьОтборыСписокТМЗ_ПоСкладам(ТекущаяСтрока.Номенклатура);
	УстановитьОтборыСписокТМЗ_ПоСчетам(ТекущаяСтрока.Номенклатура);
	УстановитьОтборыСписокДокументов(Партия, ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Счет, ТекущаяСтрока.Склад);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерепровестиДокументы(Команда)
	ПоказатьРезультатПерепроведения = Истина;
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("МассивСсылок", ПолучитьМассивСсылокДляПерепроведения());
	РезультатВыполнения = ПерепровестиДокументыНаСервере(ПараметрыКоманды);
	ПараметрыОбработчикаОжидания = Новый Структура();
	
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуРасшифровкаПоСобытиямОС(Команда)
	ПоказатьРезультатПерепроведения = Ложь;
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетМатериальнаяВедомость(Команда)
	
	ОткрытьФорму("Отчет.МатериальнаяВедомость.ФормаОбъекта");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетКонтрольОтрицательныхОстатков(Команда)
	
	ОткрытьФорму("Отчет.КонтрольОтрицательныхОстатков.ФормаОбъекта");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОборотнаяВедомостьТоварыПоГруппам(Команда)
	
	ОткрытьФорму("Отчет.ОборотнаяВедомостьТоваровПоГруппам.ФормаОбъекта");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОборотноСальдоваяВедомостьПоСчету(Команда)
	
	ОткрытьФорму("Отчет.ОборотноСальдоваяВедомостьПоСчету.ФормаОбъекта");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОборотноСальдоваяВедомостьПоТоварам(Команда)
	
	ОткрытьФорму("Отчет.ОборотноСальдоваяВедомостьПоТоварам.ФормаОбъекта");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОстаткиТоваров(Команда)
	
	ОткрытьФорму("Отчет.ОстаткиТоваров.ФормаОбъекта");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетСводПоТоварам(Команда)
	
	ОткрытьФорму("Отчет.СводПоТоварам.ФормаОбъекта");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()	
	
	Элементы.ПерепровестиДокументы.Видимость = НЕ ПоказатьРезультатПерепроведения;
	Элементы.СписокДокументов.Видимость = НЕ ПоказатьРезультатПерепроведения;
	
	Элементы.Результат.Видимость = ПоказатьРезультатПерепроведения;
	Элементы.СостояниеПрогресса.Видимость = ПоказатьРезультатПерепроведения;
	Элементы.ПоказатьТаблицуДокументов.Видимость = ПоказатьРезультатПерепроведения;
	Элементы.СтраницаДокумент.Видимость = ЗапускМонитораИзДокумента;
	
	Если ОтборПартионныйУчет Тогда
		Элементы.СписокТМЗ_ГлавныйПартия.Видимость = Истина;	
	Иначе
		Элементы.СписокТМЗ_ГлавныйПартия.Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьОтборыСписокТМЗ_Главный()
	СписокТМЗ_Главный.Отбор.Элементы.Очистить();
	
	Если ЗначениеЗаполнено(ОтборНоменклатура) Тогда
		ЭлементОтбора = СписокТМЗ_Главный.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборНоменклатура;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ЭлементОтбора = СписокТМЗ_Главный.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборОрганизация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСклад) Тогда
		ЭлементОтбора = СписокТМЗ_Главный.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Склад");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборСклад;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСчет) Тогда
		ЭлементОтбора = СписокТМЗ_Главный.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Счет");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборСчет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыСписокТМЗ_ПоСкладам(Номенклатура = Неопределено)
	СписокТМЗ_ПоСкладам.Отбор.Элементы.Очистить();
	
	Если Номенклатура = Неопределено И ЗначениеЗаполнено(ОтборНоменклатура) Тогда
		ЭлементОтбора = СписокТМЗ_ПоСкладам.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборНоменклатура;
		
	ИначеЕсли Номенклатура <> Неопределено Тогда
		ЭлементОтбора = СписокТМЗ_ПоСкладам.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = Номенклатура;
	КонецЕсли;
			
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ЭлементОтбора = СписокТМЗ_ПоСкладам.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборОрганизация;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОтборСклад) Тогда
		ЭлементОтбора = СписокТМЗ_ПоСкладам.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Склад");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборСклад;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыСписокТМЗ_ПоСчетам(Номенклатура = Неопределено)
	СписокТМЗ_ПоСчетам.Отбор.Элементы.Очистить();
	
	Если Номенклатура = Неопределено И ЗначениеЗаполнено(ОтборНоменклатура) Тогда
		ЭлементОтбора = СписокТМЗ_ПоСчетам.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборНоменклатура;
		
	ИначеЕсли Номенклатура <> Неопределено Тогда
		ЭлементОтбора = СписокТМЗ_ПоСчетам.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = Номенклатура;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ЭлементОтбора = СписокТМЗ_ПоСчетам.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборОрганизация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСчет) Тогда
		ЭлементОтбора = СписокТМЗ_ПоСчетам.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Счет");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборСчет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыСписокДокументов(Партия = Неопределено, Номенклатура = Неопределено, Счет = Неопределено, Склад = Неопределено)
	
	СтрокаОтбора = "";
	МассивОтбора = Новый Массив();
	
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда		
		СтрокаОтбора = "Организация";
		МассивОтбора.Добавить(ОтборОрганизация);	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОтборСчет) Тогда
		Если СтрокаОтбора = "" Тогда
			СтрокаОтбора = "Счет";
		Иначе
			СтрокаОтбора = СтрокаОтбора + ",Счет";
		КонецЕсли;
		
		МассивОтбора.Добавить(ОтборСчет);
		
	ИначеЕсли Счет <> Неопределено Тогда
		Если СтрокаОтбора = "" Тогда
			СтрокаОтбора = "Счет";
		Иначе
			СтрокаОтбора = СтрокаОтбора + ",Счет";
		КонецЕсли;
		
		МассивОтбора.Добавить(Счет);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборНоменклатура) Тогда
		Если СтрокаОтбора = "" Тогда
			СтрокаОтбора = "Номенклатура";
		Иначе
			СтрокаОтбора = СтрокаОтбора + ",Номенклатура";
		КонецЕсли;
		
		МассивОтбора.Добавить(ОтборНоменклатура);
		
	ИначеЕсли Номенклатура <> Неопределено Тогда
		Если СтрокаОтбора = "" Тогда
			СтрокаОтбора = "Номенклатура";
		Иначе
			СтрокаОтбора = СтрокаОтбора + ",Номенклатура";
		КонецЕсли;
		
		МассивОтбора.Добавить(Номенклатура);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСклад) Тогда
		Если СтрокаОтбора = "" Тогда
			СтрокаОтбора = "Склад";
		Иначе
			СтрокаОтбора = СтрокаОтбора + ",Склад";
		КонецЕсли;
		
		МассивОтбора.Добавить(ОтборСклад);
		
	ИначеЕсли Склад <> Неопределено Тогда
		Если СтрокаОтбора = "" Тогда
			СтрокаОтбора = "Склад";
		Иначе
			СтрокаОтбора = СтрокаОтбора + ",Склад";
		КонецЕсли;
		
		МассивОтбора.Добавить(Склад);
	КонецЕсли;
	
	Если ОтборПартионныйУчет И Партия <> Неопределено Тогда
		Если СтрокаОтбора = "" Тогда
			СтрокаОтбора = "Партия";
		Иначе
			СтрокаОтбора = СтрокаОтбора + ",Партия";
		КонецЕсли;
		
		МассивОтбора.Добавить(Партия);	
	КонецЕсли;	
	
	СтруктураОтбора = Неопределено;
	
	Если МассивОтбора.Количество() = 1 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаОтбора, МассивОтбора[0]);
		
	ИначеЕсли МассивОтбора.Количество() = 2 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаОтбора, 
									МассивОтбора[0],
									МассивОтбора[1]);
									
	ИначеЕсли МассивОтбора.Количество() = 3 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаОтбора, 
									МассивОтбора[0],
									МассивОтбора[1],
									МассивОтбора[2]);
									
	ИначеЕсли МассивОтбора.Количество() = 4 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаОтбора, 
									МассивОтбора[0],
									МассивОтбора[1],
									МассивОтбора[2],
									МассивОтбора[3]);
									
	ИначеЕсли МассивОтбора.Количество() = 5 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаОтбора, 
									МассивОтбора[0],
									МассивОтбора[1],
									МассивОтбора[2],
									МассивОтбора[3],
									МассивОтбора[4]);
	КонецЕсли;
	
	Элементы.СписокДокументов.ОтборСтрок = СтруктураОтбора;
КонецПроцедуры

&НаСервере
Процедура СформироватьТабличныйДокументИзДокумента(СтруктураДанных)
	ТабличныйДокументРасшифровка.Очистить();
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.СформироватьТабличныйДокументМониторИзДокумента(ТабличныйДокументРасшифровка, СтруктураДанных);	

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыДинамическихСписков(ИзменилсяПериод = Ложь)

	Если ОтборПартионныйУчет Тогда
		СписокТМЗ_Главный.ТекстЗапроса = ОсновнойТекстЗапросаСпискаТМЗ_Главный;
	Иначе
		СписокТМЗ_Главный.ТекстЗапроса = СтрЗаменить(СписокТМЗ_Главный.ТекстЗапроса, "ХозрасчетныйОстаткиИОбороты.Субконто3 КАК Партия,", "");
	КонецЕсли;	
		
	СписокТМЗ_Главный.Параметры.УстановитьЗначениеПараметра("ДатаНачала", 		ДатаНачала);
	СписокТМЗ_Главный.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", 	ДатаОкончания);
	СписокТМЗ_ПоСкладам.Параметры.УстановитьЗначениеПараметра("ДатаНачала", 	ДатаНачала);
	СписокТМЗ_ПоСкладам.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", 	ДатаОкончания);
	СписокТМЗ_ПоСчетам.Параметры.УстановитьЗначениеПараметра("ДатаНачала", 		ДатаНачала);
	СписокТМЗ_ПоСчетам.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", 	ДатаОкончания);
	
	Если НЕ ИзменилсяПериод Тогда
		ВидыСубконто = Новый Массив;
		ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура"));	
		ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады"));
		Если ОтборПартионныйУчет Тогда
			ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии"));		
		КонецЕсли;
		
		СписокТМЗ_Главный.Параметры.УстановитьЗначениеПараметра("ВидыСубконто", ВидыСубконто);	
		СписокТМЗ_ПоСкладам.Параметры.УстановитьЗначениеПараметра("ВидыСубконто", ВидыСубконто);
		СписокТМЗ_ПоСчетам.Параметры.УстановитьЗначениеПараметра("ВидыСубконто", ВидыСубконто);	
	КонецЕсли;
КонецПроцедуры

// Функция проверки корректности введенных дат начала и окончания.
//
// Возвращаемое значение:
//	Ложь/Истина - Булево - признак правильности введенных дат.
//
&НаКлиенте
Функция ПроверитьКорректностьУказаныхДат()

	Если ДатаНачала > ДатаОкончания Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата начала периода не может быть больше даты окончания.'"));
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	

КонецФункции

&НаСервере
Процедура ЗаполнитьСписокДокументов()

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура"));	
	ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады"));
	Если ОтборПартионныйУчет Тогда
		ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии"));		
	КонецЕсли;	
		
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Организация КАК Организация,
		|	НЕОПРЕДЕЛЕНО КАК Дата,
		|	""Остаток"" КАК Документ,
		|	НЕОПРЕДЕЛЕНО КАК Цена,			
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Склад,
		|	ХозрасчетныйОстаткиИОбороты.Субконто3 КАК Партия,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоПриход,
		|	НЕОПРЕДЕЛЕНО КАК СуммаПриход,
		|	НЕОПРЕДЕЛЕНО КАК КоличествоРасход,
		|	НЕОПРЕДЕЛЕНО КАК СуммаРасход,
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,		
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток СуммаОстаток,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстаток КАК КоличествоОстаток
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|								&ДатаНачала, 
		|								&ДатаОкончания, 
		|								, 
		|								, 
		|								, 
		|								&ВидыСубконто) КАК ХозрасчетныйОстаткиИОбороты
		|		ПО (Номенклатура.Ссылка = (ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Справочник.Номенклатура)))
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.Услуга
		|	И (ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток <> 0
		|			ИЛИ ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстаток <> 0)
	    |
	    |ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Организация КАК Организация,
		|	ХозрасчетныйОстаткиИОбороты.ПериодСекунда КАК Дата,
		|	ХозрасчетныйОстаткиИОбороты.Регистратор КАК Документ,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток <> 0
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток / ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Цена,
		|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Номенклатура,
		|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Склад,
		|	ХозрасчетныйОстаткиИОбороты.Субконто3 КАК Партия,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт КАК КоличествоПриход,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК СуммаПриход,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт КАК КоличествоРасход,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК СуммаРасход,
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаОстаток,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			Авто,
		|			Движения,
		|			,
		|			&ВидыСубконто) КАК ХозрасчетныйОстаткиИОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	Если НЕ ОтборПартионныйУчет Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ХозрасчетныйОстаткиИОбороты.Субконто3 КАК Партия,", "");
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	Запрос.УстановитьПараметр("ВидыСубконто", 	ВидыСубконто);
	
	СписокДокументов.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

&НаСервере
Функция ПолучитьОрганизациюПоУмолчанию()

	Возврат Справочники.Организации.ОрганизацияПоУмолчанию();	

КонецФункции // ПолучитьОрганизациюПоУмолчанию()

#КонецОбласти

#Область ОбработчикиОтборов

// Процедура - обработчик события ПриИзменении поля ввода ОтборНоменклатура.
//
&НаКлиенте
Процедура ОтборНоменклатураПриИзменении(Элемент)
	УстановитьОтборыСписокТМЗ_Главный();
	УстановитьОтборыСписокДокументов()
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборСклад.
//
&НаКлиенте
Процедура ОтборСкладПриИзменении(Элемент)
	УстановитьОтборыСписокТМЗ_ПоСкладам();
	УстановитьОтборыСписокТМЗ_Главный();
	УстановитьОтборыСписокДокументов()
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборСчет.
//
&НаКлиенте
Процедура ОтборСчетПриИзменении(Элемент)
	УстановитьОтборыСписокТМЗ_ПоСчетам();
	УстановитьОтборыСписокТМЗ_Главный();
	УстановитьОтборыСписокДокументов()
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	Если ОтборОрганизация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка") Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Организация"" не может быть пустым.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ОтборОрганизация");
		
		ОтборОрганизация = ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;	
	
	ОтборПартионныйУчет = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаНачала, ОтборОрганизация).СпособОценкиТМЗ = ПредопределенноеЗначение("Перечисление.СпособыОценки.ФИФО");
	
	УстановитьВидимостьДоступностьЭлементов();
	
	УстановитьОтборыСписокТМЗ_ПоСкладам();
	УстановитьОтборыСписокТМЗ_ПоСчетам();
	УстановитьОтборыСписокТМЗ_Главный();
	УстановитьОтборыСписокДокументов();
КонецПроцедуры

#КонецОбласти

#Область ФоновоеЗаданиеПерепровестиДокументы

&НаСервере
Функция ПолучитьМассивСсылокДляПерепроведения()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Регистратор КАК Документ,
		|	ХозрасчетныйОбороты.ПериодСекунда КАК Дата
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаН, &ДатаК, Авто, , &ВидыСубконто, , , ) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.Субконто1 В ИЕРАРХИИ(&Номенклатура)
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОбороты.Регистратор,
		|	ХозрасчетныйОбороты.ПериодСекунда
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура"));	
	ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады"));
	Запрос.УстановитьПараметр("ВидыСубконто", 	ВидыСубконто);	
	Запрос.УстановитьПараметр("ДатаК", 			ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаН", 			ДатаНачала);
	Запрос.УстановитьПараметр("Номенклатура", 	ОтборНоменклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивСсылок = Новый Массив;

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивСсылок.Добавить(ВыборкаДетальныеЗаписи.Документ);
	КонецЦикла;
	
	Возврат МассивСсылок;	

КонецФункции // ()

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЭтаФорма.СостояниеПрогресса = 100;
			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			ДанныеПрогресса = ПолучитьИзВременногоХранилища(АдресХранилищаПрогресса);
			ЭтаФорма.СостояниеПрогресса = ДанныеПрогресса;
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;	
КонецПроцедуры

&НаСервере
Функция ПерепровестиДокументыНаСервере(ПараметрыКоманды)
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	АдресРасшифровки = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресХранилищаПрогресса = ПоместитьВоВременноеХранилище(, УникальныйИдентификатор);
	ПараметрыКоманды.Вставить("АдресРасшифровки", АдресРасшифровки);
	ПараметрыКоманды.Вставить("АдресХранилищаПрогресса", АдресХранилищаПрогресса);
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.МониторТМЗ.ПерепровестиДокументы",
		ПараметрыКоманды,
		СтрШаблон(НСтр("ru = 'Перепроведение документов: %1'"), ЭтаФорма.Заголовок));
	
	АдресХранилища       = РезультатВыполнения.АдресХранилища;
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат         = РезультатВыполнения.Результат;
	
	ИдентификаторЗадания = Неопределено;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
КонецФункции

#КонецОбласти

