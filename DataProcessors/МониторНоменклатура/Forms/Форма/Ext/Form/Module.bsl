#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СтПериод.Вариант = ВариантСтандартногоПериода.ЭтотМесяц;
	СписокДокументов.Параметры.УстановитьЗначениеПараметра("ДатаН", Дата(1,1,1));
	СписокДокументов.Параметры.УстановитьЗначениеПараметра("ДатаК", Дата(1,1,1));
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура"));	
	ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады"));
	СписокТМЗ_Главный.Параметры.УстановитьЗначениеПараметра("ВидыСубконто", ВидыСубконто);	
	СписокТМЗ_ПоСкладам.Параметры.УстановитьЗначениеПараметра("ВидыСубконто", ВидыСубконто);
	СписокТМЗ_ПоСчетам.Параметры.УстановитьЗначениеПараметра("ВидыСубконто", ВидыСубконто);
	СписокДокументов.Параметры.УстановитьЗначениеПараметра("ВидыСубконто", ВидыСубконто);
	
	Если Параметры.КлючНазначенияИспользования = "ЗапускМонитораИзДокумента" Тогда
		ОтборНоменклатура = Параметры.Номенклатура;	
		ДанныеФормыСтруктура  = Параметры.СтруктураДанных;
		СформироватьТабличныйДокументИзДокумента(Параметры.СтруктураДанных);
		ЗапускМонитораИзДокумента = Истина;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьОтборыСписокТМЗ_Главный();
	УстановитьОтборыСписокТМЗ_ПоСкладам();
	УстановитьОтборыСписокТМЗ_ПоСчетам();
	УстановитьОтборыСписокДокументов();
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтПериодПриИзменении(Элемент)
	СписокДокументов.Параметры.УстановитьЗначениеПараметра("ДатаН", СтПериод.ДатаНачала);
	СписокДокументов.Параметры.УстановитьЗначениеПараметра("ДатаК", СтПериод.ДатаОкончания);
КонецПроцедуры

&НаКлиенте
Процедура СтПериодОчистка(Элемент, СтандартнаяОбработка)
	СписокДокументов.Параметры.УстановитьЗначениеПараметра("ДатаН", Дата(1,1,1));
	СписокДокументов.Параметры.УстановитьЗначениеПараметра("ДатаК", Дата(1,1,1));

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокТМЗ

&НаКлиенте
Процедура СписокТМЗПриАктивизацииСтроки(Элемент)
	ТекущаяСтрока = Элементы.СписокТМЗ_Главный.ТекущиеДанные;
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		ОтборНоменклатура = ТекущаяСтрока.Номенклатура;
		СтПериод = Неопределено;
	КонецЕсли;
	УстановитьОтборыСписокТМЗ_ПоСкладам();
	УстановитьОтборыСписокТМЗ_ПоСчетам();
	УстановитьОтборыСписокДокументов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерепровестиДокументы(Команда)
	ПоказатьРезультатПерепроведения = Истина;
	УстановитьВидимостьДоступностьЭлементов();
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("МассивСсылок", ПолучитьМассивСсылокДляПерепроведения());
	РезультатВыполнения = ПерепровестиДокументыНаСервере(ПараметрыКоманды);
	ПараметрыОбработчикаОжидания = Новый Структура();
	
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуРасшифровкаПоСобытиямОС(Команда)
	ПоказатьРезультатПерепроведения = Ложь;
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()	
	
	Элементы.ПерепровестиДокументы.Видимость 		= НЕ ПоказатьРезультатПерепроведения;
	Элементы.СписокДокументов.Видимость				= НЕ ПоказатьРезультатПерепроведения;
	Элементы.СтПериод.Видимость						= НЕ ПоказатьРезультатПерепроведения;
	
	Элементы.Результат.Видимость					= ПоказатьРезультатПерепроведения;
	Элементы.СостояниеПрогресса.Видимость			= ПоказатьРезультатПерепроведения;
	Элементы.ПоказатьТаблицуДокументов.Видимость	= ПоказатьРезультатПерепроведения;
	Элементы.СтраницаДокумент.Видимость = ЗапускМонитораИзДокумента;
	
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()    

&НаКлиенте
Процедура УстановитьОтборыСписокТМЗ_Главный()
	СписокТМЗ_Главный.Отбор.Элементы.Очистить();
	
	Если ЗначениеЗаполнено(ОтборНоменклатура) Тогда
		ЭлементОтбора = СписокТМЗ_Главный.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборНоменклатура;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСклад) Тогда
		ЭлементОтбора = СписокТМЗ_Главный.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Склад");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборСклад;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСчет) Тогда
		ЭлементОтбора = СписокТМЗ_Главный.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Счет");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборСчет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыСписокТМЗ_ПоСкладам()
	СписокТМЗ_ПоСкладам.Отбор.Элементы.Очистить();
	
	Если ЗначениеЗаполнено(ОтборНоменклатура) Тогда
		ЭлементОтбора = СписокТМЗ_ПоСкладам.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборНоменклатура;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСклад) Тогда
		ЭлементОтбора = СписокТМЗ_ПоСкладам.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Склад");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборСклад;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыСписокТМЗ_ПоСчетам()
	СписокТМЗ_ПоСчетам.Отбор.Элементы.Очистить();
	
	Если ЗначениеЗаполнено(ОтборНоменклатура) Тогда
		ЭлементОтбора = СписокТМЗ_ПоСчетам.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборНоменклатура;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСчет) Тогда
		ЭлементОтбора = СписокТМЗ_ПоСчетам.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Счет");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборСчет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыСписокДокументов()
	СписокДокументов.Отбор.Элементы.Очистить();
	
	Если ЗначениеЗаполнено(ОтборНоменклатура) Тогда
		ЭлементОтбора = СписокДокументов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборНоменклатура;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСклад) Тогда
		ЭлементОтбора = СписокДокументов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Склад");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборСклад;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСчет) Тогда
		ЭлементОтбора = СписокДокументов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Счет");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборСчет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТабличныйДокументИзДокумента(СтруктураДанных)
	ТабличныйДокументРасшифровка.Очистить();
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.СформироватьТабличныйДокументМониторИзДокумента(ТабличныйДокументРасшифровка, СтруктураДанных);	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОтборов

&НаКлиенте
Процедура ОтборНоменклатураПриИзменении(Элемент)
	УстановитьОтборыСписокТМЗ_Главный();
	УстановитьОтборыСписокДокументов()
КонецПроцедуры

&НаКлиенте
Процедура ОтборСкладПриИзменении(Элемент)
	УстановитьОтборыСписокТМЗ_ПоСкладам();
	УстановитьОтборыСписокТМЗ_Главный();
	УстановитьОтборыСписокДокументов()
КонецПроцедуры

&НаКлиенте
Процедура ОтборСчетПриИзменении(Элемент)
	УстановитьОтборыСписокТМЗ_ПоСчетам();
	УстановитьОтборыСписокТМЗ_Главный();
	УстановитьОтборыСписокДокументов()
КонецПроцедуры

#КонецОбласти

#Область ФоновоеЗаданиеПерепровестиДокументы

&НаСервере
Функция ПолучитьМассивСсылокДляПерепроведения()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Регистратор КАК Документ,
		|	ХозрасчетныйОбороты.ПериодСекунда КАК Дата
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаН, &ДатаК, Авто, , &ВидыСубконто, , , ) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.Субконто1 В ИЕРАРХИИ(&Номенклатура)
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОбороты.Регистратор,
		|	ХозрасчетныйОбороты.ПериодСекунда
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура"));	
	ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады"));
	Запрос.УстановитьПараметр("ВидыСубконто", 	ВидыСубконто);	
	Запрос.УстановитьПараметр("ДатаК", 			СтПериод.ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаН", 			СтПериод.ДатаНачала);
	Запрос.УстановитьПараметр("Номенклатура", 	ОтборНоменклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивСсылок = Новый Массив;

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивСсылок.Добавить(ВыборкаДетальныеЗаписи.Документ);
	КонецЦикла;
	
	Возврат МассивСсылок;	

КонецФункции // ()

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЭтаФорма.СостояниеПрогресса = 100;
			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			ДанныеПрогресса = ПолучитьИзВременногоХранилища(АдресХранилищаПрогресса);
			ЭтаФорма.СостояниеПрогресса = ДанныеПрогресса;
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;	
КонецПроцедуры

&НаСервере
Функция ПерепровестиДокументыНаСервере(ПараметрыКоманды)
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	АдресРасшифровки = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресХранилищаПрогресса = ПоместитьВоВременноеХранилище(, УникальныйИдентификатор);
	ПараметрыКоманды.Вставить("АдресРасшифровки", АдресРасшифровки);
	ПараметрыКоманды.Вставить("АдресХранилищаПрогресса", АдресХранилищаПрогресса);
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.МониторТМЗ.ПерепровестиДокументы",
		ПараметрыКоманды,
		СтрШаблон(НСтр("ru = 'Перепроведение документов: %1'"), ЭтаФорма.Заголовок));
	
	АдресХранилища       = РезультатВыполнения.АдресХранилища;
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат         = РезультатВыполнения.Результат;
	
	ИдентификаторЗадания = Неопределено;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
КонецФункции

#КонецОбласти

