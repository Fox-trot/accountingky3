#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОтборПериодРегистрации = НачалоМесяца(ТекущаяДатаСеанса());
	МесяцСтрокой = Формат(ОтборПериодРегистрации, "ДФ='MMMM yyyy'");	
	
	ПриказыКадровые.Параметры.УстановитьЗначениеПараметра("ФизЛицо", 		Справочники.ФизическиеЛица.ПустаяСсылка());	
	
	//СписокПлановыеНачисленияУдержания.Параметры.УстановитьЗначениеПараметра("ФизЛицо", 			Справочники.ФизическиеЛица.ПустаяСсылка());	
	//СписокПлановыеНачисленияУдержания.Параметры.УстановитьЗначениеПараметра("НачалоПериода", 	ОтборПериодРегистрации - 1);	
	//СписокПлановыеНачисленияУдержания.Параметры.УстановитьЗначениеПараметра("КонецПериода", 	КонецМесяца(ОтборПериодРегистрации) + 1);			
	
	СписокВыплаты.Параметры.УстановитьЗначениеПараметра("НачалоПериода", 	НачалоМесяца(ОтборПериодРегистрации) - 1);
	СписокВыплаты.Параметры.УстановитьЗначениеПараметра("КонецПериода",		КонецМесяца(ОтборПериодРегистрации) + 1);
	
	Если НЕ ЗначениеЗаполнено(ОтборПериодРегистрации) Тогда 
		ОтборПериодРегистрации = ТекущаяДатаСеанса();
	КонецЕсли;		
	
	//РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(СписокФизическиеЛица, "Организация", ОтборОрганизация, ЗначениеЗаполнено(ОтборОрганизация));
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьЗначенияОтборовИПараметров();
	СформироватьТаблицуСписокСотрудников();
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события формы "ПриЗагрузкеДанныхИзНастроекНаСервере".
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОтборПериодРегистрации 	= Настройки.Получить("ОтборПериодРегистрации"); 
	
	Если НЕ ЗначениеЗаполнено(ОтборПериодРегистрации) Тогда 
		ОтборПериодРегистрации = ТекущаяДатаСеанса();
	КонецЕсли;	
	
	МесяцСтрокой = Формат(ОтборПериодРегистрации, "ДФ='MMMM yyyy'");
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элемент.ПодчиненныеЭлементы.ГруппаПлановыеНачисленияУдержания Тогда 
		 СформироватьТаблицаАктуальныеПлановыеНачисленияУдержания();
	ИначеЕсли ТекущаяСтраница  = Элемент.ПодчиненныеЭлементы.ГруппаСчетаУчетаЗП Тогда 
		 //СформироватьТаблицаСчетаУчетаЗП();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтображатьВсех.
//
&НаКлиенте
Процедура ОтображатьВсехПриИзменении(Элемент)
	СформироватьТаблицуСписокСотрудников();
КонецПроцедуры

&НаКлиенте
Процедура СписокФизическиеЛицаПриАктивизацииСтроки(Элемент)
	ОбновитьЗначенияОтборовИПараметров();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборСотрудник.
//
&НаКлиенте
Процедура ОтборСотрудникПриИзменении(Элемент)
	СформироватьТаблицуСписокСотрудников();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСотрудники;	
	
	Отбор = Новый Структура();
	Отбор.Вставить("ФизЛицо",ОтборСотрудник);
	Строки = СписокСотрудников.НайтиСтроки(Отбор);
	Если Строки.Количество() > 0 Тогда
		Элементы.СписокСотрудников.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор(); 
	КонецЕсли;	
	
	ОбновитьЗначенияОтборовИПараметров();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборПодразделение.
//
&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСотрудники;
	ОбновитьЗначенияОтборовИПараметров();
	СформироватьТаблицуСписокСотрудников();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНачисленияУдержания

&НаКлиенте
Процедура СписокНачисленияУдержанияПередНачаломИзменения(Элемент, Отказ)
	ОткрытьЗначение(Элемент.ТекущиеДанные.Регистратор); 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокСотрудников

// Процедура - обработчик события ПриАктивизацииСтроки ТЧ СписокСотрудников 
//
&НаКлиенте
Процедура СписокСотрудниковПриАктивизацииСтроки(Элемент)
	
	// Получим значение ФизЛица текущей строки ТЧ для отбора 
	Если Элемент.ТекущиеДанные <> Неопределено Тогда 
		
		ОтборФизЛицо = ?(ЗначениеЗаполнено(ОтборСотрудник), ОтборСотрудник, Элемент.ТекущиеДанные.ФизЛицо); 
		ОбновитьЗначенияОтборовИПараметров();	
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСотрудники И ЗначениеЗаполнено(ОтборСотрудник)  Тогда 
		
		СформироватьТаблицуСписокСотрудников();
		
		Отбор = Новый Структура();
		Отбор.Вставить("ФизЛицо",ОтборСотрудник);
		Строки = СписокСотрудников.НайтиСтроки(Отбор);
		Если Строки.Количество() > 0 Тогда
			Элементы.СписокСотрудников.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор(); 
		КонецЕсли;	
		
		ОбновитьЗначенияОтборовИПараметров();
	Иначе 
		ОбновитьЗначенияОтборовИПараметров();
		СформироватьТаблицуСписокСотрудников();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерепровестиДокументы(Команда)
	ПоказатьРезультатПерепроведения = Истина;
	УстановитьВидимостьДоступностьЭлементов();
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("МассивСсылок", ПолучитьМассивСсылокДляПерепроведения());
	РезультатВыполнения = ПерепровестиДокументыНаСервере(ПараметрыКоманды);
	ПараметрыОбработчикаОжидания = Новый Структура();
	
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуРасшифровкаПоСобытиямОС(Команда)
	ПоказатьРезультатПерепроведения = Ложь;
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаПоПерсоналу(Команда)
	ОткрытьФорму("РегистрСведений.УчетнаяПолитикаПоПерсоналу.ФормаСписка");
КонецПроцедуры

// Процедура - обработчик нажатия кнопки "Сортировать сотрудников по имени"
//
&НаКлиенте
Процедура СортироватьСотрудниковПоИмени(Команда)
	
	Сортировка("ФизЛицо, ТабельныйНомер");
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки "Сортировать сотрудников по табельному номеру"
//
&НаКлиенте
Процедура СортироватьСотрудниковПоТабельномуНомеру(Команда)
	
	Сортировка("ТабельныйНомер, ФизЛицо");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ВводМесяцаОбработкаВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	ОбновитьЗначенияОтборовИПараметров();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()	
	
	Элементы.СписокПриказов_ПерепровестиДокументы.Видимость = НЕ ПоказатьРезультатПерепроведения;
	
	//Элементы.СписокПриказов.Видимость						= НЕ ПоказатьРезультатПерепроведения;
	Элементы.ПриказыКадровые.Видимость						= НЕ ПоказатьРезультатПерепроведения;
	
	Элементы.Результат.Видимость					= ПоказатьРезультатПерепроведения;
	Элементы.СостояниеПрогресса.Видимость			= ПоказатьРезультатПерепроведения;
	Элементы.ПоказатьТаблицуДокументов.Видимость	= ПоказатьРезультатПерепроведения;
	
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()    

&НаКлиенте
Процедура ОбновитьЗначенияОтборовИПараметров()
	
	ОтборФизЛицо = ?(ЗначениеЗаполнено(ОтборСотрудник), ОтборСотрудник, ОтборФизЛицо);
	ВыбранноеПодразделение = ОтборПодразделение;
	
	// Список Приказы 
	//РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(СписокСотрудники, "Организация", ОтборОрганизация, ЗначениеЗаполнено(ОтборОрганизация));
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(СписокПриказов, "ФизЛицо", ОтборФизЛицо, ЗначениеЗаполнено(ОтборФизЛицо));
	//РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(СписокПриказов, "Подразделение", ОтборПодразделение, ЗначениеЗаполнено(ВыбранноеПодразделение));
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(СписокСтатусыСотрудников, "ФизЛицо", ОтборФизЛицо, ЗначениеЗаполнено(ОтборФизЛицо));
	
	// Список начисления и удержания
	//РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(СписокНачисления, "Организация", ОтборОрганизация, ЗначениеЗаполнено(ОтборОрганизация));
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(СписокНачисленияУдержания, "ФизЛицо", ОтборФизЛицо, ЗначениеЗаполнено(ОтборФизЛицо));
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(СписокНачисленияУдержания, "ПериодРегистрации", ОтборПериодРегистрации, ЗначениеЗаполнено(ОтборПериодРегистрации));
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(СписокНачисленияУдержания, "Подразделение", ОтборПодразделение, ЗначениеЗаполнено(ВыбранноеПодразделение));
	
	
	// Список налоги
	//РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(СписокНалоги, "Организация", ОтборОрганизация, ЗначениеЗаполнено(ОтборОрганизация));
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(СписокНалоги, "ФизЛицо", ОтборФизЛицо, ЗначениеЗаполнено(ОтборФизЛицо));
	//РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(СписокНалоги, "Подразделение", ОтборПодразделение, ЗначениеЗаполнено(ВыбранноеПодразделение));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНалоги, "НачалоПериода", НачалоМесяца(ОтборПериодРегистрации));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНалоги, "КонецПериода", КонецМесяца(ОтборПериодРегистрации));
	
	// Список выплаты
	//РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(СписокВыплаты, "Организация", ОтборОрганизация, ЗначениеЗаполнено(ОтборОрганизация));
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(СписокВыплаты, "ФизЛицо", ОтборФизЛицо, ЗначениеЗаполнено(ОтборФизЛицо));
	//РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(СписокВыплаты, "Подразделение", ОтборПодразделение, ЗначениеЗаполнено(ВыбранноеПодразделение));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВыплаты, "НачалоПериода", НачалоМесяца(ОтборПериодРегистрации) - 1);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВыплаты, "КонецПериода", КонецМесяца(ОтборПериодРегистрации) + 1);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВыплаты, "Счет", 	    ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.НачисленнаяЗаработнаяПлата"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВыплаты, "КорСчет1", 	ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ДенежныеСредстваВКассе"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВыплаты, "КорСчет2", 	ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ДенежныеСредстваВБанке"));	
	
	
	// Список СоциальныйФонд
	//РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(СписокСоциальныйФонд, "Организация", ОтборОрганизация, ЗначениеЗаполнено(ОтборОрганизация));
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(СписокСоциальныйФонд, "ФизЛицо", ОтборФизЛицо, ЗначениеЗаполнено(ОтборФизЛицо));
	//РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(СписокСоциальныйФонд, "Подразделение", ОтборПодразделение, ЗначениеЗаполнено(ВыбранноеПодразделение));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСоциальныйФонд, "НачалоПериода", НачалоМесяца(ОтборПериодРегистрации));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСоциальныйФонд, "КонецПериода", КонецМесяца(ОтборПериодРегистрации));
	
	// Список ПодоходныйНалог
	//РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(СписокПодоходныйНалог, "Организация", ОтборОрганизация, ЗначениеЗаполнено(ОтборОрганизация));
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(СписокПодоходныйНалог, "ФизЛицо", ОтборФизЛицо, ЗначениеЗаполнено(ОтборФизЛицо));
	//РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(СписокПодоходныйНалог, "Подразделение", ОтборПодразделение, ЗначениеЗаполнено(ВыбранноеПодразделение));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПодоходныйНалог, "НачалоПериода", НачалоМесяца(ОтборПериодРегистрации));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПодоходныйНалог, "КонецПериода", КонецМесяца(ОтборПериодРегистрации));
	
	// ПриказыКадровые
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПриказыКадровые, "ФизЛицо", ОтборФизЛицо); 
	
	//Список начисления Счета учета ЗП
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(СписокНачисленияСчетаУчетаЗП, "ФизЛицо", ОтборФизЛицо, ЗначениеЗаполнено(ОтборФизЛицо));
	//РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(СписокНачисленияСчетаУчетаЗП, "ПериодРегистрации", ОтборПериодРегистрации, ЗначениеЗаполнено(ОтборПериодРегистрации));
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(СписокНачисленияСчетаУчетаЗП, "Подразделение", ОтборПодразделение, ЗначениеЗаполнено(ВыбранноеПодразделение));

	РассчитатьИтогиНаСервере();
	
КонецПроцедуры // ОбновитьЗначенияОтборовИПараметров()

&НаСервере
Процедура РассчитатьИтогиНаСервере()
	//СуммаНачисленоИтог = ПолучитьТаблицуДинамическогоСписка("СписокНачисленияУдержания").Итог("СуммаНачислено");
	//СуммаУдержаноИтог = ПолучитьТаблицуДинамическогоСписка("СписокНачисленияУдержания").Итог("СуммаУдержано");
	//СуммаНалогиИтог = ПолучитьТаблицуДинамическогоСписка("СписокНалоги").Итог("СуммаОборот");
	////СуммаВыплатыИтог = ПолучитьТаблицуДинамическогоСписка("СписокВыплаты").Итог("Сумма");
КонецПроцедуры // РассчитатьИтогиНаСервере()

&НаСервере
Процедура СформироватьТаблицуСписокСотрудников(ОбновлятьСписокСотрудников = Истина)
			
	// Условие определяющее необходимость обновления списка сотрудников
	// В случае, когда происходит выбор строки ТЧ СписокСотрудников, обновление списка вызовет зацикливание
	Если ОбновлятьСписокСотрудников Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиСрезПоследних.ФизЛицо КАК ФизЛицо,
		|	СотрудникиСрезПоследних.Регистратор КАК Регистратор,
		|	СотрудникиСрезПоследних.Должность КАК Должность,
		|	СотрудникиСрезПоследних.Подразделение КАК Подразделение,
		|	СотрудникиСрезПоследних.ВидСобытия КАК ВидСобытия,
		|	СотрудникиСрезПоследних.Период КАК Период,
		|	СотрудникиСрезПоследних.ГрафикРаботы КАК ГрафикРаботы
		|ПОМЕСТИТЬ ВременнаяТаблицаРаботающие
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПоследних(&ДатаНачалаМинусСек, ) КАК СотрудникиСрезПоследних
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ОтображатьВсех
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ СотрудникиСрезПоследних.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|				ТОГДА СотрудникиСрезПоследних.Подразделение = &Подразделение
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиСрезПервых.ФизЛицо КАК ФизЛицо,
		|	СотрудникиСрезПервых.Регистратор КАК Регистратор,
		|	СотрудникиСрезПервых.Должность КАК Должность,
		|	СотрудникиСрезПервых.Подразделение КАК Подразделение,
		|	СотрудникиСрезПервых.ВидСобытия КАК ВидСобытия,
		|	СотрудникиСрезПервых.Период КАК Период,
		|	СотрудникиСрезПервых.ГрафикРаботы КАК ГрафикРаботы,
		|	ИСТИНА КАК Принят
		|ПОМЕСТИТЬ ВременнаяТаблицаПринятые
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПервых(
		|			&ДатаН,
		|			ВЫБОР
		|					КОГДА &Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|						ТОГДА Подразделение = &Подразделение
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|				И (ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)
		|					ИЛИ ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение))
		|				И НЕ ФизЛицо В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаРаботающие.ФизЛицо
		|						ИЗ
		|							ВременнаяТаблицаРаботающие КАК ВременнаяТаблицаРаботающие)) КАК СотрудникиСрезПервых
		|ГДЕ
		|	СотрудникиСрезПервых.Период <= &ДатаК
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиСрезПоследних.ФизЛицо КАК ФизЛицо,
		|	СотрудникиСрезПоследних.Регистратор КАК Регистратор,
		|	СотрудникиСрезПоследних.Подразделение КАК Подразделение,
		|	СотрудникиСрезПоследних.ВидСобытия КАК ВидСобытия,
		|	СотрудникиСрезПоследних.Период КАК Период,
		|	ИСТИНА КАК Уволен
		|ПОМЕСТИТЬ ВременнаяТаблицаВыбывшие
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПоследних(
		|			&ДатаК,
		|			ВЫБОР
		|					КОГДА &Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|						ТОГДА Подразделение = &Подразделение
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|				И &ОтображатьВсех
		|				И Период >= &ДатаН
		|				И (ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|					ИЛИ ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение))) КАК СотрудникиСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВременнаяТаблицаРаботающие.ФизЛицо КАК ФизЛицо,
		|	ВременнаяТаблицаРаботающие.Регистратор КАК Регистратор,
		|	ВременнаяТаблицаРаботающие.Должность КАК Должность,
		|	ВременнаяТаблицаРаботающие.Подразделение КАК Подразделение,
		|	ВременнаяТаблицаРаботающие.ВидСобытия КАК ВидСобытия,
		|	ВременнаяТаблицаРаботающие.Период КАК Период,
		|	ВременнаяТаблицаРаботающие.ГрафикРаботы КАК ГрафикРаботы,
		|	NULL КАК Принят
		|ПОМЕСТИТЬ ВременнаяТаблицаСвод
		|ИЗ
		|	ВременнаяТаблицаРаботающие КАК ВременнаяТаблицаРаботающие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаПринятые.ФизЛицо,
		|	ВременнаяТаблицаПринятые.Регистратор,
		|	ВременнаяТаблицаПринятые.Должность,
		|	ВременнаяТаблицаПринятые.Подразделение,
		|	ВременнаяТаблицаПринятые.ВидСобытия,
		|	ВременнаяТаблицаПринятые.Период,
		|	ВременнаяТаблицаПринятые.ГрафикРаботы,
		|	ВременнаяТаблицаПринятые.Принят
		|ИЗ
		|	ВременнаяТаблицаПринятые КАК ВременнаяТаблицаПринятые
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСвод.ФизЛицо КАК ФизЛицо,
		|	ВременнаяТаблицаСвод.Регистратор,
		|	ВременнаяТаблицаСвод.Должность,
		|	ВременнаяТаблицаСвод.Подразделение,
		|	ВременнаяТаблицаСвод.ВидСобытия,
		|	ВременнаяТаблицаСвод.Период,
		|	ВременнаяТаблицаСвод.ГрафикРаботы,
		|	ВременнаяТаблицаСвод.Принят,
		|	ВременнаяТаблицаВыбывшие.Уволен,
		|	ВременнаяТаблицаСвод.ФизЛицо.Код КАК ТабельныйНомер
		|ИЗ
		|	ВременнаяТаблицаСвод КАК ВременнаяТаблицаСвод
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаВыбывшие КАК ВременнаяТаблицаВыбывшие
		|		ПО ВременнаяТаблицаСвод.ФизЛицо = ВременнаяТаблицаВыбывшие.ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизЛицо,
		|	ТабельныйНомер
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		// Для возможности отображения всех сотрудников изменим параметры для запроса
		Запрос.УстановитьПараметр("ДатаН",  				?(ОтображатьВсех, Дата("00010101"), НачалоМесяца(ОтборПериодРегистрации)));
		Запрос.УстановитьПараметр("ДатаНачалаМинусСек",  	?(ОтображатьВсех, Дата("39991231"), НачалоМесяца(ОтборПериодРегистрации)-1));
		Запрос.УстановитьПараметр("ДатаК",  				?(ОтображатьВсех, Дата("39991231"), КонецМесяца(ОтборПериодРегистрации)));
		Запрос.УстановитьПараметр("ОтображатьВсех",  		ОтображатьВсех);
		Запрос.УстановитьПараметр("Подразделение", 			ОтборПодразделение);
		РезультатЗапроса = Запрос.Выполнить();
		СписокСотрудников.Загрузить(РезультатЗапроса.Выгрузить());
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицаАктуальныеПлановыеНачисленияУдержания()
	
	Если ЗначениеЗаполнено(ОтборСотрудник) ИЛИ ЗначениеЗаполнено(ОтборФизЛицо) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиСрезПоследних.ФизЛицо КАК ФизЛицо,
		|	СотрудникиСрезПоследних.Подразделение КАК Подразделение,
		|	СотрудникиСрезПоследних.Должность КАК Должность,
		|	СотрудникиСрезПоследних.ГрафикРаботы КАК ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА СотрудникиСрезПоследних.Период < НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)
		|			ТОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)
		|		ИНАЧЕ СотрудникиСрезПоследних.Период
		|	КОНЕЦ КАК Период
		|ПОМЕСТИТЬ ВременнаяТаблицаСотрудники
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПоследних(&НачалоПериода, ФизЛицо = &ФизЛицо) КАК СотрудникиСрезПоследних
		|ГДЕ
		|	СотрудникиСрезПоследних.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сотрудники.ФизЛицо,
		|	Сотрудники.Подразделение,
		|	Сотрудники.Должность,
		|	Сотрудники.ГрафикРаботы,
		|	Сотрудники.Период
		|ИЗ
		|	РегистрСведений.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Период > НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ)
		|	И Сотрудники.Период <= &КонецПериода
		|	И Сотрудники.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|	И Сотрудники.ФизЛицо = &ФизЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеНачисленияСрезПоследних.ФизЛицо КАК ФизЛицо,
		|	ПлановыеНачисленияСрезПоследних.ВидРасчета КАК ВидРасчета,
		|	ПлановыеНачисленияСрезПоследних.Размер КАК Размер,
		|	ВЫБОР
		|		КОГДА ПлановыеНачисленияСрезПоследних.Период < &НачалоПериода
		|			ТОГДА &НачалоПериода
		|		ИНАЧЕ ПлановыеНачисленияСрезПоследних.Период
		|	КОНЕЦ КАК Период,
		|	ПлановыеНачисленияСрезПоследних.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ПлановыеНачисленияАктуальность
		|ИЗ
		|	РегистрСведений.ПлановыеНачисленияНачало.СрезПоследних(ДОБАВИТЬКДАТЕ(&НачалоПериода, СЕКУНДА, -1), ФизЛицо = &ФизЛицо) КАК ПлановыеНачисленияСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлановыеНачисления.ФизЛицо,
		|	ПлановыеНачисления.ВидРасчета,
		|	ПлановыеНачисления.Размер,
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Регистратор
		|ИЗ
		|	РегистрСведений.ПлановыеНачисленияНачало КАК ПлановыеНачисления
		|ГДЕ
		|	ПлановыеНачисления.Период >= &НачалоПериода
		|	И ПлановыеНачисления.Период <= &КонецПериода
		|	И ПлановыеНачисления.ФизЛицо = &ФизЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо,
		|	ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеНачисления.ФизЛицо КАК ФизЛицо,
		|	ПлановыеНачисления.ВидРасчета КАК ВидРасчета,
		|	ПлановыеНачисления.Размер КАК Размер,
		|	ПлановыеНачисления.Период КАК Период,
		|	ПлановыеНачисления.Регистратор КАК ДокументСсылка,
		|	ПлановыеНачисления.Регистратор КАК РегистраторОкончание,
		|	ИСТИНА КАК НеАктуально
		|ПОМЕСТИТЬ ВременнаяТаблицаПлановыеНачисленияНеАктуальность
		|ИЗ
		|	РегистрСведений.ПлановыеНачисленияНачало КАК ПлановыеНачисления
		|ГДЕ
		|	ПлановыеНачисления.Период >= &НачалоПериода
		|	И ПлановыеНачисления.Период <= &КонецПериода
		|	И ПлановыеНачисления.ФизЛицо = &ФизЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо,
		|	ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеНачисленияАктуальность.ФизЛицо КАК ФизЛицо,
		|	ПлановыеНачисленияАктуальность.ВидРасчета КАК ВидРасчета,
		|	ПлановыеНачисленияАктуальность.Размер КАК Размер,
		|	ПлановыеНачисленияАктуальность.Период КАК ДатаНачала,
		|	ЕСТЬNULL(ВременнаяТаблицаПлановыеНачисленияНеАктуальность.Период, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаОкончания,
		|	ПлановыеНачисленияАктуальность.Регистратор КАК РегистраторНачало,
		|	ВременнаяТаблицаПлановыеНачисленияНеАктуальность.РегистраторОкончание КАК РегистраторОкончание,
		|	ВременнаяТаблицаПлановыеНачисленияНеАктуальность.НеАктуально КАК НеАктуально
		|ПОМЕСТИТЬ ВременнаяТаблицаНачисления
		|ИЗ
		|	ПлановыеНачисленияАктуальность КАК ПлановыеНачисленияАктуальность
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаПлановыеНачисленияНеАктуальность КАК ВременнаяТаблицаПлановыеНачисленияНеАктуальность
		|		ПО (ВременнаяТаблицаПлановыеНачисленияНеАктуальность.Период >= ПлановыеНачисленияАктуальность.Период)
		|			И ПлановыеНачисленияАктуальность.ФизЛицо = ВременнаяТаблицаПлановыеНачисленияНеАктуальность.ФизЛицо
		|			И ПлановыеНачисленияАктуальность.ВидРасчета = ВременнаяТаблицаПлановыеНачисленияНеАктуальность.ВидРасчета
		|			И ПлановыеНачисленияАктуальность.Регистратор = ВременнаяТаблицаПлановыеНачисленияНеАктуальность.ДокументСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСотрудники.ФизЛицо,
		|	МАКСИМУМ(ВременнаяТаблицаСотрудники.Период) КАК Период,
		|	ВременнаяТаблицаНачисления.ДатаНачала
		|ПОМЕСТИТЬ ВременнаяТаблицаПериодыПоСорудникам
		|ИЗ
		|	ВременнаяТаблицаНачисления КАК ВременнаяТаблицаНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники
		|		ПО ВременнаяТаблицаНачисления.ФизЛицо = ВременнаяТаблицаСотрудники.ФизЛицо
		|			И ВременнаяТаблицаНачисления.ДатаНачала >= ВременнаяТаблицаСотрудники.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаСотрудники.ФизЛицо,
		|	ВременнаяТаблицаНачисления.ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСотрудники.ФизЛицо,
		|	ВременнаяТаблицаСотрудники.Подразделение,
		|	ВременнаяТаблицаСотрудники.Должность,
		|	ВременнаяТаблицаСотрудники.ГрафикРаботы,
		|	ВременнаяТаблицаСотрудники.Период,
		|	ВременнаяТаблицаПериодыПоСорудникам.ДатаНачала
		|ПОМЕСТИТЬ ВременнаяТаблицаПериодыПоСотрудникамРазвернуто
		|ИЗ
		|	ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаПериодыПоСорудникам КАК ВременнаяТаблицаПериодыПоСорудникам
		|		ПО ВременнаяТаблицаСотрудники.ФизЛицо = ВременнаяТаблицаПериодыПоСорудникам.ФизЛицо
		|			И ВременнаяТаблицаСотрудники.Период = ВременнаяТаблицаПериодыПоСорудникам.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСотрудники.ФизЛицо КАК ФизЛицо,
		|	ВременнаяТаблицаНачисления.ДатаНачала КАК ДатаНачала,
		|	ВременнаяТаблицаНачисления.ДатаОкончания КАК ДатаОкончания,
		|	ВременнаяТаблицаСотрудники.ФизЛицо.Наименование КАК ФизЛицоНаименование,
		|	ВременнаяТаблицаСотрудники.Подразделение КАК Подразделение,
		|	ВременнаяТаблицаСотрудники.Должность КАК Должность,
		|	ВременнаяТаблицаСотрудники.ГрафикРаботы КАК ГрафикРаботы,
		|	ВременнаяТаблицаСотрудники.Период КАК Период,
		|	0 КАК ОтработаноДней,
		|	0 КАК ОтработаноЧасов,
		|	ВременнаяТаблицаНачисления.ВидРасчета КАК ВидРасчета,
		|	ВременнаяТаблицаНачисления.ВидРасчета.Код КАК ВидРасчетаКод,
		|	ВременнаяТаблицаНачисления.Размер КАК Размер,
		|	ВременнаяТаблицаНачисления.РегистраторНачало КАК РегистраторНачало,
		|	ВременнаяТаблицаНачисления.РегистраторОкончание КАК РегистраторОкончание,
		|	ВременнаяТаблицаНачисления.НеАктуально КАК НеАктуально
		|ИЗ
		|	ВременнаяТаблицаНачисления КАК ВременнаяТаблицаНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаПериодыПоСотрудникамРазвернуто КАК ВременнаяТаблицаСотрудники
		|		ПО ВременнаяТаблицаНачисления.ФизЛицо = ВременнаяТаблицаСотрудники.ФизЛицо
		|			И ВременнаяТаблицаНачисления.ДатаНачала = ВременнаяТаблицаСотрудники.ДатаНачала
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РабочееВремяСотрудниковОбороты.ФизЛицо,
		|	&НачалоПериода,
		|	&КонецПериода,
		|	РабочееВремяСотрудниковОбороты.ФизЛицо.Наименование,
		|	СотрудникиСрезПоследних.Подразделение,
		|	СотрудникиСрезПоследних.Должность,
		|	СотрудникиСрезПоследних.ГрафикРаботы,
		|	СотрудникиСрезПоследних.Период,
		|	РабочееВремяСотрудниковОбороты.ДнейОборот,
		|	РабочееВремяСотрудниковОбороты.ЧасовОборот,
		|	РабочееВремяСотрудниковОбороты.ВидРасчета,
		|	РабочееВремяСотрудниковОбороты.ВидРасчета.Код,
		|	0,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	РегистрНакопления.удалитьРабочееВремяСотрудников.Обороты(
		|			НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ),
		|			&КонецПериода,
		|			,
		|			(Подразделение = &Подразделение
		|				ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
		|				И ФизЛицо В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВременнаяТаблицаСотрудники.ФизЛицо
		|					ИЗ
		|						ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники)) КАК РабочееВремяСотрудниковОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники.СрезПоследних(
		|				&КонецПериода,
		|				(ФизЛицо, Подразделение) В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВременнаяТаблицаСотрудники.ФизЛицо,
		|						ВременнаяТаблицаСотрудники.Подразделение
		|					ИЗ
		|						ВременнаяТаблицаСотрудники КАК ВременнаяТаблицаСотрудники)) КАК СотрудникиСрезПоследних
		|		ПО РабочееВремяСотрудниковОбороты.ФизЛицо = СотрудникиСрезПоследних.ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизЛицоНаименование,
		|	ВидРасчетаКод,
		|	ДатаНачала,
		|	ДатаОкончания";
		
		Запрос.УстановитьПараметр("НачалоПериода",  НачалоМесяца(ОтборПериодРегистрации));
		Запрос.УстановитьПараметр("КонецПериода",  	КонецМесяца(ОтборПериодРегистрации));
		Запрос.УстановитьПараметр("ФизЛицо", 		?(ЗначениеЗаполнено(ОтборСотрудник), ОтборСотрудник, ОтборФизЛицо));
		Запрос.УстановитьПараметр("Подразделение", 	ОтборПодразделение);
		
		РезультатЗапроса = Запрос.Выполнить();
		ТаблицаАктуальныеПлановыеНачисленияУдержания.Загрузить(РезультатЗапроса.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

// Функция получает КлючЗаписи РС "УчетнаяПолитикаПоПерсоналу"  
//
// Параметры:
//  Период  - Дата - период по которому происходит отбор записи
//
//  ОрганизацияОтбора - СправочникСсылка.Организции - организация по которой происходит отбор записи
//
// Возвращаемое значение:
//   РегистрСведенийКлючЗаписи - ключ искомой записи
//
&НаСервере
Функция ПолучитьКлючУПП(Период, ОрганизацияОтбора = Неопределено)
	
	ОрганизацияОтбора = ?(ОрганизацияОтбора = Неопределено, Справочники.Организации.ОсновнаяОрганизация, ОрганизацияОтбора); 	

	Возврат РегистрыСведений.УчетнаяПолитикаПоПерсоналу.СоздатьКлючЗаписи(Новый Структура("Период, Организация", Период, ОрганизацияОтбора));

КонецФункции // ПолучитьКлючУПП()

// Процедура осеществлющая сортировку ТЗ "СписокСотрудников" по переданному списку колонок
//
// Параметры:
//  ИменаКолонок  - Строка - список колонок для параметров сортировки
//
&НаКлиенте
Процедура Сортировка(ИменаКолонок)

	Если ИменаКолонок <> "" Тогда 
		СписокСотрудников.Сортировать(ИменаКолонок);
	КонецЕсли;

КонецПроцедуры // Сортировка()

#КонецОбласти

#Область РедактированиеМесяцаСтрокой

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОповещениеЗавершения = Новый ОписаниеОповещения("ВводМесяцаОбработкаВыбораЗавершение", ЭтаФорма);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "ОтборПериодРегистрации", "МесяцСтрокой",,ОповещениеЗавершения);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПериодРегистрации.
//
&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "ОтборПериодРегистрации", "МесяцСтрокой", Модифицированность);
	ОбновитьЗначенияОтборовИПараметров();
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "ОтборПериодРегистрации", "МесяцСтрокой", Направление, Модифицированность);
	ОбновитьЗначенияОтборовИПараметров();
КонецПроцедуры

&НаКлиенте
//Процедура обработчик события очистки данных поля ПериодРегистрации
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	ОтборПериодРегистрации = Неопределено;
	ОбновитьЗначенияОтборовИПараметров();
	
КонецПроцедуры //ОтборПериодРегистрацииОчистка()

&НаКлиенте
Процедура ПериодРегистрацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ФоновоеЗаданиеПерепровестиДокументы

&НаСервере
Функция ПолучитьМассивСсылокДляПерепроведения()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиСрезПоследних.Регистратор КАК Документ
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПоследних(
		|			,
		|			ФизЛицо = &ФизЛицо
		|				ИЛИ &ФизЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК СотрудникиСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиСрезПоследних.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	СотрудникиСрезПоследних.Регистратор.Дата";
	
	Запрос.УстановитьПараметр("ФизЛицо", ОтборФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивСсылок = Новый Массив;

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивСсылок.Добавить(ВыборкаДетальныеЗаписи.Документ);
	КонецЦикла;
	
	Возврат МассивСсылок;	

КонецФункции // ()

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЭтаФорма.СостояниеПрогресса = 100;
			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			ДанныеПрогресса = ПолучитьИзВременногоХранилища(АдресХранилищаПрогресса);
			ЭтаФорма.СостояниеПрогресса = ДанныеПрогресса;
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;	
КонецПроцедуры

&НаСервере
Функция ПерепровестиДокументыНаСервере(ПараметрыКоманды)
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	АдресРасшифровки = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресХранилищаПрогресса = ПоместитьВоВременноеХранилище(, УникальныйИдентификатор);
	ПараметрыКоманды.Вставить("АдресРасшифровки", АдресРасшифровки);
	ПараметрыКоманды.Вставить("АдресХранилищаПрогресса", АдресХранилищаПрогресса);
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.МониторВзаиморасчетовССотрудником.ПерепровестиДокументы",
		ПараметрыКоманды,
		СтрШаблон(НСтр("ru = 'Перепроведение документов: %1'"), ЭтаФорма.Заголовок));
	
	АдресХранилища       = РезультатВыполнения.АдресХранилища;
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат         = РезультатВыполнения.Результат;
	
	ИдентификаторЗадания = Неопределено;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
КонецФункции

#КонецОбласти

