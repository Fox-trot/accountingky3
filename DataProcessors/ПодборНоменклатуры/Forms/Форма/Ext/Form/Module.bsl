#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	// по умолчпнию при отсутсвии пользовательских настроек
	ЗапрашиватьКоличество 	= Истина;
	ЗапрашиватьЦену 		= Истина;
	
	СписокСвойств = "ЕстьЦена, Валюта, ДатаРасчетов, ДоговорКонтрагента, Заголовок, ИмяТаблицы, Контрагент, Организация,
		|Склад, СчетУчета, ТипЦен, Услуги, ВидПодбора, СпособОценки, ОбщийПодбор, МОЛ, ПодборНоменклатурыПоПартии";
		
	НеобязательныеПараметры = Новый Структура("ПоказыватьОстатки, ПоказыватьЦены, ПоказыватьОтрицательныеОстатки, ЕстьКоличество, ПоказыватьЗабалансовыеОстатки, СпособОценкеПоФиксированнойЦене",
		Истина, 
		Истина, 
		Истина, 
		Истина,
        Истина,
		Ложь);  
	
	
	Для каждого НеобязательныйПараметр Из НеобязательныеПараметры Цикл
		
		ИмяПараметра = НеобязательныйПараметр.Ключ;
		
		Если Параметры.Свойство(ИмяПараметра) Тогда
			СписокСвойств = СписокСвойств + "," + ИмяПараметра;
		КонецЕсли; 	
		
	КонецЦикла; 
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НеобязательныеПараметры);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, СписокСвойств);
	
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипЦен) Тогда
		ВалютаЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипЦен, "ВалютаЦены");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда
		ВалютаЦены = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	
	// Определим настройку учета по складам и по подразделениям.
	СчетТоварыНаСкладах = ПланыСчетов.Хозрасчетный.ТоварноМатериальныеЗапасы; //ТоварыНаСкладах;
	//ВедетсяУчетПоСкладам = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяУчетПоСкладам(СчетТоварыНаСкладах);
	ВедетсяУчетПоСкладам = Истина;
	
	ОбщегоНазначенияБПКлиентСервер.Загрузить("ИсторияПоискаНоменклатуры", Элементы.СтрокаПоиска.СписокВыбора);
	Настройки = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПодборНоменклатуры",);
	Если Настройки <> Неопределено Тогда
		Если Настройки.Свойство("ИсторияПоискаНоменклатуры") Тогда
			Элементы.СтрокаПоиска.СписокВыбора.ЗагрузитьЗначения(Настройки.ИсторияПоискаНоменклатуры);
		КонецЕсли;
		Если Настройки.Свойство("ЗапрашиватьКоличество") Тогда
			ЗапрашиватьКоличество = Настройки.ЗапрашиватьКоличество;
		КонецЕсли;
		Если Настройки.Свойство("ЗапрашиватьЦену") Тогда
			ЗапрашиватьЦену = Настройки.ЗапрашиватьЦену;
		КонецЕсли;
		Если Настройки.Свойство("ПоказыватьТолькоОстатки") Тогда
			ПоказыватьТолькоОстатки = Настройки.ПоказыватьТолькоОстатки;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		Заголовок = Параметры.Заголовок;
		АвтоЗаголовок = Ложь;
	КонецЕсли;
	
	// Колонки надо "отключить" ДО выполнения запроса в СписокНоменклатуры, в противном случае
	//  в запросе произойдёт левое соединение с таблицей цен и строки задвоятся.
	// Если указывать условия только в условном оформлении, то они не успеют сработать до выполнения запроса.
	Если НЕ ЭтотОбъект.ПоказыватьЦены Тогда
		//Элементы.СписокНоменклатурыЦена.Видимость = Ложь;
		//Элементы.СписокНоменклатурыВалюта.Видимость = Ложь;
	КонецЕсли;
	Если НЕ ЭтотОбъект.ПоказыватьОстатки Тогда
		Элементы.СписокНоменклатурыКоличествоОстаток.Видимость = Ложь;
	КонецЕсли;
	Элементы.ПоказыватьТолькоОстатки.Видимость = ПоказыватьОстатки;
	
	УправлениеСписком();
	
	ОбновитьИнформационнуюНадписьПараметрыПодбора(ЭтотОбъект);
	Элементы.ИнформационнаяНадписьПараметровПодбора.Видимость = НЕ ПустаяСтрока(ИнформационнаяНадписьПараметровПодбора);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если Параметр = ЭтаФорма Тогда
		Если ИмяСобытия = "ВводНовогоЭлементаСправочникаНоменклатура" Тогда
			Элементы.СписокНоменклатуры.Обновить();
			ЕстьКонтрольУслуги = (ТипЗнч(Услуги) = Тип("Булево"));
			Если НЕ ЕстьКонтрольУслуги ИЛИ (ЭтоУслуга(Источник) = Услуги) Тогда
				
				Элементы.СписокНоменклатуры.ТекущаяСтрока = Источник;
				
				ПараметрыНоменклатуры = Новый Структура("Номенклатура, Цена", Источник,	0);
				
				ОткрытьФормуВводаЦенаКоличество(ПараметрыНоменклатуры);
				
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПеренестиВДокумент И Объект.ПодобраннаяНоменклатура.Количество() > 0 Тогда
		
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru = 'Подобранные товары не перенесены в документ.
			|
			|Перенести?'");
			
		Оповещение = Новый ОписаниеОповещения("ВопросПеренестиВДокументЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	СтруктураВозврата = ПриЗакрытииНаСервере();
	
	Если ПеренестиВДокумент Тогда
		Если ОбщийПодбор Тогда
			Если ВидПодбора = "ПодборМБПСклад" Или  ВидПодбора = "ПодборМБПЭксплуатация" Тогда 
				Оповестить("ОбработанаТабличнаяЧастьТоварыМБП", СтруктураВозврата);	
			Иначе 
				Оповестить("ОбработанаТабличнаяЧастьТовары", СтруктураВозврата);
			КонецЕсли;
		Иначе
			Оповестить("ПодборВСтрокуТабличнойЧастьТовары", СтруктураВозврата);
		КонецЕсли;
				//ОповеститьОВыборе(СтруктураВозврата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриЗакрытииНаСервере()
	
	СтруктураВозврата = Новый Структура();
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("ИсторияПоискаНоменклатуры", Элементы.СтрокаПоиска.СписокВыбора.ВыгрузитьЗначения());
	ПараметрыЗакрытия.Вставить("ЗапрашиватьКоличество",     ЗапрашиватьКоличество);
	ПараметрыЗакрытия.Вставить("ЗапрашиватьЦену",           ЗапрашиватьЦену);
	ПараметрыЗакрытия.Вставить("ПоказыватьТолькоОстатки",   ПоказыватьТолькоОстатки);
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ПодборНоменклатуры", , ПараметрыЗакрытия);
	
	Если ПеренестиВДокумент Тогда
		АдресПодобраннойНоменклатурыВХранилище = ПоместитьПодобраннуюНоменклатуруВХранилище();
		СтруктураВозврата.Вставить("АдресПодобраннойНоменклатурыВХранилище", АдресПодобраннойНоменклатурыВХранилище);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ПрименитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьТолькоОстаткиПриИзменении(Элемент)
	
	УстановитьЗначениеПараметраПоказыватьТолькоОстаткиСпискаНоменклатуры();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИерархияНоменклатуры

&НаКлиенте
Процедура ИерархияНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УстановитьОтборПоИерархииНоменклатуры(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборПоИерархииНоменклатуры(Элементы.ИерархияНоменклатуры.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНоменклатуры

&НаКлиенте
Процедура СписокНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыНоменклатуры = Новый Структура;
	ПараметрыНоменклатуры.Вставить("ВидПодбора", 	ВидПодбора);
	ПараметрыНоменклатуры.Вставить("Номенклатура", 	Элемент.ТекущиеДанные.Ссылка);
	ПараметрыНоменклатуры.Вставить("Склад", 		ЭтотОбъект.Склад);
	ПараметрыНоменклатуры.Вставить("Дата", 			ДатаРасчетов);
	ПараметрыНоменклатуры.Вставить("Организация", 	Организация);
	ПараметрыНоменклатуры.Вставить("КоличественныйУчет", 	Элемент.ТекущиеДанные.КоличественныйУчет);
	ПараметрыНоменклатуры.Вставить("Сумма", 		Элемент.ТекущиеДанные.СуммаОстаток);
	
	Цена = 0;
	Партия = Неопределено;
	Если Элемент.ТекущиеДанные.Свойство("Цена") Тогда
		
		ТекущаяВалюта = ?(Элемент.ТекущиеДанные.Свойство("Валюта") И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Валюта),
			Элемент.ТекущиеДанные.Валюта, ВалютаЦены);
			
		Цена = ?(ТекущаяВалюта = Валюта, Элемент.ТекущиеДанные.Цена,
			ПолучитьЦенуПослеПересчета(Элемент.ТекущиеДанные.Цена, ТекущаяВалюта, Валюта, ДатаРасчетов));
		Партия = Элемент.ТекущиеДанные.Партия;		
	КонецЕсли;
	
	ПараметрыНоменклатуры.Вставить("Цена", Цена);
	ПараметрыНоменклатуры.Вставить("Партия", Партия);
	
	Если Элемент.ТекущиеДанные.Свойство("ЕдиницаИзмерения") Тогда
		ПараметрыНоменклатуры.Вставить("ЕдиницаИзмерения", Элемент.ТекущиеДанные.ЕдиницаИзмерения);
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Свойство("СчетУчета") Тогда
		ПараметрыНоменклатуры.Вставить("СчетУчета", Элемент.ТекущиеДанные.СчетУчета);
	КонецЕсли;
	
	ОткрытьФормуВводаЦенаКоличество(ПараметрыНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	СписокНоменклатурыВыбор(Элемент, Значение, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	
	Если Копирование Тогда
		
		ПараметрыФормыНоменклатура = Новый Структура("ЗначениеКопирования", Элемент.ТекущаяСтрока);
		
	Иначе
		
		ДанныеЗаполнения = Новый Структура;
		
		Если ТипЗнч(Услуги) = Тип("Булево") Тогда
			ДанныеЗаполнения.Вставить("Услуга",Услуги);
		КонецЕсли; 
		
		Если Элементы.ИерархияНоменклатуры.ТекущаяСтрока <> Неопределено Тогда
			ДанныеЗаполнения.Вставить("Родитель", Элементы.ИерархияНоменклатуры.ТекущаяСтрока);
		КонецЕсли; 
		
		ПараметрыФормыНоменклатура = Новый Структура("ЗначенияЗаполнения, ДополнительныеПараметры", ДанныеЗаполнения, Новый Структура("Наименование", СокрЛП(СтрокаПоиска)));
		
	КонецЕсли; 
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыФормыНоменклатура,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодобраннаяНоменклатура

&НаКлиенте
Процедура ПодобраннаяНоменклатураПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяНоменклатураКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПодобраннаяНоменклатура.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяНоменклатураЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПодобраннаяНоменклатура.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяНоменклатураСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПодобраннаяНоменклатура.ТекущиеДанные;
	Если ТекущиеДанные.Количество = 0 Тогда
		ТекущиеДанные.Цена = 0;
	Иначе
		ТекущиеДанные.Цена = ТекущиеДанные.Сумма / ТекущиеДанные.Количество;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.OK);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиПодбора(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрименитьНастройкиПодбораЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура("ЕстьЦена, ЕстьКоличество", ЕстьЦена, ЕстьКоличество);
	
	ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.НастройкиПодбора", ПараметрыФормы,
		ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПрименитьПоиск()
	
	Использование = ЗначениеЗаполнено(СтрокаПоиска);
	
	
	Если ВидПодбора = "ПодборМБПСклад" Тогда
		ТекущийЭлемент = Элементы.СписокМБПСклад;
		КоллекцияЭлементовОтбора = СписокМБПСклад.Отбор.Элементы
	ИначеЕсли ВидПодбора = "ПодборМБПЭксплуатация" Тогда
		ТекущийЭлемент = Элементы.СписокМБПЭксплуатация;
		КоллекцияЭлементовОтбора = СписокМБПЭксплуатация.Отбор.Элементы		
	Иначе
		ТекущийЭлемент = Элементы.СписокНоменклатуры;
		КоллекцияЭлементовОтбора = СписокНоменклатуры.Отбор.Элементы
	КонецЕсли;
		
	ГруппаОтбора = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
		КоллекцияЭлементовОтбора, "ПоискПоПодстроке",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора, "Наименование", СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора, "НаименованиеПолное", СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);
		
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора, "СчетУчетаКод", СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);
		
	//ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
	//	ГруппаОтбора, "Артикул", СтрокаПоиска,
	//	Использование, ВидСравненияКомпоновкиДанных.Содержит);
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		ОбщегоНазначенияБПКлиентСервер.ОбновитьСписокВыбора(Элементы.СтрокаПоиска.СписокВыбора, СтрокаПоиска);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаЦенаКоличество(ПараметрыНоменклатуры)

	ПараметрыНоменклатуры.Вставить("Валюта",       Валюта);
	ПараметрыНоменклатуры.Вставить("Количество", 1);
	ПараметрыНоменклатуры.Вставить("ЕстьЦена" ,      ЗапрашиватьЦену И ЕстьЦена);
	ПараметрыНоменклатуры.Вставить("ЕстьКоличество", ЗапрашиватьКоличество И ЕстьКоличество);
	
	Если ЗапрашиватьКоличество И ЕстьКоличество ИЛИ ЗапрашиватьЦену И ЕстьЦена Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВыбраннуюНоменклатуруЗавершение", ЭтотОбъект);
		
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ФормаВводаЦенаКоличество", ПараметрыНоменклатуры,
			ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ДобавитьВыбраннуюНоменклатуруЗавершение(ПараметрыНоменклатуры, Неопределено);
		
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьВыбраннуюНоменклатуруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("Цена") Тогда
		ПараметрыПоиска = Новый Структура("Номенклатура, Цена, Партия", Результат.Номенклатура, Результат.Цена, Результат.Партия);
	Иначе
		ПараметрыПоиска = Новый Структура("Номенклатура", Результат.Номенклатура);
	КонецЕсли;
	Если Результат.Свойство("ДатаВыдачи") Тогда
		ПараметрыПоиска.Вставить("ДатаВыдачи", Результат.ДатаВыдачи);
	КонецЕсли;
	
	РезультатПоиска = Объект.ПодобраннаяНоменклатура.НайтиСтроки(ПараметрыПоиска);
	
	Если РезультатПоиска.Количество() = 0 Тогда
		Если НЕ ОбщийПодбор Тогда
	    	Объект.ПодобраннаяНоменклатура.Очистить();
		КонецЕсли;

		ТекущаяСтрока = Объект.ПодобраннаяНоменклатура.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Результат,, "Количество");
	Иначе
		ТекущаяСтрока = РезультатПоиска[0];
	КонецЕсли;
	
	Если КоличественныйСчетУчета(Результат.СчетУчета) Тогда
		ТекущаяСтрока.Количество = Результат.Количество + ТекущаяСтрока.Количество;
		
		Если Результат.Свойство("Цена") Тогда
			ТекущаяСтрока.Сумма = ТекущаяСтрока.Количество * ТекущаяСтрока.Цена;
		КонецЕсли;	
	Иначе
		ТекущаяСтрока.Количество = 0;
	КонецЕсли;
	
	// Активизируем текущую строку табличной части
	Элементы.ПодобраннаяНоменклатура.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПеренестиВДокументЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		ПеренестиВДокумент = Истина;
		Закрыть();
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		ПеренестиВДокумент = Истина;
		Объект.ПодобраннаяНоменклатура.Очистить();
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкиПодбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапрашиватьКоличество = Результат.ЗапрашиватьКоличество;
	ЗапрашиватьЦену       = Результат.ЗапрашиватьЦену;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоУслуга(Ссылка)

	Возврат Ссылка.Услуга;

КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ОбновитьИтоги(Форма);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеСписком()
	
	ДатаОстаткиЦены    = ?(НЕ ЗначениеЗаполнено(ДатаРасчетов), ОбщегоНазначения.ТекущаяДатаПользователя(Пользователи.ТекущийПользователь()), ДатаРасчетов); //?(НЕ ЗначениеЗаполнено(ДатаРасчетов), ОбщегоНазначенияБП.ПолучитьРабочуюДату(), ДатаРасчетов);
	
	УПП = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаОстаткиЦены, Организация);	
	 
	ИспользоватьОтборПоСкладу     = Истина;
	
	Элементы.СписокНоменклатурыПартия.Видимость	 = ПодборНоменклатурыПоПартии;
	Элементы.СписокНоменклатурыЦена.Видимость	 = ПодборНоменклатурыПоПартии;
	Если ПодборНоменклатурыПоПартии Тогда
		ЕстьЦена = Истина;	
		ПоказыватьЦены = Истина;	
	КонецЕсли;
	
	Если ВидПодбора = "ПодборМБПСклад" Тогда
		Элементы.СписокМБПСклад.Видимость 		 = Истина;
		Элементы.СписокНоменклатуры.Видимость 	 = Ложь;	
		Элементы.СписокМБПЭксплуатация.Видимость = Ложь;
		
		Элементы.ПодобраннаяНоменклатураДатаВыдачи.Видимость = Ложь;
		
		СписокМБПСклад.Параметры.УстановитьЗначениеПараметра("ДатаОстаткиЦены",     ДатаОстаткиЦены);

		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокМБПСклад, "Склад", Склад, Истина);
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокМБПСклад, "Организация",
		Организация, ЗначениеЗаполнено(Организация));
		
		//Если ЗначениеЗаполнено(Параметры.СтатусМБП) Тогда 
			
			ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокМБПСклад, "Статус", Перечисления.СтатусыМБП.Эксплуатация, Истина, ВидСравненияКомпоновкиДанных.НеРавно);	
			
		//КонецЕсли;
		
	ИначеЕсли ВидПодбора = "ПодборМБПЭксплуатация" Тогда
		
		Элементы.СписокМБПСклад.Видимость		 = Ложь;
		Элементы.СписокНоменклатуры.Видимость	 = Ложь;		
		Элементы.СписокМБПЭксплуатация.Видимость = Истина;
		
		СписокМБПЭксплуатация.Параметры.УстановитьЗначениеПараметра("ДатаОстаткиЦены",     ДатаОстаткиЦены);
		
		//Если ЗначениеЗаполнено(Подразделение) Тогда 
		//	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокМБПЭксплуатация, "Подразделение", Подразделение, Истина);
		//КонецЕсли;
	
		Если ЗначениеЗаполнено(МОЛ) Тогда 
			ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокМБПЭксплуатация, "МОЛ", МОЛ, Истина);
		КонецЕсли;
		
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокМБПЭксплуатация, "Организация",
		Организация, ЗначениеЗаполнено(Организация));
		
	Иначе 
		//
		//Если ВРег(ВидПодбора) = "НТТ" Тогда
		//	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "ТипЦен",
		//	Склад.ТипЦенРозничнойТорговли, ЗначениеЗаполнено(Склад.ТипЦенРозничнойТорговли));
		//	
		//ИначеЕсли ВРег(ВидПодбора) = "КОМИТЕНТ" Тогда
		//	ИспользоватьОтборПоСкладу = Ложь;
		//	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "Счет",
		//	ПланыСчетов.Хозрасчетный.ТоварыНаСкладе, Истина, ВидСравненияКомпоновкиДанных.ВИерархии);
		//	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "Субконто2.Контрагент",
		//	Контрагент, ЗначениеЗаполнено(Контрагент));
		//	
		//ИначеЕсли ВРег(ВидПодбора) = "КОМИССИОНЕР" Тогда
		//	ИспользоватьОтборПоСкладу = Ложь;
		//	Счета = Новый СписокЗначений;
		//	Счета.Добавить(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные);
		//	Счета.Добавить(ПланыСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию);
		//	
		//	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "Счет",
		//	Счета, Истина, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
		//	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "Субконто2",
		//	Контрагент, ЗначениеЗаполнено(Контрагент));
		//
		//ИначеЕсли ВРег(ВидПодбора) = "МАТЕРИАЛЫЗАКАЗЧИКА" Тогда
		//	ИспользоватьОтборПоСкладу = Ложь;
		//	Счета = Новый СписокЗначений;
		//	
		//	Счета.Добавить(ПланыСчетов.Хозрасчетный.ТМЦпринятыеНаОтветственноеХранение);
		//	Счета.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку);
		//	Счета.Добавить(ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
		//	
		//	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "Счет",
		//	Счета, Истина, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
		//	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "Субконто2",
		//	Контрагент, ЗначениеЗаполнено(Контрагент));
		//	
		//КонецЕсли;
		
		Если ИспользоватьОтборПоСкладу Тогда
			//Если ЗначениеЗаполнено(Склад)
			//	И ВедетсяУчетПоСкладам Тогда
			//	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "Склад",
			//	Склад, Истина);
			//КонецЕсли;
			Если ВедетсяУчетПоСкладам Тогда
				ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "Склад",
				Склад, Истина);
			КонецЕсли;			
		КонецЕсли;
		
		СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("ДатаОстаткиЦены",     ДатаОстаткиЦены);
		СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("ПоказыватьОтрицательныеОстатки",  	ПоказыватьОтрицательныеОстатки);
		СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("СпособОценкиПоФиксированнойЦене",  	СпособОценки = Перечисления.СпособыОценки.ПоФиксированной);
		
		УстановитьЗначениеПараметраПоказыватьТолькоОстаткиСпискаНоменклатуры();
		
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "Организация",
		Организация, ЗначениеЗаполнено(Организация));
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "Услуга",
		Услуги, ТипЗнч(Услуги) = Тип("Булево"));
		
		Если ВидПодбора = "ПодборПоСчетуУчетаИСкладу" Тогда
			Счета = Новый СписокЗначений;
			Счета.Добавить(СчетУчета);
			
			ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(СписокНоменклатуры, "СчетУчета",
			СчетУчета, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
		КонецЕсли;		
		
		Если ВРег(ВидПодбора) = "НТТ" ИЛИ ВидПодбора = "" Тогда
			Счета = Новый СписокЗначений;
			Если ЗначениеЗаполнено(СпособОценки) Тогда
				Счета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаПоСпособуОценки(СпособОценки);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СпособОценки) ИЛИ Счета.Количество() = 0 Тогда
				Счета.Добавить(ПланыСчетов.Хозрасчетный.ТоварноМатериальныеЗапасы);
				Счета.Добавить(ПланыСчетов.Хозрасчетный.ЗапасыВспомогательныхМатериалов);				
			КонецЕсли;
			
			ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(СписокНоменклатуры, "СчетУчета",
			Счета, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПолейИнформационнойНадписи(Форма)
	
	СписокПолей = Новый Массив;
	
	Если Форма.ПоказыватьОстатки Тогда
		СписокПолей.Добавить("Организация");
	КонецЕсли;
	
	Если Форма.ПоказыватьОстатки ИЛИ Форма.ПоказыватьЦены Тогда
		СписокПолей.Добавить("ДатаРасчетов");
	КонецЕсли;
	
	Если Форма.ПоказыватьОстатки И Форма.ВедетсяУчетПоСкладам
		И (Форма.ВидПодбора = "НТТ" ИЛИ Форма.ВидПодбора = "") Тогда
		
		СписокПолей.Добавить("Склад");
		
	КонецЕсли;
	
	Если Форма.ПоказыватьЦены Тогда
		СписокПолей.Добавить("ТипЦен");
	КонецЕсли;
	
	Если Форма.ВидПодбора = "Комиссионер" ИЛИ Форма.ВидПодбора = "Комитент" Тогда
		СписокПолей.Добавить("Контрагент");
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИнформационнуюНадписьПараметрыПодбора(Форма)
	
	СписокПолей = ПолучитьСписокПолейИнформационнойНадписи(Форма);
	
	ТекстНадписи = "";
	Для Каждого Поле Из СписокПолей Цикл
		Если ЗначениеЗаполнено(Форма[Поле]) Тогда
			ТекстНадписи = ТекстНадписи + Форма[Поле] + "; ";
		КонецЕсли;
	КонецЦикла;
	
	ТекстНадписи = Лев(ТекстНадписи, СтрДлина(ТекстНадписи) - 2);
	
	Форма.ИнформационнаяНадписьПараметровПодбора = ТекстНадписи;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоИерархииНоменклатуры(ГруппаНоменклатуры)
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "Ссылка",
		ГруппаНоменклатуры, ЗначениеЗаполнено(ГруппаНоменклатуры), ВидСравненияКомпоновкиДанных.ВИерархии);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьПодобраннуюНоменклатуруВХранилище()
	
	ВременнаяТаблицаНоменклатуры = Объект.ПодобраннаяНоменклатура.Выгрузить();
	
	АдресПодобраннойНоменклатурыВХранилище = ПоместитьВоВременноеХранилище(ВременнаяТаблицаНоменклатуры, УникальныйИдентификатор);
	
	Возврат АдресПодобраннойНоменклатурыВХранилище;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦенуПослеПересчета(Знач Цена, Знач ВалютаНач, Знач ВалютаКон, Знач ДатаПересчета)
	
	КурсКратностьНач = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаНач, ДатаПересчета);
	КурсКратностьКон = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаКон, ДатаПересчета);
	
	Возврат РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Цена, ВалютаНач, ВалютаКон,
		КурсКратностьНач.Курс, КурсКратностьКон.Курс,
		КурсКратностьНач.Кратность, КурсКратностьКон.Кратность);
	
КонецФункции

&НаСервере
Процедура УстановитьЗначениеПараметраПоказыватьТолькоОстаткиСпискаНоменклатуры()
	
	ЗначениеПараметра = ПоказыватьТолькоОстатки И ПоказыватьОстатки;
	СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("ПоказыватьТолькоОстатки", Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Форма.ИтогиСумма = Форма.Объект.ПодобраннаяНоменклатура.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокМБПСкладВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	//ПараметрыОтбора = Новый Структура;
	//ПараметрыОтбора.Вставить("Номенклатура", Элемент.ТекущиеДанные.Ссылка);
	//
	//СписокСтрок = Объект.ПодобраннаяНоменклатура.НайтиСтроки(ПараметрыОтбора);
	//Если СписокСтрок.Количество() = 0 Тогда
	//	СТЧПодобранной = Объект.ПодобраннаяНоменклатура.Добавить();
	//	СТЧПодобранной.Номенклатура = Элемент.ТекущиеДАнные.Ссылка;
	//	СТЧПодобранной.Количество = 0;
	//	СТЧПодобранной.Цена = Элемент.ТекущиеДАнные.СуммаОстаток/Элемент.ТекущиеДАнные.КоличествоОстаток;
	//	СТЧПодобранной.Сумма = СТЧПодобранной.Цена; 
	//	СТЧПодобранной.Партия = Элемент.ТекущиеДАнные.Партия;
	//	СТЧПодобранной.СтатусМБП = Элемент.ТекущиеДАнные.Статус;
	//	СТЧПодобранной.ИндивидуальныйНомер = Элемент.ТекущиеДАнные.ИнвНомер;
	//Иначе 
	//	СТЧПодобранной = СписокСтрок[0];
	//КонецЕсли;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыНоменклатуры = Новый Структура;
	ПараметрыНоменклатуры.Вставить("ВидПодбора", 			ВидПодбора);
	ПараметрыНоменклатуры.Вставить("СчетУчета", 			ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.МБП"));
	ПараметрыНоменклатуры.Вставить("Номенклатура", 			Элемент.ТекущиеДанные.Ссылка);
	ПараметрыНоменклатуры.Вставить("Склад", 				ЭтотОбъект.Склад);
	ПараметрыНоменклатуры.Вставить("Дата", 					ДатаРасчетов);
	ПараметрыНоменклатуры.Вставить("Организация", 			Организация);
	ПараметрыНоменклатуры.Вставить("СтатусМБП",				Элемент.ТекущиеДанные.Статус);
	ПараметрыНоменклатуры.Вставить("ИндивидуальныйНомер", 	Элемент.ТекущиеДанные.ИнвНомер);
	
	Цена 	= 0;
	Партия 	= Неопределено;
	Если Элемент.ТекущиеДанные.Свойство("Цена") Тогда
		
		ТекущаяВалюта = ?(Элемент.ТекущиеДанные.Свойство("Валюта") И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Валюта),
			Элемент.ТекущиеДанные.Валюта, ВалютаЦены);
			
		Цена = ?(ТекущаяВалюта = Валюта, Элемент.ТекущиеДанные.Цена,
			ПолучитьЦенуПослеПересчета(Элемент.ТекущиеДанные.Цена, ТекущаяВалюта, Валюта, ДатаРасчетов));
		Партия 	= Элемент.ТекущиеДанные.Партия;
	КонецЕсли;
	
	ПараметрыНоменклатуры.Вставить("Цена", 		Цена);
	ПараметрыНоменклатуры.Вставить("Партия", 	Партия);
	
	Если Элемент.ТекущиеДанные.Свойство("ЕдиницаИзмерения") Тогда
		ПараметрыНоменклатуры.Вставить("ЕдиницаИзмерения", Элемент.ТекущиеДанные.ЕдиницаИзмерения);
	КонецЕсли;
	
	ОткрытьФормуВводаЦенаКоличество(ПараметрыНоменклатуры);	

КонецПроцедуры

&НаКлиенте
Процедура СписокМБПЭксплуатацияВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	//ПараметрыОтбора = Новый Структура;
	//ПараметрыОтбора.Вставить("Номенклатура", Элемент.ТекущиеДанные.Ссылка);
	//
	//СписокСтрок = Объект.ПодобраннаяНоменклатура.НайтиСтроки(ПараметрыОтбора);
	//Если СписокСтрок.Количество() = 0 Тогда
	//	СТЧПодобранной = Объект.ПодобраннаяНоменклатура.Добавить();
	//	СТЧПодобранной.Номенклатура = Элемент.ТекущиеДАнные.Ссылка;
	//	СТЧПодобранной.Количество = 0;
	//	СТЧПодобранной.Цена = Элемент.ТекущиеДАнные.СуммаОстаток/Элемент.ТекущиеДАнные.КоличествоОстаток;
	//	СТЧПодобранной.Сумма = СТЧПодобранной.Цена; 
	//	СТЧПодобранной.Партия = Элемент.ТекущиеДАнные.Партия;
	//	СТЧПодобранной.СтатусМБП = ПредопределенноеЗначение("Перечисление.СтатусыМБП.Эксплуатация");
	//	СТЧПодобранной.ИндивидуальныйНомер = Элемент.ТекущиеДАнные.ИнвНомер;
	//	СТЧПодобранной.ДатаВыдачи = Элемент.ТекущиеДАнные.ДатаВыдачи;
	//	СТЧПодобранной.Партия = Элемент.ТекущиеДАнные.Партия;
	//Иначе 
	//	СТЧПодобранной = СписокСтрок[0];
	//КонецЕсли;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыНоменклатуры = Новый Структура;
	ПараметрыНоменклатуры.Вставить("ВидПодбора", 			ВидПодбора);
	ПараметрыНоменклатуры.Вставить("СчетУчета", 			ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.МБП"));
	ПараметрыНоменклатуры.Вставить("Номенклатура", 			Элемент.ТекущиеДанные.Ссылка);
	ПараметрыНоменклатуры.Вставить("Склад", 				ЭтотОбъект.Склад);
	ПараметрыНоменклатуры.Вставить("Дата", 					ДатаРасчетов);
	ПараметрыНоменклатуры.Вставить("Организация", 			Организация);
	ПараметрыНоменклатуры.Вставить("СтатусМБП",				ПредопределенноеЗначение("Перечисление.СтатусыМБП.Эксплуатация"));
	ПараметрыНоменклатуры.Вставить("ИндивидуальныйНомер", 	Элемент.ТекущиеДанные.ИнвНомер);
	ПараметрыНоменклатуры.Вставить("ДатаВыдачи", 			Элемент.ТекущиеДанные.ДатаВыдачи);
	
	Цена 	= 0;
	Партия 	= Неопределено;
	Если Элемент.ТекущиеДанные.Свойство("Цена") Тогда
		
		ТекущаяВалюта = ?(Элемент.ТекущиеДанные.Свойство("Валюта") И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Валюта),
			Элемент.ТекущиеДанные.Валюта, ВалютаЦены);
			
		Цена 	= ?(ТекущаяВалюта = Валюта, Элемент.ТекущиеДанные.Цена,
			ПолучитьЦенуПослеПересчета(Элемент.ТекущиеДанные.Цена, ТекущаяВалюта, Валюта, ДатаРасчетов));
		Партия 	= Элемент.ТекущиеДанные.Партия;
	КонецЕсли;
	
	ПараметрыНоменклатуры.Вставить("Цена", 		Цена);
	ПараметрыНоменклатуры.Вставить("Партия", 	Партия);
	
	Если Элемент.ТекущиеДанные.Свойство("ЕдиницаИзмерения") Тогда
		ПараметрыНоменклатуры.Вставить("ЕдиницаИзмерения", Элемент.ТекущиеДанные.ЕдиницаИзмерения);
	КонецЕсли;
	
	ОткрытьФормуВводаЦенаКоличество(ПараметрыНоменклатуры);		
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличественныйСчетУчета(СчетУчета)

	Возврат СчетУчета.Количественный;		

КонецФункции // КоличественныйСчетУчета()

#КонецОбласти