#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ДатаНачала") И Параметры.Свойство("ДатаОкончания") Тогда
		ДатаНачала 		= Параметры.ДатаНачала;
		ДатаОкончания 	= Параметры.ДатаОкончания;
	Иначе
		Дата = ТекущаяДатаСеанса();		
		ДатаНачала 		= НачалоГода(Дата);
		ДатаОкончания 	= КонецМесяца(Дата);
	КонецЕсли;
	
	Если Параметры.Свойство("Организация") Тогда 
		Организация = Параметры.Организация;
	Иначе                            
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	ПолучитьТаблицуРасшифровкиПоСобытиямОСНаСервере();

	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьПараметрыДинамическихСписков();
	ПодключитьОбработчикОжидания("ОбновитьОтборДинамическихСписков", 0.2, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьПараметрыДинамическихСписков();
	
	ФормированиеНалогаНаИмущество();
	ПолучитьТаблицуРасшифровкиПоСобытиямОСНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	УстановитьПараметрыДинамическихСписков();

	ФормированиеНалогаНаИмущество();
	ПолучитьТаблицуРасшифровкиПоСобытиямОСНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	УстановитьПараметрыДинамическихСписков();
	
	ФормированиеНалогаНаИмущество();
	ПолучитьТаблицуРасшифровкиПоСобытиямОСНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеОсновныеСредстваПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьОтборДинамическихСписков", 0.2, Истина);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флажка ВключатьЗакрытиеМесяца.
//
&НаКлиенте
Процедура ВключатьЗакрытиеМесяцаПриИзменении(Элемент)	
	РасшифровкаПоСобытиямОС.Очистить();
	ПолучитьТаблицуРасшифровкиПоСобытиямОСНаСервере();
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флажка ТолькоЗакрытиеМесяца.
//
&НаКлиенте
Процедура ТолькоЗакрытиеМесяцаПриИзменении(Элемент)
	РасшифровкаПоСобытиямОС.Очистить();
	ПолучитьТаблицуРасшифровкиПоСобытиямОСНаСервере();
	
	РассчитатьИтогАмортизацииЗаМесяц(Новый Структура("ОсновноеСредство", ОсновноеСредство));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОтборов

// Процедура - обработчик события ПриИзменении поля ввода ОтборГруппаНУ.
//
&НаКлиенте
Процедура ОтборГруппаНУПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ОбновитьОтборДинамическихСписков", 0.2, Истина);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборСчетБУ.
//
&НаКлиенте
Процедура ОтборСчетБУПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ОбновитьОтборДинамическихСписков", 0.2, Истина);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборПодразделение.
//
&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ОбновитьОтборДинамическихСписков", 0.2, Истина);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборМОЛ.
//
&НаКлиенте
Процедура ОтборМОЛПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ОбновитьОтборДинамическихСписков", 0.2, Истина);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборСостояние.
//
&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ОбновитьОтборДинамическихСписков", 0.2, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОС

&НаКлиенте
Процедура СписокОСПриАктивизацииСтроки(Элемент)
	ТекущиеДанныеСписокОС = Элементы.СписокОС.ТекущиеДанные;
	
	Если ТекущиеДанныеСписокОС = Неопределено Тогда
		ОсновноеСредство 				= Неопределено;
		НадписьСобытие 					= "";
		НадписьДата 					= "";
		НадписьПервоначальнаяСтоимость	= "";
		НадписьНакопленныйИзнос 		= "";
		НадписьБазаАмортизации			= "";             
	Иначе 		
		ОсновноеСредство 				= ТекущиеДанныеСписокОС.ОсновноеСредство;
		НадписьСобытие 					= СтрШаблон("Событие: %1", ТекущиеДанныеСписокОС.Событие);
		НадписьДата 					= СтрШаблон("Дата: %1", ТекущиеДанныеСписокОС.ПериодСобытия);
		НадписьПервоначальнаяСтоимость	= СтрШаблон("Первоначальная стоимость: %1", ТекущиеДанныеСписокОС.ПервоначальнаяСтоимость);
		НадписьНакопленныйИзнос 		= СтрШаблон("Накопленный износ: %1", ТекущиеДанныеСписокОС.СуммаАмортизация);
		НадписьБазаАмортизации			= СтрШаблон("База амортизации: %1", ТекущиеДанныеСписокОС.БазаАмортизации);
	КонецЕсли;	
	
	УстановитьОтборНаРасшифровку();
	
	ПодключитьОбработчикОжидания("ОбновитьОтборДинамическихСписков", 0.2, Истина);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПоСобытиямОС

&НаКлиенте
Процедура РасшифровкаПоСобытиямОСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СсылкаДокумента = Элементы.РасшифровкаПоСобытиямОС.ТекущиеДанные.Документ;
	НазваниеДокумента = ПолучитьНазваниеДокумента(СсылкаДокумента);
	ПараметрыФормы 	= Новый Структура("Ключ", СсылкаДокумента);
	ОткрытьФорму("Документ." + НазваниеДокумента + ".ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

&НаКлиенте
Процедура ТранспортПриАктивизацииСтроки(Элемент)
	ТекущаяСтрокаСписка = Элементы.Транспорт.ТекущиеДанные;
	
	Если ТекущаяСтрокаСписка = Неопределено Тогда
		СобытияОСНалогНаИмущество.Параметры.УстановитьЗначениеПараметра("ОсновноеСредство", ПредопределенноеЗначение("Справочник.ОсновныеСредства.ПустаяСсылка"));
	Иначе
		СобытияОСНалогНаИмущество.Параметры.УстановитьЗначениеПараметра("ОсновноеСредство", ТекущаяСтрокаСписка.ОсновноеСредство);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура НедвижимостьПриАктивизацииСтроки(Элемент)
	ТекущаяСтрокаСписка = Элементы.Недвижимость.ТекущиеДанные;
	
	Если ТекущаяСтрокаСписка = Неопределено Тогда
		СобытияОСНалогНаИмущество.Параметры.УстановитьЗначениеПараметра("ОсновноеСредство", ПредопределенноеЗначение("Справочник.ОсновныеСредства.ПустаяСсылка"));
	Иначе
		СобытияОСНалогНаИмущество.Параметры.УстановитьЗначениеПараметра("ОсновноеСредство", ТекущаяСтрокаСписка.ОсновноеСредство);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерепровестиДокументы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросПерепровестиДокументы", ЭтотОбъект, Параметры);
	ТекстВопроса = НСтр("ru = 'Вы уверены, что хотите перепровести документы?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	УстановитьПараметрыДинамическихСписков();
	ФормированиеНалогаНаИмущество();
	ПолучитьТаблицуРасшифровкиПоСобытиямОСНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗамечания(Команда)
	ЗаполнитьЗамечанияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРасшифровку(Команда)
	
	Если ПоказатьРезультатПерепроведения Тогда
		ПоказатьРезультатПерепроведения = Ложь;
		Элементы.ПоказатьРасшифровку.Заголовок = "Показать результат перепроведения";
	Иначе
		ПоказатьРезультатПерепроведения = Истина;
		Элементы.ПоказатьРасшифровку.Заголовок = "Показать расшифровку";
	КонецЕсли;	
	
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросПерепровестиДокументы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПоказатьРезультатПерепроведения = Истина;
		ПоказатьКомандуРасшифровки = Истина;
		ПараметрыКоманды = Новый Структура;
		ПараметрыКоманды.Вставить("МассивСсылок", ПолучитьМассивСсылокДляПерепроведения());
		РезультатВыполнения = ПерепровестиДокументыНаСервере(ПараметрыКоманды);
		ПараметрыОбработчикаОжидания = Новый Структура();
		
		Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда		
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		КонецЕсли;
		
		// Установить видимость и доступность элементов формы
		УстановитьВидимостьДоступностьЭлементов();
	КонецЕсли;                                    	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()	
	
	Элементы.ПерепровестиДокументы.Видимость = НЕ ПоказатьРезультатПерепроведения;
	Элементы.РасшифровкаПоСобытиямОС.Видимость = НЕ ПоказатьРезультатПерепроведения;
	Элементы.Результат.Видимость = ПоказатьРезультатПерепроведения;
	Элементы.СостояниеПрогресса.Видимость = ПоказатьРезультатПерепроведения;
	Элементы.ТолькоЗакрытиеМесяца.Видимость = ВключатьЗакрытиеМесяца;
	Элементы.ПоказатьРасшифровку.Видимость = ПоказатьКомандуРасшифровки;
	
КонецПроцедуры 

//Процедура заполнения ТЧ "РасшифровкиПоСобытиямОС".
//
&НаСервере
Процедура ПолучитьТаблицуРасшифровкиПоСобытиямОСНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УчетнаяПолитикаОрганизаций.НачислениеАмортизацииОСПоМесяцам КАК НачислениеАмортизацииОСПоМесяцам,
		|	УчетнаяПолитикаОрганизаций.Период КАК Период
		|ПОМЕСТИТЬ ВременнаяТаблицаУчетнаяПолитика
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
		|ГДЕ
		|	УчетнаяПолитикаОрганизаций.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыУчетаОС.Период КАК Период,
		|	ПараметрыУчетаОС.Регистратор КАК Регистратор,
		|	ПараметрыУчетаОС.Организация КАК Организация,
		|	ПараметрыУчетаОС.СчетУчета КАК СчетУчета,
		|	ПараметрыУчетаОС.СчетУчета.ПарныйСчет КАК СчетУчетаПарныйСчет,
		|	ПараметрыУчетаОС.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|	ПараметрыУчетаОС.СрокСлужбы КАК СрокСлужбы,
		|	ПараметрыУчетаОС.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
		|	ПараметрыУчетаОС.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
		|	ПараметрыУчетаОС.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС КАК ПараметрыУчетаОС
		|ГДЕ
		|	ПараметрыУчетаОС.Организация = &Организация
		|	И ПараметрыУчетаОС.Период <= &ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыУчетаОСНаДатуОкончания.Период КАК Период,
		|	ПараметрыУчетаОСНаДатуОкончания.Регистратор КАК Регистратор,
		|	ПараметрыУчетаОСНаДатуОкончания.Организация КАК Организация,
		|	ПараметрыУчетаОСНаДатуОкончания.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ ВременнаяТаблицаОсновнаяТаблицаПараметровУчетаОС
		|ИЗ
		|	ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОСНаДатуОкончания
		|ГДЕ
		|	ПараметрыУчетаОСНаДатуОкончания.Период >= &ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.Период, ТаблицаПараметровУчетаОС.Период) КАК Период,
		|	ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.Регистратор, ТаблицаПараметровУчетаОС.Регистратор) КАК Регистратор,
		|	ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.Организация, ТаблицаПараметровУчетаОС.Организация) КАК Организация,
		|	ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КорСубконто1, ТаблицаПараметровУчетаОС.ОсновноеСредство) КАК ОсновноеСредство
		|ПОМЕСТИТЬ ВременнаяТаблицаХозрасчетныйОсновнаяТаблица
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			Регистратор,
		|			,
		|			,
		|			Организация = &Организация
		|				И КорСубконто1 В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ПараметрыУчетаОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОС
		|					ГДЕ
		|						ПараметрыУчетаОС.Период >= &ДатаНачала),
		|			,
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства)) КАК ХозрасчетныйОстаткиИОбороты
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОсновнаяТаблицаПараметровУчетаОС КАК ТаблицаПараметровУчетаОС
		|		ПО ХозрасчетныйОстаткиИОбороты.Регистратор = ТаблицаПараметровУчетаОС.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Период КАК Период,
		|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ОсновноеСредство,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК НакопленныйИзнос
		|ПОМЕСТИТЬ ВременнаяТаблицаХозрасчетныйНакопленныйИзнос
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			,
		|			&ДатаОкончания,
		|			Регистратор,
		|			Счет В 
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ПараметрыУчетаОС.СчетУчетаПарныйСчет
		|				ИЗ
		|					ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОС
		|				ГДЕ
		|					ПараметрыУчетаОС.Период >= &ДатаНачала),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ПараметрыУчетаОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОС
		|					ГДЕ
		|						ПараметрыУчетаОС.Период >= &ДатаНачала)) КАК ХозрасчетныйОстаткиИОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Регистратор КАК Регистратор,
		|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ОсновноеСредство,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК АмортизацияЗаМесяц
		|ПОМЕСТИТЬ ВременнаяТаблицаХозрасчетныйАмортизацияЗаМесяц
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			Регистратор,
		|			Счет В 
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ПараметрыУчетаОС.СчетУчетаПарныйСчет
		|				ИЗ
		|					ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОС
		|				ГДЕ
		|					ПараметрыУчетаОС.Период >= &ДатаНачала),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ПараметрыУчетаОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОС
		|					ГДЕ
		|						ПараметрыУчетаОС.Период >= &ДатаНачала)) КАК ХозрасчетныйОстаткиИОбороты
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ПараметрыУчетаОС.Период КАК Период
		|ПОМЕСТИТЬ ВременнаяТаблицаДатаПринятияКУчетуОС
		|ИЗ
		|	ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОС
		|ГДЕ
		|	ПараметрыУчетаОС.Регистратор ССЫЛКА Документ.ПринятиеКУчетуОС
		|	ИЛИ ПараметрыУчетаОС.Регистратор ССЫЛКА Документ.ВводНачальныхОстатков
		|	ИЛИ ПараметрыУчетаОС.Регистратор ССЫЛКА Документ.МодернизацияОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОсновнаяТаблица.Период КАК Период,
		|	ХозрасчетныйОсновнаяТаблица.Регистратор КАК Регистратор,
		|	ХозрасчетныйОсновнаяТаблица.Организация КАК Организация,
		|	ХозрасчетныйОсновнаяТаблица.ОсновноеСредство КАК ОсновноеСредство,
		|	Сумма(ХозрасчетныйНакопленныйИзнос.НакопленныйИзнос) КАК НакопленныйИзнос		
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныеНакопленнымИзносом
		|ИЗ
		|	ВременнаяТаблицаХозрасчетныйОсновнаяТаблица КАК ХозрасчетныйОсновнаяТаблица
		|   	ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаХозрасчетныйНакопленныйИзнос КАК ХозрасчетныйНакопленныйИзнос
		|		ПО ХозрасчетныйОсновнаяТаблица.ОсновноеСредство = ХозрасчетныйНакопленныйИзнос.ОсновноеСредство
		|       	И ХозрасчетныйОсновнаяТаблица.Период >= ХозрасчетныйНакопленныйИзнос.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОсновнаяТаблица.Период,
		|	ХозрасчетныйОсновнаяТаблица.Регистратор,
		|	ХозрасчетныйОсновнаяТаблица.Организация,
		|	ХозрасчетныйОсновнаяТаблица.ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.Период КАК Период,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.Регистратор КАК Регистратор,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.Организация КАК Организация,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.НакопленныйИзнос КАК НакопленныйИзнос,
		|	МАКСИМУМ(УчетнаяПолитика.Период) КАК ПериодУП,
		|	МАКСИМУМ(ДатаПринятияКУчетуОС.Период) КАК ДатаПринятияОС
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныеСПериодами 
		|ИЗ
		|	ВременнаяТаблицаДанныеНакопленнымИзносом КАК ВременнаяТаблицаДанныеНакопленнымИзносом
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаУчетнаяПолитика КАК УчетнаяПолитика
		|		ПО ВременнаяТаблицаДанныеНакопленнымИзносом.Период >= УчетнаяПолитика.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаДатаПринятияКУчетуОС КАК ДатаПринятияКУчетуОС
		|		ПО ВЫБОР
		|				КОГДА ВременнаяТаблицаДанныеНакопленнымИзносом.Регистратор ССЫЛКА Документ.МодернизацияОС
		|					ТОГДА ВременнаяТаблицаДанныеНакопленнымИзносом.Период >= ДОБАВИТЬКДАТЕ(ДатаПринятияКУчетуОС.Период, ДЕНЬ, 1)
		|				ИНАЧЕ ВременнаяТаблицаДанныеНакопленнымИзносом.Период >= ДатаПринятияКУчетуОС.Период
		|			КОНЕЦ
		|			И ВременнаяТаблицаДанныеНакопленнымИзносом.ОсновноеСредство >= ДатаПринятияКУчетуОС.ОсновноеСредство
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.Период,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.Регистратор,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.Организация,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.ОсновноеСредство,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.НакопленныйИзнос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МестонахождениеОС.Период КАК Период,
		|	МестонахождениеОС.Организация КАК Организация,
		|	МестонахождениеОС.ОсновноеСредство КАК ОсновноеСредство,
		|	МестонахождениеОС.МОЛ КАК МОЛ,
		|	МестонахождениеОС.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВременнаяТаблицаМестонахождениеОС
		|ИЗ
		|	РегистрСведений.МестонахождениеОС КАК МестонахождениеОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанных.Период КАК Период,
		|	ТаблицаДанных.Организация КАК Организация,
		|	ТаблицаДанных.Регистратор КАК Документ,
		|	ТаблицаДанных.ОсновноеСредство КАК ОсновноеСредство,
		|	ВЫБОР
		|		КОГДА ТаблицаДанных.Регистратор ССЫЛКА Документ.ПринятиеКУчетуОС
		|			ТОГДА 0
		|		ИНАЧЕ ХозрасчетныйАмортизацияЗаМесяц.АмортизацияЗаМесяц
		|	КОНЕЦ КАК АмортизацияЗаМесяц,
		|	СобытияОС.Событие КАК Событие,
		|	ТаблицаДанных.НакопленныйИзнос КАК НакопленныйИзнос,
		|	ЕСТЬNULL(ТаблицаДанных.ДатаПринятияОС, ДАТАВРЕМЯ(1,1,1,0,0,0)) КАК ДатаПринятияОС,
		|	УчетнаяПолитика.НачислениеАмортизацииОСПоМесяцам КАК НачислениеАмортизацииОСПоМесяцам,
		|	МАКСИМУМ(ПараметрыУчетаОС.Период) КАК ПериодПараметровУчета,
		|	МАКСИМУМ(МестонахождениеОС.Период) КАК ПериодМестонахождениеОС
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныеОС
		|ИЗ
		|	ВременнаяТаблицаДанныеСПериодами КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаУчетнаяПолитика КАК УчетнаяПолитика
		|		ПО ТаблицаДанных.ПериодУП = УчетнаяПолитика.Период
		|   	ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаХозрасчетныйАмортизацияЗаМесяц КАК ХозрасчетныйАмортизацияЗаМесяц
		|		ПО ТаблицаДанных.ОсновноеСредство = ХозрасчетныйАмортизацияЗаМесяц.ОсновноеСредство
		|       	И ТаблицаДанных.Регистратор = ХозрасчетныйАмортизацияЗаМесяц.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОС
		|		ПО ТаблицаДанных.ОсновноеСредство = ПараметрыУчетаОС.ОсновноеСредство
		|			И ТаблицаДанных.Период >= ПараметрыУчетаОС.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытияОС КАК СобытияОС
		|		ПО ТаблицаДанных.Регистратор = СобытияОС.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаМестонахождениеОС КАК МестонахождениеОС
		|		ПО ТаблицаДанных.Организация = МестонахождениеОС.Организация
		|			И ТаблицаДанных.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
		|			И ТаблицаДанных.Период >= МестонахождениеОС.Период
		|ГДЕ
		|	ВЫБОР 
		|		КОГДА &ВключатьЗМ И &ТолькоЗМ
		|			ТОГДА ТаблицаДанных.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
		|		КОГДА &ВключатьЗМ
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ НЕ ТаблицаДанных.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
		|	КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДанных.Регистратор,
		|	ТаблицаДанных.Организация,
		|	ТаблицаДанных.ОсновноеСредство,
		|	ТаблицаДанных.НакопленныйИзнос,
		|	ХозрасчетныйАмортизацияЗаМесяц.АмортизацияЗаМесяц,
		|	УчетнаяПолитика.НачислениеАмортизацииОСПоМесяцам,
		|	ТаблицаДанных.ДатаПринятияОС,
		|	ТаблицаДанных.Период,
		|	СобытияОС.Событие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанных.Период КАК Дата,
		|	ТаблицаДанных.Документ КАК Документ,
		|	ТаблицаДанных.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаДанных.Событие КАК Событие,
		|	ПараметрыУчетаОС.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|	ТаблицаДанных.АмортизацияЗаМесяц КАК АмортизацияЗаМесяц,
		|	ТаблицаДанных.НакопленныйИзнос КАК НакопленныйИзнос,
		|	МестонахождениеОС.МОЛ КАК МОЛ,
		|	МестонахождениеОС.Подразделение КАК Подразделение,
		|	ПараметрыУчетаОС.СчетУчета КАК Счет,
		|	ПараметрыУчетаОС.СчетУчетаПарныйСчет КАК СчетНачисленияАмортизации,
		|	ПараметрыУчетаОС.СрокСлужбы КАК СрокСлужбы,
		|	ПараметрыУчетаОС.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
		|	ПараметрыУчетаОС.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
		|	ТаблицаДанных.ДатаПринятияОС КАК ДатаПринятияОС,
		|	ТаблицаДанных.НачислениеАмортизацииОСПоМесяцам КАК НачислениеАмортизацииОСПоМесяцам
		|ИЗ
		|	ВременнаяТаблицаДанныеОС КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОС
		|		ПО ТаблицаДанных.ОсновноеСредство = ПараметрыУчетаОС.ОсновноеСредство
		|			И ТаблицаДанных.ПериодПараметровУчета = ПараметрыУчетаОС.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаМестонахождениеОС КАК МестонахождениеОС
		|		ПО ТаблицаДанных.Организация = МестонахождениеОС.Организация
		|			И ТаблицаДанных.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
		|			И ТаблицаДанных.ПериодМестонахождениеОС = МестонахождениеОС.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВключатьЗМ", ВключатьЗакрытиеМесяца);
	Запрос.УстановитьПараметр("ТолькоЗМ", ТолькоЗакрытиеМесяца);
	
	РасшифровкаПоСобытиямОС.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // ПолучитьТаблицуРасшифровкиПоСобытиямОСНаСервере()

// Процедура установки значений параметров динамических списков.
//
// Параметры:
//	ИзменилосьОС - Булево - проверка изменения значения реквизита "ОсновноеСредство".
//
&НаКлиенте
Процедура УстановитьПараметрыДинамическихСписков()
	
	// СписокОС
	СписокОС.Параметры.УстановитьЗначениеПараметра("НачалоПериода", НачалоГода(ДатаНачала));
	СписокОС.Параметры.УстановитьЗначениеПараметра("КонецПериода", КонецГода(ДатаОкончания));
	СписокОС.Параметры.УстановитьЗначениеПараметра("Организация", Организация);
	СписокОС.Параметры.УстановитьЗначениеПараметра("СписокСчетовУчетаАмортизации", БухгалтерскийУчетВызовСервераПовтИсп.СчетаУчетаНакопленнойАмортизацииОсновныхСредствИНематериальныхАктивов());
	
	// СводПоСчетам
	СводПоСчетам.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ДатаНачала);
	СводПоСчетам.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(ДатаОкончания));
	СводПоСчетам.Параметры.УстановитьЗначениеПараметра("Организация", Организация);
	
	// АмортизацияПоОС
	АмортизацияПоОС.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ДатаНачала);
	АмортизацияПоОС.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(ДатаОкончания));
	АмортизацияПоОС.Параметры.УстановитьЗначениеПараметра("Организация", Организация);
	
	// СобытияОС Налог на имущество.
	СобытияОСНалогНаИмущество.Параметры.УстановитьЗначениеПараметра("НачалоПериода", ДатаНачала);
	СобытияОСНалогНаИмущество.Параметры.УстановитьЗначениеПараметра("КонецПериода", КонецДня(ДатаОкончания));
	СобытияОСНалогНаИмущество.Параметры.УстановитьЗначениеПараметра("Организация", Организация);
	
	ТекущаяСтрокаСписка = Элементы.Транспорт.ТекущиеДанные;
	Если ТекущаяСтрокаСписка = Неопределено Тогда
		СобытияОСНалогНаИмущество.Параметры.УстановитьЗначениеПараметра("ОсновноеСредство", ПредопределенноеЗначение("Справочник.ОсновныеСредства.ПустаяСсылка"));
	Иначе
		СобытияОСНалогНаИмущество.Параметры.УстановитьЗначениеПараметра("ОсновноеСредство", ТекущаяСтрокаСписка.ОсновноеСредство);
	КонецЕсли;	
	
КонецПроцедуры

//Процедура заполнения ТЧ "Расшифровка".
//
&НаСервере
Процедура ФормированиеНалогаНаИмущество()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	МАКСИМУМ(ЗакрытиеМесяца.Ссылка) КАК ЗакрытиеМесяцаСсылка
		|ПОМЕСТИТЬ ВременнаяТаблицаЗакрытиеМесяца
		|ИЗ
		|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
		|ГДЕ
		|	ЗакрытиеМесяца.Проведен
		|	И ЗакрытиеМесяца.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаЗакрытиеМесяца.ЗакрытиеМесяцаСсылка.Транспорт.(
		|		ВидТранспортаКатегорияАБВ КАК ВидТранспортаКатегорияАБВ,
		|		ОсновноеСредство КАК ОсновноеСредство,
		|		ВидТранспорта КАК ВидТранспорта,
		|		ОбъемДвигателя КАК ОбъемДвигателя,
		|		Ставка КАК Ставка,
		|		СуммаНалога КАК СуммаНалога,
		|		КоличествоМесяцевЭксплуатации КАК КоличествоМесяцевЭксплуатации,
		|		ГруппаИмущества КАК ГруппаИмущества
		|	) КАК Транспорт,
		|	ВременнаяТаблицаЗакрытиеМесяца.ЗакрытиеМесяцаСсылка.Недвижимость.(
		|		ГруппаИмущества КАК ГруппаИмущества,
		|		ОсновноеСредство КАК ОсновноеСредство,
		|		ДатаПоступления КАК ДатаПоступления,
		|		ДатаНачисленияНалогаНаИмущество КАК ДатаНачисленияНалогаНаИмущество,
		|		МатериалСтен КАК МатериалСтен,
		|		ОценочнаяСтоимость КАК ОценочнаяСтоимость,
		|		ЖилаяПлощадь КАК ЖилаяПлощадь,
		|		Кр КАК Кр,
		|		Кз КАК Кз,
		|		Ко КАК Ко,
		|		СтоимостьНУ КАК СтоимостьНУ,
		|		ЗемНалог КАК ЗемНалог,
		|		КоличествоМесяцевЭксплуатации КАК КоличествоМесяцевЭксплуатации,
		|		Ставка КАК Ставка,
		|		СуммаНалога КАК СуммаНалога
		|	) КАК Недвижимость
		|ИЗ
		|	ВременнаяТаблицаЗакрытиеМесяца КАК ВременнаяТаблицаЗакрытиеМесяца";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ДатаОкончания));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
		
	Если НЕ МассивРезультатов[1].Пустой() Тогда 
		ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
		ВыборкаИзРезультатаЗапроса.Следующий();
		
		Объект.Транспорт.Загрузить(ВыборкаИзРезультатаЗапроса.Транспорт.Выгрузить());
		Объект.Недвижимость.Загрузить(ВыборкаИзРезультатаЗапроса.Недвижимость.Выгрузить());
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНаРасшифровку()

	Если ОсновноеСредство = Неопределено Тогда
		СтруктураОтбора = Неопределено;	
	Иначе
		СтруктураОтбора = Новый ФиксированнаяСтруктура("ОсновноеСредство", ОсновноеСредство);
		РассчитатьИтогАмортизацииЗаМесяц(Новый Структура("ОсновноеСредство", ОсновноеСредство));
	КонецЕсли;	

	Элементы.РасшифровкаПоСобытиямОС.ОтборСтрок = СтруктураОтбора;
КонецПроцедуры

// Процедура обновляет динамические списки
//
&НаКлиенте
Процедура ОбновитьОтборДинамическихСписков()

	// СписокОС
	ИмяПоля = "СчетУчета";
	Если ЗначениеЗаполнено(ОтборСчетУчета) Тогда 
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ИмяПоля);
		Если МассивЭлементов.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля, ВидСравненияКомпоновкиДанных.Равно, ОтборСчетУчета);
		Иначе
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля,, ОтборСчетУчета, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	Иначе 
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокОС, ИмяПоля);
	КонецЕсли;	
	
	ИмяПоля = "Подразделение";
	Если ЗначениеЗаполнено(ОтборПодразделение) Тогда 
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ИмяПоля);
		Если МассивЭлементов.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля, ВидСравненияКомпоновкиДанных.Равно, ОтборПодразделение);
		Иначе
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля,, ОтборПодразделение, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	Иначе 
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокОС, ИмяПоля);
	КонецЕсли;	
	
	ИмяПоля = "МОЛ";
	Если ЗначениеЗаполнено(ОтборМОЛ) Тогда 
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ИмяПоля);
		Если МассивЭлементов.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля, ВидСравненияКомпоновкиДанных.Равно, ОтборМОЛ);
		Иначе
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля,, ОтборМОЛ, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	Иначе 
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокОС, ИмяПоля);
	КонецЕсли;	

	ИмяПоля = "Состояние";
	Если ЗначениеЗаполнено(ОтборСостояние) Тогда 
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ИмяПоля);
		Если МассивЭлементов.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля, ВидСравненияКомпоновкиДанных.Равно, ОтборСостояние);
		Иначе
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля,, ОтборСостояние, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	Иначе 
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокОС, ИмяПоля);
	КонецЕсли;	
	
	ИмяПоля = "ГруппаНУ";
	Если ЗначениеЗаполнено(ОтборГруппаНУ) Тогда 
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ИмяПоля);
		Если МассивЭлементов.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля, ВидСравненияКомпоновкиДанных.Равно, ОтборГруппаНУ);
		Иначе
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СписокОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля,, ОтборГруппаНУ, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	Иначе 
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокОС, ИмяПоля);
	КонецЕсли;	
	
	// Регистры
	ИмяПоля = "ОсновноеСредство";
	
	// МестонахождениеОС
	Если ВсеОсновныеСредства Тогда 
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(МестонахождениеОС, ИмяПоля);
	Иначе 
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(МестонахождениеОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ИмяПоля);
		Если МассивЭлементов.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(МестонахождениеОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля, ВидСравненияКомпоновкиДанных.Равно, ОсновноеСредство);
		Иначе
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(МестонахождениеОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля,, ОсновноеСредство, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	КонецЕсли;	
	
	// СобытияОС
	Если ВсеОсновныеСредства Тогда 
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СобытияОС, ИмяПоля);
	Иначе 
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СобытияОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ИмяПоля);
		Если МассивЭлементов.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СобытияОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля, ВидСравненияКомпоновкиДанных.Равно, ОсновноеСредство);
		Иначе
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СобытияОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля,, ОсновноеСредство, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	КонецЕсли;	
	
	// СостояниеОС
	Если ВсеОсновныеСредства Тогда 
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СостояниеОС, ИмяПоля);
	Иначе 
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СостояниеОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ИмяПоля);
		Если МассивЭлементов.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СостояниеОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля, ВидСравненияКомпоновкиДанных.Равно, ОсновноеСредство);
		Иначе
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СостояниеОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля,, ОсновноеСредство, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	КонецЕсли;	
	
	// ПараметрыУчетаОС
	Если ВсеОсновныеСредства Тогда 
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(ПараметрыУчетаОС, ИмяПоля);
	Иначе 
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ПараметрыУчетаОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ИмяПоля);
		Если МассивЭлементов.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ПараметрыУчетаОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля, ВидСравненияКомпоновкиДанных.Равно, ОсновноеСредство);
		Иначе
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(ПараметрыУчетаОС.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
				ИмяПоля,, ОсновноеСредство, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

//Процедура заполнения таблицы значений "Замечания".
//
&НаСервере
Процедура ЗаполнитьЗамечанияНаСервере()
	
	Замечания.Очистить();
	
	//Для Каждого СтрокаТаблицы Из СписокОС_ТЗ Цикл		
	//	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ГруппаНУ) Тогда
	//		СтрокаТаблицыЗамечания = Замечания.Добавить();
	//		СтрокаТаблицыЗамечания.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
	//		СтрокаТаблицыЗамечания.Замечание = НСтр("ru = 'Не указана группа НУ'")
	//	КонецЕсли;	
	//	
	//	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Подразделение) Тогда
	//		СтрокаТаблицыЗамечания = Замечания.Добавить();
	//		СтрокаТаблицыЗамечания.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
	//		СтрокаТаблицыЗамечания.Замечание = НСтр("ru = 'Не указано подразделение организации'")
	//	КонецЕсли;
	//КонецЦикла;	
КонецПроцедуры

// Функция получения ссылок документов.
//
// Параметры:
//	Ссылка - ДокументСсылка - ссылка на выбранный документ.
//
// Возвращаемое значение:
//	Имя - Строка - название документа.
//
&НаСервере
Функция ПолучитьНазваниеДокумента(Ссылка)
	
	Возврат Ссылка.Метаданные().Имя

КонецФункции

&НаКлиенте
Процедура РассчитатьИтогАмортизацииЗаМесяц(СтруктураПоиска)

	МассивСтрок = РасшифровкаПоСобытиямОС.НайтиСтроки(СтруктураПоиска);
	
	ИтогАмортизацияЗаМесяц = 0;
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл			
		ИтогАмортизацияЗаМесяц = ИтогАмортизацияЗаМесяц + СтрокаМассива.АмортизацияЗаМесяц;			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФоновоеЗаданиеПерепровестиДокументы

// Функция получения ссылок документов.
//
// Возвращаемое значение:
//	МассивСсылок - Массив - Массив ссылок документов.
//
&НаСервере
Функция ПолучитьМассивСсылокДляПерепроведения()

	РасшифровкаПоСобытиямОС.Сортировать("Дата Возр");
	МассивСсылок = Новый Массив;
	Для каждого СтрокаТаблицы Из РасшифровкаПоСобытиямОС Цикл
		МассивСсылок.Добавить(СтрокаТаблицы.Документ);
	КонецЦикла;

	Возврат МассивСсылок;	

КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЭтаФорма.СостояниеПрогресса = 100;
			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			ДанныеПрогресса = ПолучитьИзВременногоХранилища(АдресХранилищаПрогресса);
			ЭтаФорма.СостояниеПрогресса = ДанныеПрогресса;
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;	
КонецПроцедуры

// Функция перепроведения документов.
//
// Параметры:
//	ПараметрыКоманды - Структура - параметры.
//
// Возвращаемое значение:
//	РезультатВыполнения - Структура - результат выполнения перепроведения.
//
&НаСервере
Функция ПерепровестиДокументыНаСервере(ПараметрыКоманды)
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	АдресРасшифровки = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресХранилищаПрогресса = ПоместитьВоВременноеХранилище(, УникальныйИдентификатор);
	ПараметрыКоманды.Вставить("АдресРасшифровки", АдресРасшифровки);
	ПараметрыКоманды.Вставить("АдресХранилищаПрогресса", АдресХранилищаПрогресса);
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.МониторОС.ПерепровестиДокументы",
		ПараметрыКоманды,
		СтрШаблон(НСтр("ru = 'Перепроведение документов: %1'"), ЭтаФорма.Заголовок));
	
	АдресХранилища       = РезультатВыполнения.АдресХранилища;
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
КонецФункции

// Процедура вывода информации о перепроведении в табличный документ.
//
&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат         = РезультатВыполнения.Результат;
	
	ИдентификаторЗадания = Неопределено;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
КонецФункции

#КонецОбласти
