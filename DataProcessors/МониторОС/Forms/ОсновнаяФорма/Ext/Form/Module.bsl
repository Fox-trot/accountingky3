#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ДатаНачала") И Параметры.Свойство("ДатаОкончания") Тогда
		ДатаНачала 		= Параметры.ДатаНачала;
		ДатаОкончания 	= Параметры.ДатаОкончания;
	Иначе
		Дата = ТекущаяДатаСеанса();		
		ДатаНачала 		= НачалоГода(Дата);
		ДатаОкончания 	= КонецМесяца(Дата);
	КонецЕсли;
	
	Если Параметры.Свойство("Организация") Тогда 
		Организация = Параметры.Организация;
	Иначе                            
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьПараметрыДинамическихСписков(Ложь);
	ПолучитьТаблицуРасшифровкиПоСобытиямОСНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	КорректностьДат = ПроверитьКорректностьУказаныхДат();
	
	Если КорректностьДат Тогда
		УстановитьПараметрыДинамическихСписков(Ложь);
		ФормированиеНалогаНаИмущество();
		ПолучитьТаблицуРасшифровкиПоСобытиямОСНаСервере();	
	Иначе
		ДатаНачала = ДатаОкончания - 86400;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	КорректностьДат = ПроверитьКорректностьУказаныхДат();
	
	Если КорректностьДат Тогда
		УстановитьПараметрыДинамическихСписков(Ложь);
		ФормированиеНалогаНаИмущество();
		ПолучитьТаблицуРасшифровкиПоСобытиямОСНаСервере();	
	Иначе
		ДатаОкончания = ДатаНачала + 86400;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОтборов

// Процедура - обработчик события ПриИзменении поля ввода ОтборГруппаНУ.
// Обращается к процедуре "УстановитьОтборСпискаОС" которая устанавливает 
// отбор в динамическом списке "СписокОС_ТЗ".
//
&НаКлиенте
Процедура ОтборГруппаНУПриИзменении(Элемент)
	УстановитьОтборСпискаОС()	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборСчетБУ.
// Обращается к процедуре "УстановитьОтборСпискаОС" которая устанавливает 
// отбор в динамическом списке "СписокОС_ТЗ".
//
&НаКлиенте
Процедура ОтборСчетБУПриИзменении(Элемент)
	УстановитьОтборСпискаОС()
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборПодразделение.
// Обращается к процедуре "УстановитьОтборСпискаОС" которая устанавливает 
// отбор в динамическом списке "СписокОС_ТЗ".
//
&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	УстановитьОтборСпискаОС()
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборМОЛ.
// Обращается к процедуре "УстановитьОтборСпискаОС" которая устанавливает 
// отбор в динамическом списке "СписокОС_ТЗ".
//
&НаКлиенте
Процедура ОтборМОЛПриИзменении(Элемент)
	УстановитьОтборСпискаОС()
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборСостояние.
// Обращается к процедуре "УстановитьОтборСпискаОС" которая устанавливает 
// отбор в динамическом списке "СписокОС_ТЗ".
//
&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	УстановитьОтборСпискаОС()
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ВключатьЗакрытиеМесяца.
//
&НаКлиенте
Процедура ВключатьЗакрытиеМесяцаПриИзменении(Элемент)	
	ПолучитьТаблицуРасшифровкиПоСобытиямОСНаСервере();
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ТолькоЗакрытиеМесяцаПриИзменении(Элемент)
	ПолучитьТаблицуРасшифровкиПоСобытиямОСНаСервере();
	
	РассчитатьИтогАмортизацииЗаМесяц(Новый Структура("ОсновноеСредство", ОсновноеСредство));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОС

&НаКлиенте
Процедура СписокОС_ТЗПриАктивизацииСтроки(Элемент)
	
	СтрокаТаблицыЗначений = Элементы.СписокОС_ТЗ.ТекущиеДанные;
	
	Если СтрокаТаблицыЗначений <> Неопределено Тогда
		ОсновноеСредство 				= СтрокаТаблицыЗначений.ОсновноеСредство;
		НадписьСобытие 					= СтрШаблон("Событие: %1", СтрокаТаблицыЗначений.Событие);
		НадписьДата 					= СтрШаблон("Дата: %1", СтрокаТаблицыЗначений.ДатаСобытия);
		НадписьПервоначальнаяСтоимость	= СтрШаблон("Первоначальная стоимость: %1", СтрокаТаблицыЗначений.ПервоначальнаяСтоимость);
		НадписьНакопленныйИзнос 		= СтрШаблон("Накопленный износ: %1", СтрокаТаблицыЗначений.НакопленныйИзнос);
	Иначе
		ОсновноеСредство 				= Неопределено;
		НадписьСобытие 					= "";
		НадписьДата 					= "";
		НадписьПервоначальнаяСтоимость	= "";
		НадписьНакопленныйИзнос 		= "";
	КонецЕсли;	
	
	УстановитьОтборНаРасшифровку();
	УстановитьПараметрыДинамическихСписков(Истина);		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПоСобытиямОС

// Процедура - обработчик события ПриАктивизацииСтроки поля ввода РасшифровкаПоСобытиямОС.
//
&НаКлиенте
Процедура РасшифровкаПоСобытиямОСПриАктивизацииСтроки(Элемент)
	
	СтрокаТЧ = Элемент.ТекущиеДанные;
	СтруктураСтроки = Новый Структура;
	Если НЕ СтрокаТЧ = Неопределено Тогда
		
		//НадписьДокумент 					= "Документ: " 		+ Строка(СтрокаТЧ.Документ);
		НадписьДата 						= "Дата события: " 			+ Строка(СтрокаТЧ.Дата);
		НадписьНакопленныйИзнос 			= "Накопленный износ: " 	+ Строка(СтрокаТЧ.НакопленныйИзнос);
		НадписьПервоначальнаяСтоимость 		= "Первоначальная стоимость: " 		+ Строка(СтрокаТЧ.ПервоначальнаяСтоимость);
		НадписьСобытие 						= "Событие: " 		+ Строка(СтрокаТЧ.Событие);
		//НадписьСчетБУ 						= "Счет: " 			+ Строка(СтрокаТЧ.Счет);
		//НадписьСчетНачисленияАмортизации 	= "Счет начисления амортизации: " 	+ Строка(СтрокаТЧ.СчетНачисленияАмортизации);
		//НадписьСрокИспользования 			= "Срок использования: " 		+ Строка(СтрокаТЧ.СрокСлужбы);	
		//НадписьОтражениеАмортизации			= "Отражение расх/аморт: " + Строка(СтрокаТЧ.СпособОтраженияРасходовПоАмортизации);	
		
	Иначе
		Элементы.НадписьДата.Заголовок 							= "";
		//Элементы.НадписьДокумент.Заголовок 						= "";
		Элементы.НадписьНакопленныйИзнос.Заголовок 				= "";
		Элементы.НадписьПервоначальнаяСтоимость.Заголовок 		= "";
		Элементы.НадписьСобытие.Заголовок 						= "";
		//Элементы.НадписьСчетБУ.Заголовок 						= "";
		//Элементы.НадписьСчетНачисленияАмортизации.Заголовок 	= "";
		//Элементы.НадписьСрокИспользования.Заголовок 			= "";
		//Элементы.НадписьОтражениеАмортизации.Заголовок			= "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПоСобытиямОСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СсылкаДокумента = Элементы.РасшифровкаПоСобытиямОС.ТекущиеДанные.Документ;
	НазваниеДокумента = ПолучитьНазваниеДокумента(СсылкаДокумента);
	ПараметрыФормы 	= Новый Структура("Ключ", СсылкаДокумента);
	ОткрытьФорму("Документ." + НазваниеДокумента + ".ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерепровестиДокументы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросПерепровестиДокументы", ЭтотОбъект, Параметры);
	ТекстВопроса = НСтр("ru = 'Вы уверены, что хотите перепровести документы?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	КорректныеДаты = ПроверитьКорректностьУказаныхДат();
	
	Если КорректныеДаты Тогда
		УстановитьПараметрыДинамическихСписков(Ложь);
		ФормированиеНалогаНаИмущество();
		ПолучитьТаблицуРасшифровкиПоСобытиямОСНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗамечания(Команда)
	ЗаполнитьЗамечанияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРасшифровку(Команда)
	
	Если ПоказатьРезультатПерепроведения Тогда
		ПоказатьРезультатПерепроведения = Ложь;
		Элементы.ПоказатьРасшифровку.Заголовок = "Показать результат перепроведения";
	Иначе
		ПоказатьРезультатПерепроведения = Истина;
		Элементы.ПоказатьРасшифровку.Заголовок = "Показать расшифровку";
	КонецЕсли;	
	
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросПерепровестиДокументы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПоказатьРезультатПерепроведения = Истина;
		ПоказатьКомандуРасшифровки = Истина;
		ПараметрыКоманды = Новый Структура;
		ПараметрыКоманды.Вставить("МассивСсылок", ПолучитьМассивСсылокДляПерепроведения());
		РезультатВыполнения = ПерепровестиДокументыНаСервере(ПараметрыКоманды);
		ПараметрыОбработчикаОжидания = Новый Структура();
		
		Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда		
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		КонецЕсли;
		
		// Установить видимость и доступность элементов формы
		УстановитьВидимостьДоступностьЭлементов();
	КонецЕсли;                                    	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()	
	
	Элементы.ПерепровестиДокументы.Видимость = НЕ ПоказатьРезультатПерепроведения;
	Элементы.РасшифровкаПоСобытиямОС.Видимость = НЕ ПоказатьРезультатПерепроведения;
	Элементы.Результат.Видимость = ПоказатьРезультатПерепроведения;
	Элементы.СостояниеПрогресса.Видимость = ПоказатьРезультатПерепроведения;
	Элементы.ТолькоЗакрытиеМесяца.Видимость = ВключатьЗакрытиеМесяца;
	Элементы.ПоказатьРасшифровку.Видимость = ПоказатьКомандуРасшифровки;
КонецПроцедуры 

Процедура ЗаполнитьСписокОС()

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПараметрыУчета.ОсновноеСредство КАК ОсновноеСредство,
		|	ПараметрыУчета.ОсновноеСредство.Наименование КАК Наименование
		|ПОМЕСТИТЬ ВременнаяТаблицаОсновныеСредства
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС КАК ПараметрыУчета
		|ГДЕ
		|	ПараметрыУчета.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыУчетаОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	ПараметрыУчетаОССрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ПараметрыУчетаОССрезПоследних.СчетУчета КАК СчетУчета,
		|	ПараметрыУчетаОССрезПоследних.СчетУчета.ПарныйСчет КАК СчетНачисленияАмортизации,
		|	ПараметрыУчетаОССрезПоследних.ГруппаНУ КАК ГруппаНУ
		|ПОМЕСТИТЬ ВременнаяТаблицаПараметрыУчетаОС
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(&ДатаОкончания, Организация = &Организация) КАК ПараметрыУчетаОССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаПараметрыУчетаОС.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ВременнаяТаблицаПараметрыУчетаОС.СчетУчета КАК СчетУчета,
		|	ВременнаяТаблицаПараметрыУчетаОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
		|	ВременнаяТаблицаПараметрыУчетаОС.ГруппаНУ КАК ГруппаНУ,
		|	МестонахождениеОССрезПоследних.МОЛ КАК МОЛ,
		|	МестонахождениеОССрезПоследних.Подразделение КАК Подразделение,
		|	СостоянияОССрезПоследних.Состояние КАК СостояниеОС,
		|	Износ.СуммаКонечныйОстатокКт КАК НакопленныйИзнос,
		|	Стоимость.СуммаКонечныйОстатокДт КАК ПервоначальнаяСтоимость,
		|   СобытияОССрезПоследних.Событие КАК Событие,
		|   СобытияОССрезПоследних.Период КАК ДатаСобытия
		|ИЗ
		|	ВременнаяТаблицаОсновныеСредства КАК ОсновныеСредства
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаПараметрыУчетаОС КАК ВременнаяТаблицаПараметрыУчетаОС
		|		ПО ОсновныеСредства.ОсновноеСредство = ВременнаяТаблицаПараметрыУчетаОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС.СрезПоследних(&ДатаОкончания, Организация = &Организация) КАК МестонахождениеОССрезПоследних
		|		ПО ОсновныеСредства.ОсновноеСредство = МестонахождениеОССрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОС.СрезПоследних(&ДатаОкончания, Организация = &Организация) КАК СостоянияОССрезПоследних
		|		ПО ОсновныеСредства.ОсновноеСредство = СостоянияОССрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытияОС.СрезПоследних(&ДатаОкончания, Организация = &Организация) КАК СобытияОССрезПоследних
		|		ПО ОсновныеСредства.ОсновноеСредство = СобытияОССрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|				,
		|				&ДатаОкончания,
		|				,
		|				,
		|				Счет В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаПараметрыУчетаОС.СчетНачисленияАмортизации
		|					ИЗ
		|						ВременнаяТаблицаПараметрыУчетаОС КАК ВременнаяТаблицаПараметрыУчетаОС),
		|				,
		|				Организация = &Организация
		|					И Субконто1 В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаПараметрыУчетаОС.ОсновноеСредство
		|						ИЗ
		|							ВременнаяТаблицаПараметрыУчетаОС КАК ВременнаяТаблицаПараметрыУчетаОС)) КАК Износ
		|		ПО ОсновныеСредства.ОсновноеСредство = Износ.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|				,
		|				&ДатаОкончания,
		|				,
		|				,
		|				Счет В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаПараметрыУчетаОС.СчетУчета
		|					ИЗ
		|						ВременнаяТаблицаПараметрыУчетаОС КАК ВременнаяТаблицаПараметрыУчетаОС),
		|				,
		|				Организация = &Организация
		|					И Субконто1 В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаПараметрыУчетаОС.ОсновноеСредство
		|						ИЗ
		|							ВременнаяТаблицаПараметрыУчетаОС КАК ВременнаяТаблицаПараметрыУчетаОС)) КАК Стоимость
		|		ПО ОсновныеСредства.ОсновноеСредство = Стоимость.Субконто1
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОсновныеСредства.Наименование";
	Запрос.УстановитьПараметр("ДатаНачала", 	НачалоГода(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", 	КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("Организация", 	Организация);
	
	СписокОС_ТЗ.Очистить();
	СписокОС_ТЗ.Загрузить(Запрос.Выполнить().Выгрузить());	
КонецПроцедуры

// Функция проверки корректности введенных дат начала и окончания.
//
// Возвращаемое значение:
//	Ложь/Истина - Булево - признак правильности введенных дат.
//
&НаКлиенте
Функция ПроверитьКорректностьУказаныхДат()

	Если ДатаНачала > ДатаОкончания Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата начала периода не может быть больше даты окончания. Формирование отменено!'"));
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	

КонецФункции

//Процедура заполнения ТЧ "РасшифровкиПоСобытиямОС".
//
&НаСервере
Процедура ПолучитьТаблицуРасшифровкиПоСобытиямОСНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УчетнаяПолитикаОрганизаций.НачислениеАмортизацииОСПоМесяцам КАК НачислениеАмортизацииОСПоМесяцам,
		|	УчетнаяПолитикаОрганизаций.Период КАК Период
		|ПОМЕСТИТЬ ВременнаяТаблицаУчетнаяПолитика
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
		|ГДЕ
		|	УчетнаяПолитикаОрганизаций.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыУчетаОС.Период КАК Период,
		|	ПараметрыУчетаОС.Регистратор КАК Регистратор,
		|	ПараметрыУчетаОС.Организация КАК Организация,
		|	ПараметрыУчетаОС.СчетУчета КАК СчетУчета,
		|	ПараметрыУчетаОС.СчетУчета.ПарныйСчет КАК СчетУчетаПарныйСчет,
		|	ПараметрыУчетаОС.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|	ПараметрыУчетаОС.СрокСлужбы КАК СрокСлужбы,
		|	ПараметрыУчетаОС.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
		|	ПараметрыУчетаОС.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
		|	ПараметрыУчетаОС.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС КАК ПараметрыУчетаОС
		|ГДЕ
		|	ПараметрыУчетаОС.Организация = &Организация
		|	И ПараметрыУчетаОС.Период <= &ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыУчетаОСНаДатуОкончания.Период КАК Период,
		|	ПараметрыУчетаОСНаДатуОкончания.Регистратор КАК Регистратор,
		|	ПараметрыУчетаОСНаДатуОкончания.Организация КАК Организация,
		|	ПараметрыУчетаОСНаДатуОкончания.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ ВременнаяТаблицаОсновнаяТаблицаПараметровУчетаОС
		|ИЗ
		|	ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОСНаДатуОкончания
		|ГДЕ
		|	ПараметрыУчетаОСНаДатуОкончания.Период >= &ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.Период, ТаблицаПараметровУчетаОС.Период) КАК Период,
		|	ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.Регистратор, ТаблицаПараметровУчетаОС.Регистратор) КАК Регистратор,
		|	ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.Организация, ТаблицаПараметровУчетаОС.Организация) КАК Организация,
		|	ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КорСубконто1, ТаблицаПараметровУчетаОС.ОсновноеСредство) КАК ОсновноеСредство
		|ПОМЕСТИТЬ ВременнаяТаблицаХозрасчетныйОсновнаяТаблица
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			Регистратор,
		|			,
		|			,
		|			Организация = &Организация
		|				И КорСубконто1 В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ПараметрыУчетаОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОС
		|					ГДЕ
		|						ПараметрыУчетаОС.Период >= &ДатаНачала),
		|			,
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства)) КАК ХозрасчетныйОстаткиИОбороты
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОсновнаяТаблицаПараметровУчетаОС КАК ТаблицаПараметровУчетаОС
		|		ПО ХозрасчетныйОстаткиИОбороты.Регистратор = ТаблицаПараметровУчетаОС.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Период КАК Период,
		|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ОсновноеСредство,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК НакопленныйИзнос
		|ПОМЕСТИТЬ ВременнаяТаблицаХозрасчетныйНакопленныйИзнос
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			,
		|			&ДатаОкончания,
		|			Регистратор,
		|			Счет В 
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ПараметрыУчетаОС.СчетУчетаПарныйСчет
		|				ИЗ
		|					ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОС
		|				ГДЕ
		|					ПараметрыУчетаОС.Период >= &ДатаНачала),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ПараметрыУчетаОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОС
		|					ГДЕ
		|						ПараметрыУчетаОС.Период >= &ДатаНачала)) КАК ХозрасчетныйОстаткиИОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Регистратор КАК Регистратор,
		|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ОсновноеСредство,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК АмортизацияЗаМесяц
		|ПОМЕСТИТЬ ВременнаяТаблицаХозрасчетныйАмортизацияЗаМесяц
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			Регистратор,
		|			Счет В 
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ПараметрыУчетаОС.СчетУчетаПарныйСчет
		|				ИЗ
		|					ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОС
		|				ГДЕ
		|					ПараметрыУчетаОС.Период >= &ДатаНачала),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ПараметрыУчетаОС.ОсновноеСредство
		|					ИЗ
		|						ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОС
		|					ГДЕ
		|						ПараметрыУчетаОС.Период >= &ДатаНачала)) КАК ХозрасчетныйОстаткиИОбороты
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ПараметрыУчетаОС.Период КАК Период
		|ПОМЕСТИТЬ ВременнаяТаблицаДатаПринятияКУчетуОС
		|ИЗ
		|	ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОС
		|ГДЕ
		|	ПараметрыУчетаОС.Регистратор ССЫЛКА Документ.ПринятиеКУчетуОС
		|	ИЛИ ПараметрыУчетаОС.Регистратор ССЫЛКА Документ.ВводНачальныхОстатков
		|	ИЛИ ПараметрыУчетаОС.Регистратор ССЫЛКА Документ.МодернизацияОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОсновнаяТаблица.Период КАК Период,
		|	ХозрасчетныйОсновнаяТаблица.Регистратор КАК Регистратор,
		|	ХозрасчетныйОсновнаяТаблица.Организация КАК Организация,
		|	ХозрасчетныйОсновнаяТаблица.ОсновноеСредство КАК ОсновноеСредство,
		|	Сумма(ХозрасчетныйНакопленныйИзнос.НакопленныйИзнос) КАК НакопленныйИзнос		
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныеНакопленнымИзносом
		|ИЗ
		|	ВременнаяТаблицаХозрасчетныйОсновнаяТаблица КАК ХозрасчетныйОсновнаяТаблица
		|   	ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаХозрасчетныйНакопленныйИзнос КАК ХозрасчетныйНакопленныйИзнос
		|		ПО ХозрасчетныйОсновнаяТаблица.ОсновноеСредство = ХозрасчетныйНакопленныйИзнос.ОсновноеСредство
		|       	И ХозрасчетныйОсновнаяТаблица.Период >= ХозрасчетныйНакопленныйИзнос.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОсновнаяТаблица.Период,
		|	ХозрасчетныйОсновнаяТаблица.Регистратор,
		|	ХозрасчетныйОсновнаяТаблица.Организация,
		|	ХозрасчетныйОсновнаяТаблица.ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.Период КАК Период,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.Регистратор КАК Регистратор,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.Организация КАК Организация,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.НакопленныйИзнос КАК НакопленныйИзнос,
		|	МАКСИМУМ(УчетнаяПолитика.Период) КАК ПериодУП,
		|	МАКСИМУМ(ДатаПринятияКУчетуОС.Период) КАК ДатаПринятияОС
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныеСПериодами 
		|ИЗ
		|	ВременнаяТаблицаДанныеНакопленнымИзносом КАК ВременнаяТаблицаДанныеНакопленнымИзносом
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаУчетнаяПолитика КАК УчетнаяПолитика
		|		ПО ВременнаяТаблицаДанныеНакопленнымИзносом.Период >= УчетнаяПолитика.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаДатаПринятияКУчетуОС КАК ДатаПринятияКУчетуОС
		|		ПО ВЫБОР
		|				КОГДА ВременнаяТаблицаДанныеНакопленнымИзносом.Регистратор ССЫЛКА Документ.МодернизацияОС
		|					ТОГДА ВременнаяТаблицаДанныеНакопленнымИзносом.Период >= ДОБАВИТЬКДАТЕ(ДатаПринятияКУчетуОС.Период, ДЕНЬ, 1)
		|				ИНАЧЕ ВременнаяТаблицаДанныеНакопленнымИзносом.Период >= ДатаПринятияКУчетуОС.Период
		|			КОНЕЦ
		|			И ВременнаяТаблицаДанныеНакопленнымИзносом.ОсновноеСредство >= ДатаПринятияКУчетуОС.ОсновноеСредство
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.Период,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.Регистратор,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.Организация,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.ОсновноеСредство,
		|	ВременнаяТаблицаДанныеНакопленнымИзносом.НакопленныйИзнос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МестонахождениеОС.Период КАК Период,
		|	МестонахождениеОС.Организация КАК Организация,
		|	МестонахождениеОС.ОсновноеСредство КАК ОсновноеСредство,
		|	МестонахождениеОС.МОЛ КАК МОЛ,
		|	МестонахождениеОС.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВременнаяТаблицаМестонахождениеОС
		|ИЗ
		|	РегистрСведений.МестонахождениеОС КАК МестонахождениеОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанных.Период КАК Период,
		|	ТаблицаДанных.Организация КАК Организация,
		|	ТаблицаДанных.Регистратор КАК Документ,
		|	ТаблицаДанных.ОсновноеСредство КАК ОсновноеСредство,
		|	ВЫБОР
		|		КОГДА ТаблицаДанных.Регистратор ССЫЛКА Документ.ПринятиеКУчетуОС
		|			ТОГДА 0
		|		ИНАЧЕ ХозрасчетныйАмортизацияЗаМесяц.АмортизацияЗаМесяц
		|	КОНЕЦ КАК АмортизацияЗаМесяц,
		|	СобытияОС.Событие КАК Событие,
		|	ТаблицаДанных.НакопленныйИзнос КАК НакопленныйИзнос,
		|	ЕСТЬNULL(ТаблицаДанных.ДатаПринятияОС, ДАТАВРЕМЯ(1,1,1,0,0,0)) КАК ДатаПринятияОС,
		|	УчетнаяПолитика.НачислениеАмортизацииОСПоМесяцам КАК НачислениеАмортизацииОСПоМесяцам,
		|	МАКСИМУМ(ПараметрыУчетаОС.Период) КАК ПериодПараметровУчета,
		|	МАКСИМУМ(МестонахождениеОС.Период) КАК ПериодМестонахождениеОС
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныеОС
		|ИЗ
		|	ВременнаяТаблицаДанныеСПериодами КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаУчетнаяПолитика КАК УчетнаяПолитика
		|		ПО ТаблицаДанных.ПериодУП = УчетнаяПолитика.Период
		|   	ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаХозрасчетныйАмортизацияЗаМесяц КАК ХозрасчетныйАмортизацияЗаМесяц
		|		ПО ТаблицаДанных.ОсновноеСредство = ХозрасчетныйАмортизацияЗаМесяц.ОсновноеСредство
		|       	И ТаблицаДанных.Регистратор = ХозрасчетныйАмортизацияЗаМесяц.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОС
		|		ПО ТаблицаДанных.ОсновноеСредство = ПараметрыУчетаОС.ОсновноеСредство
		|			И ТаблицаДанных.Период >= ПараметрыУчетаОС.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытияОС КАК СобытияОС
		|		ПО ТаблицаДанных.Регистратор = СобытияОС.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаМестонахождениеОС КАК МестонахождениеОС
		|		ПО ТаблицаДанных.Организация = МестонахождениеОС.Организация
		|			И ТаблицаДанных.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
		|			И ТаблицаДанных.Период >= МестонахождениеОС.Период
		|ГДЕ
		|	ВЫБОР 
		|		КОГДА &ВключатьЗМ И &ТолькоЗМ
		|			ТОГДА ТаблицаДанных.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
		|		КОГДА &ВключатьЗМ
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ НЕ ТаблицаДанных.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
		|	КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДанных.Регистратор,
		|	ТаблицаДанных.Организация,
		|	ТаблицаДанных.ОсновноеСредство,
		|	ТаблицаДанных.НакопленныйИзнос,
		|	ХозрасчетныйАмортизацияЗаМесяц.АмортизацияЗаМесяц,
		|	УчетнаяПолитика.НачислениеАмортизацииОСПоМесяцам,
		|	ТаблицаДанных.ДатаПринятияОС,
		|	ТаблицаДанных.Период,
		|	СобытияОС.Событие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанных.Период КАК Дата,
		|	ТаблицаДанных.Документ КАК Документ,
		|	ТаблицаДанных.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаДанных.Событие КАК Событие,
		|	ПараметрыУчетаОС.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|	ТаблицаДанных.АмортизацияЗаМесяц КАК АмортизацияЗаМесяц,
		|	ТаблицаДанных.НакопленныйИзнос КАК НакопленныйИзнос,
		|	МестонахождениеОС.МОЛ КАК МОЛ,
		|	МестонахождениеОС.Подразделение КАК Подразделение,
		|	ПараметрыУчетаОС.СчетУчета КАК Счет,
		|	ПараметрыУчетаОС.СчетУчетаПарныйСчет КАК СчетНачисленияАмортизации,
		|	ПараметрыУчетаОС.СрокСлужбы КАК СрокСлужбы,
		|	ПараметрыУчетаОС.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
		|	ПараметрыУчетаОС.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
		|	ТаблицаДанных.ДатаПринятияОС КАК ДатаПринятияОС,
		|	ТаблицаДанных.НачислениеАмортизацииОСПоМесяцам КАК НачислениеАмортизацииОСПоМесяцам
		|ИЗ
		|	ВременнаяТаблицаДанныеОС КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаПараметрыУчетаОСНаДатуОкончания КАК ПараметрыУчетаОС
		|		ПО ТаблицаДанных.ОсновноеСредство = ПараметрыУчетаОС.ОсновноеСредство
		|			И ТаблицаДанных.ПериодПараметровУчета = ПараметрыУчетаОС.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаМестонахождениеОС КАК МестонахождениеОС
		|		ПО ТаблицаДанных.Организация = МестонахождениеОС.Организация
		|			И ТаблицаДанных.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
		|			И ТаблицаДанных.ПериодМестонахождениеОС = МестонахождениеОС.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	Запрос.УстановитьПараметр("ДатаОкончания", 		КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ДатаНачала", 		НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("ВключатьЗМ",			ВключатьЗакрытиеМесяца);
	Запрос.УстановитьПараметр("ТолькоЗМ",			ТолькоЗакрытиеМесяца);
	
	РасшифровкаПоСобытиямОС.Очистить();
	РасшифровкаПоСобытиямОС.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры // ПолучитьТаблицуРасшифровкиПоСобытиямОСНаСервере()

// Процедура установки значений параметров динамических списков.
//
// Параметры:
//	ИзменилосьОС - Булево - проверка изменения значения реквизита "ОсновноеСредство".
//
&НаКлиенте
Процедура УстановитьПараметрыДинамическихСписков(ИзменилосьОС)
	
	Если ИзменилосьОС Тогда
		МестонахождениеОС.Параметры.УстановитьЗначениеПараметра("ОсновноеСредство", ОсновноеСредство);
		СобытияОС.Параметры.УстановитьЗначениеПараметра("ОсновноеСредство", 		ОсновноеСредство);
		СостояниеОС.Параметры.УстановитьЗначениеПараметра("ОсновноеСредство", 		ОсновноеСредство);
		ОС.Параметры.УстановитьЗначениеПараметра("ОсновноеСредство", 				ОсновноеСредство);
		ПараметрыУчетаОС.Параметры.УстановитьЗначениеПараметра("ОсновноеСредство", 	ОсновноеСредство);
		
	Иначе
		ЗаполнитьСписокОС();
		
		СводПоСчетам.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", 		КонецДня(ДатаОкончания));
		СводПоСчетам.Параметры.УстановитьЗначениеПараметра("ДатаНачала", 			НачалоДня(ДатаНачала));
		СводПоСчетам.Параметры.УстановитьЗначениеПараметра("Организация", 			Организация);
		
		АмортизацияПоОС.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", 		КонецДня(ДатаОкончания));
		АмортизацияПоОС.Параметры.УстановитьЗначениеПараметра("ДатаНачала", 		НачалоДня(ДатаНачала));
		АмортизацияПоОС.Параметры.УстановитьЗначениеПараметра("Организация", 		Организация);
	КонецЕсли;
КонецПроцедуры

//Процедура заполнения ТЧ "Расшифровка".
//
&НаСервере
Процедура ФормированиеНалогаНаИмущество()
	
	// Выборка из Сведений, что происходило с выбранным ОС
	Запрос = Новый Запрос;
	Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	Сведения.Регистратор КАК Регистратор,
		//|	Сведения.Регистратор.Дата КАК Дата,
		//|	Сведения.ЖилаяПлощадь КАК ЖилаяПлощадь,
		//|	Сведения.НежилаяПлощадь КАК НежилаяПлощадь,
		//|	ЕСТЬNULL(Сведения.РегиональныйКоэффициент.Коэффициент, 1) КАК К1,
		//|	ЕСТЬNULL(Сведения.ЗональныйКоэффициент.Коэффициент, 1) КАК К2,
		//|	ЕСТЬNULL(Сведения.ОтраслевойКоэффициент.Коэффициент, 1) КАК К3,
		//|	ОценочнаяСтоимость.Стоимость КАК Стоимость,
		//|	Ставки.Ставка КАК Ставка,
		//|	0 КАК ВидТранспорта,
		//|	0 КАК ОбъемДвигателя
		//|ИЗ
		//|	РегистрСведений.СведенияОбИмуществе КАК Сведения
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОценочнаяСтоимостьПоВидамМатериалов.СрезПоследних КАК ОценочнаяСтоимость
		//|		ПО Сведения.МатериалСтен = ОценочнаяСтоимость.МатериалСтен
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНалогаНаИмущество.СрезПоследних КАК Ставки
		//|		ПО Сведения.ГруппаИмущества = Ставки.ГруппаНалогаНаИмущество
		//|ГДЕ
		//|	Сведения.ОсновноеСредство = &ОсновноеСредство
		//|	И ГОД(&Дата) - ГОД(Сведения.ДатаВводаВЭксплуатацию) МЕЖДУ ОценочнаяСтоимость.ОтЛет И ВЫБОР
		//|			КОГДА ОценочнаяСтоимость.ДоЛет = 0
		//|				ТОГДА 1000
		//|			ИНАЧЕ ОценочнаяСтоимость.ДоЛет - 1
		//|		КОНЕЦ
		//|	И Сведения.Регистратор.Организация = &Организация
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	Сведения.Регистратор,
		//|	Сведения.Регистратор.Дата,
		//|	0,
		//|	0,
		//|	0,
		//|	0,
		//|	0,
		//|	0,
		//|	Ставки.Ставка,
		//|	Сведения.ВидТранспорта,
		//|	Сведения.ОбъемДвигателя
		//|ИЗ
		//|	РегистрСведений.СведенияОТранспорте КАК Сведения
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНалогаНаТранспорт.СрезПоследних КАК Ставки
		//|		ПО Сведения.ВидТранспорта = Ставки.ВидТранспорта
		//|ГДЕ
		//|	Сведения.ОсновноеСредство = &ОсновноеСредство
		//|	И ГОД(&Дата) - ГОД(Сведения.ДатаВводаВЭксплуатацию) МЕЖДУ Ставки.ОтЛет И ВЫБОР
		//|			КОГДА Ставки.ДоЛет = 0
		//|				ТОГДА 1000
		//|			ИНАЧЕ Ставки.ДоЛет - 1
		//|		КОНЕЦ
		//|	И Сведения.Регистратор.Организация = &Организация
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	Дата";
		"ВЫБРАТЬ
		|	СведенияОбИмуществеСрезПоследних.Регистратор КАК Регистратор,
		|	СведенияОбИмуществеСрезПоследних.Период КАК Дата,
		|	СведенияОбИмуществеСрезПоследних.ЖилаяПлощадь КАК ЖилаяПлощадь,
		|	СведенияОбИмуществеСрезПоследних.НежилаяПлощадь КАК НежилаяПлощадь,
		|	ЕСТЬNULL(СведенияОбИмуществеСрезПоследних.РегиональныйКоэффициент, 1) КАК К1,
		|	ЕСТЬNULL(СведенияОбИмуществеСрезПоследних.ЗональныйКоэффициент, 1) КАК К2,
		|	ЕСТЬNULL(СведенияОбИмуществеСрезПоследних.ОтраслевойКоэффициент, 1) КАК К3,
		|	ВидыМатериаловСтенНалогНаИмуществоШкалаОценкиСтоимости.Ставка КАК Стоимость,
		|	СтавкиНалогаНаИмуществоСрезПоследних.Ставка КАК Ставка,
		|	НЕОПРЕДЕЛЕНО КАК ВидТранспорта,
		|	НЕОПРЕДЕЛЕНО КАК ОбъемДвигателя
		|ИЗ
		|	РегистрСведений.СведенияОбИмуществе.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство) КАК СведенияОбИмуществеСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыМатериаловСтенНалогНаИмущество.ШкалаОценкиСтоимости КАК ВидыМатериаловСтенНалогНаИмуществоШкалаОценкиСтоимости
		|		ПО СведенияОбИмуществеСрезПоследних.МатериалСтен = ВидыМатериаловСтенНалогНаИмуществоШкалаОценкиСтоимости.Ссылка
		|			И (ГОД(&Период) - ГОД(СведенияОбИмуществеСрезПоследних.ДатаВводаВЭксплуатацию) >= ВидыМатериаловСтенНалогНаИмуществоШкалаОценкиСтоимости.НижняяГраница)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНалогаНаИмущество.СрезПоследних КАК СтавкиНалогаНаИмуществоСрезПоследних
		|		ПО СведенияОбИмуществеСрезПоследних.ГруппаИмущества = СтавкиНалогаНаИмуществоСрезПоследних.ГруппаНалогаНаИмущество
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОТранспортеСрезПоследних.Регистратор,
		|	СведенияОТранспортеСрезПоследних.Период,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	ВидыТранспортаНалогНаИмуществоШкалаОценкиСтоимости.Ставка,
		|	СведенияОТранспортеСрезПоследних.ВидТранспорта,
		|	СведенияОТранспортеСрезПоследних.ОбъемДвигателя
		|ИЗ
		|	РегистрСведений.СведенияОТранспорте.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство) КАК СведенияОТранспортеСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыТранспортаНалогНаИмущество.ШкалаОценкиСтоимости КАК ВидыТранспортаНалогНаИмуществоШкалаОценкиСтоимости
		|		ПО СведенияОТранспортеСрезПоследних.ВидТранспорта = ВидыТранспортаНалогНаИмуществоШкалаОценкиСтоимости.Ссылка
		|			И (ГОД(&Период) - ГОД(СведенияОТранспортеСрезПоследних.ДатаВводаВЭксплуатацию) >= ВидыТранспортаНалогНаИмуществоШкалаОценкиСтоимости.НижняяГраница)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	Запрос.УстановитьПараметр("ОсновноеСредство", 	ОсновноеСредство);
	Запрос.УстановитьПараметр("Период", 			ДатаОкончания);
	Запрос.УстановитьПараметр("Организация", 		Организация);
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	// Запрос на списание выбранного ОС
	ЗапросСписание = Новый Запрос;
	ЗапросСписание.Текст = 
		"ВЫБРАТЬ
		|	СобытияОС.Период КАК Дата,
		|	СобытияОС.Регистратор
		|ИЗ
		|	РегистрСведений.СобытияОС КАК СобытияОС
		|ГДЕ
		|	СобытияОС.ОсновноеСредство = &ОсновноеСредство
		|	И СобытияОС.Событие = &Событие
		|	И СобытияОС.Организация = &Организация";  	
	ЗапросСписание.УстановитьПараметр("ОсновноеСредство", 	ОсновноеСредство);
	ЗапросСписание.УстановитьПараметр("Событие", 			Перечисления.ВидыСобытийОС.Списание);
	ЗапросСписание.УстановитьПараметр("Организация", 		Организация);
	ТЗСписание = ЗапросСписание.Выполнить().Выгрузить();
	
	Объект.Расшифровка.Очистить();
	
	Если ТЗ.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	// если ОС списано в прошлом году, информация не выводится
	Если ТЗСписание.Количество() <> 0 И Год(ТЗСписание[ТЗСписание.Количество()-1].Дата) < Год(ДатаОкончания) Тогда
		Возврат;
	КонецЕсли;
	
	//расчет количества месяцев, в течение которых использовалось ОС
	КолМесяцев = Новый Массив;
	Сч = 0;
	
	Если ТЗСписание.Количество() > 0 И Год(ТЗСписание[ТЗСписание.Количество()-1].Дата) = Год(ДатаОкончания) Тогда
		МесяцСписания = Месяц(ТЗСписание[ТЗСписание.Количество()-1].Дата);
	Иначе
		МесяцСписания = 12;
	КонецЕсли;
	
	Для Каждого СТЗ Из ТЗ Цикл
		КолМесяцев.Добавить(МесяцСписания);
		Если Год(ДатаОкончания) = Год(СТЗ.Дата) Тогда 
			КолМесяцев[Сч] = КолМесяцев[Сч] - Месяц(СТЗ.Дата) + 1;
		КонецЕсли;
		Сч = Сч+1;
	КонецЦикла;
	
	Если ТЗ.Количество() > 1 Тогда
		Для Сч = 0 По ТЗ.Количество()-1 Цикл
			Для СчВ = Сч+1 По ТЗ.Количество()-1 Цикл
				Если ТЗ[Сч].Дата < ТЗ[СчВ].Дата И ТЗ[СчВ].Дата <> ТЗ[СчВ-1].Дата Тогда
					КолМесяцев[Сч] = КолМесяцев[Сч] - КолМесяцев[СчВ];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// расчет суммы налога. Т.к. в РБ записывается сумма окончательная, то для каждого ОС приходится рассчитывать
	СуммаНалога = Новый Массив;
	Сч = 0;
	Для Каждого СТЗ Из ТЗ Цикл
		Если ОсновноеСредство.ГруппаИмущества = Справочники.ГруппыИмущества.ГИ4 Тогда
			СуммаНалога.Добавить(СТЗ.ОбъемДвигателя);
		Иначе
			СуммаНалога.Добавить(СТЗ.К1*СТЗ.К2*СТЗ.К3*СТЗ.Стоимость*(СТЗ.ЖилаяПлощадь+0.3*СТЗ.НежилаяПлощадь)/100);
		КонецЕсли;
		СуммаНалога[Сч] = СуммаНалога[Сч]*СТЗ.Ставка/12*КолМесяцев[Сч];
		Сч = Сч + 1;
	КонецЦикла;
	
	// вывод строк в табличную часть
	Сч = 0;
	Для Каждого СТЗ Из ТЗ Цикл
		Если КолМесяцев[Сч] > 0 Тогда
			НоваяСтрока = Объект.Расшифровка.Добавить();
			НоваяСтрока.Дата 		= СТЗ.Дата;
			НоваяСтрока.Документ 	= СТЗ.Регистратор;
			НоваяСтрока.КолМесяцев	= КолМесяцев[Сч];
			НоваяСтрока.Сумма 		= СуммаНалога[Сч];
		КонецЕсли;
		Сч = Сч + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНаРасшифровку()

	Если ОсновноеСредство = Неопределено Тогда
		СтруктураОтбора = Неопределено;	
	Иначе
		СтруктураОтбора = Новый ФиксированнаяСтруктура("ОсновноеСредство", ОсновноеСредство);
		РассчитатьИтогАмортизацииЗаМесяц(Новый Структура("ОсновноеСредство", ОсновноеСредство));
	КонецЕсли;	

	Элементы.РасшифровкаПоСобытиямОС.ОтборСтрок = СтруктураОтбора;
КонецПроцедуры

// Процедура установки отборов таблицы значений "СписокОС_ТЗ"
//
&НаКлиенте
Процедура УстановитьОтборСпискаОС()

	СтруктураОтбора = Неопределено;
	МассивЗаполнения = Новый Массив();
	СтрокаКолонокФиксированнойСтруктуры = "";
	
	Если ЗначениеЗаполнено(ОтборГруппаНУ) Тогда
		СтрокаКолонокФиксированнойСтруктуры = "ГруппаНУ";
		МассивЗаполнения.Добавить(ОтборГруппаНУ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСчетУчета) Тогда
		Если СтрокаКолонокФиксированнойСтруктуры = "" Тогда
			СтрокаКолонокФиксированнойСтруктуры = "СчетУчета";
		Иначе
			СтрокаКолонокФиксированнойСтруктуры = СтрокаКолонокФиксированнойСтруктуры + ", СчетУчета";
		КонецЕсли;	
		МассивЗаполнения.Добавить(ОтборСчетУчета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
		Если СтрокаКолонокФиксированнойСтруктуры = "" Тогда
			СтрокаКолонокФиксированнойСтруктуры = "Подразделение";
		Иначе
			СтрокаКолонокФиксированнойСтруктуры = СтрокаКолонокФиксированнойСтруктуры + ", Подразделение";
		КонецЕсли;	
		МассивЗаполнения.Добавить(ОтборПодразделение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборМОЛ) Тогда
		Если СтрокаКолонокФиксированнойСтруктуры = "" Тогда
			СтрокаКолонокФиксированнойСтруктуры = "МОЛ";
		Иначе
			СтрокаКолонокФиксированнойСтруктуры = СтрокаКолонокФиксированнойСтруктуры + ", МОЛ";
		КонецЕсли;	
		МассивЗаполнения.Добавить(ОтборМОЛ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСостояние) Тогда
		Если СтрокаКолонокФиксированнойСтруктуры = "" Тогда
			СтрокаКолонокФиксированнойСтруктуры = "Состояние";
		Иначе
			СтрокаКолонокФиксированнойСтруктуры = СтрокаКолонокФиксированнойСтруктуры + ", Состояние";
		КонецЕсли;	
		МассивЗаполнения.Добавить(ОтборСостояние);
	КонецЕсли;

	Если МассивЗаполнения.Количество() = 1 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаКолонокФиксированнойСтруктуры, МассивЗаполнения[0]);
		
	ИначеЕсли МассивЗаполнения.Количество() = 2 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаКолонокФиксированнойСтруктуры, 
									МассивЗаполнения[0],
									МассивЗаполнения[1]);
		
	ИначеЕсли МассивЗаполнения.Количество() = 3 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаКолонокФиксированнойСтруктуры, 
									МассивЗаполнения[0],
									МассивЗаполнения[1],
									МассивЗаполнения[2]);
		
	ИначеЕсли МассивЗаполнения.Количество() = 4 Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаКолонокФиксированнойСтруктуры, 
									МассивЗаполнения[0],
									МассивЗаполнения[1],
									МассивЗаполнения[2],
									МассивЗаполнения[3]);
		
	ИначеЕсли МассивЗаполнения.Количество() = 5 Тогда	
	 	СтруктураОтбора = Новый ФиксированнаяСтруктура(СтрокаКолонокФиксированнойСтруктуры, 
									МассивЗаполнения[0],
									МассивЗаполнения[1],
									МассивЗаполнения[2],
									МассивЗаполнения[3],
									МассивЗаполнения[4]);
	КонецЕсли;	
		
	Элементы.СписокОС_ТЗ.ОтборСтрок = СтруктураОтбора;	
КонецПроцедуры

//Процедура заполнения таблицы значений "Замечания".
//
&НаСервере
Процедура ЗаполнитьЗамечанияНаСервере()
	
	Замечания.Очистить();
	
	Для Каждого СтрокаТаблицы Из СписокОС_ТЗ Цикл		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ГруппаНУ) Тогда
			СтрокаТаблицыЗамечания = Замечания.Добавить();
			СтрокаТаблицыЗамечания.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
			СтрокаТаблицыЗамечания.Замечание = НСтр("ru = 'Не указана группа НУ'")
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Подразделение) Тогда
			СтрокаТаблицыЗамечания = Замечания.Добавить();
			СтрокаТаблицыЗамечания.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
			СтрокаТаблицыЗамечания.Замечание = НСтр("ru = 'Не указано подразделение организации'")
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

// Функция получения ссылок документов.
//
// Параметры:
//	Ссылка - ДокументСсылка - ссылка на выбранный документ.
//
// Возвращаемое значение:
//	Имя - Строка - название документа.
//
&НаСервере
Функция ПолучитьНазваниеДокумента(Ссылка)
	
	Возврат Ссылка.Метаданные().Имя

КонецФункции

&НаКлиенте
Процедура РассчитатьИтогАмортизацииЗаМесяц(СтруктураПоиска)

	МассивСтрок = РасшифровкаПоСобытиямОС.НайтиСтроки(СтруктураПоиска);
	
	ИтогАмортизацияЗаМесяц = 0;
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл			
		ИтогАмортизацияЗаМесяц = ИтогАмортизацияЗаМесяц + СтрокаМассива.АмортизацияЗаМесяц;			
	КонецЦикла;	
КонецПроцедуры

#КонецОбласти

#Область ФоновоеЗаданиеПерепровестиДокументы

// Функция получения ссылок документов.
//
// Возвращаемое значение:
//	МассивСсылок - Массив - Массив ссылок документов.
//
&НаСервере
Функция ПолучитьМассивСсылокДляПерепроведения()

	РасшифровкаПоСобытиямОС.Сортировать("Дата Возр");
	МассивСсылок = Новый Массив;
	Для каждого СтрокаТаблицы Из РасшифровкаПоСобытиямОС Цикл
		МассивСсылок.Добавить(СтрокаТаблицы.Документ);
	КонецЦикла;

	Возврат МассивСсылок;	

КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЭтаФорма.СостояниеПрогресса = 100;
			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			ДанныеПрогресса = ПолучитьИзВременногоХранилища(АдресХранилищаПрогресса);
			ЭтаФорма.СостояниеПрогресса = ДанныеПрогресса;
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;	
КонецПроцедуры

// Функция перепроведения документов.
//
// Параметры:
//	ПараметрыКоманды - Структура - параметры.
//
// Возвращаемое значение:
//	РезультатВыполнения - Структура - результат выполнения перепроведения.
//
&НаСервере
Функция ПерепровестиДокументыНаСервере(ПараметрыКоманды)
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	АдресРасшифровки = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресХранилищаПрогресса = ПоместитьВоВременноеХранилище(, УникальныйИдентификатор);
	ПараметрыКоманды.Вставить("АдресРасшифровки", АдресРасшифровки);
	ПараметрыКоманды.Вставить("АдресХранилищаПрогресса", АдресХранилищаПрогресса);
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.МониторОС.ПерепровестиДокументы",
		ПараметрыКоманды,
		СтрШаблон(НСтр("ru = 'Перепроведение документов: %1'"), ЭтаФорма.Заголовок));
	
	АдресХранилища       = РезультатВыполнения.АдресХранилища;
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
КонецФункции

// Процедура вывода информации о перепроведении в табличный документ.
//
&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат         = РезультатВыполнения.Результат;
	
	ИдентификаторЗадания = Неопределено;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
КонецФункции

#КонецОбласти
