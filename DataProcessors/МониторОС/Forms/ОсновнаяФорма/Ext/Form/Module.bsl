#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ДатаНачала") И Параметры.Свойство("ДатаОкончания") Тогда
		ДатаНачала 		= Параметры.ДатаНачала;
		ДатаОкончания 	= Параметры.ДатаОкончания;
	Иначе
		ДатаНачала 		= НачалоГода(ТекущаяДата());
		ДатаОкончания 	= КонецГода(ТекущаяДата());
	КонецЕсли;
	
	Если Параметры.Свойство("Организация") Тогда 
		Организация = Параметры.Организация;
	Иначе                            
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьПараметрыДинамическихСписков(Ложь);
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОтборов

// Процедура - обработчик события ПриИзменении поля ввода ОтборГруппаНУ.
// Обращается к процедуре "УстановитьОтборСпискаОС" которая устанавливает 
// отбор в динамическом списке "СписокОС".
//
&НаКлиенте
Процедура ОтборГруппаНУПриИзменении(Элемент)
	УстановитьОтборСпискаОС()	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборСчетБУ.
// Обращается к процедуре "УстановитьОтборСпискаОС" которая устанавливает 
// отбор в динамическом списке "СписокОС".
//
&НаКлиенте
Процедура ОтборСчетБУПриИзменении(Элемент)
	УстановитьОтборСпискаОС()
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборПодразделение.
// Обращается к процедуре "УстановитьОтборСпискаОС" которая устанавливает 
// отбор в динамическом списке "СписокОС".
//
&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	УстановитьОтборСпискаОС()
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборМОЛ.
// Обращается к процедуре "УстановитьОтборСпискаОС" которая устанавливает 
// отбор в динамическом списке "СписокОС".
//
&НаКлиенте
Процедура ОтборМОЛПриИзменении(Элемент)
	УстановитьОтборСпискаОС()
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборСостояние.
// Обращается к процедуре "УстановитьОтборСпискаОС" которая устанавливает 
// отбор в динамическом списке "СписокОС".
//
&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	УстановитьОтборСпискаОС()
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборСобытие.
//
&НаКлиенте
Процедура ОтборСобытиеПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОтборСобытие) Тогда
		ФиксированнаяСтруктура 		= Новый ФиксированнаяСтруктура("Событие", ОтборСобытие);
		Элементы.РасшифровкаПоСобытиямОС.ОтборСтрок = ФиксированнаяСтруктура; 
	Иначе
		ФиксированнаяСтруктура 		= Новый ФиксированнаяСтруктура();
		Элементы.РасшифровкаПоСобытиямОС.ОтборСтрок = ФиксированнаяСтруктура;		
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ВключатьЗакрытиеМесяца.
//
&НаКлиенте
Процедура ВключатьЗакрытиеМесяцаПриИзменении(Элемент)	
	ПолучитьТаблицуРасшифровкиПоСобытиямОСНаСервере();		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОС

// Процедура - обработчик события ПриАктивизацииСтроки поля ввода СписокОС.
//
&НаКлиенте
Процедура СписокОСПриАктивизацииСтроки(Элемент)
	СтрокаДинамическогоСписка = Элементы.СписокОС.ТекущиеДанные;
	
	Если СтрокаДинамическогоСписка <> Неопределено Тогда
		ОсновноеСредство = СтрокаДинамическогоСписка.ОсновноеСредство;
	Иначе
		ОсновноеСредство = Неопределено;
	КонецЕсли;	
	
	ПолучитьТаблицуРасшифровкиПоСобытиямОСНаСервере();
	УстановитьПараметрыДинамическихСписков(Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПоСобытиямОС

// Процедура - обработчик события ПриАктивизацииСтроки поля ввода РасшифровкаПоСобытиямОС.
//
&НаКлиенте
Процедура РасшифровкаПоСобытиямОСПриАктивизацииСтроки(Элемент)
	
	СтрокаТЧ = Элемент.ТекущиеДанные;
	СтруктураСтроки = Новый Структура;
	Если НЕ СтрокаТЧ = Неопределено Тогда
		
		НадписьДокумент 					= "Документ: " 		+ Строка(СтрокаТЧ.Документ);
		НадписьДата 						= "Дата события: " 			+ Строка(СтрокаТЧ.Дата);
		НадписьДокумент 					= "Документ: " 		+ Строка(СтрокаТЧ.Документ);
		НадписьНакопленныйИзнос 			= "Накопленный износ: " 	+ Строка(СтрокаТЧ.НакопленныйИзнос);
		НадписьПервоначальнаяСтоимость 		= "Первоначальная стоимость: " 		+ Строка(СтрокаТЧ.ПервоначальнаяСтоимость);
		НадписьСобытие 						= "Событие: " 		+ Строка(СтрокаТЧ.Событие);
		НадписьСчетБУ 						= "Счет: " 			+ Строка(СтрокаТЧ.Счет);
		НадписьСчетНачисленияАмортизации 	= "Счет начисления амортизации: " 	+ Строка(СтрокаТЧ.СчетНачисленияАмортизации);
		НадписьСрокИспользования 			= "Срок использования: " 		+ Строка(СтрокаТЧ.СрокСлужбы);	
		НадписьОтражениеАмортизации			= "Отражение расх/аморт: " + Строка(СтрокаТЧ.СпособОтраженияРасходовПоАмортизации);	
		
	Иначе
		Элементы.НадписьДата.Заголовок 							= "";
		Элементы.НадписьДокумент.Заголовок 						= "";
		Элементы.НадписьНакопленныйИзнос.Заголовок 				= "";
		Элементы.НадписьПервоначальнаяСтоимость.Заголовок 		= "";
		Элементы.НадписьСобытие.Заголовок 						= "";
		Элементы.НадписьСчетБУ.Заголовок 						= "";
		Элементы.НадписьСчетНачисленияАмортизации.Заголовок 	= "";
		Элементы.НадписьСрокИспользования.Заголовок 			= "";
		Элементы.НадписьОтражениеАмортизации.Заголовок			= "";
		Элементы.НадписьДатаВводаВЭксплуатацию.Заголовок		= "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПоСобытиямОСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СсылкаДокумента = Элементы.РасшифровкаПоСобытиямОС.ТекущиеДанные.Документ;
	НазваниеДокумента = ПолучитьНазваниеДокумента(СсылкаДокумента);
	ПараметрыФормы 	= Новый Структура("Ключ", СсылкаДокумента);
	ОткрытьФорму("Документ." + НазваниеДокумента + ".ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерепровестиДокументы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросПерепровестиДокументы", ЭтотОбъект, Параметры);
	ТекстВопроса = НСтр("ru = 'Вы уверены, что хотите перепровести документы?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуРасшифровкаПоСобытиямОС(Команда)
//	ПоказатьРезультатПерепроведения = Ложь;
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	КорректныеДаты = ПроверитьКорректностьУказаныхДат();
	
	Если КорректныеДаты Тогда
		УстановитьПараметрыДинамическихСписков(Ложь);
		ФормированиеНалогаНаИмущество();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗамечания(Команда)
	ЗаполнитьЗамечанияНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОтветНаВопросПерепровестиДокументы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПоказатьРезультатПерепроведения = Истина;
		УстановитьВидимостьДоступностьЭлементов();
		ПараметрыКоманды = Новый Структура;
		ПараметрыКоманды.Вставить("МассивСсылок", ПолучитьМассивСсылокДляПерепроведения());
		РезультатВыполнения = ПерепровестиДокументыНаСервере(ПараметрыКоманды);
		ПараметрыОбработчикаОжидания = Новый Структура();
		
		Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда		
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость и доступность элементов.
//
&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()	
	
	Элементы.ПерепровестиДокументы.Видимость 		= НЕ ПоказатьРезультатПерепроведения;
	Элементы.РасшифровкаПоСобытиямОС.Видимость		= НЕ ПоказатьРезультатПерепроведения;
	Элементы.Результат.Видимость					= ПоказатьРезультатПерепроведения;
	Элементы.СостояниеПрогресса.Видимость			= ПоказатьРезультатПерепроведения;

	Если ПоказатьРезультатПерепроведения Тогда
		ПоказатьРезультатПерепроведения = Ложь;                      
		Элементы.ПоказатьТаблицуРасшифровкаПоСобытиямОС.Заголовок = "Показать таблицу расшифровки по событиям ОС";
	Иначе
		ПоказатьРезультатПерепроведения = Истина;
		Элементы.ПоказатьТаблицуРасшифровкаПоСобытиямОС.Заголовок = "Скрыть таблицу расшифровки по событиям ОС";
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()    

// Функция проверки корректности введенных дат начала и окончания.
//
// Возвращаемое значение:
//	Ложь/Истина - Булево - признак правильности введенных дат.
//
&НаКлиенте
Функция ПроверитьКорректностьУказаныхДат()

	Если ДатаНачала > ДатаОкончания Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата начала периода не может быть больше даты окончания. Формирование отменено!'"));
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	

КонецФункции

//Процедура заполнения ТЧ "РасшифровкиПоСобытиямОС".
//
&НаСервере
Процедура ПолучитьТаблицуРасшифровкиПоСобытиямОСНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = 	
	 	"ВЫБРАТЬ
	 	|	ПараметрыУчетаОССрезПоследних.СчетУчета КАК Счет,
	 	|	ПараметрыУчетаОССрезПоследних.СчетУчета.ПарныйСчет КАК СчетНачисленияАмортизации,
	 	|	ПараметрыУчетаОССрезПоследних.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	 	|	ПараметрыУчетаОССрезПоследних.СрокСлужбы КАК СрокСлужбы,
	 	|	ПараметрыУчетаОССрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	 	|	ПараметрыУчетаОССрезПоследних.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
	 	|	ПараметрыУчетаОССрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
	 	|	ПараметрыУчетаОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	 	|ПОМЕСТИТЬ ВременнаяТаблицаПараметрыУчетаОС
	 	|ИЗ
	 	|	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
	 	|			&ДатаОкончания,
	 	|			Организация = &Организация
	 	|				И ОсновноеСредство = &ОсновноеСредство) КАК ПараметрыУчетаОССрезПоследних
	 	|;
	 	|
	 	|////////////////////////////////////////////////////////////////////////////////
	 	|ВЫБРАТЬ
	 	|	ВременнаяТаблицаПараметрыУчетаОС.Счет КАК Счет,
	 	|	ВременнаяТаблицаПараметрыУчетаОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	 	|	ВременнаяТаблицаПараметрыУчетаОС.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	 	|	ВременнаяТаблицаПараметрыУчетаОС.СрокСлужбы КАК СрокСлужбы,
	 	|	ВременнаяТаблицаПараметрыУчетаОС.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	 	|	ВременнаяТаблицаПараметрыУчетаОС.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
	 	|	ВременнаяТаблицаПараметрыУчетаОС.ИнвентарныйНомер КАК ИнвентарныйНомер,
	 	|	ХозрасчетныйОбороты.СуммаОборотКт КАК НакопленныйИзнос,
	 	|	СобытияОССрезПоследних.Период КАК Дата,
	 	|	СобытияОССрезПоследних.Регистратор КАК Документ,
	 	|	СобытияОССрезПоследних.Событие КАК Событие,
	 	|	МестонахождениеОССрезПоследних.МОЛ КАК МОЛ,
	 	|	МестонахождениеОССрезПоследних.Подразделение КАК Подразделение
	 	|ПОМЕСТИТЬ ВременнаяТаблицаСвод
	 	|ИЗ
	 	|	ВременнаяТаблицаПараметрыУчетаОС КАК ВременнаяТаблицаПараметрыУчетаОС
	 	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНачала, &ДатаОкончания, , , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	 	|		ПО ВременнаяТаблицаПараметрыУчетаОС.ОсновноеСредство = ХозрасчетныйОбороты.Субконто1
	 	|			И ВременнаяТаблицаПараметрыУчетаОС.СчетНачисленияАмортизации = ХозрасчетныйОбороты.Счет
	 	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытияОС.СрезПоследних(&ДатаОкончания, Организация = &Организация) КАК СобытияОССрезПоследних
	 	|		ПО ВременнаяТаблицаПараметрыУчетаОС.ОсновноеСредство = СобытияОССрезПоследних.ОсновноеСредство
	 	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС.СрезПоследних(&ДатаОкончания, Организация = &Организация) КАК МестонахождениеОССрезПоследних
	 	|		ПО ВременнаяТаблицаПараметрыУчетаОС.ОсновноеСредство = МестонахождениеОССрезПоследних.ОсновноеСредство
	 	|
	 	|ОБЪЕДИНИТЬ ВСЕ
	 	|
	 	|ВЫБРАТЬ
	 	|	ВременнаяТаблицаПараметрыУчетаОС.Счет,
	 	|	ВременнаяТаблицаПараметрыУчетаОС.СчетНачисленияАмортизации,
	 	|	ВременнаяТаблицаПараметрыУчетаОС.ПервоначальнаяСтоимость,
	 	|	ВременнаяТаблицаПараметрыУчетаОС.СрокСлужбы,
	 	|	ВременнаяТаблицаПараметрыУчетаОС.СпособНачисленияАмортизации,
	 	|	ВременнаяТаблицаПараметрыУчетаОС.СпособОтраженияРасходовПоАмортизации,
	 	|	ВременнаяТаблицаПараметрыУчетаОС.ИнвентарныйНомер,
	 	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт,
	 	|	ХозрасчетныйОстаткиИОбороты.Период,
	 	|	ХозрасчетныйОстаткиИОбороты.Регистратор,
	 	|	СобытияОССрезПоследних.Событие,
	 	|	МестонахождениеОССрезПоследних.МОЛ,
	 	|	МестонахождениеОССрезПоследних.Подразделение
	 	|ИЗ
	 	|	ВременнаяТаблицаПараметрыУчетаОС КАК ВременнаяТаблицаПараметрыУчетаОС
	 	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, Регистратор, , , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	 	|		ПО ВременнаяТаблицаПараметрыУчетаОС.ОсновноеСредство = ХозрасчетныйОстаткиИОбороты.Субконто1
	 	|			И ВременнаяТаблицаПараметрыУчетаОС.СчетНачисленияАмортизации = ХозрасчетныйОстаткиИОбороты.Счет
	 	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытияОС.СрезПоследних(&ДатаОкончания, Организация = &Организация) КАК СобытияОССрезПоследних
	 	|		ПО ВременнаяТаблицаПараметрыУчетаОС.ОсновноеСредство = СобытияОССрезПоследних.ОсновноеСредство
	 	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС.СрезПоследних(&ДатаОкончания, Организация = &Организация) КАК МестонахождениеОССрезПоследних
	 	|		ПО ВременнаяТаблицаПараметрыУчетаОС.ОсновноеСредство = МестонахождениеОССрезПоследних.ОсновноеСредство
	 	|ГДЕ
	 	|	ХозрасчетныйОстаткиИОбороты.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
	 	|;
	 	|
	 	|////////////////////////////////////////////////////////////////////////////////
	 	|ВЫБРАТЬ
	 	|	ВременнаяТаблицаСвод.Дата КАК Дата,
	 	|	ВременнаяТаблицаСвод.Документ КАК Документ,
	 	|	ВременнаяТаблицаСвод.Событие КАК Событие,
	 	|	ВременнаяТаблицаСвод.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	 	|	ВременнаяТаблицаСвод.НакопленныйИзнос КАК НакопленныйИзнос,
	 	|	ВременнаяТаблицаСвод.МОЛ КАК МОЛ,
	 	|	ВременнаяТаблицаСвод.Подразделение КАК Подразделение,
	 	|	ВременнаяТаблицаСвод.Счет КАК Счет,
	 	|	ВременнаяТаблицаСвод.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	 	|	ВременнаяТаблицаСвод.СрокСлужбы КАК СрокСлужбы,
	 	|	ВременнаяТаблицаСвод.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	 	|	ВременнаяТаблицаСвод.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
	 	|	ВременнаяТаблицаСвод.ИнвентарныйНомер КАК ИнвентарныйНомер
	 	|ИЗ
	 	|	ВременнаяТаблицаСвод КАК ВременнаяТаблицаСвод
	 	|ГДЕ
	 	|	ВЫБОР
	 	|			КОГДА &ВключатьЗМ
	 	|				ТОГДА ИСТИНА
	 	|			ИНАЧЕ НЕ ВременнаяТаблицаСвод.Документ ССЫЛКА Документ.ЗакрытиеМесяца
	 	|		КОНЕЦ
	 	|
	 	|УПОРЯДОЧИТЬ ПО
	 	|	Дата";		
	Запрос.УстановитьПараметр("ДатаОкончания", 		КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ДатаНачала", 		НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("ОсновноеСредство", 	ОсновноеСредство);
	Запрос.УстановитьПараметр("ВключатьЗМ",			ВключатьЗакрытиеМесяца);
	
	РасшифровкаПоСобытиямОС.Очистить();
	РасшифровкаПоСобытиямОС.Загрузить(Запрос.Выполнить().Выгрузить());	
	
КонецПроцедуры // ПолучитьТаблицуРасшифровкиПоСобытиямОСНаСервере()

// Процедура установки значений параметров динамических списков.
//
// Параметры:
//	ИзменилосьОС - Булево - проверка изменения значения реквизита "ОсновноеСредство".
//
&НаКлиенте
Процедура УстановитьПараметрыДинамическихСписков(ИзменилосьОС)
	
	Если ИзменилосьОС Тогда
		МестонахождениеОС.Параметры.УстановитьЗначениеПараметра("ОсновноеСредство", ОсновноеСредство);
		СобытияОС.Параметры.УстановитьЗначениеПараметра("ОсновноеСредство", 		ОсновноеСредство);
		СостояниеОС.Параметры.УстановитьЗначениеПараметра("ОсновноеСредство", 		ОсновноеСредство);
		ОС.Параметры.УстановитьЗначениеПараметра("ОсновноеСредство", 				ОсновноеСредство);
		АмортизацияПоОС.Параметры.УстановитьЗначениеПараметра("ОсновноеСредство", 	ОсновноеСредство);
		АмортизацияОС.Параметры.УстановитьЗначениеПараметра("ОсновноеСредство", 	ОсновноеСредство);
		ПараметрыУчетаОС.Параметры.УстановитьЗначениеПараметра("ОсновноеСредство", 	ОсновноеСредство);
		
	Иначе
		СписокОС.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", 			ДатаОкончания);
		СписокОС.Параметры.УстановитьЗначениеПараметра("Организация", 				Организация);
		
		СводПоСчетам.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", 		КонецДня(ДатаОкончания));
		СводПоСчетам.Параметры.УстановитьЗначениеПараметра("ДатаНачала", 			НачалоДня(ДатаНачала));
		СводПоСчетам.Параметры.УстановитьЗначениеПараметра("Организация", 			Организация);
		
		АмортизацияПоОС.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", 		КонецДня(ДатаОкончания));
		АмортизацияПоОС.Параметры.УстановитьЗначениеПараметра("ДатаНачала", 		НачалоДня(ДатаНачала));
		АмортизацияПоОС.Параметры.УстановитьЗначениеПараметра("Организация", 		Организация);
		
		АмортизацияОС.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", 		КонецДня(ДатаОкончания));
		АмортизацияОС.Параметры.УстановитьЗначениеПараметра("ДатаНачала", 			НачалоДня(ДатаНачала));
		АмортизацияОС.Параметры.УстановитьЗначениеПараметра("Организация", 			Организация);
	КонецЕсли;
КонецПроцедуры

//Процедура заполнения ТЧ "Расшифровка".
//
&НаСервере
Процедура ФормированиеНалогаНаИмущество()
	
	// Выборка из Сведений, что происходило с выбранным ОС
	Запрос = Новый Запрос;
	Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	Сведения.Регистратор КАК Регистратор,
		//|	Сведения.Регистратор.Дата КАК Дата,
		//|	Сведения.ЖилаяПлощадь КАК ЖилаяПлощадь,
		//|	Сведения.НежилаяПлощадь КАК НежилаяПлощадь,
		//|	ЕСТЬNULL(Сведения.РегиональныйКоэффициент.Коэффициент, 1) КАК К1,
		//|	ЕСТЬNULL(Сведения.ЗональныйКоэффициент.Коэффициент, 1) КАК К2,
		//|	ЕСТЬNULL(Сведения.ОтраслевойКоэффициент.Коэффициент, 1) КАК К3,
		//|	ОценочнаяСтоимость.Стоимость КАК Стоимость,
		//|	Ставки.Ставка КАК Ставка,
		//|	0 КАК ВидТранспорта,
		//|	0 КАК ОбъемДвигателя
		//|ИЗ
		//|	РегистрСведений.СведенияОбИмуществе КАК Сведения
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОценочнаяСтоимостьПоВидамМатериалов.СрезПоследних КАК ОценочнаяСтоимость
		//|		ПО Сведения.МатериалСтен = ОценочнаяСтоимость.МатериалСтен
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНалогаНаИмущество.СрезПоследних КАК Ставки
		//|		ПО Сведения.ГруппаИмущества = Ставки.ГруппаНалогаНаИмущество
		//|ГДЕ
		//|	Сведения.ОсновноеСредство = &ОсновноеСредство
		//|	И ГОД(&Дата) - ГОД(Сведения.ДатаВводаВЭксплуатацию) МЕЖДУ ОценочнаяСтоимость.ОтЛет И ВЫБОР
		//|			КОГДА ОценочнаяСтоимость.ДоЛет = 0
		//|				ТОГДА 1000
		//|			ИНАЧЕ ОценочнаяСтоимость.ДоЛет - 1
		//|		КОНЕЦ
		//|	И Сведения.Регистратор.Организация = &Организация
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	Сведения.Регистратор,
		//|	Сведения.Регистратор.Дата,
		//|	0,
		//|	0,
		//|	0,
		//|	0,
		//|	0,
		//|	0,
		//|	Ставки.Ставка,
		//|	Сведения.ВидТранспорта,
		//|	Сведения.ОбъемДвигателя
		//|ИЗ
		//|	РегистрСведений.СведенияОТранспорте КАК Сведения
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНалогаНаТранспорт.СрезПоследних КАК Ставки
		//|		ПО Сведения.ВидТранспорта = Ставки.ВидТранспорта
		//|ГДЕ
		//|	Сведения.ОсновноеСредство = &ОсновноеСредство
		//|	И ГОД(&Дата) - ГОД(Сведения.ДатаВводаВЭксплуатацию) МЕЖДУ Ставки.ОтЛет И ВЫБОР
		//|			КОГДА Ставки.ДоЛет = 0
		//|				ТОГДА 1000
		//|			ИНАЧЕ Ставки.ДоЛет - 1
		//|		КОНЕЦ
		//|	И Сведения.Регистратор.Организация = &Организация
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	Дата";
		"ВЫБРАТЬ
		|	СведенияОбИмуществеСрезПоследних.Регистратор КАК Регистратор,
		|	СведенияОбИмуществеСрезПоследних.Период КАК Дата,
		|	СведенияОбИмуществеСрезПоследних.ЖилаяПлощадь КАК ЖилаяПлощадь,
		|	СведенияОбИмуществеСрезПоследних.НежилаяПлощадь КАК НежилаяПлощадь,
		|	ЕСТЬNULL(СведенияОбИмуществеСрезПоследних.РегиональныйКоэффициент, 1) КАК К1,
		|	ЕСТЬNULL(СведенияОбИмуществеСрезПоследних.ЗональныйКоэффициент, 1) КАК К2,
		|	ЕСТЬNULL(СведенияОбИмуществеСрезПоследних.ОтраслевойКоэффициент, 1) КАК К3,
		|	ВидыМатериаловСтенНалогНаИмуществоШкалаОценкиСтоимости.Ставка КАК Стоимость,
		|	СтавкиНалогаНаИмуществоСрезПоследних.Ставка КАК Ставка,
		|	НЕОПРЕДЕЛЕНО КАК ВидТранспорта,
		|	НЕОПРЕДЕЛЕНО КАК ОбъемДвигателя
		|ИЗ
		|	РегистрСведений.СведенияОбИмуществе.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство) КАК СведенияОбИмуществеСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыМатериаловСтенНалогНаИмущество.ШкалаОценкиСтоимости КАК ВидыМатериаловСтенНалогНаИмуществоШкалаОценкиСтоимости
		|		ПО СведенияОбИмуществеСрезПоследних.МатериалСтен = ВидыМатериаловСтенНалогНаИмуществоШкалаОценкиСтоимости.Ссылка
		|			И (ГОД(&Период) - ГОД(СведенияОбИмуществеСрезПоследних.ДатаВводаВЭксплуатацию) >= ВидыМатериаловСтенНалогНаИмуществоШкалаОценкиСтоимости.НижняяГраница)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНалогаНаИмущество.СрезПоследних КАК СтавкиНалогаНаИмуществоСрезПоследних
		|		ПО СведенияОбИмуществеСрезПоследних.ГруппаИмущества = СтавкиНалогаНаИмуществоСрезПоследних.ГруппаНалогаНаИмущество
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОТранспортеСрезПоследних.Регистратор,
		|	СведенияОТранспортеСрезПоследних.Период,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	ВидыТранспортаНалогНаИмуществоШкалаОценкиСтоимости.Ставка,
		|	СведенияОТранспортеСрезПоследних.ВидТранспорта,
		|	СведенияОТранспортеСрезПоследних.ОбъемДвигателя
		|ИЗ
		|	РегистрСведений.СведенияОТранспорте.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство) КАК СведенияОТранспортеСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыТранспортаНалогНаИмущество.ШкалаОценкиСтоимости КАК ВидыТранспортаНалогНаИмуществоШкалаОценкиСтоимости
		|		ПО СведенияОТранспортеСрезПоследних.ВидТранспорта = ВидыТранспортаНалогНаИмуществоШкалаОценкиСтоимости.Ссылка
		|			И (ГОД(&Период) - ГОД(СведенияОТранспортеСрезПоследних.ДатаВводаВЭксплуатацию) >= ВидыТранспортаНалогНаИмуществоШкалаОценкиСтоимости.НижняяГраница)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	Запрос.УстановитьПараметр("ОсновноеСредство", 	ОсновноеСредство);
	Запрос.УстановитьПараметр("Период", 			ДатаОкончания);
	Запрос.УстановитьПараметр("Организация", 		Организация);
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	// Запрос на списание выбранного ОС
	ЗапросСписание = Новый Запрос;
	ЗапросСписание.Текст = 
		"ВЫБРАТЬ
		|	СобытияОС.Период КАК Дата,
		|	СобытияОС.Регистратор
		|ИЗ
		|	РегистрСведений.СобытияОС КАК СобытияОС
		|ГДЕ
		|	СобытияОС.ОсновноеСредство = &ОсновноеСредство
		|	И СобытияОС.Событие = &Событие
		|	И СобытияОС.Организация = &Организация";  	
	ЗапросСписание.УстановитьПараметр("ОсновноеСредство", 	ОсновноеСредство);
	ЗапросСписание.УстановитьПараметр("Событие", 			Перечисления.ВидыСобытийОС.Списание);
	ЗапросСписание.УстановитьПараметр("Организация", 		Организация);
	ТЗСписание = ЗапросСписание.Выполнить().Выгрузить();
	
	Объект.Расшифровка.Очистить();
	
	Если ТЗ.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	// если ОС списано в прошлом году, информация не выводится
	Если ТЗСписание.Количество() <> 0 И Год(ТЗСписание[ТЗСписание.Количество()-1].Дата) < Год(ДатаОкончания) Тогда
		Возврат;
	КонецЕсли;
	
	//расчет количества месяцев, в течение которых использовалось ОС
	КолМесяцев = Новый Массив;
	Сч = 0;
	
	Если ТЗСписание.Количество() > 0 И Год(ТЗСписание[ТЗСписание.Количество()-1].Дата) = Год(ДатаОкончания) Тогда
		МесяцСписания = Месяц(ТЗСписание[ТЗСписание.Количество()-1].Дата);
	Иначе
		МесяцСписания = 12;
	КонецЕсли;
	
	Для Каждого СТЗ Из ТЗ Цикл
		КолМесяцев.Добавить(МесяцСписания);
		Если Год(ДатаОкончания) = Год(СТЗ.Дата) Тогда 
			КолМесяцев[Сч] = КолМесяцев[Сч] - Месяц(СТЗ.Дата) + 1;
		КонецЕсли;
		Сч = Сч+1;
	КонецЦикла;
	
	Если ТЗ.Количество() > 1 Тогда
		Для Сч = 0 По ТЗ.Количество()-1 Цикл
			Для СчВ = Сч+1 По ТЗ.Количество()-1 Цикл
				Если ТЗ[Сч].Дата < ТЗ[СчВ].Дата И ТЗ[СчВ].Дата <> ТЗ[СчВ-1].Дата Тогда
					КолМесяцев[Сч] = КолМесяцев[Сч] - КолМесяцев[СчВ];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// расчет суммы налога. Т.к. в РБ записывается сумма окончательная, то для каждого ОС приходится рассчитывать
	СуммаНалога = Новый Массив;
	Сч = 0;
	Для Каждого СТЗ Из ТЗ Цикл
		Если ОсновноеСредство.ГруппаИмущества = Справочники.ГруппыИмущества.ГИ4 Тогда
			СуммаНалога.Добавить(СТЗ.ОбъемДвигателя);
		Иначе
			СуммаНалога.Добавить(СТЗ.К1*СТЗ.К2*СТЗ.К3*СТЗ.Стоимость*(СТЗ.ЖилаяПлощадь+0.3*СТЗ.НежилаяПлощадь)/100);
		КонецЕсли;
		СуммаНалога[Сч] = СуммаНалога[Сч]*СТЗ.Ставка/12*КолМесяцев[Сч];
		Сч = Сч + 1;
	КонецЦикла;
	
	// вывод строк в табличную часть
	Сч = 0;
	Для Каждого СТЗ Из ТЗ Цикл
		Если КолМесяцев[Сч] > 0 Тогда
			НоваяСтрока = Объект.Расшифровка.Добавить();
			НоваяСтрока.Дата 		= СТЗ.Дата;
			НоваяСтрока.Документ 	= СТЗ.Регистратор;
			НоваяСтрока.КолМесяцев	= КолМесяцев[Сч];
			НоваяСтрока.Сумма 		= СуммаНалога[Сч];
		КонецЕсли;
		Сч = Сч + 1;
	КонецЦикла;
КонецПроцедуры

// Процедура установки отборов динамического списка "СписокОС"
//
&НаКлиенте
Процедура УстановитьОтборСпискаОС()

	СписокОС.Отбор.Элементы.Очистить();
	
	Если ЗначениеЗаполнено(ОтборГруппаНУ) Тогда
		ЭлементОтбора = СписокОС.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ГруппаНУ");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборГруппаНУ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСчетУчета) Тогда
		ЭлементОтбора = СписокОС.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетУчета");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборСчетУчета;
	КонецЕсли;

	Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
		ЭлементОтбора = СписокОС.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборПодразделение;
	КонецЕсли;

	Если ЗначениеЗаполнено(ОтборМОЛ) Тогда
		ЭлементОтбора = СписокОС.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МОЛ");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборМОЛ;
	КонецЕсли;

	Если ЗначениеЗаполнено(ОтборСостояние) Тогда
		ЭлементОтбора = СписокОС.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОтборСостояние;
	КонецЕсли;	
КонецПроцедуры

//Процедура заполнения таблицы значений "Замечания".
//
&НаСервере
Процедура ЗаполнитьЗамечанияНаСервере()

	Схема = Элементы.СписокОС.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.СписокОС.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаСписка = ПроцессорВывода.Вывести(ПроцессорКомпоновки);	

	Замечания.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаСписка Цикл		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ГруппаНУ) Тогда
			СтрокаТаблицыЗамечания = Замечания.Добавить();
			СтрокаТаблицыЗамечания.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
			СтрокаТаблицыЗамечания.Замечание = НСтр("ru = 'Не указана группа НУ'")
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Подразделение) Тогда
			СтрокаТаблицыЗамечания = Замечания.Добавить();
			СтрокаТаблицыЗамечания.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
			СтрокаТаблицыЗамечания.Замечание = НСтр("ru = 'Не указано подразделение организации'")
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

// Функция получения ссылок документов.
//
// Параметры:
//	Ссылка - ДокументСсылка - ссылка на выбранный документ.
//
// Возвращаемое значение:
//	Имя - Строка - название документа.
//
&НаСервере
Функция ПолучитьНазваниеДокумента(Ссылка)
	
	Возврат Ссылка.Метаданные().Имя

КонецФункции

#КонецОбласти

#Область ФоновоеЗаданиеПерепровестиДокументы

// Функция получения ссылок документов.
//
// Возвращаемое значение:
//	МассивСсылок - Массив - Массив ссылок документов.
//
&НаСервере
Функция ПолучитьМассивСсылокДляПерепроведения()

	РасшифровкаПоСобытиямОС.Сортировать("Дата Возр");
	МассивСсылок = Новый Массив;
	Для каждого СтрокаТаблицы Из РасшифровкаПоСобытиямОС Цикл
		МассивСсылок.Добавить(СтрокаТаблицы.Документ);
	КонецЦикла;

	Возврат МассивСсылок;	

КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЭтаФорма.СостояниеПрогресса = 100;
			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			ДанныеПрогресса = ПолучитьИзВременногоХранилища(АдресХранилищаПрогресса);
			ЭтаФорма.СостояниеПрогресса = ДанныеПрогресса;
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;	
КонецПроцедуры

// Функция перепроведения документов.
//
// Параметры:
//	ПараметрыКоманды - Структура - параметры.
//
// Возвращаемое значение:
//	РезультатВыполнения - Структура - результат выполнения перепроведения.
//
&НаСервере
Функция ПерепровестиДокументыНаСервере(ПараметрыКоманды)
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	АдресРасшифровки = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресХранилищаПрогресса = ПоместитьВоВременноеХранилище(, УникальныйИдентификатор);
	ПараметрыКоманды.Вставить("АдресРасшифровки", АдресРасшифровки);
	ПараметрыКоманды.Вставить("АдресХранилищаПрогресса", АдресХранилищаПрогресса);
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.МониторОС.ПерепровестиДокументы",
		ПараметрыКоманды,
		СтрШаблон(НСтр("ru = 'Перепроведение документов: %1'"), ЭтаФорма.Заголовок));
	
	АдресХранилища       = РезультатВыполнения.АдресХранилища;
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
КонецФункции

// Процедура вывода информации о перепроведении в табличный документ.
//
&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат         = РезультатВыполнения.Результат;
	
	ИдентификаторЗадания = Неопределено;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
КонецФункции

#КонецОбласти
