
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ВыгружаемыеДанные") Тогда
		ВыгружаемыеДанные = Параметры.ВыгружаемыеДанные;	
	КонецЕсли;	
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДеревоЗначенийВключитьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЗначений.ТекущиеДанные;
	
	// Поле "Включить" имеет три значения 0(выключен), 1(Включен) и 2(когда в группе часть подчиненных элементов включена).
	// Пользователь может только включить или выключить, т.е. пользуется только значениями 0 и 1.
	// Поэтому когда после значения 1 ставится значение 2, автоматические идет замена на значение 0.
	Если ТекущиеДанные.Включить = 2 Тогда
		ТекущиеДанные.Включить = 0;
	КонецЕсли;
	
	УстановитьПометкиПодчиненных(ТекущиеДанные.Код);
	УстановитьПометкиРодителей(ТекущиеДанные.Код);
	
	Коллекция = Объект.ДеревоЗначений.ПолучитьЭлементы();
	РазвернутьСернутьВетки(Коллекция);	
КонецПроцедуры

&НаКлиенте
Процедура ИмяКаталогаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Укажите каталог выгрузки'");
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ОбработатьНачалоВыбораФайлаВыгрузка", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДереваЗначений

&НаКлиенте
Процедура ДеревоЗначенийПередРазворачиванием(Элемент, Строка, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоЗначений.ДанныеСтроки(Строка);
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ВеткаРазвернута = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийПередСворачиванием(Элемент, Строка, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоЗначений.ДанныеСтроки(Строка);
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ВеткаРазвернута = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КнопкаНазадНажатие(Команда)
	ОтработатьНажатиеКнопкиНазадИлиДалее("Назад");
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДалееНажатие(Команда)
	ОтработатьНажатиеКнопкиНазадИлиДалее("Далее");
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСнятьФлажки(Команда)
	
	СнятьУстановитьВсеФлажки(0);
	Коллекция = Объект.ДеревоЗначений.ПолучитьЭлементы();
	РазвернутьСернутьВетки(Коллекция);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаУстановитьФлажки(Команда)
	
	СнятьУстановитьВсеФлажки(1);
	Коллекция = Объект.ДеревоЗначений.ПолучитьЭлементы();
	РазвернутьСернутьВетки(Коллекция);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьПометкиПодчиненных(Код)
    
	ДеревоЗначений = ДанныеФормыВЗначение(Объект.ДеревоЗначений, Тип("ДеревоЗначений"));
	
	ПараметрыОтбора = Новый Структура("Код", Код);
	РедактируемыеСтроки = ДеревоЗначений.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
	
	Для Каждого РедактируемаяСтрока ИЗ РедактируемыеСтроки Цикл
		Если РедактируемаяСтрока <> Неопределено Тогда
			ОбработатьЗначенияСтрокДерева(РедактируемаяСтрока, ДеревоЗначений, РедактируемаяСтрока.Включить);
		КонецЕсли;		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ДеревоЗначений, Объект.ДеревоЗначений);

КонецПроцедуры

&НаСервере
Процедура УстановитьПометкиРодителей(Код)
	
	ДеревоЗначений = ДанныеФормыВЗначение(Объект.ДеревоЗначений, Тип("ДеревоЗначений"));
	
	ПараметрыОтбора = Новый Структура("Код", Код);
	РедактируемыеСтроки = ДеревоЗначений.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
	
	Для Каждого РедактируемаяСтрока ИЗ РедактируемыеСтроки Цикл
		Если РедактируемаяСтрока <> Неопределено Тогда
			Если РедактируемаяСтрока.Родитель <> Неопределено Тогда
				УстановитьЗначениеСтрокиРодителя(РедактируемаяСтрока.Родитель, ДеревоЗначений);
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;

	ЗначениеВДанныеФормы(ДеревоЗначений, Объект.ДеревоЗначений);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗначениеСтрокиРодителя(ВеткаРодителя, ДеревоЗначений)
	
	Если ВеткаРодителя.Родитель <> Неопределено Тогда
		УстановитьЗначениеСтрокиРодителя(ВеткаРодителя.Родитель, ДеревоЗначений);
	КонецЕсли;

	НайденыВключенные	= Ложь;
	НайденыВыключенные	= Ложь;

	Для Каждого СтрокаДерева ИЗ ВеткаРодителя.Строки Цикл		
		
		Если СтрокаДерева.Включить = 0 Тогда
			НайденыВыключенные	= Истина;
		ИначеЕсли СтрокаДерева.Включить = 1 Тогда
			НайденыВключенные	= Истина;
		ИначеЕсли СтрокаДерева.Включить = 2 Тогда
			НайденыВыключенные	= Истина;
			НайденыВключенные	= Истина;
		КонецЕсли; 
		
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденыВключенные И НайденыВыключенные Тогда
		Включить = 2;
	ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
		Включить = 1;
	ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
		Включить = 0;
	ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
		Включить = 2;
	КонецЕсли;
	
	ВеткаРодителя.Включить = Включить;
	
КонецПроцедуры

// Процедура читает строки дерева значений и делает с данными строк необходимые действия.
//
// Параметры:
//	СтрокаДереваГруппа - СтрокаДереваЗначений - строка дерева значений.
//	ДеревоЗначений - ДеревоЗначений - дерево значений.
//	Включить - Число - число 0(выключено), 1(включено) или 2(используется в головных строках в случаях, 
//						когда часть подчиненных строк включена) для указания в подчиненных(головных) строках.
//	ЗаполнитьСписки - Булево - признак необходимости заполнить списки значений для последующей выгрузки данных в Excel файл.
//		
&НаСервере
Процедура ОбработатьЗначенияСтрокДерева(СтрокаДереваГруппа, ДеревоЗначений, Включить = Неопределено, ЗаполнитьСписки = Ложь) Экспорт
	
	// Если в строке СтрокаДереваГруппа содержится элемент, то его необходимо поместить в таблицу для выгрузки в Excel,
	// а затем обходить по циклу подчиненные строки.
	Если ЗаполнитьСписки И НЕ СтрокаДереваГруппа.ЭтоГруппа Тогда		
		ЗаполнитьСтрокуСписка(СтрокаДереваГруппа);
	КонецЕсли;	
	
	// Обход подчиненных строк
	Для Каждого СтрокаДерева ИЗ СтрокаДереваГруппа.Строки Цикл
		Код = СтрокаДерева.Код;	
		Если ЗначениеЗаполнено(Код) Тогда
			ПараметрыОтбора = Новый Структура("Код", Код);
			РедактируемыеСтроки = ДеревоЗначений.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
			Для Каждого РедактируемаяСтрока ИЗ РедактируемыеСтроки Цикл
				Если РедактируемаяСтрока <> Неопределено Тогда
					РедактируемаяСтрока.Включить = ?(Включить = Неопределено, СтрокаДерева.Включить, Включить);
					
					Если ЗаполнитьСписки И НЕ РедактируемаяСтрока.ЭтоГруппа Тогда
						ЗаполнитьСтрокуСписка(РедактируемаяСтрока);	
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
		Если СтрокаДерева.Строки.Количество() <> 0 Тогда
			ОбработатьЗначенияСтрокДерева(СтрокаДерева, ДеревоЗначений, Включить, ЗаполнитьСписки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуСписка(СтрокаДерева)

	// Контрагенты
	Если ВыгружаемыеДанные = 1 И СтрокаДерева.Включить = 1 Тогда
		СтрокаСписка = ВыбранныеКонтрагенты.Добавить();
		СтрокаСписка.Значение = СтрокаДерева.Ссылка;								
	
	// Номенклатура														
	ИначеЕсли ВыгружаемыеДанные = 2 И СтрокаДерева.Включить = 1 Тогда		
		Если СтрокаДерева.Услуга Тогда
			СтрокаСписка = ВыбранныеУслуги.Добавить();
			СтрокаСписка.Значение = СтрокаДерева.Ссылка;	
		Иначе
			СтрокаСписка = ВыбраннаяНоменклатура.Добавить();
			СтрокаСписка.Значение = СтрокаДерева.Ссылка;
		КонецЕсли;
		
	// Банковские счета														
	ИначеЕсли ВыгружаемыеДанные = 3 И СтрокаДерева.Включить = 1 Тогда
		СтрокаСписка = ВыбранныеБанковскиеСчета.Добавить();
		СтрокаСписка.Значение = СтрокаДерева.Ссылка;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСернутьВетки(Коллекция, УстановитьПоУмолчанию = Ложь)
	
	Если НЕ УстановитьПоУмолчанию Тогда
		Для Каждого Строка ИЗ Коллекция Цикл
			Если Строка.ВеткаРазвернута Тогда
				Элементы.ДеревоЗначений.Развернуть(Строка.ПолучитьИдентификатор());
				ПодКоллекция = Строка.ПолучитьЭлементы();
				РазвернутьСернутьВетки(ПодКоллекция);		
			КонецЕсли;		
		КонецЦикла;
	Иначе
		Для Каждого Строка ИЗ Коллекция Цикл
			Строка.ВеткаРазвернута = Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработатьНажатиеКнопкиНазадИлиДалее(ИмяКоманды)

	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	Страницы = Элементы.Страницы.ПодчиненныеЭлементы;
	
	Если ИмяКоманды = "Далее" Тогда	
		
		Если ТекущаяСтраница = Страницы.СтраницаВыборТипа Тогда
			
			Отказ = Ложь;
			
			Если НЕ ЗначениеЗаполнено(ВыгружаемыеДанные) Тогда
				ТекстСообщения = НСтр("ru = 'Не выбраны ""Выгружаемые данные"".'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ВыгружаемыеДанные",,Отказ);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ИмяКаталога) Тогда
				ТекстСообщения = НСтр("ru = 'Не выбраны каталог для выгрузки файла.'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ИмяКаталога",,Отказ);
			КонецЕсли;
				
			Если Не Отказ Тогда	
				Элементы.Страницы.ТекущаяСтраница = Страницы.СтраницаВыгрузкаExcel;
				ЗаполнитьДеревоЗначений();
			КонецЕсли;
			
		Иначе
			ЗаполнитьТаблицыДанныхВыгрузки();		
	
			Если ВыбранныеКонтрагенты.Количество() > 0 Тогда
				СформироватьФайлExcel("Контрагенты");	
			КонецЕсли;
			
			Если ВыбраннаяНоменклатура.Количество() > 0 Тогда
				СформироватьФайлExcel("Номенклатура");	
			КонецЕсли;
			
			Если ВыбранныеУслуги.Количество() > 0 Тогда
				СформироватьФайлExcel("Услуги");	
			КонецЕсли;
			
			Если ВыбранныеБанковскиеСчета.Количество() > 0 Тогда
				СформироватьФайлExcel("БанковскиеСчета");	
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если ТекущаяСтраница = Страницы.СтраницаВыгрузкаExcel Тогда
			Элементы.Страницы.ТекущаяСтраница = Страницы.СтраницаВыборТипа;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()

	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	Страницы = Элементы.Страницы.ПодчиненныеЭлементы;
	
	Элементы.КнопкаНазад.Доступность = ТекущаяСтраница = Страницы.СтраницаВыгрузкаExcel;
	
	Если ТекущаяСтраница = Страницы.СтраницаВыгрузкаExcel Тогда
		Элементы.КнопкаДалее.Заголовок = НСтр("ru = 'Выгрузить'");
	Иначе
		Элементы.КнопкаДалее.Заголовок = НСтр("ru = 'Далее'");
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЗначений()

	Если ВыгружаемыеДанные = 1 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Контрагенты.Ссылка КАК Ссылка,
			|	Контрагенты.Код КАК Код,
			|	Контрагенты.ЭтоГруппа КАК ЭтоГруппа,
			|	1 КАК Включить
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка ИЕРАРХИЯ";
		
	ИначеЕсли ВыгружаемыеДанные = 2 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Ссылка,
			|	Номенклатура.Код КАК Код,
			|	Номенклатура.Услуга КАК Услуга,
			|	Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
			|	1 КАК Включить
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка ИЕРАРХИЯ";
		
	ИначеЕсли ВыгружаемыеДанные = 3 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	БанковскиеСчета.Ссылка КАК Ссылка,
			|	ЛОЖЬ КАК ЭтоГруппа,
			|	1 КАК Включить
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета";
	КонецЕсли;
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗначениеВДанныеФормы(Дерево, Объект.ДеревоЗначений);	
КонецПроцедуры

&НаСервере
Процедура СнятьУстановитьВсеФлажки(Включить)
    
	ДеревоЗначений = ДанныеФормыВЗначение(Объект.ДеревоЗначений, Тип("ДеревоЗначений"));
	
	Для Каждого РедактируемаяСтрока ИЗ ДеревоЗначений.Строки Цикл
		РедактируемаяСтрока.Включить = Включить;
		ОбработатьЗначенияСтрокДерева(РедактируемаяСтрока, ДеревоЗначений, Включить);		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ДеревоЗначений, Объект.ДеревоЗначений);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыДанныхВыгрузки()
	
	ВыбранныеБанковскиеСчета.Очистить();
	ВыбранныеКонтрагенты.Очистить();
	ВыбраннаяНоменклатура.Очистить();
	ВыбранныеУслуги.Очистить();
	
	ДеревоЗначений = ДанныеФормыВЗначение(Объект.ДеревоЗначений, Тип("ДеревоЗначений"));
	
	Для Каждого РедактируемаяСтрока ИЗ ДеревоЗначений.Строки Цикл
		ОбработатьЗначенияСтрокДерева(РедактируемаяСтрока, ДеревоЗначений,, Истина);		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ДеревоЗначений, Объект.ДеревоЗначений);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьФайлExcel(ТипВыгрузки)

	#Если МобильныйКлиент Тогда
		Возврат;
	#КонецЕсли
	
	ЕстьОшибки = Ложь;
	
	ТабличныйДокумент = ПолучитьТабличныйДокумент(ТипВыгрузки, ЕстьОшибки);
	
	Если ЕстьОшибки Тогда
		ТекстОповещения = НСтр("ru = 'Формирование файла отменено.'");
		ПоказатьОповещениеПользователя(ТекстОповещения,,,БиблиотекаКартинок.Информация32); 
		Возврат;
	КонецЕсли;	
		
	ИмяКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталога);
	
	// Открытие приложения Excel
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.AutomationSecurity = 3; // msoAutomationSecurityForceDisable = 3 отключение исполнение макросов.
		ИнформацияОбОшибке = Неопределено;
	Исключение
		ВызватьИсключение НСтр("ru = 'Не удалось подключить COM-объект Excel.
			|Вероятные причины:
			| - На сервере не установлен Microsoft Office;
			| - У пользователя недостаточно прав на создание COM-объектов;
			| - Включен контроль учетных записей Windows;
			| - Операционная система не из семейства Windows.
			|
			|Техническая информация:
			|'") + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Excel.Visible = 0;
	Excel.DisplayAlerts = 0;
	Excel.DefaultSaveFormat = 51;
	
	Расширение = "xlsx";
	ТипФайла = ТипФайлаТабличногоДокумента.XLSX;
	
	// Проверка версии
	ВерсияExcel = Лев(Excel.Version, Найти(Excel.Version,".") -1);
	Если ВерсияExcel < "16" Тогда
		ТекстСообщения = НСтр("ru = 'Используется устаревшая версия Excel. Необходимо установить варсию Excel не меньше, чем 16. Формирование файла отменено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);	
		Возврат;
	КонецЕсли;

	// Сохранение во временных файлах
	#Если ВебКлиент Тогда
		Если ТипВыгрузки = "Номенклатура" Тогда
			ИмяТемпФайла = ИмяКаталога + "Выгрузка номенклатуры." + Расширение;
			
		ИначеЕсли ТипВыгрузки = "Контрагенты" Тогда
			ИмяТемпФайла = ИмяКаталога + "Выгрузка контрагентов." + Расширение;
			
		ИначеЕсли ТипВыгрузки = "Услуги" Тогда
			ИмяТемпФайла = ИмяКаталога + "Выгрузка услуг." + Расширение;
			
		ИначеЕсли ТипВыгрузки = "БанковскиеСчета" Тогда
			ИмяТемпФайла = ИмяКаталога + "Выгрузка банковских счетов." + Расширение;
		КонецЕсли;	
	#Иначе
		ИмяТемпФайла = ПолучитьИмяВременногоФайла("." + Расширение);
	#КонецЕсли
	
	ТабличныйДокумент.Записать(ИмяТемпФайла, ТипФайла);
	
	// Добавление общей книги
	ОбщаяКнигаExcel = Excel.Application.Workbooks.Add();
	ОбщаяКнигаExcel.Activate();

	// Открытие временной книги
	ВременнаяКнигаExcel = Excel.WorkBooks.Open(ИмяТемпФайла);
	// Чтение первого листа
	ЛистСДанными = ВременнаяКнигаExcel.Sheets(1);
	ЛистСДанными.Select();
	// Копирование в общую книгу
	ЛистСДанными.Copy(ОбщаяКнигаExcel.Sheets(1));
	
	// Закрытие временной книги
	ВременнаяКнигаExcel.Close(0);
	ВременнаяКнигаExcel = Неопределено;
	ЛистСДанными = Неопределено;
	
	// Имя файла
	Если ТипВыгрузки = "Номенклатура" Тогда
		ПолноеИмяФайла = ИмяКаталога + "Выгрузка номенклатуры." + Расширение;
	ИначеЕсли ТипВыгрузки = "Контрагенты" Тогда
		ПолноеИмяФайла = ИмяКаталога + "Выгрузка контрагентов." + Расширение;
	ИначеЕсли ТипВыгрузки = "Услуги" Тогда
		ПолноеИмяФайла = ИмяКаталога + "Выгрузка услуг." + Расширение;
	ИначеЕсли ТипВыгрузки = "БанковскиеСчета" Тогда
		ПолноеИмяФайла = ИмяКаталога + "Выгрузка банковских счетов." + Расширение;
	КонецЕсли;	
	
	// Сохранение общей книги
	ОбщаяКнигаExcel.SaveCopyAs(ПолноеИмяФайла);
	ОбщаяКнигаExcel.Close();
	ОбщаяКнигаExcel = Неопределено;
		
	// Закрытие приложения
	Excel.Quit();	
	Excel = Неопределено;
	
	ТекстОповещения = НСтр("ru = 'Файл успешно сформирован'");
	ТекстПояснения = ПолноеИмяФайла;
	ПоказатьОповещениеПользователя(
		ТекстОповещения, 
		Новый ОписаниеОповещения("ОткрытьПроводник", ЭтотОбъект, Новый Структура("ПолноеИмяФайла", ПолноеИмяФайла)), 
		ТекстПояснения, 
		БиблиотекаКартинок.Информация32);
	
	// Удаление временных файлов
	УдалитьФайлы(ИмяТемпФайла);	
КонецПроцедуры

&НаСервере
Функция ПолучитьТабличныйДокумент(ТипВыгрузки, ЕстьОшибки)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Обработка = РеквизитФормыВЗначение("Объект");
	
	Макет = Обработка.ПолучитьМакет("ПФ_MXL_ДанныеСправочников");
	
	Если ТипВыгрузки = "Номенклатура" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаНоменклатура");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаНоменклатура");
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Ссылка,
			|	Номенклатура.Наименование КАК Наименование,
			|	Номенклатура.Ссылка.ЕдиницаИзмерения КАК ЕдИзм,
			|	Номенклатура.КодТНВЭД.Представление КАК ТНВЭД
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка В(&МассивСсылок)";
		Запрос.УстановитьПараметр("МассивСсылок", ВыбраннаяНоменклатура);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Отказ = Ложь;

		Пока Выборка.Следующий() Цикл			
			Если НЕ ЗначениеЗаполнено(Выборка.ТНВЭД) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнен ТН ВЭД в номенклатуре ""%1"".'"), Выборка.Наименование);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,,,Отказ);	
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Выборка.ЕдИзм) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена единица измерения в номенклатуре ""%1"".'"), Выборка.Наименование);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,,,Отказ);	
			КонецЕсли;
			
			Если Отказ Тогда
				ЕстьОшибки = Истина;
				Продолжить;					
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
	ИначеЕсли ТипВыгрузки = "Услуги" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаУслуги");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаУслуги");
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Ссылка,
			|	Номенклатура.Наименование КАК Наименование,
			|	Номенклатура.КодГКЭД.Представление КАК ГКЭД
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка В(&МассивСсылок)";
		Запрос.УстановитьПараметр("МассивСсылок", ВыбранныеУслуги);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Отказ = Ложь;

		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.ГКЭД) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнен ГКЭД в услуге ""%1"".'"), Выборка.Наименование);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,,, Отказ);
			КонецЕсли;	
			
			Если Отказ Тогда
				ЕстьОшибки = Истина;
				Продолжить;					
			КонецЕсли;

			ОбластьМакета.Параметры.Заполнить(Выборка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;	
		
	ИначеЕсли ТипВыгрузки = "Контрагенты" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаКонтрагент");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаКонтрагент");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ	
			|	Контрагенты.Ссылка КАК Ссылка,
			|	Контрагенты.НаименованиеПолное КАК Наименование,
			|	Контрагенты.ИНН КАК ИНН,
			|	ВЫБОР
			|		КОГДА Контрагенты.ПризнакСтраны = ЗНАЧЕНИЕ(Перечисление.ПризнакиСтраны.КР)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК КонтрагентНерезидент,
			|	ВЫБОР
			|		КОГДА Контрагенты.ГоловнойКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ЕстьГоловнойКонтрагент,
			|	Контрагенты.ГоловнойКонтрагент.ИНН КАК ИННГоловногоКонтрагента
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Ссылка В (&МассивСсылок)";
		Запрос.УстановитьПараметр("МассивСсылок", ВыбранныеКонтрагенты);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Отказ = Ложь;

		Пока Выборка.Следующий() Цикл			
			Если Выборка.КонтрагентНерезидент Тогда
				Если НЕ ЗначениеЗаполнено(Выборка.ИНН) Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнен ИНН у контрагента ""%1"".'"), Выборка.Наименование);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,,, Отказ);	
				КонецЕсли;
				
				Адрес = БухгалтерскийУчетСервер.ПолучитьСведенияОКонтрагенте(Выборка.Ссылка).АдрЮР;
				
				Если НЕ ЗначениеЗаполнено(Адрес) Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнен юридический адрес у контрагента ""%1"".'"), Выборка.Наименование);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,,, Отказ);	
				КонецЕсли;
				
				Если Отказ Тогда
					ЕстьОшибки = Истина;
					Продолжить;					
				КонецЕсли;	
				
				ОбластьМакета.Параметры.Заполнить(Выборка);
				ОбластьМакета.Параметры.Адрес = Адрес;
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			Иначе
				Если Выборка.ЕстьГоловнойКонтрагент Тогда
					Если НЕ ЗначениеЗаполнено(Выборка.ИНН) Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнен ИНН у контрагента ""%1"".'"), Выборка.Наименование);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,,, Отказ);	
					КонецЕсли;	
					
					Если НЕ ЗначениеЗаполнено(Выборка.ИННГоловногоКонтрагента) Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнен ИНН головного контрагента у контрагента ""%1"".'"), Выборка.Наименование);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,,, Отказ);	
					КонецЕсли;
					
					Адрес = БухгалтерскийУчетСервер.ПолучитьСведенияОКонтрагенте(Выборка.Ссылка).АдрЮР;
				
					Если НЕ ЗначениеЗаполнено(Адрес) Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнен юридический адрес у контрагента ""%1"".'"), Выборка.Наименование);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,,, Отказ);	
					КонецЕсли;
					
					Если Отказ Тогда
						ЕстьОшибки = Истина;
						Продолжить;					
					КонецЕсли;	
					
					ОбластьМакета.Параметры.ИНН = Выборка.ИННГоловногоКонтрагента;
					ОбластьМакета.Параметры.ИННПодразделения = Выборка.ИНН;
					ОбластьМакета.Параметры.НаименованиеПодразделения = Выборка.Наименование;
					ОбластьМакета.Параметры.Адрес = Адрес;
					ТабличныйДокумент.Вывести(ОбластьМакета);
					
				Иначе	
					Если НЕ ЗначениеЗаполнено(Выборка.ИНН) Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнен ИНН у контрагента ""%1"".'"), Выборка.Наименование);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,,, Отказ);	
					КонецЕсли;	
					
					Адрес = БухгалтерскийУчетСервер.ПолучитьСведенияОКонтрагенте(Выборка.Ссылка).АдрЮР;
				
					Если НЕ ЗначениеЗаполнено(Адрес) Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнен юридический адрес у контрагента ""%1"".'"), Выборка.Наименование);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,,, Отказ);	
					КонецЕсли;
					
					Если Отказ Тогда
						ЕстьОшибки = Истина;
						Продолжить;					
					КонецЕсли;	
					
					ОбластьМакета.Параметры.ИНН = Выборка.ИНН;
					ОбластьМакета.Параметры.ИННПодразделения = Выборка.ИНН;
					ОбластьМакета.Параметры.НаименованиеПодразделения = Выборка.Наименование;
					ОбластьМакета.Параметры.Адрес = Адрес;
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
	ИначеЕсли ТипВыгрузки = "БанковскиеСчета" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаБанковскийСчет");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаБанковскийСчет");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Контрагенты.Ссылка КАК Контрагент,
			|	Контрагенты.НаименованиеПолное КАК Наименование,
			|	Контрагенты.ИНН КАК ИНН
			|ПОМЕСТИТЬ ВременнаяТаблицаКонтрагенты
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Контрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВременнаяТаблицаКонтрагенты.Контрагент КАК Контрагент,
			|	ВременнаяТаблицаКонтрагенты.ИНН КАК ИНН,
			|	ВременнаяТаблицаКонтрагенты.Наименование КАК НаименованиеВладельца,
			|	БанковскиеСчета.НомерСчета КАК НомерСчета,
			|	БанковскиеСчета.Наименование КАК Наименование,
			|	БанковскиеСчета.Банк.Код КАК БИКБанка,
			|	БанковскиеСчета.ВалютаДенежныхСредств.Код КАК КодВалюты
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаКонтрагенты КАК ВременнаяТаблицаКонтрагенты
			|		ПО БанковскиеСчета.Владелец = ВременнаяТаблицаКонтрагенты.Контрагент";
		Запрос.УстановитьПараметр("МассивСсылок", ВыбранныеКонтрагенты);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Отказ = Ложь;
		
		Пока Выборка.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(Выборка.ИНН) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'У владельца(контрагента) ""%1"" банковского счета ""%2"" не заполнен ИНН.'"), 
													Выборка.НаименованиеВладельца, Выборка.Наименование);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Контрагент,,, Отказ);
			КонецЕсли;
			
			Если Отказ Тогда
				ЕстьОшибки = Истина;
				Продолжить;					
			КонецЕсли;	
			
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;	
	КонецЕсли;	

	Возврат ТабличныйДокумент;
КонецФункции

&НаКлиенте
Процедура ОбработатьНачалоВыбораФайлаВыгрузка(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ИмяКаталога = ДиалогВыбораФайла.Каталог;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПроводник(ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ПолноеИмяФайла) Тогда 
		ФайловаяСистемаКлиент.ОткрытьПроводник(ДополнительныеПараметры.ПолноеИмяФайла);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти
