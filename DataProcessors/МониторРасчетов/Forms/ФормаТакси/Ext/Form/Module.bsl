
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Организация = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
	
	Если Параметры.Свойство("Организация") Тогда		
		Объект.Организация = Параметры.Организация;
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = Организация;	
		КонецЕсли;	
		
		ДатаНачала 		= Параметры.ДатаНачала;
		ДатаОкончаня 	= Параметры.ДатаОкончания;
		
		ПерейтиНаАвансы = Параметры.ПерейтиНаАвансы;
		СформироватьПриОткрытии = Истина;
		
	Иначе		
		Объект.Организация = Организация;
		
		// Установка реквизитов формы.
		ДатаОбработки = ТекущаяДатаСеанса();
		ДатаНачала 	  = НачалоМесяца(ДатаОбработки);
		ДатаОкончаня  = КонецМесяца(ДатаОбработки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьДоступностьЭлементов();	
	
	Если СформироватьПриОткрытии Тогда	
		СформироватьНаСервере();
		ПроверкаДоговоров();
		
		СтрокаТабличнойЧастиОК = Элементы.ОбороткаКонтрагенты.ТекущиеДанные;
		Если СтрокаТабличнойЧастиОК <> Неопределено Тогда
			ТекущийКонтрагент = СтрокаТабличнойЧастиОК.Контрагент;
		КонецЕсли;
		
		СтрокаТабличнойЧастиОД = Элементы.ОбороткаДоговоры.ТекущиеДанные;
		Если СтрокаТабличнойЧастиОД <> Неопределено Тогда
			ТекущийДоговор = СтрокаТабличнойЧастиОД.Договор;
		КонецЕсли;
		
		УстановитьОтборНаАвансы();
		УстановитьОтборНаРасшифровкуДоговора();
		УстановитьЗаголовокОтборКонтрагентДоговор();
		УстановитьЗаголовокЗакрывающияПроводка();
		
		Если ПерейтиНаАвансы Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаИсторияАвансовНДС;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		
		ДатаОкончаня = КонецМесяца(ДатаНачала);
		
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			СформироватьНаСервере();
			ПроверкаДоговоров();
			
			УстановитьОтборНаАвансы();
			УстановитьОтборНаРасшифровкуДоговора();
			УстановитьВидимостьДоступностьЭлементов();	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончаня) И ЗначениеЗаполнено(Объект.Организация) Тогда
		СформироватьНаСервере();
		ПроверкаДоговоров();
		
		УстановитьОтборНаАвансы();
		УстановитьОтборНаРасшифровкуДоговора();
		УстановитьВидимостьДоступностьЭлементов();	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеАвансыПриИзменении(Элемент)
	УстановитьОтборНаАвансы();		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиОбороткаКонтрагенты

&НаКлиенте
Процедура ОбороткаКонтрагентыПриАктивизацииСтроки(Элемент)
	ИмяТабличнойЧасти = "ОбороткаКонтрагенты";
	БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ОбороткаДоговоры");
	
	СтрокаТабличнойЧасти = Элементы.ОбороткаКонтрагенты.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		ТекущийКонтрагент = СтрокаТабличнойЧасти.Контрагент;
		
		УстановитьОтборНаАвансы();
		УстановитьЗаголовокОтборКонтрагентДоговор();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбороткаКонтрагентыПередУдалением(Элемент, Отказ)
	ИмяТабличнойЧасти = "ОбороткаКонтрагенты";
	БухгалтерскийУчетКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "ОбороткаДоговоры");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиОбороткаДоговоры

&НаКлиенте
Процедура ОборотыДоговораПриАктивизацииСтроки(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОбороткаДоговоры.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Отказ = Ложь;
	
		ПроверитьЗаполнениеОрганизации(Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ТекущийДоговор = СтрокаТабличнойЧасти.Договор;
		УстановитьОтборНаАвансы();
		УстановитьОтборНаРасшифровкуДоговора();
		УстановитьЗаголовокОтборКонтрагентДоговор();
		УстановитьЗаголовокЗакрывающияПроводка();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиАвансы

&НаКлиенте
Процедура АвансыПриАктивизацииСтроки(Элемент)
	ИмяТабличнойЧасти = "Авансы";
	БухгалтерскийУчетКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ОперацииАвансов");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
	
	Отказ = Ложь;
	
	ПроверитьЗаполнениеОрганизации(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	СформироватьНаСервере();
	ПроверкаДоговоров();
	
	УстановитьОтборНаАвансы();
	УстановитьОтборНаРасшифровкуДоговора();
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()

	Если ВСомах Тогда
		Элементы.ОбороткаСчетаДоговорыВалюта.Видимость = Ложь;
		Элементы.ОборотыДоговораВалюта.Видимость = Ложь;
	Иначе
		Элементы.ОбороткаСчетаДоговорыВалюта.Видимость = Истина;
		Элементы.ОборотыДоговораВалюта.Видимость = Истина;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеОрганизации(Отказ)

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда	
		ТекстСообщения = НСтр("ru = 'Необходимо заполнить организацию.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.Организация",,Отказ);
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура СформироватьРасшифровкуПоСчетам()
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос = Новый Запрос;	
	Запрос.Текст =
		// 1. Счета с субконто "Контрагент" и "Договор".
		// 2. Остатки по тем же счетам (1 пункт), кроме 1549.
		// 3. Обороты по тем же счетам (1 пункт), кроме 1549.
		// 4. Левое присоединения 2 и 3 пункта к 1.
		// 5. Наложение отборов на результат 4 пункта.
		// 6. Выбираются все данные из 5 пункта, кроме тех где регистратор док. "Закрыти месяца" + группирвка + порядок.
		// 7. Выбираются все данные из 5 пункта + группирвка + порядок.
		// 8. Выбираются данные из 3 пункта с условием: регистратор = док. "Закрыти месяца" и сумма оборот > 0.
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет,
		|	Хозрасчетный.Вид КАК ВидСчета
		|ПОМЕСТИТЬ ВременнаяТаблицаСчета
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.ВидыСубконто.ВидСубконто В(&ВидыСубконто)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Субконто2 КАК Договор,
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
		|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт
		|ПОМЕСТИТЬ ВременнаяТаблицаХозрасчетныйОстатки
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаНачала,
		|			Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНаАвансы),
		|			&ВидыСубконто,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Счет КАК Счет,
		|	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
		|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
		|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
		|	ХозрасчетныйОбороты.СуммаОборот КАК СуммаОборот,
		|	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		|	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт
		|ПОМЕСТИТЬ ВременнаяТаблицаХозрасчетныйОбороты
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			Регистратор,
		|			Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНаАвансы),
		|			&ВидыСубконто,
		|			Организация = &Организация,
		|			,
		|			) КАК ХозрасчетныйОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСчета.Счет КАК Счет,
		|	ВременнаяТаблицаСчета.ВидСчета КАК ВидСчета,
		|	ВременнаяТаблицаХозрасчетныйОбороты.Регистратор КАК Регистратор,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаХозрасчетныйОбороты.Договор <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА ВременнаяТаблицаХозрасчетныйОбороты.Договор
		|		КОГДА ВременнаяТаблицаХозрасчетныйОстатки.Договор <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА ВременнаяТаблицаХозрасчетныйОстатки.Договор
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Договор,
		|	ЕСТЬNULL(ВременнаяТаблицаХозрасчетныйОбороты.СуммаОборотДт, 0) КАК СуммаОборотДт,
		|	ЕСТЬNULL(ВременнаяТаблицаХозрасчетныйОбороты.СуммаОборотКт, 0) КАК СуммаОборотКт,
		|	ЕСТЬNULL(ВременнаяТаблицаХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК СуммаОстатокДт,
		|	ЕСТЬNULL(ВременнаяТаблицаХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК СуммаОстатокКт
		|ПОМЕСТИТЬ ВременнаяТаблицаНачальныеДанные
		|ИЗ
		|	ВременнаяТаблицаСчета КАК ВременнаяТаблицаСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаХозрасчетныйОбороты КАК ВременнаяТаблицаХозрасчетныйОбороты
		|		ПО ВременнаяТаблицаСчета.Счет = ВременнаяТаблицаХозрасчетныйОбороты.Счет
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаХозрасчетныйОстатки КАК ВременнаяТаблицаХозрасчетныйОстатки
		|		ПО ВременнаяТаблицаСчета.Счет = ВременнаяТаблицаХозрасчетныйОстатки.Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаНачальныеДанные.Счет КАК Счет,
		|	ВременнаяТаблицаНачальныеДанные.ВидСчета КАК ВидСчета,
		|	ЕСТЬNULL(ВременнаяТаблицаНачальныеДанные.Регистратор, НЕОПРЕДЕЛЕНО) КАК Регистратор,
		|	ВременнаяТаблицаНачальныеДанные.Договор КАК Договор,
		|	ВременнаяТаблицаНачальныеДанные.СуммаОборотДт КАК СуммаОборотДт,
		|	ВременнаяТаблицаНачальныеДанные.СуммаОборотКт КАК СуммаОборотКт,
		|	ВременнаяТаблицаНачальныеДанные.СуммаОстатокДт КАК СуммаОстатокДт,
		|	ВременнаяТаблицаНачальныеДанные.СуммаОстатокКт КАК СуммаОстатокКт
		|ПОМЕСТИТЬ ВременнаяТаблицаГотовыеДанные
		|ИЗ
		|	ВременнаяТаблицаНачальныеДанные КАК ВременнаяТаблицаНачальныеДанные
		|ГДЕ
		|	(ВременнаяТаблицаНачальныеДанные.СуммаОборотДт <> 0
		|			ИЛИ ВременнаяТаблицаНачальныеДанные.СуммаОборотКт <> 0
		|			ИЛИ ВременнаяТаблицаНачальныеДанные.СуммаОстатокДт <> 0
		|			ИЛИ ВременнаяТаблицаНачальныеДанные.СуммаОстатокКт <> 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаГотовыеДанные.Счет КАК Счет,
		|	ВременнаяТаблицаГотовыеДанные.Договор КАК Договор,
		|	МАКСИМУМ(ВременнаяТаблицаГотовыеДанные.ВидСчета) КАК ВидСчета,
		|	СУММА(ВременнаяТаблицаГотовыеДанные.СуммаОборотДт) КАК ОборотыДт,
		|	СУММА(ВременнаяТаблицаГотовыеДанные.СуммаОборотКт) КАК ОборотыКт,
		|	СУММА(ВременнаяТаблицаГотовыеДанные.СуммаОстатокДт) КАК СальдоНДт,
		|	СУММА(ВременнаяТаблицаГотовыеДанные.СуммаОстатокКт) КАК СальдоНКт
		|ИЗ
		|	ВременнаяТаблицаГотовыеДанные КАК ВременнаяТаблицаГотовыеДанные
		|ГДЕ
		|	НЕ ВременнаяТаблицаГотовыеДанные.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаГотовыеДанные.Договор,
		|	ВременнаяТаблицаГотовыеДанные.Счет
		|
		|УПОРЯДОЧИТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаГотовыеДанные.Счет КАК Счет,
		|	ВременнаяТаблицаГотовыеДанные.Договор КАК Договор,
		|	МАКСИМУМ(ВременнаяТаблицаГотовыеДанные.ВидСчета) КАК ВидСчета,
		|	СУММА(ВременнаяТаблицаГотовыеДанные.СуммаОборотДт) КАК ОборотыДт,
		|	СУММА(ВременнаяТаблицаГотовыеДанные.СуммаОборотКт) КАК ОборотыКт,
		|	СУММА(ВременнаяТаблицаГотовыеДанные.СуммаОстатокДт) КАК СальдоНДт,
		|	СУММА(ВременнаяТаблицаГотовыеДанные.СуммаОстатокКт) КАК СальдоНКт
		|ИЗ
		|	ВременнаяТаблицаГотовыеДанные КАК ВременнаяТаблицаГотовыеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаГотовыеДанные.Договор,
		|	ВременнаяТаблицаГотовыеДанные.Счет
		|
		|УПОРЯДОЧИТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаХозрасчетныйОбороты.Счет КАК Счет,
		|	ВременнаяТаблицаХозрасчетныйОбороты.КорСчет КАК КорСчет,
		|	ВременнаяТаблицаХозрасчетныйОбороты.Договор КАК Договор,
		|	СУММА(ВременнаяТаблицаХозрасчетныйОбороты.СуммаОборот) КАК Сумма
		|ИЗ
		|	ВременнаяТаблицаХозрасчетныйОбороты КАК ВременнаяТаблицаХозрасчетныйОбороты
		|ГДЕ
		|	ВременнаяТаблицаХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
		|	И ВременнаяТаблицаХозрасчетныйОбороты.СуммаОборот > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаХозрасчетныйОбороты.Договор,
		|	ВременнаяТаблицаХозрасчетныйОбороты.Счет,
		|	ВременнаяТаблицаХозрасчетныйОбороты.КорСчет";	
	Запрос.УстановитьПараметр("ДатаНачала",		НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",	КонецДня(ДатаОкончаня));
	Запрос.УстановитьПараметр("ВидыСубконто",	ВидыСубконто);
	Запрос.УстановитьПараметр("Организация",	Объект.Организация);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Объект.РасшифровкаПоСчетам.Очистить();
	Объект.РасшифровкаДоЗакрытияМесяца.Очистить();
	
	ВыборкаДоЗакрытия = Результат[5].Выбрать();
	ВыборкаПослеЗакрытия = Результат[6].Выбрать();
	ВыборкаЗакрывающиеПроводки = Результат[7].Выбрать();
	
	Пока ВыборкаДоЗакрытия.Следующий() Цикл
		СтрокаТабличнойЧасти = Объект.РасшифровкаДоЗакрытияМесяца.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДоЗакрытия);
		
		Если ВыборкаДоЗакрытия.ВидСчета = ВидСчета.Активный Тогда
			Остаток = ВыборкаДоЗакрытия.СальдоНДт + ВыборкаДоЗакрытия.ОборотыДт
						- ВыборкаДоЗакрытия.СальдоНКт - ВыборкаДоЗакрытия.ОборотыКт;
						
			Если Остаток > 0 Тогда
				СтрокаТабличнойЧасти.СальдоКДт = Остаток;
			Иначе
				СтрокаТабличнойЧасти.СальдоККт = -Остаток;
			КонецЕсли;
		Иначе
			Остаток = ВыборкаДоЗакрытия.СальдоНКт + ВыборкаДоЗакрытия.ОборотыКт
						- ВыборкаДоЗакрытия.СальдоНДт - ВыборкаДоЗакрытия.ОборотыДт;
						
			Если Остаток > 0 Тогда
				СтрокаТабличнойЧасти.СальдоККт = Остаток;
			Иначе
				СтрокаТабличнойЧасти.СальдоКДт = -Остаток;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Пока ВыборкаПослеЗакрытия.Следующий() Цикл
		СтрокаТабличнойЧасти = Объект.РасшифровкаПоСчетам.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаПослеЗакрытия); 
		
		Если ВыборкаПослеЗакрытия.ВидСчета = ВидСчета.Активный Тогда
			Остаток = ВыборкаПослеЗакрытия.СальдоНДт + ВыборкаПослеЗакрытия.ОборотыДт
						- ВыборкаПослеЗакрытия.СальдоНКт - ВыборкаПослеЗакрытия.ОборотыКт;
						
			Если Остаток > 0 Тогда
				СтрокаТабличнойЧасти.СальдоКДт = Остаток;
			Иначе
				СтрокаТабличнойЧасти.СальдоККт = -Остаток;
			КонецЕсли;
		Иначе
			Остаток = ВыборкаПослеЗакрытия.СальдоНКт + ВыборкаПослеЗакрытия.ОборотыКт
						- ВыборкаПослеЗакрытия.СальдоНДт - ВыборкаПослеЗакрытия.ОборотыДт;
						
			Если Остаток > 0 Тогда
				СтрокаТабличнойЧасти.СальдоККт = Остаток;
			Иначе
				СтрокаТабличнойЧасти.СальдоКДт = -Остаток;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Пока ВыборкаЗакрывающиеПроводки.Следующий() Цикл
		СтрокаТабличнойЧасти = Объект.ЗакрывающиеПроводки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаЗакрывающиеПроводки);	
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ПроверкаДоговоров()
	Перем СчетчикСчета;
	Перем СчетчикДог;
	Перем КодДоговора;
	Перем НаимДоговора;
	Перем НаимКонтрагента;
	Счетчик = 0;
	СчетчикДог = 0;
	ТаблицаЗначений = Новый ТаблицаЗначений;		
	ТаблицаЗначений.Колонки.Добавить("Контрагент");
	ТаблицаЗначений.Колонки.Добавить("Договор");
	ТаблицаЗначений.Колонки.Добавить("Счет");
	ТаблицаЗначений.Колонки.Добавить("Содержание");
	ТаблицаЗначений.Колонки.Добавить("Регистратор");
	
	Для каждого СтрокаТЧ из Объект.ОбороткаСчетаДоговоры Цикл 
		Если Не СтрокаТЧ.Контрагент = СтрокаТЧ.Договор.Владелец Тогда 
			//ТекстСообщения =  СтрШаблон(НСтр("ru = 'В строке %1.  Данному контрагенту: %2 не соответствует текуший договор: %3 !'"),СтрокаТЧ.НомерСтроки,СтрокаТЧ.Контрагент,СтрокаТЧ.Договор);
			//БухгалтерскийУчетСервер.СообщитьОбОшибке(СтрокаТЧ.Договор, ТекстСообщения);
			ТБ = ТаблицаЗначений.Добавить();
			ТБ.Контрагент = СтрокаТЧ.Контрагент;
			ТБ.Договор = СтрокаТЧ.Договор;
			ТБ.Счет = СтрокаТЧ.Счет;
			ТБ.Содержание = "Контрагенту не соответствует текуший договор";
			ТБ.Регистратор = СтрокаТЧ.Регистратор;
			
		КонецЕсли;
		// Проверка количества счетов у договора. Если > 2, то Содержание = "Количество счетов для данного договора > 2!"
		Если Не ЗначениеЗаполнено(СтрокаТЧ.КодДоговора) Тогда
			Продолжить;
		КонецЕсли;
		Если КодДоговора = СтрокаТЧ.КодДоговора Тогда
			Счетчик = Счетчик + 1;
			КонтрагентПред = СтрокаТЧ.Контрагент;
			ДоговорПред = СтрокаТЧ.Договор;
			СчетПред = СтрокаТЧ.Счет;
		КонецЕсли;
		Если КодДоговора <> СтрокаТЧ.КодДоговора И Счетчик > 1 Тогда
			ТБ = ТаблицаЗначений.Добавить();
			ТБ.Контрагент = КонтрагентПред;
			ТБ.Договор = ДоговорПред;
			ТБ.Счет = СчетПред;
			ТБ.Содержание = "Количество счетов для данного договора больше двух!";
			Счетчик = 0;
		ИначеЕсли КодДоговора <> СтрокаТЧ.КодДоговора И Счетчик = 1 Тогда
			Счетчик = 0;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.КодДоговора) Тогда
			КодДоговора = СтрокаТЧ.КодДоговора;
		КонецЕсли;
		
		// Проверка на одинаковые наименования договоров у контрагента, не д.б.
		Если НаимДоговора = СтрокаТЧ.Договор И НаимКонтрагента = СтрокаТЧ.Контрагент Тогда
			ТБ = ТаблицаЗначений.Добавить();
			ТБ.Контрагент = НаимКонтрагента;
			ТБ.Договор = НаимДоговора;
			ТБ.Содержание = "Одинаковые наименования договоров для данного контрагента!";
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ.Договор) И ЗначениеЗаполнено(СтрокаТЧ.Контрагент) Тогда
			НаимДоговора = СтрокаТЧ.Договор;
			НаимКонтрагента = СтрокаТЧ.Контрагент;
		КонецЕсли;
		
	КонецЦикла;	
	Объект.Проверки.Загрузить(ТаблицаЗначений);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНаСервере()
	СформироватьОбороткаСчетаДоговоры();
	СформироватьОбороткаКонтрагентыИДоговоры();
	СформироватьРасшифровкуПоСчетам();
	СформироватьАвансы();
КонецПроцедуры

&НаСервере
Процедура СформироватьОбороткаСчетаДоговоры();
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта.Наименование = ""KGS""
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт
		|	КОНЕЦ КАК СальдоНДт,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта.Наименование = ""KGS""
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт
		|	КОНЕЦ КАК СальдоНКт,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта.Наименование = ""KGS""
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотДт
		|	КОНЕЦ КАК ОборотыДт,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта.Наименование = ""KGS""
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотКт
		|	КОНЕЦ КАК ОборотыКт,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта.Наименование = ""KGS""
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт
		|	КОНЕЦ КАК СальдоКДт,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта.Наименование = ""KGS""
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКт
		|	КОНЕЦ КАК СальдоККт,
		|	ХозрасчетныйОстаткиИОбороты.Субконто2.Код КАК КодДоговора,
		|	ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДоговора КАК ВидДоговора,
		|	ХозрасчетныйОстаткиИОбороты.Валюта.Наименование КАК Валюта
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончаня, Авто, , Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНААвансы), &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент,
		|	Договор,
		|	Счет
		|АВТОУПОРЯДОЧИВАНИЕ";	
	Запрос.УстановитьПараметр("ДатаНачала",		НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончаня",	КонецДня(ДатаОкончаня));
	Запрос.УстановитьПараметр("ВидыСубконто",	ВидыСубконто);
	Запрос.УстановитьПараметр("Организация",	Объект.Организация);
	
	Результат 	= Запрос.Выполнить();
	ТЗ			= Результат.Выгрузить();
	Если ВСомах Тогда
		ПараметрыОтбора = Новый Структура("Валюта","KGS");
		ТЗНов = ТЗ.Скопировать(ПараметрыОтбора);
	Иначе
		ТЗНов = ТЗ;
	КонецЕсли;
		
	Объект.ОбороткаСчетаДоговоры.Загрузить(ТЗНов);
КонецПроцедуры

&НаСервере
Процедура СформироватьОбороткаКонтрагентыИДоговоры();
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		
	Запрос = Новый Запрос;	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Контрагент,
		|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Договор,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта.Наименование = ""KGS""
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт
		|	КОНЕЦ КАК СальдоНДт,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта.Наименование = ""KGS""
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт
		|	КОНЕЦ КАК СальдоНКт,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта.Наименование = ""KGS""
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотДт
		|	КОНЕЦ КАК ОборотыДт,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта.Наименование = ""KGS""
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотКт
		|	КОНЕЦ КАК ОборотыКт,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта.Наименование = ""KGS""
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт
		|	КОНЕЦ КАК СальдоКДт,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта.Наименование = ""KGS""
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт
		|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКт
		|	КОНЕЦ КАК СальдоККт,
		|	ХозрасчетныйОстаткиИОбороты.Субконто1.Код КАК КодДоговора,
		|	ХозрасчетныйОстаткиИОбороты.Субконто1.ВидДоговора КАК ВидДоговора,
		|	ХозрасчетныйОстаткиИОбороты.Валюта.Наименование КАК Валюта
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончаня, Авто, , Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНААвансы), &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВСомах
		|				ТОГДА ХозрасчетныйОстаткиИОбороты.Валюта.Наименование = &КодВалюты
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент,
		|	Договор
		|ИТОГИ ПО
		|	Контрагент
		|АВТОУПОРЯДОЧИВАНИЕ";	
	Запрос.УстановитьПараметр("ДатаНачала",		НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончаня",	КонецДня(ДатаОкончаня));
	Запрос.УстановитьПараметр("ВидыСубконто",	ВидыСубконто);
	Запрос.УстановитьПараметр("Организация",	Объект.Организация);
	Запрос.УстановитьПараметр("ВСомах",			ВСомах);
	Запрос.УстановитьПараметр("КодВалюты",		"KGS");
	
	ВыборкаКонтрагенты 	= Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Объект.ОбороткаКонтрагенты.Очистить();
	Объект.ОбороткаДоговоры.Очистить();
	КлючСвязи = 1;
	
	Пока ВыборкаКонтрагенты.Следующий() Цикл		
		СтрокаТабличнойЧасти = Объект.ОбороткаКонтрагенты.Добавить();
		СтрокаТабличнойЧасти.Контрагент = ВыборкаКонтрагенты.Контрагент;
		СтрокаТабличнойЧасти.КлючСвязи	= КлючСвязи;
		
		ВыборкаДоговоры = ВыборкаКонтрагенты.Выбрать();
		Пока ВыборкаДоговоры.Следующий() Цикл
			СтрокаТабличнойЧасти = Объект.ОбороткаДоговоры.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДоговоры);
			СтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
		КонецЦикла;	
		
		КлючСвязи = КлючСвязи + 1;
	КонецЦикла;		
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	 Если ТекущаяСТраница = Элементы.ГруппаОперации Тогда 
		 СТЧ = Элементы.ОбороткаДоговоры.ТекущиеДанные;
		 Если СТЧ = Неопределено Тогда 
			 Возврат;
		 КонецЕсли;
         СтрукутураДанных = Новый Структура;
		 СтрукутураДанных.Вставить("Договор", СТЧ.Договор);
		 СтрукутураДанных.Вставить("ОборотКт", СТЧ.ОборотыКт);
		 СтрукутураДанных.Вставить("ОборотДт", СТЧ.ОборотыДт);
		 
		 
		 СформироватьОперации(СтрукутураДанных);	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьОперации(СТЧ)
	
		
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	РБ.Период КАК Дата,
	 |	РБ.Регистратор КАК Документ,
	 |	РБ.СчетДт КАК СчетДт,
	 |	РБ.СчетКт КАК СчетКт,
	 |	РБ.Сумма КАК ОборотДт,
	 |	0 КАК ОборотКт,
	 |	РБ.Содержание КАК Содержание,
	 |	РБ.ВидСубконтоДт1 КАК ВидСубконтоДт1,
	 |	РБ.ВидСубконтоДт2 КАК ВидСубконтоДт2,
	 |	0 КАК ВнутреннийОборот,
	 |	ЗНАЧЕНИЕ(ПЛанВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка) КАК ВидСубконтоКт1,
	 |	ЗНАЧЕНИЕ(ПЛанВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка) КАК ВидСубконтоКт2
	 |ИЗ
	 |	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	 |			&ДатаНачала,
	 |			&ДатаОкончаня,
	 |			Организация = &Организация
	 |				И ВидСубконтоДт1 = ЗНАЧЕНИЕ(ПЛанВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	 |				И ВидСубконтоДт2 = ЗНАЧЕНИЕ(ПЛанВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)
	 |				И СубконтоДт2 = &Договор
	 |				И СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНААвансы),
	 |			,
	 |			) КАК РБ
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	РБ.Период,
	 |	РБ.Регистратор,
	 |	РБ.СчетДт,
	 |	РБ.СчетКт,
	 |	0,
	 |	РБ.Сумма,
	 |	РБ.Содержание,
	 |	0,
	 |	ЗНАЧЕНИЕ(ПЛанВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка),
	 |	ЗНАЧЕНИЕ(ПЛанВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка),
	 |	РБ.ВидСубконтоКт1,
	 |	РБ.ВидСубконтоКт2
	 |ИЗ
	 |	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	 |			&ДатаНачала,
	 |			&ДатаОкончаня,
	 |			Организация = &Организация
	 |				И ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПЛанВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	 |				И ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПЛанВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)
	 |				И СубконтоКт2 = &Договор
	 |				И СчетКт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНААвансы),
	 |			,
	 |			) КАК РБ
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	РБ.Период,
	 |	РБ.Регистратор
	 |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("ДатаНачала",		НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончаня",	КонецДня(ДатаОкончаня));
	Запрос.УстановитьПараметр("ВидыСубконто",	ВидыСубконто);
	Запрос.УстановитьПараметр("Организация",	Объект.Организация);
	Запрос.УстановитьПараметр("Договор",		СТЧ.Договор);
	
	Результат 	= Запрос.Выполнить();
	ТЗ			= Результат.Выгрузить();
	
	Объект.Операции.Загрузить(ТЗ);
	Объект.Операции.Сортировать("Дата,Документ");
	
	Для Каждого СтрокаТЧ Из Объект.Операции Цикл 
		Если СтрокаТЧ.ОборотДт = СТЧ.ОборотКт Тогда 
			СтрокаТЧ.ВнутреннийОборот = СТЧ.ОборотДт; 			
		КонецЕсли; 
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура СформироватьАвансы()
	
	Объект.Авансы.Очистить();
	Объект.ОперацииАвансов.Очистить();
	
	// 1. Данные из РН "АвансыДоотгрузка" с отбором по организации (временная таблица).
	// 2. Документы аванса с суммой и датой из 1 пакета.
	// 3. Все данные из 1 пакета.
	// 4. Документы аванса, которые имеют остатки.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АвансыДоотгрузка.Период КАК Период,
		|	АвансыДоотгрузка.ДокументА КАК ДокументАванса,
		|	АвансыДоотгрузка.Сумма КАК Сумма,
		|	АвансыДоотгрузка.ДокументОтгр КАК ДокументОтгрузки,
		|	АвансыДоотгрузка.НомерСтроки КАК НомерСтроки,
		|	АвансыДоотгрузка.Контрагент КАК Контрагент,
		|	АвансыДоотгрузка.Договор КАК Договор
		|ПОМЕСТИТЬ ВременнаяТаблицаАвансыДоотгрузка
		|ИЗ
		|	РегистрНакопления.АвансыДоотгрузка КАК АвансыДоотгрузка
		|ГДЕ
		|	АвансыДоотгрузка.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаАвансыДоотгрузка.ДокументАванса КАК Документ,
		|	МАКСИМУМ(ВременнаяТаблицаАвансыДоотгрузка.Период) КАК Дата,
		|	МАКСИМУМ(ВременнаяТаблицаАвансыДоотгрузка.Сумма) КАК Сумма,
		|	МАКСИМУМ(ВременнаяТаблицаАвансыДоотгрузка.Контрагент) КАК Контрагент,
		|	МАКСИМУМ(ВременнаяТаблицаАвансыДоотгрузка.Договор) КАК Договор
		|ИЗ
		|	ВременнаяТаблицаАвансыДоотгрузка КАК ВременнаяТаблицаАвансыДоотгрузка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаАвансыДоотгрузка.ДокументАванса
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаАвансыДоотгрузка.ДокументАванса КАК ДокументАванса,
		|	ВременнаяТаблицаАвансыДоотгрузка.Период КАК Дата,
		|	ВременнаяТаблицаАвансыДоотгрузка.Сумма КАК Сумма,
		|	ВременнаяТаблицаАвансыДоотгрузка.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ВременнаяТаблицаАвансыДоотгрузка.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВременнаяТаблицаАвансыДоотгрузка КАК ВременнаяТаблицаАвансыДоотгрузка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументАванса,
		|	Дата,
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АвансыДоотгрузкаОстатки.ДокументА КАК ДокументАванса
		|ИЗ
		|	РегистрНакопления.АвансыДоотгрузка.Остатки(, Организация = &Организация) КАК АвансыДоотгрузкаОстатки";	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаАвансы = МассивРезультатов[1].Выбрать();
	
	ВыборкаРасшифровка = МассивРезультатов[2].Выбрать();
	
	ТаблицаНепогашенныхАвансов = МассивРезультатов[3].Выгрузить();
	ТаблицаНепогашенныхАвансов.Индексы.Добавить("ДокументАванса");
	
	КлючСвязи = 1;
	
	Пока ВыборкаАвансы.Следующий() Цикл	
		// Создание строки в ТЧ "Авансы".
		СтрокаТабличнойЧасти = Объект.Авансы.Добавить();	
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаАвансы);
		СтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
		
		// Проверка является ли данный документ аванса погашенным.
		РезультатПоиска = ТаблицаНепогашенныхАвансов.Найти(ВыборкаАвансы.Документ, "ДокументАванса");
		
		// Если результат поиска не пустой то устанавливается в "Истина" реквизит "Неотгружен" строки ТЧ "Авансы".
		Если РезультатПоиска <> Неопределено Тогда
			СтрокаТабличнойЧасти.Неотгружен = Истина;	
		КонецЕсли;
		
		// Создание строки в ТЧ "ОперацииАвансов".
		СтрокаТабличнойЧасти = Объект.ОперацииАвансов.Добавить();
		
		СтрокаТабличнойЧасти.Документ		= ВыборкаАвансы.Документ;
		СтрокаТабличнойЧасти.Дата 			= ВыборкаАвансы.Дата;
		СтрокаТабличнойЧасти.СуммаОстаток 	= ВыборкаАвансы.Сумма;
		СтрокаТабличнойЧасти.Уровень 		= 1;
		СтрокаТабличнойЧасти.КлючСвязи 		= КлючСвязи;
		
		КлючСвязи = КлючСвязи + 1;
	КонецЦикла;

	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Документ", Неопределено);	
	
	ТекущийАванс 	 = Неопределено;
	ТекущаяСумма 	 = 0;
	ТекущийКлючСвязи = 0;
	
	Пока ВыборкаРасшифровка.Следующий() Цикл
		
		// Если документа отгрузки нет, то это строка образования самого аванса,
		// а данная строка уже создана в предшествующем цикле.
		Если ВыборкаРасшифровка.ДокументОтгрузки = Неопределено Тогда
			Продолжить;			
		КонецЕсли;	
		
		// Поиск строки с указанным документом аванса, чтобы получить
		// сумму аванса и ключ связи.
		Если ТекущийАванс <> ВыборкаРасшифровка.ДокументАванса Тогда
			СтруктураПоиска.Документ = ВыборкаРасшифровка.ДокументАванса;	
			МассивСтрок = Объект.ОперацииАвансов.НайтиСтроки(СтруктураПоиска);	
			СтрокаМассива  = МассивСтрок[0];
			
			ТекущийАванс 	 = СтрокаМассива.Документ;
			ТекущаяСумма 	 = СтрокаМассива.СуммаОстаток;
			ТекущийКлючСвязи = СтрокаМассива.КлючСвязи;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Объект.ОперацииАвансов.Добавить();
		СтрокаТабличнойЧасти.Дата 				= ВыборкаРасшифровка.Дата; 
		СтрокаТабличнойЧасти.Документ		 	= ВыборкаРасшифровка.ДокументОтгрузки;
		СтрокаТабличнойЧасти.СуммаОтгрузка 		= ВыборкаРасшифровка.Сумма;
		СтрокаТабличнойЧасти.СуммаОстаток 		= ТекущаяСумма - ВыборкаРасшифровка.Сумма;		
		СтрокаТабличнойЧасти.Уровень 			= 2;
		СтрокаТабличнойЧасти.КлючСвязи 			= ТекущийКлючСвязи;
		
		ТекущаяСумма = СтрокаТабличнойЧасти.СуммаОстаток;
	КонецЦикла;
	
	Объект.ОперацииАвансов.Сортировать("Уровень");
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНаАвансы()
	
	СтруктураОтбора = Неопределено;
	СтруктураОтбораНайти = Неопределено;
	
	// Отбор по контрагенту, договору и галочке "Показывать все авансы".
	Если ТекущийКонтрагент <> ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка")
		И ТекущийДоговор <> ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка")
		И НЕ Объект.ПоказатьВсеАвансы Тогда
		
		СтруктураОтбора = Новый ФиксированнаяСтруктура("Неотгружен, Контрагент, Договор", Истина, ТекущийКонтрагент, ТекущийДоговор);
		СтруктураОтбораНайти = Новый Структура("Неотгружен, Контрагент, Договор", Истина, ТекущийКонтрагент, ТекущийДоговор);
		
	// Отбор по контрагенту и галочке "Показывать все авансы".
	ИначеЕсли ТекущийКонтрагент <> ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка")
		И НЕ Объект.ПоказатьВсеАвансы Тогда
		
		СтруктураОтбора = Новый ФиксированнаяСтруктура("Неотгружен, Контрагент", Истина, ТекущийКонтрагент);
		СтруктураОтбораНайти = Новый Структура("Неотгружен, Контрагент", Истина, ТекущийКонтрагент);
		
	// Отбор по договору и галочке "Показывать все авансы".
	ИначеЕсли ТекущийДоговор <> ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка")
		И НЕ Объект.ПоказатьВсеАвансы Тогда	
		
		СтруктураОтбора = Новый ФиксированнаяСтруктура("Неотгружен, Договор", Истина, ТекущийДоговор);
		СтруктураОтбораНайти = Новый Структура("Неотгружен, Договор", Истина, ТекущийДоговор);
		
	// Отбор по контрагенту и договору.
	ИначеЕсли ТекущийКонтрагент <> ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка")
		И ТекущийДоговор <> ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка") Тогда
		
		СтруктураОтбора = Новый ФиксированнаяСтруктура("Контрагент, Договор", ТекущийКонтрагент, ТекущийДоговор);
		СтруктураОтбораНайти = Новый Структура("Контрагент, Договор", ТекущийКонтрагент, ТекущийДоговор);
		
	// Отбор по контрагенту.
	ИначеЕсли ТекущийКонтрагент <> ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка") Тогда
		
		СтруктураОтбора = Новый ФиксированнаяСтруктура("Контрагент", ТекущийКонтрагент);
		СтруктураОтбораНайти = Новый Структура("Контрагент", ТекущийКонтрагент);
		
	// Отбор по договору.
	ИначеЕсли ТекущийДоговор <> ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка") Тогда
		
		СтруктураОтбора = Новый ФиксированнаяСтруктура("Договор", ТекущийДоговор);
		СтруктураОтбораНайти = Новый Структура("Договор", ТекущийДоговор);
		
	// Устанавливаем отбор по пустому контрагенту, чтобы не отображалась ни одна строка.
	Иначе
		СтруктураОтбора = Новый ФиксированнаяСтруктура("Контрагент", ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
		СтруктураОтбораНайти = Новый Структура("Контрагент", ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
	КонецЕсли;
	
	Элементы.Авансы.ОтборСтрок = СтруктураОтбора;
	
	Если Объект.Авансы.НайтиСтроки(СтруктураОтбораНайти).Количество() = 0 Тогда
		Элементы.ОперацииАвансов.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", 0);	
	КонецЕсли;	
КонецПроцедуры //УстановитьОтборНаПодчиненнуюТабличнуюЧасть()

&НаКлиенте
Процедура УстановитьОтборНаРасшифровкуДоговора()

	СтруктураОтбора = Неопределено;
	
	Если ТекущийДоговор <> ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка") Тогда	
		СтруктураОтбора = Новый ФиксированнаяСтруктура("Договор", ТекущийДоговор);
	Иначе
		СтруктураОтбора = Новый ФиксированнаяСтруктура("Договор", ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
	КонецЕсли;
	
	Элементы.РасшифровкаПоСчетам.ОтборСтрок = СтруктураОтбора;
	Элементы.РасшифровкаДоЗакрытияМесяца.ОтборСтрок = СтруктураОтбора;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокОтборКонтрагентДоговор()

	ТекстЗаголовка = "";
	
	Если ТекущийКонтрагент <> ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка")
		И ТекущийДоговор <> ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка") Тогда
		ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Контрагент: %1; Договор: %2'"), ТекущийКонтрагент, ТекущийДоговор);
		
	ИначеЕсли ТекущийКонтрагент <> ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка") Тогда
		ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Контрагент: %1'"), ТекущийКонтрагент);	
	
	ИначеЕсли ТекущийДоговор <> ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка") Тогда		
		ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Договор: %1'"), ТекущийДоговор);					
	КонецЕсли;

	ОтборКонтрагентДоговор = ТекстЗаголовка;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокЗакрывающияПроводка()

	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Договор", ТекущийДоговор);
	
	МассвиСтрок = Объект.ЗакрывающиеПроводки.НайтиСтроки(СтруктураОтбора);
	
	Если Месяц(ДатаНачала) = Месяц(ДатаОкончаня) И МассвиСтрок.Количество() > 0 Тогда
		СтрокаМассива = МассвиСтрок[0];
		
		ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Закрывающая проводка: %1 - %2 на сумму %3'"),
									СтрокаМассива.Счет, 
									СтрокаМассива.КорСчет, 
									СтрокаМассива.Сумма);
						
		ЗакрывающаяПроводка = ТекстЗаголовка;
	Иначе
		ЗакрывающаяПроводка = "";
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти
