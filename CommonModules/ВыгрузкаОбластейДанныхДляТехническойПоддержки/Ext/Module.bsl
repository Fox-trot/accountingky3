
#Область СлужебныйПрограммныйИнтерфейс

Функция РежимВыгрузкиДляТехническойПоддержки(Контейнер) Экспорт
	
	ПараметрыВыгрузки = Контейнер.ПараметрыВыгрузки();
	
	РежимВыгрузкиДляТехническойПоддержки = Ложь;
	
	Возврат ПараметрыВыгрузки.Свойство("РежимВыгрузкиДляТехническойПоддержки", РежимВыгрузкиДляТехническойПоддержки) И РежимВыгрузкиДляТехническойПоддержки = Истина;
	
КонецФункции

// Параметры:
// 	Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - 
// 	ТаблицаОбработчиков - см. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриРегистрацииОбработчиковВыгрузкиДанных.ТаблицаОбработчиков
Процедура ПередВыгрузкойДанных(Контейнер, ТаблицаОбработчиков) Экспорт
	
	Если Не РежимВыгрузкиДляТехническойПоддержки(Контейнер) Тогда
		Возврат;
	КонецЕсли;
			
	Для Каждого ОбъектМетаданных Из ВыгрузкаОбластейДанныхДляТехническойПоддержкиПовтИсп.МетаданныеИсключаемыеИзВыгрузкиВРежимеДляТехническойПоддержки() Цикл
				
		НовыйОбработчик = ТаблицаОбработчиков.Добавить();
		НовыйОбработчик.ОбъектМетаданных = ОбъектМетаданных;
		НовыйОбработчик.Обработчик = ВыгрузкаОбластейДанныхДляТехническойПоддержки;
		НовыйОбработчик.ПередВыгрузкойТипа = Истина;
		НовыйОбработчик.Версия = ВыгрузкаЗагрузкаДанныхСлужебныйСобытия.ВерсияОбработчиков1_0_0_1();
					
	КонецЦикла;
			
	СписокМетаданных = ВыгрузкаОбластейДанныхДляТехническойПоддержкиПовтИсп.МетаданныеИмеющиеСсылкиНаИсключаемыеИзВыгрузкиВРежимеДляТехническойПоддержки();
	
	Для Каждого ЭлементСписка Из СписокМетаданных Цикл
		
		НовыйОбработчик = ТаблицаОбработчиков.Добавить();
		НовыйОбработчик.ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ЭлементСписка.Ключ);
		НовыйОбработчик.Обработчик = ВыгрузкаОбластейДанныхДляТехническойПоддержки;
		НовыйОбработчик.ПередВыгрузкойОбъекта = Истина;
		НовыйОбработчик.Версия = ВыгрузкаЗагрузкаДанныхСлужебныйСобытия.ВерсияОбработчиков1_0_0_1();
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ПередВыгрузкойТипа(Контейнер, Сериализатор, ОбъектМетаданных, Отказ) Экспорт
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ПередВыгрузкойОбъекта(Контейнер, МенеджерВыгрузкиОбъекта, Сериализатор, Объект, Артефакты, Отказ) Экспорт
	
	ОбъектМетаданных = Объект.Метаданные();
	
	РеквизитыОбъектаИмеющиеСсылкиНаИсключаемыеИзВыгрузки = РеквизитыОбъектаИмеющиеСсылкиНаИсключаемыеИзВыгрузки(ОбъектМетаданных);
	
	Если РеквизитыОбъектаИмеющиеСсылкиНаИсключаемыеИзВыгрузки = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Объект метаданных %1 не может быть обработан обработчиком ВыгрузкаОбластейДанныхДляТехподдержки.ПередВыгрузкойОбъекта()!'"),
		ОбъектМетаданных.ПолноеИмя());
		
	КонецЕсли;
	
	Если ОбщегоНазначенияБТС.ЭтоКонстанта(ОбъектМетаданных) Тогда
		
		ПередВыгрузкойКонстанты(Объект);
		
	ИначеЕсли ОбщегоНазначенияБТС.ЭтоСсылочныеДанные(ОбъектМетаданных) Тогда
		
		ПередВыгрузкойСсылочногоОбъекта(Объект, РеквизитыОбъектаИмеющиеСсылкиНаИсключаемыеИзВыгрузки);
		
	ИначеЕсли ОбщегоНазначенияБТС.ЭтоНаборЗаписей(ОбъектМетаданных) Тогда
		
		ПередВыгрузкойНабораЗаписей(ОбъектМетаданных, Объект, РеквизитыОбъектаИмеющиеСсылкиНаИсключаемыеИзВыгрузки);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неожиданный объект метаданных: %1!';
										|en = 'Unexpected metadata object: %1.'"),
		ОбъектМетаданных.ПолноеИмя);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПередВыгрузкойКонстанты(Объект)
	
	ОчиститьСсылкуНаИсключаемыйИзВыгрузкиОбъект(Объект.Значение);
	
КонецПроцедуры

Процедура ПередВыгрузкойСсылочногоОбъекта(Объект, РеквизитыОбъектаИмеющиеСсылкиНаИсключаемыеИзВыгрузки)
	
	Для Каждого ТекущийРеквизит Из РеквизитыОбъектаИмеющиеСсылкиНаИсключаемыеИзВыгрузки Цикл
		
		ИмяРеквизита = ТекущийРеквизит.ИмяРеквизита;

		Если ТекущийРеквизит.ИмяТабличнойЧасти = Неопределено Тогда
						
			ОчиститьСсылкуНаИсключаемыйИзВыгрузкиОбъект(Объект[ИмяРеквизита]);		
			
		Иначе
			
			ИмяТабличнойЧасти = ТекущийРеквизит.ИмяТабличнойЧасти;
			
			Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл 
				
				ОчиститьСсылкуНаИсключаемыйИзВыгрузкиОбъект(СтрокаТабличнойЧасти[ИмяРеквизита]);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередВыгрузкойНабораЗаписей(ОбъектМетаданных, НаборЗаписей, РеквизитыОбъектаИмеющиеСсылкиНаИсключаемыеИзВыгрузки)
	
	Для Каждого ТекущийРеквизит Из РеквизитыОбъектаИмеющиеСсылкиНаИсключаемыеИзВыгрузки Цикл
		
		ИмяСвойства = ТекущийРеквизит.ИмяРеквизита;
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			ОчиститьСсылкуНаИсключаемыйИзВыгрузкиОбъект(Запись[ИмяСвойства]);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Необходимо убрать возможно возникшие дубли строк по измерениям регистра сведений 
	
	Если Не ОбщегоНазначенияБТС.ЭтоРегистрСведений(ОбъектМетаданных) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИзмерений = Новый Массив;
	
	Для Каждого ОбъектМетаданныхИзмерение Из ОбъектМетаданных.Измерения Цикл
		МассивИзмерений.Добавить(ИмяОбъектаМетаданных(ОбъектМетаданныхИзмерение));
	КонецЦикла;
	
	Если ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		МассивИзмерений.Добавить("Период");
	КонецЕсли;
	
	КлючИзмерений = СтрСоединить(МассивИзмерений, ", ");
	
	ТаблицаКлючей = НаборЗаписей.Выгрузить(, КлючИзмерений); // ТаблицаЗначений
	ТаблицаКлючей.Колонки.Добавить("КоличествоСтрокПоКлючу");
	ТаблицаКлючей.ЗаполнитьЗначения(1, "КоличествоСтрокПоКлючу");
	ТаблицаКлючей.Свернуть(КлючИзмерений, "КоличествоСтрокПоКлючу");
	
	// Если дублирований нет - ничего делать не нужно
	Если ТаблицаКлючей.Количество() = ТаблицаКлючей.НайтиСтроки(Новый Структура("КоличествоСтрокПоКлючу", 1)).Количество() Тогда
		Возврат;
	КонецЕсли;
		
	СтруктураОтбораПоКлючу = Новый Структура(КлючИзмерений);
	
	ТаблицаНабораЗаписей  = НаборЗаписей.Выгрузить();
	
	Для Каждого СтрокаКлюча Из ТаблицаКлючей Цикл
		
		Если СтрокаКлюча.КоличествоСтрокПоКлючу = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбораПоКлючу, СтрокаКлюча, КлючИзмерений); 
		
		МассивСтрок = ТаблицаНабораЗаписей.НайтиСтроки(СтруктураОтбораПоКлючу);
		
		Для ИндексУдаляемойСтроки = 0 по МассивСтрок.ВГраница() - 1 Цикл
			ТаблицаНабораЗаписей.Удалить(МассивСтрок[ИндексУдаляемойСтроки]);
		КонецЦикла;
		
	КонецЦикла;
	
	НаборЗаписей.Загрузить(ТаблицаНабораЗаписей);
	
	
КонецПроцедуры

Процедура ОчиститьСсылкуНаИсключаемыйИзВыгрузкиОбъект(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеИсключаемыеИзВыгрузки = ВыгрузкаОбластейДанныхДляТехническойПоддержкиПовтИсп.МетаданныеИсключаемыеИзВыгрузкиВРежимеДляТехническойПоддержки();
	МетаданныеСсылки = Ссылка.Метаданные();
	
	Если МетаданныеИсключаемыеИзВыгрузки.Найти(МетаданныеСсылки) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = Неопределено;	
	
КонецПроцедуры

Функция РеквизитыОбъектаИмеющиеСсылкиНаИсключаемыеИзВыгрузки(Знач МетаданныеОбъекта)
	
	ПолноеИмяМетаданных = МетаданныеОбъекта.ПолноеИмя();
	
	СписокМетаданных = ВыгрузкаОбластейДанныхДляТехническойПоддержкиПовтИсп.МетаданныеИмеющиеСсылкиНаИсключаемыеИзВыгрузкиВРежимеДляТехническойПоддержки();
	
	Возврат СписокМетаданных.Получить(ПолноеИмяМетаданных);
	
КонецФункции

// Возвращает имя объекта метаданных.
// 
// Параметры:
// 	ОбъектМетаданных - ОбъектМетаданных - объект метаданных.
// Возвращаемое значение:
// 	Строка - имя объекта метаданных.
Функция ИмяОбъектаМетаданных(ОбъектМетаданных)
	
	Возврат ОбъектМетаданных.Имя;
	
КонецФункции
#КонецОбласти

