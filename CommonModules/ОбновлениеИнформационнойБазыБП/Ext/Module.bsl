////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы Бухгалтерия для предприятия, редакция 3.0.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "БухгалтерияДляКыргызстана";
	Описание.Версия = "3.0.8.1";

	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики этого события для подсистем БСП добавляются через подписку на служебное событие:
	// "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления".
	//
	// Процедуры обработки этого события всех подсистем БСП имеют то же имя, что и эта процедура,
	// но размещены в своих подсистемах.
	// Чтобы найти процедуры можно выполнить глобальный поиск по имени процедуры.
	// Чтобы найти модули в которых размещены процедуры, можно выполнить поиск по имени события.
	
	// Обработчики, выполняемые при заполнении пустой ИБ
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПервыйЗапуск";
	Обработчик.Комментарий = НСтр("ru = 'Выполнение обработчиков первого запуска.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьДатуТекущейВерсии";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Оперативно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.0";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ИнициализироватьПользователей";
	Обработчик.Комментарий = НСтр("ru = 'Инициализация пользователей.'");
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.0";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьПредопределенныеВидыКонтактнойИнформации";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Комментарий = НСтр("ru = 'Обновление видов контактной информации.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.3.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ИзменитьСубконтоСчетовПроизводства";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("628bc950-42cd-458d-9b94-df51cb70d38a");
	Обработчик.Комментарий = НСтр("ru = 'Изменение субконто у счетов 1630 и 1640.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.4.30";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ИзменитьРазделУчетаВВодОстатков";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ef1ff80e-1fdc-44b3-aa28-20ca35b3bbef");
	Обработчик.Комментарий = НСтр("ru = 'Изменение раздела учета для документов ""Ввод начальных остатков""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.4.36";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьОсновныеДоговорыКонтрагента";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("66c21d0f-0e61-4c77-b3e4-2f9dd8b099a0");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра сведений ""Основные договоры контрагента""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.4.51";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОчиститьРегистрСостоянияЗаказов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2b0885b6-aff1-460c-a31e-86a5771dfee6");
	Обработчик.Комментарий = НСтр("ru = 'Очищение регистра сведений ""Состояние заказов""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.4.59";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьДопРасходыНаОдноПоступление";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6886f263-8ab1-4195-b2b6-02c2cc01a99e");
	Обработчик.Комментарий = НСтр("ru = 'Установка значения функциональной опции по дополнительным расходам'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.5.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.СнятьПометкуСНепредоределенныхЭлементов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d6f07416-ed4d-4c49-b3f3-61d38e114fec");
	Обработчик.Комментарий = НСтр("ru = 'Снятие пометки удаления с не предопределенных элементов справочников'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.5.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьЗначениеКонстантыНеВестиУчетПоОрганизациям";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("55d1a55c-4069-4e22-bd49-f4e53758bb64");
	Обработчик.Комментарий = НСтр("ru = 'Установка значения константы ""НеВестиУчетПоОрганизациям"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.5.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьСписокСтран";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("24143f6e-e564-49a6-a761-31f5a3da67ae");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение списка стран'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.5.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ДобавитьЭлементПроверкиУчета";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9835f408-3277-4d17-ad75-282940f12fc0");
	Обработчик.Комментарий = НСтр("ru = 'Добавление элемента справочника'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.19";
	Обработчик.Процедура = "МониторРуководителя.ЗаполнитьДанныеМонитораРуководителя";
	Обработчик.НачальноеЗаполнение = Истина; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.5.20";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьСубконтоСчета_ОсновноеПроизводство";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("15690750-d95b-476f-bd0d-1c2385086146");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение субконто у счета 1630.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.5.26";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.РедактированиеНаименованийСчетовИУдалениеСубконто";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e27d7a6c-827b-43fe-a60b-de99acb98428");
	Обработчик.Комментарий = НСтр("ru = 'Редактирование наименований некоторых счетов и удаление субконто счетов-групп.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.5.27";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьРегистрСведенияОПоступлении";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4cfd56eb-e054-41a8-b240-9d36611e8048");
	Обработчик.Комментарий = НСтр("ru = 'В каждой строке регистра значение ресурса ""УдалитьКонтрагент"" переносится в измерение ""Контрагент"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.5.28";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнениеРеквизитовПервичныхДокументов";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов первичных документов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.6.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ДобавитьСубконтоСчету_8100";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a0c09be2-4182-4851-9957-62946e7ab795");
	Обработчик.Комментарий = НСтр("ru = 'Добавление счету 8100 субконто ""Статьи затрат"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.6.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьРегистрСведенийСтавкиНДС";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ac1a1e8c-0869-447c-b3a7-a776e21840d6");
	Обработчик.Комментарий = НСтр("ru = 'Перезаполнение регистра сведений ""Ставки НДС"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.6.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьВедомостьЗаработнойПлаты";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3e9b696e-5bfc-4ff5-81f4-21b8a7c63025");
	Обработчик.Комментарий = НСтр("ru = 'Обновление ведомости ЗП.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.6.22";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьСчетаУчетаЗП";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e27d7a6c-827b-43fe-a60b-de99acb98429");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра сведений ""Счета учета отражения заработной платы"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.6.30";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьУстановкаТарифовКомандировочных";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("21ec90da-3c3d-44e7-afbf-7214e474d47a");
	Обработчик.Комментарий = НСтр("ru = 'Обновляет данные регистра сведений ""Тарифы командировочных"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.6.32";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьВалютуКурсКратность_АвансовыйОтчет_Прочее";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b053415b-72c3-475b-8ba7-52665bd90764");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение валюты, курса и кратности в ТЧ ""Прочее"" документа ""Авансовый отчет"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.6.38";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьКодПлатежа";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8f1b66db-229b-4ecd-b328-6156f5c9d72f");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение кода платежа в документах ППИ.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.6.43";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьСуммыДохода";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("750f8efd-238e-4c8a-8b3a-48d4739b6c7c");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение сумм дохода в документах.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.46";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ВключитьИспользованиеДополнительныхРеквизитовИСведений";
	Обработчик.НачальноеЗаполнение = Ложь;          
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.6.48";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьРегистрыОтчетаПоНДС";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4428cdf7-6351-4fd1-be76-b25257474307");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение РС ""РеестрПриобретенныхМатериальныхРесурсов"" и РН ""ДанныеДляОтчетаРеестрВвезенных"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.6.49";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьВидДеятельности";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b3b80a86-baae-4f24-83c9-d93b1852e040");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение вида деятельности (для организаций-плательщиков единого налога).'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.7.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ИспользоватьСтатьиДвиженияДенежныхСредств";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b5bdd1fa-68f3-4ece-b287-80329492c204");
	Обработчик.Комментарий = НСтр("ru = 'Установка использования статьи движения денежных средств.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.7.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновлениеСтранМира";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2739594c-b699-4bdb-9f86-491b0db52c76");
	Обработчик.Комментарий = НСтр("ru = 'Обновление предопределенных элементов стран мира.'");
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
		
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "ПредыдущееИмяКонфигурацииБазовая" Тогда
		Параметры.ВерсияКонфигурации = ПредыдущаяВерсияКонфигурации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение пустой ИБ

// Процедура заполняет пустую ИБ.
//
Процедура ПервыйЗапуск() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	// В новой базе устанавливается режим интерфейса "Такси"
	Константы.ИнтерфейсТакси.Установить(Истина);
	Константы.ИнтерфейсВерсии82.Установить(Ложь);
	Константы.НеВестиУчетПоОрганизациям.Установить(Истина);

	////////////////////////////////////////////////////////////////////////////////
	// Параметры учета и план счетов
	ЗаполнитьПараметрыУчета();
	
	////////////////////////////////////////////////////////////////////////////////
	// Подсистема Банк/Касса
	ЗаполнитьДанныеПоПодсистемеБанкКасса();
	
	////////////////////////////////////////////////////////////////////////////////	
	// Подсистема Основные средства
	ЗаполнитьДанныеПоПодсистемеОсновныеСредства();
	
	////////////////////////////////////////////////////////////////////////////////
	// Подсистема Заработная плата
	ЗаполнитьДанныеПоЗаработнойПлате();

	// Налоги
	ЗаполнитьДанныеНалогообложения();
	
	// Регламентированная отчетность.
	Справочники.НастройкиРегламентированныхОтчетов.ЗаполнитьПоУмолчанию();
	
КонецПроцедуры // ПервыйЗапуск()

////////////////////////////////////////////////////////////////////////////////
// Обновление ИБ

// Демонстрирует процедуру-обработчик обновления данных ИБ, 
// которая выполняется каждый раз при смене версии конфигурации.
//
Процедура ВыполнятьВсегдаПриСменеВерсии(Параметры = Неопределено) Экспорт
	
	// Проверка необходимости обновления критичных общих данных
	ТребуетсяОбновитьКритичныеОбщиеДанные = Ложь;
	// Конец Проверка необходимости обновления критичных общих данных
	Если ТребуетсяОбновитьКритичныеОбщиеДанные Тогда
		Если Параметры <> Неопределено И НЕ Параметры.МонопольныйРежим Тогда
			Параметры.МонопольныйРежим = Истина;
			Возврат;
		КонецЕсли;
		// Код обновления критичных общих данных
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьДатуТекущейВерсии() Экспорт
	Константы.ДатаТекущейВерсии.Установить(Дата(2018,4,23));
КонецПроцедуры

// Обновляет значения реквизитов предопределенных видов контактной информации
//
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформации() Экспорт
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	// Организации
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ЮрАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ФактАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Факс");
	ПараметрыВида.Вид = "ФаксОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 4;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "EmailОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 5;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ПочтовыйАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 6;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Другое");
	ПараметрыВида.Вид = "ДругаяИнформацияОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 7;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
		
	// Контрагенты
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ЮрАдресКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ФактАдресКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Факс");
	ПараметрыВида.Вид = "ФаксКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 4;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "EmailКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 5;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ПочтовыйАдресКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 6;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Физические Лица
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "АдресМестаПроживанияФизическиеЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "АдресПоПропискеФизическиеЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонДомашнийФизическиеЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонРабочийФизическиеЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 4;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры // ВключитьМножественныйВводКонтактнойИнформации()

#КонецОбласти

#Область ОбработчикиПервогоЗапуска

// Заполняет данные параметров учета
//
Процедура ЗаполнитьПараметрыУчета()

	// Добавление организации.
	Справочники.Организации.ЗаполнитьПоУмолчанию();
	
	// Заполнение плана счетов.
	ПланыСчетов.Хозрасчетный.ЗаполнитьПоУмолчанию();	
	
	// Заполнение справочника ГНС
	Справочники.ГНС.ЗаполнитьПоУмолчанию();
		
	// Заполнение справочника Классификатор единиц измерения
	Справочники.КлассификаторЕдиницИзмерения.ЗаполнитьПоУмолчанию();
	
	// Заполнение счетов учета номенклатуры
	РегистрыСведений.СчетаУчетаНоменклатуры.ЗаполнитьПоУмолчанию();
	РегистрыСведений.СчетаРасчетовСКонтрагентами.ЗаполнитьПоУмолчанию();
		
	Константы.ФункциональнаяОпцияУчетПоНесколькимОрганизациям.Установить(Ложь);
	Константы.МакетОформленияОтчетов.Установить("Основной");
	Константы.КонтролироватьОстаткиПриПроведении.Установить(Истина);
	Константы.ФункциональнаяОпцияДопРасходыНаОдноПоступление.Установить(Истина);
	Константы.ИспользоватьСтатьиДвиженияДенежныхСредств.Установить(Истина);
	
	// Прочее.
	Справочники.СтраныМира.ЗаполнитьПоУмолчанию();

КонецПроцедуры // ЗаполнитьПараметрыУчета()  

// Заполняет данные по подсиситеме Банк/Касса
//
Процедура ЗаполнитьДанныеПоПодсистемеБанкКасса()
	// Заполнение справочника "Валюты" 
	Справочники.Валюты.ЗаполнитьПоУмолчанию();
	
	// Добавление национальной валюты
	НациональнаяВалютаСсылка = Справочники.Валюты.НайтиПоКоду("417");	
	Константы.ВалютаРегламентированногоУчета.Установить(НациональнаяВалютаСсылка);
			
	// РС Курсы валют на 01.01.2015
	РегистрыСведений.КурсыВалют.ЗаполнитьПоУмолчанию();
	
	// Добавление касс 
	Справочники.Кассы.ЗаполнитьПоУмолчанию();
	
	// Заполнение справочника "Статьи ДДС"
	Справочники.СтатьиДвиженияДенежныхСредств.ЗаполнитьПоУмолчанию();
	
	// Заполнение справочника "Виды статей"
	Справочники.ВидыЗатрат.ЗаполнитьПоУмолчанию();
	
	// Заполнение справочника "ТипыЦенНоменклатуры"
	Справочники.ТипыЦенНоменклатуры.ЗаполнитьПоУмолчанию();
	
КонецПроцедуры // ЗаполнитьДанныеПоПодсистемеОсновныеСредства()

// Заполняет данные по подсиситеме ЗаработнойПлаты
//
Процедура ЗаполнитьДанныеПоЗаработнойПлате()
	Справочники.МетодыРасчетаОтпуска.ЗаполнитьПоУмолчанию();
	Справочники.Статусы.ЗаполнитьПоУмолчанию();
	
	Справочники.СтрокиОтчетаПН.ЗаполнитьПоУмолчанию();

	Справочники.СтрокиОтчетаПоСФКвартальному.ЗаполнитьПоУмолчанию();
	
	Справочники.СтатьиТрудовогоКодекса.ЗаполнитьПоУмолчанию();
	
	Справочники.СостояниеВБраке.ЗаполнитьПоУмолчанию();
	Справочники.СтепениЗнанияЯзыка.ЗаполнитьПоУмолчанию();
	Справочники.СтепениРодстваФизическихЛиц.ЗаполнитьПоУмолчанию();
	Справочники.УченыеЗвания.ЗаполнитьПоУмолчанию();
	Справочники.УченыеСтепени.ЗаполнитьПоУмолчанию();
	Справочники.Города.ЗаполнитьПоУмолчанию();
	
	РегистрыСведений.НормыБольничныхЛистов.ЗаполнитьПоУмолчанию();
	РегистрыСведений.ТарифыКомандировочных.ЗаполнитьПоУмолчанию();
	РегистрыСведений.УчетнаяПолитикаПоПерсоналу.ЗаполнитьПоУмолчанию();
	РегистрыСведений.СчетаУчетаЗП.ЗаполнитьПоУмолчанию();
КонецПроцедуры // ЗаполнитьДанныеПоПодсистемеОсновныеСредства()

// Заполняет данные по Налогообложению
//
Процедура ЗаполнитьДанныеНалогообложения()
	РегистрыСведений.СтавкиНДС.ЗаполнитьПоУмолчанию();
	РегистрыСведений.СтавкиНСП.ЗаполнитьПоУмолчанию();
КонецПроцедуры // ЗаполнитьДанныеНалогообложения()

// Заполняет данные по подсиситеме Основные средства
//
Процедура ЗаполнитьДанныеПоПодсистемеОсновныеСредства()

	// Заполнение справочника ГруппыНалоговогоУчетаОС
	Справочники.ГруппыНалоговогоУчетаОС.ЗаполнитьПоУмолчанию();
	
	// Заполнение справочника ГруппыИмущества
	Справочники.ГруппыИмущества.ЗаполнитьПоУмолчанию();
	
	// Заполнение справочника ВидыМатериаловСтен
	Справочники.ВидыМатериаловСтенНалогНаИмущество.ЗаполнитьПоУмолчанию(); 
	
	// Заполнение справочника ВидыТранспортаНалогНаИмущество
	Справочники.ВидыТранспортаНалогНаИмущество.ЗаполнитьПоУмолчанию();
	
	// Заполнение справочника СпособыОтраженияРасходовПоАмортизации
	Справочники.СпособыОтраженияРасходовПоАмортизации.ЗаполнитьПоУмолчанию();
	
КонецПроцедуры // ЗаполнитьДанныеПоПодсистемеОсновныеСредства()

#КонецОбласти

#Область ОбработчикиСозданиеПользователей

// Процедура инициализации пользователей конфигурации. 
//
Процедура ИнициализироватьПользователей() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	//// Добавление администратора (администратор системы - полные права).
	//Пользователи.СоздатьАдминистратора();
	//
	//// Добавление пользователя.
	//ДобавитьПользователя(НСтр("ru = 'Пользователь'"));
	
КонецПроцедуры

Процедура ДобавитьПользователя(ПолноеИмяПользователя, ИмяПользователяИБ = Неопределено)
	
	Если ИмяПользователяИБ = Неопределено Тогда
		ИмяПользователяИБ = ПолноеИмяПользователя;
	КонецЕсли;
	
	ЗаписатьПользователя = Ложь;
	
	Пользователь = Справочники.Пользователи.НайтиПоНаименованию(ПолноеИмяПользователя);
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		ЗаписатьПользователя = Истина;
		ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент();
		ПользовательОбъект.Наименование = ПолноеИмяПользователя;
	КонецЕсли;
	
	ЗаписатьПользователяИБ = Ложь;
	ВозможноЗаписатьПользователяИБ = Истина;
	ВозможноПривязатьПользователяИБ = Ложь;
	ОписаниеПользователяИБ = Новый Структура;
	
	Если ЗначениеЗаполнено(Пользователь.ИдентификаторПользователяИБ) Тогда
		УчетнаяЗапись = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			Пользователь.ИдентификаторПользователяИБ);
	КонецЕсли;
	
	Если УчетнаяЗапись = Неопределено Тогда
		УчетнаяЗапись = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
		
		Если УчетнаяЗапись = Неопределено Тогда
			ЗаписатьПользователяИБ = Истина;
			ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
			
		ИначеЕсли Пользователи.ПользовательИБЗанят(УчетнаяЗапись) Тогда
			// Пользователь ИБ с указанным именем уже существует и занят,
			// возможно записать только пользователя справочника.
			ВозможноЗаписатьПользователяИБ = Ложь;
		Иначе
			// Пользователь ИБ с указанным именем уже существует и не занят,
			// возможно привязать пользователя ИБ к пользователю справочника.
			ЗаписатьПользователяИБ = Истина;
			ВозможноПривязатьПользователяИБ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ВозможноЗаписатьПользователяИБ Тогда
		
		Если ВозможноПривязатьПользователяИБ Тогда
			
			ОписаниеПользователяИБ.Вставить(
				"УникальныйИдентификатор", УчетнаяЗапись.УникальныйИдентификатор);
		КонецЕсли;
		
		Если УчетнаяЗапись = Неопределено Тогда
			ОписаниеПользователяИБ.Вставить("Имя",       ИмяПользователяИБ);
			ОписаниеПользователяИБ.Вставить("ПолноеИмя", ПолноеИмяПользователя);
			ОписаниеПользователяИБ.Вставить("АутентификацияСтандартная", Истина);
			ОписаниеПользователяИБ.Вставить("ПоказыватьВСпискеВыбора", Истина);
			
		ИначеЕсли УчетнаяЗапись.ПолноеИмя <> ПолноеИмяПользователя Тогда
			ЗаписатьПользователяИБ = Истина;
			УчетнаяЗапись.ПолноеИмя = ПолноеИмяПользователя;
		КонецЕсли;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
	КонецЕсли;
	
	Если ЗаписатьПользователя
	 ИЛИ ЗаписатьПользователяИБ Тогда
		
		Если ЗначениеЗаполнено(Пользователь) Тогда
			ПользовательОбъект = Пользователь.ПолучитьОбъект();
		КонецЕсли;
		
		Если ЗаписатьПользователяИБ Тогда
			ПользовательОбъект.ДополнительныеСвойства.Вставить(
				"ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		КонецЕсли;
		
		ПользовательОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбновления

#Область Обновление_3_0_3_9

Процедура ИзменитьСубконтоСчетовПроизводства(Параметры) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка,
		|	Хозрасчетный.Код
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Код = ""1630""
		|	ИЛИ Хозрасчетный.Код = ""1640""";
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыЗначений Из ТЗ Цикл
		ПланСчетовОбъект = СтрокаТаблицыЗначений.Ссылка.ПолучитьОбъект();
		
		Если СтрокаТаблицыЗначений.Код = "1630" Тогда
			ПланСчетовОбъект.ВидыСубконто[0].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
			ПланСчетовОбъект.ВидыСубконто[1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
			ПланСчетовОбъект.ВидыСубконто[2].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
		Иначе
			ПланСчетовОбъект.ВидыСубконто[0].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
			ПланСчетовОбъект.ВидыСубконто[1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
			ПланСчетовОбъект.ВидыСубконто[2].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
		КонецЕсли;	
			
		Попытка
			ПланСчетовОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось изменить субконто.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось изменить субконто по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;

КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_4_30

Процедура ИзменитьРазделУчетаВВодОстатков(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводНачальныхОстатков.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
		|ГДЕ
		|	ВводНачальныхОстатков.РазделУчета = ""Товары""
		|	И НЕ ВводНачальныхОстатков.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ДокументОбъект.РазделУчета = "Запасы";
		
		Попытка
			ДокументОбъект.Записать();	
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись документа по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_4_36

Процедура ЗаполнитьОсновныеДоговорыКонтрагента(Параметры) Экспорт

	НаборЗаписей = РегистрыСведений.ОсновныеДоговорыКонтрагента.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.ОсновнойДоговорКонтрагента.Организация КАК Организация,
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Контрагенты.ОсновнойДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
		|	Контрагенты.ОсновнойДоговорКонтрагента КАК Договор
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.ОсновнойДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();	
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись основных договоров контрагента по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;

	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_4_51

Процедура ОчиститьРегистрСостоянияЗаказов(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостояниеЗаказов.Регистратор
		|ИЗ
		|	РегистрСведений.СостояниеЗаказов КАК СостояниеЗаказов";	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	НаборЗаписей = РегистрыСведений.СостояниеЗаказов.СоздатьНаборЗаписей();
		
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);	
		НаборЗаписей.Записать();		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_4_59

Процедура УстановитьДопРасходыНаОдноПоступление(Параметры) Экспорт
	Константы.ФункциональнаяОпцияДопРасходыНаОдноПоступление.Установить(Ложь);
	Константы.ФункциональнаяОпцияДопРасходыНаНесколькоПоступлений.Установить(Истина);
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_5_2

Процедура СнятьПометкуСНепредоределенныхЭлементов(Параметры) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СправочникОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();	
		СправочникОбъект.УстановитьПометкуУдаления(Ложь);
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_5_9

Процедура УстановитьЗначениеКонстантыНеВестиУчетПоОрганизациям(Параметры) Экспорт
	УчетПоНесколькимОрганизациям = Константы.ФункциональнаяОпцияУчетПоНесколькимОрганизациям.Получить();
	Константы.НеВестиУчетПоОрганизациям.Установить(Не УчетПоНесколькимОрганизациям);
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_5_11

Процедура ЗаполнитьСписокСтран(Параметры) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтраныМира.Ссылка КАК Ссылка,
		|	СтраныМира.Код КАК Код
		|ИЗ
		|	Справочник.СтраныМира КАК СтраныМира
		|ГДЕ
		|	СтраныМира.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СправочникОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();	
		СправочникОбъект.УстановитьПометкуУдаления(Ложь);
	КонецЦикла;
	
	ВыборкаДетальныеЗаписи = Справочники.СтраныМира.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Код = "398"
			Или ВыборкаДетальныеЗаписи.Код = "643"  
			Или ВыборкаДетальныеЗаписи.Код = "417"  
			Или ВыборкаДетальныеЗаписи.Код = "051"  
			Или ВыборкаДетальныеЗаписи.Код = "112" Тогда 
			
			СправочникОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();	

			СправочникОбъект.УчастникЕАЭС = Истина;
			БухгалтерскийУчетКлиентСервер.ЗаписатьСправочникОбъект(СправочникОбъект,,,,Истина);
		КонецЕсли;	                                                                           	
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_5_13

Процедура ДобавитьЭлементПроверкиУчета(Параметры) Экспорт

	КонтрольВеденияУчетаСлужебный.ОбновитьВспомогательныеДанныеПоИзменениямКонфигурации();
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_5_20

Процедура ЗаполнитьСубконтоСчета_ОсновноеПроизводство(Параметры) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Код = ""1630""";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПланСчетовОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ПланСчетовОбъект.ВидыСубконто.Количество() = 0 Тогда			
			МассивСубконто = Новый Массив();
			МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
			МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
			МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
			
			Для Каждого СтрокаМассива Из МассивСубконто Цикл
				СтрокаТабличнойЧасти = ПланСчетовОбъект.ВидыСубконто.Добавить();
				СтрокаТабличнойЧасти.ВидСубконто = СтрокаМассива;
				СтрокаТабличнойЧасти.Суммовой = Истина;
			КонецЦикла;	
			
			Попытка
				ПланСчетовОбъект.Записать();
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось заполнить субконто.
				|Техническая информация об ошибке: %1'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
				#Если Сервер Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось заполнить субконто по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				#КонецЕсли
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;

КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_5_26

Процедура РедактированиеНаименованийСчетовИУдалениеСубконто(Параметры) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка,
		|	Хозрасчетный.Код
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Код = ""2194""
		|	ИЛИ Хозрасчетный.Код = ""2195""
		|	ИЛИ Хозрасчетный.Код = ""2196""
		|	ИЛИ Хозрасчетный.Код = ""2197""
		|	ИЛИ Хозрасчетный.Код = ""2198""
		|	ИЛИ Хозрасчетный.Код = ""2199""
		|	ИЛИ Хозрасчетный.Код = ""2120""
		|	ИЛИ Хозрасчетный.Код = ""2500""
		|	ИЛИ Хозрасчетный.Код = ""8100""";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПланСчетовОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Выборка.Код = "8100" Тогда
			ПланСчетовОбъект.ВидыСубконто.Очистить();
			
		ИначеЕсли Выборка.Код = "2120" Тогда
			ПланСчетовОбъект.ВидыСубконто.Очистить();
			ПланСчетовОбъект.Наименование = "Строительство, монтаж и модернизация ОС";
			
		ИначеЕсли Выборка.Код = "2500" Тогда
			ПланСчетовОбъект.Наименование = "Денежные средства, ограниченные к использованию";
			
		ИначеЕсли Выборка.Код = "2194" Тогда
			ПланСчетовОбъект.Наименование = "Амортизация - оборудование";
			
		ИначеЕсли Выборка.Код = "2195" Тогда
			ПланСчетовОбъект.Наименование = "Амортизация - конторское оборудование";
			
		ИначеЕсли Выборка.Код = "2196" Тогда
			ПланСчетовОбъект.Наименование = "Амортизация - мебель и принадлежности";
			
		ИначеЕсли Выборка.Код = "2197" Тогда
			ПланСчетовОбъект.Наименование = "Амортизация - транспортные средства";
			
		ИначеЕсли Выборка.Код = "2198" Тогда
			ПланСчетовОбъект.Наименование = "Амортизация - благоустройство арендованной собственности";
			
		ИначеЕсли Выборка.Код = "2199" Тогда
			ПланСчетовОбъект.Наименование = "Амортизация - благоустройство земльных участков";
		КонецЕсли;	
	
			
		Попытка
			ПланСчетовОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось заполнить субконто.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось заполнить субконто по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;

КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_5_27

Процедура ОбновитьРегистрСведенияОПоступлении(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОПоступлении.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.СведенияОПоступлении КАК СведенияОПоступлении";	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	НаборЗаписей = РегистрыСведений.СведенияОПоступлении.СоздатьНаборЗаписей();
		
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого СтрокаНабора Из НаборЗаписей Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаНабора.Контрагент) Тогда
				СтрокаНабора.Контрагент = СтрокаНабора.УдалитьКонтрагент;
			КонецЕсли;			
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать строку регитсра.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось аписать строку регитсра по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_5_28

// Заполнение регистра "Данные первичных документов
//
Процедура ЗаполнениеРеквизитовПервичныхДокументов() Экспорт
	
	// Документы, у которых нет реквизитов вх.номер и вх.дата
	РасчетныеДокументы = Новый Массив;
	РасчетныеДокументы.Добавить("АвансовыйОтчет");
	РасчетныеДокументы.Добавить("АктСверкиВзаиморасчетов");
	РасчетныеДокументы.Добавить("БольничныйЛист");
	РасчетныеДокументы.Добавить("ВводНачальныхОстатков");
	РасчетныеДокументы.Добавить("ВозвратТоваровОтПокупателя");
	РасчетныеДокументы.Добавить("ВозвратТоваровПоставщику");
	РасчетныеДокументы.Добавить("ГТДПоИмпорту");
	РасчетныеДокументы.Добавить("ДвижениеМБП");
	РасчетныеДокументы.Добавить("Доверенность");
	РасчетныеДокументы.Добавить("ДополнительныеРасходы");
	РасчетныеДокументы.Добавить("ЗаказНаПроизводство");
	РасчетныеДокументы.Добавить("ЗакрытиеЗаказовНаПроизводство");
	РасчетныеДокументы.Добавить("КассоваяСмена");
	РасчетныеДокументы.Добавить("МодернизацияОС");
	РасчетныеДокументы.Добавить("НачислениеЗарплаты");
	РасчетныеДокументы.Добавить("ОперацияБух");
	РасчетныеДокументы.Добавить("ОприходованиеТоваров");
	РасчетныеДокументы.Добавить("ПеремещениеОС");
	РасчетныеДокументы.Добавить("ПеремещениеТоваров");
	РасчетныеДокументы.Добавить("ПлатежноеПоручениеВходящее");
	РасчетныеДокументы.Добавить("ПлатежноеПоручениеИсходящее");
	РасчетныеДокументы.Добавить("ПлатежныйОрдерСписаниеДС");
	РасчетныеДокументы.Добавить("ПоступлениеТоваровУслуг");
	РасчетныеДокументы.Добавить("ПринятиеКУчетуОС");
	РасчетныеДокументы.Добавить("ПриходныйКассовыйОрдер");
	РасчетныеДокументы.Добавить("РасходныйКассовыйОрдер");
	РасчетныеДокументы.Добавить("РеализацияТоваровУслуг");
	РасчетныеДокументы.Добавить("СписаниеОС");
	РасчетныеДокументы.Добавить("СписаниеТоваров");
	РасчетныеДокументы.Добавить("СчетНаОплатуПокупателю");
	РасчетныеДокументы.Добавить("СчетНаОплатуПоставщика");
	РасчетныеДокументы.Добавить("СчетФактураПолученный");

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации";
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	МассивОрганизаций = РезультатЗапроса.ВыгрузитьКолонку("Организация");
	
	// Обработка исходящих или расчетных документов
	Для Каждого РасчетныйДокумент ИЗ РасчетныеДокументы Цикл
		РеквизитыДокументов = ПолучитьРеквизитыДокументов(МассивОрганизаций, РасчетныйДокумент);
		ЗаписатьРеквизитыДокументов(РеквизитыДокументов);
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьРеквизитыДокументов(МассивОрганизаций, ТипДокумента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументРасчетов.Организация КАК Организация,
		|	ДокументРасчетов.Ссылка КАК Документ,
		|	ДокументРасчетов.Дата КАК Дата,
		|	ДокументРасчетов.Номер КАК Номер,
		|	ДокументРасчетов.Дата КАК ДатаРегистратора,
		|	ДокументРасчетов.Номер КАК НомерРегистратора
		|ИЗ
		|	Документ.ДокументРасчетов КАК ДокументРасчетов
		|ГДЕ
		|	ДокументРасчетов.Организация В(&МассивОрганизаций)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДокументРасчетов", ТипДокумента); 
		
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗаписатьРеквизитыДокументов(ВыборкаДокументов)
		
	Пока ВыборкаДокументов.Следующий() Цикл
		МенеджерЗаписиРегистра = РегистрыСведений.ДанныеПервичныхДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписиРегистра.Прочитать();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписиРегистра, ВыборкаДокументов);		
		МенеджерЗаписиРегистра.Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокументов.Номер, Истина, Ложь);
		
		Попытка
			МенеджерЗаписиРегистра.Записать();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось зарегистрировать данные документа
	                               |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				,
				ВыборкаДокументов.Документ,
				ТекстСообщения);
		КонецПопытки;
        		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_6_6

Процедура ДобавитьСубконтоСчету_8100(Параметры) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Код = ""8100""";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПланСчетовОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ПланСчетовОбъект.ВидыСубконто.Очистить();	
		
		СтрокаТабличнойЧасти = ПланСчетовОбъект.ВидыСубконто.Добавить();
		СтрокаТабличнойЧасти.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
		СтрокаТабличнойЧасти.ТолькоОбороты = Истина;
		СтрокаТабличнойЧасти.Суммовой = Истина;
		
		Попытка
			ПланСчетовОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось заполнить субконто.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось заполнить субконто по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_6_10

Процедура ЗаполнитьРегистрСведенийСтавкиНДС(Параметры) Экспорт

	РегистрыСведений.СтавкиНДС.ЗаполнитьПоУмолчанию();
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_6_13

Процедура ОбновитьВедомостьЗаработнойПлаты(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.удалитьВидВедомости = ЗНАЧЕНИЕ(Перечисление.удалитьВидыВедомости.Все)
		|			ТОГДА 1
		|		КОГДА ТаблицаДокумента.удалитьВидВедомости = ЗНАЧЕНИЕ(Перечисление.удалитьВидыВедомости.Касса)
		|			ТОГДА 2
		|		КОГДА ТаблицаДокумента.удалитьВидВедомости = ЗНАЧЕНИЕ(Перечисление.удалитьВидыВедомости.Банк)
		|			ТОГДА 3
		|		КОГДА ТаблицаДокумента.удалитьВидВедомости = ЗНАЧЕНИЕ(Перечисление.удалитьВидыВедомости.ЗППроект)
		|			ТОГДА 4
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ВидВедомости,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.удалитьВидДокументаВыплаты = ЗНАЧЕНИЕ(Перечисление.удалитьВидыДокументовВыплаты.Общий)
		|			ТОГДА 1
		|		КОГДА ТаблицаДокумента.удалитьВидДокументаВыплаты = ЗНАЧЕНИЕ(Перечисление.удалитьВидыДокументовВыплаты.Индивидуально)
		|			ТОГДА 2
		|		КОГДА ТаблицаДокумента.удалитьВидДокументаВыплаты = ЗНАЧЕНИЕ(Перечисление.удалитьВидыДокументовВыплаты.Подотчет)
		|			ТОГДА 3
		|		КОГДА ТаблицаДокумента.удалитьВидДокументаВыплаты = ЗНАЧЕНИЕ(Перечисление.удалитьВидыДокументовВыплаты.ППИ)
		|			ТОГДА 4
		|		КОГДА ТаблицаДокумента.удалитьВидДокументаВыплаты = ЗНАЧЕНИЕ(Перечисление.удалитьВидыДокументовВыплаты.АвансовыйОтчет)
		|			ТОГДА 5
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ВидДокументаВыплаты
		|ИЗ
		|	Документ.ВедомостьЗаработнойПлаты КАК ТаблицаДокумента
		|ГДЕ
		|	НЕ ТаблицаДокумента.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ВидВедомости = ВыборкаДетальныеЗаписи.ВидВедомости;
		ДокументОбъект.ВидДокументаВыплаты = ВыборкаДетальныеЗаписи.ВидДокументаВыплаты;
		
		// Попытка
		Попытка
			ДокументОбъект.Записать();	
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить Запись по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_6_22

Процедура ЗаполнитьСчетаУчетаЗП(Параметры) Экспорт

	РегистрСведенийМенеджер = РегистрыСведений.СчетаУчетаЗП;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетаУчетаЗП.удалитьВидРасчетаУдержания КАК удалитьВидРасчетаУдержания
		|ИЗ
		|	РегистрСведений.СчетаУчетаЗП КАК СчетаУчетаЗП
		|ГДЕ
		|	НЕ СчетаУчетаЗП.удалитьВидРасчетаУдержания = ЗНАЧЕНИЕ(ПланВидовРасчета.ВидыУдержаний.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Очистить записи по полю удалитьВидРасчетаУдержания.
		НаборЗаписей = РегистрСведенийМенеджер.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.удалитьВидРасчетаУдержания.Установить(ВыборкаДетальныеЗаписи.удалитьВидРасчетаУдержания);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись счетов учета отражения заработной платы по причине: %1'"), 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	// Добавление новой записи.
	КлассификаторXML = РегистрСведенийМенеджер.ПолучитьМакет("МакетЗаполнения").ПолучитьТекст();
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	НаборЗаписей = РегистрСведенийМенеджер.СоздатьНаборЗаписей();
	
	Для Каждого СтрокаТаблицыЗначений Из КлассификаторТаблица Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.СчетУчетаЗатрат = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаТаблицыЗначений.СчетУчетаЗатрат);
		НоваяЗапись.СчетУчетаЗатратСоцОтчисления = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаТаблицыЗначений.СчетУчетаЗатратСоцОтчисления);
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись счетов учета отражения заработной платы по причине: %1'"), 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_6_30

Процедура ОбновитьУстановкаТарифовКомандировочных(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УстановкаТарифовКомандировочных.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.УстановкаТарифовКомандировочных КАК УстановкаТарифовКомандировочных
		|ГДЕ
		|	УстановкаТарифовКомандировочных.Проведен";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить обновление данных регистра сведений ""Тарифы командировочных"" по причине: %1'"), 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_6_32

Процедура ЗаполнитьВалютуКурсКратность_АвансовыйОтчет_Прочее(Параметры) Экспорт

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АвансовыйОтчетПрочее.Ссылка КАК Ссылка,
		|	АвансовыйОтчетПрочее.Ссылка.Проведен КАК Проведен
		|ИЗ
		|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее";
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Прочее Цикл
			СтрокаТабличнойЧасти.Валюта 	= ВалютаРегламентированногоУчета;
			СтрокаТабличнойЧасти.Курс 		= 1;
			СтрокаТабличнойЧасти.Кратность 	= 1;
		КонецЦикла;	
		
		Если Выборка.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;	
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписи);	
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;	
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_6_38

Процедура ЗаполнитьКодПлатежа(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлатежноеПоручениеИсходящее.Ссылка КАК Ссылка,
		|	ПлатежноеПоручениеИсходящее.удалитьКодНазначенияПлатежа.Код КАК КодПлатежа
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
		|ГДЕ
		|	НЕ ПлатежноеПоручениеИсходящее.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ДокументОбъект.КодПлатежа = ВыборкаДетальныеЗаписи.КодПлатежа;
		
		Попытка
			ДокументОбъект.Записать();	
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;	
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_6_43

Процедура ЗаполнитьСуммыДохода(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК ТаблицаДокумента
		|ГДЕ
		|	НЕ ТаблицаДокумента.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ТаблицаДокумента
		|ГДЕ
		|	НЕ ТаблицаДокумента.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка
		|ИЗ
		|	Документ.СчетФактураВыписанный КАК ТаблицаДокумента
		|ГДЕ
		|	НЕ ТаблицаДокумента.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();

		Если ТипЗнч(ВыборкаДетальныеЗаписи.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда 
			Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл 
				СтрокаТабличнойЧасти.СуммаДохода = СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.СуммаНДС - СтрокаТабличнойЧасти.СуммаНСП;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ВыборкаДетальныеЗаписи.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда	
			Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл 
				СтрокаТабличнойЧасти.СуммаДохода = СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.СуммаНДС - СтрокаТабличнойЧасти.СуммаНСП;
			КонецЦикла;
			Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Услуги Цикл 
				СтрокаТабличнойЧасти.СуммаДохода = СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.СуммаНДС - СтрокаТабличнойЧасти.СуммаНСП;
			КонецЦикла;
			Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.ОС Цикл 
				СтрокаТабличнойЧасти.СуммаДохода = СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.СуммаНДС - СтрокаТабличнойЧасти.СуммаНСП;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ВыборкаДетальныеЗаписи.Ссылка) = Тип("ДокументСсылка.СчетФактураВыписанный") Тогда	
			Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл 
				СтрокаТабличнойЧасти.СуммаДохода = СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.СуммаНДС - СтрокаТабличнойЧасти.СуммаНСП;
			КонецЦикла;
			Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.ДокументыОснования Цикл 
				СтрокаТабличнойЧасти.СуммаДохода = СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.СуммаНДС - СтрокаТабличнойЧасти.СуммаНСП;
			КонецЦикла;
		КонецЕсли;			
			
		Попытка
			ДокументОбъект.Записать();	
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;	
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_6_46

Процедура ВключитьИспользованиеДополнительныхРеквизитовИСведений() Экспорт
	ПараметрыИспользования = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_НоменклатурныеГруппы", ПараметрыИспользования);
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_6_48

Процедура ЗаполнитьРегистрыОтчетаПоНДС(Параметры) Экспорт

	// Очищение РС "РеестрПриобретенныхМатериальныхРесурсов".
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РеестрПриобретенныхМатериальныхРесурсов.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.РеестрПриобретенныхМатериальныхРесурсов КАК РеестрПриобретенныхМатериальныхРесурсов";	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.РеестрПриобретенныхМатериальныхРесурсов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Регистратор;
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;
	
	// Очищение РН "ДанныеДляОтчетаРеестрВвезенных".
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДляОтчетаРеестрВвезенных.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ДанныеДляОтчетаРеестрВвезенных КАК ДанныеДляОтчетаРеестрВвезенных";	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.ДанныеДляОтчетаРеестрВвезенных.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Регистратор;
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;
	
	// 1. Данные всех учетных политик по организации.
	// 2. Данные реквизитов шапки из док. "Авансовый отчет".	
	// 3. Данные проведенных документов "Авансовый отчет" для перезаписи.
	// 4. Док. "Авансовый отчет" - данные для РС "РеестрПриобретенныхМатериальныхРесурсов".
	// 5. Данные реквизитов шапки из док. "Возврат товаров поставщику".
	// 6. Данные проведенных документов "Возврат товаров поставщику" для перезаписи.
	// 7. Данные 5 пакета + данные 1 пакета.
	// 8. Данные 7 пакета + данные ТЧ "Товары" док. "Возврат товаров поставщику".
	// 9. Док. "Возврат товаров поставщику" - данные для РС "РеестрПриобретенныхМатериальныхРесурсов"
	// 10. Док. "Возврат товаров поставщику" - данные для РН "ДанныеДляОтчетаРеестрВвезенных".
	// 11. Данные реквизитов шапки из док. "ГТД по импорту" + данные 1 пакета.
	// 12. Данные 11 пакета + данные из ТЧ "Разделы" док. "ГТД по импорту" для - РН "ДанныеДляОтчетаРеестрВвезенных".	
	// 13. Данные реквизитов шапки из док. "Поступление товаров и услуг" + данные 1 пакета.
	// 14. Данные 13 пакета + данные всех трех ТЧ док. "Поступление товаров и услуг".
	// 15. Данные проведенных документов "Поступление товаров и услуг" для перезаписи.
	// 16. Док. "Поступление товаров и услуг" - данные для РН "ДанныеДляОтчетаРеестрВвезенных".
	// 17. Док. "Поступление товаров и услуг" - данные для РС "РеестрПриобретенныхМатериальныхРесурсов".
	// 18. Данные реквизитов шапки из док. "Счет фактура полученный" + данные 1 пакета.
	// 19. Данные 18 пакета + данные ТЧ "Товары" из док. "Счет фактура полученный" для - РС "РеестрПриобретенныхМатериальныхРесурсов".
	// 20. Готовые данные для записи в РС "РеестрПриобретенныхМатериальныхРесурсов".
	// 21. Готовые данные для записи в РН "ДанныеДляОтчетаРеестрВвезенных".
	Запрос = Новый Запрос;
	Запрос.Текст =
		// 1.
		"ВЫБРАТЬ
		|	УчетнаяПолитикаОрганизаций.УказыватьПризнакЗачетаНДСПриПоступлении КАК УказыватьПризнакЗачетаНДСПриПоступлении,
		|	УчетнаяПолитикаОрганизаций.Период КАК Период,
		|	УчетнаяПолитикаОрганизаций.Организация КАК Организация
		|ПОМЕСТИТЬ ВременнаяТаблицаУчетнаяПолитика
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// 2.
		|ВЫБРАТЬ
		|	АвансовыйОтчет.Ссылка КАК Ссылка,
		|	АвансовыйОтчет.Организация КАК Организация,
		|	АвансовыйОтчет.Дата КАК Дата,
		|	АвансовыйОтчет.Номер КАК Номер
		|ПОМЕСТИТЬ ВременнаяТаблицаАвансовыйОтчет
		|ИЗ
		|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
		|ГДЕ
		|	АвансовыйОтчет.Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// 3.
		|ВЫБРАТЬ
		|	АвансовыйОтчет.Ссылка,
		|	АвансовыйОтчет.Дата,
		|	АвансовыйОтчет.Номер
		|ИЗ
		|   ВременнаяТаблицаАвансовыйОтчет КАК АвансовыйОтчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// 4.
		|ВЫБРАТЬ
		|	АвансовыйОтчет.Ссылка КАК Регистратор,
		|	АвансовыйОтчет.Организация КАК Организация,
		|	АвансовыйОтчет.Ссылка КАК Документ,
		|	АвансовыйОтчетВладельцыПатентов.Контрагент КАК Контрагент,
		|	ВЫБОР
		|		КОГДА АвансовыйОтчетВладельцыПатентов.Контрагент.НаименованиеПолное = """"
		|			ТОГДА АвансовыйОтчетВладельцыПатентов.Контрагент.Наименование
		|		ИНАЧЕ АвансовыйОтчетВладельцыПатентов.Контрагент.НаименованиеПолное
		|	КОНЕЦ КАК КонтрагентНаименование,
		|	АвансовыйОтчетВладельцыПатентов.Контрагент.ИНН КАК ИННКонтрагента,
		|	АвансовыйОтчетВладельцыПатентов.Контрагент.ГНС.Код КАК КодГНСКонтрагента,
		|	АвансовыйОтчетВладельцыПатентов.ВидДокумента КАК СерияБланкаСФ,
		|	АвансовыйОтчетВладельцыПатентов.НомерДокумента КАК НомерБланкаСФ,
		|	АвансовыйОтчетВладельцыПатентов.ДатаДокумента КАК ДатаПоставки,
		|	СУММА(АвансовыйОтчетТоварыУслуги.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаАвансовыйОтчетРеестрПриобретенных
		|ИЗ
		|   ВременнаяТаблицаАвансовыйОтчет КАК АвансовыйОтчет
		|   	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ВладельцыПатентов КАК АвансовыйОтчетВладельцыПатентов
		|		ПО АвансовыйОтчет.Ссылка = АвансовыйОтчетВладельцыПатентов.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ТоварыУслуги КАК АвансовыйОтчетТоварыУслуги
		|		ПО АвансовыйОтчетВладельцыПатентов.Ссылка = АвансовыйОтчетТоварыУслуги.Ссылка
		|		И АвансовыйОтчетВладельцыПатентов.КлючСвязи = АвансовыйОтчетТоварыУслуги.КлючСвязи
		|ГДЕ
		|	АвансовыйОтчетВладельцыПатентов.Контрагент.ПризнакСтраны = ЗНАЧЕНИЕ(Перечисление.ПризнакиСтраны.КР)
		|	И АвансовыйОтчетТоварыУслуги.Сумма <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	АвансовыйОтчет.Организация,
		|	АвансовыйОтчет.Ссылка,
		|	АвансовыйОтчетВладельцыПатентов.Контрагент,
		|	ВЫБОР
		|		КОГДА АвансовыйОтчетВладельцыПатентов.Контрагент.НаименованиеПолное = """"
		|			ТОГДА АвансовыйОтчетВладельцыПатентов.Контрагент.Наименование
		|		ИНАЧЕ АвансовыйОтчетВладельцыПатентов.Контрагент.НаименованиеПолное
		|	КОНЕЦ,
		|	АвансовыйОтчетВладельцыПатентов.Контрагент.ГНС.Код,
		|	АвансовыйОтчетВладельцыПатентов.Контрагент.ИНН,
		|	АвансовыйОтчетВладельцыПатентов.ВидДокумента,
		|	АвансовыйОтчетВладельцыПатентов.НомерДокумента,
		|	АвансовыйОтчетВладельцыПатентов.ДатаДокумента	
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////	
		// 5.	    
		|ВЫБРАТЬ
		|	ВозвратТоваровПоставщику.Ссылка КАК Ссылка,
		|	ВозвратТоваровПоставщику.Номер КАК Номер,
		|	ВозвратТоваровПоставщику.Дата КАК Дата,
		|	ВозвратТоваровПоставщику.Организация КАК Организация,
		|	ВозвратТоваровПоставщику.Контрагент КАК Контрагент,
		|	ВозвратТоваровПоставщику.СерияБланкаСФ КАК СерияБланкаСФ,
		|	ВозвратТоваровПоставщику.НомерБланкаСФ КАК НомерБланкаСФ,
		|	ВозвратТоваровПоставщику.ДатаСФ КАК ДатаСФ,
		|	ВозвратТоваровПоставщику.ПризнакСтраны КАК ПризнакСтраны
		|ПОМЕСТИТЬ ВременнаяТаблицаВовратТоваровПоставщику
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|ГДЕ
		|	ВозвратТоваровПоставщику.Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////	
		// 6.	    
		|ВЫБРАТЬ
		|	ВозвратТоваровПоставщику.Ссылка КАК Ссылка,
		|	ВозвратТоваровПоставщику.ДатаСФ КАК ДатаСФ
		|ИЗ
		|	ВременнаяТаблицаВовратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// 7.
		|ВЫБРАТЬ
		|	ВозвратТоваровПоставщику.Ссылка КАК Ссылка,
		|	ВозвратТоваровПоставщику.Номер КАК Номер,
		|	ВозвратТоваровПоставщику.Дата КАК Дата,
		|	ВозвратТоваровПоставщику.Организация КАК Организация,
		|	ВозвратТоваровПоставщику.Контрагент КАК Контрагент,
		|	ВозвратТоваровПоставщику.СерияБланкаСФ КАК СерияБланкаСФ,
		|	ВозвратТоваровПоставщику.НомерБланкаСФ КАК НомерБланкаСФ,
		|	ВозвратТоваровПоставщику.ДатаСФ КАК ДатаСФ,
		|	ВозвратТоваровПоставщику.ПризнакСтраны КАК ПризнакСтраны,
		|	МАКСИМУМ(ВременнаяТаблицаУчетнаяПолитика.Период) КАК Период
		|ПОМЕСТИТЬ ВременнаяТаблицаВозвратМаксПериод
		|ИЗ
		|	ВременнаяТаблицаВовратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаУчетнаяПолитика КАК ВременнаяТаблицаУчетнаяПолитика
		|		ПО ВозвратТоваровПоставщику.Организация = ВременнаяТаблицаУчетнаяПолитика.Организация
		|			И ВозвратТоваровПоставщику.Дата >= ВременнаяТаблицаУчетнаяПолитика.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВозвратТоваровПоставщику.ПризнакСтраны,
		|	ВозвратТоваровПоставщику.Дата,
		|	ВозвратТоваровПоставщику.Организация,
		|	ВозвратТоваровПоставщику.ДатаСФ,
		|	ВозвратТоваровПоставщику.Контрагент,
		|	ВозвратТоваровПоставщику.Ссылка,
		|	ВозвратТоваровПоставщику.Номер,
		|	ВозвратТоваровПоставщику.НомерБланкаСФ,
		|	ВозвратТоваровПоставщику.СерияБланкаСФ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Ссылка,
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// 8.
		|ВЫБРАТЬ
		|	ВременнаяТаблицаВозвратМаксПериод.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаВозвратМаксПериод.Номер КАК Номер,
		|	ВременнаяТаблицаВозвратМаксПериод.Дата КАК Дата,
		|	ВременнаяТаблицаВозвратМаксПериод.Организация КАК Организация,
		|	ВременнаяТаблицаВозвратМаксПериод.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаВозвратМаксПериод.СерияБланкаСФ КАК СерияБланкаСФ,
		|	ВременнаяТаблицаВозвратМаксПериод.НомерБланкаСФ КАК НомерБланкаСФ,
		|	ВременнаяТаблицаВозвратМаксПериод.ДатаСФ КАК ДатаСФ,
		|	ВременнаяТаблицаВозвратМаксПериод.ПризнакСтраны КАК ПризнакСтраны,
		|	СУММА(ВозвратТоваровПоставщикуТовары.Сумма) КАК Сумма,
		|	СУММА(ВозвратТоваровПоставщикуТовары.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ВременнаяТаблицаУчетнаяПолитика.УказыватьПризнакЗачетаНДСПриПоступлении
		|					ИЛИ ВозвратТоваровПоставщикуТовары.ЗачетНДС <> ЗНАЧЕНИЕ(Перечисление.ВидыЗачетаНДС.Себестоимость)
		|				ТОГДА ВозвратТоваровПоставщикуТовары.СуммаНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаПодлежащаяКЗачетуНДС
		|ПОМЕСТИТЬ ВременнаяТаблицаВозврат
		|ИЗ
		|	ВременнаяТаблицаВозвратМаксПериод КАК ВременнаяТаблицаВозвратМаксПериод
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаУчетнаяПолитика КАК ВременнаяТаблицаУчетнаяПолитика
		|		ПО ВременнаяТаблицаВозвратМаксПериод.Организация = ВременнаяТаблицаУчетнаяПолитика.Организация
		|			И ВременнаяТаблицаВозвратМаксПериод.Период = ВременнаяТаблицаУчетнаяПолитика.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
		|		ПО ВременнаяТаблицаВозвратМаксПериод.Ссылка = ВозвратТоваровПоставщикуТовары.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаВозвратМаксПериод.Ссылка,
		|	ВременнаяТаблицаВозвратМаксПериод.Контрагент,
		|	ВременнаяТаблицаВозвратМаксПериод.ДатаСФ,
		|	ВременнаяТаблицаВозвратМаксПериод.НомерБланкаСФ,
		|	ВременнаяТаблицаВозвратМаксПериод.Дата,
		|	ВременнаяТаблицаВозвратМаксПериод.СерияБланкаСФ,
		|	ВременнаяТаблицаВозвратМаксПериод.Организация,
		|	ВременнаяТаблицаВозвратМаксПериод.ПризнакСтраны,
		|	ВременнаяТаблицаВозвратМаксПериод.Номер
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПризнакСтраны,
		|	СуммаНДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////	
		// 9.
		|ВЫБРАТЬ
		|	ВременнаяТаблицаВозврат.Ссылка КАК Регистратор,
		|	ВременнаяТаблицаВозврат.Ссылка КАК Документ,
		|	ВременнаяТаблицаВозврат.Организация КАК Организация,
		|	ВременнаяТаблицаВозврат.Контрагент КАК Контрагент,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаВозврат.Контрагент.НаименованиеПолное = """"
		|			ТОГДА ВременнаяТаблицаВозврат.Контрагент.Наименование
		|		ИНАЧЕ ВременнаяТаблицаВозврат.Контрагент.НаименованиеПолное
		|	КОНЕЦ КАК КонтрагентНаименование,
		|	ВременнаяТаблицаВозврат.Контрагент.ИНН КАК ИННКонтрагента,
		|	ВременнаяТаблицаВозврат.Контрагент.ГНС.Код КАК КодГНСКонтрагента,
		|	ВременнаяТаблицаВозврат.ДатаСФ КАК ДатаПоставки,
		|	ВременнаяТаблицаВозврат.СерияБланкаСФ КАК СерияБланкаСФ,
		|	ВременнаяТаблицаВозврат.НомерБланкаСФ КАК НомерБланкаСФ,
		|	-ВременнаяТаблицаВозврат.Сумма КАК Сумма,
		|	-ВременнаяТаблицаВозврат.СуммаНДС КАК СуммаНДС,
		|	-ВременнаяТаблицаВозврат.СуммаПодлежащаяКЗачетуНДС КАК СуммаПодлежащаяКЗачетуНДС
		|ПОМЕСТИТЬ ВременнаяТаблицаВозвратТоваровРеестрПриобретенных
		|ИЗ
		|	ВременнаяТаблицаВозврат КАК ВременнаяТаблицаВозврат
		|ГДЕ
		|	ВременнаяТаблицаВозврат.ПризнакСтраны = ЗНАЧЕНИЕ(Перечисление.ПризнакиСтраны.КР)
	    |;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// 10.
		|ВЫБРАТЬ
		|	ВременнаяТаблицаВозврат.Ссылка КАК Регистратор,
		|	ВременнаяТаблицаВозврат.Дата КАК Период,
		|	ВременнаяТаблицаВозврат.Номер КАК Номер,
		|	ВременнаяТаблицаВозврат.Организация КАК Организация,
		|	ВременнаяТаблицаВозврат.Контрагент КАК Контрагент,
		|	-ВременнаяТаблицаВозврат.СуммаНДС КАК СуммаНДС,
		|	-ВременнаяТаблицаВозврат.СуммаПодлежащаяКЗачетуНДС КАК СуммаПодлежащаяКЗачетуНДС
		|ПОМЕСТИТЬ ВременнаяТаблицаВозвратТоваровРеестрВвезенных
		|ИЗ
		|	ВременнаяТаблицаВозврат КАК ВременнаяТаблицаВозврат
		|ГДЕ
		|	ВременнаяТаблицаВозврат.ПризнакСтраны = ЗНАЧЕНИЕ(Перечисление.ПризнакиСтраны.ЕАЭС)
		|	И ВременнаяТаблицаВозврат.СуммаНДС <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// 11.
		|ВЫБРАТЬ
		|	ГТДПоИмпорту.Ссылка КАК Ссылка,
		|	ГТДПоИмпорту.Дата КАК Дата,
		|	ГТДПоИмпорту.Организация КАК Организация,
		|	ГТДПоИмпорту.Номер КАК Номер,
		|	ГТДПоИмпорту.Контрагент КАК Контрагент,
		|	МАКСИМУМ(ВременнаяТаблицаУчетнаяПолитика.Период) КАК Период
		|ПОМЕСТИТЬ ВременнаяТаблицаГТДПоИмпортуМаксПериод
		|ИЗ
		|	Документ.ГТДПоИмпорту КАК ГТДПоИмпорту
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаУчетнаяПолитика КАК ВременнаяТаблицаУчетнаяПолитика
		|		ПО ГТДПоИмпорту.Организация = ВременнаяТаблицаУчетнаяПолитика.Организация
		|			И ГТДПоИмпорту.Дата >= ВременнаяТаблицаУчетнаяПолитика.Период
		|ГДЕ
		|	ГТДПоИмпорту.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ГТДПоИмпорту.Ссылка,
		|	ГТДПоИмпорту.Организация,
		|	ГТДПоИмпорту.Номер,
		|	ГТДПоИмпорту.Дата,
		|	ГТДПоИмпорту.Контрагент
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Период,
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// 12.
		|ВЫБРАТЬ
		|	ГТДПоИмпортуМаксПериод.Ссылка КАК Регистратор,
		|	ГТДПоИмпортуМаксПериод.Дата КАК Период,
		|	ГТДПоИмпортуМаксПериод.Организация КАК Организация,
		|	ГТДПоИмпортуМаксПериод.Номер КАК Номер,
		|	ГТДПоИмпортуМаксПериод.Контрагент КАК Контрагент,
		|	СУММА(ГТДПоИмпортуРазделы.БазаНДС) КАК Сумма,
		|	СУММА(ГТДПоИмпортуРазделы.НДС) КАК СуммаНДС,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ВременнаяТаблицаУчетнаяПолитика.УказыватьПризнакЗачетаНДСПриПоступлении
		|					ИЛИ ГТДПоИмпортуРазделы.ЗачетНДС <> ЗНАЧЕНИЕ(Перечисление.ВидыЗачетаНДС.Себестоимость)
		|				ТОГДА ГТДПоИмпортуРазделы.НДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаПодлежащаяКЗачетуНДС
		|ПОМЕСТИТЬ ВременнаяТаблицаГТДПоИмпортуРеестрВвезенных
		|ИЗ
		|	ВременнаяТаблицаГТДПоИмпортуМаксПериод КАК ГТДПоИмпортуМаксПериод
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаУчетнаяПолитика КАК ВременнаяТаблицаУчетнаяПолитика
		|		ПО ГТДПоИмпортуМаксПериод.Организация = ВременнаяТаблицаУчетнаяПолитика.Организация
		|			И ГТДПоИмпортуМаксПериод.Период = ВременнаяТаблицаУчетнаяПолитика.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ГТДПоИмпорту.Разделы КАК ГТДПоИмпортуРазделы
		|		ПО ГТДПоИмпортуМаксПериод.Ссылка = ГТДПоИмпортуРазделы.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ГТДПоИмпортуМаксПериод.Ссылка,
		|	ГТДПоИмпортуМаксПериод.Номер,
		|	ГТДПоИмпортуМаксПериод.Контрагент,
		|	ГТДПоИмпортуМаксПериод.Дата,
		|	ГТДПоИмпортуМаксПериод.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
	    // 13.
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка,
		|	ПоступлениеТоваровУслуг.Номер КАК Номер,
		|	ПоступлениеТоваровУслуг.Дата КАК Дата,
		|	ПоступлениеТоваровУслуг.Организация КАК Организация,
		|	ПоступлениеТоваровУслуг.Контрагент КАК Контрагент,
		|	ПоступлениеТоваровУслуг.СерияБланкаСФ КАК СерияБланкаСФ,
		|	ПоступлениеТоваровУслуг.НомерБланкаСФ КАК НомерБланкаСФ,
		|	ПоступлениеТоваровУслуг.ДатаСФ КАК ДатаСФ,
		|	ПоступлениеТоваровУслуг.ПризнакСтраны КАК ПризнакСтраны,
		|	ПоступлениеТоваровУслуг.ВидОперации КАК ВидОперации,
		|	ПоступлениеТоваровУслуг.НеВключатьВРеестрСФ КАК НеВключатьВРеестрСФ,
		|	МАКСИМУМ(ВременнаяТаблицаУчетнаяПолитика.Период) КАК Период
		|ПОМЕСТИТЬ ВременнаяТаблицаПоступлениеМаксПериод
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаУчетнаяПолитика КАК ВременнаяТаблицаУчетнаяПолитика
		|		ПО ПоступлениеТоваровУслуг.Организация = ВременнаяТаблицаУчетнаяПолитика.Организация
		|			И ПоступлениеТоваровУслуг.Дата >= ВременнаяТаблицаУчетнаяПолитика.Период
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровУслуг.Ссылка,
		|	ПоступлениеТоваровУслуг.Номер,
		|	ПоступлениеТоваровУслуг.Дата,
		|	ПоступлениеТоваровУслуг.Организация,
		|	ПоступлениеТоваровУслуг.Контрагент,
		|	ПоступлениеТоваровУслуг.СерияБланкаСФ,
		|	ПоступлениеТоваровУслуг.НомерБланкаСФ,
		|	ПоступлениеТоваровУслуг.ДатаСФ,
		|	ПоступлениеТоваровУслуг.ПризнакСтраны,
		|	ПоступлениеТоваровУслуг.ВидОперации,
		|	ПоступлениеТоваровУслуг.НеВключатьВРеестрСФ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Период,
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// 14.
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка,
		|	ПоступлениеТоваровУслуг.Номер КАК Номер,
		|	ПоступлениеТоваровУслуг.Дата КАК Дата,
		|	ПоступлениеТоваровУслуг.Организация КАК Организация,
		|	ПоступлениеТоваровУслуг.Контрагент КАК Контрагент,
		|	ПоступлениеТоваровУслуг.СерияБланкаСФ КАК СерияБланкаСФ,
		|	ПоступлениеТоваровУслуг.НомерБланкаСФ КАК НомерБланкаСФ,
		|	ПоступлениеТоваровУслуг.ДатаСФ КАК ДатаСФ,
		|	ПоступлениеТоваровУслуг.ПризнакСтраны КАК ПризнакСтраны,
		|	ПоступлениеТоваровУслуг.ВидОперации КАК ВидОперации,
		|	ПоступлениеТоваровУслуг.НеВключатьВРеестрСФ КАК НеВключатьВРеестрСФ,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ВременнаяТаблицаУчетнаяПолитика.УказыватьПризнакЗачетаНДСПриПоступлении
		|					ИЛИ ВложенныйЗапрос.ЗачетНДС <> ЗНАЧЕНИЕ(Перечисление.ВидыЗачетаНДС.Себестоимость)
		|				ТОГДА ВложенныйЗапрос.СуммаНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаПодлежащаяКЗачетуНДС,
		|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
		|	СУММА(ВложенныйЗапрос.СуммаНДС) КАК СуммаНДС
		|ПОМЕСТИТЬ ВременнаяТаблицаПоступление
		|ИЗ
		|	ВременнаяТаблицаПоступлениеМаксПериод КАК ПоступлениеТоваровУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаУчетнаяПолитика КАК ВременнаяТаблицаУчетнаяПолитика
		|		ПО ПоступлениеТоваровУслуг.Организация = ВременнаяТаблицаУчетнаяПолитика.Организация
		|			И ПоступлениеТоваровУслуг.Период = ВременнаяТаблицаУчетнаяПолитика.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТаблицаТовары.Ссылка КАК Ссылка,
		|			ТаблицаТовары.ЗачетНДС КАК ЗачетНДС,
		|			ЕСТЬNULL(СУММА(ТаблицаТовары.Сумма), 0) КАК Сумма,
		|			ЕСТЬNULL(СУММА(ТаблицаТовары.СуммаНДС), 0) КАК СуммаНДС
		|		ИЗ
		|			Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
		|		ГДЕ
		|			ТаблицаТовары.Ссылка.Проведен
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТаблицаТовары.Ссылка,
		|			ТаблицаТовары.ЗачетНДС
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ТаблицаУслуги.Ссылка,
		|			ТаблицаУслуги.ЗачетНДС,
		|			ЕСТЬNULL(СУММА(ТаблицаУслуги.Сумма), 0),
		|			ЕСТЬNULL(СУММА(ТаблицаУслуги.СуммаНДС), 0)
		|		ИЗ
		|			Документ.ПоступлениеТоваровУслуг.Услуги КАК ТаблицаУслуги
		|		ГДЕ
		|			ТаблицаУслуги.Ссылка.Проведен
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТаблицаУслуги.Ссылка,
		|			ТаблицаУслуги.ЗачетНДС
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ТаблицаОС.Ссылка,
		|			ТаблицаОС.ЗачетНДС,
		|			ЕСТЬNULL(СУММА(ТаблицаОС.Сумма), 0),
		|			ЕСТЬNULL(СУММА(ТаблицаОС.СуммаНДС), 0)
		|		ИЗ
		|			Документ.ПоступлениеТоваровУслуг.ОС КАК ТаблицаОС
		|		ГДЕ
		|			ТаблицаОС.Ссылка.Проведен
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТаблицаОС.Ссылка,
		|			ТаблицаОС.ЗачетНДС) КАК ВложенныйЗапрос
		|		ПО ПоступлениеТоваровУслуг.Ссылка = ВложенныйЗапрос.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровУслуг.ДатаСФ,
		|	ПоступлениеТоваровУслуг.НомерБланкаСФ,
		|	ПоступлениеТоваровУслуг.ПризнакСтраны,
		|	ПоступлениеТоваровУслуг.НеВключатьВРеестрСФ,
		|	ПоступлениеТоваровУслуг.ВидОперации,
		|	ПоступлениеТоваровУслуг.СерияБланкаСФ,
		|	ПоступлениеТоваровУслуг.Контрагент,
		|	ПоступлениеТоваровУслуг.Ссылка,
		|	ПоступлениеТоваровУслуг.Номер,
		|	ПоступлениеТоваровУслуг.Дата,
		|	ПоступлениеТоваровУслуг.Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПризнакСтраны,
		|	СуммаНДС,
		|	ВидОперации,
		|	НеВключатьВРеестрСФ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
	    // 15.
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка,
		|	ПоступлениеТоваровУслуг.ДатаСФ КАК ДатаСФ
		|ИЗ
		|	ВременнаяТаблицаПоступлениеМаксПериод КАК ПоступлениеТоваровУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// 16.
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Регистратор,
		|	ПоступлениеТоваровУслуг.Дата КАК Период,
		|	ПоступлениеТоваровУслуг.Организация КАК Организация,
		|	ПоступлениеТоваровУслуг.Номер КАК Номер,
		|	ПоступлениеТоваровУслуг.Контрагент КАК Контрагент,
		|	ПоступлениеТоваровУслуг.СуммаНДС КАК СуммаНДС,
		|	ПоступлениеТоваровУслуг.СуммаПодлежащаяКЗачетуНДС КАК СуммаПодлежащаяКЗачетуНДС
		|ПОМЕСТИТЬ ВременнаяТаблицаПоступлениеРеестрВвезенных
		|ИЗ
		|	ВременнаяТаблицаПоступление КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.ПризнакСтраны = ЗНАЧЕНИЕ(Перечисление.ПризнакиСтраны.ЕАЭС)
		|	И ПоступлениеТоваровУслуг.СуммаНДС <> 0
	    |;
		|
		|////////////////////////////////////////////////////////////////////////////////	
		// 17.	
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Регистратор,
		|	ПоступлениеТоваровУслуг.Организация КАК Организация,
		|	ПоступлениеТоваровУслуг.Ссылка КАК Документ,
		|	ПоступлениеТоваровУслуг.Контрагент КАК Контрагент,
		|	ВЫБОР
		|		КОГДА ПоступлениеТоваровУслуг.Контрагент.НаименованиеПолное = """" 
		|			ТОГДА ПоступлениеТоваровУслуг.Контрагент.Наименование
		|		ИНАЧЕ ПоступлениеТоваровУслуг.Контрагент.НаименованиеПолное
		|	КОНЕЦ КАК КонтрагентНаименование,
		|	ПоступлениеТоваровУслуг.Контрагент.ИНН КАК ИННКонтрагента,
		|	ПоступлениеТоваровУслуг.Контрагент.ГНС.Код КАК КодГНСКонтрагента,
		|	ПоступлениеТоваровУслуг.СерияБланкаСФ КАК СерияБланкаСФ,
		|	ПоступлениеТоваровУслуг.НомерБланкаСФ КАК НомерБланкаСФ,
		|	ПоступлениеТоваровУслуг.ДатаСФ КАК ДатаПоставки,
		|	ПоступлениеТоваровУслуг.СуммаНДС КАК СуммаНДС,
		|	ПоступлениеТоваровУслуг.Сумма КАК Сумма,
		|	ПоступлениеТоваровУслуг.СуммаПодлежащаяКЗачетуНДС КАК СуммаПодлежащаяКЗачетуНДС
		|ПОМЕСТИТЬ ВременнаяТаблицаПоступлениеРеестрПриобретенных
		|ИЗ
		|	ВременнаяТаблицаПоступление КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.ПризнакСтраны = ЗНАЧЕНИЕ(Перечисление.ПризнакиСтраны.КР)
		|	И ПоступлениеТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Покупка)
		|	И НЕ ПоступлениеТоваровУслуг.НеВключатьВРеестрСФ
	    |;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// 18.
		|ВЫБРАТЬ
		|	СчетФактураПолученный.Организация КАК Организация,
		|	СчетФактураПолученный.Ссылка КАК Ссылка,
		|	СчетФактураПолученный.Контрагент КАК Контрагент,
		|	СчетФактураПолученный.СерияБланкаСФ КАК СерияБланкаСФ,
		|	СчетФактураПолученный.НомерБланкаСФ КАК НомерБланкаСФ,
		|	СчетФактураПолученный.Дата КАК Дата,
		|	МАКСИМУМ(ВременнаяТаблицаУчетнаяПолитика.Период) КАК Период
		|ПОМЕСТИТЬ ВременнаяТаблицаСчетФактураМаксПериод
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаУчетнаяПолитика КАК ВременнаяТаблицаУчетнаяПолитика
		|		ПО СчетФактураПолученный.Организация = ВременнаяТаблицаУчетнаяПолитика.Организация
		|			И СчетФактураПолученный.Дата >= ВременнаяТаблицаУчетнаяПолитика.Период
		|ГДЕ
		|	СчетФактураПолученный.Проведен
		|	И СчетФактураПолученный.Контрагент.ПризнакСтраны = ЗНАЧЕНИЕ(Перечисление.ПризнакиСтраны.КР)
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетФактураПолученный.Ссылка,
		|	СчетФактураПолученный.Организация,
		|	СчетФактураПолученный.Контрагент,
		|	СчетФактураПолученный.СерияБланкаСФ,
		|	СчетФактураПолученный.НомерБланкаСФ,
		|	СчетФактураПолученный.Дата
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Ссылка,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// 19.
		|ВЫБРАТЬ
		|	СчетФактураПолученный.Ссылка КАК Регистратор,
		|	СчетФактураПолученный.Организация КАК Организация,
		|	СчетФактураПолученный.Ссылка КАК Документ,
		|	СчетФактураПолученный.Контрагент КАК Контрагент,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученный.Контрагент.НаименованиеПолное = """" 
		|			ТОГДА СчетФактураПолученный.Контрагент.Наименование
		|		ИНАЧЕ СчетФактураПолученный.Контрагент.НаименованиеПолное
		|	КОНЕЦ КАК КонтрагентНаименование,
		|	СчетФактураПолученный.Контрагент.ИНН КАК ИННКонтрагента,
		|	СчетФактураПолученный.Контрагент.ГНС.Код КАК КодГНСКонтрагента,
		|	СчетФактураПолученный.СерияБланкаСФ КАК СерияБланкаСФ,
		|	СчетФактураПолученный.НомерБланкаСФ КАК НомерБланкаСФ,
		|	СчетФактураПолученный.Дата КАК ДатаПоставки,
		|	СУММА(СчетФактураПолученныйТовары.Сумма) КАК Сумма,
		|	СУММА(СчетФактураПолученныйТовары.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ВременнаяТаблицаУчетнаяПолитика.УказыватьПризнакЗачетаНДСПриПоступлении
		|					ИЛИ СчетФактураПолученныйТовары.ЗачетНДС <> ЗНАЧЕНИЕ(Перечисление.ВидыЗачетаНДС.Себестоимость)
		|				ТОГДА СчетФактураПолученныйТовары.СуммаНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаПодлежащаяКЗачетуНДС
		|ПОМЕСТИТЬ ВременнаяТаблицаСчетФактураРеестрПриобретенных
		|ИЗ
		|	ВременнаяТаблицаСчетФактураМаксПериод КАК СчетФактураПолученный
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаУчетнаяПолитика КАК ВременнаяТаблицаУчетнаяПолитика
		|		ПО СчетФактураПолученный.Организация = ВременнаяТаблицаУчетнаяПолитика.Организация
		|			И СчетФактураПолученный.Период = ВременнаяТаблицаУчетнаяПолитика.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.Товары КАК СчетФактураПолученныйТовары
		|		ПО СчетФактураПолученный.Ссылка = СчетФактураПолученныйТовары.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетФактураПолученный.НомерБланкаСФ,
		|	СчетФактураПолученный.Контрагент,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученный.Контрагент.НаименованиеПолное = """" 
		|			ТОГДА СчетФактураПолученный.Контрагент.Наименование
		|		ИНАЧЕ СчетФактураПолученный.Контрагент.НаименованиеПолное
		|	КОНЕЦ,
		|	СчетФактураПолученный.Контрагент.ИНН,
		|	СчетФактураПолученный.Контрагент.ГНС.Код,
		|	СчетФактураПолученный.Организация,
		|	СчетФактураПолученный.Дата,
		|	СчетФактураПолученный.Ссылка,
		|	СчетФактураПолученный.СерияБланкаСФ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// 20.
		|ВЫБРАТЬ
		|	ВременнаяТаблицаАвансовыйОтчетРеестрПриобретенных.Регистратор КАК Регистратор,
		|	ВременнаяТаблицаАвансовыйОтчетРеестрПриобретенных.Организация КАК Организация,
		|	ВременнаяТаблицаАвансовыйОтчетРеестрПриобретенных.Документ КАК Документ,
		|	ВременнаяТаблицаАвансовыйОтчетРеестрПриобретенных.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаАвансовыйОтчетРеестрПриобретенных.КонтрагентНаименование КАК КонтрагентНаименование,
		|	ВременнаяТаблицаАвансовыйОтчетРеестрПриобретенных.ИННКонтрагента КАК ИННКонтрагента,
		|	ВременнаяТаблицаАвансовыйОтчетРеестрПриобретенных.КодГНСКонтрагента КАК КодГНСКонтрагента,
		|	ВременнаяТаблицаАвансовыйОтчетРеестрПриобретенных.СерияБланкаСФ КАК СерияБланкаСФ,
		|	ВременнаяТаблицаАвансовыйОтчетРеестрПриобретенных.НомерБланкаСФ КАК НомерБланкаСФ,
		|	ВременнаяТаблицаАвансовыйОтчетРеестрПриобретенных.ДатаПоставки КАК ДатаПоставки,
		|	ВременнаяТаблицаАвансовыйОтчетРеестрПриобретенных.Сумма КАК Сумма,
		|	0 КАК СуммаНДС,
		|	0 КАК СуммаПодлежащаяКЗачетуНДС
		|ИЗ
		|	ВременнаяТаблицаАвансовыйОтчетРеестрПриобретенных КАК ВременнаяТаблицаАвансовыйОтчетРеестрПриобретенных
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаВозвратТоваровРеестрПриобретенных.Регистратор,
		|	ВременнаяТаблицаВозвратТоваровРеестрПриобретенных.Организация,
		|	ВременнаяТаблицаВозвратТоваровРеестрПриобретенных.Документ,
		|	ВременнаяТаблицаВозвратТоваровРеестрПриобретенных.Контрагент,
		|	ВременнаяТаблицаВозвратТоваровРеестрПриобретенных.КонтрагентНаименование,
		|	ВременнаяТаблицаВозвратТоваровРеестрПриобретенных.ИННКонтрагента,
		|	ВременнаяТаблицаВозвратТоваровРеестрПриобретенных.КодГНСКонтрагента,
		|	ВременнаяТаблицаВозвратТоваровРеестрПриобретенных.СерияБланкаСФ,
		|	ВременнаяТаблицаВозвратТоваровРеестрПриобретенных.НомерБланкаСФ,
		|	ВременнаяТаблицаВозвратТоваровРеестрПриобретенных.ДатаПоставки,
		|	ВременнаяТаблицаВозвратТоваровРеестрПриобретенных.Сумма,
		|	ВременнаяТаблицаВозвратТоваровРеестрПриобретенных.СуммаНДС,
		|	ВременнаяТаблицаВозвратТоваровРеестрПриобретенных.СуммаПодлежащаяКЗачетуНДС
		|ИЗ
		|	ВременнаяТаблицаВозвратТоваровРеестрПриобретенных КАК ВременнаяТаблицаВозвратТоваровРеестрПриобретенных
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаПоступлениеРеестрПриобретенных.Регистратор,
		|	ВременнаяТаблицаПоступлениеРеестрПриобретенных.Организация,
		|	ВременнаяТаблицаПоступлениеРеестрПриобретенных.Документ,
		|	ВременнаяТаблицаПоступлениеРеестрПриобретенных.Контрагент,
		|	ВременнаяТаблицаПоступлениеРеестрПриобретенных.КонтрагентНаименование,
		|	ВременнаяТаблицаПоступлениеРеестрПриобретенных.ИННКонтрагента,
		|	ВременнаяТаблицаПоступлениеРеестрПриобретенных.КодГНСКонтрагента,
		|	ВременнаяТаблицаПоступлениеРеестрПриобретенных.СерияБланкаСФ,
		|	ВременнаяТаблицаПоступлениеРеестрПриобретенных.НомерБланкаСФ,
		|	ВременнаяТаблицаПоступлениеРеестрПриобретенных.ДатаПоставки,
		|	ВременнаяТаблицаПоступлениеРеестрПриобретенных.Сумма,
		|	ВременнаяТаблицаПоступлениеРеестрПриобретенных.СуммаНДС,
		|	ВременнаяТаблицаПоступлениеРеестрПриобретенных.СуммаПодлежащаяКЗачетуНДС
		|ИЗ
		|	ВременнаяТаблицаПоступлениеРеестрПриобретенных КАК ВременнаяТаблицаПоступлениеРеестрПриобретенных
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСчетФактураРеестрПриобретенных.Регистратор,
		|	ВременнаяТаблицаСчетФактураРеестрПриобретенных.Организация,
		|	ВременнаяТаблицаСчетФактураРеестрПриобретенных.Документ,
		|	ВременнаяТаблицаСчетФактураРеестрПриобретенных.Контрагент,
		|	ВременнаяТаблицаСчетФактураРеестрПриобретенных.КонтрагентНаименование,
		|	ВременнаяТаблицаСчетФактураРеестрПриобретенных.ИННКонтрагента,
		|	ВременнаяТаблицаСчетФактураРеестрПриобретенных.КодГНСКонтрагента,
		|	ВременнаяТаблицаСчетФактураРеестрПриобретенных.СерияБланкаСФ,
		|	ВременнаяТаблицаСчетФактураРеестрПриобретенных.НомерБланкаСФ,
		|	ВременнаяТаблицаСчетФактураРеестрПриобретенных.ДатаПоставки,
		|	ВременнаяТаблицаСчетФактураРеестрПриобретенных.Сумма,
		|	ВременнаяТаблицаСчетФактураРеестрПриобретенных.СуммаНДС,
		|	ВременнаяТаблицаСчетФактураРеестрПриобретенных.СуммаПодлежащаяКЗачетуНДС
		|ИЗ
		|	ВременнаяТаблицаСчетФактураРеестрПриобретенных КАК ВременнаяТаблицаСчетФактураРеестрПриобретенных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// 21.
		|ВЫБРАТЬ
		|	ВременнаяТаблицаВозвратТоваровРеестрВвезенных.Регистратор КАК Регистратор,
		|	ВременнаяТаблицаВозвратТоваровРеестрВвезенных.Период КАК Период,
		|	ВременнаяТаблицаВозвратТоваровРеестрВвезенных.Номер КАК Номер,
		|	ВременнаяТаблицаВозвратТоваровРеестрВвезенных.Организация КАК Организация,
		|	ВременнаяТаблицаВозвратТоваровРеестрВвезенных.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаВозвратТоваровРеестрВвезенных.СуммаНДС КАК СуммаНДС,
		|	ВременнаяТаблицаВозвратТоваровРеестрВвезенных.СуммаПодлежащаяКЗачетуНДС КАК СуммаПодлежащаяКЗачетуНДС,
		|	0 КАК Сумма
		|ИЗ
		|	ВременнаяТаблицаВозвратТоваровРеестрВвезенных КАК ВременнаяТаблицаВозвратТоваровРеестрВвезенных
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаГТДПоИмпортуРеестрВвезенных.Регистратор,
		|	ВременнаяТаблицаГТДПоИмпортуРеестрВвезенных.Период,
		|	ВременнаяТаблицаГТДПоИмпортуРеестрВвезенных.Номер,
		|	ВременнаяТаблицаГТДПоИмпортуРеестрВвезенных.Организация,
		|	ВременнаяТаблицаГТДПоИмпортуРеестрВвезенных.Контрагент,
		|	ВременнаяТаблицаГТДПоИмпортуРеестрВвезенных.СуммаНДС,
		|	ВременнаяТаблицаГТДПоИмпортуРеестрВвезенных.СуммаПодлежащаяКЗачетуНДС,
		|	ВременнаяТаблицаГТДПоИмпортуРеестрВвезенных.Сумма
		|ИЗ
		|	ВременнаяТаблицаГТДПоИмпортуРеестрВвезенных КАК ВременнаяТаблицаГТДПоИмпортуРеестрВвезенных
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаПоступлениеРеестрВвезенных.Регистратор,
		|	ВременнаяТаблицаПоступлениеРеестрВвезенных.Период,
		|	ВременнаяТаблицаПоступлениеРеестрВвезенных.Номер,
		|	ВременнаяТаблицаПоступлениеРеестрВвезенных.Организация,
		|	ВременнаяТаблицаПоступлениеРеестрВвезенных.Контрагент,
		|	ВременнаяТаблицаПоступлениеРеестрВвезенных.СуммаНДС,
		|	ВременнаяТаблицаПоступлениеРеестрВвезенных.СуммаПодлежащаяКЗачетуНДС,
		|	0
		|ИЗ
		|	ВременнаяТаблицаПоступлениеРеестрВвезенных КАК ВременнаяТаблицаПоступлениеРеестрВвезенных";	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаДокАвансовыеОтчеты = МассивРезультатов[2].Выбрать();
	
	// Заполнение ТЧ "ВладельцыПатентов" в док. "Авансовый отчет".
	Пока ВыборкаДокАвансовыеОтчеты.Следующий() Цикл		
		Если ВыборкаДокАвансовыеОтчеты.Ссылка.ВладельцыПатентов.Количество() = 0 Тогда
			Продолжить;			
		Иначе
			ДокументОбъект = ВыборкаДокАвансовыеОтчеты.Ссылка.ПолучитьОбъект();
			
			Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.ВладельцыПатентов Цикл
				СтрокаТабличнойЧасти.ВидДокумента = "ДПБУ";
				СтрокаТабличнойЧасти.НомерДокумента = ВыборкаДокАвансовыеОтчеты.Номер;
				СтрокаТабличнойЧасти.ДатаДокумента = ВыборкаДокАвансовыеОтчеты.Дата;
			КонецЦикла;
			
			Попытка
				ДокументОбъект.Записать();	
			Исключение
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись док. ""Авансовый отчет"" по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			КонецПопытки;
		КонецЕсли;		
	КонецЦикла;	
	
	ВыборкаДокВозвратТоваров = МассивРезультатов[5].Выбрать();
	
	// Перезапись док. "Возврат товаров поставщику", в случае незаполненной даты СФ.
	// Заполнять программно нет необходимости, т.к. в модуле объекта документа,
	// процедура "ПередЗаписью", есть весь необходимый код.
	Пока ВыборкаДокВозвратТоваров.Следующий() Цикл		
		Если НЕ ЗначениеЗаполнено(ВыборкаДокВозвратТоваров.ДатаСФ) Тогда
			ДокументОбъект = ВыборкаДокВозвратТоваров.Ссылка.ПолучитьОбъект();
			
			Попытка
				ДокументОбъект.Записать();	
			Исключение
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись док. ""Возврат товаров поставщику"" по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			КонецПопытки;
		КонецЕсли;		
	КонецЦикла;
	
	ВыборкаДокПоступлениеТоваров = МассивРезультатов[14].Выбрать();
	
	// Перезапись док. "Поступление товаров и услуг", в случае незаполненной даты СФ.
	// Заполнять программно нет необходимости, т.к. в модуле объекта документа,
	// процедура "ПередЗаписью", есть весь необходимый код.
	Пока ВыборкаДокПоступлениеТоваров.Следующий() Цикл		
		Если НЕ ЗначениеЗаполнено(ВыборкаДокПоступлениеТоваров.ДатаСФ) Тогда
			ДокументОбъект = ВыборкаДокПоступлениеТоваров.Ссылка.ПолучитьОбъект();
			
			Попытка
				ДокументОбъект.Записать();	
			Исключение
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись док. ""Поступление товаров и услуг"" по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			КонецПопытки;
		КонецЕсли;		
	КонецЦикла;	
	
	// Заполнение РС "РеестрПриобретенныхМатериальныхРесурсов".
	Выборка = МассивРезультатов[19].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.РеестрПриобретенныхМатериальныхРесурсов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Регистратор;
		
		Запись = НаборЗаписей.Добавить();	
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		
		Попытка
			НаборЗаписей.Записать();	
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись в РС ""Реестр приобретенных материальных ресурсов"" по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	// Заполнение РН "РеестрПриобретенныхМатериальныхРесурсов".
	Выборка = МассивРезультатов[20].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.ДанныеДляОтчетаРеестрВвезенных.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Регистратор;
		
		Запись = НаборЗаписей.Добавить();	
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		
		Попытка
			НаборЗаписей.Записать();	
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись в РН ""Данные для отчета реестр ввезенных"" причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_6_49

Процедура ЗаполнитьВидДеятельности(Параметры) Экспорт

	// Восстановление значения ВидДеятельности из шапки документа в табличную часть.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлатежноеПоручениеВходящее.Ссылка КАК Ссылка,
		|	ПлатежноеПоручениеВходящее.удалитьВидДеятельности КАК удалитьВидДеятельности
		|ИЗ
		|	Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручениеВходящее
		|ГДЕ
		|	НЕ ПлатежноеПоручениеВходящее.ПометкаУдаления
		|	И НЕ ПлатежноеПоручениеВходящее.удалитьВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиЕН.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлатежноеПоручениеИсходящее.Ссылка,
		|	ПлатежноеПоручениеИсходящее.удалитьВидДеятельности
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
		|ГДЕ
		|	НЕ ПлатежноеПоручениеИсходящее.ПометкаУдаления
		|	И НЕ ПлатежноеПоручениеИсходящее.удалитьВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиЕН.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриходныйКассовыйОрдер.Ссылка,
		|	ПриходныйКассовыйОрдер.удалитьВидДеятельности
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
		|ГДЕ
		|	НЕ ПриходныйКассовыйОрдер.ПометкаУдаления
		|	И НЕ ПриходныйКассовыйОрдер.удалитьВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиЕН.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасходныйКассовыйОрдер.Ссылка,
		|	РасходныйКассовыйОрдер.удалитьВидДеятельности
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		|ГДЕ
		|	НЕ РасходныйКассовыйОрдер.ПометкаУдаления
		|	И НЕ РасходныйКассовыйОрдер.удалитьВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиЕН.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.РасшифровкаПлатежа Цикл 
			СтрокаТабличнойЧасти.ВидДеятельности = ВыборкаДетальныеЗаписи.удалитьВидДеятельности;
		КонецЦикла;
			
		Попытка
			ДокументОбъект.Записать();	
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;	
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_7_3

Процедура ИспользоватьСтатьиДвиженияДенежныхСредств(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ИспользоватьСтатьиДвиженияДенежныхСредств.Установить(Истина);
	
	Параметры.ОбработкаЗавершена = Истина;

КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_7_5

Процедура ОбновлениеСтранМира(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Справочники.СтраныМира.ЗаполнитьПоУмолчанию();
	
	Параметры.ОбработкаЗавершена = Истина;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

