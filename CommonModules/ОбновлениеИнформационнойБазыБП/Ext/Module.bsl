////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы Бухгалтерия для предприятия, редакция 3.0.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "БухгалтерияДляКыргызстана";
	Описание.Версия = "3.0.1.1"; 

	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	//// Обработчики этого события для подсистем БСП добавляются через подписку на служебное событие:
	//// "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления".
	////
	//// Процедуры обработки этого события всех подсистем БСП имеют то же имя, что и эта процедура,
	//// но размещены в своих подсистемах.
	//// Чтобы найти процедуры можно выполнить глобальный поиск по имени процедуры.
	//// Чтобы найти модули в которых размещены процедуры, можно выполнить поиск по имени события.
	
	// Обработчики, выполняемые при каждом обновлении ИБ
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.УправлениеОбработчиками = Истина;
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ВыполнятьВсегдаПриСменеВерсии";
		
	// Обработчики, выполняемые при заполнении пустой ИБ
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПервыйЗапуск";
	Обработчик.Комментарий = НСтр("ru = 'Выполнение обработчиков первого запуска.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.0";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ИнициализироватьПользователей";
	Обработчик.Комментарий = НСтр("ru = 'Инициализация пользователей.'");
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.0";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьПредопределенныеВидыКонтактнойИнформации";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Комментарий = НСтр("ru = 'Обновление видов контактной информации.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.12";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьКадровыеПриказы";
	Обработчик.Комментарий = НСтр("ru = 'Обновление кадровых приказов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.18";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьНачальныеНастройки";
	Обработчик.Комментарий = НСтр("ru = 'Обновление настроек пользователя- установка первоначальных.'");

КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
		
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "ПредыдущееИмяКонфигурацииБазовая" Тогда
		Параметры.ВерсияКонфигурации = ПредыдущаяВерсияКонфигурации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение пустой ИБ

// Процедура заполняет пустую ИБ.
//
Процедура ПервыйЗапуск() Экспорт
	
	НачатьТранзакцию();
	
	////////////////////////////////////////////////////////////////////////////////
	// Параметры учета и план счетов
	ЗаполнитьПараметрыУчета();
	
	////////////////////////////////////////////////////////////////////////////////
	// Подсистема Банк/Касса
	ЗаполнитьДанныеПоПодсистемеБанкКасса();
	
	////////////////////////////////////////////////////////////////////////////////	
	// Подсистема Основные средства
	ЗаполнитьДанныеПоПодсистемеОсновныеСредства();
	
	////////////////////////////////////////////////////////////////////////////////
	// Подсистема Заработная плата
	ЗаполнитьДанныеПоЗаработнойПлате();

	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ПервыйЗапуск()

////////////////////////////////////////////////////////////////////////////////
// Обновление ИБ

// Демонстрирует процедуру-обработчик обновления данных ИБ, 
// которая выполняется каждый раз при смене версии конфигурации.
//
Процедура ВыполнятьВсегдаПриСменеВерсии(Параметры = Неопределено) Экспорт
	
	// Проверка необходимости обновления критичных общих данных
	ТребуетсяОбновитьКритичныеОбщиеДанные = Ложь;
	// Конец Проверка необходимости обновления критичных общих данных
	Если ТребуетсяОбновитьКритичныеОбщиеДанные Тогда
		Если Параметры <> Неопределено И НЕ Параметры.МонопольныйРежим Тогда
			Параметры.МонопольныйРежим = Истина;
			Возврат;
		КонецЕсли;
		// Код обновления критичных общих данных
	КонецЕсли;
КонецПроцедуры

// Обновляет значения реквизитов предопределенных видов контактной информации
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформации() Экспорт
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	// Организации
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ЮрАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ФактАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Факс");
	ПараметрыВида.Вид = "ФаксОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 4;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "EmailОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 5;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ПочтовыйАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 6;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Другое");
	ПараметрыВида.Вид = "ДругаяИнформацияОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 7;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
		
	// Контрагенты
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ЮрАдресКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ФактАдресКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Факс");
	ПараметрыВида.Вид = "ФаксКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 4;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "EmailКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 5;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ПочтовыйАдресКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 6;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Физические Лица
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "АдресМестаПроживанияФизическиеЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "АдресПоПропискеФизическиеЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонДомашнийФизическиеЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонРабочийФизическиеЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 4;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры // ВключитьМножественныйВводКонтактнойИнформации()

// Процедуры обслуживающие первый запуск (<номер шага при первом запуске>)

// Заполняет данные параметров учета
//
Процедура ЗаполнитьПараметрыУчета()

	// Заполнение плана счетов
	ПланыСчетов.Хозрасчетный.ЗаполнитьПоУмолчанию();	
	
	// Заполнение справочника ГНС
	Справочники.ГНС.ЗаполнитьПоУмолчанию();
	
	//Заполнение справочника Списки счетов
	Справочники.СпискиСчетов.ЗаполнитьПоУмолчанию();
	
	// Заполнение счетов учета номенклатуры
	РегистрыСведений.СчетаУчетаНоменклатуры.ЗаполнитьПоУмолчанию();
		
	Константы.ФункциональнаяОпцияУчетПоНесколькимОрганизациям.Установить(Истина);
	
	БухгалтерскийУчетСервер.УстановитьНастройкуПользователя(ПредопределенноеЗначение("Справочник.Организации.ОсновнаяОрганизация"), "ОсновнаяОрганизация");		
	
КонецПроцедуры // ЗаполнитьПараметрыУчета()  

// Заполняет данные по подсиситеме Банк/Касса
//
Процедура ЗаполнитьДанныеПоПодсистемеБанкКасса()
	// 1. Добавление национальной валюты
	НациональнаяВалютаСсылка = НайтиСоздатьВалюту("417", "сом", "Кыргызский сом", "сом, сома, сомов, м, тыйын, тыйына, тыйынов, м, 2");	
	Константы.НациональнаяВалюта.Установить(НациональнаяВалютаСсылка);
	Константы.ВалютаРегламентированногоУчета.Установить(НациональнаяВалютаСсылка);
	
	// 2. Заполнение справочника "Валюты" 
	Справочники.Валюты.ЗаполнитьПоУмолчанию();
			
	// 8. РС Курсы валют на 01.01.2015
	РегистрыСведений.КурсыВалют.ЗаполнитьПоУмолчанию();
	
	// 9. Добавление касс 
	Справочники.Кассы.ЗаполнитьПоУмолчанию();
	
	// 10. Заполнение справоника "Банки"
	Справочники.Банки.ЗаполнитьПоУмолчанию();
	
	// 11. Заполнение счетов у опреций РКО 
	Справочники.ОперацииРКО.ЗаполнитьПоУмолчанию();
	
	// 12. Заполнение счетов у опреций ПКО
	Справочники.ОперацииПКО.ЗаполнитьПоУмолчанию();
	
	// 13. Заполнение счетов у опреций ППВ
	Справочники.ОперацииППВ.ЗаполнитьПоУмолчанию();
	
	// 14. Заполнение счетов у опреций ППИ
	Справочники.ОперацииППИ.ЗаполнитьПоУмолчанию();
	
	// 15. Заполнение справочника "СтатьиДДС"
	Справочники.СтатьиДвиженияДенежныхСредств.ЗаполнитьПоУмолчанию();
	
	// 16. Заполнение справочника "ТипыЦенНоменклатуры"
	Справочники.ТипыЦенНоменклатуры.ЗаполнитьПоУмолчанию();
	
КонецПроцедуры // ЗаполнитьДанныеПоПодсистемеОсновныеСредства()

// Заполняет данные по подсиситеме ЗаработнойПлаты
//
Процедура ЗаполнитьДанныеПоЗаработнойПлате()
	//Заполнение справочника Статусы
	Справочники.Статусы.ЗаполнитьПоУмолчанию();
	
	Справочники.СтрокиОтчетаПН.ЗаполнитьПоУмолчанию();

	Справочники.СтрокиОтчетаПоСФКвартальному.ЗаполнитьПоУмолчанию();
	
	Справочники.СтатьиТрудовогоКодекса.ЗаполнитьПоУмолчанию();
КонецПроцедуры // ЗаполнитьДанныеПоПодсистемеОсновныеСредства()

//// Заполняет данные по подсиситеме Основные средства
////
Процедура ЗаполнитьДанныеПоПодсистемеОсновныеСредства()
	//Справочники.КлассификаторОсновныхФондов.ЗаполнитьПоУмолчанию();     
	
	//Заполнение справочника ГруппыНалоговогоУчетаОС
	Справочники.ГруппыНалоговогоУчетаОС.ЗаполнитьПоУмолчанию();
	
	//Заполнение справочника ГруппыИмущества
	Справочники.ГруппыИмущества.ЗаполнитьПоУмолчанию();
	
	//Заполнение справочника ВидыМатериаловСтен
	Справочники.ВидыМатериаловСтен.ЗаполнитьПоУмолчанию(); 
	
	//Заполнение справочника ЗональныеКоэффициентыНИ
	Справочники.ЗональныеКоэффициентыНИ.ЗаполнитьПоУмолчанию(); 
	
	//Заполнение справочника КлассификаторОтраслевойПринадлежностиНИ
	Справочники.КлассификаторОтраслевойПринадлежностиНИ.ЗаполнитьПоУмолчанию();	
	
	//Заполнение справочника ВидыТранспортаПоНалогуНаИмущество
	Справочники.ВидыТранспортаПоНалогуНаИмущество.ЗаполнитьПоУмолчанию();
	
	//Создание документа УстановкаПараметровРасчетаНалогаНаИмущества
	СоздатьДокументУстановкаПараметровНИ();   

КонецПроцедуры // ЗаполнитьДанныеПоПодсистемеОсновныеСредства()

//Процедура создаёт документ УстановкаПараметровРасчетаНалогаНаИмущество 
// и заполняет данными из макетов документа:
// * ПараметрыРасчетаНИПоНедвижимости2013
// * ПараметрыРасчетаНИПоТранспорту
//
Процедура СоздатьДокументУстановкаПараметровНИ()
	
		ВыборкаДокументов = Документы.УстановкаПараметровРасчетаНалогаНаИмущество.Выбрать();
		Если ВыборкаДокументов.Следующий() Тогда
			НовыйДокумент = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			НовыйДокумент.Недвижимость.Очистить();
			НовыйДокумент.Транспорт.Очистить();
		Иначе
			НовыйДокумент = Документы.УстановкаПараметровРасчетаНалогаНаИмущество.СоздатьДокумент();
			НовыйДокумент.Дата = Дата("20130101");
		КонецЕсли;     			
		
		// Заполнение табличных частей документа
		МакетНедвижимость = НовыйДокумент.ПолучитьМакет("ПараметрыРасчетаНИПоНедвижимости2013");
		Для Счетчик = 1 По МакетНедвижимость.ВысотаТаблицы Цикл
			Запись = НовыйДокумент.Недвижимость.Добавить();
			Запись.ВидМатериалаСтен = Справочники.ВидыМатериаловСтен.НайтиПоНаименованию(СокрЛП(МакетНедвижимость.Область(Счетчик, 1).Текст));
			Запись.ОтЛет 			= СокрЛП(МакетНедвижимость.Область(Счетчик, 2).Текст);
			Запись.ДоЛет 			= СокрЛП(МакетНедвижимость.Область(Счетчик, 3).Текст);
			Запись.Стоимость 		= СокрЛП(МакетНедвижимость.Область(Счетчик, 4).Текст);
		КонецЦикла;
		
		МакетТранспорт = НовыйДокумент.ПолучитьМакет("ПараметрыРасчетаНИПоТранспорту");
		Для Счетчик = 1 По МакетТранспорт.ВысотаТаблицы Цикл
			Запись = НовыйДокумент.Транспорт.Добавить();
			Запись.ВидТранспорта 	= Справочники.ВидыТранспортаПоНалогуНаИмущество.НайтиПоНаименованию(СокрЛП(МакетТранспорт.Область(Счетчик, 1).Текст));
			Запись.ОтЛет 			= СокрЛП(МакетТранспорт.Область(Счетчик, 2).Текст);
			Запись.ДоЛет 			= СокрЛП(МакетТранспорт.Область(Счетчик, 3).Текст);
			Запись.Ставка	 		= СокрЛП(МакетТранспорт.Область(Счетчик, 4).Текст);
		КонецЦикла;
		
		Попытка
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
	
КонецПроцедуры

// Процедура - провести обновить представление ДокументыФизическихЛиц
//
Процедура ОбновитьКадровыеПриказы() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриемНаРаботу.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|ГДЕ
		|	ПриемНаРаботу.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КадровоеПеремещение.Ссылка
		|ИЗ
		|	Документ.КадровоеПеремещение КАК КадровоеПеремещение
		|ГДЕ
		|	КадровоеПеремещение.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|ГДЕ
		|	Увольнение.Проведен";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
			ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры // ОбновитьДокументыФизическихЛиц()

// Процедура - ОбновитьКурсKGS
//
Процедура ОбновитьКурсKGS() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Валюта = Справочники.Валюты.НайтиПоКоду("417");
	
	НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Валюта.Установить(Валюта);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Валюта 		= Валюта;
	НоваяЗапись.Период 		= '20150101';
	НоваяЗапись.Курс 		= 1;
	НоваяЗапись.Кратность 	= 1;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись курсов валют по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка Обновить курс KGS'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры // ОбновитьКурсKGS()

// Процедура - Обновить начальные настройки
//
Процедура ОбновитьНачальныеНастройки(СтруктураПараметров = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка,
		|	Пользователи.Наименование
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПользователиСлужебный.УстановитьНачальныеНастройки(ВыборкаДетальныеЗаписи.Наименование);
	КонецЦикла;
КонецПроцедуры // ОбновитьНачальныеНастройки()

#КонецОбласти

// Процедура инициализации пользователей конфигурации. 
//
Процедура ИнициализироватьПользователей() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	// Добавление администратора (администратор системы - полные права).
	Пользователи.СоздатьАдминистратора();
	
	// Добавление пользователя.
	ДобавитьПользователя(НСтр("ru = 'Пользователь'"));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ИНТЕРФЕЙС 

//////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//  ПараметрыПрописиНаРусском - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском) Экспорт

	СправочникМенеджер = Справочники.Валюты;
	СправочникСсылка = СправочникМенеджер.НайтиПоКоду(Код);

	Если СправочникСсылка.Пустая() Тогда
		СправочникСсылка = СправочникМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор);
		
		СправочникОбъект = СправочникМенеджер.СоздатьЭлемент();
		СправочникОбъект.УстановитьСсылкуНового(СправочникСсылка);
	Иначе 
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	СправочникОбъект.Код                       = Код;
	СправочникОбъект.Наименование              = Наименование;
	СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
	СправочникОбъект.ПараметрыПрописиНаРусском = ПараметрыПрописиНаРусском;

	БухгалтерскийУчетКлиентСервер.ЗаписатьСправочникОбъект(СправочникОбъект);
	
	Возврат СправочникСсылка;

КонецФункции // НайтиСоздатьВалюту()

Процедура ДобавитьПользователя(ПолноеИмяПользователя, ИмяПользователяИБ = Неопределено)
	
	Если ИмяПользователяИБ = Неопределено Тогда
		ИмяПользователяИБ = ПолноеИмяПользователя;
	КонецЕсли;
	
	ЗаписатьПользователя = Ложь;
	
	Пользователь = Справочники.Пользователи.НайтиПоНаименованию(ПолноеИмяПользователя);
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		ЗаписатьПользователя = Истина;
		ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент();
		ПользовательОбъект.Наименование = ПолноеИмяПользователя;
	КонецЕсли;
	
	ЗаписатьПользователяИБ = Ложь;
	ВозможноЗаписатьПользователяИБ = Истина;
	ВозможноПривязатьПользователяИБ = Ложь;
	ОписаниеПользователяИБ = Новый Структура;
	
	Если ЗначениеЗаполнено(Пользователь.ИдентификаторПользователяИБ) Тогда
		УчетнаяЗапись = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			Пользователь.ИдентификаторПользователяИБ);
	КонецЕсли;
	
	Если УчетнаяЗапись = Неопределено Тогда
		УчетнаяЗапись = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
		
		Если УчетнаяЗапись = Неопределено Тогда
			ЗаписатьПользователяИБ = Истина;
			ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
			
		ИначеЕсли Пользователи.ПользовательИБЗанят(УчетнаяЗапись) Тогда
			// Пользователь ИБ с указанным именем уже существует и занят,
			// возможно записать только пользователя справочника.
			ВозможноЗаписатьПользователяИБ = Ложь;
		Иначе
			// Пользователь ИБ с указанным именем уже существует и не занят,
			// возможно привязать пользователя ИБ к пользователю справочника.
			ЗаписатьПользователяИБ = Истина;
			ВозможноПривязатьПользователяИБ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ВозможноЗаписатьПользователяИБ Тогда
		
		Если ВозможноПривязатьПользователяИБ Тогда
			
			ОписаниеПользователяИБ.Вставить(
				"УникальныйИдентификатор", УчетнаяЗапись.УникальныйИдентификатор);
		КонецЕсли;
		
		Если УчетнаяЗапись = Неопределено Тогда
			ОписаниеПользователяИБ.Вставить("Имя",       ИмяПользователяИБ);
			ОписаниеПользователяИБ.Вставить("ПолноеИмя", ПолноеИмяПользователя);
			ОписаниеПользователяИБ.Вставить("АутентификацияСтандартная", Истина);
			ОписаниеПользователяИБ.Вставить("ПоказыватьВСпискеВыбора", Истина);
			
		ИначеЕсли УчетнаяЗапись.ПолноеИмя <> ПолноеИмяПользователя Тогда
			ЗаписатьПользователяИБ = Истина;
			УчетнаяЗапись.ПолноеИмя = ПолноеИмяПользователя;
		КонецЕсли;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
	КонецЕсли;
	
	Если ЗаписатьПользователя
	 ИЛИ ЗаписатьПользователяИБ Тогда
		
		Если ЗначениеЗаполнено(Пользователь) Тогда
			ПользовательОбъект = Пользователь.ПолучитьОбъект();
		КонецЕсли;
		
		Если ЗаписатьПользователяИБ Тогда
			ПользовательОбъект.ДополнительныеСвойства.Вставить(
				"ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		КонецЕсли;
		
		ПользовательОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры
