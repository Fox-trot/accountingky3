////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы Бухгалтерия для предприятия, редакция 3.0.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "БухгалтерияДляКыргызстана";
	Описание.Версия = "3.1.9.17";
	Описание.ИдентификаторИнтернетПоддержки = ИнтернетПоддержкаПользователейПереопределяемыйБП.ИмяПрограммы();

	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики этого события для подсистем БСП добавляются через подписку на служебное событие:
	// "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления".
	//
	// Процедуры обработки этого события всех подсистем БСП имеют то же имя, что и эта процедура,
	// но размещены в своих подсистемах.
	// Чтобы найти процедуры можно выполнить глобальный поиск по имени процедуры.
	// Чтобы найти модули в которых размещены процедуры, можно выполнить поиск по имени события.
	
	// Обработчики, выполняемые при заполнении пустой ИБ.
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПервыйЗапуск";
	Обработчик.Комментарий = НСтр("ru = 'Выполнение обработчиков первого запуска.'");
	
	// Обработчики, выполняемые при каждом обновлении ИБ.
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьДатуТекущейВерсии";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Оперативно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПроверитьВалютуРегламентированногоУчета";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.0";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ИнициализироватьПользователей";
	Обработчик.Комментарий = НСтр("ru = 'Инициализация пользователей.'");
	
	// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию.
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.6.30";
	//Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьПредопределенныеВидыКонтактнойИнформацииКонтрагентов";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьПредопределенныеВидыКонтактнойИнформации";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Приоритет = 99;
	Обработчик.НачальноеЗаполнение = Истина;
	
	// Обработчики отложенного обновления.
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.1.8.22";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ДобавитьЭлементПроверкиУчета";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("77625fc7-3c22-405b-bd99-957dfb154885");
	Обработчик.Комментарий = НСтр("ru = 'Обновление проверок учета.'");
	
	// Обработчики оперативного обновления.
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.1.8.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьПризнакЗачетНДСВТабличныхЧастяхДопрасходов";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение признака зачета НДС в табличных частях в документе Дополнительные расходы.'");
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.1.8.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьЦенообразование";
	Обработчик.Комментарий = НСтр("ru = 'Выполнение процедур ценообразования.'");
	Обработчик.НачальноеЗаполнение = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.1.8.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьНовыеРеквизитыТабличныхЧастейРеализацииИВозврата";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение новых реквизитов по скидке в ТЧ документов.'");
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.1.8.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьЗначениеКонстанты_ОтдельнаяПроводкаПоСкидке";
	Обработчик.Комментарий = НСтр("ru = 'Установка константы ""Отдельная проводка по скидке"".'");
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.1.8.12";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбработкаВодителяТТН";
	Обработчик.Комментарий = НСтр("ru = 'Обработка поля ""Водитель"" для ТТН.'");
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.1.8.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьВидОперацииПоступлениеТоваровУслуг";
	Обработчик.Комментарий = НСтр("ru = 'Обновить вид операции в документах ""Поступление товаров и услуг"".'");
	Обработчик.НачальноеЗаполнение = Ложь;
			
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.2";
	Обработчик.Процедура = "УправлениеКонтактнойИнформациейСлужебный.ОбновитьСуществующиеСтраныМира";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Комментарий = НСтр("ru = 'Обновление наименования стран мира.'");
	Обработчик.ОбщиеДанные = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьАвансыПодотчетника";
	Обработчик.Комментарий = НСтр("ru = 'Обновление данных регистра сведений ""Авансы подотчетника"".'");
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.ОбщиеДанные = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ДобавитьСтатьюДДС";
	Обработчик.Комментарий = НСтр("ru = 'Добавление статьи ДДС.'");
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.ОбщиеДанные = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьЭСФ";
	Обработчик.Комментарий = НСтр("ru = 'Обновление документов ЭСФ.'");
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.ОбщиеДанные = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.1.9.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПровестиДокументыЗаявлениеОВвозеТоваров";
	Обработчик.Комментарий = НСтр("ru = 'Проведение документов Заявление о ввозе товаров.'");
	Обработчик.НачальноеЗаполнение = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.1.9.15";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПровестиДокументыЭлектронныйСчетФактураВыписанный";
	Обработчик.Комментарий = НСтр("ru = 'Проведение документов ЭСФ.'");
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Версия = "3.1.9.16";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьКодыПоставокНДС";
	Обработчик.Комментарий = НСтр("ru = 'Обновление кодов поставок НДС.'");
	Обработчик.НачальноеЗаполнение = Ложь;
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
		
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "ПредыдущееИмяКонфигурацииБазовая" Тогда
		Параметры.ВерсияКонфигурации = ПредыдущаяВерсияКонфигурации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение пустой ИБ

// Процедура заполняет пустую ИБ.
//
Процедура ПервыйЗапуск() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	// В новой базе устанавливается режим интерфейса "Такси".
	Константы.ИнтерфейсТакси.Установить(Истина);
	Константы.ИнтерфейсВерсии82.Установить(Ложь);
	Константы.ФункциональнаяОпцияУчетПоНесколькимОрганизациям.Установить(Ложь);
	Константы.НеВестиУчетПоОрганизациям.Установить(Истина);

	// Запасы.
	Константы.КонтролироватьОстаткиПриПроведении.Установить(Истина);
	Константы.ТочностьЦены.Установить(2);
	Константы.НастройкаЗаполненияЦены.Установить(Перечисления.НастройкаЗаполненияЦены.ПредыдущийДокумент);
	
	// Заполнение плана счетов.
	ПланыСчетов.Хозрасчетный.ЗаполнитьПоУмолчанию();	
	
	// Заполнение счетов учета номенклатуры
	РегистрыСведений.СчетаУчетаНоменклатуры.ЗаполнитьПоУмолчанию();
	РегистрыСведений.СчетаРасчетовСКонтрагентами.ЗаполнитьПоУмолчанию();
		
	// Корректировка себестоимости
	Константы.БазаРаспределенияКорректировкиСебестоимости.Установить(Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость);
	
	// Валюта регламентированного учета.
	НациональнаяВалютаСсылка = Справочники.Валюты.НайтиПоКоду("417");	
	Константы.ВалютаРегламентированногоУчета.Установить(НациональнаяВалютаСсылка);
			
	// Курсы валют на 01.01.2015.
	РегистрыСведений.КурсыВалют.ЗаполнитьПоУмолчанию();
	
	// Назначение основаной кассы организации.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Владелец", БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));
	СтруктураПараметров.Вставить("НоваяОсновнаяКасса", Справочники.Кассы.НайтиПоНаименованию("Основная касса"));
	ЗаписатьОсновнуюКассу(СтруктураПараметров);
	
	// Учет заработной платы и кадров.
	РегистрыСведений.СтавкиНалоговЗаработнойПлаты.ЗаполнитьПоУмолчанию();
	РегистрыСведений.НормыБольничныхЛистов.ЗаполнитьПоУмолчанию();
	РегистрыСведений.ТарифыКомандировочных.ЗаполнитьПоУмолчанию();
	РегистрыСведений.УчетнаяПолитикаПоПерсоналу.ЗаполнитьПоУмолчанию();

	// Налогообложение.
	РегистрыСведений.СтавкиНДС.ЗаполнитьПоУмолчанию();
	РегистрыСведений.СтавкиНСП.ЗаполнитьПоУмолчанию();
	Справочники.НастройкиНалоговойДекларации.ЗаполнитьПоУмолчанию();
	
	// Регламентированная отчетность.
	Константы.ИспользоватьСтатьиДвиженияДенежныхСредств.Установить(Истина);
	СтатьяДДСКурсоваяРазница = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Нереализованные прибыли и убытки от курсовых разниц", Истина);
	Константы.СтатьяДДСКурсоваяРазница.Установить(СтатьяДДСКурсоваяРазница);
	Справочники.НастройкиРегламентированныхОтчетов.ЗаполнитьПоУмолчанию();
	
	// Прочее.
	Константы.ФункциональнаяОпцияДопРасходыНаОдноПоступление.Установить(Истина);
	Константы.РазмерОтступаВОтчетах.Установить(20);
	Константы.МакетОформленияОтчетов.Установить("Арктика");

КонецПроцедуры // ПервыйЗапуск()

////////////////////////////////////////////////////////////////////////////////
// Обновление ИБ

Процедура УстановитьДатуТекущейВерсии() Экспорт
	// В режиме сервиса не требуется напоминать об обновлении
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Константы.ДатаТекущейВерсии.Установить(Дата(2020,08,06));
КонецПроцедуры

Процедура ПроверитьВалютуРегламентированногоУчета(Параметры = Неопределено) Экспорт
	
	Если Константы.ВалютаРегламентированногоУчета.Получить() = Справочники.Валюты.ПустаяСсылка() Тогда
		
		ВалютаСом = Справочники.Валюты.НайтиПоКоду("417");
		
		Если ВалютаСом = Неопределено Тогда
			
			ВалютаСом = Справочники.Валюты.НайтиПоНаименованию("KGS");	
			
		КонецЕсли;	
		
		Константы.ВалютаРегламентированногоУчета.Установить(ВалютаСом);	
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет значения реквизитов предопределенных видов контактной информации
//
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформации() Экспорт
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	// Организации
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ЮрАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.ВидРедактирования = "Диалог";
	ПараметрыВида.Порядок = 1;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ФактАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.ВидРедактирования = "Диалог";
	ПараметрыВида.Порядок = 2;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Факс");
	ПараметрыВида.Вид = "ФаксОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 4;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "EmailОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 5;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ПочтовыйАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.ВидРедактирования = "Диалог";
	ПараметрыВида.Порядок = 6;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Другое");
	ПараметрыВида.Вид = "ДругаяИнформацияОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 7;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
		
	// Контрагенты
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ЮрАдресКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ФактАдресКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Факс");
	ПараметрыВида.Вид = "ФаксКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 4;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "EmailКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 5;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ПочтовыйАдресКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.ВидРедактирования = "Диалог";
	ПараметрыВида.Порядок = 6;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Физические Лица
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "АдресМестаПроживанияФизическиеЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.ВидРедактирования = "Диалог";
	ПараметрыВида.Порядок = 1;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "АдресПоПропискеФизическиеЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.ВидРедактирования = "Диалог";
	ПараметрыВида.Порядок = 2;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонДомашнийФизическиеЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонРабочийФизическиеЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 4;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "EmailФизическиеЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 5;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
КонецПроцедуры // ВключитьМножественныйВводКонтактнойИнформации()

#КонецОбласти

#Область ОбработчикиСозданиеПользователей

// Процедура инициализации пользователей конфигурации. 
//
Процедура ИнициализироватьПользователей() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	//// Добавление администратора (администратор системы - полные права).
	//Пользователи.СоздатьАдминистратора();
	//
	//// Добавление пользователя.
	//ДобавитьПользователя(НСтр("ru = 'Пользователь'"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьОсновнуюКассу(СтруктураПараметров)
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.Владелец) Тогда 
		Возврат;
	КонецЕсли;	
	
	ВладелецОбъект = СтруктураПараметров.Владелец.ПолучитьОбъект();
	ВладелецУспешноЗаблокирован = Истина;
	
	Попытка
		ВладелецОбъект.Заблокировать();
	Исключение
		
		ВладелецУспешноЗаблокирован = Ложь;
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось заблокировать %1: %2, для изменения основной кассы, по причине:
				|%3'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
				СтруктураПараметров.Владелец.Метаданные().ПредставлениеОбъекта, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,, ВладелецОбъект, ТекстСообщения);
		
	КонецПопытки;
	
	// Если удалось заблокировать, изменим основную кассу у организации.
	Если ВладелецУспешноЗаблокирован Тогда
		ВладелецОбъект.ОсновнаяКасса = СтруктураПараметров.НоваяОсновнаяКасса;
		ВладелецОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбновления

#Область Обновление_3_1_8

// Вызывается при переходе на версию конфигурации 3.1.8.3.
//
Процедура ЗаполнитьПризнакЗачетНДСВТабличныхЧастяхДопрасходов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеРасходы.Ссылка КАК Ссылка,
		|	ДополнительныеРасходы.УдалитьЗачетНДС КАК УдалитьЗачетНДС
		|ИЗ
		|	Документ.ДополнительныеРасходы КАК ДополнительныеРасходы
		|ГДЕ
		|	НЕ ДополнительныеРасходы.ПометкаУдаления";	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл				
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл
			СтрокаТабличнойЧасти.ЗачетНДС = Выборка.УдалитьЗачетНДС;	
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.ОС Цикл
			СтрокаТабличнойЧасти.ЗачетНДС = Выборка.УдалитьЗачетНДС;	
		КонецЦикла;
			
		Попытка
		 	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект)
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось заполнить признаки зачета НДС в табличных частях в документе Дополнительные расходы: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);			
			ВызватьИсключение;		
		КонецПопытки;		
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.1.8.9.
//
Процедура ОбновитьЦенообразование() Экспорт
	
	Константы.НастройкаЗаполненияЦены.Установить(Перечисления.НастройкаЗаполненияЦены.ПредыдущийДокумент);
	
	// Снять пометку удаления с ТипыЦенНоменклатуры
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТипыЦенНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
		|ГДЕ
		|	ТипыЦенНоменклатуры.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СправочникОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();	
		СправочникОбъект.УстановитьПометкуУдаления(Ложь);
	КонецЦикла;

	// Заполнить констатну ТипЦенПлановойСебестоимостиНоменклатуры по наименованию.
	Если Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить().Пустая() Тогда 
		ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию("Плановая");
		Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Установить(ТипЦен);
	КонецЕсли;	
	
	// Заполнить РС ЦеныНоменклатурыДокументов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.Ссылка.Дата) КАК Дата
		|ПОМЕСТИТЬ ВременнаяТаблицаСрезНоменклатуры
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка.Проведен
		|	И НЕ ПоступлениеТоваровУслугТовары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровУслугТовары.Номенклатура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугУслуги.Номенклатура,
		|	МАКСИМУМ(ПоступлениеТоваровУслугУслуги.Ссылка.Дата)
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		|ГДЕ
		|	ПоступлениеТоваровУслугУслуги.Ссылка.Проведен
		|	И НЕ ПоступлениеТоваровУслугУслуги.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровУслугУслуги.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияЦен.ПоЗакупочнымЦенам) КАК СпособЗаполненияЦены,
		|	МАКСИМУМ(ПоступлениеТоваровУслугТовары.Цена) КАК Цена,
		|	ПоступлениеТоваровУслугТовары.Ссылка.СуммаВключаетНалоги КАК ЦенаВключаетНалоги,
		|	ПоступлениеТоваровУслугТовары.Ссылка.ВалютаДокумента КАК Валюта
		|ИЗ
		|	ВременнаяТаблицаСрезНоменклатуры КАК ВременнаяТаблицаСрезНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|		ПО ВременнаяТаблицаСрезНоменклатуры.Дата = ПоступлениеТоваровУслугТовары.Ссылка.Дата
		|			И ВременнаяТаблицаСрезНоменклатуры.Номенклатура = ПоступлениеТоваровУслугТовары.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровУслугТовары.Номенклатура,
		|	ПоступлениеТоваровУслугТовары.Ссылка.СуммаВключаетНалоги,
		|	ПоступлениеТоваровУслугТовары.Ссылка.ВалютаДокумента
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугУслуги.Номенклатура,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияЦен.ПоЗакупочнымЦенам),
		|	МАКСИМУМ(ПоступлениеТоваровУслугУслуги.Цена),
		|	ПоступлениеТоваровУслугУслуги.Ссылка.СуммаВключаетНалоги,
		|	ПоступлениеТоваровУслугУслуги.Ссылка.ВалютаДокумента
		|ИЗ
		|	ВременнаяТаблицаСрезНоменклатуры КАК ВременнаяТаблицаСрезНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		|		ПО ВременнаяТаблицаСрезНоменклатуры.Дата = ПоступлениеТоваровУслугУслуги.Ссылка.Дата
		|			И ВременнаяТаблицаСрезНоменклатуры.Номенклатура = ПоступлениеТоваровУслугУслуги.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровУслугУслуги.Номенклатура,
		|	ПоступлениеТоваровУслугУслуги.Ссылка.СуммаВключаетНалоги,
		|	ПоступлениеТоваровУслугУслуги.Ссылка.ВалютаДокумента";
	РезультатЗапроса = Запрос.Выполнить();
	
	ЦеныНоменклатурыДокументов = РегистрыСведений.ЦеныНоменклатурыДокументов.СоздатьНаборЗаписей();
	ЦеныНоменклатурыДокументов.Прочитать();
	ЦеныНоменклатурыДокументов.Очистить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяЗапись = ЦеныНоменклатурыДокументов.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);		
	КонецЦикла;
	
	ЦеныНоменклатурыДокументов.Записать();
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.1.8.10.
//
Процедура ЗаполнитьНовыеРеквизитыТабличныхЧастейРеализацииИВозврата() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслуг.Дата КАК Период,
		|	РеализацияТоваровУслуг.Организация КАК Организация,
		|	РеализацияТоваровУслуг.БезналичныйРасчет КАК БезналичныйРасчет,
		|	РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
		|	РеализацияТоваровУслуг.СтавкаНСП КАК СтавкаНСП,
		|	РеализацияТоваровУслуг.СтавкаНСПУслуги КАК СтавкаНСПУслуги
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	НЕ РеализацияТоваровУслуг.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателя.Ссылка,
		|	ВозвратТоваровОтПокупателя.Дата,
		|	ВозвратТоваровОтПокупателя.Организация,
		|	ВозвратТоваровОтПокупателя.БезналичныйРасчет,
		|	ВозвратТоваровОтПокупателя.СтавкаНДС,
		|	ВозвратТоваровОтПокупателя.СтавкаНСП,
		|	ВозвратТоваровОтПокупателя.СтавкаНСПУслуги
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		|ГДЕ
		|	НЕ ВозвратТоваровОтПокупателя.ПометкаУдаления";	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	
	ПараметрыРасчета = Новый Структура();
	ПараметрыРасчета.Вставить("Период",				 	Неопределено);
	ПараметрыРасчета.Вставить("БезналичныйРасчет", 	 	Неопределено);
	ПараметрыРасчета.Вставить("Организация", 		 	Неопределено);
	ПараметрыРасчета.Вставить("СуммаВключаетНалоги", 	Истина);
	ПараметрыРасчета.Вставить("СчитатьСкидкуОтдельно", 	Истина);
	
	ДанныеСтроки = Новый Структура();
	ДанныеСтроки.Вставить("СтавкаНДС", 			Неопределено);
	ДанныеСтроки.Вставить("СтавкаНСП", 			Неопределено);
	ДанныеСтроки.Вставить("Сумма", 				0);
	ДанныеСтроки.Вставить("СуммаСкидки", 		0);
	ДанныеСтроки.Вставить("СуммаНДС", 			0);
	ДанныеСтроки.Вставить("СуммаНСП", 			0);
	ДанныеСтроки.Вставить("СуммаНДССкидки", 	0);
	ДанныеСтроки.Вставить("СуммаНСПСкидки", 	0);
	ДанныеСтроки.Вставить("СуммаДоходаСкидки", 	0);
	
	СтавкаНСПОС = Справочники.СтавкиНСП.Прочее;
	
	Пока Выборка.Следующий() Цикл	
		ЗаполнитьЗначенияСвойств(ПараметрыРасчета, Выборка); 
		
		ДанныеСтроки.СтавкаНДС = Выборка.СтавкаНДС;
		ДанныеСтроки.СтавкаНСП = Выборка.СтавкаНСП;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТабличнойЧасти);
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(ДанныеСтроки, ПараметрыРасчета);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСкидкиСтрокиТабличнойЧасти(ДанныеСтроки);
			
			СтрокаТабличнойЧасти.СуммаНДССкидки 	= ДанныеСтроки.СуммаНДССкидки;
			СтрокаТабличнойЧасти.СуммаНСПСкидки 	= ДанныеСтроки.СуммаНСПСкидки;
			СтрокаТабличнойЧасти.СуммаДоходаСкидки 	= ДанныеСтроки.СуммаДоходаСкидки;
		КонецЦикла;

		ДанныеСтроки.СтавкаНСП = Выборка.СтавкаНСПУслуги;
		
		Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТабличнойЧасти);
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(ДанныеСтроки, ПараметрыРасчета);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСкидкиСтрокиТабличнойЧасти(ДанныеСтроки);
			
			СтрокаТабличнойЧасти.СуммаНДССкидки 	= ДанныеСтроки.СуммаНДССкидки;
			СтрокаТабличнойЧасти.СуммаНСПСкидки 	= ДанныеСтроки.СуммаНСПСкидки;
			СтрокаТабличнойЧасти.СуммаДоходаСкидки 	= ДанныеСтроки.СуммаДоходаСкидки;
		КонецЦикла;
		
		ДанныеСтроки.СтавкаНСП = СтавкаНСПОС;
		
		Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТабличнойЧасти);
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(ДанныеСтроки, ПараметрыРасчета);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСкидкиСтрокиТабличнойЧасти(ДанныеСтроки);	
			
			СтрокаТабличнойЧасти.СуммаНДССкидки 	= ДанныеСтроки.СуммаНДССкидки;
			СтрокаТабличнойЧасти.СуммаНСПСкидки 	= ДанныеСтроки.СуммаНСПСкидки;
			СтрокаТабличнойЧасти.СуммаДоходаСкидки 	= ДанныеСтроки.СуммаДоходаСкидки;
		КонецЦикла;
			
		Попытка
		 	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект)
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось заполнить новые реквизиты табличных частей в документе Реализация (Возврат): %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);			
			ВызватьИсключение;		
		КонецПопытки;		
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.1.8.10.
//
Процедура УстановитьЗначениеКонстанты_ОтдельнаяПроводкаПоСкидке() Экспорт
	
	Константы.ОтдельнаяПроводкаПоСкидке.Установить(Истина);
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.1.8.12.
//
Процедура ОбработкаВодителяТТН() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслуг.удалитьВодитель.Наименование КАК удалитьВодительНаименование
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	НЕ РеализацияТоваровУслуг.ПометкаУдаления
		|	И НЕ РеализацияТоваровУслуг.удалитьВодитель = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();	
		ДокументОбъект.Водитель = ВыборкаДетальныеЗаписи.удалитьВодительНаименование;
		
		Попытка
		 	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось заполнить данные о водителе: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);			
			ВызватьИсключение;		
		КонецПопытки;		
		
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.1.8.13.
//
Процедура ОбновитьВидОперацииПоступлениеТоваровУслуг() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Покупка)
		|	И НЕ ПоступлениеТоваровУслуг.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НовыйВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Покупка;
		
		ЕстьТовары = 0;
		Если Выборка.Ссылка.Товары.Количество() > 0 Тогда 
			НовыйВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
			ЕстьТовары = 1;
		КонецЕсли;
		
		ЕстьУслуги = 0;
		Если Выборка.Ссылка.Услуги.Количество() > 0 Тогда 
			НовыйВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги;
			ЕстьУслуги = 1;
		КонецЕсли;
		
		ЕстьОС = 0;
		Если Выборка.Ссылка.ОС.Количество() > 0 Тогда  
			НовыйВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства;
			ЕстьОС = 1;			
		КонецЕсли;	
		
		Если ЕстьТовары + ЕстьУслуги + ЕстьОС > 1 Тогда 
			Продолжить;
		КонецЕсли;	
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ВидОперации = НовыйВидОперации;
			
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);			
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обновить вид операции по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.1.8.22.
//
Процедура ДобавитьЭлементПроверкиУчета(Параметры) Экспорт

	КонтрольВеденияУчетаСлужебный.ОбновитьВспомогательныеДанныеПоИзменениямКонфигурации();
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_1_9

// Вызывается при переходе на версию конфигурации 3.1.9.3.
//
Процедура ОбновитьАвансыПодотчетника() Экспорт
	// Заполнить СчетУчета и ДатаАванса.
	// Подготовка - начиная с версии 3.1.11 регистр АвансыПодотчетника будет не периодический.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АвансыПодотчетника.Период КАК Период,
		|	АвансыПодотчетника.Регистратор КАК Регистратор,
		|	ВЫБОР
		|		КОГДА АвансыПодотчетника.ДокументАванса ССЫЛКА Документ.АвансовыйОтчет
		|			ТОГДА АвансыПодотчетника.ДокументАванса.СчетУчета
		|		ИНАЧЕ АвансыПодотчетника.ДокументАванса.СчетРасчетов
		|	КОНЕЦ КАК СчетУчета
		|ИЗ
		|	РегистрСведений.АвансыПодотчетника КАК АвансыПодотчетника";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		АвансыПодотчетника = РегистрыСведений.АвансыПодотчетника.СоздатьНаборЗаписей();
		АвансыПодотчетника.Отбор.Регистратор.Установить(Выборка.Регистратор);
		АвансыПодотчетника.Прочитать();
		
		Для Каждого ЗаписьАвансыПодотчетника Из АвансыПодотчетника Цикл 
			ЗаписьАвансыПодотчетника.СчетУчета = Выборка.СчетУчета;
			ЗаписьАвансыПодотчетника.ДатаАванса = Выборка.Период;			
		КонецЦикла;	
			
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(АвансыПодотчетника);			
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записть набор записей ""Авансы подотчетника"" по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.1.9.8.
//
Процедура ДобавитьСтатьюДДС() Экспорт
	
	СправочникОбъект = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
	СправочникОбъект.Наименование = "Розничная выручка";
	СправочникОбъект.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Операционная деятельность", Истина);
	СправочникОбъект.КодСтроки = "010";
	
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.1.9.10.
//
Процедура ОбновитьЭСФ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлектронныйСчетФактураВыписанныйТовары.Ссылка КАК Ссылка,
		|	ЭлектронныйСчетФактураВыписанныйТовары.Ссылка.ДоговорКонтрагента.ВалютаРасчетов КАК ВалютаРасчетов,
		|	МАКСИМУМ(ЭлектронныйСчетФактураВыписанныйТовары.удалитьСтавкаНДС) КАК СтавкаНДС,
		|	МАКСИМУМ(ЭлектронныйСчетФактураВыписанныйТовары.удалитьСтавкаНСП) КАК СтавкаНСП
		|ИЗ
		|	Документ.ЭлектронныйСчетФактураВыписанный.Товары КАК ЭлектронныйСчетФактураВыписанныйТовары
		|ГДЕ
		|	НЕ ЭлектронныйСчетФактураВыписанныйТовары.Ссылка.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭлектронныйСчетФактураВыписанныйТовары.Ссылка";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НужнаЗапись = Ложь;

		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.СтавкаНДС) Тогда 
			ДокументОбъект.СтавкаНДС = ВыборкаДетальныеЗаписи.СтавкаНДС;
			НужнаЗапись = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.СтавкаНСП) Тогда 
			ДокументОбъект.СтавкаНСП = ВыборкаДетальныеЗаписи.СтавкаНСП;
			НужнаЗапись = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда 
			ДокументОбъект.ВалютаДокумента = ВыборкаДетальныеЗаписи.ВалютаРасчетов;
			НужнаЗапись = Истина;
		КонецЕсли;
		
		// Заполнение сумм.
		Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл 
			Если СтрокаТабличнойЧасти.СуммаНДСВВалютеРеглУчета = 0 
				Или СтрокаТабличнойЧасти.СуммаНСПВВалютеРеглУчета = 0	
				Или СтрокаТабличнойЧасти.ВсегоВВалютеРеглУчета = 0 Тогда 
				
				Если ДокументОбъект.Курс = 0 Тогда 
					ДокументОбъект.Курс = 1;
				КонецЕсли;	
				
				Курс = ДокументОбъект.Курс;
				СтрокаТабличнойЧасти.СуммаНДСВВалютеРеглУчета = СтрокаТабличнойЧасти.СуммаНДС * Курс;
				СтрокаТабличнойЧасти.СуммаНСПВВалютеРеглУчета = СтрокаТабличнойЧасти.СуммаНСП * Курс;
				СтрокаТабличнойЧасти.ВсегоВВалютеРеглУчета = СтрокаТабличнойЧасти.Всего * Курс;
				
				НужнаЗапись = Истина;
			КонецЕсли;	
		КонецЦикла;		
		
		Если НЕ НужнаЗапись Тогда 
			Продолжить;
		КонецЕсли;	
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);			
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать документ ЭСФ по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.1.9.13.
//
Процедура ПровестиДокументыЗаявлениеОВвозеТоваров() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявлениеОВвозеТоваров.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
		|ГДЕ
		|	НЕ ЗаявлениеОВвозеТоваров.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект,,,РежимЗаписиДокумента.Проведение);			
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось провести документ по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.1.9.15.
//
Процедура ПровестиДокументыЭлектронныйСчетФактураВыписанный() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлектронныйСчетФактураВыписанный.Ссылка КАК Ссылка,
		|	ЭлектронныйСчетФактураВыписанный.ДоговорКонтрагента.КодПоставкиНДС КАК ДоговорКонтрагентаКодПоставкиНДС,
		|	ЭлектронныйСчетФактураВыписанный.Проведен КАК Проведен
		|ИЗ
		|	Документ.ЭлектронныйСчетФактураВыписанный КАК ЭлектронныйСчетФактураВыписанный
		|ГДЕ
		|	НЕ ЭлектронныйСчетФактураВыписанный.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.КодПоставкиНДС) Тогда 
			ДокументОбъект.КодПоставкиНДС = Выборка.ДоговорКонтрагентаКодПоставкиНДС; 	
		КонецЕсли;	
			
		Попытка
			Если Выборка.Проведен Тогда 
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект,,,РежимЗаписиДокумента.Проведение);
			Иначе 
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект,,,РежимЗаписиДокумента.Запись);
			КонецЕсли;	
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось провести документ по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.1.9.16.
//
Процедура ОбновитьКодыПоставокНДС() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КодыПоставокНДС.Ссылка КАК Ссылка,
		|	КодыПоставокНДС.Код КАК Код
		|ИЗ
		|	Справочник.КодыПоставокНДС КАК КодыПоставокНДС
		|ГДЕ
		|	НЕ КодыПоставокНДС.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СправочникОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Если ВыборкаДетальныеЗаписи.Код < "120" Тогда 
			СправочникОбъект.ВидПоставки = Справочники.ВидыПоставокНДС.Облагаемая;
		ИначеЕсли ВыборкаДетальныеЗаписи.Код = "120" 
			Или ВыборкаДетальныеЗаписи.Код = "121" Тогда 
			СправочникОбъект.ВидПоставки = Справочники.ВидыПоставокНДС.Экспортная;
		ИначеЕсли ВыборкаДетальныеЗаписи.Код < "200" Тогда 
			СправочникОбъект.ВидПоставки = Справочники.ВидыПоставокНДС.Нулевая;
		ИначеЕсли ВыборкаДетальныеЗаписи.Код < "300" Тогда 
			СправочникОбъект.ВидПоставки = Справочники.ВидыПоставокНДС.Освобожденная;
		Иначе 
			СправочникОбъект.ВидПоставки = Справочники.ВидыПоставокНДС.Необлагаемая;
		КонецЕсли;	
			
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать элемент справочника по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;
КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти
