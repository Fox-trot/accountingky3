////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы Бухгалтерия для предприятия, редакция 3.0.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "БухгалтерияДляКыргызстана";
	Описание.Версия = "3.0.10.9";

	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики этого события для подсистем БСП добавляются через подписку на служебное событие:
	// "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления".
	//
	// Процедуры обработки этого события всех подсистем БСП имеют то же имя, что и эта процедура,
	// но размещены в своих подсистемах.
	// Чтобы найти процедуры можно выполнить глобальный поиск по имени процедуры.
	// Чтобы найти модули в которых размещены процедуры, можно выполнить поиск по имени события.
	
	// Обработчики, выполняемые при заполнении пустой ИБ
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПервыйЗапуск";
	Обработчик.Комментарий = НСтр("ru = 'Выполнение обработчиков первого запуска.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьДатуТекущейВерсии";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Оперативно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.0";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ИнициализироватьПользователей";
	Обработчик.Комментарий = НСтр("ru = 'Инициализация пользователей.'");
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.0";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьПредопределенныеВидыКонтактнойИнформации";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Комментарий = НСтр("ru = 'Обновление видов контактной информации.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.3.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ИзменитьСубконтоСчетовПроизводства";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("628bc950-42cd-458d-9b94-df51cb70d38a");
	Обработчик.Комментарий = НСтр("ru = 'Изменение субконто у счетов 1630 и 1640.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.4.30";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ИзменитьРазделУчетаВВодОстатков";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ef1ff80e-1fdc-44b3-aa28-20ca35b3bbef");
	Обработчик.Комментарий = НСтр("ru = 'Изменение раздела учета для документов ""Ввод начальных остатков""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.4.36";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьОсновныеДоговорыКонтрагента";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("66c21d0f-0e61-4c77-b3e4-2f9dd8b099a0");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра сведений ""Основные договоры контрагента""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.4.51";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОчиститьРегистрСостоянияЗаказов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2b0885b6-aff1-460c-a31e-86a5771dfee6");
	Обработчик.Комментарий = НСтр("ru = 'Очищение регистра сведений ""Состояние заказов""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.4.59";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьДопРасходыНаОдноПоступление";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6886f263-8ab1-4195-b2b6-02c2cc01a99e");
	Обработчик.Комментарий = НСтр("ru = 'Установка значения функциональной опции по дополнительным расходам'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.5.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.СнятьПометкуСНепредоределенныхЭлементов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d6f07416-ed4d-4c49-b3f3-61d38e114fec");
	Обработчик.Комментарий = НСтр("ru = 'Снятие пометки удаления с не предопределенных элементов справочников'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.5.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьЗначениеКонстантыНеВестиУчетПоОрганизациям";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("55d1a55c-4069-4e22-bd49-f4e53758bb64");
	Обработчик.Комментарий = НСтр("ru = 'Установка значения константы ""НеВестиУчетПоОрганизациям"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.5.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьСписокСтран";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("24143f6e-e564-49a6-a761-31f5a3da67ae");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение списка стран'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.5.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ДобавитьЭлементПроверкиУчета";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9835f408-3277-4d17-ad75-282940f12fc0");
	Обработчик.Комментарий = НСтр("ru = 'Добавление элемента справочника'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.19";
	Обработчик.Процедура = "МониторРуководителя.ЗаполнитьДанныеМонитораРуководителя";
	Обработчик.НачальноеЗаполнение = Истина; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.5.20";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьСубконтоСчета_ОсновноеПроизводство";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("15690750-d95b-476f-bd0d-1c2385086146");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение субконто у счета 1630.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.5.26";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.РедактированиеНаименованийСчетовИУдалениеСубконто";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e27d7a6c-827b-43fe-a60b-de99acb98428");
	Обработчик.Комментарий = НСтр("ru = 'Редактирование наименований некоторых счетов и удаление субконто счетов-групп.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.5.28";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнениеРеквизитовПервичныхДокументов";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов первичных документов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.6.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ДобавитьСубконтоСчету_8100";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a0c09be2-4182-4851-9957-62946e7ab795");
	Обработчик.Комментарий = НСтр("ru = 'Добавление счету 8100 субконто ""Статьи затрат"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.6.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьРегистрСведенийСтавкиНДС";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ac1a1e8c-0869-447c-b3a7-a776e21840d6");
	Обработчик.Комментарий = НСтр("ru = 'Перезаполнение регистра сведений ""Ставки НДС"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.6.30";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьУстановкаТарифовКомандировочных";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("21ec90da-3c3d-44e7-afbf-7214e474d47a");
	Обработчик.Комментарий = НСтр("ru = 'Обновляет данные регистра сведений ""Тарифы командировочных"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.6.32";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьВалютуКурсКратность_АвансовыйОтчет_Прочее";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b053415b-72c3-475b-8ba7-52665bd90764");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение валюты, курса и кратности в ТЧ ""Прочее"" документа ""Авансовый отчет"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.6.43";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьСуммыДохода";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("750f8efd-238e-4c8a-8b3a-48d4739b6c7c");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение сумм дохода в документах.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.46";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ВключитьИспользованиеДополнительныхРеквизитовИСведений";
	Обработчик.НачальноеЗаполнение = Ложь;          
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.7.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ИспользоватьСтатьиДвиженияДенежныхСредств";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b5bdd1fa-68f3-4ece-b287-80329492c204");
	Обработчик.Комментарий = НСтр("ru = 'Установка использования статьи движения денежных средств.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.7.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновлениеСтранМира";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2739594c-b699-4bdb-9f86-491b0db52c76");
	Обработчик.Комментарий = НСтр("ru = 'Обновление предопределенных элементов стран мира.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.8.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьРегистрСчетаФактурыВыписанные";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f169cfb0-a758-4ba6-be72-d5f76cda5139");
	Обработчик.Комментарий = НСтр("ru = 'Обновление данных в регистре сведений ""Счета фактуры выписанные"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.8.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьРегистрПродажи";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a52e25a8-4c59-49d5-80a5-e1c0349a242a");
	Обработчик.Комментарий = НСтр("ru = 'Обновление данных в регистре накопление ""Продажи"".'");
	                                 
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.8.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ДополнитьРегистрСчетаФактурыВыписанные";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b3afebd9-8dcf-464e-aa14-0c106cc758a3");
	Обработчик.Комментарий = НСтр("ru = 'Дополнение данных в регистре сведений ""Счета фактуры выписанные"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.8.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ДополнитьРегистрРеестрПриобретенныхМатериальныхРесурсов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("46394503-0b7f-4b3a-8a5e-3ea7cc030acb");
	Обработчик.Комментарий = НСтр("ru = 'Дополнение данных в регистре сведений ""Реестр приобретенных материальных ресурсов"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.8.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьРегистрДанныеДляОтчетаРеестрВвезенных";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d4f54c0b-ab3c-44c5-baf7-1e2301960eab");
	Обработчик.Комментарий = НСтр("ru = 'Обновление данных в регистре накопления ""Данные для отчета реестр ввезенных"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.8.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УдалениеПарыУСчетов_1540_И_3430";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("121624dd-8886-42fd-a0bd-7507d23789a1");
	Обработчик.Комментарий = НСтр("ru = 'Удаление парного счета у счетов ""1540"" и ""3430"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.8.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьКонтрагентаВРегистре_ДанныеДляОтчетаРеестрВвезенных";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4aa3c67c-c314-4c68-9682-a4b7a3d6341c");
	Обработчик.Комментарий = НСтр("ru = 'Обновление контрагента в регистре накопления ""Данные для отчета реестр ввезенных"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.8.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ДополнитьРегистрСчетаФактурыВыписанные";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7c4c6cb9-b995-45a0-bd3c-c9de672b621a");
	Обработчик.Комментарий = НСтр("ru = 'Дополнение данных в регистре сведений ""Счета фактуры выписанные"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.8.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ДополнитьРегистрСведенияОПоступлении";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("893de2bb-e550-46a5-8b68-12e2c4aee09c");
	Обработчик.Комментарий = НСтр("ru = 'Дополнение данных в регистре сведений ""Сведения о поступлении"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.9.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.СократитьКодФизическиеЛица";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1e3de78c-d72d-482d-9b1b-d50d666c343a");
	Обработчик.Комментарий = НСтр("ru = 'Сокращение кода в справочнике ""Физические лица"".'");

	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.9.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьДанныеСправочниковДляНалогаНаИмущество";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("819a99cb-9ce0-43a4-84eb-7bf9d517dbe4");
	Обработчик.Комментарий = НСтр("ru = 'Перезаполнение справочников для налога на имущество.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.9.17";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ДозаполнитьДокументыСчетФактурыПолученные";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4c639894-a7b7-4839-a837-59f880c8c4a4");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение новых реквизитов документа.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.10.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ДозаполнитьДокументыГТДПоИмпорту";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("75f5586c-06cd-49d5-8602-8495bef8a86a");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение новых реквизитов документа.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.10.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПерепровестиДокументыПостуленияИмпортЭкспорт";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c136c66c-2b59-4d41-a886-4b447307504d");
	Обработчик.Комментарий = НСтр("ru = 'Перепроведение документов поступления товаров и услуг с признаком страны ""Импорт/Экспорт"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.10.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьДанныеРегистраСведений_РеестрПриобретенныхМатериальныхРесурсов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("de5015ca-9129-4fc3-ad82-b3df4315abfe");
	Обработчик.Комментарий = НСтр("ru = 'Перепроведение документов РС ""Реестр приобретенных материальных ресурсов"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.10.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьСтажиСотрудников";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("37a83d6e-fe48-4ca4-8f70-f457feb8c031");
	Обработчик.Комментарий = НСтр("ru = 'Добавление периода в регистр сведений ""Стажи сотрудников"".'");
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
		
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "ПредыдущееИмяКонфигурацииБазовая" Тогда
		Параметры.ВерсияКонфигурации = ПредыдущаяВерсияКонфигурации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение пустой ИБ

// Процедура заполняет пустую ИБ.
//
Процедура ПервыйЗапуск() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	// В новой базе устанавливается режим интерфейса "Такси"
	Константы.ИнтерфейсТакси.Установить(Истина);
	Константы.ИнтерфейсВерсии82.Установить(Ложь);
	Константы.НеВестиУчетПоОрганизациям.Установить(Истина);

	////////////////////////////////////////////////////////////////////////////////
	// Параметры учета и план счетов
	ЗаполнитьПараметрыУчета();
	
	////////////////////////////////////////////////////////////////////////////////
	// Подсистема Банк/Касса
	ЗаполнитьДанныеПоПодсистемеБанкКасса();
	
	////////////////////////////////////////////////////////////////////////////////	
	// Подсистема Основные средства
	ЗаполнитьДанныеПоПодсистемеОсновныеСредства();
	
	////////////////////////////////////////////////////////////////////////////////
	// Подсистема Заработная плата
	ЗаполнитьДанныеПоЗаработнойПлате();

	// Налоги
	ЗаполнитьДанныеНалогообложения();
	
	// Регламентированная отчетность.
	Справочники.НастройкиРегламентированныхОтчетов.ЗаполнитьПоУмолчанию();
	
КонецПроцедуры // ПервыйЗапуск()

////////////////////////////////////////////////////////////////////////////////
// Обновление ИБ

// Демонстрирует процедуру-обработчик обновления данных ИБ, 
// которая выполняется каждый раз при смене версии конфигурации.
//
Процедура ВыполнятьВсегдаПриСменеВерсии(Параметры = Неопределено) Экспорт
	
	// Проверка необходимости обновления критичных общих данных
	ТребуетсяОбновитьКритичныеОбщиеДанные = Ложь;
	// Конец Проверка необходимости обновления критичных общих данных
	Если ТребуетсяОбновитьКритичныеОбщиеДанные Тогда
		Если Параметры <> Неопределено И НЕ Параметры.МонопольныйРежим Тогда
			Параметры.МонопольныйРежим = Истина;
			Возврат;
		КонецЕсли;
		// Код обновления критичных общих данных
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьДатуТекущейВерсии() Экспорт
	Константы.ДатаТекущейВерсии.Установить(Дата(2018,7,9));
КонецПроцедуры

// Обновляет значения реквизитов предопределенных видов контактной информации
//
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформации() Экспорт
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	// Организации
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ЮрАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ФактАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Факс");
	ПараметрыВида.Вид = "ФаксОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 4;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "EmailОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 5;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ПочтовыйАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 6;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Другое");
	ПараметрыВида.Вид = "ДругаяИнформацияОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 7;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
		
	// Контрагенты
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ЮрАдресКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ФактАдресКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Факс");
	ПараметрыВида.Вид = "ФаксКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 4;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "EmailКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 5;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ПочтовыйАдресКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 6;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Физические Лица
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "АдресМестаПроживанияФизическиеЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "АдресПоПропискеФизическиеЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонДомашнийФизическиеЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонРабочийФизическиеЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 4;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры // ВключитьМножественныйВводКонтактнойИнформации()

#КонецОбласти

#Область ОбработчикиПервогоЗапуска

// Заполняет данные параметров учета
//
Процедура ЗаполнитьПараметрыУчета()

	// Добавление организации.
	Справочники.Организации.ЗаполнитьПоУмолчанию();
	
	// Заполнение плана счетов.
	ПланыСчетов.Хозрасчетный.ЗаполнитьПоУмолчанию();	
	
	// Заполнение справочника ГНС
	Справочники.ГНС.ЗаполнитьПоУмолчанию();
		
	// Заполнение справочника Классификатор единиц измерения
	Справочники.КлассификаторЕдиницИзмерения.ЗаполнитьПоУмолчанию();
	
	// Заполнение счетов учета номенклатуры
	РегистрыСведений.СчетаУчетаНоменклатуры.ЗаполнитьПоУмолчанию();
	РегистрыСведений.СчетаРасчетовСКонтрагентами.ЗаполнитьПоУмолчанию();
		
	Константы.ФункциональнаяОпцияУчетПоНесколькимОрганизациям.Установить(Ложь);
	Константы.МакетОформленияОтчетов.Установить("Арктика");
	Константы.КонтролироватьОстаткиПриПроведении.Установить(Истина);
	Константы.ФункциональнаяОпцияДопРасходыНаОдноПоступление.Установить(Истина);
	Константы.ИспользоватьСтатьиДвиженияДенежныхСредств.Установить(Истина);
	
	// Прочее.
	Справочники.СтраныМира.ЗаполнитьПоУмолчанию();

КонецПроцедуры // ЗаполнитьПараметрыУчета()  

// Заполняет данные по подсиситеме Банк/Касса
//
Процедура ЗаполнитьДанныеПоПодсистемеБанкКасса()
	// Заполнение справочника "Валюты" 
	Справочники.Валюты.ЗаполнитьПоУмолчанию();
	
	// Добавление национальной валюты
	НациональнаяВалютаСсылка = Справочники.Валюты.НайтиПоКоду("417");	
	Константы.ВалютаРегламентированногоУчета.Установить(НациональнаяВалютаСсылка);
			
	// РС Курсы валют на 01.01.2015
	РегистрыСведений.КурсыВалют.ЗаполнитьПоУмолчанию();
	
	// Добавление касс 
	Справочники.Кассы.ЗаполнитьПоУмолчанию();
	
	// Заполнение справочника "Статьи ДДС"
	Справочники.СтатьиДвиженияДенежныхСредств.ЗаполнитьПоУмолчанию();
	
	// Заполнение справочника "Виды статей"
	Справочники.ВидыЗатрат.ЗаполнитьПоУмолчанию();
	
	// Заполнение справочника "ТипыЦенНоменклатуры"
	Справочники.ТипыЦенНоменклатуры.ЗаполнитьПоУмолчанию();
	
КонецПроцедуры // ЗаполнитьДанныеПоПодсистемеОсновныеСредства()

// Заполняет данные по подсиситеме ЗаработнойПлаты
//
Процедура ЗаполнитьДанныеПоЗаработнойПлате()
	Справочники.МетодыРасчетаОтпуска.ЗаполнитьПоУмолчанию();
	Справочники.Статусы.ЗаполнитьПоУмолчанию();
	
	Справочники.СтрокиОтчетаПН.ЗаполнитьПоУмолчанию();
	
	Справочники.СтатьиТрудовогоКодекса.ЗаполнитьПоУмолчанию();
	
	Справочники.СостояниеВБраке.ЗаполнитьПоУмолчанию();
	Справочники.СтепениЗнанияЯзыка.ЗаполнитьПоУмолчанию();
	Справочники.СтепениРодстваФизическихЛиц.ЗаполнитьПоУмолчанию();
	Справочники.УченыеЗвания.ЗаполнитьПоУмолчанию();
	Справочники.УченыеСтепени.ЗаполнитьПоУмолчанию();
	Справочники.Города.ЗаполнитьПоУмолчанию();
	
	РегистрыСведений.НормыБольничныхЛистов.ЗаполнитьПоУмолчанию();
	РегистрыСведений.ТарифыКомандировочных.ЗаполнитьПоУмолчанию();
	РегистрыСведений.УчетнаяПолитикаПоПерсоналу.ЗаполнитьПоУмолчанию();
	РегистрыСведений.СчетаУчетаЗП.ЗаполнитьПоУмолчанию();
КонецПроцедуры // ЗаполнитьДанныеПоПодсистемеОсновныеСредства()

// Заполняет данные по Налогообложению
//
Процедура ЗаполнитьДанныеНалогообложения()
	РегистрыСведений.СтавкиНДС.ЗаполнитьПоУмолчанию();
	РегистрыСведений.СтавкиНСП.ЗаполнитьПоУмолчанию();
КонецПроцедуры // ЗаполнитьДанныеНалогообложения()

// Заполняет данные по подсиситеме Основные средства
//
Процедура ЗаполнитьДанныеПоПодсистемеОсновныеСредства()

	// Заполнение справочника ГруппыНалоговогоУчетаОС
	Справочники.ГруппыНалоговогоУчетаОС.ЗаполнитьПоУмолчанию();
	
	// Заполнение справочника ГруппыИмущества
	Справочники.ГруппыИмущества.ЗаполнитьПоУмолчанию();
	
	// Заполнение справочника ВидыМатериаловСтен
	Справочники.ВидыМатериаловСтенНалогНаИмущество.ЗаполнитьПоУмолчанию(); 
	
	// Заполнение справочника ВидыТранспортаНалогНаИмущество
	Справочники.ВидыТранспортаНалогНаИмущество.ЗаполнитьПоУмолчанию();
	
	// Заполнение справочника СпособыОтраженияРасходовПоАмортизации
	Справочники.СпособыОтраженияРасходовПоАмортизации.ЗаполнитьПоУмолчанию();
	
КонецПроцедуры // ЗаполнитьДанныеПоПодсистемеОсновныеСредства()

#КонецОбласти

#Область ОбработчикиСозданиеПользователей

// Процедура инициализации пользователей конфигурации. 
//
Процедура ИнициализироватьПользователей() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	//// Добавление администратора (администратор системы - полные права).
	//Пользователи.СоздатьАдминистратора();
	//
	//// Добавление пользователя.
	//ДобавитьПользователя(НСтр("ru = 'Пользователь'"));
	
КонецПроцедуры

Процедура ДобавитьПользователя(ПолноеИмяПользователя, ИмяПользователяИБ = Неопределено)
	
	Если ИмяПользователяИБ = Неопределено Тогда
		ИмяПользователяИБ = ПолноеИмяПользователя;
	КонецЕсли;
	
	ЗаписатьПользователя = Ложь;
	
	Пользователь = Справочники.Пользователи.НайтиПоНаименованию(ПолноеИмяПользователя);
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		ЗаписатьПользователя = Истина;
		ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент();
		ПользовательОбъект.Наименование = ПолноеИмяПользователя;
	КонецЕсли;
	
	ЗаписатьПользователяИБ = Ложь;
	ВозможноЗаписатьПользователяИБ = Истина;
	ВозможноПривязатьПользователяИБ = Ложь;
	ОписаниеПользователяИБ = Новый Структура;
	
	Если ЗначениеЗаполнено(Пользователь.ИдентификаторПользователяИБ) Тогда
		УчетнаяЗапись = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			Пользователь.ИдентификаторПользователяИБ);
	КонецЕсли;
	
	Если УчетнаяЗапись = Неопределено Тогда
		УчетнаяЗапись = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
		
		Если УчетнаяЗапись = Неопределено Тогда
			ЗаписатьПользователяИБ = Истина;
			ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
			
		ИначеЕсли Пользователи.ПользовательИБЗанят(УчетнаяЗапись) Тогда
			// Пользователь ИБ с указанным именем уже существует и занят,
			// возможно записать только пользователя справочника.
			ВозможноЗаписатьПользователяИБ = Ложь;
		Иначе
			// Пользователь ИБ с указанным именем уже существует и не занят,
			// возможно привязать пользователя ИБ к пользователю справочника.
			ЗаписатьПользователяИБ = Истина;
			ВозможноПривязатьПользователяИБ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ВозможноЗаписатьПользователяИБ Тогда
		
		Если ВозможноПривязатьПользователяИБ Тогда
			
			ОписаниеПользователяИБ.Вставить(
				"УникальныйИдентификатор", УчетнаяЗапись.УникальныйИдентификатор);
		КонецЕсли;
		
		Если УчетнаяЗапись = Неопределено Тогда
			ОписаниеПользователяИБ.Вставить("Имя",       ИмяПользователяИБ);
			ОписаниеПользователяИБ.Вставить("ПолноеИмя", ПолноеИмяПользователя);
			ОписаниеПользователяИБ.Вставить("АутентификацияСтандартная", Истина);
			ОписаниеПользователяИБ.Вставить("ПоказыватьВСпискеВыбора", Истина);
			
		ИначеЕсли УчетнаяЗапись.ПолноеИмя <> ПолноеИмяПользователя Тогда
			ЗаписатьПользователяИБ = Истина;
			УчетнаяЗапись.ПолноеИмя = ПолноеИмяПользователя;
		КонецЕсли;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
	КонецЕсли;
	
	Если ЗаписатьПользователя
	 ИЛИ ЗаписатьПользователяИБ Тогда
		
		Если ЗначениеЗаполнено(Пользователь) Тогда
			ПользовательОбъект = Пользователь.ПолучитьОбъект();
		КонецЕсли;
		
		Если ЗаписатьПользователяИБ Тогда
			ПользовательОбъект.ДополнительныеСвойства.Вставить(
				"ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		КонецЕсли;
		
		ПользовательОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбновления

#Область Обновление_3_0_3_9

Процедура ИзменитьСубконтоСчетовПроизводства(Параметры) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка,
		|	Хозрасчетный.Код
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Код = ""1630""
		|	ИЛИ Хозрасчетный.Код = ""1640""";
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыЗначений Из ТЗ Цикл
		ПланСчетовОбъект = СтрокаТаблицыЗначений.Ссылка.ПолучитьОбъект();
		
		Если СтрокаТаблицыЗначений.Код = "1630" Тогда
			ПланСчетовОбъект.ВидыСубконто[0].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
			ПланСчетовОбъект.ВидыСубконто[1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
			ПланСчетовОбъект.ВидыСубконто[2].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
		Иначе
			ПланСчетовОбъект.ВидыСубконто[0].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
			ПланСчетовОбъект.ВидыСубконто[1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
			ПланСчетовОбъект.ВидыСубконто[2].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
		КонецЕсли;	
			
		Попытка
			ПланСчетовОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось изменить субконто.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось изменить субконто по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;

КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_4_30

Процедура ИзменитьРазделУчетаВВодОстатков(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводНачальныхОстатков.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
		|ГДЕ
		|	ВводНачальныхОстатков.РазделУчета = ""Товары""
		|	И НЕ ВводНачальныхОстатков.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ДокументОбъект.РазделУчета = "Запасы";
		
		Попытка
			ДокументОбъект.Записать();	
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись документа по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_4_36

Процедура ЗаполнитьОсновныеДоговорыКонтрагента(Параметры) Экспорт

	НаборЗаписей = РегистрыСведений.ОсновныеДоговорыКонтрагента.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.ОсновнойДоговорКонтрагента.Организация КАК Организация,
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Контрагенты.ОсновнойДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
		|	Контрагенты.ОсновнойДоговорКонтрагента КАК Договор
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.ОсновнойДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();	
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись основных договоров контрагента по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;

	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_4_51

Процедура ОчиститьРегистрСостоянияЗаказов(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостояниеЗаказов.Регистратор
		|ИЗ
		|	РегистрСведений.СостояниеЗаказов КАК СостояниеЗаказов";	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	НаборЗаписей = РегистрыСведений.СостояниеЗаказов.СоздатьНаборЗаписей();
		
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);	
		НаборЗаписей.Записать();		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_4_59

Процедура УстановитьДопРасходыНаОдноПоступление(Параметры) Экспорт
	Константы.ФункциональнаяОпцияДопРасходыНаОдноПоступление.Установить(Ложь);
	Константы.ФункциональнаяОпцияДопРасходыНаНесколькоПоступлений.Установить(Истина);
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_5_2

Процедура СнятьПометкуСНепредоределенныхЭлементов(Параметры) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СправочникОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();	
		СправочникОбъект.УстановитьПометкуУдаления(Ложь);
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_5_9

Процедура УстановитьЗначениеКонстантыНеВестиУчетПоОрганизациям(Параметры) Экспорт
	УчетПоНесколькимОрганизациям = Константы.ФункциональнаяОпцияУчетПоНесколькимОрганизациям.Получить();
	Константы.НеВестиУчетПоОрганизациям.Установить(Не УчетПоНесколькимОрганизациям);
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_5_11

Процедура ЗаполнитьСписокСтран(Параметры) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтраныМира.Ссылка КАК Ссылка,
		|	СтраныМира.Код КАК Код
		|ИЗ
		|	Справочник.СтраныМира КАК СтраныМира
		|ГДЕ
		|	СтраныМира.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СправочникОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();	
		СправочникОбъект.УстановитьПометкуУдаления(Ложь);
	КонецЦикла;
	
	ВыборкаДетальныеЗаписи = Справочники.СтраныМира.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Код = "398"
			Или ВыборкаДетальныеЗаписи.Код = "643"  
			Или ВыборкаДетальныеЗаписи.Код = "417"  
			Или ВыборкаДетальныеЗаписи.Код = "051"  
			Или ВыборкаДетальныеЗаписи.Код = "112" Тогда 
			
			СправочникОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();	

			СправочникОбъект.УчастникЕАЭС = Истина;
			БухгалтерскийУчетКлиентСервер.ЗаписатьСправочникОбъект(СправочникОбъект,,,,Истина);
		КонецЕсли;	                                                                           	
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_5_13

Процедура ДобавитьЭлементПроверкиУчета(Параметры) Экспорт

	КонтрольВеденияУчетаСлужебный.ОбновитьВспомогательныеДанныеПоИзменениямКонфигурации();
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_5_20

Процедура ЗаполнитьСубконтоСчета_ОсновноеПроизводство(Параметры) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Код = ""1630""";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПланСчетовОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ПланСчетовОбъект.ВидыСубконто.Количество() = 0 Тогда			
			МассивСубконто = Новый Массив();
			МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
			МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
			МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
			
			Для Каждого СтрокаМассива Из МассивСубконто Цикл
				СтрокаТабличнойЧасти = ПланСчетовОбъект.ВидыСубконто.Добавить();
				СтрокаТабличнойЧасти.ВидСубконто = СтрокаМассива;
				СтрокаТабличнойЧасти.Суммовой = Истина;
			КонецЦикла;	
			
			Попытка
				ПланСчетовОбъект.Записать();
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось заполнить субконто.
				|Техническая информация об ошибке: %1'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
				#Если Сервер Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось заполнить субконто по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				#КонецЕсли
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;

КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_5_26

Процедура РедактированиеНаименованийСчетовИУдалениеСубконто(Параметры) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка,
		|	Хозрасчетный.Код
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Код = ""2194""
		|	ИЛИ Хозрасчетный.Код = ""2195""
		|	ИЛИ Хозрасчетный.Код = ""2196""
		|	ИЛИ Хозрасчетный.Код = ""2197""
		|	ИЛИ Хозрасчетный.Код = ""2198""
		|	ИЛИ Хозрасчетный.Код = ""2199""
		|	ИЛИ Хозрасчетный.Код = ""2120""
		|	ИЛИ Хозрасчетный.Код = ""2500""
		|	ИЛИ Хозрасчетный.Код = ""8100""";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПланСчетовОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Выборка.Код = "8100" Тогда
			ПланСчетовОбъект.ВидыСубконто.Очистить();
			
		ИначеЕсли Выборка.Код = "2120" Тогда
			ПланСчетовОбъект.ВидыСубконто.Очистить();
			ПланСчетовОбъект.Наименование = "Строительство, монтаж и модернизация ОС";
			
		ИначеЕсли Выборка.Код = "2500" Тогда
			ПланСчетовОбъект.Наименование = "Денежные средства, ограниченные к использованию";
			
		ИначеЕсли Выборка.Код = "2194" Тогда
			ПланСчетовОбъект.Наименование = "Амортизация - оборудование";
			
		ИначеЕсли Выборка.Код = "2195" Тогда
			ПланСчетовОбъект.Наименование = "Амортизация - конторское оборудование";
			
		ИначеЕсли Выборка.Код = "2196" Тогда
			ПланСчетовОбъект.Наименование = "Амортизация - мебель и принадлежности";
			
		ИначеЕсли Выборка.Код = "2197" Тогда
			ПланСчетовОбъект.Наименование = "Амортизация - транспортные средства";
			
		ИначеЕсли Выборка.Код = "2198" Тогда
			ПланСчетовОбъект.Наименование = "Амортизация - благоустройство арендованной собственности";
			
		ИначеЕсли Выборка.Код = "2199" Тогда
			ПланСчетовОбъект.Наименование = "Амортизация - благоустройство земльных участков";
		КонецЕсли;	
	
			
		Попытка
			ПланСчетовОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось заполнить субконто.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось заполнить субконто по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;

КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_5_28

// Заполнение регистра "Данные первичных документов
//
Процедура ЗаполнениеРеквизитовПервичныхДокументов() Экспорт
	
	// Документы, у которых нет реквизитов вх.номер и вх.дата
	РасчетныеДокументы = Новый Массив;
	РасчетныеДокументы.Добавить("АвансовыйОтчет");
	РасчетныеДокументы.Добавить("АктСверкиВзаиморасчетов");
	РасчетныеДокументы.Добавить("БольничныйЛист");
	РасчетныеДокументы.Добавить("ВводНачальныхОстатков");
	РасчетныеДокументы.Добавить("ВозвратТоваровОтПокупателя");
	РасчетныеДокументы.Добавить("ВозвратТоваровПоставщику");
	РасчетныеДокументы.Добавить("ГТДПоИмпорту");
	РасчетныеДокументы.Добавить("ДвижениеМБП");
	РасчетныеДокументы.Добавить("Доверенность");
	РасчетныеДокументы.Добавить("ДополнительныеРасходы");
	РасчетныеДокументы.Добавить("ЗаказНаПроизводство");
	РасчетныеДокументы.Добавить("ЗакрытиеЗаказовНаПроизводство");
	РасчетныеДокументы.Добавить("КассоваяСмена");
	РасчетныеДокументы.Добавить("МодернизацияОС");
	РасчетныеДокументы.Добавить("НачислениеЗарплаты");
	РасчетныеДокументы.Добавить("ОперацияБух");
	РасчетныеДокументы.Добавить("ОприходованиеТоваров");
	РасчетныеДокументы.Добавить("ПеремещениеОС");
	РасчетныеДокументы.Добавить("ПеремещениеТоваров");
	РасчетныеДокументы.Добавить("ПлатежноеПоручениеВходящее");
	РасчетныеДокументы.Добавить("ПлатежноеПоручениеИсходящее");
	РасчетныеДокументы.Добавить("ПлатежныйОрдерСписаниеДС");
	РасчетныеДокументы.Добавить("ПоступлениеТоваровУслуг");
	РасчетныеДокументы.Добавить("ПринятиеКУчетуОС");
	РасчетныеДокументы.Добавить("ПриходныйКассовыйОрдер");
	РасчетныеДокументы.Добавить("РасходныйКассовыйОрдер");
	РасчетныеДокументы.Добавить("РеализацияТоваровУслуг");
	РасчетныеДокументы.Добавить("СписаниеОС");
	РасчетныеДокументы.Добавить("СписаниеТоваров");
	РасчетныеДокументы.Добавить("СчетНаОплатуПокупателю");
	РасчетныеДокументы.Добавить("СчетНаОплатуПоставщика");
	РасчетныеДокументы.Добавить("СчетФактураПолученный");

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации";
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	МассивОрганизаций = РезультатЗапроса.ВыгрузитьКолонку("Организация");
	
	// Обработка исходящих или расчетных документов
	Для Каждого РасчетныйДокумент ИЗ РасчетныеДокументы Цикл
		РеквизитыДокументов = ПолучитьРеквизитыДокументов(МассивОрганизаций, РасчетныйДокумент);
		ЗаписатьРеквизитыДокументов(РеквизитыДокументов);
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьРеквизитыДокументов(МассивОрганизаций, ТипДокумента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументРасчетов.Организация КАК Организация,
		|	ДокументРасчетов.Ссылка КАК Документ,
		|	ДокументРасчетов.Дата КАК Дата,
		|	ДокументРасчетов.Номер КАК Номер,
		|	ДокументРасчетов.Дата КАК ДатаРегистратора,
		|	ДокументРасчетов.Номер КАК НомерРегистратора
		|ИЗ
		|	Документ.ДокументРасчетов КАК ДокументРасчетов
		|ГДЕ
		|	ДокументРасчетов.Организация В(&МассивОрганизаций)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДокументРасчетов", ТипДокумента); 
		
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗаписатьРеквизитыДокументов(ВыборкаДокументов)
		
	Пока ВыборкаДокументов.Следующий() Цикл
		МенеджерЗаписиРегистра = РегистрыСведений.ДанныеПервичныхДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписиРегистра.Прочитать();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписиРегистра, ВыборкаДокументов);		
		МенеджерЗаписиРегистра.Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокументов.Номер, Истина, Ложь);
		
		Попытка
			МенеджерЗаписиРегистра.Записать();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось зарегистрировать данные документа
	                               |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				,
				ВыборкаДокументов.Документ,
				ТекстСообщения);
		КонецПопытки;
        		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_6_6

Процедура ДобавитьСубконтоСчету_8100(Параметры) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Код = ""8100""";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПланСчетовОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ПланСчетовОбъект.ВидыСубконто.Очистить();	
		
		СтрокаТабличнойЧасти = ПланСчетовОбъект.ВидыСубконто.Добавить();
		СтрокаТабличнойЧасти.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
		СтрокаТабличнойЧасти.ТолькоОбороты = Истина;
		СтрокаТабличнойЧасти.Суммовой = Истина;
		
		Попытка
			ПланСчетовОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось заполнить субконто.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось заполнить субконто по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_6_10

Процедура ЗаполнитьРегистрСведенийСтавкиНДС(Параметры) Экспорт

	РегистрыСведений.СтавкиНДС.ЗаполнитьПоУмолчанию();
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_6_30

Процедура ОбновитьУстановкаТарифовКомандировочных(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УстановкаТарифовКомандировочных.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.УстановкаТарифовКомандировочных КАК УстановкаТарифовКомандировочных
		|ГДЕ
		|	УстановкаТарифовКомандировочных.Проведен";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить обновление данных регистра сведений ""Тарифы командировочных"" по причине: %1'"), 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_6_32

Процедура ЗаполнитьВалютуКурсКратность_АвансовыйОтчет_Прочее(Параметры) Экспорт

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АвансовыйОтчетПрочее.Ссылка КАК Ссылка,
		|	АвансовыйОтчетПрочее.Ссылка.Проведен КАК Проведен
		|ИЗ
		|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее";
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Прочее Цикл
			СтрокаТабличнойЧасти.Валюта 	= ВалютаРегламентированногоУчета;
			СтрокаТабличнойЧасти.Курс 		= 1;
			СтрокаТабличнойЧасти.Кратность 	= 1;
		КонецЦикла;	
		
		Если Выборка.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;	
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписи);	
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;	
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_6_43

Процедура ЗаполнитьСуммыДохода(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК ТаблицаДокумента
		|ГДЕ
		|	НЕ ТаблицаДокумента.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ТаблицаДокумента
		|ГДЕ
		|	НЕ ТаблицаДокумента.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка
		|ИЗ
		|	Документ.СчетФактураВыписанный КАК ТаблицаДокумента
		|ГДЕ
		|	НЕ ТаблицаДокумента.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();

		Если ТипЗнч(ВыборкаДетальныеЗаписи.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда 
			Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл 
				СтрокаТабличнойЧасти.СуммаДохода = СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.СуммаНДС - СтрокаТабличнойЧасти.СуммаНСП;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ВыборкаДетальныеЗаписи.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда	
			Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл 
				СтрокаТабличнойЧасти.СуммаДохода = СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.СуммаНДС - СтрокаТабличнойЧасти.СуммаНСП;
			КонецЦикла;
			Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Услуги Цикл 
				СтрокаТабличнойЧасти.СуммаДохода = СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.СуммаНДС - СтрокаТабличнойЧасти.СуммаНСП;
			КонецЦикла;
			Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.ОС Цикл 
				СтрокаТабличнойЧасти.СуммаДохода = СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.СуммаНДС - СтрокаТабличнойЧасти.СуммаНСП;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ВыборкаДетальныеЗаписи.Ссылка) = Тип("ДокументСсылка.СчетФактураВыписанный") Тогда	
			Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл 
				СтрокаТабличнойЧасти.СуммаДохода = СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.СуммаНДС - СтрокаТабличнойЧасти.СуммаНСП;
			КонецЦикла;
			Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.ДокументыОснования Цикл 
				СтрокаТабличнойЧасти.СуммаДохода = СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.СуммаНДС - СтрокаТабличнойЧасти.СуммаНСП;
			КонецЦикла;
		КонецЕсли;			
			
		Попытка
			ДокументОбъект.Записать();	
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;	
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_6_46

Процедура ВключитьИспользованиеДополнительныхРеквизитовИСведений() Экспорт
	ПараметрыИспользования = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_НоменклатурныеГруппы", ПараметрыИспользования);
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_7_3

Процедура ИспользоватьСтатьиДвиженияДенежныхСредств(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ИспользоватьСтатьиДвиженияДенежныхСредств.Установить(Истина);
	
	Параметры.ОбработкаЗавершена = Истина;

КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_7_5

Процедура ОбновлениеСтранМира(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Справочники.СтраныМира.ЗаполнитьПоУмолчанию();
	
	Параметры.ОбработкаЗавершена = Истина;

КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_8_3

Процедура ОбновитьРегистрСчетаФактурыВыписанные(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОПоступлении.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.СчетаФактурыВыписанные КАК СведенияОПоступлении";	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	НаборЗаписей = РегистрыСведений.СчетаФактурыВыписанные.СоздатьНаборЗаписей();
		
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого СтрокаНабора Из НаборЗаписей Цикл
			СтрокаНабора.Дата = СтрокаНабора.Период;			
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать строку регитсра.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось аписать строку регитсра по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_8_5

Процедура ОбновитьРегистрПродажи(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Продажи.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.Продажи КАК Продажи";	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать документ.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать документ по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_8_6

Процедура ДополнитьРегистрСчетаФактурыВыписанные(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетаФактурыВыписанные.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.СчетаФактурыВыписанные КАК СчетаФактурыВыписанные";	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать документ.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать документ по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

Процедура ДополнитьРегистрРеестрПриобретенныхМатериальныхРесурсов(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РеестрПриобретенныхМатериальныхРесурсов.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.РеестрПриобретенныхМатериальныхРесурсов КАК РеестрПриобретенныхМатериальныхРесурсов
		|ГДЕ
		|	РеестрПриобретенныхМатериальныхРесурсов.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику";	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать документ.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать документ по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_8_8

Процедура ОбновитьРегистрДанныеДляОтчетаРеестрВвезенных(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДляОтчетаРеестрВвезенных.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ДанныеДляОтчетаРеестрВвезенных КАК ДанныеДляОтчетаРеестрВвезенных
		|ГДЕ
		|	ДанныеДляОтчетаРеестрВвезенных.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг";	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать документ.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать документ по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

Процедура УдалениеПарыУСчетов_1540_И_3430(Параметры) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Код = ""1540""
		|	ИЛИ Хозрасчетный.Код = ""3430""";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПланСчетовОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ПланСчетовОбъект.ПарныйСчет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();	
		
		Попытка
			ПланСчетовОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать счет.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать счет по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_8_9

Процедура ОбновитьКонтрагентаВРегистре_ДанныеДляОтчетаРеестрВвезенных(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДляОтчетаРеестрВвезенных.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВременнаяТаблицаРеестрВвезенных
		|ИЗ
		|	РегистрНакопления.ДанныеДляОтчетаРеестрВвезенных КАК ДанныеДляОтчетаРеестрВвезенных
		|ГДЕ
		|	ДанныеДляОтчетаРеестрВвезенных.Регистратор ССЫЛКА Документ.ГТДПоИмпорту
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГТДПоИмпортуТовары.Ссылка КАК Ссылка,
		|	ГТДПоИмпортуТовары.ДокументПоступления.Контрагент КАК Контрагент
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныеПоГТД
		|ИЗ
		|	Документ.ГТДПоИмпорту.Товары КАК ГТДПоИмпортуТовары
		|ГДЕ
		|	ГТДПоИмпортуТовары.Ссылка В
		|			(ВЫБРАТЬ
		|				ВременнаяТаблицаРеестрВвезенных.Регистратор
		|			ИЗ
		|				ВременнаяТаблицаРеестрВвезенных КАК ВременнаяТаблицаРеестрВвезенных)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГТДПоИмпортуОС.Ссылка,
		|	ГТДПоИмпортуОС.ДокументПоступления.Контрагент
		|ИЗ
		|	Документ.ГТДПоИмпорту.ОС КАК ГТДПоИмпортуОС
		|ГДЕ
		|	ГТДПоИмпортуОС.Ссылка В
		|			(ВЫБРАТЬ
		|				ВременнаяТаблицаРеестрВвезенных.Регистратор
		|			ИЗ
		|				ВременнаяТаблицаРеестрВвезенных КАК ВременнаяТаблицаРеестрВвезенных)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаДанныеПоГТД.Ссылка КАК Ссылка,
		|	МАКСИМУМ(ВременнаяТаблицаДанныеПоГТД.Контрагент) КАК Контрагент
		|ИЗ
		|	ВременнаяТаблицаДанныеПоГТД КАК ВременнаяТаблицаДанныеПоГТД
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаДанныеПоГТД.Ссылка";	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.КонтрагентПоПоступлению = Выборка.Контрагент;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать документ.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать документ по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_8_10

Процедура ДополнитьРегистрСведенияОПоступлении(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОПоступлении.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.СведенияОПоступлении КАК СведенияОПоступлении
		|ГДЕ
		|	СведенияОПоступлении.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг";	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать документ.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать документ по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_9_5

Процедура СократитьКодФизическиеЛица(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	НЕ ФизическиеЛица.ПометкаУдаления";	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			СправочникОбъект.Записать();
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_9_13

Процедура ОбновитьДанныеСправочниковДляНалогаНаИмущество(Параметры) Экспорт
	
	// Заполнение справочника ВидыМатериаловСтен
	Справочники.ВидыМатериаловСтенНалогНаИмущество.ЗаполнитьПоУмолчанию(); 
	
	// Заполнение справочника ВидыТранспортаНалогНаИмущество
	Справочники.ВидыТранспортаНалогНаИмущество.ЗаполнитьПоУмолчанию();
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_9_17

Процедура ДозаполнитьДокументыСчетФактурыПолученные(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураПолученный.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный";	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДокументОбъект.ПризнакСтраны = ДокументОбъект.Контрагент.ПризнакСтраны;
		
		Если ДокументОбъект.ВалютаДокумента = Справочники.Валюты.ПустаяСсылка() Тогда
			ДокументОбъект.Курс 	 = 1;
			ДокументОбъект.Кратность = 1;
		Иначе	
			СтруктураКурсКратность 	 = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
			ДокументОбъект.Курс 	 = ?(СтруктураКурсКратность.Курс = 0, 1, СтруктураКурсКратность.Курс);
			ДокументОбъект.Кратность = ?(СтруктураКурсКратность.Кратность = 0, 1, СтруктураКурсКратность.Кратность);
		КонецЕсли;	
			
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать документ.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать документ по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_10_4

Процедура ДозаполнитьДокументыГТДПоИмпорту(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГТДПоИмпорту.Ссылка,
		|	ГТДПоИмпорту.Проведен
		|ИЗ
		|	Документ.ГТДПоИмпорту КАК ГТДПоИмпорту";	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
	    ДокументОбъект.РаспределитьСуммуБазыНДС();
		
		Если Выборка.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;	
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;	
			
		Попытка
			ДокументОбъект.Записать(РежимЗаписи);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать документ.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать документ по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_10_6

Процедура ПерепровестиДокументыПостуленияИмпортЭкспорт(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.ПризнакСтраны = ЗНАЧЕНИЕ(Перечисление.ПризнакиСтраны.ИмпортЭкспорт)
		|	И ПоступлениеТоваровУслуг.Ссылка ССЫЛКА Документ.ПоступлениеТоваровУслуг";	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать документ.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать документ по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_10_7

Процедура ОбновитьДанныеРегистраСведений_РеестрПриобретенныхМатериальныхРесурсов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеестрПриобретенныхМатериальныхРесурсов.Регистратор КАК Ссылка
		|ИЗ
		|	РегистрСведений.РеестрПриобретенныхМатериальныхРесурсов КАК РеестрПриобретенныхМатериальныхРесурсов
		|ГДЕ
		|	НЕ РеестрПриобретенныхМатериальныхРесурсов.Регистратор ССЫЛКА Документ.АвансовыйОтчет";	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать документ.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать документ по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_10_8

Процедура ОбновитьСтажиСотрудников(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтажиСотрудников.Регистратор.Дата КАК Период,
		|	СтажиСотрудников.Регистратор КАК Регистратор,
		|	СтажиСотрудников.Организация КАК Организация,
		|	СтажиСотрудников.ФизЛицо КАК ФизЛицо,
		|	СтажиСотрудников.КоличествоЛет КАК КоличествоЛет,
		|	СтажиСотрудников.КоличествоМесяцев КАК КоличествоМесяцев,
		|	СтажиСотрудников.КоличествоДней КАК КоличествоДней
		|ИЗ
		|	РегистрСведений.СтажиСотрудников КАК СтажиСотрудников";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.СтажиСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		Если ВыборкаДетальныеЗаписи.КоличествоЛет +
			ВыборкаДетальныеЗаписи.КоличествоМесяцев +
			ВыборкаДетальныеЗаписи.КоличествоДней > 0 Тогда 
			
			НоваяЗапись = НаборЗаписей.Добавить();		
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
		КонецЕсли;
		
		НаборЗаписей.Записать();
	КонецЦикла;

	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#КонецОбласти
