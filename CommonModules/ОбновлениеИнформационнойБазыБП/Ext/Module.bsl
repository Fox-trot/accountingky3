////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы Бухгалтерия для предприятия, редакция 3.0.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "БухгалтерияДляКыргызстана";
	Описание.Версия = "3.1.4.1";
	Описание.ИдентификаторИнтернетПоддержки = ИнтернетПоддержкаПользователейПереопределяемыйБП.ИмяПрограммы();

	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики этого события для подсистем БСП добавляются через подписку на служебное событие:
	// "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления".
	//
	// Процедуры обработки этого события всех подсистем БСП имеют то же имя, что и эта процедура,
	// но размещены в своих подсистемах.
	// Чтобы найти процедуры можно выполнить глобальный поиск по имени процедуры.
	// Чтобы найти модули в которых размещены процедуры, можно выполнить поиск по имени события.
	
	// Обработчики, выполняемые при заполнении пустой ИБ
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПервыйЗапуск";
	Обработчик.Комментарий = НСтр("ru = 'Выполнение обработчиков первого запуска.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьДатуТекущейВерсии";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Оперативно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановкаИУдалениеИсправлений";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.0";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ИнициализироватьПользователей";
	Обработчик.Комментарий = НСтр("ru = 'Инициализация пользователей.'");
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.0";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьПредопределенныеВидыКонтактнойИнформации";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Комментарий = НСтр("ru = 'Обновление видов контактной информации.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.16.15";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ДозаполнитьРН_ДанныеДляОтчетаРеестрВвезенных";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e2977c44-544c-4ef1-afdb-5392485af0bf");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение ""ДатаСФ"" в РН ""ДанныеДляОтчетаРеестрВвезенных"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.17.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПереопределитьМестоХранениеНастроекПользователей";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5b9039e1-a75b-49be-92f2-7b2f2522a9b7");
	Обработчик.Комментарий = НСтр("ru = 'Переопределение места хранения настроек пользователей.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.17.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.РазрешитьДублированиеНоменклатуры";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("25d31c24-6cfd-42ae-8890-9814cfc53a3b");
	Обработчик.Комментарий = НСтр("ru = 'Установка новой настройки ""Разрешить дублирование номенклатуры"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.17.15";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнениеМетодовРасчетаВСтатусах";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3350bc2d-f15b-4331-b317-51acf74777ee");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение методов расчета в статусах.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.18.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьКурсКратностьВзаиморасчетов_ВРКО";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b6f060b6-e54c-4afd-bb6f-e406b8cd13e4");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение курса в докуменах РКО.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.18.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьБазаРаспределенияКорректировкиСебестоимости";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1e247c03-83ad-4810-b0b3-23c7dd9ee54b");
	Обработчик.Комментарий = НСтр("ru = 'Установка базы распределения корректировки себестоимости в значение ""Плановая себестоимость"", если установлена ""По объему выпуска"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.18.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьСправочникЗадачиБухгалтера";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6ef9cc6d-55fa-47a6-bcc6-7a2d88617ac4");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение справочника ""Задачи бухгалтера"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.18.15";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьРазмерОтступаВОтчетах";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0010e554-e2ab-4eb7-8545-fe9715c7163b");
	Обработчик.Комментарий = НСтр("ru = 'Устанавливается размер отступа в отчетах значением по умолчанию.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.18.17";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПроведениеДокументовДопРасходов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("75ee7a88-ddd5-4032-ab28-cd0b6ecab78a");
	Обработчик.Комментарий = НСтр("ru = 'Перепроведение документов по отражению дополнительных расходов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.1.1.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОчиститьСубконтоСчета1250";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9e104bda-905f-492a-b106-922929d28fd2");
	Обработчик.Комментарий = НСтр("ru = 'Очищение субконто счета 1250.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.1.1.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьФормуОплатыСчетовФактурВыписанных";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d8ead052-e0ec-41f6-8c05-2ee3d35f28bc");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита ""Форма оплаты"" в документах ""Счет фактура выписанный"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.1.1.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ДозаполнитьСчетаФактурыВыписанные";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ace18f52-cb0c-465b-8c89-5cba77ce35d6");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов ""Ставка НДС"" и ""Ставка НСП"" в табличных частях документов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.1.2.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьПредопределенныеВидыКонтактнойИнформацииПользователей";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ed3781a3-bd5b-454e-bf74-52024aec9b7a");
	Обработчик.Комментарий = НСтр("ru = 'Обновить предопределенные виды контактной информации пользователей.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.1.2.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьОтветственныеЛица";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ed3781a3-bd5b-454e-bf74-51024aec9b7a");
	Обработчик.Комментарий = НСтр("ru = 'Обновление ответственных лиц.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.1.2.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнениеВидаОтчетаВОтчетеПоНДС";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1fc1dbd7-4cb5-4108-b61e-599d3ed81356");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита ""Вид отчета"" в документах ""Отчет по НДС"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.1.2.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнениеРеквизитовДокумента_СФВыписанный";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("035a13aa-2520-4f97-8673-a2eb55f09517");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов ""Ставка НДС"" и ""Валюта"" табличной части ""Документы"" в документах ""СФ выписанный"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.1.2.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПереносНастроекВЗначенияПоУмолчанию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7e553104-f469-4d89-8cac-b6bd16f4ccd9");
	Обработчик.Комментарий = НСтр("ru = 'Перенос настроек в знаяения по умолчанию.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.1.3.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ДобавитьЭлементПроверкиУчета";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("77625fc7-3c22-405b-bd99-957dfb154885");
	Обработчик.Комментарий = НСтр("ru = 'Обновление проверок учета.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.1.3.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПерепроведениеДокументовПоступления";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d69ad7fc-07fb-4342-ad9a-44ba7ced26fb");
	Обработчик.Комментарий = НСтр("ru = 'Перепроведение документов ""Поступление товаров и услуг"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.1.3.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнениеСтавокВСчетФактуреВыписанной";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e990d5ac-e50f-4b8f-820a-495357f37990");
	Обработчик.Комментарий = НСтр("ru = 'Перезаполнение ставок НДС и НСП в табличной части ""Товары"" документов ""СФ выписанная"".'");
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
		
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "ПредыдущееИмяКонфигурацииБазовая" Тогда
		Параметры.ВерсияКонфигурации = ПредыдущаяВерсияКонфигурации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение пустой ИБ

// Процедура заполняет пустую ИБ.
//
Процедура ПервыйЗапуск() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	// В новой базе устанавливается режим интерфейса "Такси"
	Константы.ИнтерфейсТакси.Установить(Истина);
	Константы.ИнтерфейсВерсии82.Установить(Ложь);
	Константы.НеВестиУчетПоОрганизациям.Установить(Истина);

	////////////////////////////////////////////////////////////////////////////////
	// Параметры учета и план счетов
	ЗаполнитьПараметрыУчета();
	
	////////////////////////////////////////////////////////////////////////////////
	// Подсистема Банк/Касса
	ЗаполнитьДанныеПоПодсистемеБанкКасса();
	
	////////////////////////////////////////////////////////////////////////////////	
	// Подсистема Основные средства
	ЗаполнитьДанныеПоПодсистемеОсновныеСредства();
	
	////////////////////////////////////////////////////////////////////////////////
	// Подсистема Заработная плата
	ЗаполнитьДанныеПоЗаработнойПлате();

	// Запасы
	ЗаполнитьДанныеПоЗапасам();
	
	// Налоги
	ЗаполнитьДанныеНалогообложения();
	
	// Регламентированная отчетность.
	Справочники.НастройкиРегламентированныхОтчетов.ЗаполнитьПоУмолчанию();
	
КонецПроцедуры // ПервыйЗапуск()

////////////////////////////////////////////////////////////////////////////////
// Обновление ИБ

Процедура УстановитьДатуТекущейВерсии() Экспорт
	Константы.ДатаТекущейВерсии.Установить(Дата(2019,08,06));
КонецПроцедуры

Процедура УстановкаИУдалениеИсправлений() Экспорт
	Удаляемые = Новый Массив;
	Удаляемые.Добавить("b2b78783-a249-48c0-8cff-0e6f470c785e");
	ОбновлениеКонфигурации.УстановкаИУдалениеИсправлений(Новый Структура("Удалить", Удаляемые), Истина);
КонецПроцедуры

// Обновляет значения реквизитов предопределенных видов контактной информации
//
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформации() Экспорт
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	// Организации
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ЮрАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге = Истина;
	ПараметрыВида.Порядок = 1;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ФактАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге = Истина;
	ПараметрыВида.Порядок = 2;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Факс");
	ПараметрыВида.Вид = "ФаксОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 4;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "EmailОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 5;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ПочтовыйАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге = Истина;
	ПараметрыВида.Порядок = 6;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Другое");
	ПараметрыВида.Вид = "ДругаяИнформацияОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 7;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
		
	// Контрагенты
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ЮрАдресКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге = Истина;
	ПараметрыВида.Порядок = 1;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ФактАдресКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге = Истина;
	ПараметрыВида.Порядок = 2;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Факс");
	ПараметрыВида.Вид = "ФаксКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 4;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "EmailКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 5;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ПочтовыйАдресКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге = Истина;
	ПараметрыВида.Порядок = 6;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Физические Лица
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "АдресМестаПроживанияФизическиеЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге = Истина;
	ПараметрыВида.Порядок = 1;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "АдресПоПропискеФизическиеЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге = Истина;
	ПараметрыВида.Порядок = 2;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонДомашнийФизическиеЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонРабочийФизическиеЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 4;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры // ВключитьМножественныйВводКонтактнойИнформации()

#КонецОбласти

#Область ОбработчикиПервогоЗапуска

// Заполняет данные параметров учета
//
Процедура ЗаполнитьПараметрыУчета()

	// Добавление организации.
	Справочники.Организации.ЗаполнитьПоУмолчанию();
	
	// Заполнение плана счетов.
	ПланыСчетов.Хозрасчетный.ЗаполнитьПоУмолчанию();	
	
	// Заполнение справочника ГНС
	Справочники.ГНС.ЗаполнитьПоУмолчанию();
		
	// Заполнение справочника Классификатор единиц измерения
	Справочники.КлассификаторЕдиницИзмерения.ЗаполнитьПоУмолчанию();
	
	// Заполнение счетов учета номенклатуры
	РегистрыСведений.СчетаУчетаНоменклатуры.ЗаполнитьПоУмолчанию();
	РегистрыСведений.СчетаРасчетовСКонтрагентами.ЗаполнитьПоУмолчанию();
		
	Константы.ФункциональнаяОпцияУчетПоНесколькимОрганизациям.Установить(Ложь);
	Константы.МакетОформленияОтчетов.Установить("Арктика");
	Константы.КонтролироватьОстаткиПриПроведении.Установить(Истина);
	Константы.ФункциональнаяОпцияДопРасходыНаОдноПоступление.Установить(Истина);
	Константы.ИспользоватьСтатьиДвиженияДенежныхСредств.Установить(Истина);
	
	// Корректировка себестоимости
	Константы.БазаРаспределенияКорректировкиСебестоимости.Установить(Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость);
	
	// Прочее.
	Справочники.СтраныМира.ЗаполнитьПоУмолчанию();
	Константы.РазмерОтступаВОтчетах.Установить(20);

	// Заполнение справочника Задачи бухгалтера
	Справочники.ЗадачиБухгалтера.ЗаполнитьПоУмолчанию();
	
КонецПроцедуры // ЗаполнитьПараметрыУчета()  

// Заполняет данные по подсистеме Банк/Касса
//
Процедура ЗаполнитьДанныеПоПодсистемеБанкКасса()
	// Заполнение справочника "Валюты" 
	Справочники.Валюты.ЗаполнитьПоУмолчанию();
	
	// Добавление национальной валюты
	НациональнаяВалютаСсылка = Справочники.Валюты.НайтиПоКоду("417");	
	Константы.ВалютаРегламентированногоУчета.Установить(НациональнаяВалютаСсылка);
			
	// РС Курсы валют на 01.01.2015
	РегистрыСведений.КурсыВалют.ЗаполнитьПоУмолчанию();
	
	// Добавление касс 
	Справочники.Кассы.ЗаполнитьПоУмолчанию();
	
	// Заполнение справочника "Статьи ДДС"
	Справочники.СтатьиДвиженияДенежныхСредств.ЗаполнитьПоУмолчанию();
	Константы.СтатьяДДСКурсоваяРазница.Установить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Нереализованные прибыли и убытки от курсовых разниц", Истина));
	
	// Заполнение справочника "Виды статей"
	Справочники.ВидыЗатрат.ЗаполнитьПоУмолчанию();
	
	// Заполнение справочника "ТипыЦенНоменклатуры"
	Справочники.ТипыЦенНоменклатуры.ЗаполнитьПоУмолчанию();
	
КонецПроцедуры // ЗаполнитьДанныеПоПодсистемеОсновныеСредства()

// Заполняет данные по подсистеме ЗаработнойПлаты
//
Процедура ЗаполнитьДанныеПоЗаработнойПлате()
	Справочники.ГрафикиРаботы.ЗаполнитьПоУмолчанию();
	Справочники.МетодыРасчетаОтпуска.ЗаполнитьПоУмолчанию();
	Справочники.Статусы.ЗаполнитьПоУмолчанию();
	Справочники.СпособыОтраженияЗаработнойПлаты.ЗаполнитьПоУмолчанию();
	
	Справочники.СтрокиОтчетаПН.ЗаполнитьПоУмолчанию();
	
	Справочники.СтатьиТрудовогоКодекса.ЗаполнитьПоУмолчанию();
	
	Справочники.СостояниеВБраке.ЗаполнитьПоУмолчанию();
	Справочники.СтепениЗнанияЯзыка.ЗаполнитьПоУмолчанию();
	Справочники.УченыеЗвания.ЗаполнитьПоУмолчанию();
	Справочники.УченыеСтепени.ЗаполнитьПоУмолчанию();
	Справочники.Города.ЗаполнитьПоУмолчанию();
	
	РегистрыСведений.НормыБольничныхЛистов.ЗаполнитьПоУмолчанию();
	РегистрыСведений.ТарифыКомандировочных.ЗаполнитьПоУмолчанию();
	РегистрыСведений.УчетнаяПолитикаПоПерсоналу.ЗаполнитьПоУмолчанию();
КонецПроцедуры // ЗаполнитьДанныеПоПодсистемеОсновныеСредства()

// Заполняет данные по Запасам
//
Процедура ЗаполнитьДанныеПоЗапасам()
	СправочникОбъект = Справочники.Номенклатура.Услуги.ПолучитьОбъект();
	СправочникОбъект.Услуга = Истина;
	БухгалтерскийУчетСервер.ЗаписатьСправочникОбъект(СправочникОбъект);
КонецПроцедуры 

// Заполняет данные по Налогообложению
//
Процедура ЗаполнитьДанныеНалогообложения()
	РегистрыСведений.СтавкиНДС.ЗаполнитьПоУмолчанию();
	РегистрыСведений.СтавкиНСП.ЗаполнитьПоУмолчанию();
	Справочники.НастройкиНалоговойДекларации.ЗаполнитьПоУмолчанию();
КонецПроцедуры // ЗаполнитьДанныеНалогообложения()

// Заполняет данные по подсистеме Основные средства
//
Процедура ЗаполнитьДанныеПоПодсистемеОсновныеСредства()

	// Заполнение справочника ГруппыНалоговогоУчетаОС
	Справочники.ГруппыНалоговогоУчетаОС.ЗаполнитьПоУмолчанию();
	
	// Заполнение справочника ГруппыИмущества
	Справочники.ГруппыИмущества.ЗаполнитьПоУмолчанию();
	
	// Заполнение справочника ВидыМатериаловСтен
	Справочники.ВидыМатериаловСтенНалогНаИмущество.ЗаполнитьПоУмолчанию(); 
	
	// Заполнение справочника ВидыТранспортаНалогНаИмущество
	Справочники.ВидыТранспортаНалогНаИмущество.ЗаполнитьПоУмолчанию();
	
	// Заполнение справочника СпособыОтраженияРасходовПоАмортизации
	Справочники.СпособыОтраженияРасходовПоАмортизации.ЗаполнитьПоУмолчанию();
	
КонецПроцедуры // ЗаполнитьДанныеПоПодсистемеОсновныеСредства()

#КонецОбласти

#Область ОбработчикиСозданиеПользователей

// Процедура инициализации пользователей конфигурации. 
//
Процедура ИнициализироватьПользователей() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	//// Добавление администратора (администратор системы - полные права).
	//Пользователи.СоздатьАдминистратора();
	//
	//// Добавление пользователя.
	//ДобавитьПользователя(НСтр("ru = 'Пользователь'"));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбновления

#Область Обновление_3_0_16_15

Процедура ДозаполнитьРН_ДанныеДляОтчетаРеестрВвезенных(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратТоваровПоставщику.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГТДПоИмпорту.Ссылка
		|ИЗ
		|	Документ.ГТДПоИмпорту КАК ГТДПоИмпорту
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл	
		Набор = РегистрыНакопления.ДанныеДляОтчетаРеестрВвезенных.СоздатьНаборЗаписей();	
		Набор.Отбор.Регистратор.Установить(Выборка.Ссылка);
		Набор.Прочитать();
		
		Если Тип("ДокументСсылка.ГТДПоИмпорту") = ТипЗнч(Выборка.Ссылка) Тогда
			ДатаСФ = Выборка.Ссылка.Дата;	
		Иначе
			ДатаСФ = Выборка.Ссылка.ДатаСФ;
		КонецЕсли;	
		
		Для Каждого Движение Из Набор Цикл
            Движение.ДатаСФ = ДатаСФ;
        КонецЦикла;
		
		Набор.Записать();
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_17_5

Процедура ПереопределитьМестоХранениеНастроекПользователей(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	удалитьНастройкиПользователей.Пользователь.Наименование КАК Пользователь,
		|	удалитьНастройкиПользователей.Значение КАК Значение,
		|	удалитьНастройкиПользователей.Настройка.ИмяПредопределенныхДанных КАК НастройкаИмяПредопределенныхДанных
		|ИЗ
		|	РегистрСведений.удалитьНастройкиПользователей КАК удалитьНастройкиПользователей";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Значение) Тогда 
			ОбщегоНазначенияБПВызовСервера.УстановитьЗначениеПоУмолчанию(ВыборкаДетальныеЗаписи.НастройкаИмяПредопределенныхДанных, ВыборкаДетальныеЗаписи.Значение, ВыборкаДетальныеЗаписи.Пользователь);
		КонецЕсли;	
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_17_6

Процедура РазрешитьДублированиеНоменклатуры(Параметры) Экспорт

	// Если в базе уже есть дубли номенклатуры, то настройку включаем.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.Наименование КАК Наименование
		|ПОМЕСТИТЬ ВременнаяТаблицаНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВременнаяТаблицаНоменклатура.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаНоменклатура.Наименование КАК Наименование
		|ИЗ
		|	ВременнаяТаблицаНоменклатура КАК ВременнаяТаблицаНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаНоменклатура КАК ВременнаяТаблицаНоменклатураДубли
		|		ПО (НЕ ВременнаяТаблицаНоменклатура.Ссылка = ВременнаяТаблицаНоменклатураДубли.Ссылка)
		|			И ВременнаяТаблицаНоменклатура.Наименование = ВременнаяТаблицаНоменклатураДубли.Наименование";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		Константы.РазрешитьДублированиеНоменклатуры.Установить(Истина);
	КонецЕсли;	
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_17_16

Процедура ЗаполнениеМетодовРасчетаВСтатусах(Параметры) Экспорт

	ОрганизацияПоУмолчанию = Справочники.Организации.ОрганизацияПоУмолчанию();
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ТекущаяДатаСеанса(), ОрганизацияПоУмолчанию);
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Статусы");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Статусы.Ссылка КАК Ссылка,
			|	Статусы.Категория КАК Категория,
			|	Статусы.ВидЗанятости КАК ВидЗанятости
			|ИЗ
			|	Справочник.Статусы КАК Статусы";
		Выборка = Запрос.Выполнить().Выбрать();
		
		МассивОсобыхКатегорий = Новый Массив;
		МассивОсобыхКатегорий.Добавить(Справочники.КатегорииСотрудников.ИнвалидыВОВ1_2гр); // 101
		МассивОсобыхКатегорий.Добавить(Справочники.КатегорииСотрудников.ИнвалидыВОВ3гр); // 102
		МассивОсобыхКатегорий.Добавить(Справочники.КатегорииСотрудников.МОП); // 106
		МассивОсобыхКатегорий.Добавить(Справочники.КатегорииСотрудников.РаботающиеПенсионерыМОП); // 107
		МассивОсобыхКатегорий.Добавить(Справочники.КатегорииСотрудников.ИностранныеГраждане); // 010
		
		МассивОсобыхВидовЗанятости = Новый Массив;
		МассивОсобыхВидовЗанятости.Добавить(Справочники.ВидыЗанятости.Совместители);
		
		Пока Выборка.Следующий() Цикл	
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			// Определение метода расчета ПН.
			Если ДанныеУчетнойПолитики.ПлательщикЕН Тогда 
				// Особый статус.
				Если НЕ МассивОсобыхКатегорий.Найти(Выборка.Категория) = Неопределено
					Или НЕ МассивОсобыхВидовЗанятости.Найти(Выборка.ВидЗанятости) = Неопределено Тогда 
					МетодРасчетаПН = Перечисления.МетодыРасчетаПН.Начислено;
				Иначе 
					МетодРасчетаПН = Перечисления.МетодыРасчетаПН.МРД;
				КонецЕсли;	
			Иначе
				// Особый статус.
				Если НЕ МассивОсобыхКатегорий.Найти(Выборка.Категория) = Неопределено
					Или НЕ МассивОсобыхВидовЗанятости.Найти(Выборка.ВидЗанятости) = Неопределено Тогда 
					МетодРасчетаПН = Перечисления.МетодыРасчетаПН.Начислено;
				Иначе 
					МетодРасчетаПН = Перечисления.МетодыРасчетаПН.НачисленоБольшеМРД;
				КонецЕсли;	
			КонецЕсли;	
			
			СправочникОбъект.МетодРасчетаПН = МетодРасчетаПН;
			
			// Определение метода расчета СФ.
			Если Выборка.Категория = Справочники.КатегорииСотрудников.Арендодатели Тогда 
				МетодРасчетаСФ = Перечисления.МетодыРасчетаСФ.СЗП;
			ИначеЕсли НЕ МассивОсобыхКатегорий.Найти(Выборка.Категория) = Неопределено
				Или НЕ МассивОсобыхВидовЗанятости.Найти(Выборка.ВидЗанятости) = Неопределено Тогда 
				МетодРасчетаСФ = Перечисления.МетодыРасчетаСФ.Начислено;
			Иначе 
				МетодРасчетаСФ = Перечисления.МетодыРасчетаСФ.НачисленоБольшеСЗП;
			КонецЕсли;	
			
			СправочникОбъект.МетодРасчетаСФ = МетодРасчетаСФ;
			
			БухгалтерскийУчетСервер.ЗаписатьСправочникОбъект(СправочникОбъект);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось заполнить методы расчета в статусах: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_18_2

Процедура ЗаполнитьКурсКратностьВзаиморасчетов_ВРКО(Параметры) Экспорт

	НачатьТранзакцию();

	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.РасходныйКассовыйОрдер");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
			|ГДЕ
			|	РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗП)";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			ДокументОбъект.КурсВзаиморасчетов      = 1;
			ДокументОбъект.КратностьВзаиморасчетов = 1; 
			
			ДокументОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось заполнить курс заиморасчетов по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_18_6

Процедура УстановитьБазаРаспределенияКорректировкиСебестоимости(Параметры) Экспорт

	БазаРаспределенияКорректировкиСебестоимости = Константы.БазаРаспределенияКорректировкиСебестоимости.Получить();
	Если БазаРаспределенияКорректировкиСебестоимости = Перечисления.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска Тогда 
		Константы.БазаРаспределенияКорректировкиСебестоимости.Установить(Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость);
	КонецЕсли;	
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_18_11

Процедура ЗаполнитьСправочникЗадачиБухгалтера(Параметры) Экспорт

	Справочники.ЗадачиБухгалтера.ЗаполнитьПоУмолчанию();	
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_18_15

Процедура УстановитьРазмерОтступаВОтчетах(Параметры) Экспорт
	Константы.РазмерОтступаВОтчетах.Установить(20);	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_18_17

Процедура ПроведениеДокументовДопРасходов(Параметры) Экспорт

	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ДополнительныеРасходы");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДополнительныеРасходы.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ДополнительныеРасходы КАК ДополнительныеРасходы
			|ГДЕ
			|	НЕ ДополнительныеРасходы.ПометкаУдаления
			|	И ДополнительныеРасходы.Проведен";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл	
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();		
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось провести документы дополнительных расходов по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_1_1_5

Процедура ОчиститьСубконтоСчета1250(Параметры) Экспорт

	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("ПланСчетов.Хозрасчетный");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПути);
		Блокировка.Заблокировать();
		
		СчетОбъект = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПути.ПолучитьОбъект();
		
		СчетОбъект.ВидыСубконто.Очистить();
		
		СчетОбъект.Записать();
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось очистить субконто на счете 1250 по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_1_1_9

Процедура ЗаполнитьФормуОплатыСчетовФактурВыписанных(Параметры) Экспорт

	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СчетФактураВыписанный");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактураВыписанный.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.СчетФактураВыписанный КАК СчетФактураВыписанный";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ДокументОбъект.УдалитьБезналичныйРасчет Тогда
				ДокументОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;	
			Иначе
				ДокументОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
			КонецЕсли;
			
			ДокументОбъект.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось заполнить форму оплаты счетов фактур по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_1_1_13

Процедура ДозаполнитьСчетаФактурыВыписанные(Параметры) Экспорт

	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СчетФактураВыписанный");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактураВыписанный.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.СчетФактураВыписанный КАК СчетФактураВыписанный";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.ДокументыОснования Цикл
				
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.ДокументОснование.СтавкаНДС;	
				
			КонецЦикла;
			
			Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл
				
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.ДокументОснования.СтавкаНДС;
				СтрокаТабличнойЧасти.СтавкаНСП = СтрокаТабличнойЧасти.ДокументОснования.СтавкаНСП;
				
			КонецЦикла;
				
			ДокументОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось заполнить счета фактуры по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_1_2_1

Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииПользователей(Параметры) Экспорт

	ПользователиСлужебный.ОбновитьПредопределенныеВидыКонтактнойИнформацииПользователей();
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_1_2_4

Процедура ОбновитьОтветственныеЛица(Параметры) Экспорт

	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОтветственныеЛицаОрганизаций");
		Блокировка.Заблокировать();
		
		// Заменить значения в записях РС ОтветственныеЛицаОрганизаций и ОтветственныеЛицаОрганизацийДляПечати
		// Вместо применения перечисления использовать ссылку.
		
		// ОтветственныеЛицаОрганизаций
		ОтветственныеЛица = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьНаборЗаписей();
		ОтветственныеЛица.Прочитать();
		
		Для Каждого ЗаписьОтветственныеЛица Из ОтветственныеЛица Цикл 
			
			Если ЗаписьОтветственныеЛица.удалитьОтветственноеЛицо = Перечисления.удалитьОтветственныеЛицаОрганизаций.Руководитель Тогда 
				ОтветственноеЛицо = Справочники.ВидыОтветственныхЛиц.Руководитель;
			ИначеЕсли ЗаписьОтветственныеЛица.удалитьОтветственноеЛицо = Перечисления.удалитьОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда	
				ОтветственноеЛицо = Справочники.ВидыОтветственныхЛиц.ГлавныйБухгалтер;
			ИначеЕсли ЗаписьОтветственныеЛица.удалитьОтветственноеЛицо = Перечисления.удалитьОтветственныеЛицаОрганизаций.Кассир Тогда	
				ОтветственноеЛицо = Справочники.ВидыОтветственныхЛиц.Кассир;
			Иначе 
				Продолжить;
			КонецЕсли;	
				
			ЗаписьОтветственныеЛица.ОтветственноеЛицо = ОтветственноеЛицо;	
		КонецЦикла;
		
		ОтветственныеЛица.Записать();

		// ОтветственныеЛицаОрганизацийДляПечати
		ОтветственныеЛица = РегистрыСведений.ОтветственныеЛицаОрганизацийДляПечати.СоздатьНаборЗаписей();
		ОтветственныеЛица.Прочитать();
		
		Для Каждого ЗаписьОтветственныеЛица Из ОтветственныеЛица Цикл 
			
			Если ЗаписьОтветственныеЛица.удалитьОтветственноеЛицо = Перечисления.удалитьОтветственныеЛицаОрганизаций.Руководитель Тогда 
				ОтветственноеЛицо = Справочники.ВидыОтветственныхЛиц.Руководитель;
			ИначеЕсли ЗаписьОтветственныеЛица.удалитьОтветственноеЛицо = Перечисления.удалитьОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда	
				ОтветственноеЛицо = Справочники.ВидыОтветственныхЛиц.ГлавныйБухгалтер;
			ИначеЕсли ЗаписьОтветственныеЛица.удалитьОтветственноеЛицо = Перечисления.удалитьОтветственныеЛицаОрганизаций.Кассир Тогда	
				ОтветственноеЛицо = Справочники.ВидыОтветственныхЛиц.Кассир;
			Иначе 
				Продолжить;
			КонецЕсли;	
				
			ЗаписьОтветственныеЛица.ОтветственноеЛицо = ОтветственноеЛицо;	
		КонецЦикла;	
		
		ОтветственныеЛица.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обновить ответственные лица по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_1_2_6

Процедура ЗаполнениеВидаОтчетаВОтчетеПоНДС(Параметры) Экспорт

	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ОтчетПоНДС");
		Блокировка.Заблокировать();

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОтчетПоНДС.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ОтчетПоНДС КАК ОтчетПоНДС";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			ДокументОбъект.ВидОтчета = Перечисления.ВидыОтчетаПоНДС.Первоначальный;
				
			ДокументОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось заполнить вид отчета по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_1_2_9

Процедура ЗаполнениеРеквизитовДокумента_СФВыписанный(Параметры) Экспорт

	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СчетФактураВыписанный");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактураВыписанный.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.СчетФактураВыписанный КАК СчетФактураВыписанный";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Для Каждого СтрокаТабличнойЧасти ИЗ ДокументОбъект.ДокументыОснования Цикл	
				СтрокаТабличнойЧасти.СтавкаНДС 	= СтрокаТабличнойЧасти.ДокументОснование.СтавкаНДС;
				СтрокаТабличнойЧасти.Валюта 	= СтрокаТабличнойЧасти.ДокументОснование.ВалютаДокумента;		
			КонецЦикла;	
				
			ДокументОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось заполнить реквизиты по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_1_2_10

Процедура ПереносНастроекВЗначенияПоУмолчанию(Параметры) Экспорт
	
	ОсновнаяОрганизация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОсновнаяОрганизация", "");
	Если НЕ ОсновнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда 
		ОбщегоНазначенияБПСервер.УстановитьЗначениеПоУмолчанию("ОсновнаяОрганизация", ОсновнаяОрганизация);
	КонецЕсли;	
	
	ОсновнойСклад = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОсновнойСклад", "");
	Если НЕ ОсновнойСклад = Справочники.Организации.ПустаяСсылка() Тогда 
		ОбщегоНазначенияБПСервер.УстановитьЗначениеПоУмолчанию("ОсновнойСклад", ОсновнойСклад);
	КонецЕсли;
	
	ОсновнаяФормаПрайсЛиста = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОсновнаяФормаПрайсЛиста", "");
	Если НЕ ОсновнаяФормаПрайсЛиста = Справочники.Организации.ПустаяСсылка() Тогда 
		ОбщегоНазначенияБПСервер.УстановитьЗначениеПоУмолчанию("ОсновнаяФормаПрайсЛиста", ОсновнаяФормаПрайсЛиста);
	КонецЕсли;	
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_1_3_2

Процедура ДобавитьЭлементПроверкиУчета(Параметры) Экспорт

	КонтрольВеденияУчетаСлужебный.ОбновитьВспомогательныеДанныеПоИзменениямКонфигурации();
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_1_3_4

Процедура ПерепроведениеДокументовПоступления(Параметры) Экспорт

	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ПоступлениеТоваровУслуг");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
			|ГДЕ
			|	НЕ ДополнительныеРасходы.ПометкаУдаления
			|	И ДополнительныеРасходы.Проведен";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл	
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();		
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось провести документы поступления товаров и услуг по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_1_3_5

Процедура ЗаполнениеСтавокВСчетФактуреВыписанной(Параметры) Экспорт

	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СчетФактураВыписанный");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактураВыписанный.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.СчетФактураВыписанный КАК СчетФактураВыписанный
			|ГДЕ
			|	НЕ СчетФактураВыписанный.ПометкаУдаления
			|	И СчетФактураВыписанный.Проведен";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл	
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Для Каждого СтрокаТабличнойЧасти ИЗ ДокументОбъект.Товары Цикл
				
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументОснования) Тогда
					
					СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.ДокументОснования.СтавкаНДС;
					
					Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
						
						Если СтрокаТабличнойЧасти.Номенклатура.Услуга Тогда
							
							СтрокаТабличнойЧасти.СтавкаНСП = СтрокаТабличнойЧасти.ДокументОснования.СтавкаНСПУслуги;
							
						Иначе
							
							СтрокаТабличнойЧасти.СтавкаНСП = СтрокаТабличнойЧасти.ДокументОснования.СтавкаНСП;
							
						КонецЕсли;	
						
					КонецЕсли;	
					
				КонецЕсли;	
				
			КонецЦикла;	
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать документы СФ выписанные по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
