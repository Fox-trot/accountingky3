////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы Бухгалтерия для предприятия, редакция 3.0.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "БухгалтерияДляКыргызстана";
	Описание.Версия = "3.0.12.9";

	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики этого события для подсистем БСП добавляются через подписку на служебное событие:
	// "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления".
	//
	// Процедуры обработки этого события всех подсистем БСП имеют то же имя, что и эта процедура,
	// но размещены в своих подсистемах.
	// Чтобы найти процедуры можно выполнить глобальный поиск по имени процедуры.
	// Чтобы найти модули в которых размещены процедуры, можно выполнить поиск по имени события.
	
	// Обработчики, выполняемые при заполнении пустой ИБ
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПервыйЗапуск";
	Обработчик.Комментарий = НСтр("ru = 'Выполнение обработчиков первого запуска.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьДатуТекущейВерсии";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Оперативно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.0";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ИнициализироватьПользователей";
	Обработчик.Комментарий = НСтр("ru = 'Инициализация пользователей.'");
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.0";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьПредопределенныеВидыКонтактнойИнформации";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Комментарий = НСтр("ru = 'Обновление видов контактной информации.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.9.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьДанныеСправочниковДляНалогаНаИмущество";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("819a99cb-9ce0-43a4-84eb-7bf9d517dbe4");
	Обработчик.Комментарий = НСтр("ru = 'Перезаполнение справочников для налога на имущество.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.9.17";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ДозаполнитьДокументыСчетФактурыПолученные";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4c639894-a7b7-4839-a837-59f880c8c4a4");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение новых реквизитов документа.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.10.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ДозаполнитьДокументыГТДПоИмпорту";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("75f5586c-06cd-49d5-8602-8495bef8a86a");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение новых реквизитов документа.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.10.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПерепровестиДокументыПостуленияИмпортЭкспорт";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c136c66c-2b59-4d41-a886-4b447307504d");
	Обработчик.Комментарий = НСтр("ru = 'Перепроведение документов поступления товаров и услуг с признаком страны ""Импорт/Экспорт"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.10.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьДанныеРегистраСведений_РеестрПриобретенныхМатериальныхРесурсов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("de5015ca-9129-4fc3-ad82-b3df4315abfe");
	Обработчик.Комментарий = НСтр("ru = 'Перепроведение документов РС ""Реестр приобретенных материальных ресурсов"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.10.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьСтажиСотрудников";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("37a83d6e-fe48-4ca4-8f70-f457feb8c031");
	Обработчик.Комментарий = НСтр("ru = 'Добавление периода в регистр сведений ""Стажи сотрудников"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.10.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьРегистрДанныеДляОтчетаРеестрВвезенных";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f4df75a3-0859-4e86-8f6d-40d2cd859f04");
	Обработчик.Комментарий = НСтр("ru = 'Обновление данных в регистре накопления ""Данные для отчета реестр ввезенных"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.10.14";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьПроводкиДокументовГТДПоИмпорту";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("518f18da-80ca-4a62-9932-d7b40e220485");
	Обработчик.Комментарий = НСтр("ru = 'Обновление проводок РБХ.'");
		
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.10.15";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьРегистрСведенияОНДСНаИмпорт";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0f1296ad-948d-4754-866f-43ddd0db30a5");
	Обработчик.Комментарий = НСтр("ru = 'Обновление данных в регистре сведений ""Сведения о НДС на импорт"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.10.18";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьСпособыОтраженияЗаработнойПлаты";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f3a8421d-3a38-4dc0-b397-ec10564baf9b");
	Обработчик.Комментарий = НСтр("ru = 'Создание и заполнение способов расчета заработной платы.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.11.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьРегистрРасчетаНачисления";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6df927f1-b52d-4fb6-b20f-1c3147c89ff5");
	Обработчик.Комментарий = НСтр("ru = 'Дополнение данных о норме днях и часах в регистра расчета ""Начисления"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.11.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПереименоватьСчет6210";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5e6222dc-c5c6-4cfb-80cc-a81197008250");
	Обработчик.Комментарий = НСтр("ru = 'Переименовать счет 6210.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.11.16";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПерезаполнитьСтавкаГруппИмущества";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1221de98-846b-4296-8ac0-1d6ad23d93af");
	Обработчик.Комментарий = НСтр("ru = 'Перезаполнение ставок 2 и 3 групп имущества.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.11.21";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПерезаполнитьСтавкиВидовТранспортаНалогаНаИмущество";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0c19286a-c11d-4cbf-875b-d634befcbbed");
	Обработчик.Комментарий = НСтр("ru = 'Перезаполнение ставки для несамоходного транспорта.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.12.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьКодыСтрокВСтатьяхДвиженияДенежныхСредств";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6784fd1e-7bd2-46f6-b378-24fbfd0fbcdc");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита ""Код строки"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Версия = "3.0.12.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьРегистрНакопления_ПродажиОсновныхСредств";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b17651ad-7b87-4fe6-bd29-60921f83a17f");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра накопления ""Продажи основных средств"".'");
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
		
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "ПредыдущееИмяКонфигурацииБазовая" Тогда
		Параметры.ВерсияКонфигурации = ПредыдущаяВерсияКонфигурации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение пустой ИБ

// Процедура заполняет пустую ИБ.
//
Процедура ПервыйЗапуск() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	// В новой базе устанавливается режим интерфейса "Такси"
	Константы.ИнтерфейсТакси.Установить(Истина);
	Константы.ИнтерфейсВерсии82.Установить(Ложь);
	Константы.НеВестиУчетПоОрганизациям.Установить(Истина);

	////////////////////////////////////////////////////////////////////////////////
	// Параметры учета и план счетов
	ЗаполнитьПараметрыУчета();
	
	////////////////////////////////////////////////////////////////////////////////
	// Подсистема Банк/Касса
	ЗаполнитьДанныеПоПодсистемеБанкКасса();
	
	////////////////////////////////////////////////////////////////////////////////	
	// Подсистема Основные средства
	ЗаполнитьДанныеПоПодсистемеОсновныеСредства();
	
	////////////////////////////////////////////////////////////////////////////////
	// Подсистема Заработная плата
	ЗаполнитьДанныеПоЗаработнойПлате();

	// Налоги
	ЗаполнитьДанныеНалогообложения();
	
	// Регламентированная отчетность.
	Справочники.НастройкиРегламентированныхОтчетов.ЗаполнитьПоУмолчанию();
	
КонецПроцедуры // ПервыйЗапуск()

////////////////////////////////////////////////////////////////////////////////
// Обновление ИБ

// Демонстрирует процедуру-обработчик обновления данных ИБ, 
// которая выполняется каждый раз при смене версии конфигурации.
//
Процедура ВыполнятьВсегдаПриСменеВерсии(Параметры = Неопределено) Экспорт
	
	// Проверка необходимости обновления критичных общих данных
	ТребуетсяОбновитьКритичныеОбщиеДанные = Ложь;
	// Конец Проверка необходимости обновления критичных общих данных
	Если ТребуетсяОбновитьКритичныеОбщиеДанные Тогда
		Если Параметры <> Неопределено И НЕ Параметры.МонопольныйРежим Тогда
			Параметры.МонопольныйРежим = Истина;
			Возврат;
		КонецЕсли;
		// Код обновления критичных общих данных
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьДатуТекущейВерсии() Экспорт
	Константы.ДатаТекущейВерсии.Установить(Дата(2018,10,8));
КонецПроцедуры

// Обновляет значения реквизитов предопределенных видов контактной информации
//
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформации() Экспорт
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	// Организации
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ЮрАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ФактАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Факс");
	ПараметрыВида.Вид = "ФаксОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 4;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "EmailОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 5;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ПочтовыйАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 6;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Другое");
	ПараметрыВида.Вид = "ДругаяИнформацияОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 7;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
		
	// Контрагенты
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ЮрАдресКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ФактАдресКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Факс");
	ПараметрыВида.Вид = "ФаксКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 4;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "EmailКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 5;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ПочтовыйАдресКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 6;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Физические Лица
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "АдресМестаПроживанияФизическиеЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "АдресПоПропискеФизическиеЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонДомашнийФизическиеЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонРабочийФизическиеЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 4;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры // ВключитьМножественныйВводКонтактнойИнформации()

#КонецОбласти

#Область ОбработчикиПервогоЗапуска

// Заполняет данные параметров учета
//
Процедура ЗаполнитьПараметрыУчета()

	// Добавление организации.
	Справочники.Организации.ЗаполнитьПоУмолчанию();
	
	// Заполнение плана счетов.
	ПланыСчетов.Хозрасчетный.ЗаполнитьПоУмолчанию();	
	
	// Заполнение справочника ГНС
	Справочники.ГНС.ЗаполнитьПоУмолчанию();
		
	// Заполнение справочника Классификатор единиц измерения
	Справочники.КлассификаторЕдиницИзмерения.ЗаполнитьПоУмолчанию();
	
	// Заполнение счетов учета номенклатуры
	РегистрыСведений.СчетаУчетаНоменклатуры.ЗаполнитьПоУмолчанию();
	РегистрыСведений.СчетаРасчетовСКонтрагентами.ЗаполнитьПоУмолчанию();
		
	Константы.ФункциональнаяОпцияУчетПоНесколькимОрганизациям.Установить(Ложь);
	Константы.МакетОформленияОтчетов.Установить("Арктика");
	Константы.КонтролироватьОстаткиПриПроведении.Установить(Истина);
	Константы.ФункциональнаяОпцияДопРасходыНаОдноПоступление.Установить(Истина);
	Константы.ИспользоватьСтатьиДвиженияДенежныхСредств.Установить(Истина);
	
	// Прочее.
	Справочники.СтраныМира.ЗаполнитьПоУмолчанию();

КонецПроцедуры // ЗаполнитьПараметрыУчета()  

// Заполняет данные по подсиситеме Банк/Касса
//
Процедура ЗаполнитьДанныеПоПодсистемеБанкКасса()
	// Заполнение справочника "Валюты" 
	Справочники.Валюты.ЗаполнитьПоУмолчанию();
	
	// Добавление национальной валюты
	НациональнаяВалютаСсылка = Справочники.Валюты.НайтиПоКоду("417");	
	Константы.ВалютаРегламентированногоУчета.Установить(НациональнаяВалютаСсылка);
			
	// РС Курсы валют на 01.01.2015
	РегистрыСведений.КурсыВалют.ЗаполнитьПоУмолчанию();
	
	// Добавление касс 
	Справочники.Кассы.ЗаполнитьПоУмолчанию();
	
	// Заполнение справочника "Статьи ДДС"
	Справочники.СтатьиДвиженияДенежныхСредств.ЗаполнитьПоУмолчанию();
	
	// Заполнение справочника "Виды статей"
	Справочники.ВидыЗатрат.ЗаполнитьПоУмолчанию();
	
	// Заполнение справочника "ТипыЦенНоменклатуры"
	Справочники.ТипыЦенНоменклатуры.ЗаполнитьПоУмолчанию();
	
КонецПроцедуры // ЗаполнитьДанныеПоПодсистемеОсновныеСредства()

// Заполняет данные по подсиситеме ЗаработнойПлаты
//
Процедура ЗаполнитьДанныеПоЗаработнойПлате()
	Справочники.МетодыРасчетаОтпуска.ЗаполнитьПоУмолчанию();
	Справочники.Статусы.ЗаполнитьПоУмолчанию();
	
	Справочники.СтрокиОтчетаПН.ЗаполнитьПоУмолчанию();
	
	Справочники.СтатьиТрудовогоКодекса.ЗаполнитьПоУмолчанию();
	
	Справочники.СостояниеВБраке.ЗаполнитьПоУмолчанию();
	Справочники.СтепениЗнанияЯзыка.ЗаполнитьПоУмолчанию();
	Справочники.СтепениРодстваФизическихЛиц.ЗаполнитьПоУмолчанию();
	Справочники.УченыеЗвания.ЗаполнитьПоУмолчанию();
	Справочники.УченыеСтепени.ЗаполнитьПоУмолчанию();
	Справочники.Города.ЗаполнитьПоУмолчанию();
	
	РегистрыСведений.НормыБольничныхЛистов.ЗаполнитьПоУмолчанию();
	РегистрыСведений.ТарифыКомандировочных.ЗаполнитьПоУмолчанию();
	РегистрыСведений.УчетнаяПолитикаПоПерсоналу.ЗаполнитьПоУмолчанию();
КонецПроцедуры // ЗаполнитьДанныеПоПодсистемеОсновныеСредства()

// Заполняет данные по Налогообложению
//
Процедура ЗаполнитьДанныеНалогообложения()
	РегистрыСведений.СтавкиНДС.ЗаполнитьПоУмолчанию();
	РегистрыСведений.СтавкиНСП.ЗаполнитьПоУмолчанию();
КонецПроцедуры // ЗаполнитьДанныеНалогообложения()

// Заполняет данные по подсиситеме Основные средства
//
Процедура ЗаполнитьДанныеПоПодсистемеОсновныеСредства()

	// Заполнение справочника ГруппыНалоговогоУчетаОС
	Справочники.ГруппыНалоговогоУчетаОС.ЗаполнитьПоУмолчанию();
	
	// Заполнение справочника ГруппыИмущества
	Справочники.ГруппыИмущества.ЗаполнитьПоУмолчанию();
	
	// Заполнение справочника ВидыМатериаловСтен
	Справочники.ВидыМатериаловСтенНалогНаИмущество.ЗаполнитьПоУмолчанию(); 
	
	// Заполнение справочника ВидыТранспортаНалогНаИмущество
	Справочники.ВидыТранспортаНалогНаИмущество.ЗаполнитьПоУмолчанию();
	
	// Заполнение справочника СпособыОтраженияРасходовПоАмортизации
	Справочники.СпособыОтраженияРасходовПоАмортизации.ЗаполнитьПоУмолчанию();
	
КонецПроцедуры // ЗаполнитьДанныеПоПодсистемеОсновныеСредства()

#КонецОбласти

#Область ОбработчикиСозданиеПользователей

// Процедура инициализации пользователей конфигурации. 
//
Процедура ИнициализироватьПользователей() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	//// Добавление администратора (администратор системы - полные права).
	//Пользователи.СоздатьАдминистратора();
	//
	//// Добавление пользователя.
	//ДобавитьПользователя(НСтр("ru = 'Пользователь'"));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбновления

#Область Обновление_3_0_9_13

Процедура ОбновитьДанныеСправочниковДляНалогаНаИмущество(Параметры) Экспорт
	
	// Заполнение справочника ВидыМатериаловСтен
	Справочники.ВидыМатериаловСтенНалогНаИмущество.ЗаполнитьПоУмолчанию(); 
	
	// Заполнение справочника ВидыТранспортаНалогНаИмущество
	Справочники.ВидыТранспортаНалогНаИмущество.ЗаполнитьПоУмолчанию();
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_9_17

Процедура ДозаполнитьДокументыСчетФактурыПолученные(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураПолученный.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный";	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДокументОбъект.ПризнакСтраны = ДокументОбъект.Контрагент.ПризнакСтраны;
		
		Если ДокументОбъект.ВалютаДокумента = Справочники.Валюты.ПустаяСсылка() Тогда
			ДокументОбъект.Курс 	 = 1;
			ДокументОбъект.Кратность = 1;
		Иначе	
			СтруктураКурсКратность 	 = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
			ДокументОбъект.Курс 	 = ?(СтруктураКурсКратность.Курс = 0, 1, СтруктураКурсКратность.Курс);
			ДокументОбъект.Кратность = ?(СтруктураКурсКратность.Кратность = 0, 1, СтруктураКурсКратность.Кратность);
		КонецЕсли;	
			
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать документ.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать документ по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_10_4

Процедура ДозаполнитьДокументыГТДПоИмпорту(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГТДПоИмпорту.Ссылка,
		|	ГТДПоИмпорту.Проведен
		|ИЗ
		|	Документ.ГТДПоИмпорту КАК ГТДПоИмпорту";	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
	    ДокументОбъект.РаспределитьСуммуБазыНДС();
		
		Если Выборка.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;	
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;	
			
		Попытка
			ДокументОбъект.Записать(РежимЗаписи);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать документ.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать документ по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_10_6

Процедура ПерепровестиДокументыПостуленияИмпортЭкспорт(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.ПризнакСтраны = ЗНАЧЕНИЕ(Перечисление.ПризнакиСтраны.ИмпортЭкспорт)
		|	И ПоступлениеТоваровУслуг.Ссылка ССЫЛКА Документ.ПоступлениеТоваровУслуг";	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать документ.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать документ по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_10_7

Процедура ОбновитьДанныеРегистраСведений_РеестрПриобретенныхМатериальныхРесурсов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеестрПриобретенныхМатериальныхРесурсов.Регистратор КАК Ссылка
		|ИЗ
		|	РегистрСведений.РеестрПриобретенныхМатериальныхРесурсов КАК РеестрПриобретенныхМатериальныхРесурсов
		|ГДЕ
		|	НЕ РеестрПриобретенныхМатериальныхРесурсов.Регистратор ССЫЛКА Документ.АвансовыйОтчет";	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать документ.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать документ по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_10_8

Процедура ОбновитьСтажиСотрудников(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтажиСотрудников.Регистратор.Дата КАК Период,
		|	СтажиСотрудников.Регистратор КАК Регистратор,
		|	СтажиСотрудников.Организация КАК Организация,
		|	СтажиСотрудников.ФизЛицо КАК ФизЛицо,
		|	СтажиСотрудников.КоличествоЛет КАК КоличествоЛет,
		|	СтажиСотрудников.КоличествоМесяцев КАК КоличествоМесяцев,
		|	СтажиСотрудников.КоличествоДней КАК КоличествоДней
		|ИЗ
		|	РегистрСведений.СтажиСотрудников КАК СтажиСотрудников";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.СтажиСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		Если ВыборкаДетальныеЗаписи.КоличествоЛет +
			ВыборкаДетальныеЗаписи.КоличествоМесяцев +
			ВыборкаДетальныеЗаписи.КоличествоДней > 0 Тогда 
			
			НоваяЗапись = НаборЗаписей.Добавить();		
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
		КонецЕсли;
		
		НаборЗаписей.Записать();
	КонецЦикла;

	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_10_10

Процедура ОбновитьРегистрДанныеДляОтчетаРеестрВвезенных(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДляОтчетаРеестрВвезенных.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ДанныеДляОтчетаРеестрВвезенных КАК ДанныеДляОтчетаРеестрВвезенных
		|ГДЕ
		|	ДанныеДляОтчетаРеестрВвезенных.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг";	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать документ.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать документ по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_10_14

Процедура ОбновитьПроводкиДокументовГТДПоИмпорту(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГТДПоИмпорту.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ГТДПоИмпорту КАК ГТДПоИмпорту
		|ГДЕ
		|	ГТДПоИмпорту.Проведен";	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать документ.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать документ по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_10_15

Процедура ОбновитьРегистрСведенияОНДСНаИмпорт(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОНДСНаИмпорт.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.СведенияОНДСНаИмпорт КАК СведенияОНДСНаИмпорт";	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать документ.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать документ по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_10_18

Процедура ЗаполнитьСпособыОтраженияЗаработнойПлаты(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	удалитьСчетаУчетаЗП.Подразделение КАК Подразделение,
		|	удалитьСчетаУчетаЗП.Подразделение.Наименование КАК ПодразделениеНаименование,
		|	удалитьСчетаУчетаЗП.ВидРасчетаНачисления КАК ВидРасчета,
		|	удалитьСчетаУчетаЗП.ВидРасчетаНачисления.Наименование КАК ВидРасчетаНаименование,
		|	удалитьСчетаУчетаЗП.СчетУчетаЗатрат КАК СчетЗатрат,
		|	удалитьСчетаУчетаЗП.СтатьяЗатрат КАК СтатьяЗатрат,
		|	удалитьСчетаУчетаЗП.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	удалитьСчетаУчетаЗП.СчетУчетаЗатратСоцОтчисления КАК СчетЗатратСФ,
		|	удалитьСчетаУчетаЗП.СтатьяЗатратСоцОтчисления КАК СтатьяЗатратСоцОтчисления
		|ИЗ
		|	РегистрСведений.удалитьСчетаУчетаЗП КАК удалитьСчетаУчетаЗП";
	РезультатЗапроса = Запрос.Выполнить();
	
	// Создание способов.	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СпособыОтраженияЗаработнойПлаты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.СпособыОтраженияЗаработнойПлаты КАК СпособыОтраженияЗаработнойПлаты
			|ГДЕ
			|	СпособыОтраженияЗаработнойПлаты.Подразделение = &Подразделение
			|	И СпособыОтраженияЗаработнойПлаты.ВидРасчета = &ВидРасчета
			|	И СпособыОтраженияЗаработнойПлаты.СчетЗатрат = &СчетЗатрат
			|	И СпособыОтраженияЗаработнойПлаты.СчетЗатратСФ = &СчетЗатратСФ";
		Запрос.УстановитьПараметр("ВидРасчета", ВыборкаДетальныеЗаписи.ВидРасчета);
		Запрос.УстановитьПараметр("Подразделение", ВыборкаДетальныеЗаписи.Подразделение);
		Запрос.УстановитьПараметр("СчетЗатрат", ВыборкаДетальныеЗаписи.СчетЗатрат);
		Запрос.УстановитьПараметр("СчетЗатратСФ", ВыборкаДетальныеЗаписи.СчетЗатратСФ);
	
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда 
			СправочникОбъект = Справочники.СпособыОтраженияЗаработнойПлаты.СоздатьЭлемент();
			Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Подразделение)
				И НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ВидРасчета) Тогда 
				Наименование = "Способ (автосоздание)";
			Иначе 
				Наименование = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПодразделениеНаименование), ВыборкаДетальныеЗаписи.ПодразделениеНаименование + " ", "")
				+ ВыборкаДетальныеЗаписи.ВидРасчетаНаименование;	
			КонецЕсли;
			
			СправочникОбъект.Наименование = СокрЛП(Наименование);
			ЗаполнитьЗначенияСвойств(СправочникОбъект, ВыборкаДетальныеЗаписи);
			
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ВыборкаДетальныеЗаписи.СчетЗатрат);
			// Субконто1
			Если СвойстваСчета.ВидСубконто1ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто1ТипЗначения.СодержитТип(Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда 
				СправочникОбъект.СубконтоЗатрат1 = ВыборкаДетальныеЗаписи.Подразделение;
			ИначеЕсли СвойстваСчета.ВидСубконто1ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто1ТипЗначения.СодержитТип(Тип("СправочникСсылка.СтатьиЗатрат")) Тогда	
				СправочникОбъект.СубконтоЗатрат1 = ВыборкаДетальныеЗаписи.СтатьяЗатрат;
			ИначеЕсли СвойстваСчета.ВидСубконто1ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто1ТипЗначения.СодержитТип(Тип("СправочникСсылка.НоменклатурныеГруппы")) Тогда	
				СправочникОбъект.СубконтоЗатрат1 = ВыборкаДетальныеЗаписи.НоменклатурнаяГруппа;
			КонецЕсли;	
				
			// Субконто2
			Если СвойстваСчета.ВидСубконто2ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто2ТипЗначения.СодержитТип(Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда 
				СправочникОбъект.СубконтоЗатрат2 = ВыборкаДетальныеЗаписи.Подразделение;
			ИначеЕсли СвойстваСчета.ВидСубконто2ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто2ТипЗначения.СодержитТип(Тип("СправочникСсылка.СтатьиЗатрат")) Тогда	
				СправочникОбъект.СубконтоЗатрат2 = ВыборкаДетальныеЗаписи.СтатьяЗатрат;
			ИначеЕсли СвойстваСчета.ВидСубконто2ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто2ТипЗначения.СодержитТип(Тип("СправочникСсылка.НоменклатурныеГруппы")) Тогда	
				СправочникОбъект.СубконтоЗатрат2 = ВыборкаДетальныеЗаписи.НоменклатурнаяГруппа;
			КонецЕсли;	
				
			// Субконто3
			Если СвойстваСчета.ВидСубконто3ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто3ТипЗначения.СодержитТип(Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда 
				СправочникОбъект.СубконтоЗатрат3 = ВыборкаДетальныеЗаписи.Подразделение;
			ИначеЕсли СвойстваСчета.ВидСубконто3ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто3ТипЗначения.СодержитТип(Тип("СправочникСсылка.СтатьиЗатрат")) Тогда	
				СправочникОбъект.СубконтоЗатрат3 = ВыборкаДетальныеЗаписи.СтатьяЗатрат;
			ИначеЕсли СвойстваСчета.ВидСубконто3ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто3ТипЗначения.СодержитТип(Тип("СправочникСсылка.НоменклатурныеГруппы")) Тогда	
				СправочникОбъект.СубконтоЗатрат3 = ВыборкаДетальныеЗаписи.НоменклатурнаяГруппа;
			КонецЕсли;	
			
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ВыборкаДетальныеЗаписи.СчетЗатратСФ);
			// Субконто1
			Если СвойстваСчета.ВидСубконто1ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто1ТипЗначения.СодержитТип(Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда 
				СправочникОбъект.СубконтоЗатратСФ1 = ВыборкаДетальныеЗаписи.Подразделение;
			ИначеЕсли СвойстваСчета.ВидСубконто1ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто1ТипЗначения.СодержитТип(Тип("СправочникСсылка.СтатьиЗатрат")) Тогда	
				СправочникОбъект.СубконтоЗатратСФ1 = ВыборкаДетальныеЗаписи.СтатьяЗатратСоцОтчисления;
			ИначеЕсли СвойстваСчета.ВидСубконто1ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто1ТипЗначения.СодержитТип(Тип("СправочникСсылка.НоменклатурныеГруппы")) Тогда	
				СправочникОбъект.СубконтоЗатратСФ1 = ВыборкаДетальныеЗаписи.НоменклатурнаяГруппа;
			КонецЕсли;	
				
			// Субконто2
			Если СвойстваСчета.ВидСубконто2ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто2ТипЗначения.СодержитТип(Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда 
				СправочникОбъект.СубконтоЗатратСФ2 = ВыборкаДетальныеЗаписи.Подразделение;
			ИначеЕсли СвойстваСчета.ВидСубконто2ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто2ТипЗначения.СодержитТип(Тип("СправочникСсылка.СтатьиЗатрат")) Тогда	
				СправочникОбъект.СубконтоЗатратСФ2 = ВыборкаДетальныеЗаписи.СтатьяЗатратСоцОтчисления;
			ИначеЕсли СвойстваСчета.ВидСубконто2ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто2ТипЗначения.СодержитТип(Тип("СправочникСсылка.НоменклатурныеГруппы")) Тогда	
				СправочникОбъект.СубконтоЗатратСФ2 = ВыборкаДетальныеЗаписи.НоменклатурнаяГруппа;
			КонецЕсли;	
				
			// Субконто3
			Если СвойстваСчета.ВидСубконто3ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто3ТипЗначения.СодержитТип(Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда 
				СправочникОбъект.СубконтоЗатратСФ3 = ВыборкаДетальныеЗаписи.Подразделение;
			ИначеЕсли СвойстваСчета.ВидСубконто3ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто3ТипЗначения.СодержитТип(Тип("СправочникСсылка.СтатьиЗатрат")) Тогда	
				СправочникОбъект.СубконтоЗатратСФ3 = ВыборкаДетальныеЗаписи.СтатьяЗатратСоцОтчисления;
			ИначеЕсли СвойстваСчета.ВидСубконто3ТипЗначения <> Неопределено
				И СвойстваСчета.ВидСубконто3ТипЗначения.СодержитТип(Тип("СправочникСсылка.НоменклатурныеГруппы")) Тогда	
				СправочникОбъект.СубконтоЗатратСФ3 = ВыборкаДетальныеЗаписи.НоменклатурнаяГруппа;
			КонецЕсли;	
			
			БухгалтерскийУчетКлиентСервер.ЗаписатьСправочникОбъект(СправочникОбъект);
		КонецЕсли;		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачислениеЗарплатыНачисления.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
		|ГДЕ
		|	НачислениеЗарплатыНачисления.СпособОтражения = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗаработнойПлаты.ПустаяСсылка)
		|	И НачислениеЗарплатыНачисления.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыНачисления.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БольничныйЛистНачисления.Ссылка
		|ИЗ
		|	Документ.БольничныйЛист.Начисления КАК БольничныйЛистНачисления
		|ГДЕ
		|	БольничныйЛистНачисления.СпособОтражения = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗаработнойПлаты.ПустаяСсылка)
		|	И БольничныйЛистНачисления.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	БольничныйЛистНачисления.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтпускНачисления.Ссылка
		|ИЗ
		|	Документ.Отпуск.Начисления КАК ОтпускНачисления
		|ГДЕ
		|	ОтпускНачисления.СпособОтражения = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗаработнойПлаты.ПустаяСсылка)
		|	И ОтпускНачисления.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтпускНачисления.Ссылка";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		СтруктураОтбора = ПроведениеРасчетовПоЗарплатеСервер.СтруктураОтбораСпособыОтраженияЗаработнойПлаты();
		
		Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Начисления Цикл 
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТабличнойЧасти);
			СтрокаТабличнойЧасти.СпособОтражения = ПроведениеРасчетовПоЗарплатеСервер.СпособОтраженияЗаработнойПлаты(СтруктураОтбора);
		КонецЦикла;	
		
		Попытка
			ДокументОбъект.Записать();	
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось завершить запись по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Обновление_3_0_11_4

Процедура ОбновитьРегистрРасчетаНачисления(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления";	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать документ.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать документ по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_11_6

Процедура ПереименоватьСчет6210(Параметры) Экспорт
	СчетОбъект = ПланыСчетов.Хозрасчетный.ДоходыОтРеализацииАктивовНеПодлежащихАмортизации.ПолучитьОбъект();
	СчетОбъект.Наименование = "Доходы от реализации активов, не подлежащих амортизации";
	СчетОбъект.Записать();
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_11_16

Процедура ПерезаполнитьСтавкаГруппИмущества(Параметры) Экспорт
	
	// Заполнение справочника ГруппыИмущества
	Справочники.ГруппыИмущества.ЗаполнитьПоУмолчанию();
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_11_21

Процедура ПерезаполнитьСтавкиВидовТранспортаНалогаНаИмущество(Параметры) Экспорт
	
	// Заполнение справочника ВидыТранспортаНалогНаИмущество
	Справочники.ВидыТранспортаНалогНаИмущество.ЗаполнитьПоУмолчанию();
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_12_6

Процедура ЗаполнитьКодыСтрокВСтатьяхДвиженияДенежныхСредств(Параметры) Экспорт
	
	// Заполнение справочника "Статьи ДДС"
	Справочники.СтатьиДвиженияДенежныхСредств.ЗаполнитьПоУмолчанию();
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_12_8

Процедура ЗаполнитьРегистрНакопления_ПродажиОсновныхСредств(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РеализацияТоваровУслугОС.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.ОС КАК РеализацияТоваровУслугОС
		|ГДЕ
		|	РеализацияТоваровУслугОС.Ссылка.Проведен";	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать документ.
			|Техническая информация об ошибке: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			#Если Сервер Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать документ по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
КонецПроцедуры

#КонецОбласти
