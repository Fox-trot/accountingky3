
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФИЗЛИЦАМИ

// Функция формирует фамилию и инициалы
//
// Параметры
//  Фамилия  - фамилия физ. лица.
//  Имя      - имя физ. лица.
//  Отчество - отчество физ. лица.
//
// Возвращаемое значение 
//  Фамилия, имя, отчество одной строкой.
//
Функция ПолучитьФамилиюИмяОтчество(Фамилия = " ", Имя = " ", Отчество = " ") Экспорт

	Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + 
			?(НЕ ПустаяСтрока(Отчество) , 
			Лев(Отчество,1)+".", ""), ""), "");

КонецФункции // ПолучитьФамилиюИмяОтчество()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ОРГАНИЗАЦИЯМ, КОНТРАГЕНТАМИ И ФИЗЛИЦАМИ
		 
//  Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация, контрагент или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и отчества.
//  БанковскийСчет - Банковский счет, если счет не основной.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода = '20200101', ДляФизЛицаТолькоИнициалы = Истина, БанковскийСчет = Неопределено) Экспорт

	Сведения = Новый Структура("Представление, 
								|ПолноеНаименование, 
								|КодПоОКПО, 
								|ИНН, 
								
								|Телефоны, 
								|ЮридическийАдрес, 
								
								|Банк, 
								|БИК, 
								|КоррСчет, 
								|НомерСчета, 
								|АдресБанка,
								
								|ДатаСвидетельстваПоНДС,
								|НомерСвидетельстваПоНДС,
								|СерияСвидетельстваПоНДС,
								|СвидетельствоПоНДС,
								
								|ЮрФизЛицо");
	Запрос   = Новый Запрос;
	Данные   = Неопределено;

	Если ЮрФизЛицо = Неопределено ИЛИ ЮрФИзЛицо = NULL Тогда
		Возврат Сведения;
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("Строка") Тогда
		Сведения.Вставить("Представление",      ЮрФизЛицо);
		Сведения.Вставить("ПолноеНаименование", ЮрФизЛицо);
		
		Возврат Сведения;
	КонецЕсли;

	Если БанковскийСчет = Неопределено ИЛИ БанковскийСчет.Пустая() Тогда
		ТекБанковскийСчет = ЮрФизЛицо.ОсновнойБанковскийСчет;
	Иначе
		ТекБанковскийСчет = БанковскийСчет;
	КонецЕсли;

	// Выберем основные сведения о контрагенте и банковском счете
	Если ТекБанковскийСчет = Неопределено ИЛИ ТекБанковскийСчет.БанкДляРасчетов.Пустая() Тогда
		ИмяРеквизитаБанка = "Банк";
	Иначе
		ИмяРеквизитаБанка = "БанкДляРасчетов";
	КонецЕсли;

	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации")  Тогда
		ИмяСправочника = "Организации";
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяСправочника = "Контрагенты";
	Иначе
		Возврат Сведения;
	КонецЕсли;

	МетаданныеСправочника = Метаданные.Справочники[ИмяСправочника];
	
	Запрос.УстановитьПараметр("ПарЮрФизЛицо", ЮрФизЛицо);
	Запрос.УстановитьПараметр("ПарИмяСправочника", ИмяСправочника);
	Запрос.УстановитьПараметр("ПарБанковскийСчет", ТекБанковскийСчет);
	
	Если НЕ ЗначениеЗаполнено(ТекБанковскийСчет) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Представление           						 КАК Наименование,
		|	ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(1000)) КАК ПолноеНаименование,
		|	Организации.ИНН                     						 КАК ИНН,";
		
		Если МетаданныеСправочника.Реквизиты.Найти("ДатаСвидетельстваПоНДС") <> Неопределено Тогда
			Запрос.Текст = Запрос.Текст + "
			|	Организации.ДатаСвидетельстваПоНДС  КАК ДатаСвидетельстваПоНДС,
			|	Организации.НомерСвидетельстваПоНДС КАК НомерСвидетельстваПоНДС,
			|	Организации.СерияСвидетельстваПоНДС КАК СерияСвидетельстваПоНДС,";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|	Организации.КодПоОКПО КАК КодПоОКПО,
		|	""""                                КАК НомерСчета,
		|	""""                                КАК Банк,
		|	""""                                КАК БИК,
		|	""""                                КАК КоррСчет,
		|	""""                                КАК АдресБанка,
		|	ВЫБОР
		|		КОГДА &ПарИмяСправочника = ""Организации""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации)
		|		КОГДА &ПарИмяСправочника = ""Контрагенты""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)
		|	КОНЕЦ КАК ВидыКонтактнойИнформацииЮрАдрес,
		|	ВЫБОР
		|		КОГДА &ПарИмяСправочника = ""Организации""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации)
		|		КОГДА &ПарИмяСправочника = ""Контрагенты""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента)
		|	КОНЕЦ КАК ВидыКонтактнойИнформацииФактАдрес,
		|	ВЫБОР
		|		КОГДА &ПарИмяСправочника = ""Организации""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации)
		|		КОГДА &ПарИмяСправочника = ""Контрагенты""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента)
		|	КОНЕЦ КАК ВидыКонтактнойИнформацииТелефон
		|ИЗ
		|	Справочник." + ИмяСправочника + " КАК Организации
		|
		|ГДЕ
		|	Организации.Ссылка = &ПарЮрФизЛицо";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Представление           						 КАК Наименование,
		|	ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(1000)) КАК ПолноеНаименование,
		|	Организации.ИНН                     						 КАК ИНН,";
		
		Если МетаданныеСправочника.Реквизиты.Найти("ДатаСвидетельстваПоНДС") <> Неопределено Тогда
			Запрос.Текст = Запрос.Текст + "
			|	Организации.ДатаСвидетельстваПоНДС  КАК ДатаСвидетельстваПоНДС,
			|	Организации.НомерСвидетельстваПоНДС КАК НОмерСвидетельстваПоНДС,
			|	Организации.СерияСвидетельстваПоНДС КАК СерияСвидетельстваПоНДС,";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
	   	|	БанковскиеСчета.НомерСчета                     	   КАК НомерСчета,
		|	БанковскиеСчета." + ИмяРеквизитаБанка + "          КАК Банк,
		|	БанковскиеСчета." + ИмяРеквизитаБанка + ".Код      КАК БИК,
		|	БанковскиеСчета." + ИмяРеквизитаБанка + ".КоррСчет КАК КоррСчет,
		|	БанковскиеСчета." + ИмяРеквизитаБанка + ".Адрес    КАК АдресБанка,
		|	ВЫБОР
		|		КОГДА &ПарИмяСправочника = ""Организации""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации)
		|		КОГДА &ПарИмяСправочника = ""Контрагенты""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)
		|	КОНЕЦ КАК ВидыКонтактнойИнформацииЮрАдрес,
		|	ВЫБОР
		|		КОГДА &ПарИмяСправочника = ""Организации""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации)
		|		КОГДА &ПарИмяСправочника = ""Контрагенты""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента)
		|	КОНЕЦ КАК ВидыКонтактнойИнформацииФактАдрес,
		|	ВЫБОР
		|		КОГДА &ПарИмяСправочника = ""Организации""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации)
		|		КОГДА &ПарИмяСправочника = ""Контрагенты""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента)
		|	КОНЕЦ КАК ВидыКонтактнойИнформацииТелефон
		|ИЗ
		|	Справочник." + ИмяСправочника + " КАК Организации,
		|	Справочник.БанковскиеСчета    КАК БанковскиеСчета
		|
		|ГДЕ
		|	Организации.Ссылка       = &ПарЮрФизЛицо
		|	И БанковскиеСчета.Ссылка = &ПарБанковскийСчет";
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	Данные = РезультатЗапроса.Выбрать();
	Данные.Следующий();

	Сведения.Вставить("ПолноеНаименование", СокрЛП(Данные.ПолноеНаименование));

	Если Данные <> Неопределено Тогда
		Сведения.Вставить("Представление",    СокрЛП(Данные.Наименование));
		Сведения.Вставить("ИНН",              Данные.ИНН);
		Сведения.Вставить("ЮрФизЛицо",        ЮрФизЛицо);		
		Сведения.Вставить("КодПоОКПО", 		  Данные.КодПоОКПО);
		Сведения.Вставить("НомерСчета",       СокрЛП(Данные.НомерСчета));
		Сведения.Вставить("Банк",             Данные.Банк);		
		Сведения.Вставить("БИК",              СокрЛП(Данные.БИК));
		Сведения.Вставить("АдресБанка",       СокрЛП(Данные.АдресБанка));
		Сведения.Вставить("КоррСчет",         СокрЛП(Данные.КоррСчет));
		Сведения.Вставить("ЮридическийАдрес", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			ЮрФизЛицо, Данные.ВидыКонтактнойИнформацииЮрАдрес));
		Сведения.Вставить("ФактическийАдрес", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			ЮрФизЛицо, Данные.ВидыКонтактнойИнформацииФактАдрес));
		Сведения.Вставить("Телефоны", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			ЮрФизЛицо, Данные.ВидыКонтактнойИнформацииТелефон));
			
		Если НЕ ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
			Сведения.ПолноеНаименование = Сведения.Представление;
		КонецЕсли;
		
	КонецЕсли;

	Возврат Сведения;

КонецФункции // СведенияОЮрФизЛице()

// Возвращает структуру данных со сводным описанием контрагента
//
// Параметры: 
//  СписокСведений - список значений со значенийми параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организаиии
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина, Дата = Неопределено, КодЯзыка = "ru") Экспорт
	
	Если ПустаяСтрока(Список) Тогда
		Список = "ИНН,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
	КонецЕсли;
	
	Результат = "";

	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование", " ");
	СоответствиеПараметров.Вставить("ИНН",							" ИНН ");

	СоответствиеПараметров.Вставить("ЮридическийАдрес",				" ");
	СоответствиеПараметров.Вставить("Телефоны",						" тел.: ");
	СоответствиеПараметров.Вставить("НомерСчета",					" р/с ");
	СоответствиеПараметров.Вставить("Банк",               			" в банке ");
	СоответствиеПараметров.Вставить("БИК",                			" БИК ");
	СоответствиеПараметров.Вставить("КоррСчет",           			" к/с ");
	СоответствиеПараметров.Вставить("КодПоОКПО",          			" Код по ОКПО ");

	ЧислоПараметров = СтрЧислоВхождений(Список, ",");

	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));

			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);

				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если Не ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ",";
				КонецЕсли; 

				Если ИмяПараметра = "Банк" И КодЯзыка = "kz" Тогда 
					Результат = Результат + " " + СтрокаДополнения + ?(СПрефиксом = Истина, НСтр(Префикс, КодЯзыка), "");
				Иначе 
					Результат = Результат + ?(СПрефиксом = Истина, НСтр(Префикс, КодЯзыка), "") + СтрокаДополнения;
				КонецЕсли;

			Исключение

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("Не удалось определить значение параметра организации: " + ИмяПараметра));

			КонецПопытки;

		КонецЕсли; 

	КонецЦикла;

	Возврат Результат;
	
КонецФункции // ОписаниеОрганизации()

// Получить значение определенного вида контактной информации у объекта.
//
// Параметры:
//     Ссылка                  - ЛюбаяСсылка - ссылка на объект-владелец контактной информации (организация,
//                                             контрагент, партнер и т.д.).
//     ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации - параметры обработки.
//
// Возвращаемое значение:
//     Строка - строковое представление значения.
//
Функция КонтактнаяИнформацияОбъекта(Ссылка, ВидКонтактнойИнформации, Дата = Неопределено) Экспорт
	Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Ссылка, ВидКонтактнойИнформации, Дата)	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

// Выполняет установку отбора по указанной организации в динамических списках.
// Вызывать необходимо из обработчика формы ПриСозданииНаСервере.
// Если в форму при открытии был передан отбор по организации, то функция не будет выполнена.
//
// Параметры
//  Форма          - УправляемаяФорма  - форма, в которой необходимо установить отбор
//  ИмяСписка      - Строка - имя реквизита формы типа ДинамическийСписок.
//  ИмяРеквизита   - Строка - имя поля-организации в динамическом списке.
//  ЗначениеОтбора - СправочникСсылка.Организации, СписокЗначений, Массив - значение отбора.
//                   Если значение не задано, то будет подставлена основная организация из
//                   настроек пользователя.
//
// Возвращаемое значение:
//   СправочникСсылка.Организации - Если отбор установлен, то вернет значение отбора.
//
Функция УстановитьОтборПоОсновнойОрганизации(Форма, ИмяСписка = "Список", ИмяРеквизита = "Организация", ЗначениеОтбора = Неопределено) Экспорт

	Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимОрганизациям") Тогда
		
		Если Форма.Параметры.Свойство("Отбор") И Форма.Параметры.Отбор.Свойство(ИмяРеквизита) Тогда
			// Если значение отбора передается в параметрах формы - берем его оттуда, параметр при этом удаляем
			ОсновнаяОрганизация = Форма.Параметры.Отбор[ИмяРеквизита];
			Форма.Параметры.Отбор.Удалить(ИмяРеквизита);
		ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.Организации") 
			ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") 
			ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
			ОсновнаяОрганизация = ЗначениеОтбора;
		Иначе
			ОсновнаяОрганизация = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
		КонецЕсли;
		
		Если ТипЗнч(ОсновнаяОрганизация) = Тип("СправочникСсылка.Организации") Тогда
			ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
		Иначе
			ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
		КонецЕсли;
		
		ИспользованиеОтбора = ЗначениеЗаполнено(ОсновнаяОрганизация);
		
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		
	Иначе
		
		ОсновнаяОрганизация = Справочники.Организации.ПустаяСсылка();
		ВидСравненияОтбора  = ВидСравненияКомпоновкиДанных.Равно;
		ИспользованиеОтбора = Ложь;
		РежимОтображения    = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма[ИмяСписка], ИмяРеквизита, ОсновнаяОрганизация, ВидСравненияОтбора, , ИспользованиеОтбора, РежимОтображения);
	
	Возврат ОсновнаяОрганизация;
	
КонецФункции