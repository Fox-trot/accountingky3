///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// См. ОбщегоНазначенияПереопределяемый.ПриОпределенииОбщихПараметровБазовойФункциональности.
Процедура ПриОпределенииОбщихПараметровБазовойФункциональности(ОбщиеПараметры) Экспорт
	
	ОбщиеПараметры.Вставить("МинимальноНеобходимаяВерсияПлатформы", "8.3.14.1630");
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске.
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	Если НЕ Параметры.Свойство("ЗаголовокПриложения") Тогда 
		Параметры.Вставить("ЗаголовокПриложения", "");
	КонецЕсли;	
		
	ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ПредставлениеЗаголовка = ?(ЗначениеЗаполнено(ОсновнаяОрганизация), ОсновнаяОрганизация.Наименование, "");
	Параметры.ЗаголовокПриложения = ПредставлениеЗаголовка;
	
	// НачалоРаботыСПрограммой
	НачалоРаботыСПрограммойСервер.ПараметрыРаботыКлиентаПриЗапуске(Параметры);
	// Конец НачалоРаботыСПрограммой

	// Информация о необходимости обновить конфигурацию
	Параметры.Вставить("ПоказатьПредложитьОбновитьВерсиюПрограммы", ОбщегоНазначенияБПСервер.ПредлагатьОбновитьВерсиюПрограммы(Параметры));

	ДатаПервогоВходаВСистемуЗаполнена = ЗначениеЗаполнено(Константы.ДатаПервогоВходаВСистему.Получить());
	
	// ЗнакомствоСРедакциейВ30
	Если НЕ ДатаПервогоВходаВСистемуЗаполнена Тогда
		ПоказатьЗнакомствоСРедакциейВ30 = Ложь;
	Иначе	
		ПоказатьЗнакомствоСРедакциейВ30 = ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
			И ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НачалоРаботыВ30", "Показывать", Истина);
	КонецЕсли;
	
	Если ПоказатьЗнакомствоСРедакциейВ30 Тогда
		ИмяОбработкиЗнакомствоСРедакциейВ30 = "НачинаемРаботатьВ30";
			
		Если Не ПравоДоступа("Использование", Метаданные.Обработки[ИмяОбработкиЗнакомствоСРедакциейВ30]) Тогда
			ПоказатьЗнакомствоСРедакциейВ30 = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Вставить("ПоказатьЗнакомствоСРедакциейВ30",     ПоказатьЗнакомствоСРедакциейВ30);
	Параметры.Вставить("ИмяОбработкиЗнакомствоСРедакциейВ30", ИмяОбработкиЗнакомствоСРедакциейВ30);
	// Конец ЗнакомствоСРедакциейВ30
	
	// ПечатьПараметровУчета
	Если НЕ ДатаПервогоВходаВСистемуЗаполнена ИЛИ НЕ ПравоДоступа("Изменение", Метаданные.Справочники.Организации) Тогда  
		ПоказатьПечатьПараметровУчета = Ложь;
	Иначе
		ПоказатьПечатьПараметровУчета = ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
			И ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПечатьПараметровУчета", "Показывать", Истина);
	КонецЕсли;
	
	Если ПоказатьПечатьПараметровУчета Тогда
		ИмяОбработкиПечатьПараметровУчета = "ПечатьПараметровУчета";
			
		Если Не ПравоДоступа("Использование", Метаданные.Обработки[ИмяОбработкиПечатьПараметровУчета]) Тогда
			ПоказатьПечатьПараметровУчета = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Вставить("ПоказатьПечатьПараметровУчета",     ПоказатьПечатьПараметровУчета);
	Параметры.Вставить("ИмяОбработкиПечатьПараметровУчета", ИмяОбработкиПечатьПараметровУчета);
	// Конец ПечатьПараметровУчета
	
	// Удалить после сборки и обновления fresh.
	Если ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ВосстановитьВидыКонтактнойИнформацииПользователя", "Восстановить", Истина) Тогда 
		ВосстановитьВидыКонтактнойИнформацииПользователя();
	КонецЕсли;	

КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриОпределенииПараметровФункциональныхОпцийИнтерфейса.
Процедура ПриОпределенииПараметровФункциональныхОпцийИнтерфейса(ОпцииИнтерфейса) Экспорт
	ОпцииИнтерфейса.Вставить("Организация", Справочники.Организации.ОрганизацияПоУмолчанию());
КонецПроцедуры

Процедура ВосстановитьВидыКонтактнойИнформацииПользователя()

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
		|	ВидыКонтактнойИнформации.Используется КАК Используется,
		|	ВидыКонтактнойИнформации.Тип КАК Тип,
		|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		|	ВидыКонтактнойИнформации.ПометкаУдаления КАК ПометкаУдаления,
		|	ВидыКонтактнойИнформации.ИмяПредопределенногоВида КАК ИмяПредопределенногоВида,
		|	ВидыКонтактнойИнформации.Родитель КАК Родитель,
		|	ВидыКонтактнойИнформации.Предопределенный КАК Предопределенный
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникПользователи)";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Устанавливаем используется.
		СпрОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		СпрОбъект.Используется = Истина;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Тип) Тогда 
			СпрОбъект.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных) Тогда 
			СпрОбъект.ИмяПредопределенногоВида = ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных;	
		Иначе 
			СпрОбъект.ИмяПредопределенногоВида = "";	
		КонецЕсли;	
		
		СпрОбъект.Записать();
		
		// Снимаем пометку удаления.
		Если ВыборкаДетальныеЗаписи.ПометкаУдаления Тогда 
			СпрОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			СпрОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ВосстановитьВидыКонтактнойИнформацииПользователя", "Восстановить", Ложь);

КонецПроцедуры

#КонецОбласти
