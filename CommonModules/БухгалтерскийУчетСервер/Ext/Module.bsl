
// Выводит сообщение об ошибке заполнения поля.
//
Процедура СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения, ИмяТабличнойЧасти = Неопределено, НомерСтроки = Неопределено, Поле = Неопределено, Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщения;
	
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		// Платформа 8.2.15
		
	Иначе
		
		Если ИмяТабличнойЧасти <> Неопределено Тогда
			Сообщение.Поле = ИмяТабличнойЧасти + "[" + (НомерСтроки - 1) + "]." + Поле;
		ИначеЕсли ЗначениеЗаполнено(Поле) Тогда
			Сообщение.Поле = Поле;
		КонецЕсли;
		
		Сообщение.УстановитьДанные(ЭтотОбъект);
		
	КонецЕсли;
	
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры // СообщитьОбОшибке()

// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции // ЕстьРеквизитДокумента()

// Процедура удаляет проверяемый реквизит из массива проверяемых реквизитов.
Процедура УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, ПроверяемыйРеквизит) Экспорт
	
	НайденныйРеквизит = ПроверяемыеРеквизиты.Найти(ПроверяемыйРеквизит);
	Если ЗначениеЗаполнено(НайденныйРеквизит) Тогда
		ПроверяемыеРеквизиты.Удалить(НайденныйРеквизит);
	КонецЕсли;
	
КонецПроцедуры // УдалитьПроверяемыйРеквизит()

// Процедура создает новый ключ связи для таблиц.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Функция СоздатьНовыйКлючСвязи(ФормаДокумента) Экспорт

	СписокЗначений = Новый СписокЗначений;
	
	ТабличнаяЧасть = ФормаДокумента.Объект[ФормаДокумента.ИмяТабличнойЧасти];
	Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
        СписокЗначений.Добавить(СтрокаТЧ.КлючСвязи);
	КонецЦикла;

    Если СписокЗначений.Количество() = 0 Тогда
		КлючСвязи = 1;
	Иначе
		СписокЗначений.СортироватьПоЗначению();
		КлючСвязи = СписокЗначений.Получить(СписокЗначений.Количество() - 1).Значение + 1;
	КонецЕсли;

	Возврат КлючСвязи;

КонецФункции //  СоздатьНовыйКлючСвязи()

// Процедура записывает новую настройку пользователя.
//
Процедура УстановитьНастройкуПользователя(ЗначениеНастройки, ИмяНастройки, Пользователь = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		
		Пользователь = Пользователи.АвторизованныйПользователь();
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();

	НаборЗаписей.Отбор.Пользователь.Использование	= Истина;
	НаборЗаписей.Отбор.Пользователь.Значение		= Пользователь;
	НаборЗаписей.Отбор.Настройка.Использование		= Истина;
	НаборЗаписей.Отбор.Настройка.Значение			= ПланыВидовХарактеристик.НастройкиПользователей[ИмяНастройки];

	Запись = НаборЗаписей.Добавить();

	Запись.Пользователь	= Пользователь;
	Запись.Настройка	= ПланыВидовХарактеристик.НастройкиПользователей[ИмяНастройки];
	Запись.Значение		= ПланыВидовХарактеристик.НастройкиПользователей[ИмяНастройки].ТипЗначения.ПривестиЗначение(ЗначениеНастройки);
	
	НаборЗаписей.Записать();
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры // УстановитьНастройкуПользователя()

// Функция возвращает связанных Сотрудников пользователя для переданной записи
//
// Пользователь - (Справочник.Пользователи) Пользователь, для которого получаем таблицы значений с записями
//
Функция ПолучитьСотрудниковПользователя(Пользователь) Экспорт
	
	Запрос = Новый Запрос("Выбрать ПЕРВЫЕ 1 * Из РегистрСведений.СотрудникиПользователя КАК СотрудникиПользователя Где СотрудникиПользователя.Пользователь = &Пользователь");
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат ?(РезультатЗапроса.Пустой(), Новый ТаблицаЗначений, РезультатЗапроса.Выгрузить());
	
КонецФункции // ПолучитьСотрудниковПользователя()

// Процедура устанавливает условное оформление.
//
Процедура ВыделитьЖирнымОсновнойЭлемент(ВыбранныйЭлемент, Список, ИмяНастройки = "ОсновнойЭлемент") Экспорт
	
	СписокУдаляемыхЭлементов = Новый СписокЗначений;
	Для каждого ЭлементУсловногоОформления Из Список.УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяНастройки Тогда
			СписокУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		Список.УсловноеОформление.Элементы.Удалить(Элемент.Значение);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ВыбранныйЭлемент) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементУсловногоОформления = Список.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ВыбранныйЭлемент;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяНастройки;
	ЭлементУсловногоОформления.Представление = "Выделение основного элемента";
	
КонецПроцедуры

// Функция получает наибольший общий делитель двух чисел.
//
Функция ПолучитьНОД(а, б)
	
	Возврат ?(б = 0, а, ПолучитьНОД(б, а % б));
	
КонецФункции // ПолучитьНОД()

// Функция получает наибольший общий делитель для массива.
//
Функция ПолучитьНОДДляМассива(МассивЧисел, Кратность) Экспорт
	
	Если МассивЧисел.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	НОД = МассивЧисел[0] * Кратность;
	
	Для каждого Сч Из МассивЧисел Цикл
		НОД = ПолучитьНОД(НОД, Сч * Кратность);
	КонецЦикла;
	
	Возврат НОД;
	
КонецФункции // ПолучитьНОДДляМассива()

// Процедура добавляет значения структуры в список значений
//
// СписокЗначений - список значений, в который будут добавлены значения структуры;
// СтруктураСоЗначениями - структура значения которой будут добавлены в список значений;
// ДобавлятьДубликаты - флаг, который регулирует добавление 
//
Процедура ЗначенияСтруктурыВСписокЗначений(СписокЗначений, СтруктураСоЗначениями, ДобавлятьДубликаты = Ложь) Экспорт
	
	Для каждого ЭлементСтруктуры Из СтруктураСоЗначениями Цикл
		
		Если НЕ ДобавлятьДубликаты 
			И НЕ СписокЗначений.НайтиПоЗначению(ЭлементСтруктуры.Значение) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СписокЗначений.Добавить(ЭлементСтруктуры.Значение, ЭлементСтруктуры.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры // ЗначенияСтруктурыВСписокЗначений()

// По указанному контрагенту получает контактные лица этого контрагента
//
Функция ПолучитьКонтактныеЛицаКонтрагента(Контрагент) Экспорт
	
	СписокКонтактныхЛиц = Новый СписокЗначений;
	
	Запрос = Новый Запрос("Выбрать * Из Справочник.КонтактныеЛица Как КонтактныеЛица Где КонтактныеЛица.Владелец = &Контрагент");
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СписокКонтактныхЛиц.Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат СписокКонтактныхЛиц;
	
КонецФункции // ПолучитьКонтактныеЛицаКонтрагента()

//Получение договора контрагента
//Сначала проверяется реквизит Контрагента - ОсновнойДоговорКонтрагента, если не подходит то выбирается первый подходящий договор
//
Функция ПолучитьДоговорКонтрагента(Организация, Контрагент, ВалютаДенежныхСредств, ВидДоговораПоОперации) Экспорт
	ДоговорКонтрагента 	= Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ВалютаДоговора 		= Справочники.Валюты.ПустаяСсылка();
	Если НЕ ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
		ВалютаДенежныхСредств = Справочники.ДоговорыКонтрагентов.ПустаяСсылка()
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		РасчетыНеВВалютеДоговора = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьНастройкуРасчетыНеВВалютеДоговора();
		
		ОсновнойДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
		Если ЗначениеЗаполнено(ОсновнойДоговорКонтрагента) Тогда
			Если ЗначениеЗаполнено(ОсновнойДоговорКонтрагента.ВидДоговора)
				И ОсновнойДоговорКонтрагента.Организация = Организация 
				И ОсновнойДоговорКонтрагента.ВидДоговора = ВидДоговораПоОперации 
				И (НЕ ЗначениеЗаполнено(ВалютаДенежныхСредств) ИЛИ РасчетыНеВВалютеДоговора И ОсновнойДоговорКонтрагента.ВалютаРасчетов = ВалютаДенежныхСредств) Тогда
				
				ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
				ВалютаДоговора     = ОсновнойДоговорКонтрагента.ВалютаРасчетов;				
			КонецЕсли;				
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ДоговорыКонтрагентов.Ссылка,
				|	ДоговорыКонтрагентов.ВалютаРасчетов
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.Владелец = &Владелец
				|	И (ДоговорыКонтрагентов.ВалютаРасчетов = &ВалютаРасчетов
				|			ИЛИ &ВалютаРасчетов = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.Пустаяссылка))
				|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
				|	И ДоговорыКонтрагентов.Организация = &Организация";
				
			
			Запрос.УстановитьПараметр("Владелец", Контрагент);
			Запрос.УстановитьПараметр("ВалютаРасчетов", ВалютаДенежныхСредств);
			Запрос.УстановитьПараметр("РасчетыНеВВалютеДоговора", РасчетыНеВВалютеДоговора);
			Запрос.УстановитьПараметр("ВидДоговора", ВидДоговораПоОперации);
			Запрос.УстановитьПараметр("Организация", Организация);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				ДоговорКонтрагента = ВыборкаДетальныеЗаписи.Ссылка;
				ВалютаДоговора     = ВыборкаДетальныеЗаписи.ВалютаРасчетов;
			КонецЕсли;
		
		КонецЕсли;
			
	КонецЕсли;

	СтруктураВозврат = Новый Структура;
	СтруктураВозврат.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураВозврат.Вставить("ВалютаДоговора", ВалютаДоговора);
	
	Возврат СтруктураВозврат;
	
КонецФункции // ПолучитьДоговорКонтрагента()

// Получает договор контрагента по умолчанию с учетом условий отбора. Возвращается основной договор или единственный или пустая ссылка//
// Параметры
//  ВладелецДоговора	–	<СправочникСсылка.Контрагенты> 
//							Контрагент, договор которого нужно получить
//  ОрганизацияДоговора	–	<СправочникСсылка.Организации> 
//							Организация, договор которой нужно получить
//  СписокВидовДоговора	–	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоровКонтрагентов> 
//							Нужные виды договора
//  СтруктураПараметров	–	<Структура>
//							Структура дополнительных параметров отбора договоров по реквизитам.
//							Элементы структуры СтруктураПараметров:
//							Ключ - имя реквизита договора, Значение - еще одна структура
//							
//							Элементы структуры, которая находится в Значение:
//							Ключ - "ЗначениеОтбора", Значение - значение реквизита договора для отбора. Обязательный элемент.
//							Ключ - "ВидСравненияОтбора", Значение - <ВидСравнения>. Необязательный элемент, по умолчанию ВидСравнения.Равно
//
// Возвращаемое значение:
//   <СправочникСсылка.ДоговорыКонтрагентов> – найденный счет или пустая ссылка
//     
Функция УстановитьДоговорКонтрагента(ДоговорКонтрагента, ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора = Неопределено, СтруктураПараметров = Неопределено) Экспорт

	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникВладелец
	|		ПО ДоговорыКонтрагентов.Владелец = СправочникВладелец.Ссылка
	|			И ДоговорыКонтрагентов.Ссылка = СправочникВладелец.ОсновнойДоговорКонтрагента
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", 		ВладелецДоговора);	
	Запрос.УстановитьПараметр("ОрганизацияДоговора", 	ОрганизацияДоговора);
	Запрос.УстановитьПараметр("СписокВидовДоговора", 	СписокВидовДоговора); 	
		
	ТекстФильтра = "
	|	ДоговорыКонтрагентов.Владелец = &ВладелецДоговора
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
	+ ?(СписокВидовДоговора<> Неопределено,"
	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)","");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Для каждого Параметр Из СтруктураПараметров Цикл
			ИмяРеквизита = Параметр.Ключ;
			СтруктураОтбора = Параметр.Значение;
			
			ВидСравненияЗапроса = "";

			Если НЕ СтруктураОтбора.Свойство("ВидСравненияОтбора") Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Равно Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
				ВидСравненияЗапроса = "<>";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
				ВидСравненияЗапроса = "В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
				ВидСравненияЗапроса = "НЕ В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Больше Тогда
				ВидСравненияЗапроса = ">";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
				ВидСравненияЗапроса = ">=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Меньше Тогда
				ВидСравненияЗапроса = "<";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
				ВидСравненияЗапроса = "<=";
			Иначе // другие варианты 
				ВидСравненияЗапроса = "=";
			КонецЕсли;
			
			ТекстФильтра = ТекстФильтра + "
			|	И ДоговорыКонтрагентов." + ИмяРеквизита + " " + ВидСравненияЗапроса + " (&" + ИмяРеквизита + ")";
			Запрос.УстановитьПараметр(ИмяРеквизита, СтруктураОтбора.ЗначениеОтбора);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойДоговор = Выборка.Приоритет = 1;
		НайденОдинДоговор     = Выборка.Количество() = 1;
		
		Если НайденОсновнойДоговор ИЛИ НайденОдинДоговор Тогда
			НовыйДоговор = Выборка.Ссылка;
		КонецЕсли;
	
	КонецЕсли;
	
	РеквизитыДоговора = ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента);
	
	Если (НЕ ЗначениеЗаполнено(ДоговорКонтрагента)) 
		ИЛИ (РеквизитыДоговора.Владелец <> ВладелецДоговора ИЛИ РеквизитыДоговора.Организация <> ОрганизацияДоговора)  Тогда	
		
		ДоговорКонтрагента = НовыйДоговор;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // УстановитьДоговорКонтрагента()

// Функция ПолучитьРеквизитыДоговора() возвращает структуру со реквизитами договора, 
// используемыми при проведении документов по регламентированному учету. Функция используется 
// для унификации имен реквизитов справочника ДоговорыКонтрагентов при обращении к ним 
// из разных конфигураций, при этом типы самих реквизитов могут различаться в разных 
// конфигурациях.
//
// Параметры:
//  ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов.
//
// Возвращаемое значение:
//  Структура с ключами:
//		Ссылка				 - СправочникСсылка.ДоговорыКонтрагентов, ссылка на сам договор
//		ВалютаВзаиморасчетов - СправочникСсылка.Валюты, валюта взаиморасчетов по договору
//		Организация 		 - СправочникСсылка.Организации, организация, с которой заключен договор
//		Владелец 			 - СправочникСсылка.Контрагент, контрагент, с которым заключен договор
//		ВидДоговора 		 - ПеречислениеСсылка.ВидыДоговоровКонтрагентов  (БП)
//							   или ПеречислениеСсылка.ХозяйственныеОперации (УП) 
//		ТипЦен				 - СправочникСсылка.ТипыЦенНоменклатуры (БП)
//							   или НЕОПРЕДЕЛЕНО (УП)
//		
//		
Функция ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента) Экспорт

	СтруктураРеквизиты = Новый Структура();
	СтруктураРеквизиты.Вставить("Ссылка",  				Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ВалютаРасчетов",		Справочники.Валюты.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("Владелец",				Справочники.Контрагенты.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("Организация",			Справочники.Организации.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ТипЦен",				Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ВидДоговора",			Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтруктураРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
																		"Ссылка,
																		|ВалютаРасчетов,
																		|Владелец,
																		|Организация,
																		|ТипЦен,
																		|ВидДоговора");
	КонецЕсли;
	
	Возврат СтруктураРеквизиты;

КонецФункции // ПолучитьРеквизитыДоговора()

// Процедура определяет ситуацию, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в это м случае
// присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументСсылка - ссылка на документ,из которого вызвана процедура 
//  НоваяДатаДокумента - новая дата документа 
//  НачальнаяДатаДокумента - начальная дата документа 
//
// Возвращаемое значение:
//  Число - разность дат.
//
Функция ПроверитьНомерДокумента(ДокументСсылка, НоваяДатаДокумента, НачальнаяДатаДокумента) Экспорт
	
	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = ДокументСсылка.Метаданные().ПериодичностьНомера;
	
	//В зависимости от установленной периодичности смены номеров,
	//определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДатаДокумента - НоваяДатаДокумента;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	Возврат РазностьДат;
	
КонецФункции // ПроверитьНомерДокумента()

// Процедура - Проверить дубли наименований справоника
//
// Параметры:
//  Источник - СправочникОбъект	 - объект справочника
//  Отказ	 - Булево	 - флаг отказа записи
//
Процедура ПроверитьДублиНаименованийСправоника(Источник, Отказ) Экспорт
	ИмяСправочника = Источник.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Справочник.Код,	
	|	Справочник.Наименование
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК Справочник
	|ГДЕ
	|	Справочник.Наименование = &Наименование И НЕ Справочник.Ссылка = &Ссылка";
	
	Если Не ЗначениеЗаполнено(Источник.Код) Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Справочник.Код,","");
	КонецЕсли;

	Запрос.УстановитьПараметр("Наименование", Источник.Наименование);
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если НЕ ВыборкаДетальныеЗаписи.Количество() = 0 Тогда 
		ВыборкаДетальныеЗаписи.Следующий();
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Элемент справочника с таким наименованием уже существует: ""%1"" ""%2""!'"), 
			ВыборкаДетальныеЗаписи.Наименование,
			?(ЗначениеЗаполнено(Источник.Код), ВыборкаДетальныеЗаписи.Код, ""));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник, "Наименование", , Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДублиНаименованийСправоника()

// Функция проверяет есть ли субконто "Контрагенты" на указанном счете
//
Функция ЕстьСубконтоКонтрагенты(Счет) Экспорт
	
	УчетПоКонтрагентам = Ложь;
	
	Если Не ЗначениеЗаполнено(Счет) Тогда
	Иначе
		СтрокаВидаСубконто = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, "ВидСубконто");
		
		Если СтрокаВидаСубконто <> Неопределено Тогда
			УчетПоКонтрагентам = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат УчетПоКонтрагентам;
	
КонецФункции // ЕстьСубконтоКонтрагенты()

// Функция проверяет есть ли субконто "Договоры" на указанном счете
//
Функция ЕстьСубконтоДоговоры(Счет) Экспорт
	
	УчетПоДоговорам = Ложь;
	
	Если Не ЗначениеЗаполнено(Счет) Тогда
	Иначе
		СтрокаВидаСубконто = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры, "ВидСубконто");
		
		Если СтрокаВидаСубконто <> Неопределено Тогда
			УчетПоДоговорам = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат УчетПоДоговорам;
	
КонецФункции // ЕстьСубконтоДоговоры()

// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДИНАМИЧЕСКИМИ СПИСКАМИ

// Процедура устанавливает отбор у динамического списка на равенство.
//
Процедура УстановитьОтборУДинамическогоСпискаНаРавенство(Отбор, ЛевоеЗначение, ПравоеЗначение) Экспорт
	
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение	 = ЛевоеЗначение;
	ЭлементОтбора.ВидСравнения	 = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
	ЭлементОтбора.Использование  = Истина;
	
КонецПроцедуры // УстановитьОтборДляДинамическогоСписка()

// Удаляет элемент отбора динамического списка
//
//Параметры:
//Список  - обрабатываемый динамический список,
//ИмяПоля - имя поля компоновки, отбор по которому нужно удалить
//
Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля) Экспорт
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Счетчик = 1;
	Пока Счетчик <= Список.Отбор.Элементы.Количество() Цикл
		ЭлементОтбора = Список.Отбор.Элементы[Счетчик - 1];
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			Список.Отбор.Элементы.Удалить(ЭлементОтбора);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

// Устанавливает элемент отбор динамического списка
//
//Параметры:
//Список			- обрабатываемый динамический список,
//ИмяПоля			- имя поля компоновки, отбор по которому нужно установить,
//ВидСравнения		- вид сравнения отбора, по умолчанию - Равно,
//ПравоеЗначение 	- значение отбора
//
Процедура УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено, БыстрыйДоступ = Ложь) Экспорт
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения     = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения = ?(БыстрыйДоступ, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры // УстановитьЭлементОтбораСписка()

// Изменяет элемент отбора динамического списка
//
//Параметры:
//Список         - обрабатываемый динамический список,
//ИмяПоля        - имя поля компоновки, отбор по которому нужно установить,
//ВидСравнения   - вид сравнения отбора, по умолчанию - Равно,
//ПравоеЗначение - значение отбора,
//Установить     - признак необходимости установить отбор
//
Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено, ОтборПоПериоду = Ложь, БыстрыйДоступ = Ложь) Экспорт
	
	УдалитьЭлементОтбораСписка(Список, ИмяПоля);
	
	Если Установить Тогда
		Если ОтборПоПериоду Тогда
			УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение.ДатаНачала, ВидСравненияКомпоновкиДанных.БольшеИлиРавно, БыстрыйДоступ);
			УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение.ДатаОкончания, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, БыстрыйДоступ);
		Иначе
			УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения, БыстрыйДоступ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЭлементОтбораСписка()

////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ПРОВЕДЕНИЕМ

// Выполняет инициализацию дополнительных свойств для проведения документа.
//
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения", "УчетнаяПолитика".
	
	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	СтруктураДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);
	
	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	СтруктураДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	
	// Структура, содержащая ключ с именем "МенеджерВременныхТаблиц", в значении которого хранится менеджер временных таблиц.
	// Содержит для каждой временной таблицы ключ (имя временной таблицы) и значение (признак наличия записей во временной таблице).
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента", ДокументСсылка.Метаданные());
	
	// Запрос, получающий данные документа.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Документ_.Ссылка КАК Ссылка,
	|	_Документ_.Номер КАК Номер,
	|	_Документ_.Дата КАК Дата,
	|   " + ?(СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено, "_Документ_.Организация" , "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)") + " КАК Организация,
	|   " + ?(СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено, "_Документ_.ДоговорКонтрагента.СтавкаНДС" , "ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)") + " КАК СтавкаНДС,
	|   " + ?(СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено, "_Документ_.ВалютаДокумента" , "ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)") + " КАК ВалютаДокумента,
	|	_Документ_.МоментВремени КАК МоментВремени,
	|	_Документ_.Представление КАК Представление
	|ИЗ
	|	Документ." + СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Имя + " КАК _Документ_
	|ГДЕ
	|	_Документ_.Ссылка = &ДокументСсылка");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Формирование ключей, содержащих данные документа.
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		СтруктураДополнительныеСвойства.ДляПроведения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	
	// Заполнение значений для ключей, содержащих данные документа.
	ЗаполнитьЗначенияСвойств(СтруктураДополнительныеСвойства.ДляПроведения, ВыборкаИзРезультатаЗапроса);
	
	// Определение и установка значения момента, на который должен быть выполнен контроль документа.
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("МоментКонтроля", Дата('00010101'));
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ПериодКонтроля", Дата("39991231"));
	
	// "УчетнаяПолитика" - структура, содержащая значения всех параметров учетной политики на момент времени документа
	// и по выбранной в документе организации или по компании (в случае ведения учета по компании).
	//СтруктураДополнительныеСвойства.Вставить("УчетнаяПолитика", Новый Структура);
	СтруктураДополнительныеСвойства.Вставить("УчетнаяПолитика", 
		ПолучитьДанныеУчетнойПолитикиОрганизаций(СтруктураДополнительныеСвойства.ДляПроведения.Дата, СтруктураДополнительныеСвойства.ДляПроведения.Организация));

	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ВалютаРегламентированногоУчета", 
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());	
	
КонецПроцедуры // ИнициализироватьДополнительныеСвойстваДляПроведения()

// Формирует массив имен регистров, по которым есть движения документа.
//
Функция ПолучитьМассивИменИспользуемыхРегистров(Регистратор, МетаданныеДокумента)
	
	МассивРегистров = Новый Массив;
	ТекстЗапроса = "";
	СчетчикТаблиц = 0;
	СчетчикЦикла = 0;
	ВсегоРегистров = МетаданныеДокумента.Движения.Количество();
	
	Для каждого Движение из МетаданныеДокумента.Движения Цикл
		
		Если СчетчикТаблиц > 0 Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
			
		КонецЕсли;
		
		СчетчикТаблиц = СчетчикТаблиц + 1;
		СчетчикЦикла = СчетчикЦикла + 1;
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|""" + Движение.Имя + """ КАК ИмяРегистра
		|
		|ИЗ " + Движение.ПолноеИмя() + "
		|
		|ГДЕ Регистратор = &Регистратор
		|";
		
		Если СчетчикТаблиц = 256 ИЛИ СчетчикЦикла = ВсегоРегистров Тогда
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;
			
			Если МассивРегистров.Количество() = 0 Тогда
				
				МассивРегистров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");
				
			Иначе
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					МассивРегистров.Добавить(Выборка.ИмяРегистра);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивРегистров;
	
КонецФункции // ПолучитьМассивИменИспользуемыхРегистров()

// Выполняет подготовку наборов записей документа.
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(СтруктураОбъект) Экспорт
	
	Для каждого НаборЗаписей из СтруктураОбъект.Движения Цикл
		
		Если ТипЗнч(НаборЗаписей) = Тип("КлючИЗначение") Тогда
			
			НаборЗаписей = НаборЗаписей.Значение;
			
		КонецЕсли;
		
		Если НаборЗаписей.Количество() > 0 Тогда
			
			НаборЗаписей.Очистить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивИменРегистров = ПолучитьМассивИменИспользуемыхРегистров(СтруктураОбъект.Ссылка, СтруктураОбъект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента);
	
	Для каждого ИмяРегистра из МассивИменРегистров Цикл
		
		СтруктураОбъект.Движения[ИмяРегистра].Записывать = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

// Записывает наборы записей документа.
//
Процедура ЗаписатьНаборыЗаписей(СтруктураОбъект) Экспорт
	Для каждого НаборЗаписей из СтруктураОбъект.Движения Цикл
		
		Если ТипЗнч(НаборЗаписей) = Тип("КлючИЗначение") Тогда
			НаборЗаписей = НаборЗаписей.Значение;
		КонецЕсли;
		
		Если НаборЗаписей.Записывать Тогда
			Если НЕ НаборЗаписей.ДополнительныеСвойства.Свойство("ДляПроведения") Тогда
				НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
			КонецЕсли;
			
			Если НЕ НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Свойство("СтруктураВременныеТаблицы") Тогда
				НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", СтруктураОбъект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы);
			КонецЕсли;
		
			НаборЗаписей.Записать();
			НаборЗаписей.Записывать = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Функция возвращает значение константы КонтролироватьОстаткиПриПроведении.
// 
Функция ВыполнитьКонтрольОстатков() Экспорт
	
	Возврат Константы.КонтролироватьОстаткиПриПроведении.Получить();
	
КонецФункции // ВыполнитьКонтрольОстатков()

Функция ПолучитьТекстЗапросаДляПроведенияПоРНЗапасы(СпособОценки, СтруктураДополнительныеСвойства)

	Если СпособОценки = Перечисления.СпособыОценки.ПоФиксированной Тогда
		Текст =
		"ВЫБРАТЬ
		|	ЗапасыОстатки.КоличествоОстаток КАК КоличествоЗапасы,
		|	ЗапасыОстатки.Цена КАК ЦенаЗапасы,
		|	ВременнаяТаблицаШапка.Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.СчетСебестоимости = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство)
		|			ТОГДА ЗапасыОстатки.Склад
		|		ИНАЧЕ ВременнаяТаблицаШапка.СкладРасход
		|	КОНЕЦ КАК Склад,
		|"
		+  ?(ТИПЗНЧ(СтруктураДополнительныеСвойства.ДляПроведения.Ссылка) = ТИП("ДокументСсылка.ПеремещениеТоваров"),
			"	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(ВременнаяТаблицаШапка.Ссылка) = ТИП(Документ.ПеремещениеТоваров)
			|				И ВременнаяТаблицаШапка.Список
			|			ТОГДА ВременнаяТаблицаТовары.СкладПолучатель
			|		ИНАЧЕ ВременнаяТаблицаШапка.СкладПриход
			|	КОНЕЦ КАК СкладПриход,",
			
		"") +

		
		"	ЗапасыОстатки.Партия,
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура,
		|	ВременнаяТаблицаТовары.Цена,
		|	ВременнаяТаблицаТовары.Количество КАК Количество,
		|	ВременнаяТаблицаТовары.Сумма КАК СуммаТребуемая,
		|	ЕСТЬNULL(ВременнаяТаблицаТовары.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетУчета,
		|	ЕСТЬNULL(ЗапасыОстатки.СчетУчета.Количественный, ВременнаяТаблицаТовары.СчетУчета.Количественный) КАК КоличественныйСчетУчета,
		|	ЗапасыОстатки.СуммаОстаток КАК Сумма,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ВременнаяТаблицаТовары.СчетСебестоимости,
		|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости1,
		|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости2,
		|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости3,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.СчетСебестоимости = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство)
		|			ТОГДА ВременнаяТаблицаТовары.Продукция
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Продукция
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
		|				&Дата,
		|				Организация = &Организация
		|					И (Склад = &Склад
		|						ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|					И Номенклатура В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаТовары.Номенклатура
		|						ИЗ
		|							ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары)) КАК ЗапасыОстатки
		|		ПО ВременнаяТаблицаТовары.Номенклатура = ЗапасыОстатки.Номенклатура
		|			И ВременнаяТаблицаТовары.СчетУчета = ЗапасыОстатки.СчетУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО ВременнаяТаблицаТовары.Ссылка = ВременнаяТаблицаШапка.Ссылка
		|ГДЕ
		|	ЗапасыОстатки.КоличествоОстаток <> 0 И НЕ ВременнаяТаблицаТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП)
		|	И (ВЫРАЗИТЬ(ЗапасыОстатки.Цена КАК ЧИСЛО(15, 2))) = (ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Цена КАК ЧИСЛО(15, 2)))
		|ИТОГИ
		|	МАКСИМУМ(Количество)
		|ПО
		|	НомерСтроки";
		                  
	ИначеЕсли СпособОценки = Перечисления.СпособыОценки.ФИФО Тогда
	
		Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоЗапасы,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) = 0
		|			ТОГДА ВременнаяТаблицаТовары.Цена
		|		ИНАЧЕ ЗапасыОстатки.СуммаОстаток / ЗапасыОстатки.КоличествоОстаток
		|	КОНЕЦ КАК Цена,
		|	ВременнаяТаблицаШапка.Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.СчетСебестоимости = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство)
		|			ТОГДА ЕСТЬNULL(ЗапасыОстатки.Склад, ЗНАЧЕНИЕ(Справочник.Склады.Основной))
		|		ИНАЧЕ ВременнаяТаблицаШапка.СкладРасход
		|	КОНЕЦ КАК Склад,
		|	"
		+  ?(ТИПЗНЧ(СтруктураДополнительныеСвойства.ДляПроведения.Ссылка) = ТИП("ДокументСсылка.ПеремещениеТоваров"),
			"	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(ВременнаяТаблицаШапка.Ссылка) = ТИП(Документ.ПеремещениеТоваров)
			|				И ВременнаяТаблицаШапка.Список
			|			ТОГДА ВременнаяТаблицаТовары.СкладПолучатель
			|		ИНАЧЕ ВременнаяТаблицаШапка.СкладПриход
			|	КОНЕЦ КАК СкладПриход,",
			
		"") +
		
		"	ЗапасыОстатки.Партия,		
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Количество КАК Количество,
		|	ВременнаяТаблицаТовары.Сумма КАК СуммаТребуемая,
		|	ЕСТЬNULL(ЗапасыОстатки.СчетУчета, ВременнаяТаблицаТовары.СчетУчета) КАК СчетУчета,
		|	ЕСТЬNULL(ЗапасыОстатки.СчетУчета.Количественный, ЛОЖЬ) КАК КоличественныйСчетУчета,
		|	ЗапасыОстатки.СуммаОстаток КАК Сумма,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ВременнаяТаблицаТовары.СчетСебестоимости КАК СчетСебестоимости,
		|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости1 КАК СубконтоСписанияСебестоимости1,
		|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости2 КАК СубконтоСписанияСебестоимости2,
		|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости3 КАК СубконтоСписанияСебестоимости3,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.СчетСебестоимости = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство)
		|			ТОГДА ВременнаяТаблицаТовары.Продукция
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Продукция,
		|	ВременнаяТаблицаТовары.Количество КАК КоличествоТребуемое
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
		|				&Дата,
		|				Организация = &Организация
		|					И (Склад = &Склад
		|						ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|					И Номенклатура В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаТовары.Номенклатура
		|						ИЗ
		|							ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары)) КАК ЗапасыОстатки
		|		ПО ВременнаяТаблицаТовары.Номенклатура = ЗапасыОстатки.Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО ВременнаяТаблицаТовары.Ссылка = ВременнаяТаблицаШапка.Ссылка
		|ГДЕ
		|	ЗапасыОстатки.Склад = &Склад
		|	И НЕ ВременнаяТаблицаТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗапасыОстатки.Партия.Дата
		|ИТОГИ
		|	СУММА(Количество),
		|	МАКСИМУМ(КоличествоТребуемое)
		|ПО
		|	Номенклатура,
		|	СчетСебестоимости,
		|	СубконтоСписанияСебестоимости1,
		|	СубконтоСписанияСебестоимости2,
		|	СубконтоСписанияСебестоимости3";		
	
	ИначеЕсли СпособОценки = Перечисления.СпособыОценки.ПоСредней Тогда
	
		Текст = 		
		"ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	СУММА(ВременнаяТаблицаТовары.Количество) КАК Количество,
		|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости1,
		|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости2,
		|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости3
		|ПОМЕСТИТЬ ВременнаяТаблицаТребуемоеКоличество
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаТовары.Номенклатура,
		|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости1,
		|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости2,
		|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости3
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) / ЗапасыОстатки.КоличествоОстаток КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК Цена,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ЗапасыОстатки.СчетУчета КАК СчетУчета
		|ПОМЕСТИТЬ ВременнаяТаблицаЦены
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
		|				&Дата,
		|				Организация = &Организация
		|					И (Склад = &Склад
		|						ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|					И Номенклатура В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаТовары.Номенклатура
		|						ИЗ
		|							ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары)) КАК ЗапасыОстатки
		|		ПО ВременнаяТаблицаТовары.Номенклатура = ЗапасыОстатки.Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО ВременнаяТаблицаТовары.Ссылка = ВременнаяТаблицаШапка.Ссылка
		|ГДЕ
		|	ЗапасыОстатки.КоличествоОстаток <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоЗапасы,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВременнаяТаблицаЦены.Цена, 0) = 0
		|			ТОГДА ВременнаяТаблицаТовары.Цена
		|		ИНАЧЕ ВременнаяТаблицаЦены.Цена
		|	КОНЕЦ КАК Цена,
		|	ВременнаяТаблицаШапка.Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.СчетСебестоимости = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство)
		|			ТОГДА ЗапасыОстатки.Склад
		|		ИНАЧЕ ВременнаяТаблицаШапка.СкладРасход
		|	КОНЕЦ КАК Склад,
		|"
		+  ?(ТИПЗНЧ(СтруктураДополнительныеСвойства.ДляПроведения.Ссылка) = ТИП("ДокументСсылка.ПеремещениеТоваров"),
			"	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(ВременнаяТаблицаШапка.Ссылка) = ТИП(Документ.ПеремещениеТоваров)
			|				И ВременнаяТаблицаШапка.Список
			|			ТОГДА ВременнаяТаблицаТовары.СкладПолучатель
			|		ИНАЧЕ ВременнаяТаблицаШапка.СкладПриход
			|	КОНЕЦ КАК СкладПриход,",
			
		"") +
		
		"	ЗапасыОстатки.Партия,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Количество КАК Количество,
		|	ВременнаяТаблицаТовары.Сумма КАК СуммаТребуемая,
		|	ЕСТЬNULL(ЗапасыОстатки.СчетУчета, ВременнаяТаблицаТовары.СчетУчета) КАК СчетУчета,
		|	ЕСТЬNULL(ЗапасыОстатки.СчетУчета.Количественный, ВременнаяТаблицаТовары.СчетУчета.Количественный) КАК КоличественныйСчетУчета,
		|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК Сумма,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ВременнаяТаблицаТовары.СчетСебестоимости КАК СчетСебестоимости,
		|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости1 КАК СубконтоСписанияСебестоимости1,
		|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости2 КАК СубконтоСписанияСебестоимости2,
		|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости3 КАК СубконтоСписанияСебестоимости3,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.СчетСебестоимости = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство)
		|			ТОГДА ВременнаяТаблицаТовары.Продукция
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Продукция,
		|	ВременнаяТаблицаТребуемоеКоличество.Количество КАК КоличествоТребуемое
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
		|				&Дата,
		|				Организация = &Организация
		|					И (Склад = &Склад
		|						ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|					И Номенклатура В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаТовары.Номенклатура
		|						ИЗ
		|							ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары)) КАК ЗапасыОстатки
		|		ПО ВременнаяТаблицаТовары.Номенклатура = ЗапасыОстатки.Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО ВременнаяТаблицаТовары.Ссылка = ВременнаяТаблицаШапка.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаЦены КАК ВременнаяТаблицаЦены
		|		ПО ВременнаяТаблицаТовары.Номенклатура = ВременнаяТаблицаЦены.Номенклатура
		|			И ВременнаяТаблицаТовары.СчетУчета = ВременнаяТаблицаЦены.СчетУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаТребуемоеКоличество КАК ВременнаяТаблицаТребуемоеКоличество
		|		ПО ВременнаяТаблицаТовары.Номенклатура = ВременнаяТаблицаТребуемоеКоличество.Номенклатура
		|			И ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости1 = ВременнаяТаблицаТребуемоеКоличество.СубконтоСписанияСебестоимости1
		|			И ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости2 = ВременнаяТаблицаТребуемоеКоличество.СубконтоСписанияСебестоимости2
		|			И ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости3 = ВременнаяТаблицаТребуемоеКоличество.СубконтоСписанияСебестоимости3
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗапасыОстатки.Партия.Дата
		|ИТОГИ
		|	СУММА(Количество),
		|	СУММА(КоличествоТребуемое)
		|ПО
		|	Номенклатура,
		|	СчетСебестоимости,
		|	СубконтоСписанияСебестоимости1,
		|	СубконтоСписанияСебестоимости2,
		|	СубконтоСписанияСебестоимости3";
	Иначе
	
		Текст = 
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК КоличествоЗапасы,
		|	НЕОПРЕДЕЛЕНО КАК Цена,
		|	НЕОПРЕДЕЛЕНО КАК Период,
		|	НЕОПРЕДЕЛЕНО КАК Организация,
		|	НЕОПРЕДЕЛЕНО КАК Склад,
		|	НЕОПРЕДЕЛЕНО КАК СкладПриход,
		|	НЕОПРЕДЕЛЕНО КАК Партия,
		|	НЕОПРЕДЕЛЕНО КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
		|	НЕОПРЕДЕЛЕНО КАК Количество,
		|	НЕОПРЕДЕЛЕНО КАК СчетУчета,
		|	НЕОПРЕДЕЛЕНО КАК СчетСебестоимости,
		|	НЕОПРЕДЕЛЕНО КАК Сумма,
		|	НЕОПРЕДЕЛЕНО КАК ВидДвижения";				
	КонецЕсли;
	
	Текст = СтрЗаменить(Текст, "ВременнаяТаблицаТовары.Продукция", "НЕОПРЕДЕЛЕНО");
	
	Возврат Текст;
	
КонецФункции // ()

Функция ПолучитьТекстЗапросаДляПроведенияПоРНЗапасыПоПартии(Перемещение, СтруктураДополнительныеСвойства)	
	Текст = 		
	"ВЫБРАТЬ
	|	ВременнаяТаблицаШапка.Период,
	|	ВременнаяТаблицаШапка.Организация,
	|	ВременнаяТаблицаШапка.СкладРасход КАК Склад,
	|	ВременнаяТаблицаШапка.СкладПриход КАК СкладПриход,
	|	ВременнаяТаблицаТовары.Партия,
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ВременнаяТаблицаТовары.Количество) КАК Количество,
	|	ВременнаяТаблицаТовары.СчетУчета КАК СчетУчета,
	|	СУММА(ВременнаяТаблицаТовары.Сумма) КАК Сумма,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ЕСТЬNULL(ВременнаяТаблицаТовары.СчетСебестоимости, НЕОПРЕДЕЛЕНО) КАК СчетСебестоимости,
	|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости1 КАК СубконтоСписанияСебестоимости1,
	|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости2 КАК СубконтоСписанияСебестоимости2,
	|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости3 КАК СубконтоСписанияСебестоимости3
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ ВременнаяТаблицаТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаШапка.Период,
	|	ВременнаяТаблицаШапка.СкладРасход,
	|	ВременнаяТаблицаШапка.СкладПриход,
	|	ВременнаяТаблицаТовары.СчетУчета,
	|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости3,
	|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости1,
	|	ВременнаяТаблицаШапка.Организация,
	|	ВременнаяТаблицаТовары.Партия,
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ЕСТЬNULL(ВременнаяТаблицаТовары.СчетСебестоимости, НЕОПРЕДЕЛЕНО),
	|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости2";
	
	Если Перемещение Тогда
		Текст = Текст + 
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СкладПриход,
		|	ВременнаяТаблицаШапка.СкладПриход,
		|	ВременнаяТаблицаТовары.Партия,
		|	ВременнаяТаблицаТовары.Номенклатура,
		|	СУММА(ВременнаяТаблицаТовары.Количество),
		|	ВременнаяТаблицаТовары.СчетУчета,
		|	СУММА(ВременнаяТаблицаТовары.Сумма),
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		|	ЕСТЬNULL(ВременнаяТаблицаТовары.СчетСебестоимости, НЕОПРЕДЕЛЕНО),
		|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости1,
		|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости2,
		|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости3
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаШапка.Период,
		|	ВременнаяТаблицаШапка.СкладПриход,
		|	ВременнаяТаблицаТовары.СчетУчета,
		|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости3,
		|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости1,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаТовары.Партия,
		|	ВременнаяТаблицаТовары.Номенклатура,
		|	ЕСТЬNULL(ВременнаяТаблицаТовары.СчетСебестоимости, НЕОПРЕДЕЛЕНО),
		|	ВременнаяТаблицаТовары.СубконтоСписанияСебестоимости2";		
	
	КонецЕсли;

	
	Возврат Текст;
	
КонецФункции // ()

Процедура СформироватьТаблицаЗапасыСписаниеПоПартии(ДокументСсылка, СтруктураДополнительныеСвойства, Перемещение = Ложь, ИмяТабличнойЧасти = "Товары") Экспорт	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	СпособОценки = СтруктураДополнительныеСвойства.ДляПроведения.СпособОценки;
	Запрос.Текст = ПолучитьТекстЗапросаДляПроведенияПоРНЗапасыПоПартии(Перемещение, СтруктураДополнительныеСвойства);
	
	Если ИмяТабличнойЧасти = "Материалы" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Товары", "Материалы");	
	КонецЕсли;	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ВыборкаЗапасы", РезультатЗапроса);
	
		
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", РезультатЗапроса.Выгрузить());
		
КонецПроцедуры 

Функция ПолучитьТекстЗапросаДляПроведенияПоВозвратуЗапасы(СпособОценки, СтруктураДополнительныеСвойства)

	Если СпособОценки = Перечисления.СпособыОценки.ПоФиксированной Тогда
		Текст =
		"ВЫБРАТЬ
		|	ЗапасыОбороты.КоличествоРасход - ЕСТЬNULL(ВременнаяТаблицаУжеВозвращенныхТоваров.Количество, 0) КАК КоличествоЗапасы,
		|	ЗапасыОбороты.Цена КАК ЦенаЗапасы,
		|	ВременнаяТаблицаШапка.Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СкладРасход КАК Склад,
		|	ВременнаяТаблицаШапка.СкладПриход КАК СкладПриход,
		|	ЗапасыОбороты.Партия,
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура,
		|	ВременнаяТаблицаТовары.Цена,
		|	ВременнаяТаблицаТовары.Количество КАК Количество,
		|	ВременнаяТаблицаТовары.СчетУчета КАК СчетУчета,
		|	0 КАК Сумма,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	ВременнаяТаблицаТовары.СчетСебестоимости,
		|	НЕОПРЕДЕЛЕНО КАК Продукция
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Обороты(
		|				,
		|				,
		|				Авто,
		|				Организация = &Организация
		|					И (Склад = &Склад
		|						ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|					И Номенклатура В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаТовары.Номенклатура
		|						ИЗ
		|							ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары)) КАК ЗапасыОбороты
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаУжеВозвращенныхТоваров КАК ВременнаяТаблицаУжеВозвращенныхТоваров
		|			ПО ЗапасыОбороты.Номенклатура = ВременнаяТаблицаУжеВозвращенныхТоваров.Номенклатура
		|				И ЗапасыОбороты.СчетУчета = ВременнаяТаблицаУжеВозвращенныхТоваров.СчетУчета
		|				И ЗапасыОбороты.Цена = ВременнаяТаблицаУжеВозвращенныхТоваров.Цена
		|		ПО ВременнаяТаблицаТовары.Номенклатура = ЗапасыОбороты.Номенклатура
		|			И ВременнаяТаблицаТовары.СчетУчета = ЗапасыОбороты.СчетУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО ВременнаяТаблицаТовары.Ссылка = ВременнаяТаблицаШапка.Ссылка
		|ГДЕ
		|	ЗапасыОбороты.КоличествоРасход <> 0
		|	И (ВЫРАЗИТЬ(ЗапасыОбороты.Цена КАК ЧИСЛО(15, 2))) = (ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Цена КАК ЧИСЛО(15, 2)))
		|	И (ВЫРАЗИТЬ(ЗапасыОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг)) = &ДокументОснование
		|ИТОГИ
		|	МАКСИМУМ(Количество)
		|ПО
		|	НомерСтроки";
		                  
	ИначеЕсли СпособОценки = Перечисления.СпособыОценки.ФИФО Тогда
	
		Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ЗапасыОбороты.КоличествоРасход, 0) - ЕСТЬNULL(ВременнаяТаблицаУжеВозвращенныхТоваров.Количество, 0) КАК КоличествоЗапасы,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗапасыОбороты.КоличествоРасход, 0) = 0
		|			ТОГДА ВременнаяТаблицаТовары.Цена
		|		ИНАЧЕ ЗапасыОбороты.СуммаРасход / ЗапасыОбороты.КоличествоРасход
		|	КОНЕЦ КАК Цена,
		|	ВременнаяТаблицаШапка.Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СкладРасход КАК Склад,
		|	ВременнаяТаблицаШапка.СкладПриход КАК СкладПриход,
		|	ЗапасыОбороты.Партия,
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Количество КАК Количество,
		|	ЕСТЬNULL(ЗапасыОбороты.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетУчета,
		|	0 КАК Сумма,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	ВременнаяТаблицаТовары.СчетСебестоимости,
		|	НЕОПРЕДЕЛЕНО КАК Продукция,
		|	ВложенныйЗапрос.Количество КАК КоличествоТребуемое
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Обороты(
		|				,
		|				,
		|				Авто,
		|				Организация = &Организация
		|					И (Склад = &Склад
		|						ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|					И Номенклатура В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаТовары.Номенклатура
		|						ИЗ
		|							ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары)) КАК ЗапасыОбороты
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаУжеВозвращенныхТоваров КАК ВременнаяТаблицаУжеВозвращенныхТоваров
		|			ПО ЗапасыОбороты.Номенклатура = ВременнаяТаблицаУжеВозвращенныхТоваров.Номенклатура
		|				И ЗапасыОбороты.СчетУчета = ВременнаяТаблицаУжеВозвращенныхТоваров.СчетУчета
		|				И ЗапасыОбороты.Партия = ВременнаяТаблицаУжеВозвращенныхТоваров.Партия
		|		ПО ВременнаяТаблицаТовары.Номенклатура = ЗапасыОбороты.Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО ВременнаяТаблицаТовары.Ссылка = ВременнаяТаблицаШапка.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|			СУММА(ТаблицаТоваров.Количество) КАК Количество
		|		ИЗ
		|			ВременнаяТаблицаТовары КАК ТаблицаТоваров
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТаблицаТоваров.Номенклатура) КАК ВложенныйЗапрос
		|		ПО ВременнаяТаблицаТовары.Номенклатура = ВложенныйЗапрос.Номенклатура
		|ГДЕ
		|	(ВЫРАЗИТЬ(ЗапасыОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг)) = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗапасыОбороты.Партия.Дата УБЫВ
		|ИТОГИ
		|	СУММА(Количество),
		|	МАКСИМУМ(КоличествоТребуемое)
		|ПО
		|	Номенклатура";
				
	ИначеЕсли СпособОценки = Перечисления.СпособыОценки.ПоСредней Тогда
	
		Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ЗапасыОбороты.КоличествоРасход, 0) - ЕСТЬNULL(ВременнаяТаблицаУжеВозвращенныхТоваров.Количество, 0) КАК КоличествоЗапасы,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВложенныйЗапрос.Цена, 0) = 0
		|			ТОГДА ВременнаяТаблицаТовары.Цена
		|		ИНАЧЕ ВложенныйЗапрос.Цена
		|	КОНЕЦ КАК Цена,
		|	ВременнаяТаблицаШапка.Период,
		|	ВременнаяТаблицаШапка.Организация,
		|	ВременнаяТаблицаШапка.СкладРасход КАК Склад,
		|	ВременнаяТаблицаШапка.СкладПриход КАК СкладПриход,
		|	ЗапасыОбороты.Партия,
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Количество КАК Количество,
		|	ЕСТЬNULL(ЗапасыОбороты.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетУчета,
		|	0 КАК Сумма,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	ЕСТЬNULL(ВложенныйЗапрос.СчетСебестоимости, НЕОПРЕДЕЛЕНО) КАК СчетСебестоимости,
		|	НЕОПРЕДЕЛЕНО КАК Продукция,
		|	ВложенныйЗапрос1.Количество КАК КоличествоТребуемое
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Обороты(
		|				,
		|				,
		|				Авто,
		|				Организация = &Организация
		|					И (Склад = &Склад
		|						ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|					И Номенклатура В
		|						(ВЫБРАТЬ
		|							ВременнаяТаблицаТовары.Номенклатура
		|						ИЗ
		|							ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары)) КАК ЗапасыОбороты
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаУжеВозвращенныхТоваров КАК ВременнаяТаблицаУжеВозвращенныхТоваров
		|			ПО ЗапасыОбороты.Номенклатура = ВременнаяТаблицаУжеВозвращенныхТоваров.Номенклатура
		|				И ЗапасыОбороты.СчетУчета = ВременнаяТаблицаУжеВозвращенныхТоваров.СчетУчета
		|		ПО ВременнаяТаблицаТовары.Номенклатура = ЗапасыОбороты.Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО ВременнаяТаблицаТовары.Ссылка = ВременнаяТаблицаШапка.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВЫБОР
		|				КОГДА ЕСТЬNULL(ЗапасыОбороты.КоличествоРасход, 0) = 0
		|					ТОГДА 0
		|				ИНАЧЕ ЗапасыОбороты.СуммаРасход / ЗапасыОбороты.КоличествоРасход
		|			КОНЕЦ КАК Цена,
		|			ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|			ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|			ЗапасыОбороты.СчетУчета КАК СчетУчета,
		|			ВременнаяТаблицаТовары.СчетСебестоимости КАК СчетСебестоимости
		|		ИЗ
		|			ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Обороты(
		|						,
		|						,
		|						Авто,
		|						Организация = &Организация
		|							И (Склад = &Склад
		|								ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|							И Номенклатура В
		|								(ВЫБРАТЬ
		|									ВременнаяТаблицаТовары.Номенклатура
		|								ИЗ
		|									ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары)) КАК ЗапасыОбороты
		|				ПО ВременнаяТаблицаТовары.Номенклатура = ЗапасыОбороты.Номенклатура
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|				ПО ВременнаяТаблицаТовары.Ссылка = ВременнаяТаблицаШапка.Ссылка
		|		ГДЕ
		|			ЗапасыОбороты.КоличествоРасход <> 0) КАК ВложенныйЗапрос
		|		ПО ВременнаяТаблицаТовары.НомерСтроки = ВложенныйЗапрос.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|			СУММА(ВременнаяТаблицаТовары.Количество) КАК Количество
		|		ИЗ
		|			ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВременнаяТаблицаТовары.Номенклатура) КАК ВложенныйЗапрос1
		|		ПО ВременнаяТаблицаТовары.Номенклатура = ВложенныйЗапрос1.Номенклатура
		|ГДЕ
		|	(ВЫРАЗИТЬ(ЗапасыОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг)) = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗапасыОбороты.Партия.Дата УБЫВ
		|ИТОГИ
		|	СУММА(Количество),
		|	МАКСИМУМ(КоличествоТребуемое)
		|ПО
		|	Номенклатура";
	Иначе
	
		Текст = 
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК КоличествоЗапасы,
		|	НЕОПРЕДЕЛЕНО КАК Цена,
		|	НЕОПРЕДЕЛЕНО КАК Период,
		|	НЕОПРЕДЕЛЕНО КАК Организация,
		|	НЕОПРЕДЕЛЕНО КАК Склад,
		|	НЕОПРЕДЕЛЕНО КАК СкладПриход,
		|	НЕОПРЕДЕЛЕНО КАК Партия,
		|	НЕОПРЕДЕЛЕНО КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
		|	НЕОПРЕДЕЛЕНО КАК Количество,
		|	НЕОПРЕДЕЛЕНО КАК СчетУчета,
		|	НЕОПРЕДЕЛЕНО КАК СчетСебестоимости,
		|	НЕОПРЕДЕЛЕНО КАК Сумма,
		|	НЕОПРЕДЕЛЕНО КАК ВидДвижения";				
	КонецЕсли;
	
	Текст = СтрЗаменить(Текст, "ВременнаяТаблицаТовары.Продукция", "НЕОПРЕДЕЛЕНО");
	
	Возврат Текст;
	
КонецФункции // ()

Процедура СформироватьТаблицаЗапасыСписание(ДокументСсылка, СтруктураДополнительныеСвойства, Перемещение = Ложь, ИмяТабличнойЧасти = "Товары") Экспорт	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	СпособОценки = СтруктураДополнительныеСвойства.ДляПроведения.СпособОценки;
	Запрос.Текст = ПолучитьТекстЗапросаДляПроведенияПоРНЗапасы(СпособОценки, СтруктураДополнительныеСвойства);
	
	Запрос.УстановитьПараметр("Дата", 			СтруктураДополнительныеСвойства.ДляПроведения.Дата);
	Запрос.УстановитьПараметр("Организация", 	СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("Склад", 			СтруктураДополнительныеСвойства.ДляПроведения.СкладРасход);
	
	Если ИмяТабличнойЧасти = "Материалы" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Товары", "Материалы");	
	КонецЕсли;	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ВыборкаЗапасы", РезультатЗапроса);			
			
	ТаблицаЗапасы = РезультатЗапроса.Выгрузить(); 
	ТаблицаЗапасы.Очистить();   // Пустая таблица для проведения
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаСчетСебестоимости = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);		
		Пока ВыборкаСчетСебестоимости.Следующий() Цикл
			ВыборкаСубконтоСписанияСебестоимости1 = ВыборкаСчетСебестоимости.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСубконтоСписанияСебестоимости1.Следующий() Цикл
				ВыборкаСубконтоСписанияСебестоимости2 = ВыборкаСубконтоСписанияСебестоимости1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаСубконтоСписанияСебестоимости2.Следующий() Цикл
					ВыборкаСубконтоСписанияСебестоимости3 = ВыборкаСубконтоСписанияСебестоимости2.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаСубконтоСписанияСебестоимости3.Следующий() Цикл
								
						ВыборкаПартии = ВыборкаСубконтоСписанияСебестоимости3.Выбрать();		
		
						Требуется	 	= ВыборкаСубконтоСписанияСебестоимости3.КоличествоТребуемое;
							Пока ВыборкаПартии.Следующий() Цикл
							// Если документ ПеремещениеТоваров, то добавляются движения приход
							Если НЕ ВыборкаПартии.КоличественныйСчетУчета Тогда
									СтрокаПриход 	= ТаблицаЗапасы.Добавить();
									ЗаполнитьЗначенияСвойств(СтрокаПриход, ВыборкаПартии,, "Партия");
									СтрокаПриход.Количество 	= 0;
									СтрокаПриход.Сумма 			= СтрокаПриход.СуммаТребуемая;
									СтрокаПриход.Склад 			= СтруктураДополнительныеСвойства.ДляПроведения.СкладРасход;
									СтрокаПриход.ВидДвижения	= ВидДвиженияНакопления.Расход;													
								Продолжить;
							КонецЕсли;
							
							Если Требуется <= 0 Тогда
								Прервать;
							КонецЕсли;
							
							Если Перемещение Тогда 
								СтрокаПриход 	= ТаблицаЗапасы.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаПриход, ВыборкаПартии);			
								Если Требуется >= ВыборкаПартии.КоличествоЗапасы Тогда				
									СтрокаПриход.Количество 	= ?(ВыборкаПартии.КоличествоЗапасы = 0, Требуется, ВыборкаПартии.КоличествоЗапасы); // ВыборкаПартии.КоличествоЗапасы;
									СтрокаПриход.Сумма 			= ВыборкаПартии.Сумма; // ВыборкаПартии.КоличествоЗапасы;
									СтрокаПриход.Склад 			= ВыборкаПартии.СкладПриход;					
									СтрокаПриход.ВидДвижения	= ВидДвиженияНакопления.Приход;									
								Иначе				
									СтрокаПриход.Количество 	= Требуется;
									СтрокаПриход.Сумма 			= ВыборкаПартии.Цена * СтрокаПриход.Количество;
									СтрокаПриход.Склад 			= ВыборкаПартии.СкладПриход;
									СтрокаПриход.ВидДвижения	= ВидДвиженияНакопления.Приход;				
								КонецЕсли;
							КонецЕсли;
							
							СтрокаРасход 	= ТаблицаЗапасы.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаРасход, ВыборкаПартии);			
							Если ВыборкаПартии.КоличествоЗапасы = 0 Тогда
								СтрокаРасход.Количество 	= Требуется;
								СтрокаРасход.Сумма 			= ВыборкаПартии.Цена * Требуется;
								СтрокаРасход.Склад 			= ВыборкаПартии.Склад;
								СтрокаРасход.ВидДвижения	= ВидДвиженияНакопления.Расход;
								Требуется 					= 0;
								
							ИначеЕсли Требуется >= ВыборкаПартии.КоличествоЗапасы Тогда
								СтрокаРасход.Количество 	= ?(ВыборкаПартии.КоличествоЗапасы = 0, Требуется, ВыборкаПартии.КоличествоЗапасы);
								СтрокаРасход.Сумма 			= ВыборкаПартии.Сумма; // * ВыборкаПартии.КоличествоЗапасы;
								СтрокаРасход.Склад 			= ВыборкаПартии.Склад;
								СтрокаРасход.ВидДвижения	= ВидДвиженияНакопления.Расход;
								Требуется 					= Требуется - СтрокаРасход.Количество; // * ВыборкаПартии.КоличествоЗапасы;													
							Иначе
								СтрокаРасход.Количество 	= Требуется;
								СтрокаРасход.Сумма 			= ВыборкаПартии.Цена * СтрокаРасход.Количество;
								СтрокаРасход.Склад 			= ВыборкаПартии.Склад;
								СтрокаРасход.ВидДвижения	= ВидДвиженияНакопления.Расход;
								Требуется 					= 0;				
							КонецЕсли;			
							
							ПредыдущаяСтрокаРасход 	= СтрокаРасход;
						КонецЦикла;
						
						Если Требуется > 0 
							И НЕ ВыполнитьКонтрольОстатков() 
							И СтруктураДополнительныеСвойства.ДляПроведения.СпособОценки = Перечисления.СпособыОценки.ПоСредней Тогда
							
							Если НЕ ПредыдущаяСтрокаРасход = Неопределено Тогда
								СтрокаРасход 	= ТаблицаЗапасы.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаРасход, ПредыдущаяСтрокаРасход);			
								СтрокаРасход.Количество 	= Требуется;
								СтрокаРасход.Сумма 			= ПредыдущаяСтрокаРасход.Цена * Требуется;
								СтрокаРасход.Склад 			= ПредыдущаяСтрокаРасход.Склад;
								СтрокаРасход.ВидДвижения	= ВидДвиженияНакопления.Расход;
								Требуется 					= 0;								
							КонецЕсли;
			
						КонецЕсли;	
		
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
						
		КонецЦикла;		
			
	КонецЦикла;
	
	Если Перемещение Тогда
		ТаблицаЗапасы.Свернуть("Организация, Период, ВидДвижения, Склад, СкладПриход, СчетУчета, Номенклатура, Цена, Партия", "Количество, Сумма");
	Иначе
		ТаблицаЗапасы.Свернуть("Организация, Период, ВидДвижения, Склад, СчетУчета, Номенклатура, Цена, Партия", "Количество, Сумма");	
	КонецЕсли;	
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", ТаблицаЗапасы);
		
КонецПроцедуры 

Процедура СформироватьТаблицаЗапасыВозвратОтПокупателя(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	СпособОценки = СтруктураДополнительныеСвойства.ДляПроведения.СпособОценки;
	Запрос.Текст = ПолучитьТекстЗапросаДляПроведенияПоВозвратуЗапасы(СпособОценки, СтруктураДополнительныеСвойства);
	
	Запрос.УстановитьПараметр("Дата", 			СтруктураДополнительныеСвойства.ДляПроведения.Дата);
	Запрос.УстановитьПараметр("Организация", 	СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("Склад", 			СтруктураДополнительныеСвойства.ДляПроведения.СкладРасход);
	Запрос.УстановитьПараметр("ДокументОснование", 	СтруктураДополнительныеСвойства.ДляПроведения.ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
				
	ТаблицаЗапасы = РезультатЗапроса.Выгрузить(); 
	ТаблицаЗапасы.Очистить();   // Пустая таблица для проведения
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		ВыборкаПартии 	= ВыборкаНоменклатура.Выбрать();
		Требуется	 	= ВыборкаНоменклатура.КоличествоТребуемое;
		Пока ВыборкаПартии.Следующий() И Требуется > 0 Цикл
			
			СтрокаПриход 	= ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриход, ВыборкаПартии);			
			Если Требуется >= ВыборкаПартии.КоличествоЗапасы Тогда
				СтрокаПриход.Количество 	= ВыборкаПартии.КоличествоЗапасы;
				СтрокаПриход.Сумма 			= ВыборкаПартии.Сумма; 
				СтрокаПриход.Склад 			= ВыборкаПартии.Склад;
				СтрокаПриход.ВидДвижения	= ВидДвиженияНакопления.Приход;
				Требуется 					= Требуется - ВыборкаПартии.КоличествоЗапасы;													
			Иначе
				СтрокаПриход.Количество 	= Требуется;
				СтрокаПриход.Сумма 			= ВыборкаПартии.Цена * Требуется;
				СтрокаПриход.Склад 			= ВыборкаПартии.Склад;
				СтрокаПриход.ВидДвижения	= ВидДвиженияНакопления.Приход;
				Требуется 					= 0;				
			КонецЕсли;			
			
		КонецЦикла;
			
	КонецЦикла;
	
	ТаблицаЗапасы.Свернуть("Организация, Период, ВидДвижения, Склад, СчетУчета, Номенклатура, Цена, Партия", "Количество, Сумма");
			
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", ТаблицаЗапасы);
		
КонецПроцедуры

Процедура ПолучитьПроводкиСписанияСебестоимостиПоРБХПоПартии(ДокументСсылка, СтруктураДополнительныеСвойства, Перемещение = Ложь, Содержание = "") Экспорт	
	
	СчетСписания                                            = Неопределено;
	Продукция                                               = Неопределено;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	КурсДокумента 	= ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("Курс", МетаданныеДокумента), ДокументСсылка.Курс, 1);
	ВалютаДокумента = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", МетаданныеДокумента), ДокументСсылка.ВалютаДокумента, СтруктураДополнительныеСвойства.ДляПроведения.ВалютаРегламентированногоУчета);
	
    Если СтруктураДополнительныеСвойства.ДляПроведения.Свойство("ВыборкаЗапасы") Тогда
		РезультатЗапроса = СтруктураДополнительныеСвойства.ДляПроведения.ВыборкаЗапасы;
	Иначе			
		СпособОценки = СтруктураДополнительныеСвойства.ДляПроведения.СпособОценки;
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;		
		Запрос.Текст = ПолучитьТекстЗапросаДляПроведенияПоРНЗапасыПоПартии(Перемещение, СтруктураДополнительныеСвойства);
		РезультатЗапроса = Запрос.Выполнить();			
	КонецЕсли;
		
	СубконтоДт1	= НЕОПРЕДЕЛЕНО;
	СубконтоДт2	= НЕОПРЕДЕЛЕНО;
	СубконтоДт3 = НЕОПРЕДЕЛЕНО;
		
	КС500 = Новый КвалификаторыСтроки(500);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС500);
	
	КЧ152 = Новый КвалификаторыЧисла(15, 2);
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ152 = Новый ОписаниеТипов(Массив, , КЧ152);	
	
	КЧ153 = Новый КвалификаторыЧисла(15, 6);
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ153 = Новый ОписаниеТипов(Массив, , КЧ153);
	
	Массив.Очистить();
	Массив.Добавить(Тип("ПланСчетовСсылка.Хозрасчетный"));
	ОписаниеТиповПланСчетов = Новый ОписаниеТипов(Массив);	
	
	Массив.Очистить();
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	Массив.Добавить(Тип("СправочникСсылка.СтатьиЗатратИДоходов"));
	Массив.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ОписаниеТиповСубконто1 = Новый ОписаниеТипов(Массив);
	
	Массив.Очистить();
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	Массив.Добавить(Тип("СправочникСсылка.Склады"));
	Массив.Добавить(Тип("СправочникСсылка.ПодразделенияОрганизаций"));
	Массив.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	ОписаниеТиповСубконто2 = Новый ОписаниеТипов(Массив);
	
	Массив.Очистить();
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	Массив.Добавить(Тип("СправочникСсылка.НоменклатурныеГруппы"));
	ОписаниеТиповСубконто3 = Новый ОписаниеТипов(Массив);	
	
	Массив.Очистить();
	Массив.Добавить(Тип("Дата"));
	ОписаниеТиповДата = Новый ОписаниеТипов(Массив);	
	
	Массив.Очистить();
	Массив.Добавить(Тип("СправочникСсылка.Организации"));
	ОписаниеТиповОрганизация = Новый ОписаниеТипов(Массив);
	
	Массив.Очистить();
	Массив.Добавить(Тип("СправочникСсылка.Валюты"));
	ОписаниеТиповВалюта = Новый ОписаниеТипов(Массив);	
	
	ТаблицаПроводок = Новый ТаблицаЗначений;
	
	ТаблицаПроводок.Колонки.Добавить("СчетДт", 			ОписаниеТиповПланСчетов);
	ТаблицаПроводок.Колонки.Добавить("СчетКт", 			ОписаниеТиповПланСчетов);
	ТаблицаПроводок.Колонки.Добавить("СубконтоДт1", 	ОписаниеТиповСубконто1);
	ТаблицаПроводок.Колонки.Добавить("СубконтоДт2", 	ОписаниеТиповСубконто2);
	ТаблицаПроводок.Колонки.Добавить("СубконтоДт3", 	ОписаниеТиповСубконто3);
	ТаблицаПроводок.Колонки.Добавить("СубконтоКт1", 	ОписаниеТиповСубконто1);
	ТаблицаПроводок.Колонки.Добавить("СубконтоКт2", 	ОписаниеТиповСубконто2);
	ТаблицаПроводок.Колонки.Добавить("СубконтоКт3", 	ОписаниеТиповС);
	ТаблицаПроводок.Колонки.Добавить("Период", 			ОписаниеТиповДата);	
	ТаблицаПроводок.Колонки.Добавить("Организация", 	ОписаниеТиповОрганизация);
	ТаблицаПроводок.Колонки.Добавить("Содержание", 		ОписаниеТиповС);
	ТаблицаПроводок.Колонки.Добавить("Сумма",			ОписаниеТиповЧ152);
	ТаблицаПроводок.Колонки.Добавить("ВалютаДт", 		ОписаниеТиповВалюта);
	ТаблицаПроводок.Колонки.Добавить("ВалютаКт", 		ОписаниеТиповВалюта);
	ТаблицаПроводок.Колонки.Добавить("ВалютнаяСуммаДт",	ОписаниеТиповЧ152);
	ТаблицаПроводок.Колонки.Добавить("ВалютнаяСуммаКт",	ОписаниеТиповЧ152);
	ТаблицаПроводок.Колонки.Добавить("КоличествоДт",	ОписаниеТиповЧ153);
	ТаблицаПроводок.Колонки.Добавить("КоличествоКт",	ОписаниеТиповЧ153);
	
	
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаСчетСебестоимости = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);		
		Пока ВыборкаСчетСебестоимости.Следующий() Цикл
			ВыборкаСубконтоСписанияСебестоимости1 = ВыборкаСчетСебестоимости.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСубконтоСписанияСебестоимости1.Следующий() Цикл
				ВыборкаСубконтоСписанияСебестоимости2 = ВыборкаСубконтоСписанияСебестоимости1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаСубконтоСписанияСебестоимости2.Следующий() Цикл
					ВыборкаСубконтоСписанияСебестоимости3 = ВыборкаСубконтоСписанияСебестоимости2.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаСубконтоСписанияСебестоимости3.Следующий() Цикл
														
						ВыборкаПартии = ВыборкаСубконтоСписанияСебестоимости3.Выбрать();
						Требуется	 		= ВыборкаСубконтоСписанияСебестоимости3.КоличествоТребуемое;
						
						Пока ВыборкаПартии.Следующий() 
							И (Требуется > 0 ИЛИ Требуется = 0 И НЕ ВыборкаПартии.КоличественныйСчетУчета) 
							И (ВыборкаПартии.Продукция = Продукция ИЛИ Продукция = Неопределено) Цикл
														
							СтрокаРасход 	= ТаблицаПроводок.Добавить();			
							ЗаполнитьЗначенияСвойств(СтрокаРасход, ВыборкаПартии);	
							СчетДт = ВыборкаПартии.СчетСебестоимости;
										
							Если НЕ ВыборкаПартии.КоличественныйСчетУчета Тогда
								СтрокаРасход.СчетДт 		= СчетДт;				
								СтрокаРасход.СчетКт 		= ?(ЗначениеЗаполнено(ВыборкаПартии.СчетУчета), ВыборкаПартии.СчетУчета, Неопределено);
								СтрокаРасход.СубконтоДт1 	= ?(ЗначениеЗаполнено(ВыборкаПартии.СубконтоСписанияСебестоимости1), ВыборкаПартии.СубконтоСписанияСебестоимости1, СубконтоДт1);
								СтрокаРасход.СубконтоДт2 	= ?(Перемещение, ВыборкаПартии.СкладПриход, ?(ЗначениеЗаполнено(ВыборкаПартии.СубконтоСписанияСебестоимости2), ВыборкаПартии.СубконтоСписанияСебестоимости2, СубконтоДт2));
								СтрокаРасход.СубконтоДт3 	= ?(ЗначениеЗаполнено(ВыборкаПартии.СубконтоСписанияСебестоимости3), ВыборкаПартии.СубконтоСписанияСебестоимости3, СубконтоДт3);
								СтрокаРасход.СубконтоКт1 	= ВыборкаПартии.Номенклатура;
								СтрокаРасход.СубконтоКт2 	= ВыборкаПартии.Склад;
								СтрокаРасход.СубконтоКт3 	= "";				
								СтрокаРасход.Период 		= ВыборкаПартии.Период;
								СтрокаРасход.Организация 	= ВыборкаПартии.Организация;
								СтрокаРасход.Содержание 	= ?(Содержание = "", "Списание себестоимости", Содержание);
								СтрокаРасход.Сумма 			= ВыборкаПартии.СуммаТребуемая * КурсДокумента;
								СтрокаРасход.ВалютаДт       = ВалютаДокумента;
								СтрокаРасход.ВалютаКт       = ВалютаДокумента;
								СтрокаРасход.ВалютнаяСуммаДт= ВыборкаПартии.СуммаТребуемая;
								СтрокаРасход.ВалютнаяСуммаКт= ВыборкаПартии.СуммаТребуемая;
								СтрокаРасход.КоличествоДт   = 0;
								СтрокаРасход.КоличествоКт   = 0;												
								Продолжить;
							КонецЕсли;
																				
							// ВыборкаПартии.КоличествоТребуемое			
							Если Требуется >= ВыборкаПартии.КоличествоЗапасы Тогда
								СтрокаРасход.СчетДт 		= СчетДт;				
								СтрокаРасход.СчетКт 		= ?(ЗначениеЗаполнено(ВыборкаПартии.СчетУчета), ВыборкаПартии.СчетУчета, Неопределено);
								СтрокаРасход.СубконтоДт1 	= ?(ЗначениеЗаполнено(ВыборкаПартии.СубконтоСписанияСебестоимости1), ВыборкаПартии.СубконтоСписанияСебестоимости1, СубконтоДт1);
								СтрокаРасход.СубконтоДт2 	= ?(Перемещение, ВыборкаПартии.СкладПриход, ?(ЗначениеЗаполнено(ВыборкаПартии.СубконтоСписанияСебестоимости2), ВыборкаПартии.СубконтоСписанияСебестоимости2, СубконтоДт2));
								СтрокаРасход.СубконтоДт3 	= ?(ЗначениеЗаполнено(ВыборкаПартии.СубконтоСписанияСебестоимости3), ВыборкаПартии.СубконтоСписанияСебестоимости3, СубконтоДт3);
								СтрокаРасход.СубконтоКт1 	= ВыборкаПартии.Номенклатура;
								СтрокаРасход.СубконтоКт2 	= ВыборкаПартии.Склад;
								СтрокаРасход.СубконтоКт3 	= "";				
								СтрокаРасход.Период 		= ВыборкаПартии.Период;
								СтрокаРасход.Организация 	= ВыборкаПартии.Организация;
								СтрокаРасход.Содержание 	= ?(Содержание = "", "Списание себестоимости", Содержание);
								СтрокаРасход.Сумма 			= ВыборкаПартии.Сумма * КурсДокумента;
								СтрокаРасход.ВалютаДт       = ВалютаДокумента;
								СтрокаРасход.ВалютаКт       = ВалютаДокумента;
								СтрокаРасход.ВалютнаяСуммаДт= ВыборкаПартии.Сумма;
								СтрокаРасход.ВалютнаяСуммаКт= ВыборкаПартии.Сумма;
								СтрокаРасход.КоличествоДт   = ВыборкаПартии.КоличествоЗапасы;
								СтрокаРасход.КоличествоКт   = ВыборкаПартии.КоличествоЗапасы;
								
								Требуется 					= Требуется - ВыборкаПартии.КоличествоЗапасы;								
							Иначе
								СтрокаРасход.СчетДт 		= СчетДт;
								СтрокаРасход.СчетКт 		= ВыборкаПартии.СчетУчета;
								СтрокаРасход.СубконтоДт1 	= ?(ЗначениеЗаполнено(ВыборкаПартии.СубконтоСписанияСебестоимости1), ВыборкаПартии.СубконтоСписанияСебестоимости1, СубконтоДт1);
								СтрокаРасход.СубконтоДт2 	= ?(Перемещение, ВыборкаПартии.СкладПриход, ?(ЗначениеЗаполнено(ВыборкаПартии.СубконтоСписанияСебестоимости2), ВыборкаПартии.СубконтоСписанияСебестоимости2, СубконтоДт2));
								СтрокаРасход.СубконтоДт3 	= ?(ЗначениеЗаполнено(ВыборкаПартии.СубконтоСписанияСебестоимости3), ВыборкаПартии.СубконтоСписанияСебестоимости3, СубконтоДт3);
								СтрокаРасход.СубконтоКт1 	= ВыборкаПартии.Номенклатура;
								СтрокаРасход.СубконтоКт2 	= ВыборкаПартии.Склад;
								СтрокаРасход.СубконтоКт3 	= "";				
								СтрокаРасход.Период 		= ВыборкаПартии.Период;
								СтрокаРасход.Организация 	= ВыборкаПартии.Организация;
								СтрокаРасход.Содержание 	= ?(Содержание = "", "Списание себестоимости", Содержание);
								СтрокаРасход.Сумма 			= ВыборкаПартии.Цена * Требуется * КурсДокумента;
								СтрокаРасход.ВалютаДт       = ВалютаДокумента;
								СтрокаРасход.ВалютаКт       = ВалютаДокумента;
								СтрокаРасход.ВалютнаяСуммаДт= ВыборкаПартии.Цена * Требуется;
								СтрокаРасход.ВалютнаяСуммаКт= ВыборкаПартии.Цена * Требуется;
								СтрокаРасход.КоличествоДт   = Требуется;
								СтрокаРасход.КоличествоКт   = Требуется;
								
								Требуется 					= 0;				
							КонецЕсли;
							
							ПредыдущаяСтрокаРасход 	= СтрокаРасход;
							ПредыдущаяЦена 			= ВыборкаПартии.Цена;
						КонецЦикла;
						
						Если Требуется > 0 Тогда
							СтрокаРасход 	= ТаблицаПроводок.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаРасход, ПредыдущаяСтрокаРасход);			
							СтрокаРасход.КоличествоДт   = Требуется;
							СтрокаРасход.КоличествоКт   = Требуется;
							СтрокаРасход.Сумма 			= ПредыдущаяЦена * Требуется * КурсДокумента;
							СтрокаРасход.ВалютнаяСуммаДт= ПредыдущаяЦена * Требуется;
							СтрокаРасход.ВалютнаяСуммаКт= ПредыдущаяЦена * Требуется;							
							Требуется 					= 0;				
						КонецЕсли;						
												
						
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
						
		КонецЦикла;		
			
	КонецЦикла;									
																					
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", ТаблицаПроводок);
		
КонецПроцедуры

Процедура ПолучитьПроводкиСписанияСебестоимостиПоРБХ(ДокументСсылка, СтруктураДополнительныеСвойства, Перемещение = Ложь, Содержание = "") Экспорт	
	
	СчетСписания                                            = Неопределено;
	Продукция                                               = Неопределено;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	КурсДокумента 	= ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("Курс", МетаданныеДокумента), ДокументСсылка.Курс, 1);
	ВалютаДокумента = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", МетаданныеДокумента), ДокументСсылка.ВалютаДокумента, СтруктураДополнительныеСвойства.ДляПроведения.ВалютаРегламентированногоУчета);
	
    Если СтруктураДополнительныеСвойства.ДляПроведения.Свойство("ВыборкаЗапасы") Тогда
		РезультатЗапроса = СтруктураДополнительныеСвойства.ДляПроведения.ВыборкаЗапасы;
	Иначе			
		СпособОценки = СтруктураДополнительныеСвойства.ДляПроведения.СпособОценки;
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;		
		Запрос.Текст = ПолучитьТекстЗапросаДляПроведенияПоРНЗапасы(СпособОценки, СтруктураДополнительныеСвойства);				
		Запрос.УстановитьПараметр("Дата", 			СтруктураДополнительныеСвойства.ДляПроведения.Дата);
		Запрос.УстановитьПараметр("Организация", 	СтруктураДополнительныеСвойства.ДляПроведения.Организация);
		Запрос.УстановитьПараметр("Склад", 			СтруктураДополнительныеСвойства.ДляПроведения.СкладРасход);		
		РезультатЗапроса = Запрос.Выполнить();			
	КонецЕсли;
		
	СубконтоДт1	= НЕОПРЕДЕЛЕНО;
	СубконтоДт2	= НЕОПРЕДЕЛЕНО;
	СубконтоДт3 = НЕОПРЕДЕЛЕНО;
		
	КС500 = Новый КвалификаторыСтроки(500);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС500);
	
	КЧ152 = Новый КвалификаторыЧисла(15, 2);
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ152 = Новый ОписаниеТипов(Массив, , КЧ152);	
	
	КЧ153 = Новый КвалификаторыЧисла(15, 6);
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ153 = Новый ОписаниеТипов(Массив, , КЧ153);
	
	Массив.Очистить();
	Массив.Добавить(Тип("ПланСчетовСсылка.Хозрасчетный"));
	ОписаниеТиповПланСчетов = Новый ОписаниеТипов(Массив);	
	
	Массив.Очистить();
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	Массив.Добавить(Тип("СправочникСсылка.СтатьиЗатратИДоходов"));
	Массив.Добавить(Тип("СправочникСсылка.Контрагенты"));
	Массив.Добавить(Тип("СправочникСсылка.ОбъектыСтроительства"));
	Массив.Добавить(Тип("СправочникСсылка.ОсновныеСредства"));
	ОписаниеТиповСубконто1 = Новый ОписаниеТипов(Массив);
	
	Массив.Очистить();
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	Массив.Добавить(Тип("СправочникСсылка.Склады"));
	Массив.Добавить(Тип("СправочникСсылка.ПодразделенияОрганизаций"));
	Массив.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	Массив.Добавить(Тип("СправочникСсылка.СтатьиЗатратИДоходов"));
	ОписаниеТиповСубконто2 = Новый ОписаниеТипов(Массив);
	
	Массив.Очистить();
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	Массив.Добавить(Тип("СправочникСсылка.НоменклатурныеГруппы"));
	ОписаниеТиповСубконто3 = Новый ОписаниеТипов(Массив);	
	
	Массив.Очистить();
	Массив.Добавить(Тип("Дата"));
	ОписаниеТиповДата = Новый ОписаниеТипов(Массив);	
	
	Массив.Очистить();
	Массив.Добавить(Тип("СправочникСсылка.Организации"));
	ОписаниеТиповОрганизация = Новый ОписаниеТипов(Массив);
	
	Массив.Очистить();
	Массив.Добавить(Тип("СправочникСсылка.Валюты"));
	ОписаниеТиповВалюта = Новый ОписаниеТипов(Массив);	
	
	ТаблицаПроводок = Новый ТаблицаЗначений;
	
	ТаблицаПроводок.Колонки.Добавить("СчетДт", 			ОписаниеТиповПланСчетов);
	ТаблицаПроводок.Колонки.Добавить("СчетКт", 			ОписаниеТиповПланСчетов);
	ТаблицаПроводок.Колонки.Добавить("СубконтоДт1", 	ОписаниеТиповСубконто1);
	ТаблицаПроводок.Колонки.Добавить("СубконтоДт2", 	ОписаниеТиповСубконто2);
	ТаблицаПроводок.Колонки.Добавить("СубконтоДт3", 	ОписаниеТиповСубконто3);
	ТаблицаПроводок.Колонки.Добавить("СубконтоКт1", 	ОписаниеТиповСубконто1);
	ТаблицаПроводок.Колонки.Добавить("СубконтоКт2", 	ОписаниеТиповСубконто2);
	ТаблицаПроводок.Колонки.Добавить("СубконтоКт3", 	ОписаниеТиповС);
	ТаблицаПроводок.Колонки.Добавить("Период", 			ОписаниеТиповДата);	
	ТаблицаПроводок.Колонки.Добавить("Организация", 	ОписаниеТиповОрганизация);
	ТаблицаПроводок.Колонки.Добавить("Содержание", 		ОписаниеТиповС);
	ТаблицаПроводок.Колонки.Добавить("Сумма",			ОписаниеТиповЧ152);
	ТаблицаПроводок.Колонки.Добавить("ВалютаДт", 		ОписаниеТиповВалюта);
	ТаблицаПроводок.Колонки.Добавить("ВалютаКт", 		ОписаниеТиповВалюта);
	ТаблицаПроводок.Колонки.Добавить("ВалютнаяСуммаДт",	ОписаниеТиповЧ152);
	ТаблицаПроводок.Колонки.Добавить("ВалютнаяСуммаКт",	ОписаниеТиповЧ152);
	ТаблицаПроводок.Колонки.Добавить("КоличествоДт",	ОписаниеТиповЧ153);
	ТаблицаПроводок.Колонки.Добавить("КоличествоКт",	ОписаниеТиповЧ153);

	ВыборкаНомерСтроки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНомерСтроки.Следующий() Цикл
		
		ВыборкаСчетСебестоимости = ВыборкаНомерСтроки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);		
		Пока ВыборкаСчетСебестоимости.Следующий() Цикл
			ВыборкаСубконтоСписанияСебестоимости1 = ВыборкаСчетСебестоимости.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСубконтоСписанияСебестоимости1.Следующий() Цикл
				ВыборкаСубконтоСписанияСебестоимости2 = ВыборкаСубконтоСписанияСебестоимости1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаСубконтоСписанияСебестоимости2.Следующий() Цикл
					ВыборкаСубконтоСписанияСебестоимости3 = ВыборкаСубконтоСписанияСебестоимости2.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаСубконтоСписанияСебестоимости3.Следующий() Цикл
		
						ВыборкаПартии = ВыборкаСубконтоСписанияСебестоимости3.Выбрать();
						Требуется	 		= ВыборкаСубконтоСписанияСебестоимости3.КоличествоТребуемое;
						
						Пока ВыборкаПартии.Следующий() 
							И (Требуется > 0 ИЛИ Требуется = 0 И НЕ ВыборкаПартии.КоличественныйСчетУчета) 
							И (ВыборкаПартии.Продукция = Продукция ИЛИ Продукция = Неопределено) Цикл
														
							СтрокаРасход 	= ТаблицаПроводок.Добавить();			
							ЗаполнитьЗначенияСвойств(СтрокаРасход, ВыборкаПартии);	
							СчетДт = ВыборкаПартии.СчетСебестоимости;
										
							Если НЕ ВыборкаПартии.КоличественныйСчетУчета Тогда
								СтрокаРасход.СчетДт 		= СчетДт;				
								СтрокаРасход.СчетКт 		= ?(ЗначениеЗаполнено(ВыборкаПартии.СчетУчета), ВыборкаПартии.СчетУчета, Неопределено);
								СтрокаРасход.СубконтоДт1 	= ?(ЗначениеЗаполнено(ВыборкаПартии.СубконтоСписанияСебестоимости1), ВыборкаПартии.СубконтоСписанияСебестоимости1, СубконтоДт1);
								СтрокаРасход.СубконтоДт2 	= ?(Перемещение, ВыборкаПартии.СкладПриход, ?(ЗначениеЗаполнено(ВыборкаПартии.СубконтоСписанияСебестоимости2), ВыборкаПартии.СубконтоСписанияСебестоимости2, СубконтоДт2));
								СтрокаРасход.СубконтоДт3 	= ?(ЗначениеЗаполнено(ВыборкаПартии.СубконтоСписанияСебестоимости3), ВыборкаПартии.СубконтоСписанияСебестоимости3, СубконтоДт3);
								СтрокаРасход.СубконтоКт1 	= ВыборкаПартии.Номенклатура;
								СтрокаРасход.СубконтоКт2 	= ВыборкаПартии.Склад;
								СтрокаРасход.СубконтоКт3 	= "";				
								СтрокаРасход.Период 		= ВыборкаПартии.Период;
								СтрокаРасход.Организация 	= ВыборкаПартии.Организация;
								СтрокаРасход.Содержание 	= ?(Содержание = "", "Списание себестоимости", Содержание);
								СтрокаРасход.Сумма 			= ВыборкаПартии.СуммаТребуемая * КурсДокумента;
								СтрокаРасход.ВалютаДт       = ВалютаДокумента;
								СтрокаРасход.ВалютаКт       = ВалютаДокумента;
								СтрокаРасход.ВалютнаяСуммаДт= ВыборкаПартии.СуммаТребуемая;
								СтрокаРасход.ВалютнаяСуммаКт= ВыборкаПартии.СуммаТребуемая;
								СтрокаРасход.КоличествоДт   = 0;
								СтрокаРасход.КоличествоКт   = 0;												
								Продолжить;
							КонецЕсли;
																				
							// ВыборкаПартии.КоличествоТребуемое			
							Если Требуется >= ВыборкаПартии.КоличествоЗапасы Тогда
								СтрокаРасход.СчетДт 		= СчетДт;				
								СтрокаРасход.СчетКт 		= ?(ЗначениеЗаполнено(ВыборкаПартии.СчетУчета), ВыборкаПартии.СчетУчета, Неопределено);
								СтрокаРасход.СубконтоДт1 	= ?(ЗначениеЗаполнено(ВыборкаПартии.СубконтоСписанияСебестоимости1), ВыборкаПартии.СубконтоСписанияСебестоимости1, СубконтоДт1);
								СтрокаРасход.СубконтоДт2 	= ?(Перемещение, ВыборкаПартии.СкладПриход, ?(ЗначениеЗаполнено(ВыборкаПартии.СубконтоСписанияСебестоимости2), ВыборкаПартии.СубконтоСписанияСебестоимости2, СубконтоДт2));
								СтрокаРасход.СубконтоДт3 	= ?(ЗначениеЗаполнено(ВыборкаПартии.СубконтоСписанияСебестоимости3), ВыборкаПартии.СубконтоСписанияСебестоимости3, СубконтоДт3);
								СтрокаРасход.СубконтоКт1 	= ВыборкаПартии.Номенклатура;
								СтрокаРасход.СубконтоКт2 	= ВыборкаПартии.Склад;
								СтрокаРасход.СубконтоКт3 	= "";				
								СтрокаРасход.Период 		= ВыборкаПартии.Период;
								СтрокаРасход.Организация 	= ВыборкаПартии.Организация;
								СтрокаРасход.Содержание 	= ?(Содержание = "", "Списание себестоимости", Содержание);
								СтрокаРасход.Сумма 			= ВыборкаПартии.Сумма * КурсДокумента;
								СтрокаРасход.ВалютаДт       = ВалютаДокумента;
								СтрокаРасход.ВалютаКт       = ВалютаДокумента;
								СтрокаРасход.ВалютнаяСуммаДт= ВыборкаПартии.Сумма;
								СтрокаРасход.ВалютнаяСуммаКт= ВыборкаПартии.Сумма;
								СтрокаРасход.КоличествоДт   = ВыборкаПартии.КоличествоЗапасы;
								СтрокаРасход.КоличествоКт   = ВыборкаПартии.КоличествоЗапасы;
								
								Требуется 					= Требуется - ВыборкаПартии.КоличествоЗапасы;								
							Иначе
								СтрокаРасход.СчетДт 		= СчетДт;
								СтрокаРасход.СчетКт 		= ВыборкаПартии.СчетУчета;
								СтрокаРасход.СубконтоДт1 	= ?(ЗначениеЗаполнено(ВыборкаПартии.СубконтоСписанияСебестоимости1), ВыборкаПартии.СубконтоСписанияСебестоимости1, СубконтоДт1);
								СтрокаРасход.СубконтоДт2 	= ?(Перемещение, ВыборкаПартии.СкладПриход, ?(ЗначениеЗаполнено(ВыборкаПартии.СубконтоСписанияСебестоимости2), ВыборкаПартии.СубконтоСписанияСебестоимости2, СубконтоДт2));
								СтрокаРасход.СубконтоДт3 	= ?(ЗначениеЗаполнено(ВыборкаПартии.СубконтоСписанияСебестоимости3), ВыборкаПартии.СубконтоСписанияСебестоимости3, СубконтоДт3);
								СтрокаРасход.СубконтоКт1 	= ВыборкаПартии.Номенклатура;
								СтрокаРасход.СубконтоКт2 	= ВыборкаПартии.Склад;
								СтрокаРасход.СубконтоКт3 	= "";				
								СтрокаРасход.Период 		= ВыборкаПартии.Период;
								СтрокаРасход.Организация 	= ВыборкаПартии.Организация;
								СтрокаРасход.Содержание 	= ?(Содержание = "", "Списание себестоимости", Содержание);
								СтрокаРасход.Сумма 			= ВыборкаПартии.Цена * Требуется * КурсДокумента;
								СтрокаРасход.ВалютаДт       = ВалютаДокумента;
								СтрокаРасход.ВалютаКт       = ВалютаДокумента;
								СтрокаРасход.ВалютнаяСуммаДт= ВыборкаПартии.Цена * Требуется;
								СтрокаРасход.ВалютнаяСуммаКт= ВыборкаПартии.Цена * Требуется;
								СтрокаРасход.КоличествоДт   = Требуется;
								СтрокаРасход.КоличествоКт   = Требуется;
								
								Требуется 					= 0;				
							КонецЕсли;
							
							ПредыдущаяСтрокаРасход 	= СтрокаРасход;
							ПредыдущаяЦена 			= ВыборкаПартии.Цена;
						КонецЦикла;
						
						Если Требуется > 0 Тогда
							СтрокаРасход 	= ТаблицаПроводок.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаРасход, ПредыдущаяСтрокаРасход);			
							СтрокаРасход.КоличествоДт   = Требуется;
							СтрокаРасход.КоличествоКт   = Требуется;
							СтрокаРасход.Сумма 			= ПредыдущаяЦена * Требуется * КурсДокумента;
							СтрокаРасход.ВалютнаяСуммаДт= ПредыдущаяЦена * Требуется;
							СтрокаРасход.ВалютнаяСуммаКт= ПредыдущаяЦена * Требуется;							
							Требуется 					= 0;				
						КонецЕсли;	
												
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
				
	КонецЦикла;
	
	ТаблицаПроводок.Свернуть("Организация, Период, Содержание, СчетДт, СчетКт, СубконтоДт1, СубконтоДт2, СубконтоДт3, СубконтоКт1, СубконтоКт2, СубконтоКт3, ВалютаДт, ВалютаКт", 
									"Сумма, ВалютнаяСуммаДт, ВалютнаяСуммаКт, КоличествоДт, КоличествоКт");								
									
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =		

	"ВЫБРАТЬ
	|	ТаблицаПроводок.СчетДт КАК СчетДт,
	|	ТаблицаПроводок.СчетКт КАК СчетКт,
	|	ТаблицаПроводок.СубконтоДт1 КАК СубконтоДт1,
	|	ТаблицаПроводок.СубконтоДт2 КАК СубконтоДт2,
	|	ТаблицаПроводок.СубконтоДт3 КАК СубконтоДт3,	
	|	ТаблицаПроводок.СубконтоКт1 КАК СубконтоКт1,
	|	ТаблицаПроводок.СубконтоКт2 КАК СубконтоКт2,
	|	ТаблицаПроводок.СубконтоКт3 КАК СубконтоКт3,	
	|	ТаблицаПроводок.Период КАК Период,
	|	ТаблицаПроводок.Организация КАК Организация,
	|	ТаблицаПроводок.Содержание КАК Содержание,
	|	ТаблицаПроводок.Сумма КАК Сумма,
	|	ТаблицаПроводок.ВалютаДт КАК ВалютаДт,
	|	ТаблицаПроводок.ВалютаКт КАК ВалютаКт,
	|	ТаблицаПроводок.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
	|	ТаблицаПроводок.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	ТаблицаПроводок.КоличествоДт КАК КоличествоДт,
	|	ТаблицаПроводок.КоличествоКт КАК КоличествоКт
	|ПОМЕСТИТЬ ВременнаяТаблица2
	|ИЗ
	|	&ТаблицаПроводок КАК ТаблицаПроводок
	|;
	|";
	Если СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаХозрасчетный") Тогда
	
		Запрос.Текст = Запрос.Текст +
		"
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаХозрасчетный.СчетДт КАК СчетДт,
		|	ТаблицаХозрасчетный.СчетКт КАК СчетКт,
		|	ТаблицаХозрасчетный.СубконтоДт1 КАК СубконтоДт1,
		|	ТаблицаХозрасчетный.СубконтоДт2 КАК СубконтоДт2,
		|	ТаблицаХозрасчетный.СубконтоДт3 КАК СубконтоДт3,
		|	ТаблицаХозрасчетный.СубконтоКт1 КАК СубконтоКт1,
		|	ТаблицаХозрасчетный.СубконтоКт2 КАК СубконтоКт2,
		|	ТаблицаХозрасчетный.СубконтоКт3 КАК СубконтоКт3,
		|	ТаблицаХозрасчетный.Период КАК Период,
		|	ТаблицаХозрасчетный.Организация КАК Организация,
		|	ТаблицаХозрасчетный.Содержание КАК Содержание,
		|	ТаблицаХозрасчетный.Сумма КАК Сумма,
		|	ТаблицаХозрасчетный.ВалютаДт КАК ВалютаДт,
		|	ТаблицаХозрасчетный.ВалютаКт КАК ВалютаКт,
		|	ТаблицаХозрасчетный.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
		|	ТаблицаХозрасчетный.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
		|	ТаблицаХозрасчетный.КоличествоДт КАК КоличествоДт,
		|	ТаблицаХозрасчетный.КоличествоКт КАК КоличествоКт
		|ПОМЕСТИТЬ ВременнаяТаблица1
		|ИЗ
		|	ВременнаяТаблицаХозрасчетныйПерваяЧасть КАК ТаблицаХозрасчетный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблица1.СчетДт,
		|	ВременнаяТаблица1.СчетКт,
		|	ВременнаяТаблица1.СубконтоДт1,
		|	ВременнаяТаблица1.СубконтоДт2,
		|	ВременнаяТаблица1.СубконтоДт3,
		|	ВременнаяТаблица1.СубконтоКт1,
		|	ВременнаяТаблица1.СубконтоКт2,
		|	ВременнаяТаблица1.СубконтоКт3,
		|	ВременнаяТаблица1.Период,
		|	ВременнаяТаблица1.Организация,
		|	ВременнаяТаблица1.Содержание,
		|	ВременнаяТаблица1.Сумма,
		|	ВременнаяТаблица1.ВалютаДт,
		|	ВременнаяТаблица1.ВалютаКт,
		|	ВременнаяТаблица1.ВалютнаяСуммаДт,
		|	ВременнаяТаблица1.ВалютнаяСуммаКт,
		|	ВременнаяТаблица1.КоличествоДт,
		|	ВременнаяТаблица1.КоличествоКт
		|ИЗ
		|	ВременнаяТаблица1 КАК ВременнаяТаблица1
		|
		|ОБЪЕДИНИТЬ ВСЕ";
			
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
	"
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблица2.СчетДт,
	|	ВременнаяТаблица2.СчетКт,
	|	ВременнаяТаблица2.СубконтоДт1,
	|	ВременнаяТаблица2.СубконтоДт2,
	|	ВременнаяТаблица2.СубконтоДт3,
	|	ВременнаяТаблица2.СубконтоКт1,
	|	ВременнаяТаблица2.СубконтоКт2,
	|	ВременнаяТаблица2.СубконтоКт3,
	|	ВременнаяТаблица2.Период,
	|	ВременнаяТаблица2.Организация,
	|	ВременнаяТаблица2.Содержание,
	|	ВременнаяТаблица2.Сумма,
	|	ВременнаяТаблица2.ВалютаДт,
	|	ВременнаяТаблица2.ВалютаКт,
	|	ВременнаяТаблица2.ВалютнаяСуммаДт,
	|	ВременнаяТаблица2.ВалютнаяСуммаКт,
	|	ВременнаяТаблица2.КоличествоДт,
	|	ВременнаяТаблица2.КоличествоКт
	|ИЗ
	|	ВременнаяТаблица2 КАК ВременнаяТаблица2";
								
	Запрос.УстановитьПараметр("ТаблицаПроводок", 		ТаблицаПроводок);	
	ТаблицаОбщая = Запрос.Выполнить().Выгрузить();
				
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", ТаблицаОбщая);
		
КонецПроцедуры

// Это процедура обратная процедуре ПолучитьПроводкиСписанияСебестоимостиПоРБХ()
Процедура ПолучитьПроводкиВозвратСебестоимостиПоРБХ(ДокументСсылка, СтруктураДополнительныеСвойства, Перемещение = Ложь) Экспорт	
	
	СпособОценки = СтруктураДополнительныеСвойства.ДляПроведения.СпособОценки;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;		
	Запрос.Текст = ПолучитьТекстЗапросаДляПроведенияПоВозвратуЗапасы(СпособОценки, СтруктураДополнительныеСвойства);		
	Запрос.УстановитьПараметр("Дата", 				СтруктураДополнительныеСвойства.ДляПроведения.Дата);
	Запрос.УстановитьПараметр("Организация", 		СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("Склад", 				СтруктураДополнительныеСвойства.ДляПроведения.СкладРасход);
	Запрос.УстановитьПараметр("ДокументОснование", 	СтруктураДополнительныеСвойства.ДляПроведения.ДокументОснование);
	РезультатЗапроса = Запрос.Выполнить();			
		
	Если СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаХозрасчетный") Тогда
		ТаблицаХозрасчетный = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаХозрасчетный;	
	Иначе			
		ПустойЗапрос = Новый Запрос;	
		ПустойЗапрос.Текст =		
			"ВЫБРАТЬ
			|	НЕОПРЕДЕЛЕНО КАК СчетДт,
			|	НЕОПРЕДЕЛЕНО КАК СчетКт,
			|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
			|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
			|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
			|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
			|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
			|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
			|	НЕОПРЕДЕЛЕНО КАК Период,
			|	НЕОПРЕДЕЛЕНО КАК Организация,
			|	НЕОПРЕДЕЛЕНО КАК Содержание,
			|	НЕОПРЕДЕЛЕНО КАК Сумма,
			|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
			|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
			|	НЕОПРЕДЕЛЕНО КАК ВалютнаяСуммаДт,
			|	НЕОПРЕДЕЛЕНО КАК ВалютнаяСуммаКт,
			|	НЕОПРЕДЕЛЕНО КАК КоличествоДт,
			|	НЕОПРЕДЕЛЕНО КАК КоличествоКт
			|ГДЕ
			|	ЛОЖЬ";
		
		ПустойЗапрос.УстановитьПараметр("Дата", ДокументСсылка.Дата);
			
		РезультатПустогоЗапроса = ПустойЗапрос.Выполнить();	
		ТаблицаХозрасчетный 	= РезультатПустогоЗапроса.Выгрузить();
		
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", ТаблицаХозрасчетный);		
		
	КонецЕсли;
	
	ВыборкаНомерСтроки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНомерСтроки.Следующий() Цикл
		ВыборкаПартии = ВыборкаНомерСтроки.Выбрать();
		Требуется	 		= ВыборкаНомерСтроки.КоличествоТребуемое;
		
		Пока ВыборкаПартии.Следующий() И Требуется > 0 Цикл
			СтрокаПриход 	= ТаблицаХозрасчетный.Добавить();			
			ЗаполнитьЗначенияСвойств(СтрокаПриход, ВыборкаПартии);	
						
			Если Требуется >= ВыборкаПартии.КоличествоЗапасы Тогда
				СтрокаПриход.СчетДт 		= ВыборкаПартии.СчетУчета;				
				СтрокаПриход.СчетКт 		= ВыборкаПартии.СчетСебестоимости;
				СтрокаПриход.СубконтоДт1 	= ВыборкаПартии.Номенклатура; 
				СтрокаПриход.СубконтоДт2 	= ВыборкаПартии.Склад;
				СтрокаПриход.СубконтоДт3 	= НЕОПРЕДЕЛЕНО;
				СтрокаПриход.СубконтоКт1 	= НЕОПРЕДЕЛЕНО; 
				СтрокаПриход.СубконтоКт2 	= НЕОПРЕДЕЛЕНО;
				СтрокаПриход.СубконтоКт3 	= НЕОПРЕДЕЛЕНО;				
				СтрокаПриход.Период 		= ВыборкаПартии.Период;
				СтрокаПриход.Организация 	= ВыборкаПартии.Организация;
				СтрокаПриход.Содержание 	= "Возврат себестоимости";
				СтрокаПриход.Сумма 			= ВыборкаПартии.Сумма; 
				СтрокаПриход.ВалютаДт       = НЕОПРЕДЕЛЕНО;
				СтрокаПриход.ВалютаКт       = НЕОПРЕДЕЛЕНО;
				СтрокаПриход.ВалютнаяСуммаДт= НЕОПРЕДЕЛЕНО;
				СтрокаПриход.ВалютнаяСуммаКт= НЕОПРЕДЕЛЕНО;
				СтрокаПриход.КоличествоДт   = ВыборкаПартии.КоличествоЗапасы;
				СтрокаПриход.КоличествоКт   = ВыборкаПартии.КоличествоЗапасы;
				
				Требуется 					= Требуется - ВыборкаПартии.КоличествоЗапасы;				
			Иначе
				СтрокаПриход.СчетДт 		= ВыборкаПартии.СчетУчета;				
				СтрокаПриход.СчетКт 		= ВыборкаПартии.СчетСебестоимости;
				СтрокаПриход.СубконтоДт1 	= ВыборкаПартии.Номенклатура; 
				СтрокаПриход.СубконтоДт2 	= ВыборкаПартии.Склад;
				СтрокаПриход.СубконтоДт3 	= НЕОПРЕДЕЛЕНО;
				СтрокаПриход.СубконтоКт1 	= НЕОПРЕДЕЛЕНО; 
				СтрокаПриход.СубконтоКт2 	= НЕОПРЕДЕЛЕНО;
				СтрокаПриход.СубконтоКт3 	= НЕОПРЕДЕЛЕНО;				
				СтрокаПриход.Период 		= ВыборкаПартии.Период;
				СтрокаПриход.Организация 	= ВыборкаПартии.Организация;
				СтрокаПриход.Содержание 	= "Возврат себестоимости";
				СтрокаПриход.Сумма 			= ВыборкаПартии.Цена * Требуется;
				СтрокаПриход.ВалютаДт       = НЕОПРЕДЕЛЕНО;
				СтрокаПриход.ВалютаКт       = НЕОПРЕДЕЛЕНО;
				СтрокаПриход.ВалютнаяСуммаДт= НЕОПРЕДЕЛЕНО;
				СтрокаПриход.ВалютнаяСуммаКт= НЕОПРЕДЕЛЕНО;
				СтрокаПриход.КоличествоДт   = Требуется;
				СтрокаПриход.КоличествоКт   = Требуется;
				
				Требуется 					= 0;				
			КонецЕсли;
						
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаХозрасчетный.Свернуть("Организация, Период, Содержание, СчетДт, СчетКт, СубконтоДт1, СубконтоДт2, СубконтоДт3, СубконтоКт1, СубконтоКт2, СубконтоКт3, ВалютаДт, ВалютаКт", 
									"Сумма, ВалютнаяСуммаДт, ВалютнаяСуммаКт, КоличествоДт, КоличествоКт");
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаХозрасчетный", ТаблицаХозрасчетный);
		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫДАЧИ СООБЩЕНИЙ ОБ ОШИБКАХ ПРОВЕДЕНИЯ.

// Процедура сообщает об ошибках проведения по регистру МБПСклад.
//
Процедура СообщитьОбОшибкахПроведенияПоРегиструМБПСклад(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
	ШаблонЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Не хватает остатка по учету МБП склад: %СкладПредставление%'");
	
	ШаблонСообщения = НСтр("ru = 'Номенклатура: %Номенклатура%,
		|остаток %КоличествоОстаток% %ЕдиницаИзмерения%,
		|недостаточно %Количество% %ЕдиницаИзмерения%'");
	
	ВыводитьВЗаголовокРасшифровку = Истина;
	Пока ВыборкаЗаписей.Следующий() Цикл
		
		Если ВыводитьВЗаголовокРасшифровку Тогда
			СкладПредставление = ВыборкаЗаписей.СкладПредставление;
			ТекстЗаголовкаСообщения = СтрЗаменить(ШаблонЗаголовкаСообщения, "%СкладПредставление%", СкладПредставление);
			СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
			ВыводитьВЗаголовокРасшифровку = Ложь;
		КонецЕсли;
		
		СтрПредставление = СокрЛП(ВыборкаЗаписей.НоменклатураПредставление);
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Номенклатура%", СтрПредставление);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОстаток%", Строка(ВыборкаЗаписей.ОстатокЗапасы));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-ВыборкаЗаписей.КоличествоОстатокЗапасы));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%", ВыборкаЗаписей.ЕдиницаИзмеренияПредставление);
		
		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
	КонецЦикла;
	
КонецПроцедуры

// Процедура сообщает об ошибках проведения по регистру МБПЭксплуатация.
//
Процедура СообщитьОбОшибкахПроведенияПоРегиструМБПЭксплуатация(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
	ШаблонЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Не хватает остатка по учету МБП в эксплуатации МОЛ: %МОЛПредставление%'");
	
	ШаблонСообщения = НСтр("ru = 'Номенклатура: %Номенклатура%, Дата выдачи: %ДатаВыдачи%,
		|остаток %КоличествоОстаток% %ЕдиницаИзмерения%,
		|недостаточно %Количество% %ЕдиницаИзмерения%'");
	
	ВыводитьВЗаголовокРасшифровку = Истина;
	Пока ВыборкаЗаписей.Следующий() Цикл
		
		Если ВыводитьВЗаголовокРасшифровку Тогда
			МОЛПредставление = ВыборкаЗаписей.МОЛПредставление;
			ТекстЗаголовкаСообщения = СтрЗаменить(ШаблонЗаголовкаСообщения, "%МОЛПредставление%", МОЛПредставление);
			СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
			ВыводитьВЗаголовокРасшифровку = Ложь;
		КонецЕсли;
		
		СтрПредставление = СокрЛП(ВыборкаЗаписей.НоменклатураПредставление);
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Номенклатура%", СтрПредставление);
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%ДатаВыдачи%", ВыборкаЗаписей.ДатаВыдачиПредставление);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОстаток%", Строка(ВыборкаЗаписей.ОстатокЗапасы));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-ВыборкаЗаписей.КоличествоОстатокЗапасы));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%", ВыборкаЗаписей.ЕдиницаИзмеренияПредставление);
		
		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
	КонецЦикла;
	
КонецПроцедуры

// Процедура сообщает об ошибках проведения по регистру Запасы.
//
Процедура СообщитьОбОшибкахПроведенияПоРегиструЗапасы(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
	ШаблонЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Не хватает остатка по учету запасов склад: %СкладПредставление%'");
	
	ШаблонСообщения = НСтр("ru = 'Номенклатура: %Номенклатура%,
		|остаток %КоличествоОстаток% %ЕдиницаИзмерения%,
		|недостаточно %Количество% %ЕдиницаИзмерения%'");
	
	ВыводитьВЗаголовокРасшифровку = Истина;
	Пока ВыборкаЗаписей.Следующий() Цикл
		
		Если ВыводитьВЗаголовокРасшифровку Тогда
			СкладПредставление = ВыборкаЗаписей.СкладПредставление;
			ТекстЗаголовкаСообщения = СтрЗаменить(ШаблонЗаголовкаСообщения, "%СкладПредставление%", СкладПредставление);
			СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
			ВыводитьВЗаголовокРасшифровку = Ложь;
		КонецЕсли;
		
		СтрПредставление = СокрЛП(ВыборкаЗаписей.НоменклатураПредставление);
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Номенклатура%", СтрПредставление);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОстаток%", Строка(ВыборкаЗаписей.ОстатокЗапасы));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-ВыборкаЗаписей.КоличествоОстатокЗапасы));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%", ВыборкаЗаписей.ЕдиницаИзмеренияПредставление);
		
		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
	КонецЦикла;
	
КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструЗапасы()

// Процедура сообщает об ошибках проведения по РН ОстаткиСпецодежды.
//
Процедура СообщитьОбОшибкахПроведенияПоРегиструОстаткиСпецодежды(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
	ШаблонЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Не хватает остатка по учету спецодежды МОЛа: %ФизЛицоПредставление%'");
	
	ШаблонСообщения = НСтр("ru = 'Номенклатура: %Номенклатура%,
		|остаток %КоличествоОстаток% %ЕдиницаИзмерения%,
		|недостаточно %Количество% %ЕдиницаИзмерения%'");
	
	ВыводитьВЗаголовокРасшифровку = Истина;

	Пока ВыборкаЗаписей.Следующий() Цикл
		
		Если ВыводитьВЗаголовокРасшифровку Тогда
			ФизЛицоПредставление = ВыборкаЗаписей.ФизЛицоПредставление;
			ТекстЗаголовкаСообщения = СтрЗаменить(ШаблонЗаголовкаСообщения, "%ФизЛицоПредставление%", ФизЛицоПредставление);
			СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
			ВыводитьВЗаголовокРасшифровку = Ложь;
		КонецЕсли;
		
		СтрПредставление = СокрЛП(ВыборкаЗаписей.НоменклатураПредставление);
		СтрПредставление = СтрПредставление + " / " + СокрЛП(ВыборкаЗаписей.Цена);
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Номенклатура%", СтрПредставление);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОстаток%", Строка(ВыборкаЗаписей.ОстатокСпецодежды));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-ВыборкаЗаписей.КоличествоОстатокСпецодежды));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%", ВыборкаЗаписей.ЕдиницаИзмеренияПредставление);
		
		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
	КонецЦикла;
	
КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструЗапасы()

// Процедура устанавливает субконто на счете. Если такое субконто на счете
// отсутствует, то ничего не делается.
//
// Параметры:
//		Счет - Счет, к которому относится субконто
//      Субконто - набор субконто
//		Номер или имя устанавливаемого субконто
//      Значение субконто - значение устанавливаемого субконто
//
Процедура УстановитьСубконто(Счет, Субконто, ИмяСубконто, ЗначениеСубконто) Экспорт

	Если НЕ ЗначениеЗаполнено(ИмяСубконто) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Если ТипЗнч(ИмяСубконто) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные") Тогда
		
		ВидСубконто = ИмяСубконто;
		
		Если СвойстваСчета.ВидСубконто1 <> ВидСубконто
			И СвойстваСчета.ВидСубконто2 <> ВидСубконто
			И СвойстваСчета.ВидСубконто3 <> ВидСубконто Тогда
			
			Возврат;
			
		КонецЕсли;

	ИначеЕсли ТипЗнч(ИмяСубконто) = Тип("Число") Тогда

		Если ИмяСубконто > СвойстваСчета.КоличествоСубконто Тогда
			Возврат;
		КонецЕсли;

		ВидСубконто = СвойстваСчета["ВидСубконто" + ИмяСубконто];

	Иначе

		ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ИмяСубконто];

		Если СвойстваСчета.ВидСубконто1 <> ВидСубконто
			И СвойстваСчета.ВидСубконто2 <> ВидСубконто
			И СвойстваСчета.ВидСубконто3 <> ВидСубконто Тогда
			
			Возврат;
			
		КонецЕсли;

	КонецЕсли;
		
	Если ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		
		Субконто.Вставить(ВидСубконто, ЗначениеСубконто);
		
	КонецЕсли;

КонецПроцедуры // УстановитьСубконто()  

///////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ КОНТРОЛЯ ПРОВЕДЕНИЯ

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтрольЗапасы(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если Не ВыполнитьКонтрольОстатков() Тогда
		Возврат;
	КонецЕсли;

	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временная таблица "ДвиженияЗапасыИзменение"
	// содержит записи, необходимо выполнить контроль остатоков товаров.
	Если СтруктураВременныеТаблицы.Свойство("ДвиженияЗапасыИзменение") и СтруктураВременныеТаблицы.ДвиженияЗапасыИзменение Тогда

		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ДвиженияЗапасыИзменение.НомерСтроки КАК НомерСтроки,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Организация) КАК ОрганизацияПредставление,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Склад) КАК СкладПредставление,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.СчетУчета) КАК СчетУчетаПредставление,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Номенклатура) КАК НоменклатураПредставление,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Партия) КАК ПартияПредставление,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
			|	ЕСТЬNULL(ДвиженияЗапасыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
			|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
			|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы
			|ИЗ
			|	ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
			|				&МоментКонтроля,
			|				(Организация, Склад, СчетУчета, Номенклатура, Партия) В
			|					(ВЫБРАТЬ
			|						ДвиженияЗапасыИзменение.Организация КАК Организация,
			|						ДвиженияЗапасыИзменение.Склад КАК Склад,
			|						ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчета,
			|						ДвиженияЗапасыИзменение.Номенклатура КАК Номенклатура,
			|						ДвиженияЗапасыИзменение.Партия КАК Партия
			|					ИЗ
			|						ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение)) КАК ЗапасыОстатки
			|		ПО ДвиженияЗапасыИзменение.Организация = ЗапасыОстатки.Организация
			|			И ДвиженияЗапасыИзменение.Склад = ЗапасыОстатки.Склад
			|			И ДвиженияЗапасыИзменение.СчетУчета = ЗапасыОстатки.СчетУчета
			|			И ДвиженияЗапасыИзменение.Номенклатура = ЗапасыОстатки.Номенклатура
			|			И ДвиженияЗапасыИзменение.Партия = ЗапасыОстатки.Партия
			|ГДЕ
			|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) < 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки");
	
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		// Отрицательный остаток учета запасов.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			СообщитьОбОшибкахПроведенияПоРегиструЗапасы(ДокументОбъект, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКонтроль()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтрольМБПСклад(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если Не ВыполнитьКонтрольОстатков() Тогда
		Возврат;
	КонецЕсли;

	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временная таблица "ДвиженияМБПСкладИзменение"
	// содержит записи, необходимо выполнить контроль остатоков товаров.
	Если СтруктураВременныеТаблицы.ДвиженияМБПСкладИзменение Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияМБПСкладИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияМБПСкладИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияМБПСкладИзменение.Склад) КАК СкладПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияМБПСкладИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияМБПСкладИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(МБПСкладОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияМБПСкладИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(МБПСкладОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
		|	ЕСТЬNULL(МБПСкладОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
		|	ЕСТЬNULL(МБПСкладОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияМБПСкладИзменение.ИнвНомер),
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияМБПСкладИзменение.Статус)
		|ИЗ
		|	ДвиженияМБПСкладИзменение КАК ДвиженияМБПСкладИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.МБПСклад.Остатки(, ) КАК МБПСкладОстатки
		|		ПО ДвиженияМБПСкладИзменение.Организация = МБПСкладОстатки.Организация
		|			И ДвиженияМБПСкладИзменение.Склад = МБПСкладОстатки.Склад
		|			И ДвиженияМБПСкладИзменение.Номенклатура = МБПСкладОстатки.Номенклатура
		|			И ДвиженияМБПСкладИзменение.Партия = МБПСкладОстатки.Партия
		|			И ДвиженияМБПСкладИзменение.ИнвНомер = МБПСкладОстатки.ИнвНомер
		|			И ДвиженияМБПСкладИзменение.Статус = МБПСкладОстатки.Статус
		|ГДЕ
		|	ЕСТЬNULL(МБПСкладОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		// Отрицательный остаток учета запасов.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			СообщитьОбОшибкахПроведенияПоРегиструМБПСклад(ДокументОбъект, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКонтроль()


// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтрольМБПЭксплуатация(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если Не ВыполнитьКонтрольОстатков() Тогда
		Возврат;
	КонецЕсли;

	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временная таблица "ДвиженияМБПЭксплуатацияИзменение"
	// содержит записи, необходимо выполнить контроль остатоков товаров.
	Если СтруктураВременныеТаблицы.ДвиженияМБПЭксплуатацияИзменение Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияМБПЭксплуатацияИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияМБПЭксплуатацияИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияМБПЭксплуатацияИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияМБПЭксплуатацияИзменение.МОЛ),
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияМБПЭксплуатацияИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(МБПЭксплуатацияОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияМБПЭксплуатацияИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(МБПЭксплуатацияОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
		|	ЕСТЬNULL(МБПЭксплуатацияОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
		|	ЕСТЬNULL(МБПЭксплуатацияОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияМБПЭксплуатацияИзменение.ИнвНомер),
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияМБПЭксплуатацияИзменение.ДатаВыдачи)
		|ИЗ
		|	ДвиженияМБПЭксплуатацияИзменение КАК ДвиженияМБПЭксплуатацияИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.МБПЭксплуатация.Остатки(, ) КАК МБПЭксплуатацияОстатки
		|		ПО ДвиженияМБПЭксплуатацияИзменение.Организация = МБПЭксплуатацияОстатки.Организация
		|			И ДвиженияМБПЭксплуатацияИзменение.Номенклатура = МБПЭксплуатацияОстатки.Номенклатура
		|			И ДвиженияМБПЭксплуатацияИзменение.Партия = МБПЭксплуатацияОстатки.Партия
		|			И ДвиженияМБПЭксплуатацияИзменение.ИнвНомер = МБПЭксплуатацияОстатки.ИнвНомер
		|			И ДвиженияМБПЭксплуатацияИзменение.ДатаВыдачи = МБПЭксплуатацияОстатки.ДатаВыдачи
		|ГДЕ
		|	ЕСТЬNULL(МБПЭксплуатацияОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		// Отрицательный остаток учета запасов.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			СообщитьОбОшибкахПроведенияПоРегиструМБПЭксплуатация(ДокументОбъект, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКонтроль()

#Область ПРОЦЕДУРЫ_ФОРМИРОВАНИЯ_ДВИЖЕНИЙ_РЕГИСТРОВ

////////////////////////////////////////////////////////////////////////////////
// Персонал

// Выполняет движения регистра сведений Сотрудники.
//
Процедура ОтразитьСотрудники(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСотрудники;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.Сотрудники;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений СотрудникиПоТрудовымСоглашениям.
//
Процедура ОтразитьСотрудникиПоТрудовымСоглашениям(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСотрудникиПоТрудовымСоглашениям;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СотрудникиПоТрудовымСоглашениям;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений ПлановыеНачисленияНачало.
//
Процедура ОтразитьПлановыеНачисленияНачало(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПлановыеНачисленияНачало;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ПлановыеНачисленияНачало;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений ПлановыеНачисленияОкончание.
//
Процедура ОтразитьПлановыеНачисленияОкончание(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПлановыеНачисленияОкончание;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ПлановыеНачисленияОкончание;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений ПлановыеНачисления.
//
Процедура ОтразитьПрекращениеПлановыхНачислений(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПрекращениеПлановыхНачислений;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ПрекращениеПлановыхНачислений;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений ПлановыеУдержания.
//
Процедура ОтразитьПлановыеУдержания(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПлановыеУдержания;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ПлановыеУдержания;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений СтатусыСотрудников.
//
Процедура ОтразитьСтатусыСотрудников(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСтатусыСотрудников;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СтатусыСотрудников;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений СтажиСотрудников.
//
Процедура ОтразитьСтажиСотрудников(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСтажиСотрудников;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СтажиСотрудников;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра накопления РабочееВремяСотрудников.
//
Процедура ОтразитьРабочееВремяСотрудников(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРабочееВремяСотрудников;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.РабочееВремяСотрудников;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений ГНСПоПодразделениям.
//
Процедура ОтразитьГНСПоПодразделениям(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаГНСПоПодразделениям;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ГНСПоПодразделениям;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений Профвзносы.
//
Процедура ОтразитьПрофвзносы(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПрофвзносы;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.Профвзносы;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

//Выполняет движения регистра сведений "ТарифыКомандировочных"
Процедура ОтразитьТарифыКомандировочных(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТарифыКомандировочных;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ТарифыКомандировочных;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заработная плата

// Выполняет движения регистра расчета Начисления.
//
Процедура ОтразитьНачисления(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНачисления;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.Начисления;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра расчета Удержания.
//
Процедура ОтразитьУдержания(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУдержания;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.Удержания;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра накопления ВыплаченнаяЗарплата.
//
Процедура ОтразитьВыплаченнаяЗарплата(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВыплаченнаяЗарплата;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ВыплаченнаяЗарплата;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра накопления РасчетыСПерсоналом.
//
Процедура ОтразитьРасчетыСПерсоналом(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПерсоналом;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.РасчетыСПерсоналом;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра накопления ПодоходныйНалог
Процедура ОтразитьПодоходныйНалог(ДополнительныеСвойства, Движения, Отказ) Экспорт 
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПодоходныйНалог;
	
	Если Отказ
		ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ПодоходныйНалог;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
	
КонецПроцедуры

// Выполняет движения регистра накопления СоциальныйФонд
Процедура ОтразитьСоциальныйФонд(ДополнительныеСвойства, Движения, Отказ) Экспорт 
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСоциальныйФонд;
	
	Если Отказ
		ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СоциальныйФонд;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
	
КонецПроцедуры

// Выполняет движения регистра накопления НалогиПоЗаработнойПлате
Процедура ОтразитьНалогиПоЗаработнойПлате(ДополнительныеСвойства, Движения, Отказ) Экспорт 
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНалогиПоЗаработнойПлате;
	
	Если Отказ
		ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.НалогиПоЗаработнойПлате;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
	
КонецПроцедуры

// Выполняет движения регистра расчета Начисления.
//
Процедура ОтразитьВзаиморасчетыССотрудниками(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВзаиморасчетыССотрудниками;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ВзаиморасчетыССотрудниками;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Основные Средства

// Выполняет движения по регистру бухгалтерии "Хозрасчетный"
//***КЭ - Пак А.Г. 12.11.2014 14:54:41 <<
Процедура ОтразитьХозрасчетный(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаХозрасчетный = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаХозрасчетный;
	
	Если Отказ
	 ИЛИ ТаблицаХозрасчетный.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоДокументЗакрытиеМесяца = ?(ТипЗнч(ДополнительныеСвойства.ДляПроведения.Ссылка) = Тип("ДокументСсылка.ЗакрытиеМесяца"), Истина, Ложь);

	ДвиженияХозрасчетный = Движения.Хозрасчетный;
	// ТаблицаБюджетный содржит всегда поля:
	// Период - Дата проводки;	
	// Организация - СправочникСсылка.Организации;
	// СчетДт - тип ПланСчетовБюджетныйСсылка;
	// СчетКт - тип ПланСчетовБюджетныйСсылка;
	// Субконто1 - необходимое субконто;
	// Субконто2 - -\\-;
	// Субконто3 - -\\-;
	// КорСубконто1 - необходимое субконто;
	// КорСубконто2 - -\\-;
	// КорСубконто3 - -\\-;
	
	НомерСтроки = 0;
	
	ЕстьКолонкаВалютаДт = НЕ ТаблицаХозрасчетный.Колонки.Найти("ВалютаДт") = Неопределено;
	ЕстьКолонкаВалютаКт = НЕ ТаблицаХозрасчетный.Колонки.Найти("ВалютаКт") = Неопределено;
	ЕстьКоличествоДт = НЕ ТаблицаХозрасчетный.Колонки.Найти("КоличествоДт") = Неопределено;
	ЕстьКоличествоКт = НЕ ТаблицаХозрасчетный.Колонки.Найти("КоличествоКт") = Неопределено;
	
	Для каждого СтрокаТаблицы Из ТаблицаХозрасчетный Цикл
												
		НомерСтроки = НомерСтроки + 1;

		Проводка = ДвиженияХозрасчетный.Добавить();

		Проводка.Период = СтрокаТаблицы.Период; 		
		Проводка.Организация = СтрокаТаблицы.Организация;
		Проводка.Содержание = СтрокаТаблицы.Содержание;
		Проводка.Сумма = СтрокаТаблицы.Сумма;
		
		Проводка.СчетДт = СтрокаТаблицы.СчетДт;
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Проводка.СчетКт = СтрокаТаблицы.СчетКт;
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		Если СвойстваСчетаДт.Валютный И ЕстьКолонкаВалютаДт Тогда
			Проводка.ВалютаДт        	= СтрокаТаблицы.ВалютаДт;
			Проводка.ВалютнаяСуммаДт 	= СтрокаТаблицы.ВалютнаяСуммаДт;
		КонецЕсли;			
	
		Если СвойстваСчетаКт.Валютный И ЕстьКолонкаВалютаКт Тогда
			Проводка.ВалютаКт       	= СтрокаТаблицы.ВалютаКт;
			Проводка.ВалютнаяСуммаКт 	= СтрокаТаблицы.ВалютнаяСуммаКт;				
		КонецЕсли;		

		// Контроль движения по валютным счетам
		Если СвойстваСчетаДт.Валютный Тогда 
			Если НЕ ЗначениеЗаполнено(Проводка.ВалютаДт) Тогда 
				ТекстСообщения = СтрШаблон(НСтр("ru = 'У счета Дт с признаком ""Валютный"" не заполнена валюта: Номер записи %1; Содержание: %2.'"), 
					НомерСтроки, СтрокаТаблицы.Содержание);
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				ВызватьИсключение ТекстСообщения;
			ИначеЕсли Проводка.ВалютнаяСуммаДт = 0
				И НЕ ЭтоДокументЗакрытиеМесяца Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'У счета Дт с признаком ""Валютный"" не заполнена валютная сумма: Номер записи %1; Содержание: %2.'"), 
					НомерСтроки, СтрокаТаблицы.Содержание);
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	
		КонецЕсли;	
			
		Если СвойстваСчетаКт.Валютный Тогда 
			Если НЕ ЗначениеЗаполнено(Проводка.ВалютаКт) Тогда 
				ТекстСообщения = СтрШаблон(НСтр("ru = 'У счета Кт с признаком ""Валютный"" не заполнена валюта: Номер записи %1; Содержание: %2.'"), 
					НомерСтроки, СтрокаТаблицы.Содержание);
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				ВызватьИсключение ТекстСообщения;
			ИначеЕсли Проводка.ВалютнаяСуммаКт = 0 
				И Не ЭтоДокументЗакрытиеМесяца Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'У счета Кт с признаком ""Валютный"" не заполнена валютная сумма: Номер записи %1; Содержание: %2.'"), 
					НомерСтроки, СтрокаТаблицы.Содержание);
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	
		КонецЕсли;	
			
		// Субконто1
		Если НЕ СтрокаТаблицы.СубконтоДт1 = Неопределено Тогда 
			Если СвойстваСчетаДт.ВидСубконто1ТипЗначения <> Неопределено
				И СвойстваСчетаДт.ВидСубконто1ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоДт1)) Тогда 
				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчетаДт.ВидСубконто1, СтрокаТаблицы.СубконтоДт1);
			ИначеЕсли СвойстваСчетаДт.ВидСубконто2ТипЗначения <> Неопределено
				И СвойстваСчетаДт.ВидСубконто2ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоДт1)) Тогда 
				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчетаДт.ВидСубконто2, СтрокаТаблицы.СубконтоДт1);
			ИначеЕсли СвойстваСчетаДт.ВидСубконто3ТипЗначения <> Неопределено
				И СвойстваСчетаДт.ВидСубконто3ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоДт1)) Тогда 
				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчетаДт.ВидСубконто3, СтрокаТаблицы.СубконтоДт1);
			КонецЕсли;
		КонецЕсли;	
		
		// Субконто2
		Если НЕ СтрокаТаблицы.СубконтоДт2 = Неопределено Тогда 
			Если СвойстваСчетаДт.ВидСубконто1ТипЗначения <> Неопределено
				И СвойстваСчетаДт.ВидСубконто1ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоДт2)) Тогда 
				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчетаДт.ВидСубконто1, СтрокаТаблицы.СубконтоДт2);
			ИначеЕсли СвойстваСчетаДт.ВидСубконто2ТипЗначения <> Неопределено
				И СвойстваСчетаДт.ВидСубконто2ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоДт2)) Тогда 
				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчетаДт.ВидСубконто2, СтрокаТаблицы.СубконтоДт2);
			ИначеЕсли СвойстваСчетаДт.ВидСубконто3ТипЗначения <> Неопределено
				И СвойстваСчетаДт.ВидСубконто3ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоДт2)) Тогда 
				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчетаДт.ВидСубконто3, СтрокаТаблицы.СубконтоДт2);
			КонецЕсли;
		КонецЕсли;	
		
		// Субконто3
		Если НЕ СтрокаТаблицы.СубконтоДт3 = Неопределено Тогда 
			Если СвойстваСчетаДт.ВидСубконто1ТипЗначения <> Неопределено
				И СвойстваСчетаДт.ВидСубконто1ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоДт3)) Тогда 
				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчетаДт.ВидСубконто1, СтрокаТаблицы.СубконтоДт3);
			ИначеЕсли СвойстваСчетаДт.ВидСубконто2ТипЗначения <> Неопределено
				И СвойстваСчетаДт.ВидСубконто2ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоДт3)) Тогда 
				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчетаДт.ВидСубконто2, СтрокаТаблицы.СубконтоДт3);
			ИначеЕсли СвойстваСчетаДт.ВидСубконто3ТипЗначения <> Неопределено
				И СвойстваСчетаДт.ВидСубконто3ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоДт3)) Тогда 
				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчетаДт.ВидСубконто3, СтрокаТаблицы.СубконтоДт3);
			КонецЕсли;	
		КонецЕсли;	
		
		Если СвойстваСчетаДт.Количественный И ЕстьКоличествоДт Тогда
	    	Проводка.КоличествоДт = СтрокаТаблицы.КоличествоДт;
	    КонецЕсли;
		
		// КорСубконто1
		Если НЕ СтрокаТаблицы.СубконтоКт1 = Неопределено Тогда 
			Если СвойстваСчетаКт.ВидСубконто1ТипЗначения <> Неопределено
				И СвойстваСчетаКт.ВидСубконто1ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоКт1)) Тогда 
				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СвойстваСчетаКт.ВидСубконто1, СтрокаТаблицы.СубконтоКт1);
			ИначеЕсли СвойстваСчетаКт.ВидСубконто2ТипЗначения <> Неопределено
				И СвойстваСчетаКт.ВидСубконто2ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоКт1)) Тогда 
				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СвойстваСчетаКт.ВидСубконто2, СтрокаТаблицы.СубконтоКт1);
			ИначеЕсли СвойстваСчетаКт.ВидСубконто3ТипЗначения <> Неопределено
				И СвойстваСчетаКт.ВидСубконто3ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоКт1)) Тогда 
				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СвойстваСчетаКт.ВидСубконто3, СтрокаТаблицы.СубконтоКт1);
			КонецЕсли;
		КонецЕсли;	
		
		// КорСубконто2
		Если НЕ СтрокаТаблицы.СубконтоКт2 = Неопределено Тогда 
			Если СвойстваСчетаКт.ВидСубконто1ТипЗначения <> Неопределено
				И СвойстваСчетаКт.ВидСубконто1ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоКт2)) Тогда 
				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СвойстваСчетаКт.ВидСубконто1, СтрокаТаблицы.СубконтоКт2);
			ИначеЕсли СвойстваСчетаКт.ВидСубконто2ТипЗначения <> Неопределено
				И СвойстваСчетаКт.ВидСубконто2ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоКт2)) Тогда 
				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СвойстваСчетаКт.ВидСубконто2, СтрокаТаблицы.СубконтоКт2);
			ИначеЕсли СвойстваСчетаКт.ВидСубконто3ТипЗначения <> Неопределено
				И СвойстваСчетаКт.ВидСубконто3ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоКт2)) Тогда 
				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СвойстваСчетаКт.ВидСубконто3, СтрокаТаблицы.СубконтоКт2);
			КонецЕсли;
		КонецЕсли;	
		
		// КорСубконто3
		Если НЕ СтрокаТаблицы.СубконтоКт3 = Неопределено Тогда 
			Если СвойстваСчетаКт.ВидСубконто1ТипЗначения <> Неопределено
				И СвойстваСчетаКт.ВидСубконто1ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоКт3)) Тогда 
				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СвойстваСчетаКт.ВидСубконто1, СтрокаТаблицы.СубконтоКт3);
			ИначеЕсли СвойстваСчетаКт.ВидСубконто2ТипЗначения <> Неопределено
				И СвойстваСчетаКт.ВидСубконто2ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоКт3)) Тогда 
				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СвойстваСчетаКт.ВидСубконто2, СтрокаТаблицы.СубконтоКт3);
			ИначеЕсли СвойстваСчетаКт.ВидСубконто3ТипЗначения <> Неопределено
				И СвойстваСчетаКт.ВидСубконто3ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.СубконтоКт3)) Тогда 
				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СвойстваСчетаКт.ВидСубконто3, СтрокаТаблицы.СубконтоКт3);
			КонецЕсли;
		КонецЕсли;	
		
		Если СвойстваСчетаКт.Количественный И ЕстьКоличествоКт Тогда
	    	Проводка.КоличествоКт = СтрокаТаблицы.КоличествоКт;
	    КонецЕсли;
	КонецЦикла;
	
	ДвиженияХозрасчетный.Записывать = Истина;
КонецПроцедуры

// Выполняет движения регистра сведений "ПараметрыУчетаОС"
Процедура ОтразитьПараметрыУчетаОС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПараметрыУчетаОС;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ПараметрыУчетаОС;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений "СостоянияОС"
Процедура ОтразитьСостоянияОС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСостоянияОС;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СостоянияОС;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений "МестонахождениеОСБухгалтерскийУчет"
Процедура ОтразитьМестонахождениеОС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаМестонахождениеОС;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.МестонахождениеОС;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры 

// Выполняет движения регистра сведений "СобытияОС"
Процедура ОтразитьСобытияОС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСобытияОС;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СобытияОС;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры  

// Выполняет движения регистра сведений "ОтразитьСоставОС"
Процедура ОтразитьСоставОС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСоставОС;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СоставОС;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры  

// Выполняет движения регистра сведений "СведенияОбИмуществе"
Процедура ОтразитьСведенияОбИмуществе(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСведенияОбИмуществе;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СведенияОбИмуществе;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры  

// Выполняет движения регистра сведений "СведенияОТранспорте"
Процедура ОтразитьСведенияОТранспорте(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСведенияОТранспорте;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СведенияОТранспорте;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры  

// Выполняет движения регистра сведений "СтавкиНалогаНаТранспорт"
Процедура ОтразитьСтавкиНалогаНаТранспорт(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСтавкиНалогаНаТранспорт;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СтавкиНалогаНаТранспорт;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры 

// Выполняет движения регистра сведений "ОценочнаяСтоимостьПоВидамМатериалов"
Процедура ОтразитьОценочнаяСтоимостьПоВидамМатериалов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОценочнаяСтоимостьПоВидамМатериалов;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ОценочнаяСтоимостьПоВидамМатериалов;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры 

//Выполняет движения регистра сведений "НалоговаяАмортизация"
Процедура ОтразитьНалоговаяАмортизация(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНалоговаяАмортизация;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.НалоговаяАмортизация;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры 

//Выполняет движения регистра сведений "НалоговыеДекларации"
Процедура ОтразитьНалоговыеДекларации(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНалоговыеДекларации;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.НалоговыеДекларации;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры 

//Выполняет движения регистра накопления "ДвиженияДенежныхСредств"
Процедура ОтразитьДДС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДДС;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ДвиженияДенежныхСредств;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры 

// Выполняет движения регистра накопления "РезервПоПереоценкеОС" 
Процедура ОтразитьРезервПоПереоценкеОС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРезервПоПереоценкеОС;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.РезервПоПереоценкеОС;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

//Выполняет движения регистра накопления "ДвижениеОСНУ"
Процедура ОтразитьДвижениеОСНУ(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДвижениеОСНУ;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ДвижениеОСНУ;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры 

// Выполняет движения регистра сведений "СчетаУчетаРезерваОС"
Процедура ОтразитьСчетаУчетаРезерваОС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСчетаУчетаРезерваОС;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СчетаУчетаРезерваОС;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра накопления "ЗемельныйНалог"
Процедура ОтразитьЗемельныйНалог(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗемельныйНалог;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ЗемельныйНалог;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений "СведенияПоНалогуНаимущество"
Процедура ОтразитьСведенияПоНалогуНаимущество(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСведенияПоНалогуНаимущество;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СведенияПоНалогуНаимущество;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////
// Запасы

// Выполняет движения по РН "Запасы"
//
Процедура ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.Запасы;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	
	ДвиженияПоРегистру.Записывать = Истина;
	
КонецПроцедуры

// Выполняет движения регистра сведений ЦеныНоменклатуры.
//
Процедура ОтразитьЦеныНоменклатуры(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЦеныНоменклатуры;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ЦеныНоменклатуры;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения по РН "Реализация"
//
Процедура ОтразитьРеализация(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеализация;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.Реализация;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	
	ДвиженияПоРегистру.Записывать = Истина;
	
КонецПроцедуры

// Выполняет движения по РН "БланкиСФ"
//
Процедура ОтразитьБланкиСФ(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаБланкиСФ;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.БланкиСФ;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	
	ДвиженияПоРегистру.Записывать = Истина;
	
КонецПроцедуры

// Выполняет движения регистра сведений ПоступленияИтоги.
//
Процедура ОтразитьПоступленияИтоги(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПоступленияИтоги;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ПоступленияИтоги;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

// Выполняет движения регистра сведений ПоступленияИтоги.
//
Процедура ОтразитьРеализацияИтоги(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеализацияИтоги;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.РеализацияИтоги;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// МБП

// 
//
Процедура ОтразитьМБПСклад(ДополнительныеСвойства, Движения, Отказ) Экспорт 

	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаМБПСклад;
	
	Если Отказ
		ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.МБПСклад;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	
	

КонецПроцедуры

// 
//
Процедура ОтразитьМБПЭксплуатация(ДополнительныеСвойства, Движения, Отказ) Экспорт 

	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаМБПЭксплуатация;
	
	Если Отказ
		ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.МБПЭксплуатация;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	
	

КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////
// Основные средства

//Получает структуру с настройками по ШЭЧ
Функция РасчетСтрокойДляОтчетаСКД(Дата, Сумма) Экспорт
	
	СтрокаВозврата = "" + Формат(Сумма, "ЧДЦ=2") + "*(" + (12 - Месяц(Дата) - ?(День(Дата) > 15, 1, 0)) + " + 0.5)/12";
	Возврат СтрокаВозврата;	
	
КонецФункции	

Функция ПолучитьШифрАУДляОтчетаСКД(Субконто) Экспорт
	Если НЕ ЗначениеЗаполнено(Субконто) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ТипЗнч(Субконто) = ТИП("СправочникСсылка.Контрагенты") 
		ИЛИ ТипЗнч(Субконто) = ТИП("СправочникСсылка.ФизическиеЛица") Тогда
		
		Возврат Прав(Субконто.Код, 4);	
		
	ИначеЕсли ТипЗнч(Субконто) = ТИП("СправочникСсылка.БанковскиеСчета") Тогда
		Возврат Прав(Субконто.НомерСчета, 4);
		
	КонецЕсли;	

КонецФункции // ПолучитьШифрАУДляОтчетаСКД()

Процедура ОтразитьИсторияУчетаМБП(ДополнительныеСвойства, Движения, Отказ) Экспорт 

	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаИсторияУчетаМБП;
	
	Если Отказ
		ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ИсторияУчетаМБП;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	
	

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// НДС
Процедура ОтразитьНДСНаИмпорт(ДополнительныеСвойства, Движения, Отказ) Экспорт
	  ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНДСНаИмпорт;
	
	Если Отказ
		ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.НДСНаИмпорт;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	

КонецПроцедуры

Процедура ОтразитьАвансыДоотгрузка(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаАвансыДоотгрузка;
	
	Если Отказ
		ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.АвансыДоотгрузка;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	

КонецПроцедуры

Процедура ОтразитьНДС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНДС;
	
	Если Отказ
		ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.НДС;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	

КонецПроцедуры

Процедура ОтразитьНДСГТДИмпорт(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНДСГТДИмпорт;
	
	Если Отказ
		ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.НДСГТДИмпорт;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	

КонецПроцедуры

Процедура ОтразитьДанныеРеестраГТД(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДанныеРеестраГТД;
	
	Если Отказ
		ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ДанныеРеестраГТД;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	

КонецПроцедуры

Процедура ОтразитьСчетаФактурыПолученные(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСчетаФактурыПолученные;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СчетаФактурыПолученные;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	
	ДвиженияПоРегистру.Записывать = Истина;
	
КонецПроцедуры

Процедура ОтразитьСчетаФактурыВыписанные(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСчетаФактурыВыписанные;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.СчетаФактурыВыписанные;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	
	ДвиженияПоРегистру.Записывать = Истина;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// Счета фактуры

// Выполняет движения по РН "Поступления"
Процедура ОтразитьПоступления(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПоступления;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.Поступления;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
	
	ДвиженияПоРегистру.Записывать = Истина;
	
КонецПроцедуры

//Выполняет движения регистра накопления "ДвижениеОСНУ"
Процедура ОтразитьВозвратПодотчетником(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДляЗагрузки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОтразитьВозвратПодотчетником;
	
	Если Отказ
	 ИЛИ ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистру = Движения.ВозвратДенежныхСредствПодотчетником;
	ДвиженияПоРегистру.Записывать = Истина;
	ДвиженияПоРегистру.Загрузить(ТаблицаДляЗагрузки);	
		
КонецПроцедуры  

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ШАПКИ ДОКУМЕНТА

// Процедура - Проверить существование учетной политики организаций
//
// Параметры:
//  Период		 - Дата	 - период проверки
//  Организация	 - СправочникСсылка.Организации	 - Организация, значение учетной политики которой нужно проверить
//
Процедура ПроверитьСуществованиеУчетнойПолитикиОрганизаций(Период, Организация) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетнаяПолитикаОрганизацийСрезПоследних.Организация
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&Период, Организация = &Организация) КАК УчетнаяПолитикаОрганизацийСрезПоследних";
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена учетная политика для организации ""%1""!'"), 
				Организация);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;		
КонецПроцедуры // ПроверитьСуществованиеУчетнойПолитикиОрганизаций()

// Процедура - Проверить существование учетной политики по персоналу
//
// Параметры:
//  Период		 - Дата	 - период проверки
//  Организация	 - СправочникСсылка.Организации	 - Организация, значение учетной политики которой нужно проверить
//
Функция ПроверитьСуществованиеУчетнойПолитикиПоПерсоналу(Период, Организация) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетнаяПолитикаПоПерсоналуСрезПоследних.Организация
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаПоПерсоналу.СрезПоследних(&Период, Организация = &Организация) КАК УчетнаяПолитикаПоПерсоналуСрезПоследних";
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена учетная политика по персоналу ""%1""!'"), 
				Организация);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции // ПроверитьСуществованиеУчетнойПолитикиОрганизаций()

// Процедура - Определить тип последнего открытого документа
// Устанавливает значение параметра сеанса "ТипПоследнегоОткрытогоДокумента", для определения вида договора 
// при его создании
// Параметры:
// Объект     -  ДокументОбъект        - объект редактируемого документа,
// СПокупателем - Булево               - в ИСТИНА, если точно известно, что операция "с покупателем" 
Процедура ОпределитьТипПоследнегоОткрытогоДокумента(Объект, СПокупателем = Ложь) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Объект.Свойство("Операция") Тогда  //значит это один из платежных доков
 		Если  Найти(НРег(Объект.Операция.ВидОперации),"покупат") > 0  Тогда 
			ПараметрыСеанса.ТипПоследнегоОткрытогоДокумента = "С покупателем";			
		ИначеЕсли 
			Найти(НРег(Объект.Операция.ВидОперации),"проч") > 0 Или Найти(НРег(Объект.Операция.ВидОперации),"займ") > 0 Тогда  
			ПараметрыСеанса.ТипПоследнегоОткрытогоДокумента = "Прочее";
			
		ИначеЕсли  Найти(НРег(Объект.Операция.ВидОперации),"поставщ") > 0  Тогда 
			ПараметрыСеанса.ТипПоследнегоОткрытогоДокумента = "С поставщиком";		
		Иначе ПараметрыСеанса.ТипПоследнегоОткрытогоДокумента = ""; 		
		КонецЕсли;
		
	ИначеЕсли СПокупателем Тогда  
		ПараметрыСеанса.ТипПоследнегоОткрытогоДокумента = "С покупателем";
	Иначе //док ПТМЗиУ   	
		ПараметрыСеанса.ТипПоследнегоОткрытогоДокумента = "С поставщиком";
	КонецЕсли;
			
КонецПроцедуры //ОпределитьТипПоследнегоОткрытогоДокумента()

// Функция возвращает предопределенную организацию.
//
Функция ПолучитьПредопределеннуюОрганизацию() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Организация;
	Иначе	
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции // ПолучитьПредопределеннуюОрганизацию()	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДСИСТЕМЫ ЗУП

// Функция выделяет первое слово в предложении
Функция ВыделитьСлово(ИсходнаяСтрока) Экспорт
	
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = Найти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
	ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	
	Возврат ВыделенноеСлово;
	
КонецФункции

// Функция формирует фамилию, имя и отчество одной строкой.
//
// Параметры
//  Фамилия      - фамилия физ. лица
//  Имя          - имя физ. лица
//  Отчество     - отчество физ. лица
//  ФИОКратко    - Булево - если Истина (по умолчанию), Представление физ.лица
//                 включает фамилию и инициалы, если Ложь - фамилию и полностью
//                 имя и отчество.
//
// Возвращаемое значение 
//  Фамилия, имя, отчество одной строкой.
//
Функция ПолучитьФамилиюИмяОтчество(Фамилия = " ", Имя = " ", Отчество = " ", ФИОКратко = Истина) Экспорт
	
	Если ФИОКратко Тогда
		Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + 
				?(НЕ ПустаяСтрока(Отчество) , 
				Лев(Отчество,1)+".", ""), ""), "");
	Иначе
		Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Имя + 
				?(НЕ ПустаяСтрока(Отчество) , " " + Отчество, ""), ""), "");
	КонецЕсли;

КонецФункции // ПолучитьФамилиюИмяОтчество()

// Функция - Получить данные учетной политики по персоналу
//
// Параметры:
//  Дата		 - Дата							 - период, на который нужно получить значение учетной политики
//  Организация	 - СправочникСсылка.Организации	 - для отбора по организации
// Возвращаемое значение:
//   - Структура
Функция ПолучитьДанныеУчетнойПолитикиПоПерсоналу(Дата, Организация) Экспорт
	Возврат БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиПоПерсоналу(НачалоМесяца(Дата), Организация);
КонецФункции // ПолучитьУчетнуюПолитикуПоПерсоналу()

////////////////////////////////////////////////////////////////////////////////
// Добавление текущих дел.

// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - таблица значений с колонками:
//    * Идентификатор - Строка - внутренний идентификатор дела, используемый механизмом "Текущие дела".
//    * ЕстьДела      - Булево - если Истина, дело выводится в списке текущих дел пользователя.
//    * Важное        - Булево - если Истина, дело будет выделено красным цветом.
//    * Представление - Строка - представление дела, выводимое пользователю.
//    * Количество    - Число  - количественный показатель дела, выводится в строке заголовка дела.
//    * Форма         - Строка - полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                               дела на панели "Текущие дела".
//    * ПараметрыФормы- Структура - параметры, с которыми нужно открывать форму показателя.
//    * Владелец      - Строка, объект метаданных - строковый идентификатор дела, которое будет владельцем для текущего
//                      или объект метаданных подсистема.
//    * Подсказка     - Строка - текст подсказки.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Организация = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
	ДанныеУчетнойПолитики = ПолучитьДанныеУчетнойПолитикиОрганизаций(ТекущаяДатаСеанса(), Организация);
	
	Если НЕ ЗначениеЗаполнено(ДанныеУчетнойПолитики.Организация) Тогда 
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "ДанныеУчетнойПолитикиОрганизаций";
		Дело.ЕстьДела       = Истина;
		Дело.Представление  = НСтр("ru = 'Заполнить данные учетной политики'");
		Дело.Важное         = Истина;
		Дело.Форма          = "РегистрСведений.УчетнаяПолитикаОрганизаций.ФормаЗаписи";
		Дело.ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Организация", Организация));
		Дело.Владелец       = Метаданные.Подсистемы.Настройки;
		//Дело.Владелец       = Метаданные.Подсистемы.Предприятие;
	КонецЕсли;	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ПЕЧАТНЫХ ФОРМ

// Процедура заполняет ФИО по наименованию сотрудника
//
Процедура ФамилияИнициалыПоНаименованию(ФИО, Наименование) Экспорт
	
	Если ПустаяСтрока(Наименование) Тогда
		Возврат;
	КонецЕсли;
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Наименование, " ");
	Фамилия		= МассивПодстрок[0];
	Имя 		= ?(МассивПодстрок.Количество() > 1, МассивПодстрок[1], "");
	Отчество	= ?(МассивПодстрок.Количество() > 2, МассивПодстрок[2], "");
	
	ФИО = ПолучитьФамилиюИмяОтчество(Фамилия, Имя, Отчество, Истина);
	
КонецПроцедуры // ФИОНаименованиеСотрудника()

// Функция возвращает совокупность данных о физическом лице в виде структуры, 
// В совокупность данных входит ФИО, должность в заданной организации, 
// паспортные данные и др.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой
//                 определяется должность и подразделение сотрудника
//  ФизЛицо      - СправочникСсылка.ФизическиеЛица - физическое лицо,
//                 по которому возвращается совокупность данных
//  ДатаСреза    - Дата - дата, на которую считываются данные
//  ФИОКратко    - Булево - если Истина (по умолчанию), Представление физ.лица
//                 включает фамилию и инициалы, если Ложь - фамилию и полностью
//                 имя и отчество.
//
// Возвращаемое значение:
//  Структура    - Структура с совокупностью данных о физическом лице:
//                 "Фамилия",
//                 "Имя"
//                 "Отчество"
//                 "Представление (Фамилия И.О.)"
//                 "Подразделение"
//                 "ДокументВид"
//                 "ДокументСерия"
//                 "ДокументНомер"
//                 "ДокументДатаВыдачи"
//                 "ДокументКемВыдан"
//                 "ДокументКодПодразделения".
//
Функция ДанныеФизЛица(Организация, ФизЛицо, ДатаСреза, ФИОКратко = Истина) Экспорт
	
	ЗапросПоЛицам = Новый Запрос();
	ЗапросПоЛицам.УстановитьПараметр("ДатаСреза", ДатаСреза);
	ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
	ЗапросПоЛицам.УстановитьПараметр("ФизЛицо", ФизЛицо);
	ЗапросПоЛицам.Текст =
	"ВЫБРАТЬ
	|	ФИОФизическихЛицСрезПоследних.Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество,
	|	Сотрудники.Подразделение,
	|	Сотрудники.ТабельныйНомер,
	|	Сотрудники.Должность,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ДокументВид,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК ДокументСерия,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК ДокументНомер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДокументДатаВыдачи,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК ДокументКемВыдан,
	|	ДокументыФизическихЛицСрезПоследних.КодПодразделения КАК ДокументКодПодразделения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ФизическиеЛица.Ссылка КАК ФизЛицо
	|	ИЗ
	|		Справочник.ФизическиеЛица КАК ФизическиеЛица
	|	ГДЕ
	|		ФизическиеЛица.Ссылка = &ФизЛицо) КАК ФизЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &ФизЛицо) КАК ФИОФизическихЛицСрезПоследних
	|		ПО ФизЛица.ФизЛицо = ФИОФизическихЛицСрезПоследних.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
	|				&ДатаСреза,
	|				ФизЛицо = &ФизЛицо
	|					И ЯвляетсяДокументомУдостоверяющимЛичность) КАК ДокументыФизическихЛицСрезПоследних
	|		ПО ФизЛица.ФизЛицо = ДокументыФизическихЛицСрезПоследних.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			Сотрудники.ФизЛицо.Код КАК ТабельныйНомер,
	|			Сотрудники.ФизЛицо КАК ФизЛицо,
	|			Сотрудники.Должность КАК Должность,
	|			Сотрудники.Подразделение КАК Подразделение
	|		ИЗ
	|			РегистрСведений.Сотрудники.СрезПоследних(
	|					&ДатаСреза,
	|					ФизЛицо = &ФизЛицо
	|						И Организация = &Организация) КАК Сотрудники) КАК Сотрудники
	|		ПО ФизЛица.ФизЛицо = Сотрудники.ФизЛицо";
	
	Данные = ЗапросПоЛицам.Выполнить().Выбрать();
	Данные.Следующий();
	
	Результат = Новый Структура("Фамилия, Имя, Отчество, Представление, 
								|ТабельныйНомер, Должность, Подразделение, 
								|ДокументВид, ДокументСерия, ДокументНомер,  
								|ДокументДатаВыдачи, ДокументКемВыдан, ДокументКодПодразделения, 
								|ПредставлениеДокумента");

	ЗаполнитьЗначенияСвойств(Результат, Данные);

	Результат.Представление = ПолучитьФамилиюИмяОтчество(Данные.Фамилия, Данные.Имя, Данные.Отчество, ФИОКратко);
	Результат.ПредставлениеДокумента = ПолучитьПредставлениеДокументаФизЛица(Данные);
	
	Возврат Результат;
	
КонецФункции // ДанныеФизЛица()

// Получение представления для документа, удостоверяющего личность.
//
// Параметры
//  ДанныеФизЛица – Коллекция данных физ. лица (структура, строка таблицы, ...),
//                 содержащая значения: ДокументВид, ДокументСерия,
//                 ДокументНомер, ДокументДатаВыдачи, ДокументКемВыдан.  
//
// Возвращаемое значение:
//   Строка      – Представление документа, удостоверяющего личность.
//
Функция ПолучитьПредставлениеДокументаФизЛица(ДанныеФизЛица) Экспорт

	Возврат Строка(ДанныеФизЛица.ДокументВид) + " серия " +
			ДанныеФизЛица.ДокументСерия       + ", номер " +
			ДанныеФизЛица.ДокументНомер       + ", выданный " +
			Формат(ДанныеФизЛица.ДокументДатаВыдачи, "ДФ=dd.MM.yyyy")  + " " +
			ДанныеФизЛица.ДокументКемВыдан;

КонецФункции // ПолучитьПредставлениеДокументаФизЛица()

// Функция формирует представление суммы прописью в указанной валюте
//
// Параметры:
//  Сумма        - число - реквизит, который надо представить прописью 
//  Валюта       - СправочникСсылка.Валюты - валюта, в которой нужно представить
//                 сумму (По умолчанию будет подставлена- ВалютаРегламентированногоУчета)
//  ВыводитьСуммуБезКопеек - булево - флаг представления суммы без копеек.
//
// Возвращаемое значение
//  Отформатированная строка.
//
Функция СформироватьСуммуПрописью(Сумма, Валюта = Неопределено, ВыводитьСуммуБезКопеек = Ложь) Экспорт
	
	Если Валюта = Неопределено Тогда 
		Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;	
	
	Если Валюта.ПараметрыПрописиНаРусском = "" Тогда
		Возврат ФорматСумм(Сумма);
	КонецЕсли;
	
	Результат     = Сумма;
	ЦелаяЧасть    = Цел(Сумма);
	ФорматСтрока  = "Л=ru_RU; ДП=Ложь";
	ПарамПредмета = Валюта.ПараметрыПрописиНаРусском;
	
	Если Результат = ЦелаяЧасть Тогда
		Если ВыводитьСуммуБезКопеек Тогда
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
			Результат = Лев(Результат, Найти(Результат, "0") - 1);
		Иначе
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
		КонецЕсли;
	Иначе
		Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПрописьюПлатежногоДокумента()

// Стандартная для данной конфигурации функция форматирования прописи количества
//
// Параметры: 
//  Количество - число, которое мы хотим форматировать
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество) Экспорт

	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);

	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, десятая, десятых, десятых, м, 1";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, сотая, сотых, сотых, м, 2";
	Иначе
		ПараметрыПрописи = "целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3";
	КонецЕсли;

	Возврат ЧислоПрописью(Количество, ,ПараметрыПрописи);

КонецФункции // КоличествоПрописью()

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры: 
//  Сумма  - число, которое мы хотим форматировать, 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "", ЧРД = "", ВалютаПрописью = Ложь) Экспорт

	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" +
					?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН) +
					?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ)+
					?(НЕ ЗначениеЗаполнено(ЧРД),"", ";" + "ЧРД=" + ЧРД);
					
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		Если ВалютаПрописью и НЕ СокрЛП(Валюта.ПараметрыПрописиНаРусском) = "" Тогда 
			СтрокаПараметров = СтрЗаменить(Валюта.ПараметрыПрописиНаРусском, ",", Символы.ПС);
			НовыеПараметрыПрописи = СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 1))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 2))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 3))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 4))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 5))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 6))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 7))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 8))+","+ 0;
	
	
			ЗначимаяЧасть = ЧислоПрописью(Цел(Сумма),"ru_RU; НП = Ложь; ДП = Ложь", НовыеПараметрыПрописи);
			ЧисловаяЧасть = ЧислоПрописью(Цел(Сумма),"ru_RU; НП = Ложь; ДП = Ложь", ",,,,,,,,0");
			РезультирующаяСтрока = СтрЗаменить(ЗначимаяЧасть, ЧисловаяЧасть, РезультирующаяСтрока + " ");
		Иначе			
			РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
		КонецЕсли;	
	КонецЕсли;

	Возврат РезультирующаяСтрока;

КонецФункции // ФорматСумм()

///////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ НДС И НСП

// Функция - Получить ставку НДС
//
// Параметры:
//  Дата		 - дата	- дата на которую нужно получить значения ставки
//  СтавкаНДС	 - СправочникСсылка.СтавкиНДС - ссылка на справочник ставки НДС
// Возвращаемое значение:
//   - число - размер ставки
Функция ПолучитьСтавкуНДС(Дата, СтавкаНДС) Экспорт
	Возврат БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСтавкуНДС(НачалоМесяца(Дата), СтавкаНДС);
КонецФункции // ПолучитьСтавкуНДС()

// Функция - Получить ставку НСП
//
// Параметры:
//  Дата		 - дата	- дата на которую нужно получить значения ставки
//  СтавкаНДС	 - СправочникСсылка.СтавкиНСП - ссылка на справочник ставки НДС
//  СтавкаНСП	 - СправочникСсылка.СтавкаНСП - ссылка на справочник ставки НСП
// Возвращаемое значение:
//   - число - размер ставки
Функция ПолучитьСтавкуНСП(Дата, СтавкаНДС, СтавкаНСП) Экспорт
	Возврат БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСтавкуНСП(НачалоМесяца(Дата), СтавкаНДС, СтавкаНСП);
КонецФункции // ПолучитьСтавкуНСП()  

// Функция - Получить ставку НДС по договору
//
// Параметры:
//  Дата 		- дата	- дата на которую нужно получить значения ставки
//  Договор	 	- СправочникСсылка.Договоры - ссылка на справочник договоры контрагентов
// Возвращаемое значение:
//   - число - размер ставки
Функция ПолучитьСтавкуНДСПоДоговору(Дата, Договор) Экспорт
	ДанныеОСтавке = ПолучитьСтавкуНДС(Дата, Договор.СтавкаНДС);
	Возврат ДанныеОСтавке.Ставка;
КонецФункции // ПолучитьСтавкуНДС()

// Функция - Получить ставку НСП по договору
//
// Параметры:
//  Дата		- дата	- дата на которую нужно получить значения ставки
//  Договор	 	- СправочникСсылка.Договоры - ссылка на справочник договоры контрагентов
// Возвращаемое значение:
//   - число - размер ставки
Функция ПолучитьСтавкуНСППоДоговору(Дата, Договор) Экспорт
	ДанныеОСтавке = ПолучитьСтавкуНСП(Дата, Договор.СтавкаНДС, Договор.СтавкаНСП);
	Возврат ДанныеОСтавке.Ставка;
КонецФункции // ПолучитьСтавкуНСП()  

///////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ СЕРИИ И НОМЕРА СЧЕТОВ-ФАКТУР

Функция СформироватьСписокСерийСФ(Организация, Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БланкиСФОстатки.Серия КАК Серия,
	|	БланкиСФОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.БланкиСФ.Остатки(
	|			&Дата,
	|			Организация = &Организация) КАК БланкиСФОстатки
	|ГДЕ
	|	БланкиСФОстатки.КоличествоОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Серия
	|АВТОУПОРЯДОЧИВАНИЕ";

	Запрос.УстановитьПараметр("Организация", 				Организация);
	Запрос.УстановитьПараметр("Дата", 						Дата);
	
	Результат = Запрос.Выполнить().Выгрузить();
	МассивСерия = Результат.ВыгрузитьКолонку("Серия");
	
	Возврат МассивСерия;
	
КонецФункции

Функция СформироватьСписокНомеровБланковСФ(Организация, Серия, Дата = Неопределено) Экспорт
		
	Запрос=Новый Запрос;
	Запрос.Текст=
	
	"ВЫБРАТЬ
	|	БланкиСФОстатки.Номер КАК НомерБланка,
	|	БланкиСФОстатки.КоличествоОстаток,
	|	БланкиСФОстатки.Серия
	|ПОМЕСТИТЬ ВременаяТаблицаВсеОставшиесяСерии
	|ИЗ
	|	РегистрНакопления.БланкиСФ.Остатки(
	|			,
	|			Организация = &Организация
	|				И Серия = &Серия) КАК БланкиСФОстатки
	|ГДЕ
	|	БланкиСФОстатки.КоличествоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БланкиСФОстатки.Номер КАК НомерБланка
	|ИЗ
	|	РегистрНакопления.БланкиСФ.Остатки(
	|			&Дата,
	|			Организация = &Организация
	|				И Серия = &Серия) КАК БланкиСФОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременаяТаблицаВсеОставшиесяСерии КАК ВременаяТаблицаВсеОставшиесяСерии
	|		ПО БланкиСФОстатки.Номер = ВременаяТаблицаВсеОставшиесяСерии.НомерБланка
	|			И БланкиСФОстатки.Серия = ВременаяТаблицаВсеОставшиесяСерии.Серия
	|ГДЕ
	|	БланкиСФОстатки.КоличествоОстаток > 0
	|	И НЕ ВременаяТаблицаВсеОставшиесяСерии.НомерБланка ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерБланка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Серия", 		 Серия);
	Запрос.УстановитьПараметр("Дата", 		 Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить().Выгрузить();
	МассивНомеров = Результат.ВыгрузитьКолонку("НомерБланка");
	
	Возврат МассивНомеров;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДСИСТЕМЫ ЦЕНООБРАЗОВАНИЕ

// Округляет число по заданному порядку.
//
// Параметры:
//  Число        - Число, которое необходимо округлить
//  ПорядокОкругления - Перечисления.ПорядкиОкругления - порядок округления
//  ОкруглятьВБольшуюСторону - Булево - округления в большую сторону.
//
// Возвращаемое значение:
//  Число        - результат округления.
//
Функция ОкруглитьЦену(Число, ПравилоОкругления, ОкруглятьВБольшуюСторону) Экспорт
	
	Перем Результат; // Возвращаемый результат.
	
	// Преобразуем порядок округления числа.
	// Если передали пустое значение порядка, то округлим до копеек. 
	Если НЕ ЗначениеЗаполнено(ПравилоОкругления) Тогда
		ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр0_01; 
	Иначе
		ПорядокОкругления = ПравилоОкругления;
	КонецЕсли;
	Порядок = Число(Строка(ПорядокОкругления));
	
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервал	= Число / Порядок;
	
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
	
	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		
		// Числа поделились нацело. Округлять не нужно.
		Результат	= Число;
	Иначе
		Если ОкруглятьВБольшуюСторону Тогда
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.4
			Результат = Порядок * (КоличествоЦелыхИнтервалов + 1);
		Иначе
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.35,
			// а 0.376 до 0.4
			Результат = Порядок * Окр(КоличествоИнтервал, 0, РежимОкругления.Окр15как20);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОкруглитьЦену()

////////////////////////////////////////////////////////////////////////////////////////////////

// Выборка учетной политики организации в структуру
//
// Параметры:
//  Период		 - Дата	- период, на который нужно получить значение учетной политики
//  Организация	 - СправочникСсылка.Организации	 - для отбора по организации
// Возвращаемое значение:
//   - 
Функция ПолучитьДанныеУчетнойПолитикиОрганизаций(Период, Организация) Экспорт
	Возврат БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(НачалоМесяца(Период), Организация)
КонецФункции

Функция ПолучитьПустуюСсылкуНаКлиенте(ИмяСправочника, ИмяСтавки = Неопределено) Экспорт
	
	Если ИмяСтавки = Неопределено Тогда 
		Возврат Справочники[ИмяСправочника].ПустаяСсылка();	
	Иначе
		Возврат Справочники[ИмяСправочника][ИмяСтавки];	
	КонецЕсли;
	
КонецФункции

// Функция возвращает цену компании для требуемой номенклатуры в указанном типе цен , 
// на заданную дату, за заданную единицу измерения, пересчитанную в требуемую валюту по заданному курсу.
//
// Параметры: 
//	СтруктураДанных - структура
//  	* Номенклатура         - ссылка на элемент справочника "Номенклатура", для которого надо получить цену,
//  	* ТипЦен               - ссылка на элемент справочника "Типы цен", определяет цену какого типа надо получить,
//  	* Дата                 - дата, на которую надо получить цену, если не заполнено, то берется рабочая дата
//  	* ВалютаДокумента      - валюта
//  Возвращаемое значение:
//  Число, рассчитанное значение цены.
//
Функция ПолучитьЦенуНоменклатуры(СтруктураДанных) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.ТипЦен.ВалютаЦены КАК ЦеныНоменклатурыВалюта,
		|	ЦеныНоменклатурыСрезПоследних.ТипЦен.ПорядокОкругления КАК ПорядокОкругления,
		|	ЦеныНоменклатурыСрезПоследних.ТипЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена * КурсВалютыВидЦен.Курс * КурсВалютыДокумента.Кратность, 0) КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&Период,
		|			Номенклатура = &Номенклатура
		|				И ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВалютыВидЦен
		|		ПО ЦеныНоменклатурыСрезПоследних.ТипЦен.ВалютаЦены = КурсВалютыВидЦен.Валюта,
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента";
	Запрос.УстановитьПараметр("Период",       		СтруктураДанных.Дата);
	Запрос.УстановитьПараметр("Номенклатура", 		СтруктураДанных.Номенклатура);
	Запрос.УстановитьПараметр("ТипЦен",       		СтруктураДанных.ТипЦен);
	Запрос.УстановитьПараметр("ВалютаДокумента",	СтруктураДанных.ВалютаДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Цена = 0;
	Пока Выборка.Следующий() Цикл
		
		Цена					= Выборка.Цена;
		ПорядокОкругления		= Выборка.ПорядокОкругления;
		ОкруглятьВБольшуюСторону= Выборка.ОкруглятьВБольшуюСторону;
		
		Цена = ОкруглитьЦену(Цена, ПорядокОкругления, ОкруглятьВБольшуюСторону);
	КонецЦикла;
	
	Возврат Цена;

КонецФункции // ПолучитьЦенуНоменклатуры()

Функция ПолучитьЦеныНоменклатуры(Дата, ТипЦен, МассивНоменклатуры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&Дата,
		|			ТипЦен = &ТипЦен
		|				И Номенклатура В (&МассивНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", 				Дата);	
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("ТипЦен", 			ТипЦен);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ()

// Функция возвращает структуру с реквизитами справочника ТипыЦенНоменклатуры
//
Функция ПолучитьРеквизитыТипЦен(ТипЦен) Экспорт
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЦенаВключаетНалоги", ТипЦен.ЦенаВключаетНалоги);
	Возврат СтруктураВозврата;
КонецФункции

// Функция возвращает возможные счета учета расчетов с контрагентом
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Контрагент  - по которому выполняется поиск
//  Договор     - по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Договор) Экспорт

	Результат = Новый Структура("СчетРасчетовПоставщика, 
	                            |СчетАвансовПоставщика,
	                            |СчетРасчетовПокупателя, 
	                            |СчетАвансовПокупателя,
								|СчетРасчетовПоЗаймам,
	                            |СчетДоходов");

	СписокГруппКонтрагентов = ПолучитьСписокВышеСтоящихГрупп(Контрагент);
	
	СписокГруппДоговоров 	= ПолучитьСписокВышеСтоящихГрупп(Договор);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("Контрагент",        Контрагент);
	Запрос.УстановитьПараметр("Договор",           Договор);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДоговор",     Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
	Индекс = 1;
	
	// Записи с указанными организацией, контрагентом и не пустым договором
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	" + Индекс + " КАК Приоритет,
	|СчетРасчетовПоставщика, 
	|СчетАвансовПоставщика,
	|СчетРасчетовПокупателя, 
	|СчетАвансовПокупателя,
	|СчетРасчетовПоЗаймам,
	|СчетДоходов
	|ИЗ
	|	РегистрСведений.СчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	
	|	Организация = &Организация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &Договор И НЕ &Договор = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	// + записи с договорами-родителями
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс, ГруппаДоговоров);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|СчетРасчетовПоставщика, 
		|СчетАвансовПоставщика,
		|СчетРасчетовПокупателя, 
		|СчетАвансовПокупателя,
		|СчетРасчетовПоЗаймам,
		|СчетДоходов
		|ИЗ
		|	РегистрСведений.СчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	Организация           = &Организация И
		|	Контрагент            = &Контрагент И
		|	Договор               = &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	// + записи с пустым договором
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|СчетРасчетовПоставщика, 
	|СчетАвансовПоставщика,
	|СчетРасчетовПокупателя, 
	|СчетАвансовПокупателя,
	|СчетРасчетовПоЗаймам,
	|СчетДоходов
	|ИЗ
	|	РегистрСведений.СчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	Организация = &Организация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	// + записи с родителями контрагентом. Для родителей договор должен быть пустым 
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, ГруппаКонтрагентов);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|СчетРасчетовПоставщика, 
		|СчетАвансовПоставщика,
		|СчетРасчетовПокупателя, 
		|СчетАвансовПокупателя,
		|СчетРасчетовПоЗаймам,
		|СчетДоходов
		|ИЗ
		|	РегистрСведений.СчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	Организация           = &Организация И
		|	Контрагент            = &ГруппаКонтрагентов" + Индекс + " И
		|	Договор               = &ПустойДоговор
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	// + запись с пустыми контрагентом и договором 
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|СчетРасчетовПоставщика, 
	|СчетАвансовПоставщика,
	|СчетРасчетовПокупателя, 
	|СчетАвансовПокупателя,
	|СчетРасчетовПоЗаймам,
	|СчетДоходов
	|ИЗ
	|	РегистрСведений.СчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	Организация           = &Организация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	// + родители - договоры 
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс, ГруппаДоговоров);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|СчетРасчетовПоставщика, 
		|СчетАвансовПоставщика,
		|СчетРасчетовПокупателя, 
		|СчетАвансовПокупателя,
		|СчетРасчетовПоЗаймам,
		|СчетДоходов
		|ИЗ
		|	РегистрСведений.СчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	Организация           = &ПустаяОрганизация И
		|	Контрагент            = &Контрагент И
		|	Договор               = &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	// + пустая организация и пустой договор
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|СчетРасчетовПоставщика, 
	|СчетАвансовПоставщика,
	|СчетРасчетовПокупателя, 
	|СчетАвансовПокупателя,
	|СчетРасчетовПоЗаймам,
	|СчетДоходов
	|ИЗ
	|	РегистрСведений.СчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	Организация = &ПустаяОрганизация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, ГруппаКонтрагентов);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|СчетРасчетовПоставщика, 
		|СчетАвансовПоставщика,
		|СчетРасчетовПокупателя, 
		|СчетАвансовПокупателя,
		|СчетРасчетовПоЗаймам,
		|СчетДоходов
		|ИЗ
		|	РегистрСведений.СчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	Организация           = &ПустаяОрганизация И
		|	Контрагент            = &ГруппаКонтрагентов" + Индекс + " И
		|	Договор               = &ПустойДоговор
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|СчетРасчетовПоставщика, 
	|СчетАвансовПоставщика,
	|СчетРасчетовПокупателя, 
	|СчетАвансовПокупателя,
	|СчетРасчетовПоЗаймам,
	|СчетДоходов
	|ИЗ
	|	РегистрСведений.СчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	Организация           = &ПустаяОрганизация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|СчетРасчетовПоставщика, 
	|СчетАвансовПоставщика,
	|СчетРасчетовПокупателя, 
	|СчетАвансовПокупателя,
	|СчетРасчетовПоЗаймам,
	|СчетДоходов
	|ИЗ
	|	РегистрСведений.СчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	Организация           = &ПустаяОрганизация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		
		Результат.СчетРасчетовПоставщика    = Выборка.СчетРасчетовПоставщика;
		Результат.СчетАвансовПоставщика     = Выборка.СчетАвансовПоставщика;
		Результат.СчетРасчетовПокупателя    = Выборка.СчетРасчетовПокупателя;
		Результат.СчетАвансовПокупателя     = Выборка.СчетАвансовПокупателя;
		Результат.СчетРасчетовПоЗаймам     	= Выборка.СчетРасчетовПоЗаймам;
		Результат.СчетДоходов  				= Выборка.СчетДоходов;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

// Функция возвращает цену номенклатуры в зависимости от способа оценки запасов: FIFO, LIFO, Фиксированная
//
Функция ПолучитьЦенуНоменклатурыПоСпособуОценки(ДанныеСТЧ, ПараметрыОбъекта) Экспорт
	Организация 	= ПараметрыОбъекта.Организация;
	Дата 			= ПараметрыОбъекта.Дата;
	Склад 			= ПараметрыОбъекта.Склад;
	
	Номенклатура 	= ДанныеСТЧ.Номенклатура;	
	Количество 		= ДанныеСТЧ.Количество;	
	СпособОценки	= ДанныеСТЧ.СпособОценки;
	
	Если ДанныеСТЧ.Свойство("СчетУчета") Тогда
		СчетУчетаНоменклатуры = ДанныеСТЧ.СчетУчета;	
	Иначе	
	    СчетУчетаНоменклатуры = Неопределено;
	КонецЕсли;
	
	МассивСчетов    = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаПоСпособуОценки(СпособОценки);

	Если ЗначениеЗаполнено(СчетУчетаНоменклатуры) Тогда
		МассивСчетов = СчетУчетаНоменклатуры;
	КонецЕсли;
	
	
		  
    Если СпособОценки = Перечисления.СпособыОценки.ПоФиксированной Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗапасыОстатки.КоличествоОстаток КАК Количество,
			|	ЗапасыОстатки.Цена
			|ИЗ
			|	РегистрНакопления.Запасы.Остатки(
			|			&Дата,
			|			Организация = &Организация
			|				И Номенклатура = &Номенклатура
			|				И (Склад = &Склад
			|					ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
			|				И СчетУчета В (&МассивСчетов)) КАК ЗапасыОстатки";
		
		Запрос.УстановитьПараметр("Дата", 			Дата);
		Запрос.УстановитьПараметр("Организация", 	Организация);
		Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);
		Запрос.УстановитьПараметр("Склад", 			Склад);
		Запрос.УстановитьПараметр("МассивСчетов", 	МассивСчетов);
		
		ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
		
		Возврат ТаблицаЗначений;

	ИначеЕсли СпособОценки = Перечисления.СпособыОценки.ФИФО Тогда 

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК Количество,
			|	ВЫБОР
			|		КОГДА ЗапасыОстатки.КоличествоОстаток = 0
			|			ТОГДА 0
			|		ИНАЧЕ ЗапасыОстатки.СуммаОстаток / ЗапасыОстатки.КоличествоОстаток
			|	КОНЕЦ КАК Цена,
			|	ЗапасыОстатки.Партия
			|ИЗ
			|	РегистрНакопления.Запасы.Остатки(
			|			&Дата,
			|			Организация = &Организация
			|				И Номенклатура = &Номенклатура			
			|				И (Склад = &Склад
			|					ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
			|				И СчетУчета В (&МассивСчетов)) КАК ЗапасыОстатки
			|ГДЕ
			|	ЗапасыОстатки.КоличествоОстаток <> 0
			|
			|СГРУППИРОВАТЬ ПО
			|	ВЫБОР
			|		КОГДА ЗапасыОстатки.КоличествоОстаток = 0
			|			ТОГДА 0
			|		ИНАЧЕ ЗапасыОстатки.СуммаОстаток / ЗапасыОстатки.КоличествоОстаток
			|	КОНЕЦ,
			|	ЗапасыОстатки.Партия
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЗапасыОстатки.Партия.Дата";
		
		Запрос.УстановитьПараметр("Дата", 			Дата);
		Запрос.УстановитьПараметр("Организация", 	Организация);
		Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);
		Запрос.УстановитьПараметр("Склад", 			Склад);
		Запрос.УстановитьПараметр("МассивСчетов", 	МассивСчетов);
		

		РезультатЗапроса = Запрос.Выполнить();			
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Требуется	 		= Количество;
		Сумма_Всего 		= 0;
		Количество_Всего 	= 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() И Требуется > 0 Цикл
			Если Требуется > ВыборкаДетальныеЗаписи.Количество Тогда
				Требуется 			= Требуется - ВыборкаДетальныеЗаписи.Количество;
				Количество_Всего 	= Количество_Всего + ВыборкаДетальныеЗаписи.Количество;
				Сумма_Всего 		= Сумма_Всего + ВыборкаДетальныеЗаписи.Цена	* ВыборкаДетальныеЗаписи.Количество;
			Иначе
			    Сумма_Всего 		= Сумма_Всего + ВыборкаДетальныеЗаписи.Цена	* Требуется;
				Количество_Всего 	= Количество_Всего + Требуется;
				Требуется 			= 0;
			КонецЕсли;				
		КонецЦикла;
		Если Количество_Всего = 0 Тогда
			Возврат 0;
		Иначе
			Возврат Сумма_Всего / Количество_Всего;
		КонецЕсли;
		
    ИначеЕсли СпособОценки = Перечисления.СпособыОценки.ПоСредней Тогда //И УСчетаУчетаЕстьУказанныйСпособОценки Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗапасыОстатки.КоличествоОстаток КАК Количество,
			|	ВЫБОР
			|		КОГДА ЗапасыОстатки.КоличествоОстаток = 0
			|			ТОГДА 0
			|		ИНАЧЕ ЗапасыОстатки.СуммаОстаток / ЗапасыОстатки.КоличествоОстаток
			|	КОНЕЦ КАК Цена,
			|	ЗапасыОстатки.СуммаОстаток
			|ИЗ
			|	РегистрНакопления.Запасы.Остатки(
			|			&Дата,
			|			Организация = &Организация
			|				И Номенклатура = &Номенклатура			
			|				И (Склад = &Склад
			|					ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
			|				И СчетУчета В (&МассивСчетов)) КАК ЗапасыОстатки";
		
		Запрос.УстановитьПараметр("Дата", 			Дата);
		Запрос.УстановитьПараметр("Организация", 	Организация);
		Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);			
		Запрос.УстановитьПараметр("Склад", 			Склад);
		Запрос.УстановитьПараметр("МассивСчетов", 	МассивСчетов);
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.Цена;
		Иначе	
		    Возврат 0;
		КонецЕсли;

    Иначе //Если для счета не указан способ оценки

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗапасыОстатки.КоличествоОстаток КАК Количество,
			|	ВЫБОР
			|		КОГДА ЗапасыОстатки.КоличествоОстаток = 0
			|			ТОГДА 0
			|		ИНАЧЕ ЗапасыОстатки.СуммаОстаток / ЗапасыОстатки.КоличествоОстаток
			|	КОНЕЦ КАК Цена,
			|	ЗапасыОстатки.СуммаОстаток
			|ИЗ
			|	РегистрНакопления.Запасы.Остатки(
			|			&Дата,
			|			Организация = &Организация
			|				И Номенклатура = &Номенклатура
			|				И (Склад = &Склад
			|					ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))) КАК ЗапасыОстатки";
		
		Запрос.УстановитьПараметр("Дата", 			Дата);
		Запрос.УстановитьПараметр("Организация", 	Организация);
		Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);			
		Запрос.УстановитьПараметр("Склад", 			Склад);
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.Цена;
		Иначе	
		    Возврат 0;
		КонецЕсли;

	КонецЕсли;

КонецФункции // ()

// Функция возвращает количество остатка по номенклатуре и счету учета
//
Функция ПолучитьОстатокПоНоменклатуреИСчетуУчета(ДанныеСТЧ, ПараметрыОбъекта) Экспорт
	Организация 	= ПараметрыОбъекта.Организация;
	Дата 			= ПараметрыОбъекта.Дата;
	Склад 			= ПараметрыОбъекта.Склад;
	
	Номенклатура 	= ДанныеСТЧ.Номенклатура;	
	СчетУчета 		= ДанныеСТЧ.СчетУчета;
	Цена	 		= ДанныеСТЧ.Цена;
	СпособОценки	= ДанныеСТЧ.СпособОценки;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток,
		|	ВЫБОР
		|		КОГДА ЗапасыОстатки.КоличествоОстаток = 0
		|			ТОГДА 0
		|		ИНАЧЕ ЗапасыОстатки.СуммаОстаток / ЗапасыОстатки.КоличествоОстаток
		|	КОНЕЦ КАК Цена,
		|	ЗапасыОстатки.Партия
		|ПОМЕСТИТЬ ВременнаяТаблицаОстатков
		|ИЗ
		|	РегистрНакопления.Запасы.Остатки(
		|			&Дата,
		|			Организация = &Организация
		|				И Номенклатура = &Номенклатура
		|				И Склад = &Склад
		|				И СчетУчета = &СчетУчета) КАК ЗапасыОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ЕСТЬNULL(ВременнаяТаблицаОстатков.КоличествоОстаток, 0)) КАК Количество
		|ИЗ
		|	ВременнаяТаблицаОстатков КАК ВременнаяТаблицаОстатков
		|ГДЕ
		|	((ВЫРАЗИТЬ(ВременнаяТаблицаОстатков.Цена КАК ЧИСЛО(15, 2))) = (ВЫРАЗИТЬ(&Цена КАК ЧИСЛО(15, 2)))
		|			ИЛИ НЕ &ПоФиксированной)";
	
	Запрос.УстановитьПараметр("Дата", 			Дата);
	Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("Склад", 			Склад);
	Запрос.УстановитьПараметр("СчетУчета", 		СчетУчета);
	Запрос.УстановитьПараметр("Цена", 			Цена);
	Запрос.УстановитьПараметр("ПоФиксированной",СпособОценки = Перечисления.СпособыОценки.ПоФиксированной);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Количество) Тогда
		Возврат ВыборкаДетальныеЗаписи.Количество;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции // ПолучитьОстатокПоНоменклатуреИСчетуУчета()

Функция ПолучитьОстатокПоМБПНаСкладе(ДанныеСТЧ, ПараметрыОбъекта) Экспорт
	Организация 	= ПараметрыОбъекта.Организация;
	Дата 			= ПараметрыОбъекта.Дата;
	Склад 			= ПараметрыОбъекта.Склад;
	
	Номенклатура 	= ДанныеСТЧ.Номенклатура;	
	СчетУчета 		= ДанныеСТЧ.СчетУчета;
	Цена	 		= ДанныеСТЧ.Цена;
	СпособОценки	= ДанныеСТЧ.СпособОценки;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МБПСкладОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ВЫБОР
	|		КОГДА МБПСкладОстатки.КоличествоОстаток = 0
	|			ТОГДА 0
	|		ИНАЧЕ МБПСкладОстатки.СуммаОстаток / МБПСкладОстатки.КоличествоОстаток
	|	КОНЕЦ КАК Цена,
	|	МБПСкладОстатки.Партия
	|ПОМЕСТИТЬ ВременнаяТаблицаОстатков
	|ИЗ
	|	РегистрНакопления.МБПСклад.Остатки(
	|			&Дата,
	|			Номенклатура = &Номенклатура
	|				И Организация = &Организация
	|				И Склад = &Склад) КАК МБПСкладОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ВременнаяТаблицаОстатков.КоличествоОстаток, 0)) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаОстатков КАК ВременнаяТаблицаОстатков";
	
	Запрос.УстановитьПараметр("Дата", 			Дата);
	Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("Склад", 			Склад);

	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Количество) Тогда
		Возврат ВыборкаДетальныеЗаписи.Количество;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции // ПолучитьОстатокПоНоменклатуреИСчетуУчета()

// Функция возвращает массив вышестоящих групп указанного элемента.
//
// Параметры:
//  Элемент      - Элемент справочника, для которого ищется родитель
//
// Возвращаемое значение
//  Массив вышестоящих групп
//
Функция ПолучитьСписокВышеСтоящихГрупп(ЭлементСправочника) Экспорт

	Результат = Новый Массив;

	Если НЕ ЗначениеЗаполнено(ЭлементСправочника) Тогда
		Возврат Результат;
	КонецЕсли;

	МетаданныеСправочника = ЭлементСправочника.Метаданные();
	Если НЕ МетаданныеСправочника.Иерархический Тогда
		Возврат Результат;
	КонецЕсли;
	ИмяСправочника = МетаданныеСправочника.Имя;
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Справочник1.Родитель КАК Родитель1,
	|	Справочник2.Родитель КАК Родитель2,
	|	Справочник3.Родитель КАК Родитель3,
	|	Справочник4.Родитель КАК Родитель4,
	|	Справочник5.Родитель КАК Родитель5
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК Справочник1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник2
	|		ПО (Справочник2.Ссылка = Справочник1.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник3
	|		ПО (Справочник3.Ссылка = Справочник2.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник4
	|		ПО (Справочник4.Ссылка = Справочник3.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник5
	|		ПО (Справочник5.Ссылка = Справочник4.Родитель)
	|ГДЕ
	|	Справочник1.Ссылка = &Ссылка";

	ТекущийЭлемент = ЭлементСправочника;

	Пока ЗначениеЗаполнено(ТекущийЭлемент) Цикл
		Запрос.УстановитьПараметр("Ссылка", ТекущийЭлемент);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Для Индекс = 1 по 5 Цикл
				ТекущийЭлемент = Выборка["Родитель" + Индекс];
				Если ЗначениеЗаполнено(ТекущийЭлемент) Тогда
					Результат.Добавить(ТекущийЭлемент);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТекущийЭлемент = Неопределено;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////

// Функция - Ответственные лица организаций
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации	 - 
//  Дата		 - Дата	 - 
// 
// Возвращаемое значение:
//   - Структура
//
Функция ОтветственныеЛицаОрганизаций(Организация, Дата, ДополнительныеПараметры = Неопределено) Экспорт
	Возврат БухгалтерскийУчетВызовСервераПовтИсп.ОтветственныеЛицаОрганизаций(Организация, НачалоДня(Дата), ДополнительныеПараметры);
КонецФункции // ОтветственныеЛицаОрганизации()

///////////////////////////////////////////////////////////////////////////////////////////////////
// Счета учета

Функция ПолучитьМассивСчетовУчетаПоВидуСубконто(ВидСубконто, ОтборПоПризнакуВалютный = Ложь, СчетОтбораПоПризнакуВалютный = Неопределено, МассивСчетовИсключений = Неопределено) Экспорт
	
	МассивСчетов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидСубконто", 			ВидСубконто);
	Запрос.УстановитьПараметр("МассивСчетовИсключений", МассивСчетовИсключений);
	
	Запрос.УстановитьПараметр("ОтбиратьПоПризнакуВалютный", ОтборПоПризнакуВалютный);
	   
	Если ТипЗнч(СчетОтбораПоПризнакуВалютный) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Запрос.УстановитьПараметр("Валютный", СчетОтбораПоПризнакуВалютный.Валютный);
	Иначе
		Запрос.УстановитьПараметр("Валютный", Ложь);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	|	ХозрасчетныйВидыСубконто.Ссылка.Код КАК Код,
	|	ХозрасчетныйВидыСубконто.Ссылка.Наименование КАК Наименование
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО ХозрасчетныйВидыСубконто.Ссылка = Хозрасчетный.Ссылка
	|ГДЕ
	|	НЕ ХозрасчетныйВидыСубконто.Ссылка.ЗапретитьИспользоватьВПроводках
	|	И (НЕ &ОтбиратьПоПризнакуВалютный
	|			ИЛИ ХозрасчетныйВидыСубконто.Ссылка.Валютный = &Валютный)
	|	И НЕ ХозрасчетныйВидыСубконто.Ссылка.Ссылка В (&МассивСчетовИсключений)
	|	И ХозрасчетныйВидыСубконто.ВидСубконто = &ВидСубконто
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСчетов.Добавить(Выборка.Счет);
	КонецЦикла;
	
	Возврат МассивСчетов;
	
КонецФункции