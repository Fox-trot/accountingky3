
#Область СчетаФактуры

///////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ СЕРИИ И НОМЕРА СЧЕТОВ-ФАКТУР

// Функция - Сформировать список серий СФ
//
// Параметры:
//  Организация	- СправочникСсылка.Организации - организация, из которой подбираются серии бланков СФ
// Возвращаемое значение:
//   - массив - серий бланков СФ
Функция СформироватьСписокСерийСФ(Организация) Экспорт
	// В данном запросе мы не используем отбор по периоду, т.к.
	// если проводить документ задним числом, то при отборе по периоду
	// запрос может вернуть серию бланка, ВСЕ номера которой уже 
	// использованы другими документами (числами позже).
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БланкиСФОстатки.Серия КАК Серия
		|ИЗ
		|	РегистрНакопления.БланкиСФ.Остатки(
		|			,
		|			Организация = &Организация) КАК БланкиСФОстатки
		|ГДЕ
		|	БланкиСФОстатки.КоличествоОстаток > 0";
	Запрос.УстановитьПараметр("Организация", Организация);
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Серия");
КонецФункции

// Функция - Сформировать список номеров бланков СФ
//
// Параметры:
//  Организация	- СправочникСсылка.Организации - организация, из которой подбираются серии бланков СФ
//  Серия		- Строка - наименование серии, из которой подбираются номера бланков СФ
// Возвращаемое значение:
//   - массив - номеров бланков СФ
Функция СформироватьСписокНомеровБланковСФ(Организация, Серия) Экспорт
	// В данном запросе мы не используем отбор по периоду, т.к.
	// если проводить документ задним числом, то при отборе по периоду
	// запрос может вернуть номер бланка, который уже использован
	// в другом документе (числом позже).
	Запрос = Новый Запрос;
	Запрос.Текст =	
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БланкиСФОстатки.Номер КАК НомерБланка
		|ИЗ
		|	РегистрНакопления.БланкиСФ.Остатки(
		|			,
		|			Организация = &Организация
		|				И Серия = &Серия) КАК БланкиСФОстатки
		|ГДЕ
		|	БланкиСФОстатки.КоличествоОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерБланка";
	Запрос.УстановитьПараметр("Серия", 		 Серия);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НомерБланка");
КонецФункции

#КонецОбласти

// Функция - Проверяет запись учетной политики для организации в указанном периоде
//
// Параметры:
//  Организация									 - СправочникСсылка.Организации - Организация, по которой будет осуществлена проверка
//  Период										 - Дата - Период, за который нужно проверить существование
//  ВыводитьСообщениеОбОтсутствииУчетнойПолитики - Булево - Признак вывода сообщения пользователю об ошибке
//  ДокументСсылка								 - ДокументСсылка - Прикреплять сообщение об ошибке к объекту
// 
// Возвращаемое значение:
//  Результат - Булево - Признак существования учетной политики
//
Функция УчетнаяПолитикаСуществует(Организация, Период, ВыводитьСообщениеОбОтсутствииУчетнойПолитики = Ложь, ДокументСсылка = Неопределено) Экспорт
	Возврат БухгалтерскийУчетВызовСервераПовтИсп.УчетнаяПолитикаСуществует(Организация, НачалоМесяца(Период), ВыводитьСообщениеОбОтсутствииУчетнойПолитики, ДокументСсылка);
КонецФункции

// Функция возвращает возможные счета учета расчетов с контрагентом
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Контрагент  - по которому выполняется поиск
//  Договор     - по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
// Алгоритм выпорки
// 1. Организация, Контрагент, Договор. 
// 2. Организация, Контрагент, Договор(пустая). 
// 3. Организация, ГруппаКонтрагентов по иерархии, Догвор(пустая). 
// 4. Организация(пустая), Контрагент, Договор(пустая). 
// 5. Организация(пустая), ГруппаКонтрагентов по иерархии, Договор(пустая). 
// 6. Организация, Контрагент(пустая), Договор(пустая). 
// 7. Организация(пустая), Контрагент(пустая), Договор(пустая).
//
Функция ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Договор) Экспорт
	Возврат БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Договор);
КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()
