
#Область ПрограммныйИнтерфейс

#Область СчетаФактуры

///////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ СЕРИИ И НОМЕРА СЧЕТОВ-ФАКТУР

// Функция - Сформировать список серий СФ
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации	 - Организация, из которой подбираются серии бланков СФ
//  ДобавитьДПБУ - Булево						 - Признак добавления к результату "ДПБУ" (по умолчанию: Ложь)
// 
// Возвращаемое значение:
//   - массив - серий бланков СФ
//
Функция СформироватьСписокСерийСФ(Организация, ДобавитьДПБУ = Ложь) Экспорт
	// В данном запросе мы не используем отбор по периоду, т.к.
	// если проводить документ задним числом, то при отборе по периоду
	// запрос может вернуть серию бланка, ВСЕ номера которой уже 
	// использованы другими документами (числами позже).
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БланкиСчетовФактурОстатки.СерияБланкаСФ КАК СерияБланкаСФ
		|ИЗ
		|	РегистрНакопления.БланкиСчетовФактур.Остатки(
		|			,
		|			Организация = &Организация) КАК БланкиСчетовФактурОстатки
		|ГДЕ
		|	БланкиСчетовФактурОстатки.КоличествоОстаток > 0";
	
	Если ДобавитьДПБУ Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""ДПБУ"""
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Организация);
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СерияБланкаСФ");
КонецФункции

// Функция - Сформировать список номеров бланков СФ
//
// Параметры:
//  Организация		 - СправочникСсылка.Организации	 - Организация, из которой подбираются серии бланков СФ.
//  СерияБланкаСФ	 - Строка						 - Наименование серии, из которой подбираются номера бланков СФ.
//  НомерБланкаСФ	 - Строка						 - Номер бланка, начиная с которого подбираются бланки (по умолчанию "0").
// 
// Возвращаемое значение:
//   - СписокЗначений - номеров бланков СФ
//
Функция СформироватьСписокНомеровБланковСФ(Организация, СерияБланкаСФ, НомерБланкаСФ = "0") Экспорт
	
	СписокНомеров = Новый СписокЗначений;

	// В данном запросе мы не используем отбор по периоду, т.к.
	// если проводить документ задним числом, то при отборе по периоду
	// запрос может вернуть номер бланка, который уже использован
	// в другом документе (числом позже).
	Запрос = Новый Запрос;
	Запрос.Текст =	
		"ВЫБРАТЬ ПЕРВЫЕ 10
		|	БланкиСчетовФактурОстатки.НомерБланкаСФ КАК НомерБланкаСФ
		|ИЗ
		|	РегистрНакопления.БланкиСчетовФактур.Остатки(
		|			,
		|			Организация = &Организация
		|				И СерияБланкаСФ = &СерияБланкаСФ
		|				И НомерБланкаСФ >= &НомерБланкаСФ) КАК БланкиСчетовФактурОстатки
		|ГДЕ
		|	БланкиСчетовФактурОстатки.КоличествоОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерБланкаСФ";
	Запрос.УстановитьПараметр("СерияБланкаСФ", СерияБланкаСФ);
	Запрос.УстановитьПараметр("НомерБланкаСФ", НомерБланкаСФ);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат СписокНомеров;
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокНомеров.Добавить(Выборка.НомерБланкаСФ, Выборка.НомерБланкаСФ);		
	КонецЦикла; 
	
	Если СписокНомеров.Количество() = 10 Тогда 
		СписокНомеров.Добавить("000000", НСтр("ru = '<Выбрать другой номер>'"));
	КонецЕсли;	
	
	Возврат СписокНомеров;
КонецФункции

#КонецОбласти

// Функция - Проверяет запись учетной политики для организации в указанном периоде
//
// Параметры:
//  Организация									 - СправочникСсылка.Организации - Организация, по которой будет осуществлена проверка
//  Период										 - Дата - Период, за который нужно проверить существование
//  ВыводитьСообщениеОбОтсутствииУчетнойПолитики - Булево - Признак вывода сообщения пользователю об ошибке
//  ДокументСсылка								 - ДокументСсылка - Прикреплять сообщение об ошибке к объекту
// 
// Возвращаемое значение:
//  Результат - Булево - Признак существования учетной политики
//
Функция УчетнаяПолитикаСуществует(Организация, Период, ВыводитьСообщениеОбОтсутствииУчетнойПолитики = Ложь, ДокументСсылка = Неопределено) Экспорт
	Возврат БухгалтерскийУчетВызовСервераПовтИсп.УчетнаяПолитикаСуществует(Организация, НачалоМесяца(Период), ВыводитьСообщениеОбОтсутствииУчетнойПолитики, ДокументСсылка);
КонецФункции

// Функция возвращает возможные счета учета расчетов с контрагентом
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Контрагент  - по которому выполняется поиск
//  Договор     - по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
// Алгоритм выпорки
// 1. Организация, Контрагент, Договор. 
// 2. Организация, Контрагент, Договор(пустая). 
// 3. Организация, ГруппаКонтрагентов по иерархии, Догвор(пустая). 
// 4. Организация(пустая), Контрагент, Договор(пустая). 
// 5. Организация(пустая), ГруппаКонтрагентов по иерархии, Договор(пустая). 
// 6. Организация, Контрагент(пустая), Договор(пустая). 
// 7. Организация(пустая), Контрагент(пустая), Договор(пустая).
//
Функция ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Договор) Экспорт
	Возврат БухгалтерскийУчетСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Договор);
КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Настройка         - Строка - вид настройки, значение по умолчанию которой необходимо получить
//  ИмяПользователяИБ - Строка - имя пользователя ИБ программы, настройка которого
//				   запрашивается, если параметр не передается настройка возвращается для текущего пользователя
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчанию(Настройка, ИмяПользователяИБ = Неопределено) Экспорт
	Возврат БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(Настройка, ИмяПользователяИБ);
КонецФункции // ПолучитьЗначениеПоУмолчанию()

#КонецОбласти