
#Область ПроцедурыИФункцииРаботыСФискальнымРегистратором

// Функция выбирает чеки, пробитые в текущую смену и присваивает им статус Архивный.
//
// Возвращаеомое значение:
// Результат - Булево - результат записи документов.
//
Функция ЗаархивироватьДокументыПередЗакрытиемСмены() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	_ДемоЧек.Ссылка
	|ИЗ
	|	Документ._ДемоЧек КАК _ДемоЧек";
	
	ВыборкаДокументов = Запрос.Выполнить().Выгрузить();
	
	Результат = Истина;
	НачатьТранзакцию();
	Для Каждого Документ Из ВыборкаДокументов Цикл
		
		ДокОбъект = Документ.Ссылка.ПолучитьОбъект();
		ДокОбъект.Архивный = Истина;
		
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Исключение
			Результат = Ложь;
			Прервать;
		КонецПопытки;
		
	КонецЦикла;
	
	Если НЕ Результат Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполнить cоответствие cекций фискального регистратора для табличной части.
// 
Процедура ЗаполнитьСоответствиеСекцийДляТабличнойЧасти(Знач Товары, ТаблицаТоваровСоответствияCекциям) Экспорт
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		Если СтрокаТЧ.Номенклатура.Услуга Тогда 
			ТаблицаТоваровСоответствияCекциям.Вставить(СтрокаТЧ.НомерСтроки, 2);
		Иначе 
			ТаблицаТоваровСоответствияCекциям.Вставить(СтрокаТЧ.НомерСтроки, 1);
		КонецЕсли;	
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Функция возвращает ф.о "Использовать подключаемое оборудование".
//
Функция ИспользоватьПодключаемоеОборудование() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	
КонецФункции

// Функция возвращает первые 50 элементов из справочника Номенклатура.
//
// Возвращаемое значение:
// Результат - ТаблицаЗначений - таблица товаров.
//
Функция ВыбратьДемоДанные(Период, Организация, БезналичныйРасчет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 50
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	999.99 КАК Цена,
		|	ЗНАЧЕНИЕ(Справочник.СтавкиНДС.Стандарт) КАК СтавкаНДС,
		|	ЗНАЧЕНИЕ(Справочник.СтавкиНСП.Торговля) КАК СтавкаНСП,
		|	999.99 КАК Сумма
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЭтоГруппа = ЛОЖЬ";
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Вставить(6,"Количество");
	Результат.Колонки.Вставить(7,"СуммаНДС");
	Результат.Колонки.Вставить(8,"СуммаНСП");
	
	Для Каждого СтрокаТабличнойЧасти Из Результат Цикл
		СтрокаТабличнойЧасти.Количество = 1;
		
		ЗначениеСтавкиНДС = УчетНДСВызовСервера.ПолучитьСтавкуНДС(Период, СтрокаТабличнойЧасти.СтавкаНДС);
		ЗначениеСтавкиНСП = ?(БезналичныйРасчет, 0, УчетНДСВызовСервера.ПолучитьСтавкуНСП(Период, Организация, СтрокаТабличнойЧасти.СтавкаНСП));
		
		СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
											СтрокаТабличнойЧасти.Сумма,
											Истина,
											ЗначениеСтавкиНДС,
											ЗначениеСтавкиНСП);
											
		СтрокаТабличнойЧасти.СуммаНСП = УчетНДСКлиентСервер.РассчитатьСуммуНСП(
											СтрокаТабличнойЧасти.Сумма,
											Истина,
											ЗначениеСтавкиНДС,
											ЗначениеСтавкиНСП);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
