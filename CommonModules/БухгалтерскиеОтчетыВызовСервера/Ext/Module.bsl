////////////////////////////////////////////////////////////////////////////////
// Функции и процедуры обеспечения формирования бухгалтерских отчетов.
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	ВыводитьПолностью = Истина;
	
	Отказ = Ложь;
	ДанныеРасшифровкиОбъект = Неопределено;
	ПараметрыИсполненияОтчета = Неопределено;
	
	Если ПараметрыОтчета.Свойство("ОтчетОбъект") Тогда
		МенеджерОтчета = ПараметрыОтчета.ОтчетОбъект;
	Иначе
		МенеджерОтчета = Отчеты[ПараметрыОтчета.ИдентификаторОтчета];
	КонецЕсли;
	
	Попытка
		ПараметрыИсполненияОтчета = МенеджерОтчета.ПолучитьПараметрыИсполненияОтчета();
	Исключение
		// Запись в журнал регистрации не требуется
	КонецПопытки;
	
	ИспользоватьВнешниеНаборыДанных            = Ложь;
	ИспользоватьПриВыводеЗаголовка             = Ложь;
	ИспользоватьПриВыводеПодвала               = Ложь;
	ИспользоватьПередКомпоновкойМакета         = Ложь;
	ИспользоватьПослеКомпоновкиМакета          = Ложь;
	ИспользоватьПередВыводомЭлементаРезультата = Ложь;
	ИспользоватьПослеВыводаРезультата          = Ложь;
	ИспользоватьДанныеРасшифровки              = Истина;
	
	
	Если ПараметрыИсполненияОтчета <> Неопределено Тогда
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьВнешниеНаборыДанных") Тогда
			ИспользоватьВнешниеНаборыДанных = ПараметрыИсполненияОтчета.ИспользоватьВнешниеНаборыДанных;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПриВыводеЗаголовка") Тогда
			ИспользоватьПриВыводеЗаголовка = ПараметрыИсполненияОтчета.ИспользоватьПриВыводеЗаголовка;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПриВыводеПодвала") Тогда
			ИспользоватьПриВыводеПодвала = ПараметрыИсполненияОтчета.ИспользоватьПриВыводеПодвала;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПередКомпоновкойМакета") Тогда
			ИспользоватьПередКомпоновкойМакета = ПараметрыИсполненияОтчета.ИспользоватьПередКомпоновкойМакета;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПослеКомпоновкиМакета") Тогда
			ИспользоватьПослеКомпоновкиМакета = ПараметрыИсполненияОтчета.ИспользоватьПослеКомпоновкиМакета;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПередВыводомЭлементаРезультата") Тогда
			ИспользоватьПередВыводомЭлементаРезультата = ПараметрыИсполненияОтчета.ИспользоватьПередВыводомЭлементаРезультата;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПослеВыводаРезультата") Тогда
			ИспользоватьПослеВыводаРезультата = ПараметрыИсполненияОтчета.ИспользоватьПослеВыводаРезультата;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьДанныеРасшифровки") Тогда
			ИспользоватьДанныеРасшифровки = ПараметрыИсполненияОтчета.ИспользоватьДанныеРасшифровки;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыОтчета.СхемаКомпоновкиДанных) = Тип("Строка") Тогда
		Если ЭтоАдресВременногоХранилища(ПараметрыОтчета.СхемаКомпоновкиДанных) Тогда
			СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(ПараметрыОтчета.СхемаКомпоновкиДанных);
		КонецЕсли;
	Иначе
		СхемаКомпоновкиДанных = ПараметрыОтчета.СхемаКомпоновкиДанных;
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ПараметрыОтчета.НастройкиКомпоновкиДанных);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	ВыводитьЗаголовок = ?(ПараметрыОтчета.Свойство("ВыводитьЗаголовок") <> Ложь, ПараметрыОтчета.ВыводитьЗаголовок, Истина);
	ВыводитьПодписи   = ?(ПараметрыОтчета.Свойство("ВыводитьПодписи")   <> Ложь, ПараметрыОтчета.ВыводитьПодписи  , Истина);
	
	ВыводитьПодписиРуководителей = ?(ПараметрыОтчета.Свойство("ВыводитьПодписиРуководителей") <> Ложь,
	                                 ПараметрыОтчета.ВыводитьПодписиРуководителей, Ложь);
	
	Результат = Новый ТабличныйДокумент;
	
	Если ВыводитьЗаголовок Тогда
		Если ИспользоватьПриВыводеЗаголовка Тогда
			МенеджерОтчета.ПриВыводеЗаголовка(ПараметрыОтчета, Результат);
		Иначе
			ВывестиЗаголовокОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат);
		КонецЕсли;
	КонецЕсли;
	
	Если ВыводитьПолностью Тогда
		
		Если ИспользоватьПередКомпоновкойМакета Тогда
			МенеджерОтчета.ПередКомпоновкойМакета(ПараметрыОтчета, СхемаКомпоновкиДанных, КомпоновщикНастроек);
		КонецЕсли;
		КомпоновщикНастроек.Восстановить();
		
		НастройкиДляКомпоновкиМакета = КомпоновщикНастроек.ПолучитьНастройки();
		
		Если ПараметрыОтчета.Свойство("СвойМакетОформления") И ПараметрыОтчета.СвойМакетОформления
			И ПараметрыОтчета.Свойство("МакетОформления") И ЗначениеЗаполнено(ПараметрыОтчета.МакетОформления) Тогда
			СвойМакетОформления = МенеджерОтчета.ПолучитьМакет(ПараметрыОтчета.МакетОформления);
		Иначе
			УстановитьМакетОформленияОтчета(ПараметрыОтчета, НастройкиДляКомпоновкиМакета);
			СвойМакетОформления = Неопределено;
		КонецЕСли;
		
		//Сгенерируем макет компоновки данных при помощи компоновщика макета
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Попытка
			
			//В качестве схемы компоновки будет выступать схема самого отчета
			//В качестве настроек отчета - текущие настройки отчета
			//Данные расшифровки будем помещать в ДанныеРасшифровки
			Если ИспользоватьДанныеРасшифровки Тогда 
				МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиДляКомпоновкиМакета, ДанныеРасшифровкиОбъект, СвойМакетОформления);
			Иначе
				МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиДляКомпоновкиМакета,, СвойМакетОформления);
			КонецЕсли;
			
			Если ПараметрыОтчета.Свойство("КоличествоВыводимыхЗаписейВДиаграмме") Тогда
				СхемаКомпоновкиДанных.НаборыДанных[0].Запрос =
					СтрЗаменить(СхемаКомпоновкиДанных.НаборыДанных[0].Запрос, Врег("Первые ") + ПараметрыОтчета.КоличествоВыводимыхЗаписейВДиаграмме, Врег("Первые 7"));
			КонецЕсли;
			
			//Вызываем событие отчета
			Если ИспользоватьПослеКомпоновкиМакета Тогда
				МенеджерОтчета.ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки);
			КонецЕсли;
			
			Если ИспользоватьВнешниеНаборыДанных Тогда
				ВнешниеНаборыДанных = МенеджерОтчета.ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки);
			КонецЕсли;
		
			//Создадим и инициализируем процессор компоновки
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			Если ВнешниеНаборыДанных = Неопределено Тогда
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровкиОбъект, Истина);
			Иначе
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровкиОбъект, Истина);
			КонецЕсли;	
			
			ДанныеДляРасшифровки = Новый Структура("Объект, ДанныеРасшифровки", ПараметрыОтчета, ДанныеРасшифровкиОбъект); 
			ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеДляРасшифровки, ПараметрыОтчета.ДанныеРасшифровки);
			
			//Создадим и инициализируем процессор вывода результата
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			ПроцессорВывода.УстановитьДокумент(Результат);
			
			//Обозначим начало вывода
			ПроцессорВывода.НачатьВывод();
			
			Если ИспользоватьПередВыводомЭлементаРезультата Тогда
				//Основной цикл вывода отчета
				Пока Истина Цикл
					
					//Получим следующий элемент результата компоновки
					ЭлементРезультата = ПроцессорКомпоновки.Следующий();
					
					Если ЭлементРезультата = Неопределено Тогда
						//Следующий элемент не получен - заканчиваем цикл вывода
						Прервать;
					Иначе
						
						Отказ = Ложь;
						
						МенеджерОтчета.ПередВыводомЭлементаРезультата(ПараметрыОтчета, МакетКомпоновки, ДанныеРасшифровкиОбъект, ЭлементРезультата, Отказ);
						
						Если Не Отказ Тогда
							//Элемент получен - выведем его при помощи процессора вывода
							ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
				
				//Завершение вывода отчета
				ПроцессорВывода.ЗакончитьВывод();
			Иначе
				ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
			КонецЕсли;
						
		Исключение
			// Запись в журнал регистрации не требуется
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Пока ИнформацияОбОшибке.Причина <> Неопределено Цикл
				ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
			КонецЦикла;
			ТекстСообщения = НСтр("ru = 'Отчет не сформирован!'") + Символы.ПС + ИнформацияОбОшибке.Описание;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если ВыводитьПодписи Тогда
			Если ИспользоватьПриВыводеПодвала Тогда 
				МенеджерОтчета.ПриВыводеПодвала(ПараметрыОтчета, Результат);
			Иначе
				ВыводПодписейОтчета(ПараметрыОтчета, Результат);
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьПослеВыводаРезультата Тогда
			МенеджерОтчета.ПослеВыводаРезультата(ПараметрыОтчета, Результат);
		Иначе
			ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Новый Структура("Результат,ДанныеРасшифровки", Результат, ДанныеРасшифровки), АдресХранилища);
	
КонецПроцедуры

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Отчет     = Форма.Отчет;
	Параметры = Форма.Параметры;
	Если Параметры.Свойство("РежимРасшифровки") Тогда 
		Отчет.РежимРасшифровки = Параметры.РежимРасшифровки;
	КонецЕсли;
	
	Если ЕстьЭлементФормы(Форма, "ВидПериода") Тогда
		ВыборПериодаКлиентСервер.ЗаполнитьСписокВыбораВидПериода(Перечисления.ДоступныеПериодыОтчета.День,
			Форма.Элементы.ВидПериода.СписокВыбора, Форма.ВидПериода);
	КонецЕсли;
		
	Если Параметры.Свойство("ВидРасшифровки") Тогда 
		// 1 - из временного хранилища, 2 - из параметров формы
		Если Параметры.ВидРасшифровки = 1 Тогда
			ДанныеОбъекта = ПолучитьИзВременногоХранилища(Параметры.АдресНастроек);
			ПользовательскиеНастройки = ДанныеОбъекта.НастройкиРасшифровки[Параметры.ИДРасшифровки];
		ИначеЕсли Параметры.ВидРасшифровки = 2 Тогда
			ПользовательскиеНастройки = Параметры.ПользовательскиеНастройки;
		КонецЕсли;
		
		Если ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта") 
			И ЗначениеЗаполнено(ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта)Тогда
			Форма.УстановитьТекущийВариант(ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта);
		КонецЕсли;
		
		// Установка пользовательских настроек
		Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
		Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
		Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
		
		// Загрузка пользовательских настроек в компоновщик настроек отчета
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
		
		// Получение основных настроек компоновщика настроек, с учетом пользовательских настроек
		Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
		
		// Загрузка основных настроек
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		
		// Очистка пользовательских настроек
		Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
		Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
		Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		
		// Установка значений реквизитов отчета
		Для Каждого ЭлементСтруктуры Из ПользовательскиеНастройки.ДополнительныеСвойства Цикл
			Если Отчет.Свойство(ЭлементСтруктуры.Ключ) Тогда
				Отчет[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
			КонецЕсли;
			Если ЭлементСтруктуры.Ключ = "СписокСтруктурныхЕдиниц" И ЕстьРеквизитФормы(Форма, "СписокСтруктурныхЕдиниц") Тогда
				Форма.СписокСтруктурныхЕдиниц = ЭлементСтруктуры.Значение;
			КонецЕсли;
			Если ЭлементСтруктуры.Ключ = "СписокПодразделений" И ЕстьРеквизитФормы(Форма, "СписокПодразделений") Тогда
				Форма.СписокПодразделений = ЭлементСтруктуры.Значение;
			КонецЕсли;
			Если ЭлементСтруктуры.Ключ = "СписокВладельцевГоловныхПодразделений" И ЕстьРеквизитФормы(Форма, "СписокВладельцевГоловныхПодразделений") Тогда
				Форма.СписокВладельцевГоловныхПодразделений = ЭлементСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Если ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ПараметрыВыводаРасшифровки") Тогда
			ПараметрыВыводаРасшифровки = ПользовательскиеНастройки.ДополнительныеСвойства.ПараметрыВыводаРасшифровки;
			Для Каждого ЭлементСтруктуры Из ПараметрыВыводаРасшифровки Цикл
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Отчет.КомпоновщикНастроек, ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			КонецЦикла;
		КонецЕсли;
		
		Если ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта") Тогда
			Параметры.КлючВарианта = ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта;
		КонецЕсли;
	КонецЕсли;

	Если ЕстьРеквизитФормы(Форма, "ОписанияТиповВидовСубконто") Тогда
		Форма.ОписанияТиповВидовСубконто = Новый Структура;
		Форма.ОписанияТиповВидовСубконто.Вставить("Номенклатура"                  , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура.ТипЗначения);
		Форма.ОписанияТиповВидовСубконто.Вставить("Склад"                         , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады.ТипЗначения);
		Форма.ОписанияТиповВидовСубконто.Вставить("Контрагент"                    , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты.ТипЗначения);
		Форма.ОписанияТиповВидовСубконто.Вставить("ДоговорКонтрагента"            , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры.ТипЗначения);
		Форма.ОписанияТиповВидовСубконто.Вставить("Партия"                        , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии.ТипЗначения);
	КонецЕсли;
	
	ОтчетОбъект = Форма.РеквизитФормыВЗначение("Отчет");
	Если Не ЗначениеЗаполнено(Форма.СхемаКомпоновкиДанных) Тогда
		Форма.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, Форма.УникальныйИдентификатор);
	КонецЕсли;
	Форма.ДанныеРасшифровки = ПоместитьВоВременноеХранилище(Форма.ДанныеРасшифровки, Форма.УникальныйИдентификатор);
	
	МенеджерОтчета = Отчеты[БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(Форма)];
	Если ЕстьРеквизитФормы(Форма, "НаборПоказателей") Тогда		
		Форма.НаборПоказателей = Новый ФиксированныйМассив(МенеджерОтчета.ПолучитьНаборПоказателей());
	КонецЕсли;
	
	ПараметрМакетОформления = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки, "МакетОформления");
	СписокМакетовОформления = БухгалтерскиеОтчетыВызовСервераПовтИсп.ПолучитьСписокМакетовОформления();
	Для Каждого ЭлементСписка Из СписокМакетовОформления Цикл
		Если ЕстьЭлементФормы(Форма, "МакетОформления") Тогда
			Форма.Элементы.МакетОформления.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЕсли;
	КонецЦикла;
	Если ЕстьРеквизитФормы(Форма, "МакетОформления") Тогда
		Если ПараметрМакетОформления.Использование И Не ПустаяСтрока(ПараметрМакетОформления.Значение) Тогда
			Форма.МакетОформления = ПараметрМакетОформления.Значение;
		Иначе
			ОсновнойМакетОтчетов = СписокМакетовОформления.НайтиПоЗначению("МакетОформленияОтчетов");
			Если ОсновнойМакетОтчетов <> Неопределено Тогда
				Форма.МакетОформления = ОсновнойМакетОтчетов.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Если Отчет.РежимРасшифровки Тогда
		СтандартнаяОбработка = Ложь;
		Попытка
			Форма.ИзменениеСхемыКомпоновкиДанныхНаСервере();
		Исключение
			// Запись в журнал регистрации не требуется
		КонецПопытки;
		Если Параметры.Свойство("ЗаполняемыеНастройки") Тогда
			Попытка
				Форма.ЗаполнитьНастройкамиПоУмолчанию(Параметры.ЗаполняемыеНастройки);
			Исключение
				// Запись в журнал регистрации не требуется
			КонецПопытки;
		КонецЕсли;
		Если ЕстьРеквизитФормы(Форма, "ВыводитьЗаголовок") Тогда
			Форма.ВыводитьЗаголовок = Истина;
		КонецЕсли;
		Форма.СформироватьОтчетНаСервере();
	Иначе
		УстановитьНастройкиПоУмолчанию(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСохраненииПользовательскихНастроекНаСервере(ФормаОтчета, Настройки, СохранятьТолькоРеквизиты = Ложь, СохраняемыеРеквизитыФормы = Неопределено) Экспорт
	
	ОтчетОбъект = ФормаОтчета.РеквизитФормыВЗначение("Отчет");
	
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	
	Если НЕ СохранятьТолькоРеквизиты Тогда
		ТекущиеНастройки = ОтчетОбъект.КомпоновщикНастроек.Настройки;
		
		// Очистка пользовательских настроек
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		
		// Установка пользовательских настроек
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
	КонецЕсли;

	// Сохранение реквизитов отчета
	ДополнительныеСвойства = Новый Структура;
	Для Каждого Реквизит Из ОтчетМетаданные.Реквизиты Цикл
		Если Реквизит.Имя <> "РежимРасшифровки" Тогда
			ДополнительныеСвойства.Вставить(Реквизит.Имя, ОтчетОбъект[Реквизит.Имя]);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Реквизит Из ОтчетМетаданные.ТабличныеЧасти Цикл
		ДополнительныеСвойства.Вставить(Реквизит.Имя, ОтчетОбъект[Реквизит.Имя].Выгрузить());
	КонецЦикла;
	
	// Сохранение реквизитов формы
	Если ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьЗаголовок") Тогда
		ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ФормаОтчета.ВыводитьЗаголовок);
	КонецЕсли;
	Если ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьПодписиРуководителей") Тогда
		ДополнительныеСвойства.Вставить("ВыводитьПодписиРуководителей", ФормаОтчета.ВыводитьПодписиРуководителей);
	КонецЕсли;
	Если ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьПодписи") Тогда
		ДополнительныеСвойства.Вставить("ВыводитьПодписи", ФормаОтчета.ВыводитьПодписи);
	КонецЕсли;
	Если ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьДиаграмму") Тогда
		ДополнительныеСвойства.Вставить("ВыводитьДиаграмму", ФормаОтчета.ВыводитьДиаграмму);
	КонецЕсли;
	Если ЕстьРеквизитФормы(ФормаОтчета, "МакетОформления") Тогда
		ДополнительныеСвойства.Вставить("МакетОформления", ФормаОтчета.МакетОформления);
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(ФормаОтчета, "СкрыватьНастройкиПриФормированииОтчета") Тогда
		ДополнительныеСвойства.Вставить("СкрыватьНастройкиПриФормированииОтчета", ФормаОтчета.СкрыватьНастройкиПриФормированииОтчета);
	КонецЕсли;
	
	Если ЕстьЭлементФормы(ФормаОтчета, "ГруппаПанельНастроек") Тогда
		Если Настройки.ДополнительныеСвойства.Свойство("ПанельНастроекСкрытаАвтоматически")
			И Настройки.ДополнительныеСвойства.ПанельНастроекСкрытаАвтоматически = Истина Тогда
			ДополнительныеСвойства.Вставить("ВидимостьПанелиНастроек", Истина);
		Иначе
			ДополнительныеСвойства.Вставить("ВидимостьПанелиНастроек", ФормаОтчета.Элементы.ГруппаПанельНастроек.Видимость);
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(ФормаОтчета, "СписокСтруктурныхЕдиниц") Тогда
		ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", ФормаОтчета.СписокСтруктурныхЕдиниц);
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(ФормаОтчета, "СписокПодразделений") Тогда
		ДополнительныеСвойства.Вставить("СписокПодразделений", ФормаОтчета.СписокПодразделений);
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(ФормаОтчета, "СписокВладельцевГоловныхПодразделений") Тогда
		ДополнительныеСвойства.Вставить("СписокВладельцевГоловныхПодразделений", ФормаОтчета.СписокВладельцевГоловныхПодразделений);
	КонецЕсли;
	
	Если СохраняемыеРеквизитыФормы <> Неопределено И ТипЗнч(СохраняемыеРеквизитыФормы) = Тип("Массив") Тогда
		Для Каждого РеквизитФормы Из СохраняемыеРеквизитыФормы Цикл
			ДополнительныеСвойства.Вставить(РеквизитФормы, ФормаОтчета[РеквизитФормы]);
		КонецЦикла;
	КонецЕсли;
	
	Настройки.ДополнительныеСвойства.Вставить("ДанныеОтчета", Новый ХранилищеЗначения(ДополнительныеСвойства));
	
КонецПроцедуры

Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(ФормаОтчета, Настройки, ЗагружатьТолькоРеквизиты = Ложь, ЗагружаемыеРеквизитыФормы = Неопределено) Экспорт

	Если Настройки = Неопределено Тогда
		// Установка настроек по умолчанию
		УстановитьНастройкиПоУмолчанию(ФормаОтчета);		
	Иначе 
		// Восстановление сохраненных настроек
		Если Настройки.ДополнительныеСвойства.Свойство("ДанныеОтчета") Тогда
			ДополнительныеСвойства = Настройки.ДополнительныеСвойства.ДанныеОтчета.Получить();
			Для Каждого ЭлементСтруктуры Из ДополнительныеСвойства Цикл
				// Восстановление реквизитов отчета
				Если ФормаОтчета.Отчет.Свойство(ЭлементСтруктуры.Ключ) Тогда
					Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("ТаблицаЗначений") Тогда
						ФормаОтчета.Отчет[ЭлементСтруктуры.Ключ].Загрузить(ЭлементСтруктуры.Значение);
					ИначеЕсли ЭлементСтруктуры.Ключ <> "РежимРасшифровки" Тогда
						ФормаОтчета.Отчет[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
					КонецЕсли;
				КонецЕсли;
				
				// Восстановление реквизитов формы
				Если ЭлементСтруктуры.Ключ = "ВыводитьЗаголовок" И ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьЗаголовок") Тогда
					ФормаОтчета.ВыводитьЗаголовок = ЭлементСтруктуры.Значение;
				ИначеЕсли ЭлементСтруктуры.Ключ = "ВыводитьПодписи" И ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьПодписи") Тогда
					ФормаОтчета.ВыводитьПодписи = ЭлементСтруктуры.Значение;
				ИначеЕсли ЭлементСтруктуры.Ключ = "ВыводитьПодписиРуководителей" И ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьПодписиРуководителей") Тогда
					ФормаОтчета.ВыводитьПодписиРуководителей = ЭлементСтруктуры.Значение;
				ИначеЕсли ЭлементСтруктуры.Ключ = "ВыводитьДиаграмму" И ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьДиаграмму") Тогда
					ФормаОтчета.ВыводитьДиаграмму = ЭлементСтруктуры.Значение;
				ИначеЕсли ЭлементСтруктуры.Ключ = "МакетОформления" И ЕстьРеквизитФормы(ФормаОтчета, "МакетОформления") Тогда
					ФормаОтчета.МакетОформления = ЭлементСтруктуры.Значение;
					БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(
						ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, 
						"МакетОформления", ФормаОтчета.МакетОформления);
				КонецЕсли;
				Если ЭлементСтруктуры.Ключ = "СкрыватьНастройкиПриФормированииОтчета" И ЕстьРеквизитФормы(ФормаОтчета, "СкрыватьНастройкиПриФормированииОтчета") Тогда
					ФормаОтчета.СкрыватьНастройкиПриФормированииОтчета = ЭлементСтруктуры.Значение;		
				КонецЕсли;
				Если ЭлементСтруктуры.Ключ = "ВидимостьПанелиНастроек" И НЕ ЕстьЭлементФормы(ФормаОтчета, "РазделыОтчета") Тогда
					Если ЕстьЭлементФормы(ФормаОтчета, "ПанельНастроек") Тогда
						БухгалтерскиеОтчетыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(
							ФормаОтчета.Элементы.ПанельНастроек, ДополнительныеСвойства.ВидимостьПанелиНастроек);
					КонецЕсли;
					Если ЕстьЭлементФормы(ФормаОтчета, "ГруппаПанельНастроек") Тогда
 						ФормаОтчета.Элементы.ГруппаПанельНастроек.Видимость = ДополнительныеСвойства.ВидимостьПанелиНастроек;
					КонецЕсли;
				КонецЕсли;
				Если ЭлементСтруктуры.Ключ = "СписокСтруктурныхЕдиниц" И ЕстьРеквизитФормы(ФормаОтчета, "СписокСтруктурныхЕдиниц") Тогда
					ФормаОтчета.СписокСтруктурныхЕдиниц = ЭлементСтруктуры.Значение;
					Если ФормаОтчета.Отчет.Свойство("ПредставлениеСпискаОрганизаций") Тогда
						ФормаОтчета.Отчет.ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ФормаОтчета.СписокСтруктурныхЕдиниц);
					КонецЕсли;
					Если ФормаОтчета.Отчет.Свойство("ПредставлениеСпискаСтруктурныхЕдиниц") Тогда
						ФормаОтчета.Отчет.ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ФормаОтчета.СписокСтруктурныхЕдиниц);
					КонецЕсли;
				КонецЕсли;
				Если ЭлементСтруктуры.Ключ = "СписокПодразделений" И ЕстьРеквизитФормы(ФормаОтчета, "СписокПодразделений") Тогда
					ФормаОтчета.СписокПодразделений = ЭлементСтруктуры.Значение;
					Если ФормаОтчета.Отчет.Свойство("ПредставлениеСпискаПодразделений") Тогда
						ФормаОтчета.Отчет.ПредставлениеСпискаПодразделений = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ФормаОтчета.СписокПодразделений);
					КонецЕсли;
				КонецЕсли;
				Если ЭлементСтруктуры.Ключ = "СписокВладельцевГоловныхПодразделений" И ЕстьРеквизитФормы(ФормаОтчета, "СписокВладельцевГоловныхПодразделений") Тогда
					ФормаОтчета.СписокВладельцевГоловныхПодразделений = ЭлементСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ДополнительныеСвойства.Свойство("ВыводитьДиаграмму") И ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьДиаграмму") Тогда
				ФормаОтчета.ВыводитьДиаграмму = Истина;
			КонецЕсли;
		КонецЕсли;
		Если Не ЗагружатьТолькоРеквизиты Тогда
			ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
			
			// Установка пользовательских настроек
			ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
			ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
			ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
			
			// Перенос пользовательских настроек в основные
			ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки);
			ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПолучитьНастройки());
			
			// Очистка пользовательских настроек
			ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
			ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
			ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
			ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		КонецЕсли;		
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(ФормаОтчета, "МинимальныйВидПериода") Тогда
		МинимальныйВидПериода = ФормаОтчета.МинимальныйВидПериода;
	Иначе
		МинимальныйВидПериода = Неопределено;
	КонецЕсли;
	
	ИдентификаторОбъекта = БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ФормаОтчета);
	Если ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьХозрасчетный"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьНалоговый" Тогда
		Если ФормаОтчета.Отчет.ДополнительныеПоля.НайтиСтроки(Новый Структура("Поле", "Счет.Наименование")).Количество() = 0 Тогда
			НоваяСтрока = ФормаОтчета.Отчет.ДополнительныеПоля.Добавить();
			НоваяСтрока.Представление = "Выводить наименование счета";
			НоваяСтрока.Поле          = "Счет.Наименование";
			НоваяСтрока.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗагружаемыеРеквизитыФормы <> Неопределено
		И ТипЗнч(ЗагружаемыеРеквизитыФормы) = Тип("Массив")
		И ДополнительныеСвойства <> Неопределено Тогда
		
		Для Каждого РеквизитФормы Из ЗагружаемыеРеквизитыФормы Цикл
			Если ДополнительныеСвойства.Свойство(РеквизитФормы) Тогда
				ФормаОтчета[РеквизитФормы] = ДополнительныеСвойства[РеквизитФормы];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

Процедура УстановитьНастройкиПоУмолчанию(ФормаОтчета) Экспорт
	
	Отчет = ФормаОтчета.Отчет;
	
	ОсновнаяОрганизация = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
	
	Если Отчет.Свойство("НачалоПериода") Тогда
		Отчет.НачалоПериода = НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	Если Отчет.Свойство("КонецПериода") Тогда
		Отчет.КонецПериода  = КонецМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	
	Если Отчет.Свойство("Налогоплательщик") Тогда
		Отчет.Налогоплательщик = ОсновнаяОрганизация;
	КонецЕсли;
	
	Если (Отчет.Свойство("ПредставлениеСпискаОрганизаций") ИЛИ Отчет.Свойство("ПредставлениеСпискаСтруктурныхЕдиниц"))
		И ЕстьРеквизитФормы(ФормаОтчета, "СписокСтруктурныхЕдиниц") Тогда
		
		ФормаОтчета.СписокСтруктурныхЕдиниц.Очистить();
		
		ФормаОтчета.СписокСтруктурныхЕдиниц.Добавить(ОсновнаяОрганизация);
			
	КонецЕсли;
	
	Если Отчет.Свойство("ПредставлениеСпискаПодразделений") И ЕстьРеквизитФормы(ФормаОтчета, "СписокПодразделений") Тогда
		Если ЕстьРеквизитФормы(ФормаОтчета, "СписокВладельцевГоловныхПодразделений") Тогда
			Если ФормаОтчета.СписокПодразделений.НайтиПоЗначению(Справочники.ПодразделенияОрганизаций.ПустаяСсылка()) <> Неопределено
				И ЕстьРеквизитФормы(ФормаОтчета, "СписокСтруктурныхЕдиниц") И ФормаОтчета.СписокСтруктурныхЕдиниц.Количество() > 0 Тогда
				ФормаОтчета.СписокВладельцевГоловныхПодразделений.Добавить(ФормаОтчета.СписокСтруктурныхЕдиниц[0].Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Отчет.Свойство("ПоказательБУ") Тогда
		Отчет.ПоказательБУ = Истина;
	КонецЕсли;
	
	Если Отчет.Свойство("СальдоНаНачалоДт") Тогда
		Отчет.СальдоНаНачалоДт   = Истина;	
		Отчет.СальдоНаНачалоКт   = Истина;
		Отчет.СальдоНаКонецДт    = Истина;
		Отчет.СальдоНаКонецКт    = Истина;
		Отчет.ОборотыЗаПериодДт  = Истина;
		Отчет.ОборотыЗаПериодКт  = Истина;
	КонецЕсли;
	
	Если Отчет.Свойство("ОборотыСоСчетамиДт") Тогда
		Отчет.ОборотыСоСчетамиДт = Истина;
		Отчет.ОборотыСоСчетамиКт = Истина;
	КонецЕсли;
	
	ИдентификаторОбъекта = БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ФормаОтчета);
	Если ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьХозрасчетный"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьНалоговый" Тогда
		Если Отчет.ДополнительныеПоля.НайтиСтроки(Новый Структура("Поле", "Счет.Наименование")).Количество() = 0 Тогда
			НоваяСтрока = ФормаОтчета.Отчет.ДополнительныеПоля.Добавить();
			НоваяСтрока.Представление = "Выводить наименование счета";
			НоваяСтрока.Поле          = "Счет.Наименование";
			НоваяСтрока.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Установка начальных значений Группировки
	Если Отчет.Свойство("Группировка") Тогда
		Отчет.Группировка.Очистить();
		Для Каждого ЭлементСтруктуры Из Отчет.КомпоновщикНастроек.Настройки.Структура Цикл
			Если ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
				Для Каждого Серия Из ЭлементСтруктуры.Серии Цикл
					Если Серия.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Серия, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Точка Из ЭлементСтруктуры.Точки Цикл
					Если Точка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Точка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
				Для Каждого Колонка Из ЭлементСтруктуры.Колонки Цикл
					Если Колонка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Колонка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Строка Из ЭлементСтруктуры.Строки Цикл
					Если Строка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Строка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				Если ЭлементСтруктуры.Имя = "Группировка" Тогда
					Отчет.Группировка.Очистить();
					ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, ЭлементСтруктуры, Отчет.Группировка);
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Отчет.Свойство("Интервалы") Тогда
		Отчет.Интервалы.Очистить();
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 7;
		НоваяСтрока.Представление = "До 7 дней";
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 15;
		НоваяСтрока.Представление = "От 8 до 15 дней";
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 30;
		НоваяСтрока.Представление = "От 16 до 30 дней";
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 60;
		НоваяСтрока.Представление = "От 31 до 60 дней";
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 90;
		НоваяСтрока.Представление = "От 61 до 90 дней";
	КонецЕсли;
	
	Если Отчет.Свойство("Период") Тогда
		Отчет.Период = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьЗаголовок") Тогда
		ФормаОтчета.ВыводитьЗаголовок = Истина;
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьПодписи") Тогда
		ФормаОтчета.ВыводитьПодписи = Ложь;
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьПодписиРуководителей") Тогда
		ФормаОтчета.ВыводитьПодписи = Ложь;
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьДиаграмму") Тогда
		ФормаОтчета.ВыводитьДиаграмму = Истина;
	КонецЕсли;
	
	Если Отчет.Свойство("РазмещениеДополнительныхПолей") Тогда
		Отчет.РазмещениеДополнительныхПолей = ПолучитьРазмещениеДополнительныхПолей(Отчет.КомпоновщикНастроек);
	КонецЕсли;
	
	Если Отчет.Свойство("Группировка") И Отчет.Свойство("ДополнительныеПоля") Тогда
		ЗаполнитьДополнительныеПоляИзНастроек(Отчет.КомпоновщикНастроек, Отчет.ДополнительныеПоля, Отчет.Группировка);
	КонецЕсли;
	
	Если Отчет.Свойство("ПоказательПоступление") Тогда
		Отчет.ПоказательПоступление = Истина;
	КонецЕсли;
	Если Отчет.Свойство("ПоказательРасход") Тогда
		Отчет.ПоказательРасход = Истина;
	КонецЕсли;
	
	Если Отчет.Свойство("ПоказательЗадолженность") Тогда
		Отчет.ПоказательЗадолженность = Истина;
	КонецЕсли;
	Если Отчет.Свойство("ПоказательПросроченнаяЗадолженность") Тогда
		Отчет.ПоказательПросроченнаяЗадолженность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(Знач Результат, КэшВыделеннойОбласти) Экспорт
	
	Сумма = 0;
	Для Каждого КлючИЗначение Из КэшВыделеннойОбласти Цикл
		СтруктураАдресВыделеннойОбласти = КлючИЗначение.Значение;
		Для ИндексСтрока = СтруктураАдресВыделеннойОбласти.Верх По СтруктураАдресВыделеннойОбласти.Низ Цикл
			Для ИндексКолонка = СтруктураАдресВыделеннойОбласти.Лево По СтруктураАдресВыделеннойОбласти.Право Цикл
				Попытка
					Ячейка = Результат.Область(ИндексСтрока, ИндексКолонка, ИндексСтрока, ИндексКолонка);
					Если Ячейка.Видимость = Истина Тогда
						Если Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
							Сумма = Сумма + Ячейка.Значение;
						ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
							Сумма = Сумма + Число(СтрЗаменить(Ячейка.Текст, " ", ""));
						КонецЕсли;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	КэшВыделеннойОбласти.Вставить("Сумма", Сумма);
	
	Возврат Сумма;
	
КонецФункции

Процедура УстановитьМакетОформленияОтчета(ПараметрыОтчета, НастройкаКомпоновкиДанных) Экспорт
	
	Если ПараметрыОтчета.Свойство("МакетОформления") И ЗначениеЗаполнено(ПараметрыОтчета.МакетОформления) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", ПараметрыОтчета.МакетОформления);
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "МакетОформленияОтчетов");  // "МакетОформленияОтчетовЗеленый" "green" "Main"
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиЗаголовокОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат, ПланСчетов = "Хозрасчетный") Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
	
	// Организация
	Если ПараметрыОтчета.Свойство("СписокСтруктурныхЕдиниц") И ЗначениеЗаполнено(ПараметрыОтчета.СписокСтруктурныхЕдиниц) Тогда
		ТекстОрганизация = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ПараметрыОтчета.СписокСтруктурныхЕдиниц);
		ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
		Результат.Вывести(ОбластьОрганизация);
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ОтчетОбъект") Тогда
		МенеджерОтчета   = ПараметрыОтчета.ОтчетОбъект;
		МетаданныеОтчета = ПараметрыОтчета.ОтчетОбъект.Метаданные();
	Иначе
		МенеджерОтчета   = Отчеты[ПараметрыОтчета.ИдентификаторОтчета];
		МетаданныеОтчета = Метаданные.Отчеты[ПараметрыОтчета.ИдентификаторОтчета];
	КонецЕсли;
	
	// Текст заголовка
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = МенеджерОтчета.ПолучитьТекстЗаголовка(ПараметрыОтчета);
	Результат.Вывести(ОбластьЗаголовок);
	
	ИдентификаторОбъекта = "ОтчетОбъект." + ПараметрыОтчета.ИдентификаторОтчета;
	
	// Показатели отчета
	ПоказыватьВыводимыеДанные = Ложь;
	ТекстВыводимыеДанные = "";
	КоличествоПоказателей = 0;
	
	Если ПараметрыОтчета.Свойство("НаборПоказателей") Тогда
		Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] И ИмяПоказателя <> "РазвернутоеСальдо" Тогда
				ТекстВыводимыеДанные = ТекстВыводимыеДанные + МетаданныеОтчета.Реквизиты["Показатель" + ИмяПоказателя].Синоним + ", ";
				КоличествоПоказателей = КоличествоПоказателей + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ТекстВыводимыеДанные = Лев(ТекстВыводимыеДанные, СтрДлина(ТекстВыводимыеДанные) - 2);
	
	Если КоличествоПоказателей > 1 Тогда
		ПоказыватьВыводимыеДанные = Истина;
	КонецЕсли;
	Если ПоказыватьВыводимыеДанные Тогда 
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Выводимые данные:'");
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстВыводимыеДанные;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	// Отбор
	ТекстОтбор = Строка(КомпоновщикНастроек.Настройки.Отбор);
	ТекстПодразделение = "";
	
	ЕстьОтборПоПодразделению = Ложь;
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") 
				И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда 
				ЕстьОтборПоПодразделению = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьОтборПоПодразделению Тогда 
		Если ПараметрыОтчета.Свойство("СписокПодразделений") И ЗначениеЗаполнено(ПараметрыОтчета.СписокПодразделений) Тогда
			ТекстПодразделение = СтрШаблон(НСтр("ru = 'Подразделение В группе ""%1""'"), 
				БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ПараметрыОтчета.СписокПодразделений));
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстОтбор) И Не ПустаяСтрока(ТекстПодразделение) Тогда
			ТекстОтбор = ТекстПодразделение + НСтр("ru = ' И '") + ТекстОтбор;
		ИначеЕсли ПустаяСтрока(ТекстОтбор) И Не ПустаяСтрока(ТекстПодразделение) Тогда
			ТекстОтбор = ТекстПодразделение;
		КонецЕсли;
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстОтбор) Тогда
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Отбор:'");
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстОтбор;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	Если ИдентификаторОбъекта <>  ("ОтчетОбъект.ОборотноСальдоваяВедомость" + ПланСчетов) 
		И ИдентификаторОбъекта <> ("ОтчетОбъект.КарточкаСчета" + ПланСчетов)
		И ИдентификаторОбъекта <> ("ОтчетОбъект.КарточкаСубконто" + ПланСчетов)
		И ИдентификаторОбъекта <> ("ОтчетОбъект.СверкаДанныхБУ_НУ")
        И ИдентификаторОбъекта <> ("ОтчетОбъект.ОтчетПоПроводкам" + ПланСчетов) Тогда
		// Сортировка
		ТекстСортировка = "";
		Для Каждого СтрокаПорядок Из КомпоновщикНастроек.Настройки.Порядок.Элементы Цикл
			Если СтрокаПорядок.Использование Тогда
				ТекстСортировка = ТекстСортировка + БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(КомпоновщикНастроек, СтрокаПорядок.Поле);
				ТекстСортировка = ТекстСортировка + " " + Строка(СтрокаПорядок.ТипУпорядочивания) + ", ";
			КонецЕсли;
		КонецЦикла;
		ТекстСортировка = Лев(ТекстСортировка, СтрДлина(ТекстСортировка) - 2);
		
		Если Не ПустаяСтрока(ТекстСортировка) Тогда
			ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Сортировка:'");
			ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстСортировка;
			Результат.Вывести(ОбластьОписаниеНастроек);
		КонецЕсли;
	КонецЕсли;
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	Результат.Области.Заголовок.Видимость = ПараметрыОтчета.ВыводитьЗаголовок;
	
КонецПроцедуры

Процедура ВыводПодписейОтчета(ПараметрыОтчета, Результат) Экспорт
	
	Если ПараметрыОтчета.Свойство("ВыводитьПодписиРуководителей") И ПараметрыОтчета.ВыводитьПодписиРуководителей Тогда
		ВыводПодписейРуководителей(ПараметрыОтчета, Результат);
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ВыводитьПодписи") И ПараметрыОтчета.ВыводитьПодписи Тогда 
		Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
		ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
		
		Если ПараметрыОтчета.Свойство("ПримечаниеПодписи") И ЗначениеЗаполнено(ПараметрыОтчета.ПримечаниеПодписи) Тогда
			ОбластьПодписи.Параметры.ТекстПримечание = ПараметрыОтчета.ПримечаниеПодписи;
		КонецЕсли;
		
		Результат.Вывести(ОбластьПодписи);
		
		Результат.Области.Подписи.Видимость = ПараметрыОтчета.ВыводитьПодписи;
	КонецЕсли;

	Если ПараметрыОтчета.Свойство("ВыводитьПодписиОтветственныеЛица") И ПараметрыОтчета.ВыводитьПодписиОтветственныеЛица Тогда
		ВыводПодписейРуководителей(ПараметрыОтчета, Результат);
	КонецЕсли;
	
КонецПроцедуры

Функция КоличествоПоказателей(ПараметрыОтчета) Экспорт 
	
	КоличествоПоказателей = 0;
	Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] И ИмяПоказателя <> "РазвернутоеСальдо" Тогда
			КоличествоПоказателей = КоличествоПоказателей + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоПоказателей;
	
КонецФункции

Процедура ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек = Неопределено, ГруппировкаОтчета = Неопределено) Экспорт
	
	Если ПараметрыОтчета.Свойство("РазмещениеДополнительныхПолей") Тогда
		Если ПараметрыОтчета.РазмещениеДополнительныхПолей = 0 Тогда
			РасположениеРеквизитов 	= РасположениеРеквизитовКомпоновкиДанных.ВместеСВладельцем;
			РасположениеПолей 		= РасположениеПоляКомпоновкиДанных.Вместе;
		ИначеЕсли ПараметрыОтчета.РазмещениеДополнительныхПолей = 1 Тогда
			РасположениеРеквизитов  = РасположениеРеквизитовКомпоновкиДанных.Отдельно;
			РасположениеПолей       = РасположениеПоляКомпоновкиДанных.Авто;
		КонецЕсли;
	Иначе
		РасположениеРеквизитов  = РасположениеРеквизитовКомпоновкиДанных.ВместеСВладельцем;
		РасположениеПолей 		= РасположениеПоляКомпоновкиДанных.Авто;
	КонецЕсли;
	
	Если ГруппировкаОтчета <> Неопределено И ТипЗнч(ГруппировкаОтчета) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
		ГруппировкаОтчета.Расположение = РасположениеПолей;	
	КонецЕсли;	
	
	Если КомпоновщикНастроек <> Неопределено Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(КомпоновщикНастроек, "РасположениеРеквизитов", РасположениеРеквизитов); 
	Иначе	
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(ПараметрыОтчета.НастройкиКомпоновкиДанных, "РасположениеРеквизитов", РасположениеРеквизитов); 
	КонецЕсли;
			
	Для Каждого ПолеГруппировки Из ПараметрыОтчета.ДополнительныеПоля Цикл 
		Если ПолеГруппировки.Использование Тогда
			Если ГруппировкаОтчета <> Неопределено Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппировкаОтчета, ПолеГруппировки.Поле);
			Иначе	
				Если КомпоновщикНастроек <> Неопределено Тогда
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, ПолеГруппировки.Поле);
				Иначе	
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПараметрыОтчета.НастройкиКомпоновкиДанных, ПолеГруппировки.Поле);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьГруппировкуПоПериоду(ПараметрыОтчета, Структура) Экспорт
	
	Если ПараметрыОтчета.Периодичность > 0 Тогда
		Если ТипЗнч(Структура) = Тип("ГруппировкаКомпоновкиДанных") Тогда 
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ИначеЕсли ТипЗнч(Структура) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Структура = Структура.Структура.Добавить();
		КонецЕсли;
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(?(ПараметрыОтчета.Периодичность = 2, "Регистратор", "Период"));		
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
		Если ПараметрыОтчета.Периодичность = 2 Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Структура.Отбор, "Регистратор", 0, ВидСравненияКомпоновкиДанных.Заполнено);
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек, ВПользовательскиеНастройки = Истина) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		Если ПараметрыОтчета.ВключатьОбособленныеПодразделения Тогда
			Отбор = КомпоновщикНастроек.Настройки.Отбор;
			Если ВПользовательскиеНастройки Тогда
				Для Каждого ЭлементНастройки Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл	
					Если ЭлементНастройки.ИдентификаторПользовательскойНастройки = КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки Тогда
						Отбор = ЭлементНастройки;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
			ГруппаОтборОрганизация = Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтборОрганизация.Представление = "###ОтборПоОрганизацииСОП###";
			ГруппаОтборОрганизация.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборОрганизация, "Организация", ПараметрыОтчета.Организация);
		Иначе
			НовыйОтбор = БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек, "Организация", ПараметрыОтчета.Организация,,, ВПользовательскиеНастройки);
			НовыйОтбор.Представление = "###ОтборПоОрганизации###"; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаРезультатаОтчета(ИдентификаторОтчета, Результат) Экспорт
	
	// Выводим надписи вертикально, если количество точек диаграмм больше 9
	Для Каждого Рисунок Из Результат.Рисунки Цикл
		Попытка
			Если ТипЗнч(Рисунок.Объект) = Тип("Диаграмма") Тогда
				Рисунок.Объект.ОбластьПостроения.ВертикальныеМетки  = (Рисунок.Объект.Точки.Количество() > 9);
				Рисунок.Объект.ОбластьПостроения.ФорматШкалыЗначений = "ЧГ=3,0";
				Рисунок.Объект.ОбластьЛегенды.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
				
				Рисунок.Объект.ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы = ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы.НаШкале;
				Рисунок.Объект.ПодписиШкалыЗначенийИзмерительнойДиаграммыВдольШкалы = Истина;
				Рисунок.Объект.ТолщинаШкалыИзмерительнойДиаграммы                   = 3;
				Рисунок.Объект.ФорматЗначенийВПодписях                              = "ЧДЦ=2; ЧГ=3,0";
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	//Удалим строки с высотой равной 1
	Индекс = Результат.ВысотаТаблицы;
	Пока Индекс > 0 Цикл
		ИндексСтроки = "R" + Формат(Индекс, "ЧГ=0");
		Если Результат.Область(ИндексСтроки).ВысотаСтроки = 1 Тогда
			Результат.УдалитьОбласть(Результат.Область(ИндексСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
		
	Результат.АвтоМасштаб = Истина;
	
	Результат.ПолеСлева   = 5;
	Результат.ПолеСправа  = 5;
	
	Результат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ИдентификаторОтчета;
		
КонецПроцедуры

Функция ПолучитьМакетШапки(МакетКомпоновки, Тело = Неопределено, ТипМакета = "Заголовок") Экспорт
	
	ЕстьПустойМакет = Ложь;
	
	Если Тело = Неопределено Тогда
		Тело = МакетКомпоновки.Тело;
	КонецЕсли;
	
	Если Тело.Количество() > 0 Тогда
		Если ТипМакета = "Заголовок" Тогда
			НачальныйИндекс = 0;
			КонечныйИндекс  = Тело.Количество();
			ИтераторПрямой  = Истина;
		ИначеЕсли ТипМакета = "Подвал" Тогда 
			НачальныйИндекс = Тело.Количество() - 1;
			КонечныйИндекс  = 0;
			ИтераторПрямой  = Ложь;
		КонецЕсли;
		
		Индекс = НачальныйИндекс;
		Пока Индекс <> КонечныйИндекс Цикл
			Элемент = Тело[Индекс];
			Если ТипЗнч(Элемент) = Тип("МакетОбластиМакетаКомпоновкиДанных") Тогда
				Если ЕстьПустойМакет Тогда
					ЕстьПустойМакет = Ложь;
				Иначе
					Возврат МакетКомпоновки.Макеты[Элемент.Макет];
				КонецЕсли;
			ИначеЕсли ТипЗнч(Элемент) = Тип("ДиаграммаМакетаКомпоновкиДанных") Тогда
				ЕстьПустойМакет = Истина;
			ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда
				ЕстьПустойМакет = Истина;
			КонецЕсли;
			
			Если ИтераторПрямой Тогда
				Индекс = Индекс + 1;
			Иначе
				Индекс = Индекс - 1;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьМакетПодвала(МакетКомпоновки, Тело = Неопределено) Экспорт
	
	Если Тело = Неопределено Тогда
		Тело = МакетКомпоновки.Тело;
	КонецЕсли;
	
	Для Каждого Элемент Из Тело Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаМакетаКомпоновкиДанных") Тогда
			Если Не ПустаяСтрока(Элемент.МакетПодвала) Тогда
				Возврат МакетКомпоновки.Макеты[Элемент.МакетПодвала];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, ПолеГруппировки, ИскатьВДетальныхЗаписях = Ложь, ТипМакета = "Заголовок") Экспорт
	
	МассивМакетов = Новый Массив;
	
	ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, МакетКомпоновки.Тело, МассивМакетов, ПолеГруппировки, ТипМакета, ИскатьВДетальныхЗаписях);	
	
	Возврат МассивМакетов;
	
КонецФункции

Процедура ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, Тело, МассивМакетов, ПолеГруппировки, ТипМакета, ИскатьВДетальныхЗаписях = Ложь) 
	
	Для Каждого Элемент Из Тело Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаМакетаКомпоновкиДанных") Тогда
			Для Каждого ЭлементГруппировки Из Элемент.Группировка Цикл
				Если Найти(ЭлементГруппировки.ИмяПоля, ПолеГруппировки) = 1 Тогда 
					МакетТело = ПолучитьМакетШапки(МакетКомпоновки, Элемент.Тело, ТипМакета);
					Если МакетТело <> Неопределено Тогда
						МассивМакетов.Добавить(МакетТело);  
					КонецЕсли;
					МакетТелоИерархии = ПолучитьМакетШапки(МакетКомпоновки, Элемент.ТелоИерархии, ТипМакета);
					Если МакетТелоИерархии <> Неопределено Тогда
						МассивМакетов.Добавить(МакетТелоИерархии);
					КонецЕсли;
				КонецЕсли; 
				ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, Элемент.Тело, МассивМакетов, ПолеГруппировки, ТипМакета, ИскатьВДетальныхЗаписях);
			КонецЦикла;
		КонецЕсли;
		Если ИскатьВДетальныхЗаписях Тогда
			Если ТипЗнч(Элемент) = Тип("ЗаписиМакетаКомпоновкиДанных") Тогда
				Если Элемент.Имя = ПолеГруппировки Тогда
					МассивМакетов.Добавить(ПолучитьМакетШапки(МакетКомпоновки, Элемент.Тело));	
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(ОтчетОбъект, Отказ, Проверки = Неопределено) Экспорт
	
	Если Проверки = Неопределено Тогда
		Проверки = Новый Структура("КорректностьПериода, ВыборПоказателя", Истина, Истина);
	КонецЕсли;
	
	Если Проверки.Свойство("КорректностьПериода") И Проверки.КорректностьПериода Тогда
		Если ЗначениеЗаполнено(ОтчетОбъект.КонецПериода) И ОтчетОбъект.НачалоПериода > ОтчетОбъект.КонецПериода Тогда
			ТекстСообщения = НСтр("ru = 'Дата начала периода не может быть больше даты окончания периода.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Отчет.НачалоПериода",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Проверки.Свойство("ВыборПоказателя") И Проверки.ВыборПоказателя Тогда
		КоличествоПоказателей = 0;
		ПервыйПоказатель = "";
		НаборПоказателей = Отчеты[ОтчетОбъект.Метаданные().Имя].ПолучитьНаборПоказателей();
		Для Каждого ЭлементНабора Из НаборПоказателей Цикл
			КоличествоПоказателей = КоличествоПоказателей + (ОтчетОбъект["Показатель" + ЭлементНабора] И ЭлементНабора <> "РазвернутоеСальдо");
			Если ПустаяСтрока(ПервыйПоказатель) Тогда
				ПервыйПоказатель = "Показатель" + ЭлементНабора;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоПоказателей = 0 И НаборПоказателей.Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не выбран показатель(и)'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Отчет." + ПервыйПоказатель,, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Проверки.Свойство("СписокОрганизаций") И Проверки.СписокОрганизаций Тогда
		
		Если НЕ ЗначениеЗаполнено(ОтчетОбъект.ПредставлениеСпискаОрганизаций) Тогда
			ТекстСообщения = НСтр("ru = 'Не указана организация.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Отчет.ПредставлениеСпискаОрганизаций",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКопиюОписанияМакета(ОписаниеМакета, ФормаЗаписи = Неопределено) Экспорт
	
	Если ФормаЗаписи = Неопределено Тогда
		ФормаЗаписи = "{http://v8.1c.ru/8.1/data-composition-system/composition-template}";
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ОписаниеМакета, "item", ФормаЗаписи);
	СтрокаXML = ЗаписьXML.Закрыть();
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML, ТипЗнч(ОписаниеМакета));
	
КонецФункции

// Возвращает доступное поле по полю компоновки
Функция ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеКомпоновкиДанных, ОбластьПоиска) Экспорт
	
	Если ТипЗнч(ПолеКомпоновкиДанных) = Тип("Строка") Тогда
		ПолеПоиска = Новый ПолеКомпоновкиДанных(ПолеКомпоновкиДанных);
	Иначе
		ПолеПоиска = ПолеКомпоновкиДанных;
	КонецЕсли;
	
	Если ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
	 Или ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
	 Или ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат ОбластьПоиска.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеПоиска);
	Иначе
		Возврат ОбластьПоиска.НайтиПоле(ПолеПоиска);
	КонецЕсли;
	
КонецФункции

Функция ДобавитьРодителей(ЭлементРасшифровки, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы = Ложь)  Экспорт
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Новый ПолеКомпоновкиДанных(Поле.Поле), ТекущийОтчет);
			Если ДоступноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ВключатьРесурсы И ДоступноеПоле.Ресурс Тогда
				Продолжить;
			КонецЕсли;
			МассивПолейРасшифровки.Добавить(Поле);
		КонецЦикла;
	КонецЕсли;
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ДобавитьРодителей(Родитель, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	КонецЦикла;
	
КонецФункции

// Возвращает массив, по которому следует расшифровать отчет
Функция ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, ТекущийОтчет = Неопределено, ВключатьРесурсы = Ложь) Экспорт
	
	МассивПолейРасшифровки = Новый Массив;
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
	   И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		Возврат МассивПолейРасшифровки;
	КонецЕсли;
	
	Если ТекущийОтчет = Неопределено Тогда
		ТекущийОтчет = ДанныеРасшифровки;
	КонецЕсли;
	
	// Добавим поля родительских группировок
	ДобавитьРодителей(ДанныеРасшифровки.Элементы[Расшифровка], ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	
	Количество = МассивПолейРасшифровки.Количество();
	Для Индекс = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Индекс;
		Для ИндексВнутри = 0 По ОбратныйИндекс - 1 Цикл
			Если МассивПолейРасшифровки[ОбратныйИндекс].Поле = МассивПолейРасшифровки[ИндексВнутри].Поле Тогда
				МассивПолейРасшифровки.Удалить(ОбратныйИндекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Добавим отбор, установленный в отчете
	Для каждого ЭлементОтбора Из ТекущийОтчет.Настройки.Отбор.Элементы Цикл
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		МассивПолейРасшифровки.Добавить(ЭлементОтбора);
	КонецЦикла;
	
	Возврат МассивПолейРасшифровки;
	
КонецФункции

Функция ПолучитьПараметрыРасшифровкиОтчета(Адрес, ИдентификаторОбъекта, Расшифровка) Экспорт
	
	ПараметрыРасшифровки = Новый Структура;
	
	ПараметрыИсполненияОтчета = Отчеты[ИдентификаторОбъекта].ПолучитьПараметрыИсполненияОтчета();
	Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьРасширенныеПараметрыРасшифровки") 
		И ПараметрыИсполненияОтчета.ИспользоватьРасширенныеПараметрыРасшифровки Тогда
		
		Отчеты[ИдентификаторОбъекта].ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки);
		Возврат ПараметрыРасшифровки;
	КонецЕсли;
	
	ПланСчетов = "Хозрасчетный";		
	
	ДанныеОбъекта = ПолучитьИзВременногоХранилища(Адрес);
	
	Если ИдентификаторОбъекта = "ГлавнаяКнигаХозрасчетный" Тогда 
		ОтчетОбъект       = ДанныеОбъекта;
		ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;
	Иначе 		
		ОтчетОбъект       = ДанныеОбъекта.Объект;
		ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;
	КонецЕсли;
	
	Если ИдентификаторОбъекта = ("КарточкаСчета" + ПланСчетов)
		ИЛИ ИдентификаторОбъекта = ("КарточкаСубконто" + ПланСчетов)
		ИЛИ ИдентификаторОбъекта = ("ОтчетПоПроводкам" + ПланСчетов) Тогда
		
		ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
		ПараметрыРасшифровки.Вставить("Значение"     , ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Значение);
		
	Иначе
		ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Ложь);
		
		ЕстьПоказатель      = Ложь;
		ЕстьКорЗначение     = Ложь;
		ЕстьСчетБУ          = Ложь; // Для отчета Сверка данных БУ и НУ
		ЕстьРегистратор     = Ложь; // Для отчета Сверка данных БУ и НУ
		ЕстьСубконто1       = Ложь; // Для отчета Сверка данных БУ и НУ
		
		ПервыйЭлемент       = Неопределено;
		Счет                = Неопределено;
		СчетБУ              = Неопределено;
		СчетНУ              = Неопределено;
		
		Если ИдентификаторОбъекта = "ГлавнаяКнигаХозрасчетный" Тогда
			Если ТипЗнч(Расшифровка) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
				ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
				ПараметрыРасшифровки.Вставить("Значение"     , Расшифровка);
			Иначе 
				МассивПолей = Расшифровка;
				
				ЕстьПоказатель = Истина;
				ПервыйЭлемент = Истина;
				Для Каждого ЭлементСписка Из Расшифровка Цикл
					Для Каждого ЭлементСоответствия Из ЭлементСписка.Значение Цикл
						Если ЭлементСоответствия.Ключ = "КорСчет" Тогда
							ЕстьКорЗначение = Истина;
						КонецЕсли;
						Если ЭлементСоответствия.Ключ = "Счет" Тогда
							Счет = ЭлементСоответствия.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.ЗагрузитьНастройки(ДанныеРасшифровки.Настройки);
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ДанныеОбъекта.Объект.СхемаКомпоновкиДанных));
			
			МассивПолей = ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, КомпоновщикНастроек, Истина);
			
			Для Индекс = 0 по МассивПолей.ВГраница() Цикл
				Элемент = МассивПолей[Индекс];
				Если ТипЗнч(Элемент) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
					Если ПервыйЭлемент = Неопределено И Элемент.Поле <> "Показатель" Тогда 
						ПервыйЭлемент = Элемент;
					КонецЕсли;
					Если Элемент.Поле = "Показатель" Тогда
						ЕстьПоказатель = Истина;
					КонецЕсли;
					Если Найти(Элемент.Поле, "Кор") = 1 Тогда
						ЕстьКорЗначение = Истина;
					КонецЕсли;
					Если Элемент.Поле = "Счет" Тогда
						Счет = Элемент.Значение;
					КонецЕсли;
					Если Элемент.Поле = "СчетНУ" Тогда
						Счет 	= Элемент.Значение;
						СчетНУ 	= Элемент.Значение;
					КонецЕсли;				
					Если Элемент.Поле = "СчетБУ" Тогда
						СчетБУ 		= Элемент.Значение;
						ЕстьСчетБУ 	= Истина;
					КонецЕсли;
					Если Элемент.Поле = "ДокументДвижения" Тогда
						Регистратор   = Элемент.Значение;
						ЕстьРегистратор = Истина;
					КонецЕсли;
					Если Элемент.Поле = "Субконто1" Тогда
						ЕстьСубконто1 = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если  ИдентификаторОбъекта = "СверкаДанныхБУ_НУ" Тогда
				Если ЕстьСчетБУ Тогда
					ПланСчетов = "Хозрасчетный";
					Счет       = СчетБУ;
				Иначе
					ПланСчетов = "Налоговый";
					Счет       = СчетНУ;
				КонецЕсли;			
			КонецЕсли;
		
		КонецЕсли;
		
		ПредставлениеПланаСчетов = ?(ПланСчетов = "Налоговый", НСтр("ru = '(налоговый) '"), "");
		
		ПредставлениеСверкиБУНУПоРегистраторам = НСтр("ru = 'Расшифровать по первичным документам'");
		ПредставлениеСверкиБУНУПоСубконто      = НСтр("ru = 'Расшифровать по субконто'");
		ПредставлениеДляСверкаДанныхБУ_НУ      = НСтр("ru = 'ОСВ по счету %Счет%'");
		ПредставлениеДляОСВПоСчету             = НСтр("ru = 'ОСВ по счету %Счет%'");
		ПредставлениеДляКарточкиСчета          = НСтр("ru = 'Карточка счета %Счет%'");
		ПредставлениеДляАнализаСчета           = НСтр("ru = 'Анализ счета %Счет%'");
		ПредставлениеДляОборотыСчета           = НСтр("ru = 'Обороты счета %Счет%'");
		ПредставлениеДляОборотыСчетаПоМесяцам  = НСтр("ru = 'Обороты счета %Счет% по месяцам'");
		ПредставлениеДляОборотыСчетаПоДням     = НСтр("ru = 'Обороты счета %Счет% по дням'");
		ПредставлениеДляКарточкиСубконто       = НСтр("ru = 'Карточка субконто'") + ПредставлениеПланаСчетов;
		ПредставлениеДляОтчетаПоПроводкам      = НСтр("ru = 'Отчет по проводкам'") + ПредставлениеПланаСчетов;
		ПредставлениеОткрытьОбъект             = НСтр("ru = 'Открыть ""%Значение%""'");
		
		ПредставлениеДляСверкаДанныхБУ_НУ      = СтрЗаменить(ПредставлениеДляСверкаДанныхБУ_НУ    , "%Счет%", ПредставлениеПланаСчетов + Счет);
		ПредставлениеДляОСВПоСчету             = СтрЗаменить(ПредставлениеДляОСВПоСчету           , "%Счет%", ПредставлениеПланаСчетов + Счет);
		ПредставлениеДляКарточкиСчета          = СтрЗаменить(ПредставлениеДляКарточкиСчета        , "%Счет%", ПредставлениеПланаСчетов + Счет);
		ПредставлениеДляАнализаСчета           = СтрЗаменить(ПредставлениеДляАнализаСчета         , "%Счет%", ПредставлениеПланаСчетов + Счет);
		ПредставлениеДляОборотыСчета           = СтрЗаменить(ПредставлениеДляОборотыСчета         , "%Счет%", ПредставлениеПланаСчетов + Счет);
		ПредставлениеДляОборотыСчетаПоМесяцам  = СтрЗаменить(ПредставлениеДляОборотыСчетаПоМесяцам, "%Счет%", ПредставлениеПланаСчетов + Счет);
		ПредставлениеДляОборотыСчетаПоДням     = СтрЗаменить(ПредставлениеДляОборотыСчетаПоДням   , "%Счет%", ПредставлениеПланаСчетов + Счет);
		
		Если ЕстьПоказатель Тогда
			УстановитьВсеПоказатели = Ложь;
		Иначе
			УстановитьВсеПоказатели = Истина;
		КонецЕсли;
		
		СписокПунктовМеню = Новый СписокЗначений;
		
		Если ПервыйЭлемент <> Неопределено Тогда
			Если ИдентификаторОбъекта = ("ОборотноСальдоваяВедомость" + ПланСчетов) ИЛИ ИдентификаторОбъекта = ("СверкаДанныхБУ_НУ") Тогда
				Если Не ЕстьПоказатель И ЗначениеЗаполнено(ПервыйЭлемент.Значение)  И Не БухгалтерскиеОтчетыКлиентСервер.ПростойТип(ПервыйЭлемент.Значение) Тогда
					Представление = СтрЗаменить(ПредставлениеОткрытьОбъект, "%Значение%", ПервыйЭлемент.Значение);
					СписокПунктовМеню.Добавить(ПервыйЭлемент.Значение, Представление);
				КонецЕсли;
				
				Если  ИдентификаторОбъекта = ("СверкаДанныхБУ_НУ") Тогда
					Если ЕстьРегистратор Тогда
						// Просто открываем регистратор
						ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
						ПараметрыРасшифровки.Вставить("Значение"     , Регистратор);
						Возврат ПараметрыРасшифровки;
					Иначе
						Если НЕ ЕстьСубконто1 Тогда
							СписокПунктовМеню.Добавить("СверкаДанныхБУ_НУ", ПредставлениеСверкиБУНУПоСубконто);						
						КонецЕсли;
						СписокПунктовМеню.Добавить("СверкаДанныхБУ_НУ", ПредставлениеСверкиБУНУПоРегистраторам);
					КонецЕсли;	
				КонецЕсли;
				
				//ДОДЕЛАТЬ СписокПунктовМеню
				СписокПунктовМеню.Добавить("ОборотноСальдоваяВедомостьПоСчету" + ПланСчетов, ПредставлениеДляОСВПоСчету);
				СписокПунктовМеню.Добавить("КарточкаСчета" + ПланСчетов                    , ПредставлениеДляКарточкиСчета); 				
				
			Иначе
				Если ЕстьПоказатель Тогда
					// Если расшифровывается показатель, то необходимо сразу формировать отчет
					Если ИдентификаторОбъекта = "АнализСубконто" + ПланСчетов Тогда
						Если Счет <> Неопределено Тогда 
							СписокПунктовМеню.Добавить("КарточкаСчета" + ПланСчетов   , ПредставлениеДляКарточкиСчета);
						Иначе
							СписокПунктовМеню.Добавить("КарточкаСубконто" + ПланСчетов, ПредставлениеДляКарточкиСубконто);	
						КонецЕсли;
					ИначеЕсли ИдентификаторОбъекта = "АнализСчета" + ПланСчетов Тогда
						Если ЕстьКорЗначение Тогда
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам" + ПланСчетов, ПредставлениеДляОтчетаПоПроводкам);
						Иначе
							СписокПунктовМеню.Добавить("КарточкаСчета" + ПланСчетов   , ПредставлениеДляКарточкиСчета);
						КонецЕсли;
					ИначеЕсли ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоСчету" + ПланСчетов Тогда
						СписокПунктовМеню.Добавить("КарточкаСчета" + ПланСчетов   , ПредставлениеДляКарточкиСчета);
					ИначеЕсли ИдентификаторОбъекта = "ОборотыМеждуСубконто" + ПланСчетов Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам" + ПланСчетов, ПредставлениеДляОтчетаПоПроводкам);
					ИначеЕсли ИдентификаторОбъекта = "ОборотыСчета" + ПланСчетов Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам" + ПланСчетов, ПредставлениеДляОтчетаПоПроводкам);
					ИначеЕсли ИдентификаторОбъекта = "СводныеПроводкиХозрасчетный" Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам" + ПланСчетов, ПредставлениеДляОтчетаПоПроводкам);	
					ИначеЕсли ИдентификаторОбъекта = "ГлавнаяКнигаХозрасчетный" Тогда
						СписокПунктовМеню.Добавить("ОборотыСчета" + ПланСчетов, ПредставлениеДляОборотыСчета);
						Если ЕстьКорЗначение Тогда
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам" + ПланСчетов, ПредставлениеДляОтчетаПоПроводкам);
						КонецЕсли;						
					КонецЕсли;
				Иначе
					Если ИдентификаторОбъекта = "СводныеПроводкиХозрасчетный" Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам" + ПланСчетов, ПредставлениеДляОтчетаПоПроводкам);
						УстановитьВсеПоказатели     = Истина;
					ИначеЕсли ИдентификаторОбъекта = ("ОтчетОбъект.ШахматнаяВедомостьХозрасчетный") Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам" + ПланСчетов, ПредставлениеДляОтчетаПоПроводкам);
					Иначе 
						Если ЗначениеЗаполнено(ПервыйЭлемент.Значение) И Не БухгалтерскиеОтчетыКлиентСервер.ПростойТип(ПервыйЭлемент.Значение) Тогда
							Представление = СтрЗаменить(ПредставлениеОткрытьОбъект, "%Значение%", ПервыйЭлемент.Значение);
							СписокПунктовМеню.Добавить(ПервыйЭлемент.Значение, Представление);
						КонецЕсли;
						Если ИдентификаторОбъекта = "АнализСубконто" + ПланСчетов Тогда
							Если Счет <> Неопределено Тогда 
								СписокПунктовМеню.Добавить("КарточкаСчета" + ПланСчетов, ПредставлениеДляКарточкиСчета);
							Иначе
								СписокПунктовМеню.Добавить("КарточкаСубконто" + ПланСчетов, ПредставлениеДляКарточкиСубконто);
							КонецЕсли;	
						ИначеЕсли ИдентификаторОбъекта = "АнализСчета" + ПланСчетов Тогда
							Если ЕстьКорЗначение Тогда 
								СписокПунктовМеню.Добавить("ОтчетПоПроводкам" + ПланСчетов, ПредставлениеДляОтчетаПоПроводкам);
							Иначе
								СписокПунктовМеню.Добавить("КарточкаСчета" + ПланСчетов, ПредставлениеДляКарточкиСчета);
							КонецЕсли;
						ИначеЕсли ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоСчету" + ПланСчетов Тогда
							СписокПунктовМеню.Добавить("КарточкаСчета" + ПланСчетов, ПредставлениеДляКарточкиСчета);
						ИначеЕсли ИдентификаторОбъекта = "ОборотыМеждуСубконто" + ПланСчетов Тогда
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам" + ПланСчетов, ПредставлениеДляОтчетаПоПроводкам);
						ИначеЕсли ИдентификаторОбъекта = "ОборотыСчета" + ПланСчетов Тогда				
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам" + ПланСчетов, ПредставлениеДляОтчетаПоПроводкам);
						ИначеЕсли 	ИдентификаторОбъекта = ("СправкаРасчетВычетовПоНалогам") Тогда
							СписокПунктовМеню.Добавить("КарточкаСубконто" + ПланСчетов, ПредставлениеДляКарточкиСубконто);
							СписокПунктовМеню.Добавить("АнализСчета" + ПланСчетов, ПредставлениеДляАнализаСчета);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
				
	НастройкиРасшифровки = Новый Структура;   
	Если СписокПунктовМеню <> Неопределено Тогда
		Для Каждого ПунктМеню Из СписокПунктовМеню Цикл
			Если ТипЗнч(ПунктМеню.Значение) = Тип("Строка") Тогда
				НастройкиРасшифровки.Вставить(ПунктМеню.Значение, ПолучитьНастройкиДляРасшифровки(ПунктМеню.Значение, ИдентификаторОбъекта, МассивПолей, ОтчетОбъект, УстановитьВсеПоказатели, ПланСчетов));
			КонецЕсли;
		КонецЦикла;
		
		ДанныеОбъекта.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
		Адрес = ПоместитьВоВременноеХранилище(ДанныеОбъекта, Адрес);
		
		ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
	КонецЕсли;

	Возврат ПараметрыРасшифровки;
	
КонецФункции

Функция СкопироватьПараметрСхемыКомпоновкиДанных(СхемаКомпоновкиДанных, Приемник, Источник, ЗначениеПриемника = Неопределено) Экспорт
	
	Если ТипЗнч(СхемаКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") Тогда
		Параметры = СхемаКомпоновкиДанных.Параметры;
		
		НовыйПараметр = Параметры.Найти(Приемник);
		Если НовыйПараметр = Неопределено Тогда
			НовыйПараметр = Параметры.Добавить();
		КонецЕсли;
		
		ПараметрИсточник = Параметры.Найти(Источник);
		
		Если ПараметрИсточник = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			ЗаполнитьЗначенияСвойств(НовыйПараметр, ПараметрИсточник);
			НовыйПараметр.Имя = Приемник;
			Если ЗначениеПриемника <> Неопределено Тогда
				НовыйПараметр.Значение = ЗначениеПриемника;
			КонецЕсли;
		КонецЕсли;
		
		Возврат НовыйПараметр;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСписокСчетовПоСубсчетам(Таблица) Экспорт
	
	СписокСчетовПоСубсчетам = Новый СписокЗначений;
	Для каждого СтрокаТаблицы Из Таблица Цикл
		Если СтрокаТаблицы.ПоСубсчетам И СтрокаТаблицы.Использование Тогда
			СписокСчетовПоСубсчетам.Добавить(СтрокаТаблицы.Счет);
		КонецЕсли;
	КонецЦикла;
	
    Возврат СписокСчетовПоСубсчетам;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ЕстьРеквизитФормы(Форма, ИмяРеквизита)
	
	Для Каждого РеквизитФормы Из Форма.ПолучитьРеквизиты() Цикл
		Если ВРег(РеквизитФормы.Имя) = ВРег(ИмяРеквизита) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьЭлементФормы(Форма, ИмяЭлемента)
	
	Возврат Форма.Элементы.Найти(ИмяЭлемента) <> Неопределено;
	
КонецФункции

Функция ПолучитьРазмещениеДополнительныхПолей(КомпоновщикНастроек) 
	
	РасположениеРеквизитов = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметрВывода(КомпоновщикНастроек, "РасположениеРеквизитов");	
	
	Если РасположениеРеквизитов.Использование = Истина
		И РасположениеРеквизитов.Значение = РасположениеРеквизитовКомпоновкиДанных.Отдельно Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДополнительныеПоляИзНастроек(КомпоновщикНастроек, ДополнительныеПоля, Группировка)
	
	Если Группировка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПоля.Очистить();
	Для Каждого ВыбранноеПоле Из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
		Если ТипЗнч(ВыбранноеПоле) = Тип("ВыбранноеПолеКомпоновкиДанных") 
			И Найти(Строка(ВыбранноеПоле.Поле), ".") > 0 Тогда
			Поле = Строка(ВыбранноеПоле.Поле);
			МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поле, ".");
			
			Если Группировка.НайтиСтроки(Новый Структура("Поле", МассивПолей[0])).Количество() > 0 Тогда
				НоваяСтрока = ДополнительныеПоля.Добавить();
				НоваяСтрока.Использование = ВыбранноеПоле.Использование;
				НоваяСтрока.Поле          = Поле;
				НоваяСтрока.Представление = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьГруппировкиИзНастроек(КомпоновщикНастроек, Структура, Группировка)
	
	Если Структура.ПоляГруппировки.Элементы.Количество() > 0 Тогда
		Поле = Строка(Структура.ПоляГруппировки.Элементы[0].Поле);
		Если Структура.Структура.Количество() > 0 Тогда
			ЗаполнитьГруппировкиИзНастроек(КомпоновщикНастроек, Структура.Структура[0], Группировка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНастройкиДляРасшифровки(ИДРасшифровки, ИдентификаторОбъекта, МассивПолей, ОтчетОбъект, УстановитьВсеПоказатели, ПланСчетов)
		
	Счет              = Неопределено;
	
	ЕстьСчет          = Истина;
	ЕстьСубконто3     = Ложь; // Для отчета Сверка данных БУ и НУ
	ЕстьПодразделение = Ложь;
	Субконто3		  = Неопределено;
	
	КорСчет           = Неопределено;
	ЕстьКорЗначение   = Ложь;
	Период            = Неопределено;
	Периодичность     = Неопределено;
	
	БухТипРесурса       = Неопределено; // Для отчетов АнализСчета и ОборотыСчета
	ИндексБухТипРесурса = Неопределено; // Для отчетов АнализСчета и ОборотыСчета
	
	Если ИдентификаторОбъекта = "ГлавнаяКнигаХозрасчетный" Тогда
		УстановитьВсеПоказатели = Ложь;
		Показатель = "БУ";
		Для Каждого ЭлементСписка Из МассивПолей Цикл
			Для Каждого ЭлементСоответствия Из ЭлементСписка.Значение Цикл
				Если ЭлементСоответствия.Ключ = "Счет" Тогда
					Счет = ЭлементСоответствия.Значение;
					ЕстьСчет = Истина;
				ИначеЕсли ЭлементСоответствия.Ключ = "КорСчет" Тогда
					КорСчет = ЭлементСоответствия.Значение;
					ЕстьКорЗначение = Истина;
				ИначеЕсли ЭлементСоответствия.Ключ = "Отбор" Тогда
					Для Каждого ЭлементОтбора Из ЭлементСоответствия.Значение Цикл
						Если ЭлементОтбора.Ключ = "Период" Тогда
							Период = ЭлементОтбора.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Индекс = 0 по МассивПолей.ВГраница() Цикл
			Элемент = МассивПолей[Индекс];
			Если ТипЗнч(Элемент) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
				Если Найти(Элемент.Поле, "Кор") = 1 Тогда
					ЕстьКорЗначение = Истина;
				КонецЕсли;
				Если Элемент.Поле = "КорСчет" Тогда
					КорСчет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "Счет" Тогда
					Счет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "СчетНУ" Тогда
					Счет 	= Элемент.Значение;
					СчетНУ 	= Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "СчетБУ" Тогда
					Счет    = Элемент.Значение;
					СчетБУ  = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "Период" Тогда
					Период = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "Субконто3" Тогда
					Субконто3 = Элемент.Значение;
					ЕстьСубконто3 	= Истина;
				КонецЕсли;
				
				Если Элемент.Поле = "БухТипРесурса" Тогда
					БухТипРесурса = Элемент.Значение;
					ИндексБухТипРесурса = Индекс;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если БухТипРесурса <> Неопределено И ИндексБухТипРесурса <> Неопределено Тогда
		МассивПолей.Удалить(ИндексБухТипРесурса);
	КонецЕсли;
	
	ДобавитьОтборПоВидСубконто    = Истина;
	ДобавитьОтборПоВидКорСубконто = Истина;
	
	ПользовательскиеНастройки  = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеОтборы     = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ДополнительныеСвойства     = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ПараметрыВыводаРасшифровки", Новый Структура);
	ПараметрыВыводаРасшифровки = ДополнительныеСвойства.ПараметрыВыводаРасшифровки;
	
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Если ИДРасшифровки = "КарточкаСчета" + ПланСчетов Тогда
		Если Счет = Неопределено И ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоСчету" + ПланСчетов Тогда 
			ДополнительныеСвойства.Вставить("Счет", ОтчетОбъект.Счет);
		КонецЕсли;					
	ИначеЕсли ИДРасшифровки = "КарточкаСубконто" + ПланСчетов Тогда
		Если ИдентификаторОбъекта = "СправкаРасчетВычетовПоНалогам" Тогда
			СписокВидовСубконто  = Новый СписокЗначений;
			Если ЕстьСубконто3 Тогда
				// включена аналитика по налоговым комитетам на счетах налогов
				СписокВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
			КонецЕсли;
			ДополнительныеСвойства.Вставить("СписокВидовСубконто", СписокВидовСубконто.Скопировать());
		Иначе
			ДополнительныеСвойства.Вставить("СписокВидовСубконто", ОтчетОбъект.СписокВидовСубконто.Скопировать());
		КонецЕсли;
	ИначеЕсли ИДРасшифровки = "АнализСчета" + ПланСчетов Тогда
		ДополнительныеСвойства.Вставить("ПоПодразделамКорСчетов", Истина);
	ИначеЕсли ИДРасшифровки = "ОборотыСчета" + ПланСчетов + "ПоДням" Тогда
		ДополнительныеСвойства.Вставить("Периодичность", 6);
	ИначеЕсли ИДРасшифровки = "ОборотыСчета" + ПланСчетов + "ПоМесяцам" Тогда
		ДополнительныеСвойства.Вставить("Периодичность", 9);
	ИначеЕсли ИДРасшифровки = "СверкаДанныхБУ_НУ" Тогда
		ДополнительныеСвойства.Вставить("ПоСубсчетам", Истина);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	
	Если ИДРасшифровки = "КарточкаСубконто" + ПланСчетов
		ИЛИ ИДРасшифровки = "ОтчетПоПроводкам" + ПланСчетов
		ИЛИ ИДРасшифровки = "СверкаДанныхБУ_НУ" Тогда
		ЕстьСчет = Ложь;
	ИначеЕсли ИдентификаторОбъекта = "СверкаДанныхБУ_НУ" Тогда
		Если Плансчетов = "Хозрасчетный" Тогда
			ДополнительныеСвойства.Вставить("Счет", СчетБУ);
		Иначе
			ДополнительныеСвойства.Вставить("Счет", СчетНУ);
		КонецЕсли;
	Иначе
		ДополнительныеСвойства.Вставить("Счет", Счет);
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ГлавнаяКнигаХозрасчетный" Тогда
		ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", ОтчетОбъект.СписокСтруктурныхЕдиниц);
		ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ОтчетОбъект.СписокСтруктурныхЕдиниц);
		ДополнительныеСвойства.Вставить("ПредставлениеСпискаОрганизаций", ПредставлениеСпискаОрганизаций);
		Если ИДРасшифровки = "ОборотыСчетаХозрасчетный" Тогда
			ДополнительныеСвойства.Вставить("Счет", Счет);
			Если ЕстьКорЗначение Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "КорСчет", КорСчет, ВидСравненияКомпоновкиДанных.ВИерархии);	
			КонецЕсли;
		ИначеЕсли ИДРасшифровки = "ОтчетПоПроводкамХозрасчетный" Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СчетДт", Счет, ВидСравненияКомпоновкиДанных.ВИерархии);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СчетКт", КорСчет, ВидСравненияКомпоновкиДанных.ВИерархии);
		КонецЕсли;
	Иначе 
		Для каждого Отбор из МассивПолей Цикл
			Если ТипЗнч(Отбор) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных")
				И  Отбор.Поле = "СтруктурноеПодразделение" тогда
				Отбор.Поле = "Подразделение";
			КонецЕсли;	
		КонецЦикла;
		
		ГруппировкаПоОрганизации   = Неопределено;
		ГруппировкаПоПодразделению = Неопределено;
		
		СписокСтруктурныхЕдиниц = Новый СписокЗначений;
		СписокПодразделений = Новый СписокЗначений;
		
		СписокПолейОтборов = Новый Массив;
		Для каждого Отбор из МассивПолей Цикл
			Если ТипЗнч(Отбор) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") тогда
				Если Отбор.Значение = NULL тогда
					Продолжить;
				КонецЕсли;
				Если Отбор.Поле = "Счет" И (ИдентификаторОбъекта = "АнализСчета" + ПланСчетов ИЛИ ИдентификаторОбъекта = "ОборотыСчета" + ПланСчетов) Тогда
					ЗначениеСчет = ?(Счет.Уровень() > ОтчетОбъект.Счет.Уровень(), Счет, ОтчетОбъект.Счет); 
					Если БухТипРесурса <> Неопределено И ИДРасшифровки = "ОтчетПоПроводкам" + ПланСчетов Тогда
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле + БухТипРесурса, ЗначениеСчет, ВидСравненияКомпоновкиДанных.ВИерархии);	
						Если БухТипРесурса = "Дт" Тогда
							ПараметрыВыводаРасшифровки.Вставить("ВыводитьКт", Ложь);
						ИначеЕсли БухТипРесурса = "Кт" Тогда
							ПараметрыВыводаРасшифровки.Вставить("ВыводитьДт", Ложь);
						КонецЕсли;
					Иначе
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, ЗначениеСчет, ВидСравненияКомпоновкиДанных.ВИерархии);	
					КонецЕсли;
				ИначеЕсли (Отбор.Поле = "Счет" ИЛИ Отбор.Поле = "КорСчет") И НЕ ЕстьСчет Тогда
					Если Отбор.Поле = "КорСчет" И (Не ПустаяСтрока(БухТипРесурса))
						И (БухТипРесурса = "Дт" ИЛИ БухТипРесурса = "Кт") И ИДРасшифровки = "ОтчетПоПроводкам" + ПланСчетов Тогда
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет" + ?(БухТипРесурса = "Дт", "Кт", "Дт"), Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);	
					Иначе
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);		
					КонецЕсли;
				ИначеЕсли Отбор.Поле = "Счет" И ЕстьСчет Тогда	
				ИначеЕсли Найти(Отбор.Поле, "Субконто") = 1 тогда
					Если ИдентификаторОбъекта = "ОборотыМеждуСубконто" + ПланСчетов Тогда
						Если Счет <> Неопределено Тогда 
							ИндексСубконто = Сред(Отбор.Поле, 9, 1); 
							ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
							ИндексСубконтоОтчет = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто").НомерСтроки;
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Субконто" + ИндексСубконтоОтчет, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
						Иначе
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
							ИндексСубконто = Число(Сред(Отбор.Поле, 9));
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Вид" + Отбор.Поле, ОтчетОбъект.СписокВидовСубконто[ИндексСубконто - 1].Значение);
						КонецЕсли;
						ДобавитьОтборПоВидСубконто = Ложь;
					ИначеЕсли ИдентификаторОбъекта = "АнализСубконто" + ПланСчетов И ИДРасшифровки = "КарточкаСчета" + ПланСчетов Тогда
						ИндексСубконто = Сред(Отбор.Поле, 9, 1); 
						ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
						НайденнаяСтрока = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
						Если НайденнаяСтрока <> Неопределено Тогда
							ИндексСубконтоОтчет = НайденнаяСтрока.НомерСтроки;
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, СтрЗаменить(Строка(Отбор.Поле), "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет), Отбор.Значение);
						КонецЕсли;
					ИначеЕсли (ИдентификаторОбъекта = "АнализСчета" + ПланСчетов ИЛИ ИдентификаторОбъекта = "ОборотыСчета" + ПланСчетов)
							И (Не ПустаяСтрока(БухТипРесурса)) И (БухТипРесурса = "Дт" ИЛИ БухТипРесурса = "Кт") И ИДРасшифровки = "ОтчетПоПроводкам" + ПланСчетов Тогда
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, СтрЗаменить(Отбор.Поле, "Субконто", "Субконто" + БухТипРесурса), Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));	
					Иначе
						ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Сред(Отбор.Поле, ПозицияСубконто, СтрДлина(Отбор.Поле) - ПозицияСубконто + 1), Отбор.Значение);
					КонецЕсли;
					СписокПолейОтборов.Добавить(Отбор.Поле);
				ИначеЕсли Найти(Отбор.Поле, "КорСубконто") = 1 тогда
					Если ИдентификаторОбъекта = "ОборотыМеждуСубконто" + ПланСчетов Тогда
						Если КорСчет <> Неопределено Тогда
							ИндексКорСубконто = Сред(Отбор.Поле, 12, 1); 
							ПозицияКорСубконто = Найти(Отбор.Поле, "КорСубконто");
							ИндексКорСубконтоОтчет = КорСчет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовКорСубконто[Число(ИндексКорСубконто) - 1].Значение, "ВидСубконто").НомерСтроки;
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "КорСубконто" + ИндексКорСубконтоОтчет, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));	
						Иначе
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
							ИндексСубконто = Число(Сред(Отбор.Поле, 12));
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Вид" + Отбор.Поле, ОтчетОбъект.СписокВидовКорСубконто[ИндексСубконто - 1].Значение);
						КонецЕсли;
						ДобавитьОтборПоВидКорСубконто = Ложь;
					Иначе
						ПозицияСубконто = Найти(Отбор.Поле, "КорСубконто");
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Сред(Отбор.Поле, ПозицияСубконто, СтрДлина(Отбор.Поле) - ПозицияСубконто + 1), Отбор.Значение);
					КонецЕсли;
				ИначеЕсли Отбор.Поле = "Подразделение" тогда
					ГруппировкаПоПодразделению = Отбор.Значение;
						Если (ИдентификаторОбъекта = "АнализСчета" + ПланСчетов ИЛИ ИдентификаторОбъекта = "ОборотыСчета" + ПланСчетов)
							И (Не ПустаяСтрока(БухТипРесурса)) И (БухТипРесурса = "Дт" ИЛИ БухТипРесурса = "Кт") Тогда
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле + БухТипРесурса, Отбор.Значение);
						Иначе
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение);
						КонецЕсли;
					ЕстьПодразделение = Истина;
				ИначеЕсли Отбор.Поле = "Организация" Тогда
					СписокСтруктурныхЕдиниц.Очистить();
					СписокСтруктурныхЕдиниц.Добавить(Отбор.Значение);
					ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", СписокСтруктурныхЕдиниц);
					ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
					ДополнительныеСвойства.Вставить("ПредставлениеСпискаОрганизаций", ПредставлениеСпискаОрганизаций);
				ИначеЕсли Отбор.Поле = "Показатель" Тогда 
					Показатель = Отбор.Значение;
				ИначеЕсли Отбор.Поле = "СчетБУ" ИЛИ Отбор.Поле = "СчетНУ" И ИдентификаторОбъекта = "СверкаДанныхБУ_НУ"
					И (ИДРасшифровки = "КарточкаСчета" + ПланСчетов ИЛИ ИДРасшифровки = "АнализСчета" + ПланСчетов ИЛИ ИДРасшифровки = "ОборотноСальдоваяВедомостьПоСчету" + ПланСчетов
						ИЛИ ИДРасшифровки = "ОборотыСчета" + ПланСчетов + "ПоМесяцам" ИЛИ ИДРасшифровки = "ОборотыСчета" + ПланСчетов + "ПоДням") Тогда
				ИначеЕсли Отбор.Поле = "Период" ИЛИ Отбор.Поле = "Регистратор" Тогда
				Иначе
					Если Отбор.Иерархия Тогда
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);
					Иначе
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение);
					КонецЕсли;
				КонецЕсли;	
			ИначеЕсли ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если СписокПолейОтборов.Найти(Строка(Отбор.ЛевоеЗначение)) = Неопределено Тогда
					Если Найти(Отбор.ЛевоеЗначение, "Субконто") = 1 И ИдентификаторОбъекта = "АнализСубконто" + ПланСчетов И ИДРасшифровки = "КарточкаСчета" + ПланСчетов Тогда
						ИндексСубконто = Сред(Отбор.ЛевоеЗначение, 9, 1); 
						ПозицияСубконто = Найти(Отбор.ЛевоеЗначение, "Субконто");
						НайденнаяСтрока = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
						Если НайденнаяСтрока <> Неопределено Тогда
							ИндексСубконтоОтчет = НайденнаяСтрока.НомерСтроки;
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, СтрЗаменить(Строка(Отбор.ЛевоеЗначение), "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет), Отбор.ПравоеЗначение, Отбор.ВидСравнения);
						КонецЕсли;
					ИначеЕсли Отбор.Представление = "###ОтборПоОрганизации###" Тогда
						ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", Отбор.ПравоеЗначение);
						ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(Отбор.ПравоеЗначение);
						ДополнительныеСвойства.Вставить("ПредставлениеСпискаОрганизаций", ПредставлениеСпискаОрганизаций);
					ИначеЕсли Отбор.Представление = "###ОтборПоВидуУчета###" Тогда
						ДополнительныеСвойства.Вставить("ВидУчета", Отбор.ПравоеЗначение);
					Иначе
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.ЛевоеЗначение, Отбор.ПравоеЗначение, Отбор.ВидСравнения);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Отбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				
				Если Отбор.Представление = "###ОтборПоОрганизации###" Тогда
					
					Если (ГруппировкаПоОрганизации = Неопределено) Тогда 
						ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", ОтчетОбъект.СписокСтруктурныхЕдиниц);
						ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ОтчетОбъект.СписокСтруктурныхЕдиниц);
						ДополнительныеСвойства.Вставить("ПредставлениеСпискаОрганизаций", ПредставлениеСпискаОрганизаций);
					КонецЕсли;
					
					Если (ГруппировкаПоПодразделению = Неопределено) Тогда
						ДополнительныеСвойства.Вставить("СписокПодразделений", ОтчетОбъект.СписокПодразделений);
						ПредставлениеСпискаПодразделений = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ОтчетОбъект.СписокПодразделений);
						ДополнительныеСвойства.Вставить("ПредставлениеСпискаПодразделений", ПредставлениеСпискаПодразделений);
						ДополнительныеСвойства.Вставить("СписокВладельцевГоловныхПодразделений", ОтчетОбъект.СписокВладельцевГоловныхПодразделений);
					КонецЕсли;
					
				КонецЕсли;				
				
			КонецЕсли;
		КонецЦикла;

		Если ИдентификаторОбъекта = "ОборотыМеждуСубконто" + ПланСчетов Тогда
			Если ДобавитьОтборПоВидСубконто Тогда
				Индекс = 1;
				Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовСубконто Цикл
					Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ВидСубконто" + Индекс, ВидСубконто.Значение);
						Индекс = Индекс + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ДобавитьОтборПоВидКорСубконто Тогда
				Индекс = 1;
				Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовКорСубконто Цикл
					Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ВидКорСубконто" + Индекс, ВидСубконто.Значение);
						Индекс = Индекс + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Период <> Неопределено И Период <> Null Тогда
		ДополнительныеСвойства.Вставить("НачалоПериода", Период);
		ДополнительныеСвойства.Вставить("КонецПериода" , БухгалтерскиеОтчетыКлиентСервер.КонецПериода(Период, ?(Периодичность = Неопределено, ОтчетОбъект.Периодичность, Периодичность)));
	Иначе
		ДополнительныеСвойства.Вставить("НачалоПериода", ОтчетОбъект.НачалоПериода);
		ДополнительныеСвойства.Вставить("КонецПериода" , ОтчетОбъект.КонецПериода);
	КонецЕсли;
	
	// Настройка показателей
	Если УстановитьВсеПоказатели И ОтчетОбъект.Свойство("НаборПоказателей") Тогда
		Если ИдентификаторОбъекта = "СверкаДанныхБУ_НУ" Тогда
			Если ИДРасшифровки = "СверкаДанныхБУ_НУ" Тогда
				Для Каждого ИмяПоказателя Из ОтчетОбъект.НаборПоказателей Цикл
					ДополнительныеСвойства.Вставить("Показатель" + ИмяПоказателя , ОтчетОбъект["Показатель" + ИмяПоказателя]);
				КонецЦикла;
			Иначе
				ДополнительныеСвойства.Вставить("ПоказательБУ", ОтчетОбъект.ПоказательБУ);
				ДополнительныеСвойства.Вставить("ПоказательНУ", ОтчетОбъект.ПоказательНУ ИЛИ ОтчетОбъект.ПоказательНУНУ);
				ДополнительныеСвойства.Вставить("ПоказательПР", ОтчетОбъект.ПоказательНУПР);
				ДополнительныеСвойства.Вставить("ПоказательВР", ОтчетОбъект.ПоказательНУВР);
			КонецЕсли;
		Иначе
			Для Каждого ИмяПоказателя Из ОтчетОбъект.НаборПоказателей Цикл
				ДополнительныеСвойства.Вставить("Показатель" + ИмяПоказателя , ОтчетОбъект["Показатель" + ИмяПоказателя]);
			КонецЦикла;
			Если ОтчетОбъект.НаборПоказателей.Найти("Количество") = Неопределено Тогда
				Если ЕстьСчет И ЗначениеЗаполнено(Счет) И Счет.Количественный Тогда
					ДополнительныеСвойства.Вставить("ПоказательКоличество", Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Показатель = "Контроль" Тогда // Для СверкаДанныхБУ_НУ
			ДополнительныеСвойства.Вставить("ПоказательБУ", ОтчетОбъект.ПоказательБУ);
			Если ИДРасшифровки = "СверкаДанныхБУ_НУ" Тогда 
				ДополнительныеСвойства.Вставить("ПоказательНУ"      , ОтчетОбъект.ПоказательНУ);
				ДополнительныеСвойства.Вставить("ПоказательНУНУ"    , ОтчетОбъект.ПоказательНУНУ);
				ДополнительныеСвойства.Вставить("ПоказательНУПР"    , ОтчетОбъект.ПоказательНУПР);
				ДополнительныеСвойства.Вставить("ПоказательНУВР"    , ОтчетОбъект.ПоказательНУВР);
				ДополнительныеСвойства.Вставить("ПоказательКонтроль", ОтчетОбъект.ПоказательКонтроль);
			Иначе
				ДополнительныеСвойства.Вставить("ПоказательНУ", ОтчетОбъект.ПоказательНУ ИЛИ ОтчетОбъект.ПоказательНУНУ);
				ДополнительныеСвойства.Вставить("ПоказательПР", ОтчетОбъект.ПоказательНУПР);
				ДополнительныеСвойства.Вставить("ПоказательВР", ОтчетОбъект.ПоказательНУВР);
			КонецЕсли;
		ИначеЕсли Показатель <> Неопределено Тогда
			ДополнительныеСвойства.Вставить("Показатель" + Показатель , Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "СправкаРасчетВычетовПоНалогам" Тогда
		ДополнительныеСвойства.Вставить("ПоказательНУ", Истина);
		ДополнительныеСвойства.Вставить("ПоказательПР", Истина);
		ДополнительныеСвойства.Вставить("ПоказательВР", Истина);
	КонецЕсли;
	
	Возврат ПользовательскиеНастройки;
	
КонецФункции

Процедура ВыводПодписейРуководителей(ПараметрыОтчета, Результат)
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьПодписи = Макет.ПолучитьОбласть("ПодписиРуководителей");
	
	ВыбиратьОрганизацию = Ложь;
	Попытка
		СписокСтруктурныхЕдиниц = ПараметрыОтчета.СписокСтруктурныхЕдиниц;
		Если СписокСтруктурныхЕдиниц.Количество() > 0 Тогда
			ВыбиратьОрганизацию = Истина;
		КонецЕсли;
	Исключение
	КонецПопытки;

	Если ВыбиратьОрганизацию Тогда
		Если СписокСтруктурныхЕдиниц.Количество() = 1 Тогда
			Организация = СписокСтруктурныхЕдиниц[0].Значение;
		Иначе
			Организация = Неопределено;
		КонецЕсли;	
	Иначе
		Организация = Неопределено;
	КонецЕсли;
	
	Если Организация = Неопределено Тогда
		ОбластьПодписи.Параметры.РукРасшифровкаПодписи     = "";	
		ОбластьПодписи.Параметры.РукДолжность              = "";
		ОбластьПодписи.Параметры.ГлавБухРасшифровкаПодписи = "";	
		ОбластьПодписи.Параметры.ГлавБухДолжность          = "";
	Иначе  
		Руководители = БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизаций(Организация, ТекущаяДата());
		ОбластьПодписи.Параметры.РукРасшифровкаПодписи     = Руководители.Руководитель;	
		ОбластьПодписи.Параметры.РукДолжность              = Руководители.РуководительДолжность;
		ОбластьПодписи.Параметры.ГлавБухРасшифровкаПодписи = Руководители.ГлавныйБухгалтер;	
		ОбластьПодписи.Параметры.ГлавБухДолжность          = Руководители.ГлавныйБухгалтерДолжность;
	КонецЕсли;        
	
	Если ПараметрыОтчета.Свойство("ПримечаниеПодписиРуководителей") И ЗначениеЗаполнено(ПараметрыОтчета.ПримечаниеПодписиРуководителей) Тогда
		ОбластьПодписи.Параметры.ТекстПримечание = ПараметрыОтчета.ПримечаниеПодписиРуководителей;
	КонецЕсли;

	Результат.Вывести(ОбластьПодписи);
	
КонецПроцедуры
