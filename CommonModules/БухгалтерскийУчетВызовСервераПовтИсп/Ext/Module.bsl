
#Область ПрограммныйИнтерфейс

// Получить значение Текущей даты сеанса
//
Функция ПолучитьТекущуюДатаСеанса() Экспорт
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции // ПолучитьТекущуюДатаСеанса()

#Область ПроцедурыИФункцииПоРаботеСоСчетамиУчета

// Функция - Получить свойства счета
//
// Параметры:
//	Счет - ПланСчетовСсылка.Хозрасчетный - значение Счета, свойства которого нужно получить.
// 
// Возвращаемое значение:
//  структура - свойства счета
//
Функция ПолучитьСвойстваСчета(Знач Счет) Экспорт

	ДанныеСчета = Новый Структура;
	ДанныеСчета.Вставить("Ссылка"                         , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ДанныеСчета.Вставить("Наименование"                   , "");
	ДанныеСчета.Вставить("Код"                            , "");
	ДанныеСчета.Вставить("Родитель"                       , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ДанныеСчета.Вставить("Вид"                            , Неопределено);
	ДанныеСчета.Вставить("Забалансовый"                   , Ложь);
	ДанныеСчета.Вставить("ЗапретитьИспользоватьВПроводках", Ложь);
	ДанныеСчета.Вставить("Валютный"                       , Ложь);
	ДанныеСчета.Вставить("Временный"                      , Ложь);
	ДанныеСчета.Вставить("Количественный"                 , Ложь);
	ДанныеСчета.Вставить("КоличествоСубконто"             , 0);
	ДанныеСчета.Вставить("ПарныйСчет"                     , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
	Для ИндексСубконто = 1 По 3 Цикл
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто,                   Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Наименование",  Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения",   Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Суммовой",      Ложь);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТолькоОбороты", Ложь);
	КонецЦикла;
	
	// Пустые свойства
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат ДанныеСчета;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", Счет);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка,
		|	Хозрасчетный.Родитель,
		|	Хозрасчетный.ПарныйСчет,
		|	Хозрасчетный.Код,
		|	Хозрасчетный.Наименование,
		|	Хозрасчетный.Вид,
		|	Хозрасчетный.Забалансовый,
		|	Хозрасчетный.ЗапретитьИспользоватьВПроводках,
		|	Хозрасчетный.Количественный,
		|	Хозрасчетный.Временный,
		|	Хозрасчетный.Валютный
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка = &Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БюджетныйВидыСубконто.НомерСтроки КАК НомерСтроки,
		|	БюджетныйВидыСубконто.ВидСубконто КАК ВидСубконто,
		|	БюджетныйВидыСубконто.ВидСубконто.Наименование КАК Наименование,
		|	БюджетныйВидыСубконто.ВидСубконто.ТипЗначения КАК ТипЗначения,
		|	БюджетныйВидыСубконто.ТолькоОбороты КАК ТолькоОбороты,
		|	БюджетныйВидыСубконто.Суммовой КАК Суммовой,
		|	БюджетныйВидыСубконто.Количественный,
		|	БюджетныйВидыСубконто.Валютный
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК БюджетныйВидыСубконто
		|ГДЕ
		|	БюджетныйВидыСубконто.Ссылка = &Счет
		|
		|УПОРЯДОЧИТЬ ПО
		|	БюджетныйВидыСубконто.НомерСтроки";
	МассивРезультатов	= Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеСчета, Выборка);
	КонецЕсли;
		
	ВыборкаВидыСубконто	= МассивРезультатов[1].Выбрать();
		
	ДанныеСчета.КоличествоСубконто = ВыборкаВидыСубконто.Количество();
		
	ИндексСубконто = 0;
		
	Пока ВыборкаВидыСубконто.Следующий() Цикл
		ИндексСубконто	= ИндексСубконто + 1;
		
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто,                   ВыборкаВидыСубконто.ВидСубконто);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Наименование",  ВыборкаВидыСубконто.Наименование);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения",   ВыборкаВидыСубконто.ТипЗначения);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Суммовой",      ВыборкаВидыСубконто.Суммовой);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТолькоОбороты", ВыборкаВидыСубконто.ТолькоОбороты);
	КонецЦикла;
	
	Возврат ДанныеСчета;
	
КонецФункции

// Возвращает признак наличия субконто на счете
//
// Параметры:
//	Счет - ПланСчетовСсылка.Хозрасчетный - Счет, на котором нужно проверить наличие субконто.
//  ВидСубконто	 - 	 - 
// 
// Возвращаемое значение:
//  булево - призначк наличия субконто
//
Функция ЕстьСубконто(Счет, ВидСубконто) Экспорт
	Возврат Счет.ВидыСубконто.Найти(ВидСубконто, "ВидСубконто") <> Неопределено;
КонецФункции 

// Функция проверяет наличие счета в иерархии
//
// Параметры:
//	Счет - ПланСчетовСсылка.Хозрасчетный - Счет, для проверки.
//	Эталон - ПланСчетовСсылка.Хозрасчетный - Счет, родитель.
// 
// Возвращаемое значение:
//  булево - 
//
Функция СчетВИерархии(Счет, Эталон) Экспорт
	Если ЗначениеЗаполнено(Счет) Тогда
		Возврат Счет = Эталон ИЛИ Счет.ПринадлежитЭлементу(Эталон);
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

// Функция получает массив счетов в иерархии групп
//
// Параметры:
//  СчетГруппа	 - Массив	- Массив групп счетов, для которых нужно полуить список подчиненных счетов.
// 
// Возвращаемое значение:
//  массив - список входящих счетов
//
Функция СчетаВИерархии(СчетГруппа) Экспорт
	Если НЕ ЗначениеЗаполнено(СчетГруппа) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетГруппа", СчетГруппа);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетГруппа)";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
КонецФункции

// Функция - Счета учета основных средств
// Все активные счета учета в иерархии счета ОсновныеСредства и НематериальныеАктивы 
//
// Возвращаемое значение:
//  Массив - Массив счетов
//
Функция СчетаУчетаОсновныхСредствИНематериальныхАктивов() Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Родитель В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновныеСредства))
		|	И Хозрасчетный.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
		|	И НЕ Хозрасчетный.ПометкаУдаления
		|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Родитель В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НематериальныеАктивы))
		|	И Хозрасчетный.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
		|	И НЕ Хозрасчетный.ПометкаУдаления
		|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
КонецФункции 

// Функция - Счета учета накопленной амортизации основных средств
// Все пассивные счета учета в иерархии счета ОсновныеСредства и НематериальныеАктивы 
//
// Возвращаемое значение:
//  Массив - Массив счетов
//
Функция СчетаУчетаНакопленнойАмортизацииОсновныхСредствИНематериальныхАктивов() Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Родитель В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновныеСредства))
		|	И Хозрасчетный.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
		|	И НЕ Хозрасчетный.ПометкаУдаления
		|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Родитель В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НематериальныеАктивы))
		|	И Хозрасчетный.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
		|	И НЕ Хозрасчетный.ПометкаУдаления
		|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
КонецФункции 

// Возвращает все счета, где присутствует субконто по указанному виду субконто
//
// Параметры:
//  ВидСубконто		 - ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные - Вид субконто.
//  ИсключенныеСчета - Массив - Массив счетов, которые нужно исключить из результата.
// 
// Возвращаемое значение:
//  СписокСчетов - Массив - массив счетов
//
Функция ПолучитьСчетаПоВидуСубконто(ВидСубконто, Знач ИсключенныеСчета = Неопределено) Экспорт
	
	Если ИсключенныеСчета = Неопределено Тогда 
		ИсключенныеСчета = Новый Массив;
	КонецЕсли;	
	
	СписокСчетов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйВидыСубконто.Ссылка КАК Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|ГДЕ
		|	ХозрасчетныйВидыСубконто.ВидСубконто = &ВидСубконто
		|	И НЕ ХозрасчетныйВидыСубконто.Ссылка.Забалансовый
		|	И НЕ ХозрасчетныйВидыСубконто.Ссылка.ЗапретитьИспользоватьВПроводках
		|	И НЕ ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ (&ИсключенныеСчета)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
	Запрос.УстановитьПараметр("ВидСубконто", ВидСубконто);
	Запрос.УстановитьПараметр("ИсключенныеСчета", ИсключенныеСчета);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		СписокСчетов = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Возврат СписокСчетов;
	
КонецФункции

//Функция возвращает типы значений субконто, связанных с именами реквизитов.
//
// Возвращаемое значение:
//   Соответствие   - ключ - имя реквизита, значение - описание типов связанных значений субконто.
//
Функция ВсеТипыСвязанныхСубконто() Экспорт
	
	СвязанныеСубконто = Новый Соответствие;
	
	ТипыСубконто = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов");
	ТипыСубконто = Новый ОписаниеТипов(ТипыСубконто, Документы.ТипВсеСсылки().Типы());
	СвязанныеСубконто.Вставить("Контрагент", ТипыСубконто);
	
	ТипыСубконто = Документы.ТипВсеСсылки();
	СвязанныеСубконто.Вставить("ДоговорКонтрагента", ТипыСубконто);
	
	ТипыСубконто = Документы.ТипВсеСсылки();
	СвязанныеСубконто.Вставить("Номенклатура", ТипыСубконто);
	
	СвязанныеСубконто.Вставить("Организация",Новый ОписаниеТипов(Документы.ТипВсеСсылки(), 
		"СправочникСсылка.БанковскиеСчета,СправочникСсылка.ПодразделенияОрганизаций,
		|СправочникСсылка.ДоговорыКонтрагентов,СправочникСсылка.Кассы"));
	
	Возврат СвязанныеСубконто;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииНастройкиПользователя

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Пользователь - текущий пользователь программы
//  Настройка    - признак, для которого возвращается значение по умолчанию
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, Настройка, ПустоеЗначение = Неопределено) Экспорт

	Если ПустоеЗначение = Неопределено Тогда
		ПустоеЗначение = ПланыВидовХарактеристик.НастройкиПользователей[Настройка].ТипЗначения.ПривестиЗначение();
	КонецЕсли;

	// Организация всего одна.
	Если Настройка = "ОсновнаяОрганизация" 
		И ПолучитьФункциональнуюОпцию("НеВестиУчетПоОрганизациям") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Организации.Ссылка КАК ОсновнаяОрганизация
			|ИЗ
			|	Справочник.Организации КАК Организации";
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда 
			Возврат ПустоеЗначение;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.ОсновнаяОрганизация;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.НастройкиПользователей[Настройка]);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрЗначениеПрав.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.НастройкиПользователей КАК РегистрЗначениеПрав
		|ГДЕ
		|	РегистрЗначениеПрав.Пользователь = &Пользователь
		|	И РегистрЗначениеПрав.Настройка = &Настройка";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() = 0 Тогда
		Возврат ПустоеЗначение;
	ИначеЕсли Выборка.Следующий() Тогда
		Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат ПустоеЗначение;
		Иначе
			Возврат Выборка.Значение;
		КонецЕсли;
	Иначе
		Возврат ПустоеЗначение;
	КонецЕсли;

КонецФункции // ПолучитьЗначениеПоУмолчаниюПользователя()

// См. БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя
//
Функция ПолучитьЗначениеНастройки(Настройка, ПустоеЗначение = Неопределено) Экспорт
	Пользователь = Пользователи.АвторизованныйПользователь();
	Возврат ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, Настройка); 
КонецФункции // ПолучитьЗначениеНастройки()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Получить полное наименование организации
//
Функция ПолучитьПолноеНаименованиеОрганизации(Организация = Неопределено) Экспорт
	Если Организация = Неопределено Тогда 
		Организация = ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
	КонецЕсли;		

	Возврат Организация.НаименованиеПолное;
КонецФункции // ПолучитьПолноеНаименованиеОрганизации()

// Следует использовать функцию БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизаций
//
Функция ОтветственныеЛицаОрганизаций(Организация, Дата, ДополнительныеПараметры) Экспорт
	КоличествоКасс		= 0;
	ЕстьОтборПоКассе 	= Истина;
	Касса 				= Справочники.Кассы.ПустаяСсылка();
	// Получаем количество касс без пометки "ПометкаУдаления"
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Кассы.Ссылка) КАК КоличествоКасс
		|ИЗ
		|	Справочник.Кассы КАК Кассы
		|ГДЕ
		|	НЕ Кассы.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();		
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		КоличествоКасс = ВыборкаДетальныеЗаписи.КоличествоКасс;	
	КонецЕсли;	
	Если КоличествоКасс <= 1 Тогда
		ЕстьОтборПоКассе = Ложь;
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры = Неопределено
		И ДополнительныеПараметры.Свойство("Касса") 
		И ЗначениеЗаполнено(ДополнительныеПараметры.Касса) Тогда
		Касса = ДополнительныеПараметры.Касса;
	КонецЕсли;	
	
	Результат = Новый Структура(
		"Руководитель, 
		|РуководительПериод,
		|РуководительФизЛицо,
		|РуководительДолжность, 
		|РуководительДолжностьСсылка,
		|ФаксимилеРуководителя,
		|ГлавныйБухгалтер, 
		|ГлавныйБухгалтерПериод, 
		|ГлавныйБухгалтерФИзЛицо,
		|ГлавныйБухгалтерДолжность, 
		|ГлавныйБухгалтерДолжностьСсылка,
		|ФаксимилеГлавногоБухгалтера,
		|Кассир, 
		|КассирПериод, 
		|КассирФИзЛицо,								
		|КассирДолжность, 
		|КассирДолжностьСсылка,
		|ФаксимилеКассира,
		|КассирКасса, 
		|КассирКассаСсылка");
		
	// В запросе сортировка по периоду.
	// Если у Сотрудника несколько должностей или касс, то потом при заполнении структуры возврата
	// на выходе получим самые последние записи к моменту выборки
	Если Организация <> Неопределено Тогда
		ЗапросПоЛицам = Новый Запрос();
		ЗапросПоЛицам.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОтветственныеЛицаОрганизацииСрезПоследних.ОтветственноеЛицо КАК ОтветственноеЛицо,
			|	ОтветственныеЛицаОрганизацииСрезПоследних.Должность.Наименование КАК Должность,
			|	ОтветственныеЛицаОрганизацииСрезПоследних.Должность КАК ДолжностьСсылка,
			|	ОтветственныеЛицаОрганизацииСрезПоследних.ФайлФаксимильнаяПечать КАК ФайлФаксимильнаяПечать,
			|	ОтветственныеЛицаОрганизацииСрезПоследних.Касса.Наименование КАК Касса,
			|	ОтветственныеЛицаОрганизацииСрезПоследних.Касса КАК КассаСсылка,
			|	ОтветственныеЛицаОрганизацииСрезПоследних.ФизЛицо КАК ФизЛицо,
			|	ВЫБОР
			|		КОГДА ФИОФизическихЛицСрезПоследних.ФизЛицо ЕСТЬ NULL
			|			ТОГДА ОтветственныеЛицаОрганизацииСрезПоследних.ФизЛицо.Наименование
			|		ИНАЧЕ ФИОФизическихЛицСрезПоследних.Фамилия + ВЫБОР
			|				КОГДА ПОДСТРОКА(ФИОФизическихЛицСрезПоследних.Имя, 1, 1) <> """"
			|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизическихЛицСрезПоследних.Имя, 1, 1) + "".""
			|				ИНАЧЕ """"
			|			КОНЕЦ + ВЫБОР
			|				КОГДА ПОДСТРОКА(ФИОФизическихЛицСрезПоследних.Отчество, 1, 1) <> """"
			|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизическихЛицСрезПоследних.Отчество, 1, 1) + "".""
			|				ИНАЧЕ """"
			|			КОНЕЦ
			|	КОНЕЦ КАК ФИОПолное,
			|	ОтветственныеЛицаОрганизацииСрезПоследних.Период КАК Период
			|ИЗ
			|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&Период, Организация = &Организация) КАК ОтветственныеЛицаОрганизацииСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Период, ) КАК ФИОФизическихЛицСрезПоследних
			|		ПО ОтветственныеЛицаОрганизацииСрезПоследних.ФизЛицо = ФИОФизическихЛицСрезПоследних.ФизЛицо
			|ГДЕ
			|	ВЫБОР
			|			КОГДА ОтветственныеЛицаОрганизацииСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир)
			|				ТОГДА ОтветственныеЛицаОрганизацииСрезПоследних.Касса = &Касса
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|
			|УПОРЯДОЧИТЬ ПО
			|	ОтветственныеЛицаОрганизацииСрезПоследних.Период";		
		Если НЕ ЕстьОтборПоКассе Тогда
			ЗапросПоЛицам.Текст = СтрЗаменить(ЗапросПоЛицам.Текст,
				"ОтветственныеЛицаОрганизацииСрезПоследних.Касса = &Касса",
				"Истина");			
		КонецЕсли;
		
		ЗапросПоЛицам.Параметры.Вставить("Касса", Касса);
		ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
		ЗапросПоЛицам.УстановитьПараметр("Период", Дата);							  
		
		Выборка = ЗапросПоЛицам.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл
			Если Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
				Результат.Руководитель            		= Выборка.ФИОПолное;
				Результат.РуководительПериод       		= Выборка.Период;
				Результат.РуководительФизЛицо     		= Выборка.ФизЛицо;
				Результат.РуководительДолжность   		= Выборка.Должность;
				Результат.РуководительДолжностьСсылка   = Выборка.ДолжностьСсылка;
				Результат.ФаксимилеРуководителя   		= Выборка.ФайлФаксимильнаяПечать;
			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
				Результат.ГлавныйБухгалтер        			= Выборка.ФИОПолное;
				Результат.ГлавныйБухгалтерПериод   			= Выборка.Период;
				Результат.ГлавныйБухгалтерФизЛицо    		= Выборка.ФизЛицо;
				Результат.ГлавныйБухгалтерДолжность 		= Выборка.Должность;
				Результат.ГлавныйБухгалтерДолжностьСсылка   = Выборка.ДолжностьСсылка;
				Результат.ФаксимилеГлавногоБухгалтера   	= Выборка.ФайлФаксимильнаяПечать;
			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
				Результат.Кассир                  	= Выборка.ФИОПолное;
				Результат.КассирПериод             	= Выборка.Период;
				Результат.КассирФизЛицо 		  	= Выборка.ФизЛицо;
				Результат.КассирДолжность         	= Выборка.Должность;
				Результат.КассирДолжностьСсылка   	= Выборка.ДолжностьСсылка;
				Результат.ФаксимилеКассира	   		= Выборка.ФайлФаксимильнаяПечать;
				Результат.КассирКасса         		= Выборка.Касса;
				Результат.КассирКассаСсылка   		= Выборка.КассаСсылка;				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;
КонецФункции // ОтветственныеЛицаОрганизации()

// Следует использовать функцию БухгалтерскийУчетСервер.ПолучитьСведенияОбОрганизации
//
Функция ПолучитьСведенияОбОрганизации(Знач Организация, Знач ДатаЗначения = Неопределено, Знач СписокПоказателей = Неопределено) Экспорт
	Перем ОргСведения;
	Перем Значение;

	// Структура, в которой будут возвращаться найденные значения
	ОргСведения = Новый Структура;
	
	Если ДатаЗначения = Неопределено Тогда
		ДатаЗначения = ТекущаяДатаСеанса();
	КонецЕсли;
	ДатаЗначения = КонецДня(ДатаЗначения);
	
	ПустойАдрес = "";
	
	Организация = Организация.ПолучитьОбъект();
	Организация.Прочитать();
	
	Кэш = Новый Структура;
	Кэш.Вставить("Организация", Организация);
	Кэш.Вставить("ДатаЗначения", ДатаЗначения);
	
	ОсновнойБанковскийСчет = Организация.ОсновнойБанковскийСчет;
	
	Если СписокПоказателей = Неопределено Тогда
		
		СписокПоказателей = Новый Массив;
		СписокПоказателей.Добавить("Наименование");
		СписокПоказателей.Добавить("НаименованиеПолное");
		СписокПоказателей.Добавить("Префикс");
		
		// Данные
		СписокПоказателей.Добавить("ИНН");
		СписокПоказателей.Добавить("ОКПО");
		СписокПоказателей.Добавить("СОАТО");
		СписокПоказателей.Добавить("ГНС");
		СписокПоказателей.Добавить("ГНСКод");
		СписокПоказателей.Добавить("ГНСНаименование");
		СписокПоказателей.Добавить("РегНомерСоцФонда");
		СписокПоказателей.Добавить("КодГКЭД");
		СписокПоказателей.Добавить("НаименованиеГКЭД");
		СписокПоказателей.Добавить("ОрганУправления");
		СписокПоказателей.Добавить("КодПравовойФормы");
		
		// Контактная информация
		СписокПоказателей.Добавить("АдрПочт");
		СписокПоказателей.Добавить("АдрЮР");
		СписокПоказателей.Добавить("АдрФакт");
		СписокПоказателей.Добавить("Тел");
		СписокПоказателей.Добавить("Факс");
		СписокПоказателей.Добавить("Email");	
		
		// Адрес
		СписокПоказателей.Добавить("Страна");
		СписокПоказателей.Добавить("Индекс");
		СписокПоказателей.Добавить("Регион");
		СписокПоказателей.Добавить("Район");
		СписокПоказателей.Добавить("Город");
		СписокПоказателей.Добавить("НаселенныйПункт");
		СписокПоказателей.Добавить("Улица");
		СписокПоказателей.Добавить("Дом");
		СписокПоказателей.Добавить("Корпус");
		СписокПоказателей.Добавить("Квартира");
		
		// Данные регистрации
		СписокПоказателей.Добавить("ДатаРегистрации");
		СписокПоказателей.Добавить("ДатаРегистрацииНДС");
		СписокПоказателей.Добавить("СерияДокументаРегистрацииНДС");
		СписокПоказателей.Добавить("НомерДокументаРегистрацииНДС");
		
		// Банковский счет
		СписокПоказателей.Добавить("Банк");
		СписокПоказателей.Добавить("БИКБанка");
		СписокПоказателей.Добавить("КоррСчетБанка");
		СписокПоказателей.Добавить("НомерСчета");
	КонецЕсли;
	
	ЭтоМассив = (ТипЗнч(СписокПоказателей) = Тип("Массив"));
	
	СоответствиеАдреса = Новый Соответствие;
	СоответствиеАдреса.Вставить("Страна",			"");
	
	СоответствиеАдреса.Вставить("Индекс",			"");
	СоответствиеАдреса.Вставить("Регион",			"");
	СоответствиеАдреса.Вставить("Район",			"");
	СоответствиеАдреса.Вставить("Город",			"");
	СоответствиеАдреса.Вставить("НаселенныйПункт", 	"");
	СоответствиеАдреса.Вставить("Улица",			"");
	СоответствиеАдреса.Вставить("Дом",				"");
	СоответствиеАдреса.Вставить("Корпус",			"");
	СоответствиеАдреса.Вставить("Квартира",			"");
	
	Для Каждого Показатель Из СписокПоказателей Цикл
	
		ИмяПоказателя = ?(ЭтоМассив, Показатель, Показатель.Представление);
		
		Если Имяпоказателя = "Наименование" Тогда
			
			Значение = Организация.Наименование;
			
		ИначеЕсли Имяпоказателя = "НаименованиеПолное" Тогда
			
			Значение = Организация.НаименованиеПолное;
			
		ИначеЕсли ИмяПоказателя	= "Префикс" Тогда
			
			Значение = Организация.Префикс;
			
		ИначеЕсли ИмяПоказателя = "ИНН" Тогда
			
			Значение = Организация.ИНН;
			
		ИначеЕсли ИмяПоказателя = "ОКПО" Тогда
			
			Значение = Организация.КодПоОКПО;
			
		ИначеЕсли ИмяПоказателя = "СОАТО" Тогда
			
			Значение = Организация.СОАТО;

		ИначеЕсли ИмяПоказателя = "ГНС" Тогда
			
			Значение = Организация.ГНС;
			
		ИначеЕсли ИмяПоказателя = "ГНСКод" Тогда
			
			Значение = Организация.ГНС.Код;
			
		ИначеЕсли ИмяПоказателя = "ГНСНаименование" Тогда
			
			Значение = Организация.ГНС.Наименование;
			
		ИначеЕсли ИмяПоказателя = "РегНомерСоцФонда" Тогда
			
			Значение = Организация.РегНомерСоцФонда;
			
		ИначеЕсли ИмяПоказателя = "КодГКЭД" Тогда
			
			Значение  = Организация.КодГКЭД;
			
		ИначеЕсли ИмяПоказателя = "НаименованиеГКЭД" Тогда
			
			Значение = Организация.НаименованиеГКЭД;
			
		ИначеЕсли ИмяПоказателя = "ОрганУправления" Тогда	
			
			Значение = Организация.ОрганУправления;
			
		ИначеЕсли ИмяПоказателя = "КодПравовойФормы" Тогда
			
			Значение = Организация.КодПравовойФормы;
			
		ИначеЕсли ИмяПоказателя = "ДатаРегистрации" Тогда
			
			Значение = Организация.ДатаРегистрации;
			
		ИначеЕсли ИмяПоказателя = "ДатаРегистрацииНДС" Тогда
			
			Значение = Организация.ДатаРегистрацииНДС;
			
		ИначеЕсли ИмяПоказателя = "СерияДокументаРегистрацииНДС" Тогда
			
			Значение = Организация.СерияДокументаРегистрацииНДС;
			
		ИначеЕсли ИмяПоказателя = "НомерДокументаРегистрацииНДС" Тогда
			
			Значение = Организация.НомерДокументаРегистрацииНДС;
			
		// Основной банковский счет	
		ИначеЕсли ИмяПоказателя = "Банк" Тогда
			
			Значение = ОсновнойБанковскийСчет.Банк;
			
		ИначеЕсли ИмяПоказателя = "БИКБанка" Тогда
			
			Значение = ОсновнойБанковскийСчет.Банк.Код;
			
		ИначеЕсли ИмяПоказателя = "КоррСчетБанка" Тогда
			
			Значение = ОсновнойБанковскийСчет.Банк.КоррСчет;
			
		ИначеЕсли ИмяПоказателя = "НомерСчета" Тогда
			
			Значение = ОсновнойБанковскийСчет.НомерСчета;
		
		// Контактная информация		
		ИначеЕсли ИмяПоказателя = "АдрПочт" Тогда
			
			ИмяПредопределенного = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ИмяПредопределенного);

			Результат = Организация.КонтактнаяИнформация.НайтиСтроки(Данные);

			Если Результат.Количество() > 0 Тогда
				Значение = Результат[0].Представление;
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрЮР" Тогда
			
			ИмяПредопределенного = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ИмяПредопределенного);

			Результат = Организация.КонтактнаяИнформация.НайтиСтроки(Данные);

			Если Результат.Количество() > 0 Тогда
				Значение = Результат[0].Представление;
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрФакт" Тогда
			
			ИмяПредопределенного = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ИмяПредопределенного);

			Результат = Организация.КонтактнаяИнформация.НайтиСтроки(Данные);

			Если Результат.Количество() > 0 Тогда
				Значение = Результат[0].Представление;
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "Тел" Тогда
			
			ИмяПредопределенного = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ИмяПредопределенного);
			
			Результат = Организация.КонтактнаяИнформация.НайтиСтроки(Данные);
			
			Если Результат.Количество() > 0 Тогда
				Значение = Результат[0].Представление;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "Факс" Тогда
			
			ИмяПредопределенного = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Факс, ИмяПредопределенного);
			
			Результат = Организация.КонтактнаяИнформация.НайтиСтроки(Данные);
			
			Если Результат.Количество() > 0 Тогда
				Значение = Результат[0].Представление;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "Email" Тогда
			
			ИмяПредопределенного = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, ИмяПредопределенного);
			
			Результат = Организация.КонтактнаяИнформация.НайтиСтроки(Данные);
			
			Если Результат.Количество() > 0 Тогда
				Значение = Результат[0].Представление;
			Иначе
				Значение = "";
			КонецЕсли;
			
		// Контактная информация Адрес
		ИначеЕсли ИмяПоказателя = "Страна" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Страна"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Страна"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Индекс" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Индекс"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Индекс"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Регион" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Регион"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Регион"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Район" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Район"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Район"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Город" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Город"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Город"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "НаселенныйПункт" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["НаселенныйПункт"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["НаселенныйПункт"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Улица" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Улица"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Улица"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Дом" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Дом"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Дом"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Корпус" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Корпус"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Корпус"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Квартира" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Квартира"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Квартира"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		Иначе 
			Значение = "";
		КонецЕсли;
		
		ОргСведения.Вставить(ИмяПоказателя, Значение);
	КонецЦикла;
	
	Возврат ОргСведения;
	
КонецФункции

// Функция возвращает информацию об организации с учетом предыдущих обращений к сведениям.
// Параметры:
//		Кэш - структура, содержащая информацию с данными об организации, которые запрашивались ранее (кэш сведений);
//		Параметр - строка, имя запрашиваемого параметра;
// Возвращаемое значение:
//		Значение запрашиваемого параметра, полученное с учетом кэша.
Функция ПолучитьСУчетомКэша(Кэш, Параметр)
	Перем ЗначениеПараметра;
	Перем Ставки;
	
	Если Кэш.Свойство(Параметр, ЗначениеПараметра) Тогда
		Возврат Кэш[Параметр];
	КонецЕсли;
	
	Если Параметр = "ЮрАдресОрганизации" ИЛИ Параметр = "ФактАдресОрганизации"  Тогда
		
		ЭлементАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ЭлементАдрес);
		Результат = Кэш.Организация.КонтактнаяИнформация.НайтиСтроки(Данные);
		Если Результат.Количество() > 0 Тогда
			Результат = Результат[0];
		Иначе
			Результат = Неопределено;
		КонецЕсли;
	КонецЕсли;
				
	Кэш.Вставить(Параметр, Результат);
	Возврат Результат;
	
КонецФункции

Процедура СформироватьАдрес(КонтактнаяИнформация, СоответствиеАдреса) Экспорт
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(КонтактнаяИнформация) Тогда
		//ПолученныйАдрес = УправлениеКонтактнойИнформациейСлужебный.СтрокуJSONВСтруктуру(КонтактнаяИнформация);
		//НаселенныйПунктДетально = РаботаСАдресамиКлиентСервер.ОписаниеНовойКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
		НаселенныйПунктДетально = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(КонтактнаяИнформация, Перечисления.ТипыКонтактнойИнформации.Адрес);
	Иначе 
		Возврат;
	КонецЕсли;	
	
	СоответствиеАдреса["Страна"] = НаселенныйПунктДетально.country;
	
	СоответствиеАдреса["Индекс"] = НаселенныйПунктДетально.ZIPcode;
	СоответствиеАдреса["Регион"] = НаселенныйПунктДетально.area;
	СоответствиеАдреса["Район"] = НаселенныйПунктДетально.district;
	СоответствиеАдреса["Город"] = СокрЛП(НаселенныйПунктДетально.city + " " + НаселенныйПунктДетально.cityType);
	СоответствиеАдреса["НаселенныйПункт"] = НаселенныйПунктДетально.locality;
	СоответствиеАдреса["Улица"] = СокрЛП(НаселенныйПунктДетально.street + " " + НаселенныйПунктДетально.streetType);
	СоответствиеАдреса["Дом"] = НаселенныйПунктДетально.houseNumber;
	СоответствиеАдреса["Корпус"] = ?(НаселенныйПунктДетально.buildings.Количество() = 0, "", НаселенныйПунктДетально.buildings[0].Number);
	СоответствиеАдреса["Квартира"] = ?(НаселенныйПунктДетально.apartments.Количество() = 0, "", НаселенныйПунктДетально.apartments[0].Number);
	
КонецПроцедуры

// Следует использовать функцию БухгалтерскийУчетСервер.ПолучитьСведенияОФизЛице
//
Функция ПолучитьСведенияОФизЛице(Знач Организация, знач ФизЛицо, Знач Период = Неопределено, Знач СписокПоказателей = Неопределено) Экспорт
	Перем Значение;

	// Структура, в которой будут возвращаться найденные значения
	ФизЛицоСведения = Новый Структура;
	
	Если Период = Неопределено Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	Период = КонецДня(Период);
	
	ПустойАдрес = "";
	
	Кэш = Новый Структура;
	Кэш.Вставить("Организация", Организация);
	Кэш.Вставить("ФизЛицо", ФизЛицо);
	Кэш.Вставить("Период", Период);
	
	ОсновнойБанковскийСчет = ФизЛицо.ОсновнойБанковскийСчет;
	
	Если СписокПоказателей = Неопределено Тогда
		
		СписокПоказателей = Новый Массив;
		СписокПоказателей.Добавить("Наименование");
		СписокПоказателей.Добавить("ФИО");
		СписокПоказателей.Добавить("ФамилияИнициалы");
		
		// Данные
		СписокПоказателей.Добавить("ИНН");
		СписокПоказателей.Добавить("ДатаРождения");
		СписокПоказателей.Добавить("МестоРождения");
		СписокПоказателей.Добавить("Пол");
		СписокПоказателей.Добавить("МестоПрописки");
		СписокПоказателей.Добавить("МестоЖительства");
		СписокПоказателей.Добавить("Национальность");
		
		// Контактная информация
		СписокПоказателей.Добавить("АдрПоПрописке");
		СписокПоказателей.Добавить("АдрФакт");
		СписокПоказателей.Добавить("ТелДом");
		СписокПоказателей.Добавить("ТелРаб");
		
		// Адрес
		СписокПоказателей.Добавить("Страна");
		СписокПоказателей.Добавить("Индекс");
		СписокПоказателей.Добавить("Регион");
		СписокПоказателей.Добавить("Район");
		СписокПоказателей.Добавить("Город");
		СписокПоказателей.Добавить("НаселенныйПункт");
		СписокПоказателей.Добавить("Улица");
		СписокПоказателей.Добавить("Дом");
		СписокПоказателей.Добавить("Корпус");
		СписокПоказателей.Добавить("Квартира");
		
		// Данные регистров
		// Гражданство
		СписокПоказателей.Добавить("ГражданствоСтрана");
		// Паспорт
		СписокПоказателей.Добавить("ПаспортСерия");
		СписокПоказателей.Добавить("ПаспортНомер");
		СписокПоказателей.Добавить("ПаспортДатаВыдачи");
		СписокПоказателей.Добавить("ПаспортКемВыдан");
		
		// Сотрудники.
		СписокПоказателей.Добавить("Подразделение");
		СписокПоказателей.Добавить("Должность");
		СписокПоказателей.Добавить("ТабельныйНомер");
		
		// Банковский счет
		СписокПоказателей.Добавить("Банк");
		СписокПоказателей.Добавить("БИКБанка");
		СписокПоказателей.Добавить("КоррСчетБанка");
		СписокПоказателей.Добавить("НомерСчета");
	КонецЕсли;
	
	ЭтоМассив = (ТипЗнч(СписокПоказателей) = Тип("Массив"));
	
	СоответствиеАдреса = Новый Соответствие;
	СоответствиеАдреса.Вставить("Страна",			"");
	
	СоответствиеАдреса.Вставить("Индекс",			"");
	СоответствиеАдреса.Вставить("Регион",			"");
	СоответствиеАдреса.Вставить("Район",			"");
	СоответствиеАдреса.Вставить("Город",			"");
	СоответствиеАдреса.Вставить("НаселенныйПункт", 	"");
	СоответствиеАдреса.Вставить("Улица",			"");
	СоответствиеАдреса.Вставить("Дом",				"");
	СоответствиеАдреса.Вставить("Корпус",			"");
	СоответствиеАдреса.Вставить("Квартира",			"");
	
	ФИОФизЛица = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	Если НЕ (СписокПоказателей.Найти("ФИО") = Неопределено
		И СписокПоказателей.Найти("ФамилияИнициалы") = Неопределено) Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
			|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
			|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Период, ФизЛицо = &ФизЛицо) КАК ФИОФизическихЛицСрезПоследних";
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			ЗаполнитьЗначенияСвойств(ФИОФизЛица, ВыборкаДетальныеЗаписи);	
		КонецЕсли;;
	КонецЕсли;	
	
	ДанныеРегистров = Новый Структура("ГражданствоСтрана, ПаспортСерия, ПаспортНомер, ПаспортДатаВыдачи, ПаспортКемВыдан", "", "", "", "", "");
	Если НЕ СписокПоказателей.Найти("ГражданствоСтрана") = Неопределено Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ГражданствоФизическихЛицСрезПоследних.Страна КАК ГражданствоСтрана
			|ИЗ
			|	РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(&Период, ФизЛицо = &ФизЛицо) КАК ГражданствоФизическихЛицСрезПоследних";
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			ЗаполнитьЗначенияСвойств(ДанныеРегистров, ВыборкаДетальныеЗаписи);	
		КонецЕсли;;
	КонецЕсли;	
	
	Если НЕ (СписокПоказателей.Найти("ПаспортСерия") = Неопределено
		И СписокПоказателей.Найти("ПаспортНомер") = Неопределено
		И СписокПоказателей.Найти("ПаспортДатаВыдачи") = Неопределено
		И СписокПоказателей.Найти("ПаспортКемВыдан") = Неопределено) Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДокументыФизическихЛицСрезПоследних.Серия КАК ПаспортСерия,
			|	ДокументыФизическихЛицСрезПоследних.Номер КАК ПаспортНомер,
			|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ПаспортДатаВыдачи,
			|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК ПаспортКемВыдан
			|ИЗ
			|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
			|			&Период,
			|			ФизЛицо = &ФизЛицо
			|				И ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.Паспорт)) КАК ДокументыФизическихЛицСрезПоследних";
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			ЗаполнитьЗначенияСвойств(ДанныеРегистров, ВыборкаДетальныеЗаписи);	
		КонецЕсли;;
	КонецЕсли;	
	
	// Сотрудники.
	ДанныеСотрудники = Новый Структура("Подразделение, Должность, ТабельныйНомер", "", "", "");
	Если НЕ (СписокПоказателей.Найти("Подразделение") = Неопределено
		И СписокПоказателей.Найти("Должность") = Неопределено
		И СписокПоказателей.Найти("ТабельныйНомер") = Неопределено) Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СотрудникиСрезПоследних.ФизЛицо.Код КАК ТабельныйНомер,
			|	СотрудникиСрезПоследних.Подразделение КАК Подразделение,
			|	СотрудникиСрезПоследних.Должность КАК Должность
			|ИЗ
			|	РегистрСведений.Сотрудники.СрезПоследних(
			|			&Период,
			|			Организация = &Организация
			|				И ФизЛицо = &ФизЛицо) КАК СотрудникиСрезПоследних";
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			ЗаполнитьЗначенияСвойств(ДанныеСотрудники, ВыборкаДетальныеЗаписи);	
		КонецЕсли;;
	КонецЕсли;	
	
	Для Каждого Показатель Из СписокПоказателей Цикл
	
		ИмяПоказателя = ?(ЭтоМассив, Показатель, Показатель.Представление);
		
		Если Имяпоказателя = "Наименование" Тогда
			
			Значение = ФизЛицо.Наименование;
			
		ИначеЕсли Имяпоказателя = "ФИО" Тогда
			
			Значение = БухгалтерскийУчетСервер.ПолучитьФамилиюИмяОтчество(ФИОФизЛица.Фамилия, ФИОФизЛица.Имя, ФИОФизЛица.Отчество, Ложь);
			
		ИначеЕсли ИмяПоказателя	= "ФамилияИнициалы" Тогда
			
			Значение = БухгалтерскийУчетСервер.ПолучитьФамилиюИмяОтчество(ФИОФизЛица.Фамилия, ФИОФизЛица.Имя, ФИОФизЛица.Отчество, Истина);
			
		ИначеЕсли ИмяПоказателя = "ИНН" Тогда
			
			Значение = ФизЛицо.ИНН;
			
		ИначеЕсли ИмяПоказателя = "ДатаРождения" Тогда
			
			Значение = ФизЛицо.ДатаРождения;
			
		ИначеЕсли ИмяПоказателя = "МестоРождения" Тогда
			
			Значение = ОбщегоНазначенияБПКлиентСервер.ПредставлениеМестаРождения(ФизЛицо.МестоРождения);
			
		ИначеЕсли ИмяПоказателя = "Пол" Тогда
			
			Значение = ФизЛицо.Пол;
			
		ИначеЕсли ИмяПоказателя = "МестоПрописки" Тогда
			
			Значение = ФизЛицо.МестоПрописки;
			
		ИначеЕсли ИмяПоказателя = "МестоЖительства" Тогда
			
			Значение = ФизЛицо.МестоЖительства;
			
		ИначеЕсли ИмяПоказателя = "Национальность" Тогда
			
			Значение = ФизЛицо.Национальность;
			
		// Данные регистров.
		ИначеЕсли ИмяПоказателя = "ГражданствоСтрана" Тогда
			
			Значение = ДанныеРегистров.ГражданствоСтрана;
			
		ИначеЕсли ИмяПоказателя = "ПаспортСерия" Тогда
			
			Значение = ДанныеРегистров.ПаспортСерия;
			
		ИначеЕсли ИмяПоказателя = "ПаспортНомер" Тогда
			
			Значение = ДанныеРегистров.ПаспортНомер;
			
		ИначеЕсли ИмяПоказателя = "ПаспортДатаВыдачи" Тогда
			
			Значение = ДанныеРегистров.ПаспортДатаВыдачи;
			
		ИначеЕсли ИмяПоказателя = "ПаспортКемВыдан" Тогда
			
			Значение = ДанныеРегистров.ПаспортКемВыдан;
			
		// Сотрудники	
		ИначеЕсли ИмяПоказателя = "ТабельныйНомер" Тогда
			Значение = ДанныеСотрудники.ТабельныйНомер;
		ИначеЕсли ИмяПоказателя = "Подразделение" Тогда
			Значение = ДанныеСотрудники.Подразделение;
		ИначеЕсли ИмяПоказателя = "Должность" Тогда
			Значение = ДанныеСотрудники.Должность;
			
		// Основной банковский счет	
		ИначеЕсли ИмяПоказателя = "Банк" Тогда
			
			Значение = ОсновнойБанковскийСчет.Банк;
			
		ИначеЕсли ИмяПоказателя = "БИКБанка" Тогда
			
			Значение = ОсновнойБанковскийСчет.Банк.Код;
			
		ИначеЕсли ИмяПоказателя = "КоррСчетБанка" Тогда
			
			Значение = ОсновнойБанковскийСчет.Банк.КоррСчет;
			
		ИначеЕсли ИмяПоказателя = "НомерСчета" Тогда
			
			Значение = ОсновнойБанковскийСчет.НомерСчета;
		
		// Контактная информация		
		ИначеЕсли ИмяПоказателя = "АдрПоПрописке" Тогда
			
			ИмяПредопределенного = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ИмяПредопределенного);

			Результат = ФизЛицо.КонтактнаяИнформация.НайтиСтроки(Данные);

			Если Результат.Количество() > 0 Тогда
				Значение = Результат[0].Представление;
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрФакт" Тогда
			
			ИмяПредопределенного = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ИмяПредопределенного);

			Результат = ФизЛицо.КонтактнаяИнформация.НайтиСтроки(Данные);

			Если Результат.Количество() > 0 Тогда
				Значение = Результат[0].Представление;
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТелДом" Тогда
			
			ИмяПредопределенного = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ИмяПредопределенного);
			
			Результат = Организация.КонтактнаяИнформация.НайтиСтроки(Данные);
			
			Если Результат.Количество() > 0 Тогда
				Значение = Результат[0].Представление;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТелРаб" Тогда
			
			ИмяПредопределенного = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Факс, ИмяПредопределенного);
			
			Результат = Организация.КонтактнаяИнформация.НайтиСтроки(Данные);
			
			Если Результат.Количество() > 0 Тогда
				Значение = Результат[0].Представление;
			Иначе
				Значение = "";
			КонецЕсли;
			
		// Контактная информация Адрес
		ИначеЕсли ИмяПоказателя = "Страна" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Страна"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Страна"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Индекс" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Индекс"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Индекс"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Регион" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Регион"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Регион"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Район" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Район"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Район"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Город" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Город"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Город"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "НаселенныйПункт" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["НаселенныйПункт"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["НаселенныйПункт"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Улица" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Улица"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Улица"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Дом" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Дом"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Дом"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Корпус" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Корпус"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Корпус"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Квартира" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Квартира"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Квартира"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		Иначе 
			Значение = "";
		КонецЕсли;
		
		ФизЛицоСведения.Вставить(ИмяПоказателя, Значение);
	КонецЦикла;
	
	Возврат ФизЛицоСведения;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииВзаиморасчетыСКонтрагентами

// Следует использовать функцию БухгалтерскийУчетСервер.ПолучитьСведенияОКонтрагенте
//
Функция ПолучитьСведенияОКонтрагенте(Знач Контрагент, Знач СписокПоказателей = Неопределено) Экспорт
	Перем КонтрагентСведения;
	Перем Значение;

	// Структура, в которой будут возвращаться найденные значения
	КонтрагентСведения = Новый Структура;
	
	ПустойАдрес = "";
	
	Контрагент = Контрагент.ПолучитьОбъект();
	Контрагент.Прочитать();
	
	Кэш = Новый Структура;
	Кэш.Вставить("Контрагент", Контрагент);
	
	ОсновнойБанковскийСчет = Контрагент.ОсновнойБанковскийСчет;
	
	Если СписокПоказателей = Неопределено Тогда
		
		СписокПоказателей = Новый Массив;
		СписокПоказателей.Добавить("Наименование");
		СписокПоказателей.Добавить("НаименованиеПолное");
		
		// Данные
		СписокПоказателей.Добавить("ИНН");
		СписокПоказателей.Добавить("ОКПО");
		СписокПоказателей.Добавить("ГНС");
		СписокПоказателей.Добавить("ГНСКод");
		СписокПоказателей.Добавить("ГНСНаименование");
		СписокПоказателей.Добавить("КодПравовойФормы");
		
		// Контактная информация
		СписокПоказателей.Добавить("АдрПочт");
		СписокПоказателей.Добавить("АдрЮР");
		СписокПоказателей.Добавить("АдрФакт");
		СписокПоказателей.Добавить("Тел");
		СписокПоказателей.Добавить("Факс");
		СписокПоказателей.Добавить("Email");	
		
		// Адрес
		СписокПоказателей.Добавить("Страна");
		СписокПоказателей.Добавить("Индекс");
		СписокПоказателей.Добавить("Регион");
		СписокПоказателей.Добавить("Район");
		СписокПоказателей.Добавить("Город");
		СписокПоказателей.Добавить("НаселенныйПункт");
		СписокПоказателей.Добавить("Улица");
		СписокПоказателей.Добавить("Дом");
		СписокПоказателей.Добавить("Корпус");
		СписокПоказателей.Добавить("Квартира");
		
		// Банковский счет
		СписокПоказателей.Добавить("Банк");
		СписокПоказателей.Добавить("БИКБанка");
		СписокПоказателей.Добавить("КоррСчетБанка");
		СписокПоказателей.Добавить("НомерСчета");
	КонецЕсли;
	
	ЭтоМассив = (ТипЗнч(СписокПоказателей) = Тип("Массив"));
	
	СоответствиеАдреса = Новый Соответствие;
	СоответствиеАдреса.Вставить("Страна",			"");
	
	СоответствиеАдреса.Вставить("Индекс",			"");
	СоответствиеАдреса.Вставить("Регион",			"");
	СоответствиеАдреса.Вставить("Район",			"");
	СоответствиеАдреса.Вставить("Город",			"");
	СоответствиеАдреса.Вставить("НаселенныйПункт", 	"");
	СоответствиеАдреса.Вставить("Улица",			"");
	СоответствиеАдреса.Вставить("Дом",				"");
	СоответствиеАдреса.Вставить("Корпус",			"");
	СоответствиеАдреса.Вставить("Квартира",			"");
	
	Для Каждого Показатель Из СписокПоказателей Цикл
	
		ИмяПоказателя = ?(ЭтоМассив, Показатель, Показатель.Представление);
		
		Если Имяпоказателя = "Наименование" Тогда
			
			Значение = Контрагент.Наименование;
			
		ИначеЕсли Имяпоказателя = "НаименованиеПолное" Тогда
			
			Значение = Контрагент.НаименованиеПолное;
			
		ИначеЕсли ИмяПоказателя = "ИНН" Тогда
			
			Значение = Контрагент.ИНН;
			
		ИначеЕсли ИмяПоказателя = "ОКПО" Тогда
			
			Значение = Контрагент.КодПоОКПО;
			
		ИначеЕсли ИмяПоказателя = "ГНС" Тогда
			
			Значение = Контрагент.ГНС;
			
		ИначеЕсли ИмяПоказателя = "ГНСКод" Тогда
			
			Значение = Контрагент.ГНС.Код;
			
		ИначеЕсли ИмяПоказателя = "ГНСНаименование" Тогда
			
			Значение = Контрагент.ГНС.Наименование;
			
		ИначеЕсли ИмяПоказателя = "КодПравовойФормы" Тогда
			
			Значение = Контрагент.КодПравовойФормы;
			
		// Основной банковский счет	
		ИначеЕсли ИмяПоказателя = "Банк" Тогда
			
			Значение = ОсновнойБанковскийСчет.Банк;
			
		ИначеЕсли ИмяПоказателя = "БИКБанка" Тогда
			
			Значение = ОсновнойБанковскийСчет.Банк.Код;
			
		ИначеЕсли ИмяПоказателя = "КоррСчетБанка" Тогда
			
			Значение = ОсновнойБанковскийСчет.Банк.КоррСчет;
			
		ИначеЕсли ИмяПоказателя = "НомерСчета" Тогда
			
			Значение = ОсновнойБанковскийСчет.НомерСчета;
		
		// Контактная информация		
		ИначеЕсли ИмяПоказателя = "АдрПочт" Тогда
			
			ИмяПредопределенного = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ИмяПредопределенного);

			Результат = Контрагент.КонтактнаяИнформация.НайтиСтроки(Данные);

			Если Результат.Количество() > 0 Тогда
				Значение = Результат[0].Представление;
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрЮР" Тогда
			
			ИмяПредопределенного = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ИмяПредопределенного);

			Результат = Контрагент.КонтактнаяИнформация.НайтиСтроки(Данные);

			Если Результат.Количество() > 0 Тогда
				Значение = Результат[0].Представление;
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрФакт" Тогда
			
			ИмяПредопределенного = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ИмяПредопределенного);

			Результат = Контрагент.КонтактнаяИнформация.НайтиСтроки(Данные);

			Если Результат.Количество() > 0 Тогда
				Значение = Результат[0].Представление;
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "Тел" Тогда
			
			ИмяПредопределенного = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ИмяПредопределенного);
			
			Результат = Контрагент.КонтактнаяИнформация.НайтиСтроки(Данные);
			
			Если Результат.Количество() > 0 Тогда
				Значение = Результат[0].Представление;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "Факс" Тогда
			
			ИмяПредопределенного = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента;
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Факс, ИмяПредопределенного);
			
			Результат = Контрагент.КонтактнаяИнформация.НайтиСтроки(Данные);
			
			Если Результат.Количество() > 0 Тогда
				Значение = Результат[0].Представление;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "Email" Тогда
			
			ИмяПредопределенного = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, ИмяПредопределенного);
			
			Результат = Контрагент.КонтактнаяИнформация.НайтиСтроки(Данные);
			
			Если Результат.Количество() > 0 Тогда
				Значение = Результат[0].Представление;
			Иначе
				Значение = "";
			КонецЕсли;
			
		// Контактная информация Адрес
		ИначеЕсли ИмяПоказателя = "Страна" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресКонтрагента");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Страна"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Страна"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Индекс" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресКонтрагента");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Индекс"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Индекс"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Регион" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресКонтрагента");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Регион"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Регион"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Район" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресКонтрагента");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Район"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Район"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Город" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресКонтрагента");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Город"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Город"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "НаселенныйПункт" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресКонтрагента");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["НаселенныйПункт"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["НаселенныйПункт"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Улица" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресКонтрагента");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Улица"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Улица"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Дом" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресКонтрагента");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Дом"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Дом"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Корпус" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресКонтрагента");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Корпус"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Корпус"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Квартира" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресКонтрагента");

			Если Результат <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СоответствиеАдреса["Квартира"]) Тогда 
					СформироватьАдрес(Результат.Значение, СоответствиеАдреса);
				КонецЕсли;	
				
				Значение = СоответствиеАдреса["Квартира"];
								
			Иначе
				Значение = "";
			КонецЕсли;
		Иначе 
			Значение = "";
		КонецЕсли;
		
		КонтрагентСведения.Вставить(ИмяПоказателя, Значение);
	КонецЦикла;
	
	Возврат КонтрагентСведения;
	
КонецФункции

// Выборка давнных договора в в структуру
Функция ДанныеДоговора(Договор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Владелец,
	|	ДоговорыКонтрагентов.Родитель,
	|	ДоговорыКонтрагентов.Код,
	|	ДоговорыКонтрагентов.Наименование,
	|	ДоговорыКонтрагентов.ВалютаРасчетов,
	|	ДоговорыКонтрагентов.Организация,
	|	ДоговорыКонтрагентов.ВидДоговора,
	|	ДоговорыКонтрагентов.ТипЦен,
	|	ДоговорыКонтрагентов.СтавкаНДС,
	|	ДоговорыКонтрагентов.ВидПоставкиНДС,
	|	ДоговорыКонтрагентов.СуммаВключаетНалоги,
	|	ДоговорыКонтрагентов.СтавкаНСП
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Ссылка";	
	Запрос.УстановитьПараметр("Ссылка", 			Договор);	
	
	Результат 	= Запрос.Выполнить().Выбрать();

	Если Результат.Следующий() Тогда
		СтруктураДанныеДоговора = Новый Структура;
		СтруктураДанныеДоговора.Вставить("Владелец", 			Результат.Владелец);
		СтруктураДанныеДоговора.Вставить("Родитель", 			Результат.Родитель);
		СтруктураДанныеДоговора.Вставить("Код", 				Результат.Код);
		СтруктураДанныеДоговора.Вставить("Наименование", 		Результат.Наименование);
		СтруктураДанныеДоговора.Вставить("ВалютаРасчетов", 		Результат.ВалютаРасчетов);
		СтруктураДанныеДоговора.Вставить("Организация", 		Результат.Организация);
		СтруктураДанныеДоговора.Вставить("ВидДоговора", 		Результат.ВидДоговора);
		СтруктураДанныеДоговора.Вставить("ТипЦен", 				Результат.ТипЦен);
		СтруктураДанныеДоговора.Вставить("СтавкаНДС", 			Результат.СтавкаНДС);
		СтруктураДанныеДоговора.Вставить("ВидПоставкиНДС", 		Результат.ВидПоставкиНДС);
		СтруктураДанныеДоговора.Вставить("СуммаВключаетНалоги", Результат.СуммаВключаетНалоги);
		СтруктураДанныеДоговора.Вставить("СтавкаНСП", 			Результат.СтавкаНСП);
		
		Возврат СтруктураДанныеДоговора;
	Иначе
		Возврат ПустаяСтруктураДанныеДоговора();
	КонецЕсли;
	
КонецФункции

Функция ПустаяСтруктураДанныеДоговора()
	
	СтруктураДанныхДоговора = Новый Структура;
	СтруктураДанныхДоговора.Вставить("Владелец", 			Справочники.Контрагенты.ПустаяСсылка());
	СтруктураДанныхДоговора.Вставить("Наименование", 		"");
	СтруктураДанныхДоговора.Вставить("ВалютаРасчетов", 		Справочники.Валюты.ПустаяСсылка());
	СтруктураДанныхДоговора.Вставить("Организация", 		Справочники.Организации.ПустаяСсылка());
	СтруктураДанныхДоговора.Вставить("ТипЦен", 				Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
	СтруктураДанныхДоговора.Вставить("СтавкаНДС", 			Справочники.СтавкиНДС.ПустаяСсылка());
	СтруктураДанныхДоговора.Вставить("СтавкаНСП", 			Справочники.СтавкиНСП.ПустаяСсылка());
	СтруктураДанныхДоговора.Вставить("ВидПоставкиНДС", 		Справочники.ВидыПоставокНДС.ПустаяСсылка());
	СтруктураДанныхДоговора.Вставить("СуммаВключаетНалоги", Ложь);
	
	Возврат СтруктураДанныхДоговора;

	
КонецФункции

// Функция возвращает возможные счета учета расчетов с контрагентом
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Контрагент  - по которому выполняется поиск
//  Договор     - по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
// Алгоритм выпорки
// 1. Организация, Контрагент, Договор. 
// 2. Организация, Контрагент, Договор(пустая). 
// 3. Организация, ГруппаКонтрагентов по иерархии, Догвор(пустая). 
// 4. Организация(пустая), Контрагент, Договор(пустая). 
// 5. Организация(пустая), ГруппаКонтрагентов по иерархии, Договор(пустая). 
// 6. Организация, Контрагент(пустая), Договор(пустая). 
// 7. Организация(пустая), Контрагент(пустая), Договор(пустая).
//
Функция ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Договор) Экспорт

	Результат = Новый Структура("СчетРасчетовПоставщика, 
	                            |СчетАвансовПоставщика,
	                            |СчетРасчетовПокупателя, 
	                            |СчетАвансовПокупателя,
								|СчетРасчетовПоЗаймам");

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	СчетаРасчетовСКонтрагентами.СчетРасчетовПоставщика,
		|	СчетаРасчетовСКонтрагентами.СчетАвансовПоставщика,
		|	СчетаРасчетовСКонтрагентами.СчетРасчетовПокупателя,
		|	СчетаРасчетовСКонтрагентами.СчетАвансовПокупателя,
		|	СчетаРасчетовСКонтрагентами.СчетРасчетовПоЗаймам
		|ИЗ
		|	РегистрСведений.СчетаРасчетовСКонтрагентами КАК СчетаРасчетовСКонтрагентами
		|ГДЕ
		|	СчетаРасчетовСКонтрагентами.Организация = &Организация
		|	И СчетаРасчетовСКонтрагентами.Контрагент = &Контрагент
		|	И СчетаРасчетовСКонтрагентами.Договор = &Договор
		|	И НЕ &Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	СчетаРасчетовСКонтрагентами.СчетРасчетовПоставщика,
		|	СчетаРасчетовСКонтрагентами.СчетАвансовПоставщика,
		|	СчетаРасчетовСКонтрагентами.СчетРасчетовПокупателя,
		|	СчетаРасчетовСКонтрагентами.СчетАвансовПокупателя,
		|	СчетаРасчетовСКонтрагентами.СчетРасчетовПоЗаймам
		|ИЗ
		|	РегистрСведений.СчетаРасчетовСКонтрагентами КАК СчетаРасчетовСКонтрагентами
		|ГДЕ
		|	СчетаРасчетовСКонтрагентами.Организация = &Организация
		|	И СчетаРасчетовСКонтрагентами.Контрагент = &Контрагент
		|	И СчетаРасчетовСКонтрагентами.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	СчетаРасчетовСКонтрагентами.СчетРасчетовПоставщика,
		|	СчетаРасчетовСКонтрагентами.СчетАвансовПоставщика,
		|	СчетаРасчетовСКонтрагентами.СчетРасчетовПокупателя,
		|	СчетаРасчетовСКонтрагентами.СчетАвансовПокупателя,
		|	СчетаРасчетовСКонтрагентами.СчетРасчетовПоЗаймам
		|ИЗ
		|	РегистрСведений.СчетаРасчетовСКонтрагентами КАК СчетаРасчетовСКонтрагентами
		|ГДЕ
		|	СчетаРасчетовСКонтрагентами.Организация = &Организация
		|	И СчетаРасчетовСКонтрагентами.Контрагент В ИЕРАРХИИ(&Контрагент)
		|	И СчетаРасчетовСКонтрагентами.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4,
		|	СчетаРасчетовСКонтрагентами.СчетРасчетовПоставщика,
		|	СчетаРасчетовСКонтрагентами.СчетАвансовПоставщика,
		|	СчетаРасчетовСКонтрагентами.СчетРасчетовПокупателя,
		|	СчетаРасчетовСКонтрагентами.СчетАвансовПокупателя,
		|	СчетаРасчетовСКонтрагентами.СчетРасчетовПоЗаймам
		|ИЗ
		|	РегистрСведений.СчетаРасчетовСКонтрагентами КАК СчетаРасчетовСКонтрагентами
		|ГДЕ
		|	СчетаРасчетовСКонтрагентами.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И СчетаРасчетовСКонтрагентами.Контрагент = &Контрагент
		|	И СчетаРасчетовСКонтрагентами.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	5,
		|	СчетаРасчетовСКонтрагентами.СчетРасчетовПоставщика,
		|	СчетаРасчетовСКонтрагентами.СчетАвансовПоставщика,
		|	СчетаРасчетовСКонтрагентами.СчетРасчетовПокупателя,
		|	СчетаРасчетовСКонтрагентами.СчетАвансовПокупателя,
		|	СчетаРасчетовСКонтрагентами.СчетРасчетовПоЗаймам
		|ИЗ
		|	РегистрСведений.СчетаРасчетовСКонтрагентами КАК СчетаРасчетовСКонтрагентами
		|ГДЕ
		|	СчетаРасчетовСКонтрагентами.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И СчетаРасчетовСКонтрагентами.Контрагент В ИЕРАРХИИ(&Контрагент)
		|	И СчетаРасчетовСКонтрагентами.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	6,
		|	СчетаРасчетовСКонтрагентами.СчетРасчетовПоставщика,
		|	СчетаРасчетовСКонтрагентами.СчетАвансовПоставщика,
		|	СчетаРасчетовСКонтрагентами.СчетРасчетовПокупателя,
		|	СчетаРасчетовСКонтрагентами.СчетАвансовПокупателя,
		|	СчетаРасчетовСКонтрагентами.СчетРасчетовПоЗаймам
		|ИЗ
		|	РегистрСведений.СчетаРасчетовСКонтрагентами КАК СчетаРасчетовСКонтрагентами
		|ГДЕ
		|	СчетаРасчетовСКонтрагентами.Организация = &Организация
		|	И СчетаРасчетовСКонтрагентами.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	И СчетаРасчетовСКонтрагентами.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	7,
		|	СчетаРасчетовСКонтрагентами.СчетРасчетовПоставщика,
		|	СчетаРасчетовСКонтрагентами.СчетАвансовПоставщика,
		|	СчетаРасчетовСКонтрагентами.СчетРасчетовПокупателя,
		|	СчетаРасчетовСКонтрагентами.СчетАвансовПокупателя,
		|	СчетаРасчетовСКонтрагентами.СчетРасчетовПоЗаймам
		|ИЗ
		|	РегистрСведений.СчетаРасчетовСКонтрагентами КАК СчетаРасчетовСКонтрагентами
		|ГДЕ
		|	СчетаРасчетовСКонтрагентами.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И СчетаРасчетовСКонтрагентами.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	И СчетаРасчетовСКонтрагентами.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("Контрагент",        Контрагент);
	Запрос.УстановитьПараметр("Договор",           Договор);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

#КонецОбласти

#Область ПроцедурыИФункцииПодсистемаБанкКасса

// Функция возвращает основной банковский счет организации
// Параметры:
//  Организация           - по которой выполняется поиск
//  ВалютаДенежныхСредств - валюта банковского счета
//
Функция ПолучитьОсновнойБанковскийСчетОрганизации(Организация, ВалютаДенежныхСредств = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();	
	КонецЕсли;
	
	// Если передана валюта, то производим поиск банковского счета по валюте.
	Если НЕ ВалютаДенежныхСредств = Неопределено Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	БанковскиеСчета.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.ВалютаДенежныхСредств = &ВалютаДенежныхСредств
			|	И БанковскиеСчета.Владелец = &Владелец
			|	И НЕ БанковскиеСчета.ПометкаУдаления";
		Запрос.УстановитьПараметр("Владелец", Организация);
		Запрос.УстановитьПараметр("ВалютаДенежныхСредств", ВалютаДенежныхСредств);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
	КонецЕсли;	
	
	// Если валюта не передана, или поиск не удался, то возвращаем основной банковский счет орагнизации.	
	ОсновнойБанковскийСчет = Организация.ОсновнойБанковскийСчет;
	Если ЗначениеЗаполнено(ОсновнойБанковскийСчет) Тогда
		Возврат	ОсновнойБанковскийСчет;	
	КонецЕсли;
	
	// Выбираем первый любой банковский счет организации.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	БанковскиеСчета.Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Владелец
		|	И НЕ БанковскиеСчета.ПометкаУдаления";
	Запрос.УстановитьПараметр("Владелец", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;								
	
	// Если нет ни одного банковского счета организации, то возвращаем пустую ссылку.
	Возврат	Справочники.БанковскиеСчета.ПустаяСсылка();

КонецФункции 

// Функция возвращает основную кассу организации
// Параметры:
//  Организация           - по которой выполняется поиск
//  ВалютаДенежныхСредств - валюта основной кассы
//
Функция ПолучитьОсновнуюКассуОрганизации(Организация, ВалютаДенежныхСредств = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Справочники.Кассы.ПустаяСсылка();	
	КонецЕсли;
	
	// Если передана валюта, то производим поиск кассы по валюте.
	Если НЕ ВалютаДенежныхСредств = Неопределено Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Кассы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Кассы КАК Кассы
			|ГДЕ
			|	Кассы.ВалютаДенежныхСредств = &ВалютаДенежныхСредств
			|	И Кассы.Владелец = &Владелец
			|	И НЕ Кассы.ПометкаУдаления";
		Запрос.УстановитьПараметр("Владелец", Организация);
		Запрос.УстановитьПараметр("ВалютаДенежныхСредств", ВалютаДенежныхСредств);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
	КонецЕсли;	
	
	// Если валюта не передана, или поиск не удался, то возвращаем основной банковский счет орагнизации.	
	ОсновнаяКасса = Организация.ОсновнаяКасса;
	Если ЗначениеЗаполнено(ОсновнаяКасса) Тогда
		Возврат	ОсновнаяКасса;	
	КонецЕсли;
	
	// Выбираем первую любую кассу организации.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Кассы.Ссылка
		|ИЗ
		|	Справочник.Кассы КАК Кассы
		|ГДЕ
		|	Кассы.Владелец = &Владелец
		|	И НЕ Кассы.ПометкаУдаления";
	Запрос.УстановитьПараметр("Владелец", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;								
	
	// Если нет ни одной кассы организации, то возвращаем пустую ссылку.
	Возврат	Справочники.Кассы.ПустаяСсылка();

КонецФункции 

// Функция - Получить статью движения денежных средств по виду операции
//
// Параметры:
//  ВидОперации	 - ПепречисленияСсылка.ВидыОперацийППВ, ПепречисленияСсылка.ВидыОперацийПКО, ПепречисленияСсылка.ВидыОперацийППИ, ПепречисленияСсылка.ВидыОперацийППВ - Вид операции документа
// 
// Возвращаемое значение:
//  СправочникСсылка.СтатьиДвиженияДенежныхСредств - Статья ДДС из параметров учета
//
Функция ПолучитьСтатьюДвиженияДенежныхСредствПоВидуОперации(ВидОперации) Экспорт
	
	ИспользоватьСтатьиДвиженияДенежныхСредств = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств");
		
	СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	
	Если НЕ ИспользоватьСтатьиДвиженияДенежныхСредств Тогда 
		Возврат СтатьяДДС;
	КонецЕсли;	
	
	Если ВидОперации = Перечисления.ВидыОперацийППВ.ОплатаОтПокупателя 
		Или ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаОтПокупателя
		Или ВидОперации = Перечисления.ВидыОперацийППИ.ВозвратПокупателю
		Или ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю Тогда 
		
		СтатьяДДС = Константы.СтатьяДДСДляОплатыОтПокупателя.Получить();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППВ.ВозвратОтПоставщика
		Или ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика 
		Или ВидОперации = Перечисления.ВидыОперацийППИ.ОплатаПоставщику
		Или ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда 	
		
		СтатьяДДС = Константы.СтатьяДДСДляОплатыПоставщику.Получить();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППВ.ПрочийПриход
		Или ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда 	
		
		СтатьяДДС = Константы.СтатьяДДСДляПрочихПоступлений.Получить();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИ.ПрочийРасход
		Или ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда 	
		
		СтатьяДДС = Константы.СтатьяДДСДляПрочихВыбытий.Получить();
		
	КонецЕсли; 
	
	Возврат СтатьяДДС;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПодсистемаЗапасы

// Функция возвращает возможные счета учета номенклатуры
//
// Параметры: 
//	СтруктураДанных - структура
//  	* Организация - СправочникСсылка.Организации - ссылка на элемент справочника "Организации",
//  	* Номенклатура - СправочникСсылка.Номенклатура - ссылка на элемент справочника "Номенклатура", для которой надо получить счета учета
//
// Возвращаемое значение:
//	Структура - структура содержащая счета учета расчетов
//		* СчетУчета		-
//		* СчетДохода	-
//		* СчетРасхода	-
//		* СтатьяДохода	-
//		* СтатьяРасхода	-
//
Функция ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура) Экспорт
	
	СтруктураВозврата = Новый Структура("
		|СчетУчета,
		|СчетДохода,
		|СчетРасхода,
		|СтатьяДохода,
		|СтатьяРасхода");
		
	МассивНоменклатура = Новый Массив();
	МассивОрганизация = Новый Массив();
	
	МассивНоменклатура.Добавить(Справочники.Номенклатура.ПустаяСсылка());
	МассивНоменклатура.Добавить(Номенклатура);
	МассивОрганизация.Добавить(Справочники.Организации.ПустаяСсылка());
	
	СписокГрупп = ПолучитьСписокВышеСтоящихГрупп(Номенклатура);
	Для Каждого Элемент Из СписокГрупп Цикл
		МассивНоменклатура.Добавить(Элемент);
	КонецЦикла;
	
	МассивОрганизация.Добавить(Организация);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация", МассивОрганизация);
	Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатура);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетаУчетаНоменклатуры.Организация,
		|	СчетаУчетаНоменклатуры.Номенклатура,
		|	СчетаУчетаНоменклатуры.СчетУчета,
		|	СчетаУчетаНоменклатуры.СчетДохода,
		|	СчетаУчетаНоменклатуры.СчетРасхода,
		|	СчетаУчетаНоменклатуры.СтатьяДохода,
		|	СчетаУчетаНоменклатуры.СтатьяРасхода
		|ИЗ
		|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
		|ГДЕ
		|	СчетаУчетаНоменклатуры.Организация В(&Организация)
		|	И СчетаУчетаНоменклатуры.Номенклатура В(&Номенклатура)";
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Колонки.Добавить("Глубина");
	Для Каждого Строка Из ТаблицаЗапроса Цикл
		Если Строка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Строка.Глубина = 0;
		Иначе
			Строка.Глубина = СтрДлина(Строка.Номенклатура.ПолныйКод());
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗапроса.Индексы.Добавить("Глубина, Организация");
	ТаблицаЗапроса.Сортировать("Глубина Убыв, Организация Убыв");

	Если ТаблицаЗапроса.Количество() > 0 Тогда
		СведенияОСчетах = ТаблицаЗапроса[0];
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, СведенияОСчетах); 
	КонецЕсли;

	Возврат СтруктураВозврата;
		
КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

// Функция возвращает массив вышестоящих групп указанного элемента.
//
// Параметры:
//  Элемент      - Элемент справочника, для которого ищется родитель
//
// Возвращаемое значение
//  Массив вышестоящих групп
//
Функция ПолучитьСписокВышеСтоящихГрупп(ЭлементСправочника) Экспорт

	Результат = Новый Массив;

	Если НЕ ЗначениеЗаполнено(ЭлементСправочника) Тогда
		Возврат Результат;
	КонецЕсли;

	МетаданныеСправочника = ЭлементСправочника.Метаданные();
	Если НЕ МетаданныеСправочника.Иерархический Тогда
		Возврат Результат;
	КонецЕсли;
	ИмяСправочника = МетаданныеСправочника.Имя;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Справочник1.Родитель КАК Родитель1,
		|	Справочник2.Родитель КАК Родитель2,
		|	Справочник3.Родитель КАК Родитель3,
		|	Справочник4.Родитель КАК Родитель4,
		|	Справочник5.Родитель КАК Родитель5
		|ИЗ
		|	Справочник." + ИмяСправочника + " КАК Справочник1
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник2
		|		ПО (Справочник2.Ссылка = Справочник1.Родитель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник3
		|		ПО (Справочник3.Ссылка = Справочник2.Родитель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник4
		|		ПО (Справочник4.Ссылка = Справочник3.Родитель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник5
		|		ПО (Справочник5.Ссылка = Справочник4.Родитель)
		|ГДЕ
		|	Справочник1.Ссылка = &Ссылка";

	ТекущийЭлемент = ЭлементСправочника;

	Пока ЗначениеЗаполнено(ТекущийЭлемент) Цикл
		Запрос.УстановитьПараметр("Ссылка", ТекущийЭлемент);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Для Индекс = 1 по 5 Цикл
				ТекущийЭлемент = Выборка["Родитель" + Индекс];
				Если ЗначениеЗаполнено(ТекущийЭлемент) Тогда
					Результат.Добавить(ТекущийЭлемент);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТекущийЭлемент = Неопределено;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииУправленияВнеоборотнымиАктивами

// Функция - Получить счет начисления амортизации
//
// Параметры:
//  СчетУчета	 - ПланСчетовСсылка.Хозрасчетный - Счет учета для которого нужно получить счет начисления амортизации
// 
// Возвращаемое значение:
//   - СчетУчета
//
Функция ПолучитьСчетНачисленияАмортизации(СчетУчета) Экспорт
	Возврат СчетУчета.ПарныйСчет;
КонецФункции    

#КонецОбласти

#Область ПроцедурыИФункцииРасчетЗаработнойПлаты

// Следует использовать функцию БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиПоПерсоналу
//
&НаСервере
Функция ПолучитьДанныеУчетнойПолитикиПоПерсоналу(Дата, Организация) Экспорт
	Возврат РегистрыСведений.УчетнаяПолитикаПоПерсоналу.ПолучитьПоследнее(Дата, Новый Структура("Организация", Организация));
КонецФункции // ПолучитьУчетнуюПолитикуПоПерсоналу()

#КонецОбласти

#Область УчетнаяПолитика

// Следует использовать функцию БухгалтерскийУчетВызовСервера.УчетнаяПолитикаСуществует
//
Функция УчетнаяПолитикаСуществует(Организация, Период, ВыводитьСообщениеОбОтсутствииУчетнойПолитики = Ложь, ДокументСсылка = Неопределено) Экспорт
	
	СпособОценкиТМЗ = ПолучитьФункциональнуюОпцию("СпособОценкиТМЗ", 
		Новый Структура("Организация, Период", Организация, НачалоМесяца(Период)));
		
	УчетнаяПолитикаСуществует = НЕ (СпособОценкиТМЗ = Ложь);
	
	Если НЕ УчетнаяПолитикаСуществует
		И ВыводитьСообщениеОбОтсутствииУчетнойПолитики = Истина Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Для организации %1 на %2 не заполнена учетная политика.'"),
			Организация,
			Формат(НачалоМесяца(Период), "ДФ='MMMM yyyy'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументСсылка, , "Объект");
	КонецЕсли;

	Возврат УчетнаяПолитикаСуществует;

КонецФункции

// Следует использовать функцию БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций
//
Функция ПолучитьДанныеУчетнойПолитикиОрганизаций(Дата, Организация) Экспорт
	Возврат РегистрыСведений.УчетнаяПолитикаОрганизаций.ПолучитьПоследнее(Дата, Новый Структура("Организация", Организация));
КонецФункции

// Прочие параметры учетной политики

// Функция возвращает Способ оценки ТМЗ
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации - Организация для отбора
//  Период		 - Дата - Период отбора
// 
// Возвращаемое значение:
//  Результат - ПеречисленияСсылка.СпособыОценки- Способ оченки, установленный в учетной политике
//
Функция СпособОценкиТМЗ(Период, Организация) Экспорт

	Результат = ПолучитьФункциональнуюОпцию("СпособОценкиТМЗ", 
		Новый Структура("Организация, Период", Организация, Период));

	Если Результат = Ложь Тогда
		Результат = Перечисления.СпособыОценки.ПоСредней;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция возвращает значение функциональной опции "Учет движения ОС по подразделениям"
//
Функция ВедетсяУчетОСПоПодразделениям() Экспорт
	Возврат ПолучитьФункциональнуюОпцию("УчетДвиженияОСПоПодразделениям");
КонецФункции

// Функция возвращает значение функциональной опции "Учет движения ОС по МОЛ"
//
Функция ВедетсяУчетОСПоМОЛ() Экспорт
	Возврат ПолучитьФункциональнуюОпцию("УчетДвиженияОСПоМОЛ");
КонецФункции

// Функция предназначена для определения названия объекта
// учета по его счету учета. Название объекта выдается в родительном падеже
Функция НазваниеОбъектаПоСчетуУчета(СчетУчета) Экспорт
	
	Если СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.Товары) Тогда
		
		Возврат "товаров";
		
	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ЗапасыСырьяИМатериалов) Тогда
		
		Возврат "запасов";
		
	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОсновноеПроизводство) Тогда
		
		Возврат "полуфабрикатов";
		
	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ГотоваяПродукция) Тогда
		
		Возврат "продукции";
		
	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку) Тогда
		
		Возврат "материалов в переработку";
	
	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ПрочиеЗапасы) Тогда
		
		Возврат "запасов";
		
	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.Топливо) Тогда
		
		Возврат "топлива";
		
	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ЗапасныеЧасти) Тогда
		
		Возврат "запасных частей";
		
	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.СтроительныеМатериалы) Тогда
		
		Возврат "материвалов";
		
	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ПрочиеМатериалы) Тогда
		
		Возврат "материвалов";
		
	ИначеЕсли СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.МБП) Тогда
		
		Возврат "МБП";
		
	Иначе
		
		Возврат "запасов";
		
	КонецЕсли;

КонецФункции

// Функция возвращает значение функциональной опции "Учет заработной платы в валюте"
//
Функция ВедетсяУчетЗаработнойПлатывВалюте() Экспорт
	Возврат ПолучитьФункциональнуюОпцию("УчетЗаработнойПлатыВВалюте");
КонецФункции

#КонецОбласти

#Область ИспользованиеОднойНоменклатурнойГруппы

// Функция возвращает признак использования одной номенклатурной группы.
//
Функция ИспользоватьОднуНоменклатурнуюГруппу() Экспорт

	Возврат НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоНоменклатурныхГрупп") 
		И ЗначениеЗаполнено(БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());

КонецФункции

// Функция получает единственную номенклатурную группу.
//
// Возвращаемое значение:
//		Основная номенклатурная группа - Тип НоменклатурныеГруппы, если ничего не найдено, то возвращается пустая ссылка.
Функция ОсновнаяНоменклатурнаяГруппа() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	НоменклатурныеГруппы.Ссылка
	|ИЗ
	|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|ГДЕ
	|	НЕ НоменклатурныеГруппы.ПометкаУдаления
	|	И НЕ НоменклатурныеГруппы.ЭтоГруппа";
	Выборка = Запрос.Выполнить().Выбрать();
	// Если опция ВестиУчетПоНесколькимНоменклатурнымГруппам выключена, но номенклатурная группа одна,
	// то все равно подставляем эту номенклатурную группу.
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ОсновнаяНоменклатурнаяГруппа = Выборка.Ссылка;
	Иначе
		ОсновнаяНоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ОсновнаяНоменклатурнаяГруппа;

КонецФункции

#КонецОбласти

#КонецОбласти
