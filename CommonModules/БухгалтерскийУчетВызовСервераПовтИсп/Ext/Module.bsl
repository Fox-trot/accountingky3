
#Область ЭкспортныеПроцедурыИФункции

// Получить значение Текущей даты сеанса
//
Функция ПолучитьТекущуюДатаСеанса() Экспорт
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции // ПолучитьТекущуюДатаСеанса()

#КонецОбласти


#Область ПроцедурыИФункцииБухгалтерскийУчет

Функция ПолучитьСвойстваСчета(Знач Счет) Экспорт

	ДанныеСчета = Новый Структура;
	ДанныеСчета.Вставить("Ссылка"                         , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ДанныеСчета.Вставить("Наименование"                   , "");
	ДанныеСчета.Вставить("Код"                            , "");
	ДанныеСчета.Вставить("Родитель"                       , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ДанныеСчета.Вставить("Вид"                            , Неопределено);
	ДанныеСчета.Вставить("Забалансовый"                   , Ложь);
	ДанныеСчета.Вставить("ЗапретитьИспользоватьВПроводках", Ложь);
	ДанныеСчета.Вставить("Валютный"                       , Ложь);
	ДанныеСчета.Вставить("Количественный"                 , Ложь);
	ДанныеСчета.Вставить("КоличествоСубконто"             , 0);
	
	МаксКоличествоСубконто	= ПолучитьМаксКоличествоСубконто();
	
	Для ИндексСубконто = 1 По МаксКоличествоСубконто Цикл
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто,                   Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Наименование",  Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения",   Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Суммовой",      Ложь);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТолькоОбороты", Ложь);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат ДанныеСчета;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", Счет);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка,
	|	Хозрасчетный.Родитель,
	|	Хозрасчетный.Код,
	|	Хозрасчетный.Наименование,
	|	Хозрасчетный.Вид,
	|	Хозрасчетный.Забалансовый,
	|	Хозрасчетный.ЗапретитьИспользоватьВПроводках,
	|	Хозрасчетный.Количественный,
	|	Хозрасчетный.Валютный
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка = &Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БюджетныйВидыСубконто.НомерСтроки КАК НомерСтроки,
	|	БюджетныйВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	БюджетныйВидыСубконто.ВидСубконто.Наименование КАК Наименование,
	|	БюджетныйВидыСубконто.ВидСубконто.ТипЗначения КАК ТипЗначения,
	|	БюджетныйВидыСубконто.ТолькоОбороты КАК ТолькоОбороты,
	|	БюджетныйВидыСубконто.Суммовой КАК Суммовой,
	|	БюджетныйВидыСубконто.Количественный,
	|	БюджетныйВидыСубконто.Валютный
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК БюджетныйВидыСубконто
	|ГДЕ
	|	БюджетныйВидыСубконто.Ссылка = &Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	БюджетныйВидыСубконто.НомерСтроки";
	
	МассивРезультатов	= Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеСчета, Выборка);
	КонецЕсли;
		
	ВыборкаВидыСубконто	= МассивРезультатов[1].Выбрать();
		
	ДанныеСчета.КоличествоСубконто	= ВыборкаВидыСубконто.Количество();
		
	ИндексСубконто	= 0;
		
	Пока ВыборкаВидыСубконто.Следующий() Цикл
		
		ИндексСубконто	= ИндексСубконто + 1;
		
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто,                   ВыборкаВидыСубконто.ВидСубконто);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Наименование",  ВыборкаВидыСубконто.Наименование);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения",   ВыборкаВидыСубконто.ТипЗначения);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Суммовой",      ВыборкаВидыСубконто.Суммовой);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТолькоОбороты", ВыборкаВидыСубконто.ТолькоОбороты);
		
	КонецЦикла;
	
	Возврат ДанныеСчета;
	
КонецФункции

Функция ПолучитьМаксКоличествоСубконто() Экспорт

	Возврат Метаданные.ПланыСчетов.Хозрасчетный.МаксКоличествоСубконто;

КонецФункции

// Возвращает признак наличия субконто на счете
//
Функция ЕстьСубконто(Счет, ВидСубконто) Экспорт
	Возврат Счет.ВидыСубконто.Найти(ВидСубконто, "ВидСубконто") <> Неопределено;
КонецФункции // ЕстьСубконто()

Функция СчетаВИерархии(СчетГруппа) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СчетГруппа) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетГруппа", СчетГруппа);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетГруппа)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");

КонецФункции

// Функция возвращает способ оценки запасов для указанного счета учета
//
Функция ПолучитьСпособОценкиЗапасов(СчетУчета, ОсновнойСпособОценки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпособыОценкиЗапасов.СпособОценки
		|ИЗ
		|	РегистрСведений.СпособыОценкиЗапасов КАК СпособыОценкиЗапасов
		|ГДЕ
		|	СпособыОценкиЗапасов.СчетУчета = &СчетУчета";
	
	Запрос.УстановитьПараметр("СчетУчета", СчетУчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.СпособОценки;
	ИначеЕсли ЗначениеЗаполнено(ОсновнойСпособОценки) Тогда
		Возврат ОсновнойСпособОценки;
	Иначе
		Возврат Перечисления.СпособыОценки.ПустаяСсылка();
	КонецЕсли;
		
КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

// Функция возвращает массив счетов для указанного способа оценки запасов
//
Функция ПолучитьСчетаУчетаПоСпособуОценки(СпособОценки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпособыОценкиЗапасов.СчетУчета,
		|	СпособыОценкиЗапасов.СпособОценки
		|ИЗ
		|	РегистрСведений.СпособыОценкиЗапасов КАК СпособыОценкиЗапасов
		|ГДЕ
		|	(СпособыОценкиЗапасов.СпособОценки = &СпособОценки
		|			ИЛИ &СпособОценки = ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("СпособОценки", СпособОценки);
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗначений.ВыгрузитьКолонку("СчетУчета");

КонецФункции // ПолучитьСчетаУчетаНоменклатурыПоСпособуОценки()

#КонецОбласти

#Область ПроцедурыИФункцииНастройкиПользователя

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Пользователь - текущий пользователь программы
//  Настройка    - признак, для которого возвращается значение по умолчанию
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, Настройка) Экспорт

	Если Настройка = "ОсновнаяОрганизация" 
		И ПолучитьФункциональнуюОпцию("УчетПоНесколькимОрганизациям") Тогда
		Возврат ПредопределенноеЗначение("Справочник.Организации.ОсновнаяОрганизация");		
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Настройка"   , ПланыВидовХарактеристик.НастройкиПользователей[Настройка]);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК РегистрЗначениеПрав
	|
	|ГДЕ
	|	Пользователь = &Пользователь
	| И Настройка    = &Настройка";

	Выборка = Запрос.Выполнить().Выбрать();

	ПустоеЗначение = ПланыВидовХарактеристик.НастройкиПользователей[Настройка].ТипЗначения.ПривестиЗначение();

	Если Выборка.Количество() = 0 Тогда
		
		Возврат ПустоеЗначение;

	ИначеЕсли Выборка.Следующий() Тогда

		Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат ПустоеЗначение;
		Иначе
			Возврат Выборка.Значение;
		КонецЕсли;

	Иначе
		Возврат ПустоеЗначение;

	КонецЕсли;

КонецФункции // ПолучитьЗначениеПоУмолчаниюПользователя()

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Настройка    - признак, для которого возвращается значение по умолчанию
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеНастройки(Настройка) Экспорт

	Если Настройка = "ОсновнаяОрганизация" 
		И НЕ ПолучитьФункциональнуюОпцию("УчетПоНесколькимОрганизациям") Тогда
		Возврат ПредопределенноеЗначение("Справочник.Организации.ОсновнаяОрганизация");		
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("Настройка"   , ПланыВидовХарактеристик.НастройкиПользователей[Настройка]);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК РегистрЗначениеПрав
	|
	|ГДЕ
	|	Пользователь = &Пользователь
	| И Настройка    = &Настройка";

	Выборка = Запрос.Выполнить().Выбрать();

	ПустоеЗначение = ПланыВидовХарактеристик.НастройкиПользователей[Настройка].ТипЗначения.ПривестиЗначение();

	Если Выборка.Количество() = 0 Тогда
		
		Возврат ПустоеЗначение;

	ИначеЕсли Выборка.Следующий() Тогда

		Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат ПустоеЗначение;
		Иначе
			Возврат Выборка.Значение;
		КонецЕсли;

	Иначе
		Возврат ПустоеЗначение;

	КонецЕсли;

КонецФункции // ПолучитьЗначениеНастройки()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Получить полное наименование организации
//
Функция ПолучитьПолноеНаименованиеОрганизации(Организация = Неопределено) Экспорт
	Если Организация = Неопределено Тогда 
		Организация = ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
	КонецЕсли;		

	Возврат Организация.НаименованиеПолное;
КонецФункции // ПолучитьПолноеНаименованиеОрганизации()

// Следует использовать функцию БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиОрганизаций
//
Функция ПолучитьДанныеУчетнойПолитикиОрганизаций(Дата, Организация) Экспорт
	Возврат РегистрыСведений.УчетнаяПолитикаОрганизаций.ПолучитьПоследнее(Дата, Новый Структура("Организация", Организация));
КонецФункции

// Следует использовать функцию БухгалтерскийУчетСервер.ОтветственныеЛицаОрганизаций
//
Функция ОтветственныеЛицаОрганизаций(Организация, Дата, ДополнительныеПараметры) Экспорт
	КоличествоКасс		= 0;
	ЕстьОтборПоКассе 	= Истина;
	Касса 				= Справочники.Кассы.ПустаяСсылка();
	// Получаем количество касс без пометки "ПометкаУдаления"
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Кассы.Ссылка) КАК КоличествоКасс
		|ИЗ
		|	Справочник.Кассы КАК Кассы
		|ГДЕ
		|	НЕ Кассы.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();		
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		КоличествоКасс = ВыборкаДетальныеЗаписи.КоличествоКасс;	
	КонецЕсли;	
	Если КоличествоКасс <= 1 Тогда
		ЕстьОтборПоКассе = Ложь;
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры = Неопределено
		И ДополнительныеПараметры.Свойство("Касса") 
		И ЗначениеЗаполнено(ДополнительныеПараметры.Касса) Тогда
		Касса = ДополнительныеПараметры.Касса;
	КонецЕсли;	
	
	Результат = Новый Структура("Руководитель, 
		|РуководительФИзЛицо,
		|РуководительДолжность, 
		|РуководительДолжностьСсылка,
		|ГлавныйБухгалтер, 
		|ГлавныйБухгалтерФИзЛицо,
		|ГлавныйБухгалтерДолжность, 
		|ГлавныйБухгалтерДолжностьСсылка,
		|Кассир, 
		|КассирФИзЛицо,								
		|КассирДолжность, 
		|КассирДолжностьСсылка,
		|КассирКасса, 
		|КассирКассаСсылка");
		
	// В запросе сортировка по периоду.
	// Если у Сотрудника несколько должностей или касс, то потом при заполнении структуры возврата
	// на выходе получим самые последние записи к моменту выборки
	Если Организация <> Неопределено Тогда
		ЗапросПоЛицам = Новый Запрос();
		ЗапросПоЛицам.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацииСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаОрганизацииСрезПоследних.Должность.Наименование КАК Должность,
		|	ОтветственныеЛицаОрганизацииСрезПоследних.Должность КАК ДолжностьСсылка,
		|	ОтветственныеЛицаОрганизацииСрезПоследних.Касса.Наименование КАК Касса,
		|	ОтветственныеЛицаОрганизацииСрезПоследних.Касса КАК КассаСсылка,
		|	ОтветственныеЛицаОрганизацииСрезПоследних.ФизЛицо КАК ФизЛицо,
		|	ВЫБОР
		|		КОГДА ФИОФизическихЛицСрезПоследних.ФизЛицо ЕСТЬ NULL
		|			ТОГДА ОтветственныеЛицаОрганизацииСрезПоследних.ФизЛицо.Наименование
		|		ИНАЧЕ ФИОФизическихЛицСрезПоследних.Фамилия + ВЫБОР
		|				КОГДА ПОДСТРОКА(ФИОФизическихЛицСрезПоследних.Имя, 1, 1) <> """"
		|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизическихЛицСрезПоследних.Имя, 1, 1) + "".""
		|				ИНАЧЕ """"
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ПОДСТРОКА(ФИОФизическихЛицСрезПоследних.Отчество, 1, 1) <> """"
		|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизическихЛицСрезПоследних.Отчество, 1, 1) + "".""
		|				ИНАЧЕ """"
		|			КОНЕЦ
		|	КОНЕЦ КАК ФИОПолное,
		|	ОтветственныеЛицаОрганизацииСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&Период, Организация = &Организация) КАК ОтветственныеЛицаОрганизацииСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Период, ) КАК ФИОФизическихЛицСрезПоследних
		|		ПО ОтветственныеЛицаОрганизацииСрезПоследних.ФизЛицо = ФИОФизическихЛицСрезПоследних.ФизЛицо
		|ГДЕ
		|	(ОтветственныеЛицаОрганизацииСрезПоследних.Касса = &Касса
		|			ИЛИ &Касса = ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтветственныеЛицаОрганизацииСрезПоследних.Период";		

		Если НЕ ЕстьОтборПоКассе Тогда
			ЗапросПоЛицам.Текст = СтрЗаменить(ЗапросПоЛицам.Текст,
								"ОтветственныеЛицаОрганизацииСрезПоследних.Касса = &Касса
								|			ИЛИ &Касса = ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)",
								"Истина");			
		КонецЕсли;
		ЗапросПоЛицам.Параметры.Вставить("Касса", Касса);
		ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
		ЗапросПоЛицам.УстановитьПараметр("Период",   Дата);							  
		
		Выборка = ЗапросПоЛицам.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл

			Если Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
				Результат.Руководитель            		= Выборка.ФИОПолное;
				Результат.РуководительФизЛицо     		= Выборка.ФизЛицо;
				Результат.РуководительДолжность   		= Выборка.Должность;
				Результат.РуководительДолжностьСсылка   = Выборка.ДолжностьСсылка;
			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
				Результат.ГлавныйБухгалтер        			= Выборка.ФИОПолное;
				Результат.ГлавныйБухгалтерФизЛицо    		= Выборка.ФизЛицо;
				Результат.ГлавныйБухгалтерДолжность 		= Выборка.Должность;
				Результат.ГлавныйБухгалтерДолжностьСсылка   = Выборка.ДолжностьСсылка;
			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
				Результат.Кассир                  = Выборка.ФИОПолное;
				Результат.КассирФизЛицо 		  = Выборка.ФизЛицо;
				Результат.КассирДолжность         = Выборка.Должность;
				Результат.КассирДолжностьСсылка   = Выборка.ДолжностьСсылка;
				Результат.КассирКасса         	= Выборка.Касса;
				Результат.КассирКассаСсылка   	= Выборка.КассаСсылка;				
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

	Возврат Результат;
КонецФункции // ОтветственныеЛицаОрганизации()

#КонецОбласти

#Область ПроцедурыИФункцииВзаиморасчетыСКонтрагентами

Функция ПолучитьОсновнойДоговорКонтрагента(Контрагент, Организация) Экспорт
	ОсновнойДоговор = Контрагент.ОсновнойДоговорКонтрагента;
		
	Если ОсновнойДоговор.Организация <> Организация Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Организация = &Организация
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда 
			ОсновнойДоговор = Выборка.Ссылка;
		Иначе				
			ОсновнойДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОсновнойДоговор;		
КонецФункции

// Выборка давнных договора в в структуру
Функция ДанныеДоговора(Договор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Владелец,
	|	ДоговорыКонтрагентов.Родитель,
	|	ДоговорыКонтрагентов.Код,
	|	ДоговорыКонтрагентов.Наименование,
	|	ДоговорыКонтрагентов.ВалютаРасчетов,
	|	ДоговорыКонтрагентов.Организация,
	|	ДоговорыКонтрагентов.ВидДоговора,
	|	ДоговорыКонтрагентов.ТипЦен,
	|	ДоговорыКонтрагентов.СтавкаНДС,
	|	ДоговорыКонтрагентов.ВидПоставкиНДС,
	|	ДоговорыКонтрагентов.СуммаВключаетНалоги,
	|	ДоговорыКонтрагентов.СтавкаНСП
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Ссылка";	
	Запрос.УстановитьПараметр("Ссылка", 			Договор);	
	
	Результат 	= Запрос.Выполнить().Выбрать();

	Если Результат.Следующий() Тогда
		СтруктураДанныеДоговора = Новый Структура;
		СтруктураДанныеДоговора.Вставить("Владелец", 			Результат.Владелец);
		СтруктураДанныеДоговора.Вставить("Родитель", 			Результат.Родитель);
		СтруктураДанныеДоговора.Вставить("Код", 				Результат.Код);
		СтруктураДанныеДоговора.Вставить("Наименование", 		Результат.Наименование);
		СтруктураДанныеДоговора.Вставить("ВалютаРасчетов", 		Результат.ВалютаРасчетов);
		СтруктураДанныеДоговора.Вставить("Организация", 		Результат.Организация);
		СтруктураДанныеДоговора.Вставить("ВидДоговора", 		Результат.ВидДоговора);
		СтруктураДанныеДоговора.Вставить("ТипЦен", 				Результат.ТипЦен);
		СтруктураДанныеДоговора.Вставить("СтавкаНДС", 			Результат.СтавкаНДС);
		СтруктураДанныеДоговора.Вставить("ВидПоставкиНДС", 		Результат.ВидПоставкиНДС);
		СтруктураДанныеДоговора.Вставить("СуммаВключаетНалоги", Результат.СуммаВключаетНалоги);
		СтруктураДанныеДоговора.Вставить("СтавкаНСП", 			Результат.СтавкаНСП);
		
		Возврат СтруктураДанныеДоговора;
	Иначе
		Возврат ПустаяСтруктураДанныеДоговора();
	КонецЕсли;
	
КонецФункции

Функция ПустаяСтруктураДанныеДоговора()
	
	СтруктураДанныхДоговора = Новый Структура;
	СтруктураДанныхДоговора.Вставить("Владелец", 			Справочники.Контрагенты.ПустаяСсылка());
	СтруктураДанныхДоговора.Вставить("Наименование", 		"");
	СтруктураДанныхДоговора.Вставить("ВалютаРасчетов", 		Справочники.Валюты.ПустаяСсылка());
	СтруктураДанныхДоговора.Вставить("Организация", 		Справочники.Организации.ПустаяСсылка());
	СтруктураДанныхДоговора.Вставить("ТипЦен", 				Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
	СтруктураДанныхДоговора.Вставить("СтавкаНДС", 			Справочники.СтавкиНДС.ПустаяСсылка());
	СтруктураДанныхДоговора.Вставить("СтавкаНСП", 			Справочники.СтавкиНСП.ПустаяСсылка());
	СтруктураДанныхДоговора.Вставить("ВидПоставкиНДС", 		Справочники.ВидыПоставокНДС.ПустаяСсылка());
	СтруктураДанныхДоговора.Вставить("СуммаВключаетНалоги", Ложь);
	
	Возврат СтруктураДанныхДоговора;

	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПодсистемаБанкКасса

// Функция возвращает основной банковский счет организации
// Параметры:
//  Организация           - по которой выполняется поиск
//  ВалютаДенежныхСредств - валюта банковского счета
//
Функция ПолучитьОсновнойБанковскийСчетОрганизации(Организация, ВалютаДенежныхСредств = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();	
	КонецЕсли;
	
	ОсновнойБанковскийСчет = Организация.ОсновнойБанковскийСчет;
	Если ЗначениеЗаполнено(ОсновнойБанковскийСчет) Тогда
		Возврат	ОсновнойБанковскийСчет;	
	КонецЕсли;
	
	Если ВалютаДенежныхСредств = Неопределено Тогда
		ВалютаДенежныхСредств = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БанковскиеСчета.Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.ВалютаДенежныхСредств = &ВалютаДенежныхСредств
		|	И БанковскиеСчета.Владелец = &Владелец
		|	И НЕ БанковскиеСчета.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВалютаДенежныхСредств", ВалютаДенежныхСредств);
	Запрос.УстановитьПараметр("Владелец", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ОсновнойБанковскийСчет = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат	ОсновнойБанковскийСчет;
								
	//Если не выбран подходящий основной банковский счет, то выбираем первый из всего списка банковских счетов организации
	Если НЕ ЗначениеЗаполнено(ОсновнойБанковскийСчет) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	БанковскиеСчета.Ссылка
				|ИЗ
				|	Справочник.БанковскиеСчета КАК БанковскиеСчета
				|ГДЕ
				|	БанковскиеСчета.Владелец = &Владелец
				|	И НЕ БанковскиеСчета.ПометкаУдаления";
			
			Запрос.УстановитьПараметр("Владелец", Организация);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				ОсновнойБанковскийСчет = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЕсли;								
	КонецЕсли;
	
	//Если нет ни одного банковского счета организации, то возврат - пустая ссылка
	Возврат	ОсновнойБанковскийСчет;
	

КонецФункции // ()

// Функция возвращает основную кассу организации
// Параметры:
//  Организация           - по которой выполняется поиск
//  ВалютаДенежныхСредств - валюта основной кассы
//
Функция ПолучитьОсновнуюКассуОрганизации(Организация, ВалютаДенежныхСредств = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Справочники.Кассы.ПустаяСсылка();	
	КонецЕсли;
	
	ОсновнаяКасса = Организация.ОсновнаяКасса;
	Если ЗначениеЗаполнено(ОсновнаяКасса) Тогда
		Возврат	ОсновнаяКасса;	
	КонецЕсли;
	
	Если ВалютаДенежныхСредств = Неопределено Тогда
		ВалютаДенежныхСредств = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
				"ВЫБРАТЬ
				|	Кассы.Ссылка
				|ИЗ
				|	Справочник.Кассы КАК Кассы
				|ГДЕ
				|	Кассы.ВалютаДенежныхСредств = &ВалютаДенежныхСредств
				|	И Кассы.Владелец = &Владелец
				|	И НЕ Кассы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВалютаДенежныхСредств", ВалютаДенежныхСредств);
	Запрос.УстановитьПараметр("Владелец", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ОсновнаяКасса = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат	ОсновнаяКасса;
								
	//Если не выбран подходящий одной кассы , то выбираем первый из всего списка касс организации
	Если НЕ ЗначениеЗаполнено(ОсновнаяКасса) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Кассы.Ссылка
				|ИЗ
				|	Справочник.Кассы КАК Кассы
				|ГДЕ
				|	Кассы.Владелец = &Владелец
				|	И НЕ Кассы.ПометкаУдаления";
			
			Запрос.УстановитьПараметр("Владелец", Организация);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				ОсновнаяКасса = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЕсли;								
	КонецЕсли;
	
	//Если нет ни одной кассы организации, то возврат - пустая ссылка
	Возврат	ОсновнаяКасса;

КонецФункции // ()

Функция СчетПереоцениватьОКР(Счет) Экспорт
	НеСчитатьОКР = Константы.НеСчитатьОперационныеКурсовыеРазницы.Получить();

	Если НеСчитатьОКР Тогда 
		Возврат Ложь;
	КонецЕсли;	

  	// Проверка по списку особых счетов
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсобыеСчета.СчетУчета,
	|	ОсобыеСчета.СпособПризнанияКурсовойРазницы
	|ИЗ
	|	РегистрСведений.СчетаУчетаСОсобымПорядкомПереоценки КАК ОсобыеСчета
	|ГДЕ
	|	ОсобыеСчета.СчетУчета = &Счет";
	Запрос.УстановитьПараметр("Счет", Счет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 		
		Если Выборка.СпособПризнанияКурсовойРазницы = Перечисления.СпособыПризнанияКурсовойРазницы.Оперативно Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПодсистемаЗапасы

// Функция возвращает Склад по умолчанию для текущего пользователя
// Параметры:
//  Организация           - по которой выполняется поиск
//  ВалютаДенежныхСредств - валюта банковского счета
//
Функция ПолучитьСкладПоУмолчанию() Экспорт
	
	СкладТекущегоПользователя = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойСклад.ИмяПредопределенныхДанных);	 
	Если ЗначениеЗаполнено(СкладТекущегоПользователя) Тогда
		Возврат СкладТекущегоПользователя;
	Иначе
		Возврат Справочники.Склады.Основной;
	КонецЕсли;
	
КонецФункции // ()

// Функция возвращает возможные счета учета расчетов с контрагентами
//
// Параметры:
//  СтруктураДанные	 - Структура - 
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура) Экспорт
	
	СтруктураВозврата  = Новый Структура("
	|СчетБУ,
	|СчетПередачи,
	|СчетДохода,
	|СубконтоДоходов1,
	|СубконтоДоходов2,
	|СубконтоДоходов3,
	|ВЭД,
	|СчетЗабалансовый,
	|СчетПередачиЗабалансовый,
	|СчетРасхода,
	|СубконтоРасходов1,
	|СубконтоРасходов2,
	|СубконтоРасходов3,
	|СтавкаНСП");
		
	МассивНоменклатура	 = Новый Массив();
	МассивОрганизация	 = Новый Массив();
	
	МассивНоменклатура.Добавить(Справочники.Номенклатура.ПустаяСсылка());
	МассивНоменклатура.Добавить(Номенклатура);
	МассивОрганизация.Добавить(Справочники.Организации.ПустаяСсылка());
	
	СписокГрупп = БухгалтерскийУчетСервер.ПолучитьСписокВышеСтоящихГрупп(Номенклатура);
	Для каждого Элемент Из СписокГрупп Цикл
		МассивНоменклатура.Добавить(Элемент);
	КонецЦикла;
	
	МассивОрганизация.Добавить(Организация);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",        МассивОрганизация);
	Запрос.УстановитьПараметр("Номенклатура",       МассивНоменклатура);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетаУчетаНоменклатуры.Организация,
	|	СчетаУчетаНоменклатуры.Номенклатура,
	|	СчетаУчетаНоменклатуры.Склад,
	|	СчетаУчетаНоменклатуры.СчетБУ,
	|	СчетаУчетаНоменклатуры.СчетПередачи,
	|	СчетаУчетаНоменклатуры.СчетДохода,
	|	СчетаУчетаНоменклатуры.СубконтоДоходов1,
	|	СчетаУчетаНоменклатуры.СубконтоДоходов2,
	|	СчетаУчетаНоменклатуры.СубконтоДоходов3,
	|	СчетаУчетаНоменклатуры.ВЭД,
	|	СчетаУчетаНоменклатуры.СчетУчетаЗабалансовый,
	|	СчетаУчетаНоменклатуры.СчетПередачиЗабалансовый,
	|	СчетаУчетаНоменклатуры.СчетРасхода,
	|	СчетаУчетаНоменклатуры.СубконтоРасходов1,
	|	СчетаУчетаНоменклатуры.СубконтоРасходов2,
	|	СчетаУчетаНоменклатуры.СубконтоРасходов3,
	|   СчетаУчетаНоменклатуры.СтавкаНСП
	|ИЗ
	|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
	|ГДЕ
	|	СчетаУчетаНоменклатуры.Организация В(&Организация)
	|	И СчетаУчетаНоменклатуры.Номенклатура В(&Номенклатура)";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Колонки.Добавить("Глубина");
	Для Каждого Строка Из ТаблицаЗапроса Цикл
		Если Строка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Строка.Глубина = 0;
		Иначе
			Строка.Глубина = СтрДлина(Строка.Номенклатура.ПолныйКод());
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗапроса.Сортировать("Глубина Убыв, Организация Убыв");

	Если ТаблицаЗапроса.Количество() > 0 Тогда

		СведенияОСчетах = ТаблицаЗапроса[0];
		
		СтруктураВозврата.СчетБУ 						= СведенияОСчетах.СчетБУ;
		СтруктураВозврата.СчетПередачи 					= СведенияОСчетах.СчетПередачи;
		СтруктураВозврата.СчетДохода 					= СведенияОСчетах.СчетДохода;
		СтруктураВозврата.ВЭД                           = СведенияОСчетах.ВЭД;
		СтруктураВозврата.СубконтоДоходов1 				= СведенияОСчетах.СубконтоДоходов1;
		СтруктураВозврата.СубконтоДоходов2 				= СведенияОСчетах.СубконтоДоходов2;
		СтруктураВозврата.СубконтоДоходов3 				= СведенияОСчетах.СубконтоДоходов3;
		СтруктураВозврата.СчетЗабалансовый 				= СведенияОСчетах.СчетУчетаЗабалансовый;
		СтруктураВозврата.СчетПередачиЗабалансовый		= СведенияОСчетах.СчетПередачиЗабалансовый;
		СтруктураВозврата.СчетРасхода                   = СведенияОСчетах.СчетРасхода;
		СтруктураВозврата.СубконтоРасходов1 			= СведенияОСчетах.СубконтоРасходов1;
		СтруктураВозврата.СубконтоРасходов2 			= СведенияОСчетах.СубконтоРасходов2;
		СтруктураВозврата.СубконтоРасходов3 			= СведенияОСчетах.СубконтоРасходов3;
		СтруктураВозврата.СтавкаНСП 					= СведенияОСчетах.СтавкаНСП;
				
	КонецЕсли;

	Возврат СтруктураВозврата;
		
КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

#КонецОбласти

#Область ПроцедурыИФункцииУправленияВнеоборотнымиАктивами

// Функция возвращает счета учета по выбранному ОС
// Параметры:
//  Организация - по которой выполняется поиск
//  ОС      	- по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета 
// 
Функция ПолучитьСчетаУчетаОС(Организация, ОС, ДатаСведений, СпособОтраженияРасходовПоАмортизации) Экспорт
	
	Результат = Новый Структура("СчетУчета, СчетРасходовАО, СчетНачисленияАмортизацииБУ");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаСведений",  							ДатаСведений);
	Запрос.УстановитьПараметр("Организация",   							Организация);
	Запрос.УстановитьПараметр("ОС",            							ОС);
	Запрос.УстановитьПараметр("СпособОтраженияРасходовПоАмортизации", 	СпособОтраженияРасходовПоАмортизации);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетаУчетаОССрезПоследних.СчетУчета,
	               |	СчетаУчетаОССрезПоследних.СчетУчета.ПарныйСчет КАК СчетНачисленияАмортизацииБУ,
	               |	ЕСТЬNULL(СпособыОтраженияРасходовПоАмортизации.СчетЗатрат, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетРасходовАО
	               |ИЗ
	               |	РегистрСведений.ПараметрыУчетаОС.СрезПоследних(
	               |			&ДатаСведений,
	               |			Организация = &Организация
	               |				И ОсновноеСредство = &ОС) КАК СчетаУчетаОССрезПоследних,
	               |	Справочник.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизации
	               |ГДЕ
	               |	СпособыОтраженияРасходовПоАмортизации.Ссылка = &СпособОтраженияРасходовПоАмортизации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат.СчетУчета							= Выборка.СчетУчета;
		Результат.СчетРасходовАО					= Выборка.СчетРасходовАО;		
		Результат.СчетНачисленияАмортизацииБУ		= Выборка.СчетНачисленияАмортизацииБУ;
		
	Иначе
		ПустойСчет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Результат.СчетУчета							= ПустойСчет;
		Результат.СчетРасходовАО					= ПустойСчет;
		Результат.СчетНачисленияАмортизацииБУ		= ПустойСчет;   		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ПолучитьСчетаУчетаОС()

// Функция - Получить счет начисления амортизации
//
// Параметры:
//  СчетУчета	 - ПланСчетовСсылка.Хозрасчетный - Счет учета для которого нужно получить счет начисления амортизации
// 
// Возвращаемое значение:
//   - СчетУчета
//
Функция ПолучитьСчетНачисленияАмортизации(СчетУчета) Экспорт
	Возврат СчетУчета.ПарныйСчет;
КонецФункции    

#КонецОбласти

#Область ПроцедурыИФункцииНДСиНСП

// Функция - Получить ставку НДС, Нужно использовать процедуру БухгалтерскийУчетСервер.ПолучитьСтавкуНДС
Функция ПолучитьСтавкуНДС(Дата, СтавкаНДС) Экспорт

	ДанныеОСтавке = Новый Структура;
	ДанныеОСтавке.Вставить("Период", Дата(1,1,1));
	ДанныеОСтавке.Вставить("Ставка", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиНДССрезПоследних.Период,
		|	СтавкиНДССрезПоследних.Ставка
		|ИЗ
		|	РегистрСведений.СтавкиНДС.СрезПоследних(&Дата, СтавкаНДС = &СтавкаНДС) КАК СтавкиНДССрезПоследних";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("СтавкаНДС", СтавкаНДС);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(ДанныеОСтавке, ВыборкаДетальныеЗаписи);
	КонецЕсли;
	
	Возврат ДанныеОСтавке;
КонецФункции // ПолучитьСтавкуНДС()

// Функция - Получить ставку НСП, Нужно использовать процедуру БухгалтерскийУчетСервер.ПолучитьСтавкуНСП
Функция ПолучитьСтавкуНСП(Дата, СтавкаНДС, СтавкаНСП) Экспорт
	
	ДанныеОСтавке = Новый Структура;
	ДанныеОСтавке.Вставить("Период", Дата(1,1,1));
	ДанныеОСтавке.Вставить("Ставка", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтавкиНСПСрезПоследних.Период,
	|	ВЫБОР
	|		КОГДА &СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС)
	|			ТОГДА СтавкиНСПСрезПоследних.СтавкаНеПлательщикНДС
	|		ИНАЧЕ СтавкиНСПСрезПоследних.СтавкаПлательщикНДС
	|	КОНЕЦ КАК Ставка
	|ИЗ
	|	РегистрСведений.СтавкиНСП.СрезПоследних(&Дата, СтавкаНСП = &СтавкаНСП) КАК СтавкиНСПСрезПоследних";	
	Запрос.УстановитьПараметр("Дата", 		Дата);	
	Запрос.УстановитьПараметр("СтавкаНСП", 	СтавкаНСП);	
	Запрос.УстановитьПараметр("СтавкаНДС", 	СтавкаНДС);	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(ДанныеОСтавке, ВыборкаДетальныеЗаписи);
	КонецЕсли;
	
	Возврат ДанныеОСтавке;
КонецФункции // ПолучитьСтавкуНСП()

#КонецОбласти

#Область ПроцедурыИФункцииРасчетЗаработнойПлаты

// Следует использовать функцию БухгалтерскийУчетСервер.ПолучитьДанныеУчетнойПолитикиПоПерсоналу
//
&НаСервере
Функция ПолучитьДанныеУчетнойПолитикиПоПерсоналу(Дата, Организация) Экспорт
	Возврат РегистрыСведений.УчетнаяПолитикаПоПерсоналу.ПолучитьПоследнее(Дата, Новый Структура("Организация", Организация));
КонецФункции // ПолучитьУчетнуюПолитикуПоПерсоналу()

#КонецОбласти