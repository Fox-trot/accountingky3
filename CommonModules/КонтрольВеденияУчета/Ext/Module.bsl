#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции по выполнению проверок ведению учета и получению их результатов.

// Выполняет проверку базы данных, согласно параметру Проверка.
//
// Параметры:
//   Проверка - СправочникСсылка.ПравилаПроверкиУчета - правило проверки, которая будет выполняться.
//
// Пример:
//   Проверка = КонтрольВеденияУчета.ПроверкаПоИдентификатору("ПроверитьСсылочнуюЦелостность");
//   КонтрольВеденияУчета.ВыполнитьПроверку(Проверка);
//
Процедура ВыполнитьПроверку(Проверка) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("КонтрольВеденияУчета.ВыполнитьПроверку", "Проверка", 
		Проверка, Тип("СправочникСсылка.ПравилаПроверкиУчета"));
	
	Если Проверка.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	КонтрольВеденияУчетаСлужебный.ВыполнитьПроверку(Проверка);
	
КонецПроцедуры

// Выполняет проверки по заданному контексту - общему признаку, связывающему воедино группу проверок.
//
// Параметры:
//    КонтекстПроверокВеденияУчета - ОпределяемыйТип.КонтекстПроверокВеденияУчета - Контекст выполняемых проверок.
//
// Пример:
//    КонтекстПроверокВеденияУчета = Перечисления.ХозяйственныеОперации.ЗакрытиеМесяца;
//    КонтрольВеденияУчета.ВыполнитьПроверкиВКонтексте(КонтекстПроверокВеденияУчета);
//
Процедура ВыполнитьПроверкиВКонтексте(КонтекстПроверокВеденияУчета) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("КонтрольВеденияУчета.ВыполнитьПроверкиВКонтексте",
		"КонтекстПроверокВеденияУчета", КонтекстПроверокВеденияУчета,
		Метаданные.ОпределяемыеТипы.КонтекстПроверокВеденияУчета.Тип);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПравилаПроверкиУчета.Ссылка КАК Проверка
	|ИЗ
	|	Справочник.ПравилаПроверкиУчета КАК ПравилаПроверкиУчета
	|ГДЕ
	|	ПравилаПроверкиУчета.КонтекстПроверокВеденияУчета = &КонтекстПроверокВеденияУчета
	|	И ПравилаПроверкиУчета.Использование");
	
	Запрос.УстановитьПараметр("КонтекстПроверокВеденияУчета", КонтекстПроверокВеденияУчета);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		ВыполнитьПроверку(СтрокаРезультата.Проверка);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает сводку по количеству выявленных проблем указанного вида проверки.
//
// Параметры:
//   ВидПроверок                - СправочникСсылка.ВидыПроверок - ссылка на вид проверки.
//                              - Строка - строковый идентификатор вида проверки Свойство1.
//                              - Массив - строковые идентификаторы вида проверки Свойство1...СвойствоN.
//   ПоискПоТочномуСоответствию - Булево - Регулирует возможности точности. Если Истина, то поиск ведется
//                                по переданным свойствам на равенство, остальные свойства должны быть равны
//                                Неопределено (табличная часть дополнительных свойств должна быть пуста).
//                                Если Ложь, то значения остальных свойств могут быть произвольными, главное
//                                чтобы соответствующие свойства были равны свойствам структуры. По умолчанию Истина.
//
// Возвращаемое значение:
//  Структура - сводка:
//    * Количество - Число - общее количество найденных проблем.
//    * ЕстьОшибки - Булево - признак того, имеются ли ошибки среди найденных проблем (с важностью "Ошибка").
//
// Пример:
//   1) Результат = СводнаяИнформацияПоВидамПроверок("СистемныеПроверки");
//   2) ВидПроверок = Новый Массив;
//      ВидПроверок.Добавить("ЗакрытиеМесяца");
//      ВидПроверок.Добавить(Организация);
//      ВидПроверок.Добавить(МесяцЗакрытия);
//      Результат = СводнаяИнформацияПоВидамПроверок(ВидПроверок);
//
Функция СводнаяИнформацияПоВидамПроверок(ВидПроверок, ПоискПоТочномуСоответствию = Истина) Экспорт
	
	ИмяПроцедуры = "КонтрольВеденияУчета.СводнаяИнформацияПоВидамПроверок";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ВидПроверок", ВидПроверок, КонтрольВеденияУчетаСлужебный.ОписаниеТипаВидПроверки());
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ПоискПоТочномуСоответствию", ПоискПоТочномуСоответствию, Тип("Булево"));
	
	СводнаяИнформация = Новый Структура;
	СводнаяИнформация.Вставить("Количество", 0);
	СводнаяИнформация.Вставить("ЕстьОшибки", Ложь);
	
	МассивВидовПроверок = Новый Массив;
	Если ТипЗнч(ВидПроверок) = Тип("СправочникСсылка.ВидыПроверок") Тогда
		МассивВидовПроверок.Добавить(ВидПроверок);
	Иначе
		МассивВидовПроверок = КонтрольВеденияУчетаСлужебный.ПолучитьВидыПроверок(ВидПроверок, ПоискПоТочномуСоответствию);
		Если МассивВидовПроверок.Количество() = 0 Тогда
			Возврат СводнаяИнформация;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(*) КАК Количество,
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|				КОГДА РезультатыПроверкиУчета.ВажностьПроблемы = ЗНАЧЕНИЕ(Перечисление.ВажностьПроблемыУчета.Ошибка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ), ЛОЖЬ) КАК ЕстьОшибки
	|ИЗ
	|	РегистрСведений.РезультатыПроверкиУчета КАК РезультатыПроверкиУчета
	|ГДЕ
	|	НЕ РезультатыПроверкиУчета.ИгнорироватьПроблему
	|	И РезультатыПроверкиУчета.ВидПроверки В (&МассивВидовПроверок)");
	
	Запрос.УстановитьПараметр("МассивВидовПроверок", МассивВидовПроверок);
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	ЗаполнитьЗначенияСвойств(СводнаяИнформация, Результат);
	
	Возврат СводнаяИнформация;
	
КонецФункции

// Возвращает подробные сведения о выявленных проблемах указанного вида проверки.
//
// Параметры:
//   ВидПроверок                - СправочникСсылка.ВидыПроверок - ссылка на вид проверки.
//                              - Строка - строковый идентификатор вида проверки Свойство1.
//                              - Массив - строковые идентификаторы вида проверки Свойство1...СвойствоN.
//   ПоискПоТочномуСоответствию - Булево - Регулирует возможности точности. Если Истина, то поиск ведется
//                                по переданным свойствам на равенство, остальные свойства должны быть равны
//                                Неопределено (табличная часть дополнительных свойств должна быть пуста).
//                                Если Ложь, то значения остальных свойств могут быть произвольными, главное
//                                чтобы соответствующие свойства были равны свойствам структуры. По умолчанию Истина.
//
// Возвращаемое значение:
//   ТаблицаЗначений            - таблица проблем:
//     * ПроблемныйОбъект         - ЛюбаяСсылка - Ссылка на объект "Источник" проблем.
//     * ПравилоПроверки          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на выполненную проверку.
//     * УточнениеПроблемы        - Строка - Строка-уточнение найденной проблемы.
//     * ВажностьПроблемы         - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                  "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//     * Ответственный            - СправочникСсылка.Пользователи - Заполнен если есть возможность
//                                  идентифицировать ответственного в проблемном объекте.
//     * ДополнительнаяИнформация - ХранилищеЗначений - Служебное свойство с дополнительными
//                                  сведениями, связанными с выявленной проблемой
//     * Выявлено                 - Дата - Серверное время идентификации проблемы.
//
// Пример:
//   1) Результат = ПодробнаяИнформацияПоВидамПроверок("СистемныеПроверки");
//   2) ВидПроверок = Новый Массив;
//      ВидПроверок.Добавить("ЗакрытиеМесяца");
//      ВидПроверок.Добавить(Организация);
//      ВидПроверок.Добавить(МесяцЗакрытия);
//      Результат = ПодробнаяИнформацияПоВидамПроверок(ВидПроверок);
//
Функция ПодробнаяИнформацияПоВидамПроверок(ВидПроверок, ПоискПоТочномуСоответствию = Истина) Экспорт
	
	ИмяПроцедуры = "КонтрольВеденияУчета.ПодробнаяИнформацияПоВидамПроверок";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ВидПроверок", ВидПроверок, КонтрольВеденияУчетаСлужебный.ОписаниеТипаВидПроверки());
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ПоискПоТочномуСоответствию", ПоискПоТочномуСоответствию, Тип("Булево"));
	
	ПодробнаяИнформация = Новый ТаблицаЗначений;
	МассивВидовПроверок = Новый Массив;
	
	Если ТипЗнч(ВидПроверок) = Тип("СправочникСсылка.ВидыПроверок") Тогда
		МассивВидовПроверок.Добавить(ВидПроверок);
	Иначе
		МассивВидовПроверок = КонтрольВеденияУчетаСлужебный.ПолучитьВидыПроверок(ВидПроверок, ПоискПоТочномуСоответствию);
	КонецЕсли;
	
	Если МассивВидовПроверок.Количество() = 0 Тогда
		Возврат ПодробнаяИнформация;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РезультатыПроверкиУчета.ПроблемныйОбъект КАК ПроблемныйОбъект,
	|	РезультатыПроверкиУчета.ВажностьПроблемы КАК ВажностьПроблемы,
	|	РезультатыПроверкиУчета.ПравилоПроверки КАК ПравилоПроверки,
	|	РезультатыПроверкиУчета.ВидПроверки КАК ВидПроверки
	|ИЗ
	|	РегистрСведений.РезультатыПроверкиУчета КАК РезультатыПроверкиУчета
	|ГДЕ
	|	НЕ РезультатыПроверкиУчета.ИгнорироватьПроблему
	|	И РезультатыПроверкиУчета.ВидПроверки В (&МассивВидовПроверок)");
	
	Запрос.УстановитьПараметр("МассивВидовПроверок", МассивВидовПроверок);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ПодробнаяИнформация = Результат.Выгрузить();
	КонецЕсли;
	
	Возврат ПодробнаяИнформация;
	
КонецФункции

// Ищет проверку по переданному идентификатору.
//
// Параметры:
//   Идентификатор - Строка - Строковый идентификатор проверки.
//
// Возвращаемое значение: 
//   СправочникСсылка.ПравилаПроверкиУчета - Найденная проверка,
//   либо пустая ссылка. если найти не удалось.
//
Функция ПроверкаПоИдентификатору(Идентификатор) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("КонтрольВеденияУчета.ПроверкаПоИдентификатору", "Идентификатор", Идентификатор, Тип("Строка"));
	
	Возврат КонтрольВеденияУчетаСлужебный.ПроверкаПоИдентификатору(Идентификатор);
	
КонецФункции

// Вычисляет количество проблем у переданного объекта.
//
// Параметры:
//   СсылкаНаОбъект - ЛюбаяСсылка - Ссылка на объект для которого нужно вычислить количество проблем.
//
// Возвращаемое значение:
//   Число - Количество найденных проблем по переданной ссылке на объект.
//
Функция КоличествоПроблемПоОбъекту(СсылкаНаОбъект) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("КонтрольВеденияУчета.КоличествоПроблемПоОбъекту", "СсылкаНаОбъект",
		СсылкаНаОбъект, ОбщегоНазначения.ОписаниеТипаВсеСсылки());
	
	ТекущийПользовательПолноправный = Пользователи.ЭтоПолноправныйПользователь();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	РегистрСведений.РезультатыПроверкиУчета КАК РезультатыПроверкиУчета
	|ГДЕ
	|	РезультатыПроверкиУчета.ПроблемныйОбъект = &ПроблемныйОбъект
	|	И НЕ РезультатыПроверкиУчета.ИгнорироватьПроблему");
	Запрос.УстановитьПараметр("ПроблемныйОбъект", СсылкаНаОбъект);
	
	Если Не ТекущийПользовательПолноправный Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		КоличествоПроблем = Результат.Количество;
	Иначе
		КоличествоПроблем = 0;
	КонецЕсли;
	
	Если Не ТекущийПользовательПолноправный Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Запрос = Неопределено;
	
	Возврат КоличествоПроблем;
	
КонецФункции

// Вычисляет количество проблем у переданного объекта.
//
// Параметры:
//   ПравилоПроверки - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на правило для которого
//                     нужно вычислить количество проблем.
//
// Возвращаемое значение:
//   Число - Количество найденных проблем по переданному правилу проверки.
//
Функция КоличествоПроблемПоПравилуПроверки(ПравилоПроверки) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("КонтрольВеденияУчета.КоличествоПроблемПоПравилуПроверки", "ПравилоПроверки",
		ПравилоПроверки, Тип("СправочникСсылка.ПравилаПроверкиУчета"));
	
	ТекущийПользовательПолноправный = Пользователи.ЭтоПолноправныйПользователь();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	РегистрСведений.РезультатыПроверкиУчета КАК РезультатыПроверкиУчета
	|ГДЕ
	|	РезультатыПроверкиУчета.ПравилоПроверки = &ПравилоПроверки
	|	И НЕ РезультатыПроверкиУчета.ИгнорироватьПроблему");
	Запрос.УстановитьПараметр("ПравилоПроверки", ПравилоПроверки);
	
	Если Не ТекущийПользовательПолноправный Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		КоличествоПроблем = Результат.Количество;
	Иначе
		КоличествоПроблем = 0;
	КонецЕсли;
	
	Если Не ТекущийПользовательПолноправный Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Запрос = Неопределено;
	
	Возврат КоличествоПроблем;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для добавления проверок ведения учета.

// Формирует описание проблемы в виде структуры.
//
// Параметры:
//   ПроблемныйОбъект  - ЛюбаяСсылка - Ссылка на объект "Источник" проблем.
//   ПараметрыПроверки - Структура - Параметры проверки которую необходимо выполнить:
//       * Проверка         - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на выполненную проверку.
//       * ВидПроверки      - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к которому относится
//                            выполненная проверка.
//       * ВажностьПроблемы - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
// Возвращаемое значение:
//   Структура - Сформированное описание проблемы.
//       * ПроблемныйОбъект         - ЛюбаяСсылка - Ссылка на объект "Источник" проблем.
//       * Проверка                 - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на выполненную проверку.
//                                    Взято из переданной структуры ПараметрыПроверки.
//       * ВидПроверки              - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к которому относится
//                                    выполненная проверка. Взято из переданной структуры ПараметрыПроверки
//       * ВажностьПроблемы         - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к которому относится
//                                    выполненная проверка. Взято из переданной структуры ПараметрыПроверки.
//       * УточнениеПроблемы        - Строка - Строка уточнения проблемы. По умолчанию не заполнена.
//       * КлючУникальности         - УникальныйИдентификатор - Ключ уникальности проблемы.
//       * Выявлено                 - Дата - Серверное время обнаружения проблемы.
//       * ДополнительнаяИнформация - ХранилищеЗначений - Служебное свойство с дополнительными
//                                    сведениями, связанными с выявленной проблемой.
//                                    По умолчанию Неопределено.
//       * Ответственный            - СправочникСсылка.Пользователи - Заполнен если есть возможность
//                                    идентифицировать ответственного в проблемном объекте.
//                                    По умолчанию Неопределено.
//
Функция ОписаниеПроблемы(ПроблемныйОбъект, ПараметрыПроверки) Экспорт
	
	ИмяПроцедуры = "КонтрольВеденияУчета.ОписаниеПроблемы";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ПроблемныйОбъект", ПроблемныйОбъект, 
		ОбщегоНазначения.ОписаниеТипаВсеСсылки());
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ПараметрыПроверки", ПараметрыПроверки, Тип("Структура"), 
		КонтрольВеденияУчетаСлужебный.ОжидаемыеТипыСвойствПараметровПроверки());
	
	Возврат КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(ПроблемныйОбъект, ПараметрыПроверки);
	
КонецФункции

// Записывает результат выполнения проверки.
//
// Параметры:
//   Проблема - Структура - описание проблемы.
//       * ПроблемныйОбъект         - ЛюбаяСсылка - ссылка на объект "Источник" проблем.
//       * ПравилоПроверки          - СправочникСсылка.ПравилаПроверкиУчета - ссылка на выполненную проверку.
//       * ВидПроверки              - СправочникСсылка.ВидыПроверок - ссылка на вид проверки, к которому 
//                                    относится выполненная проверка.
//       * КлючУникальности         - УникальныйИдентификатор - ключ уникальности проблемы.
//       * УточнениеПроблемы        - Строка - строка-уточнение найденной проблемы.
//       * ВажностьПроблемы         - ПеречислениеСсылка.ВажностьПроблемыУчета - важность проблемы учета
//                                    "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//       * Ответственный            - СправочникСсылка.Пользователи - заполнен если есть возможность
//                                    идентифицировать ответственного в проблемном объекте.
//       * ИгнорироватьПроблему     - Булево - флаг игнорирования проблемы. Если имеет значение "Истина",
//                                    запись о проблеме игнорируется подсистемой.
//       * ДополнительнаяИнформация - ХранилищеЗначений - служебное свойство с дополнительными
//                                    сведениями, связанными с выявленной проблемой.
//       * Выявлено                 - Дата - серверное время идентификации проблемы.
//
//   ПараметрыПроверки - Структура - описание дополнительных параметров проверки. Необязательный параметр.
//      * ЛимитПроблем     - Число - количество проверяемых объектов.
//                           По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки - Число - очередная итерация проверки. Используется совместно с параметром
//                           ЛимитПроблем для определения предельного количества итераций.
//
Процедура ЗаписатьПроблему(Проблема, ПараметрыПроверки = Неопределено) Экспорт
	
	ИмяПроцедуры = "КонтрольВеденияУчета.ЗаписатьПроблему";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "Проблема", Проблема, Тип("Структура"), 
		КонтрольВеденияУчетаСлужебный.ОжидаемыеТипыСвойствОписанияПроблемы());
	Если ПараметрыПроверки <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ПараметрыПроверки", ПараметрыПроверки, Тип("Структура"), 
			КонтрольВеденияУчетаСлужебный.ОжидаемыеТипыСвойствПараметровПроверки());
	КонецЕсли;
	
	КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для встраивания подсистемы в формы объектов конфигурации.

// Доопределяет переданный динамический список дополнительной колонкой. У доопределяемого списка
// должна быть определена основная таблица. Вызывается из события "ПриСозданииНаСервере"
// целевой формы списка.
//
// Параметры:
//   Форма                  - УправляемаяФорма - Управляемая форма, содержащая доопределяемый список.
//   ИменаСписков           - Строка - Имена доопределяемых списков через запятую.
//   ДополнительныеСвойства - Структура, Неопределено - Содержит дополнительные свойства, в случае
//                            необходимости их использования.
//
Процедура ПриСозданииНаСервереФормыСписка(Форма, ИменаСписков, ДополнительныеСвойства = Неопределено) Экспорт
	
	ИмяПроцедуры = "КонтрольВеденияУчета.ПриСозданииНаСервереФормыСписка";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "Форма", Форма, Тип("УправляемаяФорма"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ИменаСписков", ИменаСписков, Тип("Строка"));
	Если ДополнительныеСвойства <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ДополнительныеСвойства", ДополнительныеСвойства, Тип("Структура"));
	КонецЕсли;
	
	Если Не ПодсистемаДоступна() Тогда
		Возврат;
	КонецЕсли;
	
	ГлобальныеНастройки = КонтрольВеденияУчетаСлужебный.ГлобальныеНастройки();
	СписокИмен          = СтрРазделить(ИменаСписков, ",");
	Элементы            = Форма.Элементы;
	
	Для Каждого ИмяСписка Из СписокИмен Цикл
		ТаблицаФормы = Элементы.Найти(СокрЛП(ИмяСписка));
		Если ТаблицаФормы <> Неопределено Тогда
			
			ТекущийСписок   = Форма[ТаблицаФормы.ПутьКДанным];
			ОсновнаяТаблица = ТекущийСписок.ОсновнаяТаблица;
			
			Если ЗначениеЗаполнено(ОсновнаяТаблица) Тогда
				
				ТекстЗапроса = "";
				Если ТекущийСписок.ПроизвольныйЗапрос Тогда
					ТекстЗапроса = ТекущийСписок.ТекстЗапроса;
				Иначе
					ИсполняемаяСхема               = ТаблицаФормы.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
					НаборДанныхДинамическогоСписка = ИсполняемаяСхема.НаборыДанных.Найти("НаборДанныхДинамическогоСписка");
					Если НаборДанныхДинамическогоСписка <> Неопределено Тогда
						ТекущийСписок.ПроизвольныйЗапрос = Истина;
						ТекстЗапроса = НаборДанныхДинамическогоСписка.Запрос;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
					
					НачалоЗапроса = Лев(ТекстЗапроса, 7);
					Если НачалоЗапроса = "ВЫБРАТЬ" Тогда
						
						АлиасИндикатор = "ИндикаторОшибки_" + ОбщегоНазначения.КонтрольнаяСуммаСтрокой(Форма.ИмяФормы + ПолучитьРазделительПути() + ИмяСписка);
						РазделенноеИмя = СтрРазделить(ОсновнаяТаблица, ".");
						
						ДополнительныеСвойстваКомпоновщика = ТекущийСписок.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
						ДополнительныеСвойстваКомпоновщика.Вставить("КолонкаИндикатора",    АлиасИндикатор);
						ДополнительныеСвойстваКомпоновщика.Вставить("ВидОбъектаМетаданных", РазделенноеИмя.Получить(0));
						ДополнительныеСвойстваКомпоновщика.Вставить("ИмяОбъектаМетаданных", РазделенноеИмя.Получить(1));
						ДополнительныеСвойстваКомпоновщика.Вставить("ИмяСписка",            ИмяСписка);
						
						СтруктураСвойствДинамическогоСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
						СтруктураСвойствДинамическогоСписка.ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ВЫБРАТЬ 0 КАК %1, %2",
							АлиасИндикатор, Прав(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 7));
						ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(ТаблицаФормы, СтруктураСвойствДинамическогоСписка);
							
						ПараметрыКолонкиИндикации = Новый Структура;
						
						КонтрольВеденияУчетаСлужебный.ПриОпределенииПараметровКолонкиИндикации(ПараметрыКолонкиИндикации, ОсновнаяТаблица);
						КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПараметровКолонкиИндикации(ПараметрыКолонкиИндикации, ОсновнаяТаблица);
						
						КолонкаИндикаторОшибки = Элементы.Добавить(АлиасИндикатор, Тип("ПолеФормы"), ТаблицаФормы);
						КолонкаИндикаторОшибки.Вид                = ВидПоляФормы.ПолеКартинки;
						КолонкаИндикаторОшибки.ПутьКДанным        = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1.%2", ИмяСписка, АлиасИндикатор);
						КолонкаИндикаторОшибки.ПоложениеЗаголовка = ПараметрыКолонкиИндикации.ПоложениеЗаголовка;
						КолонкаИндикаторОшибки.КартинкаШапки      = ГлобальныеНастройки.КартинкаИндикатораПроблем;
						КолонкаИндикаторОшибки.КартинкаЗначений   = ГлобальныеНастройки.КартинкаИндикатораПроблем;
						
						КолонкиСписка = ТаблицаФормы.ПодчиненныеЭлементы;
						Если КолонкиСписка.Количество() > 0 Тогда
							Если ПараметрыКолонкиИндикации.ВыводитьПоследней Тогда
								Элементы.Переместить(КолонкаИндикаторОшибки, ТаблицаФормы);
							Иначе
								Элементы.Переместить(КолонкаИндикаторОшибки, ТаблицаФормы, КолонкиСписка.Получить(0));
							КонецЕсли;
						КонецЕсли;
						
						ТаблицаФормы.УстановитьДействие("Выбор", "Подключаемый_Выбор");
						
					КонецЕсли;
					
				КонецЕсли
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Производит индикацию проблемных объектов в таблице формы списка, путем добавления в соответствующую
// колонку картинки, сигнализирующую о наличии проблем. Вызывается из события "ПриСозданииНаСервере"
// целевой формы списка.
//
// Параметры:
//   Настройки              - НастройкиКомпоновкиДанных - Содержит копию полных настроек динамического списка.
//   Строки                 - СтрокиДинамическогоСписка - Коллекция содержит данные и оформление всех строк,
//                            получаемых в списке, кроме строк группировок.
//   ИмяКлючевогоПоля       - Строка - "Ссылка" или заданное наперед имя ключевого поля, которое
//                            носит колонка, содержащая проблемный объект.
//   ДополнительныеСвойства - Структура, Неопределено - Содержит дополнительные свойства в случае
//                            необходимости их использования.
//
Процедура ПриПолученииДанныхНаСервере(Настройки, Строки, ИмяКлючевогоПоля = "Ссылка", ДополнительныеСвойства = Неопределено) Экспорт
	
	ИмяПроцедуры = "КонтрольВеденияУчета.ПриПолученииДанныхНаСервере";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "Настройки", Настройки, Тип("НастройкиКомпоновкиДанных"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "Строки", Строки, Тип("СтрокиДинамическогоСписка"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ИмяКлючевогоПоля", ИмяКлючевогоПоля, Тип("Строка"));
	Если ДополнительныеСвойства <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ДополнительныеСвойства", ДополнительныеСвойства, Тип("Структура"));
	КонецЕсли;
	
	Если Не ПодсистемаДоступна() Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойстваКомпоновщика = Настройки.ДополнительныеСвойства;
	
	Если ДополнительныеСвойстваКомпоновщика.Свойство("КолонкаИндикатора") Тогда
		
		КолонкаИндикатора = Настройки.ДополнительныеСвойства.КолонкаИндикатора;
		Если ИмяКлючевогоПоля = "Ссылка" Тогда
			КлючиСтрок = Строки.ПолучитьКлючи();
		Иначе
			НачальныеКлючи = Строки.ПолучитьКлючи();
			КлючиСтрок     = Новый Массив;
			Для Каждого НачальныйКлюч Из НачальныеКлючи Цикл
				КлючиСтрок.Добавить(НачальныйКлюч[ИмяКлючевогоПоля]);
			КонецЦикла;
		КонецЕсли;
		
		ПроблемныеОбъекты = КонтрольВеденияУчетаСлужебный.ПроблемныеОбъекты(КлючиСтрок);
		
		Для Каждого КлючСтроки Из КлючиСтрок Цикл
			СтрокаСписка = Строки[КлючСтроки];
			СтрокаСписка.Данные[КолонкаИндикатора] = ПроблемныеОбъекты.Найти(КлючСтроки) = Неопределено;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Производит индикацию проблемного объекта в его форме, путем добавления в специальной группы с
// соответствующими картинкой и надписью, сигнализирующие о наличии проблем. Вызывается из события
// "ПриЧтенииНаСервере" целевой формы объекта.
//
// Параметры:
//   Форма         - Форма - Управляемая форма проблемного объекта.
//   ТекущийОбъект - ДокументОбъект.ИмяДокумента, СправочникОбъект.ИмяСправочника,
//                         ПланОбменаОбъект.ИмяПланаОбмена, ПланВидовХарактеристикОбъект.ИмяПланаВидаХарактеристик,
//                         ПланСчетовОбъект.ИмяПланаСчетов, ПланВидовРасчетаОбъект.ИмяПланаВидовРасчета,
//                         ЗадачаОбъект.ИмяЗадачи - Объект, который будет прочитан.
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	ИмяПроцедуры = "КонтрольВеденияУчета.ПриЧтенииНаСервере";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "Форма", Форма, Тип("УправляемаяФорма"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ТекущийОбъект", ТекущийОбъект, 
		КонтрольВеденияУчетаСлужебныйПовтИсп.ОписаниеТипаВсеОбъекты());
	
	Если Не ПодсистемаДоступна() Тогда
		Возврат;
	КонецЕсли;
	
	ГлобальныеНастройки        = КонтрольВеденияУчетаСлужебный.ГлобальныеНастройки();
	СсылкаНаОбъект             = ТекущийОбъект.Ссылка;
	ЭлементыУправляемойФормы   = Форма.Элементы;
	КоличествоПроблемПоОбъекту = КоличествоПроблемПоОбъекту(СсылкаНаОбъект);
	КлючУникальностиИмен       = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(СсылкаНаОбъект.Метаданные().ПолноеИмя()
		+ ПолучитьРазделительПути() + Форма.ИмяФормы);
		
	ДекорацияГруппа = ЭлементыУправляемойФормы.Найти("ГруппаИндикатораОшибки_" + КлючУникальностиИмен);
		
	Если КоличествоПроблемПоОбъекту = 0 Тогда
		
		Если ДекорацияГруппа <> Неопределено Тогда
			ЭлементыУправляемойФормы.Удалить(ДекорацияГруппа);
		КонецЕсли;
		
	Иначе
		
		ПараметрыГруппыИндикации = Новый Структура;
		
		КонтрольВеденияУчетаСлужебный.ПриОпределенииПараметровГруппыИндикации(ПараметрыГруппыИндикации, ТипЗнч(СсылкаНаОбъект));
		КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПараметровГруппыИндикации(ПараметрыГруппыИндикации, ТипЗнч(СсылкаНаОбъект));
		
		Если ДекорацияГруппа <> Неопределено Тогда
			
			ДекорацияНадпись = ЭлементыУправляемойФормы.Найти("ДекорацияНадпись_" + КлючУникальностиИмен);
			
			Если ДекорацияНадпись <> Неопределено Тогда
				
				ДекорацияНадпись.Заголовок = КонтрольВеденияУчетаСлужебный.СформироватьОбщуюСтрокуИндикатор(Форма, СсылкаНаОбъект, КоличествоПроблемПоОбъекту,
					ГлобальныеНастройки.ПояснениеИндикатораПроблем, ГлобальныеНастройки.ГиперссылкаИндикатораПроблем);
				
			КонецЕсли;
			
		Иначе
			
			ГруппаИндикатораОшибки = КонтрольВеденияУчетаСлужебный.РазместитьГруппуИндикатораОшибки(Форма, КлючУникальностиИмен,
				ПараметрыГруппыИндикации.ИмяРодителяГруппы, ПараметрыГруппыИндикации.ВыводитьСнизу);
			
			ОбщаяСтрокаИндикатор = КонтрольВеденияУчетаСлужебный.СформироватьОбщуюСтрокуИндикатор(Форма, СсылкаНаОбъект, КоличествоПроблемПоОбъекту,
				ГлобальныеНастройки.ПояснениеИндикатораПроблем, ГлобальныеНастройки.ГиперссылкаИндикатораПроблем);
			
			КонтрольВеденияУчетаСлужебный.ЗаполнитьГруппуИндикатораОшибки(Форма, ГруппаИндикатораОшибки, КлючУникальностиИмен,
				ОбщаяСтрокаИндикатор, ГлобальныеНастройки.КартинкаИндикатораПроблем);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции.

// Проверяет доступность подсистемы по правам. Используется при формировании
// индикации проблемных объектов.
//
// Возвращаемое значение:
//   Булево - Признак доступности подсистемы согласно настройкам прав.
//
Функция ПодсистемаДоступна() Экспорт
	
	Возврат ПравоДоступа("Просмотр", Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы.КонтрольВеденияУчета);
	
КонецФункции

// Производит поиск вида проверки по переданным свойствам.
//
// Параметры:
//   ВидПроверок                - Строка, Массив - строковый идентификатор вида проверки (Свойство1)
//                                либо массив идентификаторов (Свойство1...СвойствоN), либо ссылка на вид проверки.
//   ПоискПоТочномуСоответствию - Булево - Регулирует возможности точности. Если Истина, то поиск ведется
//                                по переданным свойствам на равенство, остальные свойства должны быть равны
//                                Неопределено (табличная часть дополнительных свойств должна быть пуста).
//                                Если Ложь, то значения остальных свойств могут быть произвольными, главное
//                                чтобы соответствующие свойства были равны свойствам структуры. По умолчанию Истина.
//
// Возвращаемое значение:
//   Массив из СправочникСсылка.ВидыПроверок - Найденные элементы справочника, либо пустой массив
//   в случае если поиск не дал результата. в случае поиска по точному соответствию массив
//   содержит единственный элемент.
//
Функция ПолучитьВидыПроверок(ВидПроверок, ПоискПоТочномуСоответствию = Истина) Экспорт
	
	ИмяПроцедуры = "КонтрольВеденияУчета.ПолучитьВидыПроверок";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ВидПроверок", ВидПроверок, КонтрольВеденияУчетаСлужебный.ОписаниеТипаВидПроверки());
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ПоискПоТочномуСоответствию", ПоискПоТочномуСоответствию, Тип("Булево"));
	
	Возврат КонтрольВеденияУчетаСлужебный.ПолучитьВидыПроверок(ВидПроверок, ПоискПоТочномуСоответствию);
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела: Следует использовать функцию ПодробнаяИнформацияПоВидамПроверок.
// Возвращает подробные сведения о выявленных проблемах указанного вида проверки.
//
// Параметры:
//   ВидПроверок                - СправочникСсылка.ВидыПроверок - ссылка на вид проверки.
//                              - Строка - строковый идентификатор вида проверки Свойство1.
//                              - Массив - строковые идентификаторы вида проверки Свойство1...СвойствоN.
//   ПоискПоТочномуСоответствию - Булево - Регулирует возможности точности. Если Истина, то поиск ведется
//                                по переданным свойствам на равенство, остальные свойства должны быть равны
//                                Неопределено (табличная часть дополнительных свойств должна быть пуста).
//                                Если Ложь, то значения остальных свойств могут быть произвольными, главное
//                                чтобы соответствующие свойства были равны свойствам структуры. По умолчанию Истина.
//
// Возвращаемое значение:
//   ТаблицаЗначений            - таблица проблем:
//     * ПроблемныйОбъект         - ЛюбаяСсылка - Ссылка на объект "Источник" проблем.
//     * ПравилоПроверки          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на выполненную проверку.
//     * УточнениеПроблемы        - Строка - Строка-уточнение найденной проблемы.
//     * ВажностьПроблемы         - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                  "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//     * Ответственный            - СправочникСсылка.Пользователи - Заполнен если есть возможность
//                                  идентифицировать ответственного в проблемном объекте.
//     * ДополнительнаяИнформация - ХранилищеЗначений - Служебное свойство с дополнительными
//                                  сведениями, связанными с выявленной проблемой
//     * Выявлено                 - Дата - Серверное время идентификации проблемы.
//
// Пример:
//   1) Результат = ПодробнаяИнформацияПоВидамПроверок("СистемныеПроверки");
//   2) ВидПроверок = Новый Массив;
//      ВидПроверок.Добавить("ЗакрытиеМесяца");
//      ВидПроверок.Добавить(Организация);
//      ВидПроверок.Добавить(МесяцЗакрытия);
//      Результат = ПодробнаяИнформацияПоВидамПроверок(ВидПроверок);
//
Функция ПодробнаяИнформацияПоВидамПроверки(ВидПроверок, ПоискПоТочномуСоответствию = Истина) Экспорт
	
	ИмяПроцедуры = "КонтрольВеденияУчета.ПодробнаяИнформацияПоВидамПроверок";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ВидПроверок", ВидПроверок, КонтрольВеденияУчетаСлужебный.ОписаниеТипаВидПроверки());
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ПоискПоТочномуСоответствию", ПоискПоТочномуСоответствию, Тип("Булево"));
	
	ПодробнаяИнформация = Новый ТаблицаЗначений;
	МассивВидовПроверок = Новый Массив;
	
	Если ТипЗнч(ВидПроверок) = Тип("СправочникСсылка.ВидыПроверок") Тогда
		МассивВидовПроверок.Добавить(ВидПроверок);
	Иначе
		МассивВидовПроверок = КонтрольВеденияУчетаСлужебный.ПолучитьВидыПроверок(ВидПроверок, ПоискПоТочномуСоответствию);
	КонецЕсли;
	
	Если МассивВидовПроверок.Количество() = 0 Тогда
		Возврат ПодробнаяИнформация;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РезультатыПроверкиУчета.ПроблемныйОбъект КАК ПроблемныйОбъект,
	|	РезультатыПроверкиУчета.ВажностьПроблемы КАК ВажностьПроблемы,
	|	РезультатыПроверкиУчета.ПравилоПроверки КАК ПравилоПроверки,
	|	РезультатыПроверкиУчета.ВидПроверки КАК ВидПроверки
	|ИЗ
	|	РегистрСведений.РезультатыПроверкиУчета КАК РезультатыПроверкиУчета
	|ГДЕ
	|	НЕ РезультатыПроверкиУчета.ИгнорироватьПроблему
	|	И РезультатыПроверкиУчета.ВидПроверки В (&МассивВидовПроверок)");
	
	Запрос.УстановитьПараметр("МассивВидовПроверок", МассивВидовПроверок);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ПодробнаяИнформация = Результат.Выгрузить();
	КонецЕсли;
	
	Возврат ПодробнаяИнформация;
	
КонецФункции

// Устарела: Следует использовать функцию СводнаяИнформацияПоВидамПроверок.
// Возвращает сводку по количеству выявленных проблем указанного вида проверки.
//
// Параметры:
//   ВидПроверок                - СправочникСсылка.ВидыПроверок - ссылка на вид проверки.
//                              - Строка - строковый идентификатор вида проверки Свойство1.
//                              - Массив - строковые идентификаторы вида проверки Свойство1...СвойствоN.
//   ПоискПоТочномуСоответствию - Булево - Регулирует возможности точности. Если Истина, то поиск ведется
//                                по переданным свойствам на равенство, остальные свойства должны быть равны
//                                Неопределено (табличная часть дополнительных свойств должна быть пуста).
//                                Если Ложь, то значения остальных свойств могут быть произвольными, главное
//                                чтобы соответствующие свойства были равны свойствам структуры. По умолчанию Истина.
//
// Возвращаемое значение:
//  Структура - сводка:
//    * Количество - Число - общее количество найденных проблем.
//    * ЕстьОшибки - Булево - признак того, имеются ли ошибки среди найденных проблем (с важностью "Ошибка").
//
// Пример:
//   1) Результат = СводнаяИнформацияПоВидамПроверок("СистемныеПроверки");
//   2) ВидПроверок = Новый Массив;
//      ВидПроверок.Добавить("ЗакрытиеМесяца");
//      ВидПроверок.Добавить(Организация);
//      ВидПроверок.Добавить(МесяцЗакрытия);
//      Результат = СводнаяИнформацияПоВидамПроверок(ВидПроверок);
//
Функция СводнаяИнформацияПоВидамПроверки(ВидПроверок, ПоискПоТочномуСоответствию = Истина) Экспорт
	
	ИмяПроцедуры = "КонтрольВеденияУчета.СводнаяИнформацияПоВидамПроверок";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ВидПроверок", ВидПроверок, КонтрольВеденияУчетаСлужебный.ОписаниеТипаВидПроверки());
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ПоискПоТочномуСоответствию", ПоискПоТочномуСоответствию, Тип("Булево"));
	
	СводнаяИнформация = Новый Структура;
	СводнаяИнформация.Вставить("Количество", 0);
	СводнаяИнформация.Вставить("ЕстьОшибки", Ложь);
	
	МассивВидовПроверок = Новый Массив;
	Если ТипЗнч(ВидПроверок) = Тип("СправочникСсылка.ВидыПроверок") Тогда
		МассивВидовПроверок.Добавить(ВидПроверок);
	Иначе
		МассивВидовПроверок = КонтрольВеденияУчетаСлужебный.ПолучитьВидыПроверок(ВидПроверок, ПоискПоТочномуСоответствию);
		Если МассивВидовПроверок.Количество() = 0 Тогда
			Возврат СводнаяИнформация;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(*) КАК Количество,
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|				КОГДА РезультатыПроверкиУчета.ВажностьПроблемы = ЗНАЧЕНИЕ(Перечисление.ВажностьПроблемыУчета.Ошибка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ), ЛОЖЬ) КАК ЕстьОшибки
	|ИЗ
	|	РегистрСведений.РезультатыПроверкиУчета КАК РезультатыПроверкиУчета
	|ГДЕ
	|	НЕ РезультатыПроверкиУчета.ИгнорироватьПроблему
	|	И РезультатыПроверкиУчета.ВидПроверки В (&МассивВидовПроверок)");
	
	Запрос.УстановитьПараметр("МассивВидовПроверок", МассивВидовПроверок);
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	ЗаполнитьЗначенияСвойств(СводнаяИнформация, Результат);
	
	Возврат СводнаяИнформация;
	
КонецФункции

#КонецОбласти

#КонецОбласти