////////////////////////////////////////////////////////////////////////////////
// Подсистема "Валюты"
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Добавляет в справочник валют валюты из классификатора.
//
// Параметры:
//   Коды - Массив - цифровые коды добавляемых валют.
//
// Возвращаемое значение:
//   Массив, СправочникСсылка.Валюты - ссылки созданных валют.
//
Функция ДобавитьВалютыПоКоду(Знач Коды) Экспорт
	Перем КлассификаторXML, КлассификаторТаблица, ЗаписьОКВ, НоваяСтрока, Результат;
	КлассификаторXML = Справочники.Валюты.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст();
	
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	Результат = Новый Массив();
	
	Для каждого Код Из Коды Цикл
		ЗаписьОКВ = КлассификаторТаблица.Найти(Код, "Code"); 
		Если ЗаписьОКВ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВалютаСсылка = Справочники.Валюты.НайтиПоКоду(ЗаписьОКВ.Code);
		Если ВалютаСсылка.Пустая() Тогда
			НоваяСтрока 						  = Справочники.Валюты.СоздатьЭлемент();
			НоваяСтрока.Код         			  = ЗаписьОКВ.Code;
			НоваяСтрока.Наименование        	  = ЗаписьОКВ.CodeSymbol;
			НоваяСтрока.НаименованиеПолное        = ЗаписьОКВ.Name;
			Если ЗаписьОКВ.RBCLoading Тогда
				НоваяСтрока.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета;
			Иначе
				НоваяСтрока.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
			КонецЕсли;
			НоваяСтрока.ПараметрыПрописиНаРусском = ЗаписьОКВ.NumerationItemOptions;
			НоваяСтрока.Записать();
			Результат.Добавить(НоваяСтрока.Ссылка);
		Иначе
			Результат.Добавить(ВалютаСсылка);
		КонецЕсли
	КонецЦикла; 
	
	Возврат	Результат;
	
КонецФункции

// Возвращает курс валюты на дату.
//
// Параметры:
//   Валюта    - СправочникСсылка.Валюты - Валюта, для которой получается курс.
//   ДатаКурса - Дата - Дата, на которую получается курс.
//
// Возвращаемое значение: 
//   Структура - Параметры курса.
//       * Курс      - Число - Курс валюты на указанную дату.
//       * Кратность - Число - Кратность валюты на указанную дату.
//       * Валюта    - СправочникСсылка.Валюты - Ссылка валюты.
//       * ДатаКурса - Дата - Дата получения курса.
//
Функция ПолучитьКурсВалюты(Валюта, ДатаКурса) Экспорт
	
	Результат = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Валюта));
	
	Результат.Вставить("Валюта",    Валюта);
	Результат.Вставить("ДатаКурса", ДатаКурса);
	
	Возврат Результат;
	
КонецФункции

// Формирует представление суммы прописью в указанной валюте.
//
// Параметры:
//   СуммаЧислом - Число - сумма, которую надо представить прописью.
//   Валюта - СправочникСсылка.Валюты - валюта, в которой нужно представить сумму.
//   ВыводитьСуммуБезКопеек - Булево - признак представления суммы без копеек.
//
// Возвращаемое значение:
//   Строка - сумма прописью.
//
Функция СформироватьСуммуПрописью(СуммаЧислом, Валюта, ВыводитьСуммуБезКопеек = Ложь) Экспорт
	
	Сумма             = ?(СуммаЧислом < 0, -СуммаЧислом, СуммаЧислом);
	ПараметрыПредмета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Валюта, "ПараметрыПрописиНаРусском");
	
	Результат = ЧислоПрописью(Сумма, "Л=ru_RU;ДП=Ложь", ПараметрыПредмета.ПараметрыПрописиНаРусском);
	
	Если ВыводитьСуммуБезКопеек И Цел(Сумма) = Сумма Тогда
		Результат = Лев(Результат, СтрНайти(Результат, "0") - 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Пересчитывает сумму из одной валюты в другую.
//
// Параметры:
//  Сумма          - Число - сумма, которую необходимо пересчитать;
//  ИсходнаяВалюта - СправочникСсылка.Валюты - пересчитываемая валюта;
//  НоваяВалюта    - СправочникСсылка.Валюты - валюта, в которую необходимо пересчитать;
//  Дата           - Дата - дата курсов валют.
//
// Возвращаемое значение:
//  Число - пересчитанная сумма.
//
Функция ПересчитатьВВалюту(Сумма, ИсходнаяВалюта, НоваяВалюта, Дата) Экспорт
	
	Возврат РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(Сумма,
		ПолучитьКурсВалюты(ИсходнаяВалюта, Дата),
		ПолучитьКурсВалюты(НоваяВалюта, Дата));
		
КонецФункции

// Загружает курсы валют на текущую дату.
//
// Параметры:
//  ПараметрыЗагрузки - Структура - детали загрузки:
//   * НачалоПериода - Дата - начало периода загрузки;
//   * КонецПериода - Дата - конец периода загрузки;
//   * СписокВалют - ТаблицаЗначений - загружаемые валюты:
//     ** Валюта - СправочникСсылка.Валюты;
//     ** КодВалюты - Строка.
//  АдресРезультата - Строка - адрес во временном хранилище для помещения результатов загрузки.
//
Процедура ЗагрузитьАктуальныйКурс(ПараметрыЗагрузки = Неопределено, АдресРезультата = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗагрузкаКурсовВалют);
	
	ИмяСобытия = НСтр("ru = 'Валюты.Загрузка курсов валют'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начата регламентная загрузка курсов валют'"));
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	СостояниеЗагрузки = Неопределено;
	ПриЗагрузкеВозниклиОшибки = Ложь;
	
	Если ПараметрыЗагрузки = Неопределено Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	КурсыВалют.Валюта КАК Валюта,
		|	КурсыВалют.Валюта.Код КАК КодВалюты,
		|	МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурса
		|ИЗ
		|	РегистрСведений.КурсыВалют КАК КурсыВалют
		|ГДЕ
		|	КурсыВалют.Валюта.СпособУстановкиКурса = ЗНАЧЕНИЕ(Перечисление.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета)
		|	И НЕ КурсыВалют.Валюта.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	КурсыВалют.Валюта,
		|	КурсыВалют.Валюта.Код";
		Запрос = Новый Запрос(ТекстЗапроса);
		Выборка = Запрос.Выполнить().Выбрать();
		
		КонецПериода = ТекущаяДата;
		Пока Выборка.Следующий() Цикл
			НачалоПериода = ?(Выборка.ДатаКурса = '198001010000', НачалоГода(ДобавитьМесяц(ТекущаяДата, -12)), Выборка.ДатаКурса + 60*60*24);
			СписокВалют = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка);
			ЗагрузитьКурсыВалютПоПараметрам(СписокВалют, НачалоПериода, КонецПериода, ПриЗагрузкеВозниклиОшибки);
		КонецЦикла;
	Иначе
		Результат = ЗагрузитьКурсыВалютПоПараметрам(ПараметрыЗагрузки.СписокВалют,
			ПараметрыЗагрузки.НачалоПериода, ПараметрыЗагрузки.КонецПериода, ПриЗагрузкеВозниклиОшибки);
	КонецЕсли;
		
	Если АдресРезультата <> Неопределено Тогда
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	КонецЕсли;

	Если ПриЗагрузкеВозниклиОшибки Тогда
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,
			, 
			,
			НСтр("ru = 'Во время регламентного задания загрузки курсов валют возникли ошибки'"));
		ВызватьИсключение НСтр("ru = 'Загрузка курсов не выполнена. Подробности см. в журнале регистрации.'");
	Иначе
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru = 'Завершена регламентная загрузка курсов валют.'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// КЛИЕНТСКИЕ ОБРАБОТЧИКИ.
	
	КлиентскиеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПослеНачалаРаботыСистемы"].Добавить(
		"РаботаСКурсамиВалютКлиент");
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"РаботаСКурсамиВалют");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииИсключенийПоискаСсылок"].Добавить(
		"РаботаСКурсамиВалют");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентаПриЗапуске"].Добавить(
		"РаботаСКурсамиВалют");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.ТекущиеДела\ПриЗаполненииСпискаТекущихДел"].Добавить(
			"РаботаСКурсамиВалют");
	КонецЕсли;
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам"].Добавить(
		"РаботаСКурсамиВалют");
	
КонецПроцедуры

// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - таблица значений с колонками:
//    * Идентификатор - Строка - внутренний идентификатор дела, используемый механизмом "Текущие дела".
//    * ЕстьДела      - Булево - если Истина, дело выводится в списке текущих дел пользователя.
//    * Важное        - Булево - если Истина, дело будет выделено красным цветом.
//    * Представление - Строка - представление дела, выводимое пользователю.
//    * Количество    - Число  - количественный показатель дела, выводится в строке заголовка дела.
//    * Форма         - Строка - полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                               дела на панели "Текущие дела".
//    * ПараметрыФормы- Структура - параметры, с которыми нужно открывать форму показателя.
//    * Владелец      - Строка, объект метаданных - строковый идентификатор дела, которое будет владельцем для текущего
//                      или объект метаданных подсистема.
//    * Подсказка     - Строка - текст подсказки.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() // В модели сервиса обновляется автоматически.
		Или ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто()
		Или Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.КурсыВалют)
		Или МодульТекущиеДелаСервер.ДелоОтключено("КлассификаторВалют") Тогда
		Возврат;
	КонецЕсли;
	
	КурсыАктуальны = КурсыАктуальны();
	
	// Процедура вызывается только при наличии подсистемы "Текущие дела", поэтому здесь
	// не делается проверка существования подсистемы.
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(Метаданные.Справочники.Валюты.ПолноеИмя());
	
	Для Каждого Раздел Из Разделы Цикл
		
		ИдентификаторВалюты = "КлассификаторВалют" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "");
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИдентификаторВалюты;
		Дело.ЕстьДела       = Не КурсыАктуальны;
		Дело.Представление  = НСтр("ru = 'Курсы валют устарели'");
		Дело.Важное         = Истина;
		Дело.Форма          = "Обработка.ЗагрузкаКурсовВалют.Форма";
		Дело.ПараметрыФормы = Новый Структура("ОткрытиеИзСписка", Истина);
		Дело.Владелец       = Раздел;
		
	КонецЦикла;
	
КонецПроцедуры

// Определить список справочников, доступных для загрузки с помощью подсистемы "Загрузка данных из файла".
//
// Параметры:
//  Обработчики - ТаблицаЗначений - список справочников, в которые возможна загрузка данных.
//      * ПолноеИмя          - Строка - полное имя справочника (как в метаданных).
//      * Представление      - Строка - представление справочника в списке выбора.
//      * ПрикладнаяЗагрузка - Булево - если Истина, значит справочник использует собственный алгоритм загрузки и
//                                      в модуле менеджера справочника определены функции.
//
Процедура ПриОпределенииСправочниковДляЗагрузкиДанных(ЗагружаемыеСправочники) Экспорт
	
	// Загрузка в классификатор валюты запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.Валюты.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда 
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

// Определить объекты метаданных, в модулях менеджеров которых ограничивается возможность 
// редактирования реквизитов при групповом изменении.
//
// Параметры:
//   Объекты - Соответствие - в качестве ключа указать полное имя объекта метаданных,
//                            подключенного к подсистеме "Групповое изменение объектов". 
//                            Дополнительно в значении могут быть перечислены имена экспортных функций:
//                            "РеквизитыНеРедактируемыеВГрупповойОбработке",
//                            "РеквизитыРедактируемыеВГрупповойОбработке".
//                            Каждое имя должно начинаться с новой строки.
//                            Если указана пустая строка, значит в модуле менеджера определены обе функции.
//
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	Объекты.Вставить(Метаданные.Справочники.Валюты.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в эту подсистему.

// См. описание одноименной процедуры в общем модуле РегламентныеЗаданияПереопределяемый.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Зависимости) Экспорт
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ЗагрузкаКурсовВалют;
	Зависимость.ДоступноВМоделиСервиса = Ложь;
	Зависимость.ДоступноВАвтономномРабочемМесте = Ложь;
КонецПроцедуры

// См. одноименную процедуру в общем модуле ПользователиПереопределяемый.
Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	
	// СовместноДляПользователейИВнешнихПользователей.
	НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Добавить(
		Метаданные.Роли.ЧтениеКурсовВалют.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики служебных событий подсистем БСП.

// Заполняет параметры, которые используется клиентским кодом на запуске конфигурации.
//
// Параметры:
//   Параметры - Структура - Параметры запуска.
//
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Или ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		КурсыОбновляютсяОтветственными = Ложь; // В модели сервиса обновляются автоматически.
	ИначеЕсли НЕ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.КурсыВалют) Тогда
		КурсыОбновляютсяОтветственными = Ложь; // Пользователь не может обновлять курсы валют.
	Иначе
		КурсыОбновляютсяОтветственными = КурсыЗагружаютсяИзИнтернета(); // Есть валюты, для которых можно загружать курсы.
	КонецЕсли;
	
	ВключитьОповещение = Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела");
	РаботаСКурсамиВалютПереопределяемый.ПриОпределенииНеобходимостиПоказаПредупрежденияОбУстаревшихКурсахВалют(ВключитьОповещение);
	
	Параметры.Вставить("Валюты", Новый ФиксированнаяСтруктура("КурсыОбновляютсяОтветственными", (КурсыОбновляютсяОтветственными И ВключитьОповещение)));
	
КонецПроцедуры

// Заполняет массив списком имен объектов метаданных, данные которых могут содержать ссылки на различные объекты
// метаданных, но при этом эти ссылки не должны учитываться в бизнес-логике приложения.
//
// Параметры:
//  Массив - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Процедура ПриДобавленииИсключенийПоискаСсылок(Массив) Экспорт
	
	Массив.Добавить(Метаданные.РегистрыСведений.КурсыВалют.ПолноеИмя());
	
КонецПроцедуры

// Заполняет перечень запросов внешних разрешений, которые обязательно должны быть предоставлены
// при создании информационной базы или обновлении программы.
//
// Параметры:
//  ЗапросыРазрешений - Массив - список значений, возвращенных функцией.
//                      РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов().
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросыРазрешений.Добавить(
		РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(Разрешения()));
	
КонецПроцедуры

// Возвращает список разрешений для загрузки курсов валют с сайта РБК.
//
// Возвращаемое значение:
//  Массив.
//
Функция Разрешения()
	
	Разрешения = Новый Массив;
	
	Протокол = "HTTP";
	Адрес = "cbrates.rbc.ru";
	Порт = Неопределено;
	Описание = НСтр("ru = 'Загрузка курсов валют из Интернета.'");
	Разрешения.Добавить( 
		РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(Протокол, Адрес, Порт, Описание));
	
	Протокол = "HTTPS";
	Адрес = "currencyrates.1c.ru";
	Порт = Неопределено;
	Описание = НСтр("ru = 'Загрузка курсов валют из Интернета.'");
	Разрешения.Добавить( 
		РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(Протокол, Адрес, Порт, Описание));
		
	Возврат Разрешения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции.

// Проверяет наличие установленного курса и кратности валюты на 1 января 1980 года.
// В случае отсутствия устанавливает курс и кратность равными единице.
//
// Параметры:
//  Валюта - ссылка на элемент справочника Валют.
//
Процедура ПроверитьКорректностьКурсаНа01_01_1980(Валюта) Экспорт
	
	ДатаКурса = Дата("19800101");
	СтруктураКурса = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Валюта));
	
	Если (СтруктураКурса.Курс = 0) Или (СтруктураКурса.Кратность = 0) Тогда
		НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Валюта.Установить(Валюта);
		НаборЗаписей.Отбор.Период.Установить(ДатаКурса);
		Запись = НаборЗаписей.Добавить();
		Запись.Валюта = Валюта;
		Запись.Период = ДатаКурса;
		Запись.Курс = 1;
		Запись.Кратность = 1;
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив валют, курсы которых загружаются с сайта РБК.
//
Функция ЗагружаемыеВалюты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.СпособУстановкиКурса = ЗНАЧЕНИЕ(Перечисление.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета)
	|	И НЕ Валюты.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Валюты.НаименованиеПолное";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает информацию о курсе валюты на основе ссылки на валюту.
// Данные возвращаются в виде структуры.
//
// Параметры:
// ВыбраннаяВалюта - Справочник.Валюты / Ссылка - ссылка на валюту, информацию
//                  о курсе которой необходимо получить.
//
// Возвращаемое значение:
// ДанныеКурса   - структура, содержащая информацию о последней доступной 
//                 записи курса.
//
Функция ЗаполнитьДанныеКурсаДляВалюты(ВыбраннаяВалюта) Экспорт
	
	ДанныеКурса = Новый Структура("ДатаКурса, Курс, Кратность");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РегКурсы.Период, РегКурсы.Курс, РегКурсы.Кратность
	              | ИЗ РегистрСведений.КурсыВалют.СрезПоследних(&ОкончаниеПериодаЗагрузки, Валюта = &ВыбраннаяВалюта) КАК РегКурсы";
	Запрос.УстановитьПараметр("ВыбраннаяВалюта", ВыбраннаяВалюта);
	Запрос.УстановитьПараметр("ОкончаниеПериодаЗагрузки", ТекущаяДатаСеанса());
	
	ВыборкаКурс = Запрос.Выполнить().Выбрать();
	ВыборкаКурс.Следующий();
	
	ДанныеКурса.ДатаКурса = ВыборкаКурс.Период;
	ДанныеКурса.Курс      = ВыборкаКурс.Курс;
	ДанныеКурса.Кратность = ВыборкаКурс.Кратность;
	
	Возврат ДанныеКурса;
	
КонецФункции

// Возвращает таблицу значений - валюты, зависящие от переданной
// в качестве параметра.
// Возвращаемое значение
// ТаблицаЗначений
// колонка "Ссылка" - СправочникСсылка.Валюты
// колонка "Наценка" - число.
//
Функция СписокЗависимыхВалют(ВалютаБазовая, ДополнительныеСвойства = Неопределено) Экспорт
	
	Кэшировать = (ТипЗнч(ДополнительныеСвойства) = Тип("Структура"));
	
	Если Кэшировать Тогда
		
		ЗависимыеВалюты = ДополнительныеСвойства.ЗависимыеВалюты.Получить(ВалютаБазовая);
		
		Если ТипЗнч(ЗависимыеВалюты) = Тип("ТаблицаЗначений") Тогда
			Возврат ЗависимыеВалюты;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпрВалюты.Ссылка,
	|	СпрВалюты.Наценка,
	|	СпрВалюты.СпособУстановкиКурса,
	|	СпрВалюты.ФормулаРасчетаКурса
	|ИЗ
	|	Справочник.Валюты КАК СпрВалюты
	|ГДЕ
	|	СпрВалюты.ОсновнаяВалюта = &ВалютаБазовая
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СпрВалюты.Ссылка,
	|	СпрВалюты.Наценка,
	|	СпрВалюты.СпособУстановкиКурса,
	|	СпрВалюты.ФормулаРасчетаКурса
	|ИЗ
	|	Справочник.Валюты КАК СпрВалюты
	|ГДЕ
	|	СпрВалюты.ФормулаРасчетаКурса ПОДОБНО &СимвольныйКод";
	
	Запрос.УстановитьПараметр("ВалютаБазовая", ВалютаБазовая);
	Запрос.УстановитьПараметр("СимвольныйКод", "%" + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВалютаБазовая, "Наименование") + "%");
	
	ЗависимыеВалюты = Запрос.Выполнить().Выгрузить();
	
	Если Кэшировать Тогда
		
		ДополнительныеСвойства.ЗависимыеВалюты.Вставить(ВалютаБазовая, ЗависимыеВалюты);
		
	КонецЕсли;
	
	Возврат ЗависимыеВалюты;
	
КонецФункции

Процедура ОбновитьКурсВалюты(Параметры, АдресРезультата) Экспорт
	
	ПодчиненнаяВалюта    = Параметры.ПодчиненнаяВалюта;
	СпособУстановкиКурса = Параметры.СпособУстановкиКурса;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Валюты");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ПодчиненнаяВалюта.Ссылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.НаценкаНаКурсДругойВалюты Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КурсыВалют.Период,
		|	КурсыВалют.Валюта,
		|	КурсыВалют.Курс,
		|	КурсыВалют.Кратность
		|ИЗ
		|	РегистрСведений.КурсыВалют КАК КурсыВалют
		|ГДЕ
		|	КурсыВалют.Валюта = &ВалютаИсточник";
		Запрос.УстановитьПараметр("ВалютаИсточник", ПодчиненнаяВалюта.ОсновнаяВалюта);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Валюта.Установить(ПодчиненнаяВалюта.Ссылка);
		
		Наценка = ПодчиненнаяВалюта.Наценка;
		
		Пока Выборка.Следующий() Цикл
			
			НоваяЗаписьНабораКурсов = НаборЗаписей.Добавить();
			НоваяЗаписьНабораКурсов.Валюта    = ПодчиненнаяВалюта.Ссылка;
			НоваяЗаписьНабораКурсов.Кратность = Выборка.Кратность;
			НоваяЗаписьНабораКурсов.Курс      = Выборка.Курс + Выборка.Курс * Наценка / 100;
			НоваяЗаписьНабораКурсов.Период    = Выборка.Период;
			
		КонецЦикла;
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьКонтрольПодчиненныхВалют");
		Если ПодчиненнаяВалюта.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
		КонецЕсли;

		НаборЗаписей.Записать();
		
	ИначеЕсли СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РасчетПоФормуле Тогда
		
		// Получить основные валюты для ПодчиненнаяВалюта.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Валюты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Валюты КАК Валюты
		|ГДЕ
		|	&ФормулаРасчетаКурса ПОДОБНО ""%"" + Валюты.Наименование + ""%""";
		
		Запрос.УстановитьПараметр("ФормулаРасчетаКурса", ПодчиненнаяВалюта.ФормулаРасчетаКурса);
		ОсновныеВалюты = Запрос.Выполнить().Выгрузить();
		
		Если ОсновныеВалюты.Количество() = 0 Тогда
			ТекстОшибки = НСтр("ru = 'В формуле должна быть использована хотя бы одна основная валюта.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.ФормулаРасчетаКурса");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ОбновленныеПериоды = Новый Соответствие; // Кэш для однократного пересчета курса за один и тот же период.
		// Перезаписать курсы основных валют для обновления курса валюты ПодчиненнаяВалюта.
		Для каждого ЗаписьОсновнойВалюты Из ОсновныеВалюты Цикл
			НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Валюта.Установить(ЗаписьОсновнойВалюты.Ссылка);
			НаборЗаписей.Прочитать();
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОбновитьКурсЗависимойВалюты", ПодчиненнаяВалюта.Ссылка);
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОбновленныеПериоды", ОбновленныеПериоды);
			
			Если ПодчиненнаяВалюта.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
				НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
			КонецЕсли;
			
			НаборЗаписей.Записать();
		КонецЦикла
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.9";
	Обработчик.Процедура = "РаботаСКурсамиВалют.ОбновитьФорматХраненияПрописиНаРусскомЯзыке";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.4.4";
	Обработчик.Процедура = "РаботаСКурсамиВалют.ОбновитьСведенияОВалюте937";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.3.10";
	Обработчик.Процедура = "РаботаСКурсамиВалют.ЗаполнитьСпособУстановкиКурсаВалют";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.4.10";
	Обработчик.Процедура = "Справочники.Валюты.ОтключитьЗагрузкуКурсаВалюты643ИзИнтернета";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dc79c561-8657-4852-bbc5-38ced6996fff");
	Обработчик.Комментарий = НСтр("ru = 'Отключает ошибочно включенную загрузку курсов валюты ""Российский рубль (643)"" из интернета.'");
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.Валюты.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ЧитаемыеОбъекты      = "Справочник.Валюты";
	Обработчик.ИзменяемыеОбъекты    = "Справочник.Валюты";
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.3.4.69";
		Обработчик.Процедура = "РаботаСКурсамиВалют.УстановитьРасписаниеРегламентногоЗадания";
		Обработчик.РежимВыполнения = "Оперативно";
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления формата хранения прописей при переходе на более новую версию БСП.
//
Процедура ОбновитьФорматХраненияПрописиНаРусскомЯзыке() Экспорт
	
	ВыборкаВалют = Справочники.Валюты.Выбрать();
	
	Пока ВыборкаВалют.Следующий() Цикл
		Объект = ВыборкаВалют.ПолучитьОбъект();
		СтрокаПараметров = СтрЗаменить(Объект.ПараметрыПрописиНаРусском, ",", Символы.ПС);
		Род1 = НРег(Лев(СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 4)), 1));
		Род2 = НРег(Лев(СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 8)), 1));
		Объект.ПараметрыПрописиНаРусском = 
					  СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 1)) + ", "
					+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 2)) + ", "
					+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 3)) + ", "
					+ Род1 + ", "
					+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 5)) + ", "
					+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 6)) + ", "
					+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 7)) + ", "
					+ Род2 + ", "
					+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 9));
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет сведения о валюте, согласно документу "Изменение 33/2012 ОКВ Общероссийский классификатор валют.
// ОК (МК (ИСО 4217) 003-97) 014-2000" (принято и введено в действие Приказом Росстандарта от 12.12.2012 N 1883-ст).
//
Процедура ОбновитьСведенияОВалюте937() Экспорт
	Валюта = Справочники.Валюты.НайтиПоКоду("937");
	Если Не Валюта.Пустая() Тогда
		Валюта = Валюта.ПолучитьОбъект();
		Валюта.Наименование = "VEF";
		Валюта.НаименованиеПолное = НСтр("ru = 'Боливар'");
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Валюта);
	КонецЕсли;
КонецПроцедуры

// Заполняет реквизит СпособУстановкиКурса у элементов справочника Валюты.
Процедура ЗаполнитьСпособУстановкиКурсаВалют() Экспорт
	Выборка = Справочники.Валюты.Выбрать();
	Пока Выборка.Следующий() Цикл
		Валюта = Выборка.Ссылка.ПолучитьОбъект();
		Если Валюта.ЗагружаетсяИзИнтернета Тогда
			Валюта.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета;
		ИначеЕсли Не Валюта.ОсновнаяВалюта.Пустая() Тогда
			Валюта.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.НаценкаНаКурсДругойВалюты;
		Иначе
			Валюта.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
		КонецЕсли;
		Валюта.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьРасписаниеРегламентногоЗадания() Экспорт
	
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	Задержка = ГенераторСлучайныхЧисел.СлучайноеЧисло(0, 21600); // С 0 до 6 часов утра.
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораДней = 1;
	Расписание.ПериодНедель = 1;
	Расписание.ВремяНачала = '00010101000000' + Задержка;
	
	УстановитьПараметрРегламентногоЗадания("Расписание", Расписание);
КонецПроцедуры

Процедура УстановитьПараметрРегламентногоЗадания(ИмяПараметра, ЗначениеПараметра)
	РегламентноеЗадание = Метаданные.РегламентныеЗадания.ЗагрузкаКурсовВалют;
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", РегламентноеЗадание);
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
	Если СписокЗаданий.Количество() = 0 Тогда
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить(ИмяПараметра, ЗначениеПараметра);
		ПараметрыЗадания.Вставить("Метаданные", РегламентноеЗадание);
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		ПараметрыЗадания = Новый Структура(ИмяПараметра, ЗначениеПараметра);
		Для Каждого Задание Из СписокЗаданий Цикл
			РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ПараметрыАутентификацииНаСайте()
	Результат = Новый Структура;
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		ДанныеАутентификации = МодульИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		Если ДанныеАутентификации <> Неопределено Тогда
			Результат.Вставить("Пользователь", ДанныеАутентификации.Логин);
			Результат.Вставить("Пароль", ДанныеАутентификации.Пароль);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление курсов валют

// Проверяет актуальность курсов всех валют.
//
Функция КурсыАктуальны() Экспорт
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втВалюты
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.СпособУстановкиКурса = ЗНАЧЕНИЕ(Перечисление.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета)
	|	И Валюты.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	втВалюты КАК Валюты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО Валюты.Ссылка = КурсыВалют.Валюта
	|			И (КурсыВалют.Период = &ТекущаяДата)
	|ГДЕ
	|	КурсыВалют.Валюта ЕСТЬ NULL ";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Пустой();
КонецФункции

// Определяет есть ли хоть одна валюта, курс которой может загружаться из сети Интернет.
//
Функция КурсыЗагружаютсяИзИнтернета()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.СпособУстановкиКурса = ЗНАЧЕНИЕ(Перечисление.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета)
	|	И Валюты.ПометкаУдаления = ЛОЖЬ";
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

// Процедура для загрузки курсов валют по определенному периоду.
//
// Параметры:
// Валюты		- Любая коллекция - со следующими полями:
//					КодВалюты - числовой код валюты.
//					Валюта - ссылка на валюту.
// НачалоПериодаЗагрузки	- Дата - начало периода загрузки курсов.
// ОкончаниеПериодаЗагрузки	- Дата - окончание периода загрузки курсов.
//
// Возвращаемое значение:
// Массив состояния загрузки  - каждый элемент - структура с полями.
//		Валюта - загружаемая валюта.
//		СтатусОперации - завершилась ли загрузка успешно.
//		Сообщение - пояснение о загрузке (текст сообщения об ошибке или поясняющее сообщение).
//
Функция ЗагрузитьКурсыВалютПоПараметрам(Знач Валюты, Знач НачалоПериодаЗагрузки, Знач ОкончаниеПериодаЗагрузки, ПриЗагрузкеВозниклиОшибки = Ложь)
	
	// БПКР
	Возврат ЗагрузитьКурсыВалютПоПараметрамНБК(Валюты, НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки,	ПриЗагрузкеВозниклиОшибки);
	// БПКР

	СостояниеЗагрузки = Новый Массив;
	ПриЗагрузкеВозниклиОшибки = Ложь;
	
	ПараметрыПолучения = Неопределено;
	ИмяФайлаДневногоКурса = Формат(ОкончаниеПериодаЗагрузки, "ДФ=/yyyy/MM/dd");
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользоватьАльтернативныйСервер = Константы.ИспользоватьАльтернативныйСерверДляЗагрузкиКурсовВалют.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ИспользоватьАльтернативныйСервер Тогда
		СерверИсточник = "http://cbrates.rbc.ru";
		Если НачалоПериодаЗагрузки = ОкончаниеПериодаЗагрузки Тогда
			ШаблонИмениФайла = СерверИсточник + "/tsv/%1" + ИмяФайлаДневногоКурса + ".tsv";
		Иначе
			ШаблонИмениФайла = СерверИсточник + "/tsv/cb/%1.tsv";
		КонецЕсли;
	Иначе
		СерверИсточник = "https://currencyrates.1c.ru/exchangerate/v1";
		Если НачалоПериодаЗагрузки = ОкончаниеПериодаЗагрузки Тогда
			ШаблонИмениФайла = СерверИсточник + "/%1" + ИмяФайлаДневногоКурса + ".tsv";
		Иначе
			ШаблонИмениФайла = СерверИсточник + "/%1.tsv";
		КонецЕсли;
		
		ПараметрыПолучения = ПараметрыАутентификацииНаСайте();
	КонецЕсли;
	
	Для Каждого Валюта Из Валюты Цикл
		ФайлНаВебСервере = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла, Валюта.КодВалюты);
		Результат = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(ФайлНаВебСервере, ПараметрыПолучения);
		
		Если Результат.Статус Тогда
			ПоясняющееСообщение = ЗагрузитьКурсВалютыИзФайла(Валюта.Валюта, Результат.Путь, НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки) + Символы.ПС;
			УдалитьФайлы(Результат.Путь);
			СтатусОперации = ПустаяСтрока(ПоясняющееСообщение);
		Иначе
			ПоясняющееСообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно получить файл данных с курсами валюты (%1 - %2):
					|%3
					|Возможно, нет доступа к веб сайту с курсами валют, либо указана несуществующая валюта.'"),
				Валюта.КодВалюты,
				Валюта.Валюта,
				Результат.СообщениеОбОшибке);
			СтатусОперации = Ложь;
			ПриЗагрузкеВозниклиОшибки = Истина;
		КонецЕсли;
		
		СостояниеЗагрузки.Добавить(Новый Структура("Валюта,СтатусОперации,Сообщение", Валюта.Валюта, СтатусОперации, ПоясняющееСообщение));
		
	КонецЦикла;
	
	Возврат СостояниеЗагрузки;
	
КонецФункции

// Загружает информацию о курсе валюты Валюта из файла ПутьКФайлу в регистр
// сведений курсов валют. При этом файл с курсами разбирается, и записываются
// только те данные, которые удовлетворяют периоду (НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки).
//
Функция ЗагрузитьКурсВалютыИзФайла(Знач Валюта, Знач ПутьКФайлу, Знач НачалоПериодаЗагрузки, Знач ОкончаниеПериодаЗагрузки)
	
	СтатусЗагрузки = 1;
	
	ЧислоЗагружаемыхДнейВсего = 1 + (ОкончаниеПериодаЗагрузки - НачалоПериодаЗагрузки) / ( 24 * 60 * 60);
	
	ЧислоЗагруженныхДней = 0;
	
	Если ЭтоАдресВременногоХранилища(ПутьКФайлу) Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла();
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПутьКФайлу);
		ДвоичныеДанные.Записать(ИмяФайла);
	Иначе
		ИмяФайла = ПутьКФайлу;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент();
	
	
	Текст.Прочитать(ИмяФайла, КодировкаТекста.ANSI);
	
	ДатаЗапрета = Неопределено;
	Для НомерСтроки = 1 По Текст.КоличествоСтрок() Цикл
		
		Стр = Текст.ПолучитьСтроку(НомерСтроки);
		Если (Стр = "") ИЛИ (СтрНайти(Стр, Символы.Таб) = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НачалоПериодаЗагрузки = ОкончаниеПериодаЗагрузки Тогда
			ДатаКурса = ОкончаниеПериодаЗагрузки;
		Иначе
			ДатаКурсаСтр = ВыделитьПодСтроку(Стр);
			ДатаКурса = Дата(Лев(ДатаКурсаСтр,4), Сред(ДатаКурсаСтр,5,2), Сред(ДатаКурсаСтр,7,2));
		КонецЕсли;
		
		Кратность = Число(ВыделитьПодСтроку(Стр));
		Курс = Число(ВыделитьПодСтроку(Стр));
		
		Если ДатаКурса > ОкончаниеПериодаЗагрузки Тогда
			Прервать;
		КонецЕсли;
		
		Если ДатаКурса < НачалоПериодаЗагрузки Тогда 
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Валюта.Установить(Валюта);
		НаборЗаписей.Отбор.Период.Установить(ДатаКурса);
		Запись = НаборЗаписей.Добавить();
		Запись.Валюта = Валюта;
		Запись.Период = ДатаКурса;
		Запись.Курс = Курс;
		Запись.Кратность = Кратность;
		
		Записывать = Истина;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения") Тогда
			МодульДатыЗапретаИзмененияСлужебный = ОбщегоНазначения.ОбщийМодуль("ДатыЗапретаИзмененияСлужебный");
			Если МодульДатыЗапретаИзмененияСлужебный.ЗапретИзмененияПроверяется(Метаданные.РегистрыСведений.КурсыВалют) Тогда
				МодульДатыЗапретаИзменения = ОбщегоНазначения.ОбщийМодуль("ДатыЗапретаИзменения");
				Записывать = Не МодульДатыЗапретаИзменения.ИзменениеЗапрещено(НаборЗаписей);
				Если Не Записывать Тогда
					Если ДатаЗапрета = Неопределено Тогда
						ДатаЗапрета = ДатаКурса;
					Иначе
						ДатаЗапрета = Макс(ДатаЗапрета, ДатаКурса);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Записывать Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ЧислоЗагруженныхДней = ЧислоЗагруженныхДней + 1;
	КонецЦикла;
	
	Если ЭтоАдресВременногоХранилища(ПутьКФайлу) Тогда
		УдалитьФайлы(ИмяФайла);
		УдалитьИзВременногоХранилища(ПутьКФайлу);
	КонецЕсли;
	
	ПояснениеОЗагрузке = "";
	Если ЧислоЗагружаемыхДнейВсего <> ЧислоЗагруженныхДней Тогда
		Если ЧислоЗагруженныхДней = 0 Тогда
			ПояснениеОЗагрузке = НСтр("ru = 'Курсы валюты %1 (%2) не загружены. Нет данных.'");
		Иначе
			ПояснениеОЗагрузке = НСтр("ru = 'Загружены не все курсы по валюте %1 (%2).'");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПояснениеОЗагрузке) Тогда
		ПояснениеОЗагрузке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПояснениеОЗагрузке, Валюта.Наименование, Валюта.Код);
	КонецЕсли;
	
	Если ДатаЗапрета <> Неопределено Тогда
		ПояснениеОЗагрузке = ПояснениеОЗагрузке + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Загрузка курсов валюты %1(%2) ограничена датой запрета изменений %3.
			|Курсы запрещенного периода были пропущены при загрузке.'"), Валюта.Наименование, Валюта.Код, Формат(ДатаЗапрета, "ДЛФ=D"));
	КонецЕсли;
	
	ПояснениеОЗагрузке = СокрЛП(ПояснениеОЗагрузке);
	
	СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
	СписокОшибок = Новый Массив;
	Для Каждого СообщениеПользователю Из СообщенияПользователю Цикл
		СписокОшибок.Добавить(СообщениеПользователю.Текст);
	КонецЦикла;
	СписокОшибок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокОшибок);
	ПояснениеОЗагрузке = ПояснениеОЗагрузке + ?(ПустаяСтрока(ПояснениеОЗагрузке), "", Символы.ПС) + СтрСоединить(СписокОшибок, Символы.ПС);
	
	Возврат ПояснениеОЗагрузке;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции.

// Выделяет из переданной строки первое значение
//  до символа "TAB".
//
// Параметры: 
//  ИсходнаяСтрока - Строка - строка для разбора.
//
// Возвращаемое значение:
//  подстроку до символа "TAB"
//
Функция ВыделитьПодСтроку(ИсходнаяСтрока)
	
	Перем ПодСтрока;
	
	Поз = СтрНайти(ИсходнаяСтрока,Символы.Таб);
	Если Поз > 0 Тогда
		ПодСтрока = Лев(ИсходнаяСтрока,Поз-1);
		ИсходнаяСтрока = Сред(ИсходнаяСтрока,Поз + 1);
	Иначе
		ПодСтрока = ИсходнаяСтрока;
		ИсходнаяСтрока = "";
	КонецЕсли;
	
	Возврат ПодСтрока;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы.

// Обновляет связи между справочником валют и файлом поставляемых курсов
// в зависимости от способа установки курса валют.
//
// Параметры:
//   Валюта - СправочникОбъект.Валюты.
//
Функция ПриОбновленииКурсовВалютВМоделиСервиса(Валюта) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса") Тогда
		МодульКурсыВалютСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("КурсыВалютСлужебныйВМоделиСервиса");
		МодульКурсыВалютСлужебныйВМоделиСервиса.ЗапланироватьКопированиеКурсовВалюты(Валюта);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыЗагрузкиКурсовВалютССайтаНБКР

// Следует использовать Функцию ЗагрузитьКурсыВалютПоПараметрам.
//
Функция ЗагрузитьКурсыВалютПоПараметрамНБК(Валюты, НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки,	ПриЗагрузкеВозниклиОшибки)     	
	
	СостояниеЗагрузки = Новый Массив;
	
	ПриЗагрузкеВозниклиОшибки = Ложь;
	
	СерверИсточник = "www.nbkr.kg";
	
	//Если НачалоПериодаЗагрузки = ОкончаниеПериодаЗагрузки Тогда
	//	Адрес = "tsv/";
	//	ТМП   = Формат(ОкончаниеПериодаЗагрузки, "ДФ=/yyyy/MM/dd"); // Не локализуется - путь к файлу на сервере.
	//Иначе
	//	Адрес = "tsv/cb/";
	//	ТМП   = "";
	//КонецЕсли;
	//
	//Для Каждого Валюта Из Валюты Цикл
	//	ФайлНаВебСервере = "http://" + СерверИсточник + "/" + Адрес + Прав(Валюта.КодВалюты, 3) + ТМП + ".tsv";
	//	Результат = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(ФайлНаВебСервере);
	//	
	//	Если Результат.Статус Тогда
	//		ПоясняющееСообщение = ЗагрузитьКурсВалютыИзФайла(Валюта.Валюта, Результат.Путь, НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки) + Символы.ПС;
	//		УдалитьФайлы(Результат.Путь);
	//		СтатусОперации = ПустаяСтрока(ПоясняющееСообщение);
	//	Иначе
	//		ПоясняющееСообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//			НСтр("ru = 'Невозможно получить файл данных с курсами валюты (%1 - %2):
	//				|%3
	//				|Возможно, нет доступа к веб сайту с курсами валют, либо указана несуществующая валюта.'"),
	//			Валюта.КодВалюты,
	//			Валюта.Валюта,
	//			Результат.СообщениеОбОшибке);
	//		СтатусОперации = Ложь;
	//		ПриЗагрузкеВозниклиОшибки = Истина;
	//	КонецЕсли;
	//	
	//	СостояниеЗагрузки.Добавить(Новый Структура("Валюта,СтатусОперации,Сообщение", Валюта.Валюта, СтатусОперации, ПоясняющееСообщение));
	//	
	//КонецЦикла;
	
	// На сайте www.nbkr.kg для основных валют создаются отдельные файлы 
	// необходимо разделить Валюты на основные и все остальные. 
	МассивОсновныхВалют   = Новый Массив;  //USD, EUR, RUB, KZT
	МассивНеОсновныхВалют = Новый Массив; 	
	
	Для каждого Валюта Из Валюты Цикл
		Если Валюта.КодВалюты = "840"    // USD 
		    ИЛИ Валюта.КодВалюты = "978" // EUR
		    ИЛИ Валюта.КодВалюты = "643" // RUB
		    ИЛИ Валюта.КодВалюты = "398" // KZT
		Тогда
			МассивОсновныхВалют.Добавить(Валюта)
		Иначе
			МассивНеОсновныхВалют.Добавить(Валюта);
		КонецЕсли;
	КонецЦикла;
	
	// На сайте www.nbkr.kg выкладыются XML файлы с последними значениями курсов валют
	// необходимо определиться с выбором файлов для загрузки. 
	Если НачалоПериодаЗагрузки = НачалоДня(ОкончаниеПериодаЗагрузки) 
		И НачалоПериодаЗагрузки = НачалоДня(ТекущаяДата()) Тогда
		
		// Загрузка курсов валют из XML файла daily.xml
		Если МассивОсновныхВалют.Количество() > 0 Тогда			
			ЗагрузитьЕжедневныеКурсыОсновныхВалютИзXMLФайла(СерверИсточник, ОкончаниеПериодаЗагрузки, ПриЗагрузкеВозниклиОшибки, СостояниеЗагрузки);
		КонецЕсли;
		
		// Загрузка курсов валют из XML файла weekly.xml
		Если МассивНеОсновныхВалют.Количество() > 0 Тогда 			
			ЗагрузитьЕженедельныеКурсыНеОсновныхВалютИзXMLФайла(СерверИсточник, ОкончаниеПериодаЗагрузки, ПриЗагрузкеВозниклиОшибки, СостояниеЗагрузки);
		КонецЕсли;
	Иначе
		// Загрузка курсов валют из EXCEL файла dailyrus.xls
		Если МассивОсновныхВалют.Количество() > 0 Тогда 			 			
			ЗагрузитьЕжедневныеКурсыОсновныхВалютИзЭксельФайла(СерверИсточник, МассивОсновныхВалют, НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки, ПриЗагрузкеВозниклиОшибки, СостояниеЗагрузки);
		КонецЕсли;
		
		// Загрузка курсов валют из EXCEL файла allvalsrus.xls
		Если МассивНеОсновныхВалют.Количество() > 0 Тогда
			ЗагрузитьЕженедельныеКурсыНеОсновныхВалютИзЭксельФайла(СерверИсточник, МассивНеОсновныхВалют, НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки, ПриЗагрузкеВозниклиОшибки, СостояниеЗагрузки);
		КонецЕсли;
	КонецЕсли;     	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Если Результат.Статус Тогда
	//		#Если Клиент Тогда
	//			ДвоичныеДанные = Новый ДвоичныеДанные(Результат.Путь);
	//			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	//			ПоясняющееСообщение = РаботаСКурсамиВалютВызовСервера.ЗагрузитьКурсВалютыИзФайла(Валюта.Валюта, АдресВоВременномХранилище, НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки) + Символы.ПС;
	//		#Иначе
	//			ПоясняющееСообщение = ЗагрузитьКурсВалютыИзФайла(Валюта.Валюта, Результат.Путь, НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки) + Символы.ПС;
	//		#КонецЕсли
	//		УдалитьФайлы(Результат.Путь);
	//		СтатусОперации = ПустаяСтрока(ПоясняющееСообщение);
	//	Иначе
	//		ПоясняющееСообщение = СтрШаблон(
	//			НСтр("ru = 'Невозможно получить файл данных с курсами валюты (%1 - %2):
	//			|%3
	//			|Возможно, нет доступа к веб сайту с курсами валют, либо указана несуществующая валюта.'"),
	//			Валюта.КодВалюты,
	//			Валюта.Валюта,
	//			Результат.СообщениеОбОшибке);
	//		СтатусОперации = Ложь;
	//		ПриЗагрузкеВозниклиОшибки = Истина;
	//	КонецЕсли;
	//	
	//	СостояниеЗагрузки.Добавить(Новый Структура("Валюта,СтатусОперации,Сообщение", Валюта.Валюта, СтатусОперации, ПоясняющееСообщение));
	//	
	
	Возврат СостояниеЗагрузки;
	
КонецФункции

// Загрузка ежедневных курсов основных валют из XML файла daily.xml
// Пример ежедневного XML файла курсов основных валют с сайта НБКР >>
//------------------------------------------------------------------
//<CurrencyRates Name="Daily Exchange Rates" Date="13.01.2015">
//	<Currency ISOCode="USD">
//		<Nominal>1</Nominal>
//		<Value>59,2000</Value>
//	</Currency>
//	<Currency ISOCode="EUR">
//		<Nominal>1</Nominal>
//		<Value>69,9507</Value>
//	</Currency>
//	<Currency ISOCode="KZT">
//		<Nominal>1</Nominal>
//		<Value>0,3225</Value>
//	</Currency>
//	<Currency ISOCode="RUB">
//		<Nominal>1</Nominal>
//		<Value>0,9436</Value>
//	</Currency>
//</CurrencyRates>
//------------------------------------------------------------------
//-
Процедура ЗагрузитьЕжедневныеКурсыОсновныхВалютИзXMLФайла(СерверИсточник, ДатаКурса, ПриЗагрузкеВозниклиОшибки, СостояниеЗагрузки)
	
	РегистрКурсыВалют = РегистрыСведений.КурсыВалют;
	
	Адрес = "/XML/daily.xml"; 	
	
	ФайлНаВебСервере = СерверИсточник + Адрес;   
	
	#Если Клиент Тогда
		Результат = ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(ФайлНаВебСервере);
	#Иначе
		Результат = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(ФайлНаВебСервере);
	#КонецЕсли 
	
	Если НЕ Результат.Статус Тогда
		ПоясняющееСообщение = СтрШаблон(
				НСтр("ru = 'Невозможно получить файл данных с курсами валюты:
				|%1
				|Возможно, нет доступа к веб сайту с курсами валют, либо указана несуществующая валюта.'"),
				Результат.СообщениеОбОшибке);
		СтатусОперации = Ложь;
		ПриЗагрузкеВозниклиОшибки = Истина;
		
		СостояниеЗагрузки.Добавить(Новый Структура("Валюта,СтатусОперации,Сообщение","Основные валюты", СтатусОперации, ПоясняющееСообщение));
		Возврат;
	КонецЕсли;
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Результат.Путь);
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Имя = ЧтениеXML.Имя;								
			КонецЕсли;
			
			//Если на сайте НБКР не актуальные курсы на сегодня тогда "прерываем" чтение
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И Имя = "CurrencyRates" Тогда
				ДатаКурсовXML = ЧтениеXML.ПолучитьАтрибут("Date");
				Если Число(Сред(ДатаКурсовXML,1,2)) <> День(ДатаКурса) Тогда
					ДатаКурса = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаКурсовXML);
				КонецЕсли;         				
				
			//Валюта	
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И Имя = "Currency" Тогда 
				
				НаименованиеВалюты = ЧтениеXML.ПолучитьАтрибут("ISOCode");
				Валюта = Справочники.Валюты.НайтиПоНаименованию(НаименованиеВалюты);
				
				Если Валюта <> Справочники.Валюты.ПустаяСсылка() 
					И Валюта.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета Тогда
					
					ЗаписыватьВалюту = Истина;
				Иначе
					ЗаписыватьВалюту = Ложь;
				КонецЕсли;
				
			//Кратность	
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст И Имя = "Nominal" Тогда
				
				Кратность = Число(ЧтениеXML.Значение);
				
			//Курс	
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст И Имя = "Value" Тогда 				

				Курс =  Число(ЧтениеXML.Значение);
				
				//Записываем в РС: КурсыВалют				
				Если ЗаписыватьВалюту Тогда
					ЗаписьКурсовВалют = РегистрКурсыВалют.СоздатьМенеджерЗаписи();
					
					ЗаписьКурсовВалют.Валюта    = Валюта;
					ЗаписьКурсовВалют.Период    = ДатаКурса;
					ЗаписьКурсовВалют.Курс      = Курс;
					ЗаписьКурсовВалют.Кратность = Кратность;
					ЗаписьКурсовВалют.Записать(); 
				КонецЕсли;              			
				
			КонецЕсли;
		КонецЦикла;	
		
		ЧтениеXML.Закрыть();	
		
	Исключение
		ПоясняющееСообщение = СтрШаблон(НСтр("ru = 'Ошибка чтения XML файла с курсами валют: %1.'"), Результат.СообщениеОбОшибке);
		СтатусОперации = Ложь;
		ПриЗагрузкеВозниклиОшибки = Истина;
		
		СостояниеЗагрузки.Добавить(Новый Структура("Валюта,СтатусОперации,Сообщение","Основные валюты", СтатусОперации, ПоясняющееСообщение));
	КонецПопытки;
	
	УдалитьФайлы(Результат.Путь); 	
	
КонецПроцедуры

// Загрузка ежедневных курсов не основных валют из XML файла daily.xml
// Пример еженедельного XML файла курсов НЕ основных валют с сайта НБКР >>
//-----------------------------------------------------------------------
//<CurrencyRates Name="Weekly Exchange Rates" Date="10.01.2015">
//	<Currency ISOCode="GBP">
//		<Nominal>1</Nominal>
//		<ValidFor>7</ValidFor>
//		<Value>89,0450</Value>
//	</Currency>
//	<Currency ISOCode="DKK">
//		<Nominal>1</Nominal>
//		<ValidFor>7</ValidFor>
//		<Value>9,3463</Value>
//	</Currency>
//	<Currency ISOCode="INR">
//		<Nominal>1</Nominal>
//		<ValidFor>7</ValidFor>
//		<Value>0,9451</Value>
//	</Currency>
//	<Currency ISOCode="CAD">
//		<Nominal>1</Nominal>
//		<ValidFor>7</ValidFor>
//	<Value>49,7634</Value>
//	</Currency>
//</CurrencyRates> 
//-----------------------------------------------------------------------
//-
Процедура ЗагрузитьЕженедельныеКурсыНеОсновныхВалютИзXMLФайла(СерверИсточник, ДатаКурса, ПриЗагрузкеВозниклиОшибки, СостояниеЗагрузки)
	
	РегистрКурсыВалют = РегистрыСведений.КурсыВалют;
	
	Адрес = "/XML/weekly.xml"; 	
	
	ФайлНаВебСервере = СерверИсточник + Адрес;   
	
	#Если Клиент Тогда
		Результат = ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(ФайлНаВебСервере);
	#Иначе
		Результат = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(ФайлНаВебСервере);
	#КонецЕсли   
	
	Если НЕ Результат.Статус Тогда
		ПоясняющееСообщение = СтрШаблон(
				НСтр("ru = 'Невозможно получить файл данных с курсами валюты:
				|%1
				|Возможно, нет доступа к веб сайту с курсами валют, либо указана несуществующая валюта.'"),
				Результат.СообщениеОбОшибке);
		СтатусОперации = Ложь;
		ПриЗагрузкеВозниклиОшибки = Истина;
		
		СостояниеЗагрузки.Добавить(Новый Структура("Валюта,СтатусОперации,Сообщение","Не основные валюты", СтатусОперации, ПоясняющееСообщение));
		Возврат;
	КонецЕсли;
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Результат.Путь);
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Имя = ЧтениеXML.Имя;								
			КонецЕсли;
			
			//Если на сайте НБКР не актуальные курсы на сегодня тогда "прерываем" чтение
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И Имя = "CurrencyRates" Тогда
				ДатаКурсовXML = ЧтениеXML.ПолучитьАтрибут("Date");
				ДатаКурса = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаКурсовXML);
				//Если НЕ ЭтоАктуальныеНедельныеXMLКурсыНБКР(ДатаКурсовXMLСтрока, ДатаКурса) Тогда
				//	Прервать;
				//КонецЕсли;         				
				
			//Валюта	
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И Имя = "Currency" Тогда 
				
				НаименованиеВалюты = ЧтениеXML.ПолучитьАтрибут("ISOCode");
				Валюта = Справочники.Валюты.НайтиПоНаименованию(НаименованиеВалюты);
				
				Если Валюта <> Справочники.Валюты.ПустаяСсылка() 
					И Валюта.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета Тогда
					
					ЗаписыватьВалюту = Истина;
				Иначе
					ЗаписыватьВалюту = Ложь;
				КонецЕсли;  				
				
			//Кратность	
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст И Имя = "Nominal" Тогда
				
				Кратность = Число(ЧтениеXML.Значение);
				
			//Курс	
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст И Имя = "Value" Тогда 				

				Курс =  Число(ЧтениеXML.Значение);
				
				//Записываем в РС: КурсыВалют				
				Если ЗаписыватьВалюту Тогда
					ЗаписьКурсовВалют = РегистрКурсыВалют.СоздатьМенеджерЗаписи();
					
					ЗаписьКурсовВалют.Валюта    = Валюта;
					ЗаписьКурсовВалют.Период    = ДатаКурса;
					ЗаписьКурсовВалют.Курс      = Курс;
					ЗаписьКурсовВалют.Кратность = Кратность;
					ЗаписьКурсовВалют.Записать(); 					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		
		ЧтениеXML.Закрыть();	
		
	Исключение
		ПоясняющееСообщение = СтрШаблон(НСтр("ru = 'Ошибка чтения XML файла с курсами валют: %1.'"), Результат.СообщениеОбОшибке);
		СтатусОперации = Ложь;
		ПриЗагрузкеВозниклиОшибки = Истина;
		
		СостояниеЗагрузки.Добавить(Новый Структура("Валюта,СтатусОперации,Сообщение","Основные валюты", СтатусОперации, ПоясняющееСообщение));
	КонецПопытки;
	
	УдалитьФайлы(Результат.Путь); 	
	
КонецПроцедуры

// Загрузка ежедневных курсов основных валют из EXCEL файла: dailyrus.xls
Процедура ЗагрузитьЕжедневныеКурсыОсновныхВалютИзЭксельФайла(СерверИсточник, МассивОсновныхВалют, НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки, ПриЗагрузкеВозниклиОшибки, СостояниеЗагрузки)
	                    	
	ЗаписьКурсовВалют = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
		
	Адрес = "/EXCEL/dailyrus.xls"; 	
	
	ФайлНаВебСервере = СерверИсточник + Адрес;   
	
	#Если Клиент Тогда
		Результат = ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(ФайлНаВебСервере);
	#Иначе
		Результат = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(ФайлНаВебСервере);
	#КонецЕсли 	
	
	Если НЕ Результат.Статус Тогда
		ПоясняющееСообщение = СтрШаблон(
				НСтр("ru = 'Невозможно получить файл данных с курсами валюты:
				|%1
				|Возможно, нет доступа к веб сайту с курсами валют, либо указана несуществующая валюта.'"),
				Результат.СообщениеОбОшибке);
			СтатусОперации = Ложь;
			ПриЗагрузкеВозниклиОшибки = Истина;
			
			СостояниеЗагрузки.Добавить(Новый Структура("Валюта,СтатусОперации,Сообщение","Основные валюты", СтатусОперации, ПоясняющееСообщение));

			Возврат;
	КонецЕсли; 
	
	ВходящийФайл = Новый Файл(Результат.Путь);
		
	ТекЛистДата = НачалоПериодаЗагрузки;	
	
	Пока Год(ТекЛистДата) <= Год(ОкончаниеПериодаЗагрузки) Цикл 		
		
		ТекЛист = Формат(Год(ТекЛистДата),"ЧГ=0"); 
		ТЗ = ЗагрузитьМетодом_MSExcel(Результат.Путь, ТекЛист, , , , );
		
		Если ТЗ.Количество() = 0 Тогда
			ТекЛистДата = ДобавитьМесяц(ТекЛистДата, 12);
			продолжить; 			
		Иначе 
			ТекЛистДата = ДобавитьМесяц(ТекЛистДата, 12); 			
		КонецЕсли;
		
		Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ТЗ.К_A,
				|	ТЗ.К_B,
				|	ТЗ.К_C,
				|	ТЗ.К_D,
				|	ТЗ.К_E
				|ПОМЕСТИТЬ ВтТЗ
				|ИЗ
				|	&ТЗ КАК ТЗ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТТЗ.К_A КАК ДатаКурсаТаб,
				|	ВТТЗ.К_B КАК USD,
				|	ВТТЗ.К_C КАК EUR,
				|	ВТТЗ.К_D КАК RUB,
				|	ВТТЗ.К_E КАК KZT
				|ПОМЕСТИТЬ ВТ2
				|ИЗ
				|	ВтТЗ КАК ВТТЗ
				|ГДЕ
				|	ВТТЗ.К_A МЕЖДУ &НачПер И &КонПер
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	""USD"" КАК Валюта,
				|	ВТ2.ДатаКурсаТаб КАК Период,
				|	ВТ2.USD КАК Курс
				|ПОМЕСТИТЬ ВтВалюты
				|ИЗ
				|	ВТ2 КАК ВТ2
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	""EUR"",
				|	ВТ2.ДатаКурсаТаб,
				|	ВТ2.EUR
				|ИЗ
				|	ВТ2 КАК ВТ2
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	""RUB"",
				|	ВТ2.ДатаКурсаТаб,
				|	ВТ2.RUB
				|ИЗ
				|	ВТ2 КАК ВТ2
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	""KZT"",
				|	ВТ2.ДатаКурсаТаб,
				|	ВТ2.KZT
				|ИЗ
				|	ВТ2 КАК ВТ2
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВтВалюты.Валюта,
				|	ВтВалюты.Период,
				|	ВтВалюты.Курс
				|ИЗ
				|	ВтВалюты КАК ВтВалюты
				|ГДЕ
				|	ВтВалюты.Валюта В(&Валюты)";

		Запрос.УстановитьПараметр("ТЗ", ТЗ);
		Запрос.УстановитьПараметр("НачПер", НачалоПериодаЗагрузки);
		Запрос.УстановитьПараметр("КонПер", ОкончаниеПериодаЗагрузки);
		
		Валюты = Новый Массив;		
		Для каждого СтрокаСпВалют из МассивОсновныхВалют Цикл
			Валюты.Добавить(СтрокаСпВалют.Валюта.Наименование);	 							
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Валюты", Валюты);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выб = РезультатЗапроса.Выбрать();

		Пока Выб.Следующий() Цикл 					
			Если ЗначениеЗаполнено(Выб.Курс) Тогда 
				ЗаписьКурсовВалют.Валюта = Справочники.Валюты.НайтиПоНаименованию(Выб.Валюта);
				ЗаписьКурсовВалют.Период = Выб.Период;
				ЗаписьКурсовВалют.Прочитать();
				ЗаписьКурсовВалют.Валюта    = Справочники.Валюты.НайтиПоНаименованию(Выб.Валюта);
				ЗаписьКурсовВалют.Период    = Выб.Период;
				ЗаписьКурсовВалют.Курс      = Выб.Курс;
				ЗаписьКурсовВалют.Кратность = 1; //Кратность для 4 валют USD, EUR, RUB, KZT;
		
				ЗаписьКурсовВалют.Записать();
				Загружено = Истина;
			 КонецЕсли; 
		 КонецЦикла; 
	КонецЦикла; 
		 
	УдалитьФайлы(Результат.Путь);
		 
КонецПроцедуры

// Загрузка ежедневных курсов не основных валют из EXCEL файла: allvalsrus.xls
Процедура ЗагрузитьЕженедельныеКурсыНеОсновныхВалютИзЭксельФайла(СерверИсточник, МассивНеОсновныхВалют, НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки, ПриЗагрузкеВозниклиОшибки, СостояниеЗагрузки)
	                    	
	ЗаписьКурсовВалют = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
		
	Адрес = "/EXCEL/allvalsrus.xls"; 	
	
	ФайлНаВебСервере = СерверИсточник + Адрес;   
	
	#Если Клиент Тогда
		Результат = ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(ФайлНаВебСервере);
	#Иначе
		Результат = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(ФайлНаВебСервере);
	#КонецЕсли 	
	
	Если НЕ Результат.Статус Тогда
		ПоясняющееСообщение = СтрШаблон(
				НСтр("ru = 'Невозможно получить файл данных с курсами валюты:
				|%1
				|Возможно, нет доступа к веб сайту с курсами валют, либо указана несуществующая валюта.'"),
				Результат.СообщениеОбОшибке);
			СтатусОперации = Ложь;
			ПриЗагрузкеВозниклиОшибки = Истина;
			
			СостояниеЗагрузки.Добавить(Новый Структура("Валюта,СтатусОперации,Сообщение","Не основные валюты", СтатусОперации, ПоясняющееСообщение));

			Возврат;
	КонецЕсли;
	
	ВходящийФайл = Новый Файл(Результат.Путь);
		
	ТекЛистДата = НачалоПериодаЗагрузки;	
	
	Пока Год(ТекЛистДата) <= Год(ОкончаниеПериодаЗагрузки) Цикл 		
		
		ТекЛист = Формат(Год(ТекЛистДата),"ЧГ=0"); 
		ТЗ = ЗагрузитьМетодом_MSExcel(Результат.Путь, ТекЛист, , , , );
		
		Если ТЗ.Количество() = 0 Тогда
			ТекЛистДата = ДобавитьМесяц(ТекЛистДата, 12);
			продолжить; 			
		Иначе 
			ТекЛистДата = ДобавитьМесяц(ТекЛистДата, 12); 			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		Если Число(ТекЛист) >= 2016 Тогда		
			Запрос.Текст = ПолучитьТекстЗапросаКурсовНеОсновныхВалютИзЭксельФайлаПосле2016();  			
		ИначеЕсли Число(ТекЛист) >= 2015 Тогда		
			Запрос.Текст = ПолучитьТекстЗапросаКурсовНеОсновныхВалютИзЭксельФайлаПосле2015();  			
		Иначе         			
			Запрос.Текст = ПолучитьТекстЗапросаКурсовНеОсновныхВалютИзЭксельФайлаДо2015(); 			
		КонецЕсли;
		

		Запрос.УстановитьПараметр("ТЗ", ТЗ);
		Запрос.УстановитьПараметр("НачПер", НачалоПериодаЗагрузки);
		Запрос.УстановитьПараметр("КонПер", ОкончаниеПериодаЗагрузки);
		
		Валюты = Новый Массив;
		Для каждого СтрокаСпВалют из МассивНеОсновныхВалют Цикл
			Валюты.Добавить(СтрокаСпВалют.Валюта.Наименование);	 							
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Валюты", Валюты);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выб = РезультатЗапроса.Выбрать();

		Пока Выб.Следующий() Цикл 					
			Если ЗначениеЗаполнено(Выб.Курс) Тогда   				
				
				ЗаписьКурсовВалют.Валюта = Справочники.Валюты.НайтиПоНаименованию(Выб.Валюта);
				ЗаписьКурсовВалют.Период = Выб.ДатаКаркаса;
				ЗаписьКурсовВалют.Прочитать();
				ЗаписьКурсовВалют.Валюта    = Справочники.Валюты.НайтиПоНаименованию(Выб.Валюта);
				ЗаписьКурсовВалют.Период    = Выб.ДатаКаркаса;
				ЗаписьКурсовВалют.Курс      = Выб.Курс;
				ЗаписьКурсовВалют.Кратность = 1; //Кратность для 4 валют USD, EUR, RUB, KZT;
		
				ЗаписьКурсовВалют.Записать();
				Загружено = Истина;				
		 	КонецЕсли; 
		 КонецЦикла; 
	КонецЦикла; 
		 
	УдалитьФайлы(Результат.Путь);
		 
КонецПроцедуры    

// Метод "Microsoft Excel.Application".
//
// Параметры:
//         ФайлEXCEL - Полное имя файла (путь к файлу с именем файла и расширением).
//         ИмяЛиста - Имя выбранного листа файла EXCEL.
//        СтрокаЗаголовка (по умолчанию = 1) - Номер строки EXCEL, в которой расположены заголовки колонок.
//            Не используется.
//        В обработке 1-я строка анализируется для сопоставления колонок EXCEL с реквизитами 1С (справочники, докуметны, регистры).
//        НачСтрока (по-умолчанию = 0) - Номер начальной строки, начиная с которой считываются данные из EXCEL.
//        КонСтрока (по-умолчанию = 0) - Номер конечной строки, которой заканчиваются считываемые данные из EXCEL.
//            Если НачСтрока=0 и КонСтрока=0, то считывается вся таблица, находящаяся на листе EXCEL.
//        КолвоСтрокExcel - Количество строк на листе "ИмяЛиста" EXCEL. Возвращается в вызываемую процедуру.
//
// Возвращаемые значения:
//         ТаблицаРезультат - Результат считывания с листа "ИмяЛиста" EXCEL.
//
Функция ЗагрузитьМетодом_MSExcel(Знач ФайлEXCEL, Знач ИмяЛиста, Знач СтрокаЗаголовка = 1, НачСтрока = 0, КонСтрока = 0, КолвоСтрокExcel) Экспорт
    Перем ExcelApplication, Book, Sheet;
    Перем ВсегоЛистов, НачальнаяКолонка, НачальнаяСтрока, КонечнаяКолонка, КонечнаяСтрока;
    Перем ДиапазонДанных, СтрокДиапазона, ДиапазонЗаголовка, МассивЗаголовка, МассивЗначений;
    Перем ТекИмя, ПозДоллар, Версия;
    Перем ТаблицаРезультат, МассивИменКолонок, ИмяКолонки, Колонка, Заголовок, НоваяСтрока, нСтроки;
    
    // Нумерация MS EXCEL начинается с 1.
    
    Попытка
        // Инициализация основного объекта Excel.Application: Открытие соединения.
        ExcelApplication = Новый COMОбъект("Excel.Application");
        ExcelApplication.Visible = Ложь;
        ExcelApplication.DisplayAlerts = Ложь;
    Исключение
        Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
        Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
    КонецПопытки;
    
    // Определение версии EXCEL.
    Версия = Лев(ExcelApplication.Version,Найти(ExcelApplication.Version,".")-1);
    
    // Инициализация дочернего объекта типа Книга EXCEL.
    Book = ExcelApplication.WorkBooks.Open(ФайлEXCEL);
    ВсегоЛистов = Book.Sheets.Count;
    
    // Инициализация дочернего объекта Книги типа Лист EXCEL.
	Попытка
		Sheet = Book.WorkSheets(ИмяЛиста);
	Исключение
		Book.Close();     
        ExcelApplication.Application.Quit();
        ExcelApplication = Неопределено;
		Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
    КонецПопытки;
    
    // Определение диапазона данных таблицы EXCEL.
    НачальнаяКолонка   = 1;
    НачальнаяСтрока    = 1;
	
	Если Число(Версия) >= Число("8") Тогда
        КонечнаяКолонка  = Sheet.Cells.CurrentRegion.Columns.Count;
        КонечнаяСтрока   = Sheet.Cells.CurrentRegion.Rows.Count;
    Иначе
        КонечнаяКолонка  = Sheet.Cells.SpecialCells(11).Column;
        КонечнаяСтрока   = Sheet.Cells.SpecialCells(11).Row;
    КонецЕсли;
    
    // Параметр, возвращаемый в вызывающую процедуру.
    КолвоСтрокExcel = КонечнаяСтрока;
    
    // Проверка заполненности листа.
    Если КолвоСтрокExcel  <= 1 И КонечнаяКолонка <= 1 Тогда
 
        КолвоСтрокExcel = 0;
        Сообщить(НСтр("ru = '" + ИмяЛиста + ": не содержит данных.'"), СтатусСообщения.Внимание);
        
        // Завершение работы.
        // Закрытие Объектов.
        Book.Close();
    
        ExcelApplication.Application.Quit();
        ExcelApplication = Неопределено;
        
        Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
    КонецЕсли;
    
    НачальнаяСтрока = ?(НачСтрока = 0    , НачальнаяСтрока  , НачСтрока);
    КонечнаяСтрока  = ?(КонСтрока = 0    , КонечнаяСтрока    , КонСтрока);
    
    КонечнаяСтрока  = ?(КонечнаяСтрока > КолвоСтрокExcel, КолвоСтрокExcel, КонечнаяСтрока);
    НачальнаяСтрока = ?(НачальнаяСтрока > КолвоСтрокExcel, КолвоСтрокExcel, НачальнаяСтрока);
    
    // Диапазон: Считываемые данные.
 ДиапазонДанных = Sheet.Range(Sheet.Cells(НачальнаяСтрока, НачальнаяКолонка), Sheet.Cells(КонечнаяСтрока, КонечнаяКолонка));
    СтрокДиапазона = ДиапазонДанных.Rows.Count;
    
    // Создание результирующей таблицы, в которую будут записываться считанные из EXCEL данные.
    ТаблицаРезультат = Новый ТаблицаЗначений;
    
    // Формирование колонок результирующей таблицы.
    
    // "НомерСтроки" - для наглядности и удобства.
    // В зависимости от разрабатываемой обработки.
    // "Сопоставлено" - может быть другим.
    // Здесь же могут быть добавлены другие колонки, не формируемые из содержимого файла EXCEL.
    ТаблицаРезультат.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "№", 4);
    ТаблицаРезультат.Колонки.Добавить("Сопоставлено", Новый ОписаниеТипов("Булево"), "Сопоставлено", 1);
	 	
	МассивИменКолонок = Новый Массив;
	Для ит = 1 ПО КонечнаяКолонка Цикл
		
		ТекИмя = Сред(ДиапазонДанных.Columns(ит).Address, 2);
		ПозДоллар = Найти(ТекИмя, "$");
		ТекИмя = Лев(ТекИмя, ПозДоллар-1);
		
		МассивИменКолонок.Добавить(ТекИмя);
		
		Если ДиапазонДанных.Columns(ит).Hidden Тогда    // Скрытые колонки EXCEL пропустить.
			Продолжить;
		КонецЕсли;
		
		ИмяКолонки = "К_" + ТекИмя;
		
		Заголовок = Sheet.Cells(1, ит).Value;            // Заголовки колонок из 1-ой строки.
		
		Если ИмяКолонки = "К_A" Тогда
			ТаблицаРезультат.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Дата"),  Заголовок, 4);
		Иначе
			ТаблицаРезультат.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Число"),  Заголовок, 4);
		КонецЕсли;
			
	КонецЦикла;
    
    // ТаблицаРезультат: 1-я Строка-Заголовок.
    // Если в Вашей обработке в результирующей таблице в качестве 1-ой строки не нужна Строка-Заголовок, то
    // следует закомментировать следующий цикл:
	//ДиапазонЗаголовка = Sheet.Range(Sheet.Cells(1, НачальнаяКолонка), Sheet.Cells(1, КонечнаяКолонка));
	//МассивЗаголовка = ДиапазонЗаголовка.Value.Выгрузить();
	//
	//НоваяСтрока = ТаблицаРезультат.Добавить();
	//НоваяСтрока.НомерСтроки = 1;
	//
	//ит = -1;
	//Для Каждого МассивЗначений ИЗ МассивЗаголовка Цикл
	//	
	//	Для Каждого ЭлементМассива ИЗ МассивЗначений Цикл
	//		ит = ит + 1;
	//		
	//		ИмяКолонки = "К_" + МассивИменКолонок[ит];
	//		Колонка = ТаблицаРезультат.Колонки.Найти(ИмяКолонки);
	//		Если Колонка = Неопределено Тогда    // Имена скрытых колонок отсутствуют в массиве.
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		НоваяСтрока[ИмяКолонки] = СокрЛП(ЭлементМассива);
	//	КонецЦикла;
	//	
	//КонецЦикла;
    
    // ТаблицаРезультат: формирование строк по указанному диапазону: НачСтрока - КонСтрока.
    
    ДиапазонДанных = ДиапазонДанных.Value;
    
    нСтроки = НачальнаяСтрока-1;
    Для НомерСтроки = 1 ПО СтрокДиапазона Цикл
        
        нСтроки = нСтроки + 1;
        НоваяСтрока = ТаблицаРезультат.Добавить();
        НоваяСтрока.НомерСтроки = нСтроки;
        
        Для НомерКолонки = 1 ПО КонечнаяКолонка Цикл
            
            ИмяКолонки = "К_" + МассивИменКолонок[НомерКолонки-1];
            Колонка = ТаблицаРезультат.Колонки.Найти(ИмяКолонки);
            Если Колонка = Неопределено Тогда    // Имена скрытых колонок отсутствуют в массиве.
                Продолжить;
            КонецЕсли;
            
            ЗначениеЯчейки = ДиапазонДанных.GetValue(НомерКолонки, НомерСтроки); // Считывание данных в соответствии с их типом.
            
            Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
                
                // Ширина колонки используется при формировании таблицы на форме обработки.
                ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
                ДлинаСтроки = СтрДлина(СокрЛП(ЗначениеЯчейки));
                ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
                
                НоваяСтрока[ИмяКолонки] = ЗначениеЯчейки;
				
            КонецЕсли;
            
        КонецЦикла;
        
    КонецЦикла;
    
    //УдалитьКолонкиСНулевойШириной(ТаблицаРезультат);
    
    // Завершение работы.
    // Закрытие Объектов.
    Book.Close();
    
    ExcelApplication.Application.Quit();
    ExcelApplication = Неопределено;

    Возврат ТаблицаРезультат;
    
КонецФункции

//Текст запроса без Латвийского лата [LVL]
Функция ПолучитьТекстЗапросаКурсовНеОсновныхВалютИзЭксельФайлаДо2015() 
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТЗ.К_A,
	               |	ТЗ.К_B,
	               |	ТЗ.К_C,
	               |	ТЗ.К_D,
	               |	ТЗ.К_E,
	               |	ТЗ.К_F,
	               |	ТЗ.К_G,
	               |	ТЗ.К_H,
	               |	ТЗ.К_I,
	               |	ТЗ.К_J,
	               |	ТЗ.К_K,
	               |	ТЗ.К_L,
	               |	ТЗ.К_M,
	               |	ТЗ.К_N,
	               |	ТЗ.К_O,
	               |	ТЗ.К_P,
	               |	ТЗ.К_Q,
	               |	ТЗ.К_R,
	               |	ТЗ.К_S,
	               |	ТЗ.К_T,
	               |	ТЗ.К_U,
	               |	ТЗ.К_V,
	               |	ТЗ.К_W,
	               |	ТЗ.К_X,
	               |	ТЗ.К_Y,
	               |	ТЗ.К_Z,
	               |	ТЗ.К_AA,
	               |	ТЗ.К_AB,
	               |	ТЗ.К_AC,
	               |	ТЗ.К_AD,
	               |	ТЗ.К_AE,
	               |	ТЗ.К_AF,
	               |	ТЗ.К_AG,
	               |	ТЗ.К_AH,
	               |	ТЗ.К_AI,
	               |	ТЗ.К_AJ,
	               |	ТЗ.К_AK,
	               |	ТЗ.К_AL,
	               |	ТЗ.К_AM,
	               |	ТЗ.К_AN
	               |ПОМЕСТИТЬ ВтТЗ
	               |ИЗ
	               |	&ТЗ КАК ТЗ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	1 КАК Единица
	               |ПОМЕСТИТЬ Единицы
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	3
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	4
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	5
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	6
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	7
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	8
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	9
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	10
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачПер, ДЕНЬ, 1000 * (Тысячи.Единица - 1) + 100 * (Сотни.Единица - 1) + 10 * (Десятки.Единица - 1) + Единицы.Единица - 1), ДЕНЬ) КАК ДатаКаркаса
	               |ПОМЕСТИТЬ Вт_КаркасДат
	               |ИЗ
	               |	Единицы КАК Единицы,
	               |	Единицы КАК Десятки,
	               |	Единицы КАК Сотни,
	               |	Единицы КАК Тысячи
	               |ГДЕ
	               |	ДОБАВИТЬКДАТЕ(&НачПер, ДЕНЬ, 1000 * (Тысячи.Единица - 1) + 100 * (Сотни.Единица - 1) + 10 * (Десятки.Единица - 1) + Единицы.Единица - 1) <= &КонПер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Вт_КаркасДат.ДатаКаркаса,
	               |	ВТТЗ.К_B КАК AUD,
	               |	ВТТЗ.К_C КАК AZN,
	               |	ВТТЗ.К_D КАК GBP,
	               |	ВТТЗ.К_E КАК AMD10,
	               |	ВТТЗ.К_F КАК AFN,
	               |	ВТТЗ.К_G КАК BYR100,
	               |	ВТТЗ.К_H КАК BGN,
	               |	ВТТЗ.К_I КАК BRL,
	               |	ВТТЗ.К_J КАК HUF,
	               |	ВТТЗ.К_K КАК KRW,
	               |	ВТТЗ.К_L КАК GEL,
	               |	ВТТЗ.К_M КАК DKK,
	               |	ВТТЗ.К_N КАК AED,
	               |	ВТТЗ.К_O КАК INR,
	               |	ВТТЗ.К_P КАК IRR,
	               |	ВТТЗ.К_Q КАК CAD,
	               |	ВТТЗ.К_R КАК CNY,
	               |	ВТТЗ.К_S КАК KWD,
	               |	ВТТЗ.К_T КАК LVL,
	               |	ВТТЗ.К_U КАК LTL,
	               |	ВТТЗ.К_V КАК MYR,
	               |	ВТТЗ.К_W КАК MDL,
	               |	ВТТЗ.К_X КАК MNT,
	               |	ВТТЗ.К_Y КАК TRY,
	               |	ВТТЗ.К_Z КАК NZD,
	               |	ВТТЗ.К_AA КАК TWD,
	               |	ВТТЗ.К_AB КАК TMT,
	               |	ВТТЗ.К_AC КАК NOK,
	               |	ВТТЗ.К_AD КАК PKR,
	               |	ВТТЗ.К_AE КАК PLN,
	               |	ВТТЗ.К_AF КАК XDR,
	               |	ВТТЗ.К_AG КАК SGD,
	               |	ВТТЗ.К_AH КАК TJS,
	               |	ВТТЗ.К_AI КАК UZS,
	               |	ВТТЗ.К_AJ КАК UAH,
	               |	ВТТЗ.К_AK КАК CZK,
	               |	ВТТЗ.К_AL КАК SEK,
	               |	ВТТЗ.К_AM КАК CHF,
	               |	ВТТЗ.К_AN КАК JPY
	               |ПОМЕСТИТЬ ВТ2
	               |ИЗ
	               |	Вт_КаркасДат КАК Вт_КаркасДат
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВтТЗ КАК ВТТЗ
	               |		ПО Вт_КаркасДат.ДатаКаркаса >= ВТТЗ.К_A
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	""AUD"" КАК Валюта,
	               |	ВТ2.AUD КАК Курс,
	               |	ВТ2.ДатаКаркаса
	               |ПОМЕСТИТЬ ВтВалюты
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""AZN"",
	               |	ВТ2.AZN,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""GBP"",
	               |	ВТ2.GBP,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""AMD"",
	               |	ВТ2.AMD10,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""AFN"",
	               |	ВТ2.AFN,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""BYR"",
	               |	ВТ2.BYR100,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""BGN"",
	               |	ВТ2.BGN,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""BRL"",
	               |	ВТ2.BRL,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""HUF"",
	               |	ВТ2.HUF,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""KRW"",
	               |	ВТ2.KRW,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""GEL"",
	               |	ВТ2.GEL,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""DKK"",
	               |	ВТ2.DKK,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""AED"",
	               |	ВТ2.AED,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""INR"",
	               |	ВТ2.INR,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""IRR"",
	               |	ВТ2.IRR,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""CAD"",
	               |	ВТ2.CAD,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""CNY"",
	               |	ВТ2.CNY,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""KWD"",
	               |	ВТ2.KWD,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""LTL"",
	               |	ВТ2.LTL,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""MYR"",
	               |	ВТ2.MYR,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""MDL"",
	               |	ВТ2.MDL,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""MNT"",
	               |	ВТ2.MNT,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""AUD"",
	               |	ВТ2.AUD,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""TRY"",
	               |	ВТ2.TRY,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""NZD"",
	               |	ВТ2.NZD,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""TWD"",
	               |	ВТ2.TWD,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""TMT"",
	               |	ВТ2.TMT,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""NOK"",
	               |	ВТ2.NOK,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""PKR"",
	               |	ВТ2.PKR,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""PLN"",
	               |	ВТ2.PLN,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""XDR"",
	               |	ВТ2.XDR,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""SGD"",
	               |	ВТ2.SGD,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""TJS"",
	               |	ВТ2.TJS,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""UZS"",
	               |	ВТ2.UZS,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""UAH"",
	               |	ВТ2.UAH,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""CZK"",
	               |	ВТ2.CZK,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""SEK"",
	               |	ВТ2.SEK,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""CHF"",
	               |	ВТ2.CHF,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""LVL"",
	               |	ВТ2.LVL,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВтВалюты.Валюта,
	               |	ВтВалюты.Курс,
	               |	ВтВалюты.ДатаКаркаса
	               |ИЗ
	               |	ВтВалюты КАК ВтВалюты
	               |ГДЕ
	               |	ВтВалюты.Валюта В(&Валюты)";

	Возврат ТекстЗапроса; 
	
КонецФункции

//Текст запроса c Латвийским латом [LVL]
Функция ПолучитьТекстЗапросаКурсовНеОсновныхВалютИзЭксельФайлаПосле2015() 
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТЗ.К_A,
	               |	ТЗ.К_B,
	               |	ТЗ.К_C,
	               |	ТЗ.К_D,
	               |	ТЗ.К_E,
	               |	ТЗ.К_F,
	               |	ТЗ.К_G,
	               |	ТЗ.К_H,
	               |	ТЗ.К_I,
	               |	ТЗ.К_J,
	               |	ТЗ.К_K,
	               |	ТЗ.К_L,
	               |	ТЗ.К_M,
	               |	ТЗ.К_N,
	               |	ТЗ.К_O,
	               |	ТЗ.К_P,
	               |	ТЗ.К_Q,
	               |	ТЗ.К_R,
	               |	ТЗ.К_S,
	               |	ТЗ.К_T,
	               |	ТЗ.К_U,
	               |	ТЗ.К_V,
				   |	ТЗ.К_W,
	               |	ТЗ.К_X,
	               |	ТЗ.К_Y,
	               |	ТЗ.К_Z,
	               |	ТЗ.К_AA,
	               |	ТЗ.К_AB,
	               |	ТЗ.К_AC,
	               |	ТЗ.К_AD,
	               |	ТЗ.К_AE,
	               |	ТЗ.К_AF,
	               |	ТЗ.К_AG,
	               |	ТЗ.К_AH,
	               |	ТЗ.К_AI,
	               |	ТЗ.К_AJ,
	               |	ТЗ.К_AK,
	               |	ТЗ.К_AL,
	               |	ТЗ.К_AM
	               |ПОМЕСТИТЬ ВтТЗ
	               |ИЗ
	               |	&ТЗ КАК ТЗ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	1 КАК Единица
	               |ПОМЕСТИТЬ Единицы
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	3
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	4
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	5
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	6
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	7
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	8
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	9
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	10
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачПер, ДЕНЬ, 1000 * (Тысячи.Единица - 1) + 100 * (Сотни.Единица - 1) + 10 * (Десятки.Единица - 1) + Единицы.Единица - 1), ДЕНЬ) КАК ДатаКаркаса
	               |ПОМЕСТИТЬ Вт_КаркасДат
	               |ИЗ
	               |	Единицы КАК Единицы,
	               |	Единицы КАК Десятки,
	               |	Единицы КАК Сотни,
	               |	Единицы КАК Тысячи
	               |ГДЕ
	               |	ДОБАВИТЬКДАТЕ(&НачПер, ДЕНЬ, 1000 * (Тысячи.Единица - 1) + 100 * (Сотни.Единица - 1) + 10 * (Десятки.Единица - 1) + Единицы.Единица - 1) <= &КонПер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Вт_КаркасДат.ДатаКаркаса,
	               |	ВТТЗ.К_B КАК AUD,
	               |	ВТТЗ.К_C КАК AZN,
	               |	ВТТЗ.К_D КАК GBP,
	               |	ВТТЗ.К_E КАК AMD10,
	               |	ВТТЗ.К_F КАК AFN,
	               |	ВТТЗ.К_G КАК BYR100,
	               |	ВТТЗ.К_H КАК BGN,
	               |	ВТТЗ.К_I КАК BRL,
	               |	ВТТЗ.К_J КАК HUF,
	               |	ВТТЗ.К_K КАК KRW,
	               |	ВТТЗ.К_L КАК GEL,
	               |	ВТТЗ.К_M КАК DKK,
	               |	ВТТЗ.К_N КАК AED,
	               |	ВТТЗ.К_O КАК INR,
	               |	ВТТЗ.К_P КАК IRR,
	               |	ВТТЗ.К_Q КАК CAD,
	               |	ВТТЗ.К_R КАК CNY,
	               |	ВТТЗ.К_S КАК KWD,
	               |	ВТТЗ.К_T КАК LTL,
	               |	ВТТЗ.К_U КАК MYR,
	               |	ВТТЗ.К_V КАК MDL,
				   |	ВТТЗ.К_W КАК MNT,
	               |	ВТТЗ.К_X КАК TRY,
	               |	ВТТЗ.К_Y КАК NZD,
	               |	ВТТЗ.К_Z КАК TWD,
	               |	ВТТЗ.К_AA КАК TMT,
	               |	ВТТЗ.К_AB КАК NOK,
	               |	ВТТЗ.К_AC КАК PKR,
	               |	ВТТЗ.К_AD КАК PLN,
	               |	ВТТЗ.К_AE КАК XDR,
	               |	ВТТЗ.К_AF КАК SGD,
	               |	ВТТЗ.К_AG КАК TJS,
	               |	ВТТЗ.К_AH КАК UZS,
	               |	ВТТЗ.К_AI КАК UAH,
	               |	ВТТЗ.К_AJ КАК CZK,
	               |	ВТТЗ.К_AK КАК SEK,
	               |	ВТТЗ.К_AL КАК CHF,
	               |	ВТТЗ.К_AM КАК JPY
	               |ПОМЕСТИТЬ ВТ2
	               |ИЗ
	               |	Вт_КаркасДат КАК Вт_КаркасДат
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВтТЗ КАК ВТТЗ
	               |		ПО Вт_КаркасДат.ДатаКаркаса >= ВТТЗ.К_A
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	""AUD"" КАК Валюта,
	               |	ВТ2.AUD КАК Курс,
	               |	ВТ2.ДатаКаркаса
	               |ПОМЕСТИТЬ ВтВалюты
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""AZN"",
	               |	ВТ2.AZN,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""GBP"",
	               |	ВТ2.GBP,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""AMD"",
	               |	ВТ2.AMD10,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""AFN"",
	               |	ВТ2.AFN,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""BYR"",
	               |	ВТ2.BYR100,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""BGN"",
	               |	ВТ2.BGN,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""BRL"",
	               |	ВТ2.BRL,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""HUF"",
	               |	ВТ2.HUF,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""KRW"",
	               |	ВТ2.KRW,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""GEL"",
	               |	ВТ2.GEL,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""DKK"",
	               |	ВТ2.DKK,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""AED"",
	               |	ВТ2.AED,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""INR"",
	               |	ВТ2.INR,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""IRR"",
	               |	ВТ2.IRR,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""CAD"",
	               |	ВТ2.CAD,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""CNY"",
	               |	ВТ2.CNY,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""KWD"",
	               |	ВТ2.KWD,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""LTL"",
	               |	ВТ2.LTL,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""MYR"",
	               |	ВТ2.MYR,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""MDL"",
	               |	ВТ2.MDL,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""MNT"",
	               |	ВТ2.MNT,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""AUD"",
	               |	ВТ2.AUD,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""TRY"",
	               |	ВТ2.TRY,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""NZD"",
	               |	ВТ2.NZD,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""TWD"",
	               |	ВТ2.TWD,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""TMT"",
	               |	ВТ2.TMT,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""NOK"",
	               |	ВТ2.NOK,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""PKR"",
	               |	ВТ2.PKR,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""PLN"",
	               |	ВТ2.PLN,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""XDR"",
	               |	ВТ2.XDR,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""SGD"",
	               |	ВТ2.SGD,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""TJS"",
	               |	ВТ2.TJS,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""UZS"",
	               |	ВТ2.UZS,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""UAH"",
	               |	ВТ2.UAH,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""CZK"",
	               |	ВТ2.CZK,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""SEK"",
	               |	ВТ2.SEK,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""CHF"",
	               |	ВТ2.CHF,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВтВалюты.Валюта,
	               |	ВтВалюты.Курс,
	               |	ВтВалюты.ДатаКаркаса
	               |ИЗ
	               |	ВтВалюты КАК ВтВалюты
	               |ГДЕ
	               |	ВтВалюты.Валюта В (&Валюты)";

	Возврат ТекстЗапроса; 
	
КонецФункции  

// Текст без LTL
Функция ПолучитьТекстЗапросаКурсовНеОсновныхВалютИзЭксельФайлаПосле2016() 
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТЗ.К_A,
	               |	ТЗ.К_B,
	               |	ТЗ.К_C,
	               |	ТЗ.К_D,
	               |	ТЗ.К_E,
	               |	ТЗ.К_F,
	               |	ТЗ.К_G,
	               |	ТЗ.К_H,
	               |	ТЗ.К_I,
	               |	ТЗ.К_J,
	               |	ТЗ.К_K,
	               |	ТЗ.К_L,
	               |	ТЗ.К_M,
	               |	ТЗ.К_N,
	               |	ТЗ.К_O,
	               |	ТЗ.К_P,
	               |	ТЗ.К_Q,
	               |	ТЗ.К_R,
	               |	ТЗ.К_S,
	               |	ТЗ.К_T,
	               |	ТЗ.К_U,
	               |	ТЗ.К_V,
	               |	ТЗ.К_W,
	               |	ТЗ.К_X,
	               |	ТЗ.К_Y,
	               |	ТЗ.К_Z,
	               |	ТЗ.К_AA,
	               |	ТЗ.К_AB,
	               |	ТЗ.К_AC,
	               |	ТЗ.К_AD,
	               |	ТЗ.К_AE,
	               |	ТЗ.К_AF,
	               |	ТЗ.К_AG,
	               |	ТЗ.К_AH,
	               |	ТЗ.К_AI,
	               |	ТЗ.К_AJ,
	               |	ТЗ.К_AK,
	               |	ТЗ.К_AL,
	               |	ТЗ.К_AM
	               |ПОМЕСТИТЬ ВтТЗ
	               |ИЗ
	               |	&ТЗ КАК ТЗ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	1 КАК Единица
	               |ПОМЕСТИТЬ Единицы
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	3
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	4
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	5
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	6
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	7
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	8
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	9
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	10
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачПер, ДЕНЬ, 1000 * (Тысячи.Единица - 1) + 100 * (Сотни.Единица - 1) + 10 * (Десятки.Единица - 1) + Единицы.Единица - 1), ДЕНЬ) КАК ДатаКаркаса
	               |ПОМЕСТИТЬ Вт_КаркасДат
	               |ИЗ
	               |	Единицы КАК Единицы,
	               |	Единицы КАК Десятки,
	               |	Единицы КАК Сотни,
	               |	Единицы КАК Тысячи
	               |ГДЕ
	               |	ДОБАВИТЬКДАТЕ(&НачПер, ДЕНЬ, 1000 * (Тысячи.Единица - 1) + 100 * (Сотни.Единица - 1) + 10 * (Десятки.Единица - 1) + Единицы.Единица - 1) <= &КонПер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Вт_КаркасДат.ДатаКаркаса,
	               |	ВТТЗ.К_B КАК AUD,
	               |	ВТТЗ.К_C КАК AZN,
	               |	ВТТЗ.К_D КАК GBP,
	               |	ВТТЗ.К_E КАК AMD10,
	               |	ВТТЗ.К_F КАК AFN,
	               |	ВТТЗ.К_G КАК BYR100,
	               |	ВТТЗ.К_H КАК BGN,
	               |	ВТТЗ.К_I КАК BRL,
	               |	ВТТЗ.К_J КАК HUF,
	               |	ВТТЗ.К_K КАК KRW,
	               |	ВТТЗ.К_L КАК GEL,
	               |	ВТТЗ.К_M КАК DKK,
	               |	ВТТЗ.К_N КАК AED,
	               |	ВТТЗ.К_O КАК INR,
	               |	ВТТЗ.К_P КАК IRR,
	               |	ВТТЗ.К_Q КАК CAD,
	               |	ВТТЗ.К_R КАК CNY,
	               |	ВТТЗ.К_S КАК KWD,
	               |	ВТТЗ.К_T КАК MYR,
	               |	ВТТЗ.К_U КАК MDL,
	               |	ВТТЗ.К_V КАК MNT,
	               |	ВТТЗ.К_W КАК TRY,
	               |	ВТТЗ.К_X КАК NZD,
	               |	ВТТЗ.К_Y КАК TWD,
	               |	ВТТЗ.К_Z КАК TMT,
	               |	ВТТЗ.К_AA КАК NOK,
	               |	ВТТЗ.К_AB КАК PKR,
	               |	ВТТЗ.К_AC КАК PLN,
	               |	ВТТЗ.К_AD КАК XDR,
	               |	ВТТЗ.К_AE КАК SGD,
	               |	ВТТЗ.К_AF КАК TJS,
	               |	ВТТЗ.К_AG КАК UZS,
	               |	ВТТЗ.К_AH КАК UAH,
	               |	ВТТЗ.К_AI КАК CZK,
	               |	ВТТЗ.К_AJ КАК SEK,
	               |	ВТТЗ.К_AK КАК CHF,
	               |	ВТТЗ.К_AL КАК JPY
	               |ПОМЕСТИТЬ ВТ2
	               |ИЗ
	               |	Вт_КаркасДат КАК Вт_КаркасДат
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВтТЗ КАК ВТТЗ
	               |		ПО Вт_КаркасДат.ДатаКаркаса >= ВТТЗ.К_A
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	""AUD"" КАК Валюта,
	               |	ВТ2.AUD КАК Курс,
	               |	ВТ2.ДатаКаркаса
	               |ПОМЕСТИТЬ ВтВалюты
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""AZN"",
	               |	ВТ2.AZN,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""GBP"",
	               |	ВТ2.GBP,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""AMD"",
	               |	ВТ2.AMD10,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""AFN"",
	               |	ВТ2.AFN,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""BYR"",
	               |	ВТ2.BYR100,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""BGN"",
	               |	ВТ2.BGN,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""BRL"",
	               |	ВТ2.BRL,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""HUF"",
	               |	ВТ2.HUF,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""KRW"",
	               |	ВТ2.KRW,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""GEL"",
	               |	ВТ2.GEL,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""DKK"",
	               |	ВТ2.DKK,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""AED"",
	               |	ВТ2.AED,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""INR"",
	               |	ВТ2.INR,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""IRR"",
	               |	ВТ2.IRR,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""CAD"",
	               |	ВТ2.CAD,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""CNY"",
	               |	ВТ2.CNY,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""KWD"",
	               |	ВТ2.KWD,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""MYR"",
	               |	ВТ2.MYR,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""MDL"",
	               |	ВТ2.MDL,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""MNT"",
	               |	ВТ2.MNT,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""AUD"",
	               |	ВТ2.AUD,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""TRY"",
	               |	ВТ2.TRY,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""NZD"",
	               |	ВТ2.NZD,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""TWD"",
	               |	ВТ2.TWD,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""TMT"",
	               |	ВТ2.TMT,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""NOK"",
	               |	ВТ2.NOK,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""PKR"",
	               |	ВТ2.PKR,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""PLN"",
	               |	ВТ2.PLN,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""XDR"",
	               |	ВТ2.XDR,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""SGD"",
	               |	ВТ2.SGD,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""TJS"",
	               |	ВТ2.TJS,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""UZS"",
	               |	ВТ2.UZS,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""UAH"",
	               |	ВТ2.UAH,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""CZK"",
	               |	ВТ2.CZK,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""SEK"",
	               |	ВТ2.SEK,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""CHF"",
	               |	ВТ2.CHF,
	               |	ВТ2.ДатаКаркаса
	               |ИЗ
	               |	ВТ2 КАК ВТ2
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВтВалюты.Валюта,
	               |	ВтВалюты.Курс,
	               |	ВтВалюты.ДатаКаркаса
	               |ИЗ
	               |	ВтВалюты КАК ВтВалюты
	               |ГДЕ
	               |	ВтВалюты.Валюта В(&Валюты)";

	Возврат ТекстЗапроса; 
	
КонецФункции  

#КонецОбласти
