
#Область ПрограммныйИнтерфейс

Функция ПолучитьСписокМакетовОформления() Экспорт
	
	СписокМакетовОформления = Новый СписокЗначений;
	
	Для Каждого ОбщийМакет Из Метаданные.ОбщиеМакеты Цикл
		Если ОбщийМакет.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.МакетОформленияКомпоновкиДанных Тогда
			СписокМакетовОформления.Добавить(ОбщийМакет.Имя, ОбщийМакет.Синоним);
		КонецЕсли;
	КонецЦикла;
	
	СписокМакетовОформления.Добавить("БезОформления", "Без оформления");
	СписокМакетовОформления.Добавить("Основной"     , "Основной");
	СписокМакетовОформления.Добавить("Яркий"        , "Яркий");
	СписокМакетовОформления.Добавить("Море"         , "Море");
	СписокМакетовОформления.Добавить("Арктика"      , "Арктика");
	СписокМакетовОформления.Добавить("Зеленый"      , "Зеленый");
	СписокМакетовОформления.Добавить("Античный"     , "Античный");
	
	Возврат СписокМакетовОформления;
	
КонецФункции

// Получает данные из регистра сведений Настройки отчетов
//
// Параметры:
//  ОбъектОтчет  - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Отчет для отбора
//
// Возвращаемое значение:
//   Структура   - настройки отчета
//
Функция ПолучитьНастройкиОтчета(ОбъектОтчет) Экспорт
	
	НастройкиОтчета = Новый Структура;
	НастройкиОтчета.Вставить("ВыводитьМестоДляШтампа", Ложь);
	
	НаборЗаписей = РегистрыСведений.НастройкиОтчетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектОтчет.Установить(ОбъектОтчет);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда 
		ЗаполнитьЗначенияСвойств(НастройкиОтчета, НаборЗаписей[0]);
	КонецЕсли;	
	
	Возврат НастройкиОтчета;
	
КонецФункции

// Функция - Получить имя макета оформления
// 
// Возвращаемое значение:
//  МакетОформления - Строка
//
Функция ПолучитьИмяМакетаОформления() Экспорт

	МакетОформления = Константы.МакетОформленияОтчетов.Получить();
	
	Если МакетОформления = "Бежевый" Тогда 
		Возврат "ОформлениеОтчетовБежевый";
	ИначеЕсли МакетОформления = "Строгий" Тогда	
		Возврат "ОформлениеОтчетовСтрогий";
	ИначеЕсли МакетОформления = "Черно-белый" Тогда	
		Возврат "ОформлениеОтчетовЧерноБелый";
	Иначе 
		Возврат МакетОформления;
	КонецЕсли;	

КонецФункции // ПолучитьИмяМакетаОформления()

// Получает список счетов расчетов с контрагентами
//  Параметры:
// 	ИсключенныеСчета - Массив - список счетов исключений,
// 
// Возвращаемое значение:
// 	Массив - Массив счетов
//		* СчетСсылка
//
Функция СчетаРасчетовСКонтрагентами(ИсключенныеСчета = Неопределено) Экспорт
	Если ИсключенныеСчета = Неопределено Тогда
		ИсключенныеСчета = Новый Массив;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсключенныеСчета", ИсключенныеСчета);	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВидыСубконтоКонтрагенты.Ссылка КАК Счет
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоКонтрагенты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоДоговоры
	               |		ПО ВидыСубконтоКонтрагенты.Ссылка = ВидыСубконтоДоговоры.Ссылка
	               |ГДЕ
	               |	ВидыСубконтоКонтрагенты.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	               |	И НЕ ВидыСубконтоКонтрагенты.Ссылка.Забалансовый
	               |	И НЕ ВидыСубконтоКонтрагенты.Ссылка В ИЕРАРХИИ (&ИсключенныеСчета)
	               |	И ВидыСубконтоДоговоры.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
КонецФункции

// Получает список счетов денежных средств.
//  Параметры:
// 	ИсключенныеСчета - Массив - список счетов исключений,
// 
// Возвращаемое значение:
// 	Массив - Массив счетов
//		* СчетСсылка
//
Функция СчетаУчетаОсновныхСредств(ИсключенныеСчета = Неопределено) Экспорт
	Если ИсключенныеСчета = Неопределено Тогда
		ИсключенныеСчета = Новый Массив;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсключенныеСчета", ИсключенныеСчета);	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВидыСубконтоДенежныеСредства.Ссылка КАК Счет
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоДенежныеСредства
	               |ГДЕ
	               |	ВидыСубконтоДенежныеСредства.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства)
	               |	И НЕ ВидыСубконтоДенежныеСредства.Ссылка.Забалансовый
	               |	И НЕ ВидыСубконтоДенежныеСредства.Ссылка В ИЕРАРХИИ (&ИсключенныеСчета)";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
КонецФункции

// Получает список счетов денежных средств.
//  Параметры:
// 	ИсключенныеСчета - Массив - список счетов исключений,
// 
// Возвращаемое значение:
// 	Массив - Массив счетов
//		* СчетСсылка
//
Функция СчетаУчетаДенежныхСредств(ИсключенныеСчета = Неопределено) Экспорт
	Если ИсключенныеСчета = Неопределено Тогда
		ИсключенныеСчета = Новый Массив;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсключенныеСчета", ИсключенныеСчета);	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВидыСубконтоДенежныеСредства.Ссылка КАК Счет
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоДенежныеСредства
	               |ГДЕ
	               |	ВидыСубконтоДенежныеСредства.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДенежныеСредства)
	               |	И НЕ ВидыСубконтоДенежныеСредства.Ссылка.Забалансовый
	               |	И НЕ ВидыСубконтоДенежныеСредства.Ссылка В ИЕРАРХИИ (&ИсключенныеСчета)";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
КонецФункции

#КонецОбласти