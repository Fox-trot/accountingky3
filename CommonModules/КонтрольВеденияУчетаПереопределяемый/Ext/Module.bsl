///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Позволяет задать общие настройки подсистемы.
//
// Параметры:
//   Настройки - Структура - настройки подсистемы:
//     * КартинкаИндикатораПроблем    - Картинка, которая будет выводиться в качестве
//                                      индикатора ошибки в колонке динамического списка
//                                      форм списков и на специальной панели форм объектов.
//     * ПояснениеИндикатораПроблем   - Строка - Поясняющая строка к ошибке.
//     * ГиперссылкаИндикатораПроблем - Строка - Текст гиперссылки, при нажатии на которую,
//                                      будет сформирован и открыт отчет с ошибками.
//
// Пример:
//   Настройки = Новый Структура;
//   Настройки.Вставить("КартинкаИндикатораПроблем",    БиблиотекаКартинок.Предупреждение);
//   Настройки.Вставить("ПояснениеИндикатораПроблем",   Неопределено);
//   Настройки.Вставить("ГиперссылкаИндикатораПроблем", Неопределено);
//
Процедура ПриОпределенииНастроек(Настройки) Экспорт
	
КонецПроцедуры

// Предназначена для подключения собственных правил проверки ведения учета.
//
// Параметры:
//   ГруппыПроверок - ТаблицаЗначений - Таблица, в которую добавляются группы проверок:
//      * Наименование                 - Строка - Наименование группы проверок.
//      * ИдентификаторГруппы          - Строка - Строковый идентификатор группы проверок, например: 
//                                       "СистемныеПроверки", "ЗакрытиеМесяца", "ПроверкиНДС" и т.п.
//                                       Обязателен для заполнения.
//      * Идентификатор                - Строка - Строковый идентификатор группы проверок. Обязателен для заполнения.
//                                       Для уникальности формат идентификатора следует выбирать следующим:
//                                       "<Название программного продукта>.<Идентификатор проверки>". 
//                                       Например: "СтандартныеПодсистемы.СистемныеПроверки".
//      * КонтекстПроверокВеденияУчета - ОпределяемыйТип.КонтекстПроверокВеденияУчета - значение, дополнительно
//                                       уточняющее принадлежность группы проверок ведения учета к определенной
//                                       категории.
//      * Комментарий                  - Строка - комментарий к группе проверок.
//
//   Проверки - ТаблицаЗначений - Таблица, в которую добавляются проверки:
//      * ИдентификаторГруппы          - Строка - Строковый идентификатор группы проверок, например: 
//                                                "СистемныеПроверки", "ЗакрытиеМесяца", "ПроверкиНДС" и т.п.
//                                                 Обязателен для заполнения.
//      * Наименование                 - Строка - Наименование проверки, выводимое пользователю.
//      * Причины                      - Строка - Описание возможных причин, которые приводят к возникновению проблемы.
//      * Рекомендация                 - Строка - Рекомендация по решению возникшей проблемы.
//      * Идентификатор                - Строка - Строковый идентификатор элемента. Обязателен для заполнения.
//                                                Формат идентификатора должен быть следующим:
//                                                <Название программного продукта>.<Идентификатор проверки>. Например:
//                                                СтандартныеПодсистемы.СистемныеПроверки.
//      * ДатаНачалаПроверки           - Дата - Пороговая дата, обозначающая границу проверяемых объектов
//                                              (только для объектов с датой, например, документов). Объекты, дата 
//                                              которых меньше указанной, не следует проверять. По умолчанию 
//                                              не заполнено (т.е. проверять все).
//      * ЛимитПроблем                 - Число - Количество проверяемых объектов. По умолчанию 1000. 
//                                               Если указан 0, то следует проверять все объекты.
//      * ОбработчикПроверки           - Строка - Имя экспортной процедуры-обработчика серверного общего модуля
//                                                в виде ИмяМодуля.ИмяПроцедуры.
//      * ОбработчикПереходаКИсправлению - Строка - Имя экспортной процедуры-обработчика клиентского общего модуля
//                                                  для перехода к исправлению проблемы в виде "ИмяМодуля.ИмяПроцедуры"
//                                                  или полное имя формы, которую следует открыть для исправления проблемы.
//                                                  Процедура-обработчик принимает на вход два параметра: 
//                                                    ПараметрыИсправления - Структура - со свойствами:
//                                                      ИдентификаторПроверки - Строка - строковый идентификатор проверки;
//                                                      ВидПроверки - СправочникСсылка.ВидыПроверок - вид проверки,
//                                                               дополнительно уточняющий область исправления проблемы;
//                                                    ДополнительныеПараметры - Неопределено - параметр не используется.
//                                                 При открытии формы в нее передаются такие же параметры, как свойства 
//                                                 указанной выше структуры ПараметрыИсправления.
//      * БезОбработчикаПроверки       - Булево - признак служебной проверки, которая не имеет процедуры-обработчика.
//      * ЗапрещеноИзменениеВажности   - Булево - Если Истина, то администратор не сможет перенастраивать 
//                                                важность данной проверки.
//      * КонтекстПроверокВеденияУчета - ОпределяемыйТип.КонтекстПроверокВеденияУчета - значение, дополнительно 
//                                                уточняющее принадлежность проверки ведения учета к определенной группе 
//                                                или категории.
//      * УточнениеКонтекстаПроверокВеденияУчета - ОпределяемыйТип.УточнениеКонтекстаПроверокВеденияУчета - второе значение, 
//                                                 дополнительно уточняющее принадлежность проверки ведения учета 
//                                                 к определенной группе или категории.
//      * ДополнительныеПараметры      - ХранилищеЗначений - Произвольная дополнительная информация о проверке
//                                                 для программного использования.
//      * Комментарий                  - Строка - текстовый комментарий к проверке.
//      * Отключена                    - Булево - если Истина, то проверка не будет выполняться в фоне по расписанию.
//
// Пример:
//   1) Добавление проверки
//      Проверка = Проверки.Добавить();
//      Проверка.ИдентификаторГруппы = "СистемныеПроверки";
//      Проверка.Наименование        = НСтр("ru='Демо: Проверка заполнения комментария в документах ""Демо: Поступление товаров""'");
//      Проверка.Причины             = НСтр("ru='Не введен комментарий в документе.'");
//      Проверка.Рекомендация        = НСтр("ru='Ввести комментарий в документе.'");
//      Проверка.Идентификатор       = "ПроверитьКомментарийВПоступленииТоваров";
//      Проверка.ОбработчикПроверки  = "_ДемоСтандартныеПодсистемы.ПроверитьКомментарийВПоступленииТоваров";
//      Проверка.ДатаНачалаПроверки  = Дата('20140101000000');
//      Проверка.ЛимитПроблем        = 3;
//   2) Добавление группы проверок
//      ГруппаПроверок = ГруппыПроверок.Добавить();
//      ГруппаПроверок.Наименование                 = НСтр("ru='Системные проверки'");
//      ГруппаПроверок.Идентификатор                = "СтандартныеПодсистемы.СистемныеПроверки";
//      ГруппаПроверок.КонтекстПроверокВеденияУчета = "СистемныеПроверки";
//
Процедура ПриОпределенииПроверок(ГруппыПроверок, Проверки) Экспорт
	
	// БПКР
	// 1. План счетов.
	ГруппаПроверок = ГруппыПроверок.Добавить();
	ГруппаПроверок.Наименование    = НСтр("ru='1. План счетов'");
	ГруппаПроверок.Идентификатор   = "ПланСчетов";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы	      = "ПланСчетов";
	Проверка.ИдентификаторРодителя        = "ПланСчетов";
	Проверка.Наименование                 = НСтр("ru='Проверка наличия субконто ДОГОВОРЫ (Склады) без субконто КОНТРАГЕНТЫ (Номенклатура)'");
	Проверка.Причины                      = НСтр("ru='Если у счета есть субконто Договоры, то обязательно должно быть субконто Контрагенты. 
													 |Если у счета есть субконто Склады,  то обязательно должно быть субконто Номенклатура.'");
	Проверка.Рекомендация                 = НСтр("ru='Добавьте счету необходимое субконто.'");
	Проверка.Идентификатор                = "ПроверкаСубконтоКонтрагентыИНоменклатура";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаПереопределяемый.ПроверкаСубконтоКонтрагентыИНоменклатура";
	Проверка.КонтекстПроверокВеденияУчета = "ПланСчетов";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы	      = "ПланСчетов";
	Проверка.ИдентификаторРодителя        = "ПланСчетов";
	Проверка.Наименование                 = НСтр("ru='Проверка счетов денежных средств'");
	Проверка.Причины                      = НСтр("ru='У счетов 11хх и 12хх должны быть субконто ""Денежные средства"" и ""Статьи движения денежных средств"" и только они. 
													 |У других счетов не должно быть субконто ""Денежные средства"".'");
	Проверка.Рекомендация                 = НСтр("ru='Исправьте отсутствие(присутствие) необходимых субконто счета.'");
	Проверка.Идентификатор                = "ПроверкаСубконтоДС_СДДС";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаПереопределяемый.ПроверкаСубконтоДС_СДДС";
	Проверка.КонтекстПроверокВеденияУчета = "ПланСчетов";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы	      = "ПланСчетов";
	Проверка.ИдентификаторРодителя        = "ПланСчетов";
	Проверка.Наименование                 = НСтр("ru='Проверка счетов 6,7,8,9'");
	Проверка.Причины                      = НСтр("ru='Должен быть признак ""Временный"". 
													 |У всех остальных счетов не должно быть признака ""Временный"".
													 |Не должно быть признаков ""Валютный"", ""Количественный"".
													 |У всех видов субконто должен быть признак ""Только обороты"".
													 |Если счет не является группой то для него должна быть указана счет-группа.'");
	Проверка.Рекомендация                 = НСтр("ru='Исправьте отсутствие(присутствие) необходимых признаков счета.'");
	Проверка.Идентификатор                = "ПроверкаПризнаковСчета";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаПереопределяемый.ПроверкаПризнаковСчета";
	Проверка.КонтекстПроверокВеденияУчета = "ПланСчетов";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы	      = "ПланСчетов";
	Проверка.ИдентификаторРодителя        = "ПланСчетов";
	Проверка.Наименование                 = НСтр("ru='Проверка правильности указания пар счетов'");
	Проверка.Причины                      = НСтр("ru='Парный счет указывается только для счетов 1ххх и 2ххх. 
													 |Каждый парный счет указывается только  для одного счета.
													 |Для счета 1ххх парный счет должен быть 3ххх.
													 |Для счета 21хх или 29хх парный счет должен быть также 21хх или 29хх.
													 |Для прочих счетов 2ххх парный счет должен быть 4ххх.
													 |Для парных счетов кроме 21хх и 29хх все признаки, субконто и признаки субконто должны совпадать.
													 |Один счет пары должен быть активным, а второй – пассивным.'");
	Проверка.Рекомендация                 = НСтр("ru='Исправьте парный счет или свойства парных счетов.'");
	Проверка.Идентификатор                = "ПроверкаПарныхСчетов";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаПереопределяемый.ПроверкаПарныхСчетов";
	Проверка.КонтекстПроверокВеденияУчета = "ПланСчетов";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы	      = "ПланСчетов";
	Проверка.ИдентификаторРодителя        = "ПланСчетов";
	Проверка.Наименование                 = НСтр("ru='Проверка правильности признака ""Валютный""'");
	Проверка.Причины                      = НСтр("ru='Признак ""Валютный"" может указываться для счетов с субконто Контрагенты и Договоры. 
													 |Признак ""Валютный"" может указываться для счетов с субконто Денежные средства.
													 |Признак ""Валютный"" может указываться для счета 1520.
													 |Для других счетов признак ""Валютный"" не указывается.'");
	Проверка.Рекомендация                 = НСтр("ru='Исправьте признак ""Валютный"" счета.'");
	Проверка.Идентификатор                = "ПроверкаПризнакаВалютный";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаПереопределяемый.ПроверкаПризнакаВалютный";
	Проверка.КонтекстПроверокВеденияУчета = "ПланСчетов";	
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы	      = "ПланСчетов";
	Проверка.ИдентификаторРодителя        = "ПланСчетов";
	Проверка.Наименование                 = НСтр("ru='Проверка правильности ""Активно-пассивных счетов""'");
	Проверка.Причины                      = НСтр("ru='Активно-пассивные счета должны иметь первым субконто ""Контрагенты"" или ""Работники (Физические лица)"". 
													 |Активно-пассивными могут быть только счета 14хх, 15хх, 31хх, 34хх, 35хх, 0000, 5ххх, 9000, 9800, Zхххх.'");
	Проверка.Рекомендация                 = НСтр("ru='Исправьте свойство счета ""Вид счета"".'");
	Проверка.Идентификатор                = "ПроверкаПризнакаАктивно_Пассивный";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаПереопределяемый.ПроверкаПризнакаАктивно_Пассивный";
	Проверка.КонтекстПроверокВеденияУчета = "ПланСчетов";
	   	
	// 2. Денежные средства.
	ГруппаПроверок = ГруппыПроверок.Добавить();
	ГруппаПроверок.Наименование    = НСтр("ru='2. Денежные средства'");
	ГруппаПроверок.Идентификатор   = "ДенежныеСредства";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы	      = "ДенежныеСредства";
	Проверка.ИдентификаторРодителя        = "ДенежныеСредства";
	Проверка.Наименование                 = НСтр("ru='Проверка заполнения валютной суммы в вводе начальных остатков'");
	Проверка.Причины                      = НСтр("ru='В документе ""Ввод начальных остатков"", с разделом учета ""Прочее"", 
													 |должны быть заполнена валютная сумма, если выбран счет учета с признаком ""Валютный"".'");
	Проверка.Рекомендация                 = НСтр("ru='Зайдите в документ и заполните валютную сумму.'");
	Проверка.Идентификатор                = "ПроверкаЗаполненияВалютнойСуммыВВводеНачальныхОстатков";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаПереопределяемый.ПроверкаЗаполненияВалютнойСуммыВВводеНачальныхОстатков";
	Проверка.КонтекстПроверокВеденияУчета = "ДенежныеСредства";

	// 4. Запасы.
	ГруппаПроверок = ГруппыПроверок.Добавить();
	ГруппаПроверок.Наименование    = НСтр("ru='4. Запасы'");
	ГруппаПроверок.Идентификатор   = "Запасы";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы	      = "Запасы";
	Проверка.ИдентификаторРодителя        = "Запасы";
	Проверка.Наименование                 = НСтр("ru='Проверка соответсвия сумм списания ТМЗ и первоначальной стоимости
													 |в документах принятия ОС к учету для операции ""Оборудование""'");
	Проверка.Причины                      = НСтр("ru='Если принято ОС к учету по себестоимости ТМЗ, а затем были отредактированы суммы ТМЗ ""задним числом"", 
													 |то первоначальная стоимость ОС тоже изменится.'");
	Проверка.Рекомендация                 = НСтр("ru='Перезаполните первоначальную стоимость и проведите документ.'");
	Проверка.Идентификатор                = "ПроверкаСоответствияСуммТМЗ_И_ОС";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаПереопределяемый.ПроверкаСоответствияСуммТМЗ_И_ОС";
	Проверка.КонтекстПроверокВеденияУчета = "Запасы";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы	      = "Запасы";
	Проверка.ИдентификаторРодителя        = "Запасы";
	Проверка.Наименование                 = НСтр("ru='Проверка счета на признак ""Количественный"" в вводе начальных остатков'");
	Проверка.Причины                      = НСтр("ru='В документе ""Ввод начальных остатков"", с разделом учета ""Запасы"", 
													 |должны быть выбран счет учета БУ с признаком ""Количественный"".'");
	Проверка.Рекомендация                 = НСтр("ru='Зайдите в документ и выберите счет с установленным признаком ""Количественный"".'");
	Проверка.Идентификатор                = "ПроверкаУказанияКоличественногоСчетаВВводеНачальныхОстатков";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаПереопределяемый.ПроверкаУказанияКоличественногоСчетаВВводеНачальныхОстатков";
	Проверка.КонтекстПроверокВеденияУчета = "Запасы";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы	      = "Запасы";
	Проверка.ИдентификаторРодителя        = "Запасы";
	Проверка.Наименование                 = НСтр("ru='Проверка счета оприходования в документе ""Оприходование товаров""'");
	Проверка.Причины                      = НСтр("ru='В документе ""Оприходование товаров"" в табличной части ""Товары"" 
													 |в поле колонке ""Счет оприходования"" должен быть указан счет дохода (6ххх или 91хх).'");
	Проверка.Рекомендация                 = НСтр("ru='Зайдите в документ и выберите счет дохода.'");
	Проверка.Идентификатор                = "ПроверкаСчетаОприходованияДокумента_ОприходованиеТоваров";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаПереопределяемый.ПроверкаСчетаОприходованияДокумента_ОприходованиеТоваров";
	Проверка.КонтекстПроверокВеденияУчета = "Запасы";
	
	// 5. ОС и НМА.
	ГруппаПроверок = ГруппыПроверок.Добавить();
	ГруппаПроверок.Наименование    = НСтр("ru='5. ОС и НМА'");
	ГруппаПроверок.Идентификатор   = "ОСИНМА";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы	      = "ОСИНМА";
	Проверка.ИдентификаторРодителя        = "ОСИНМА";
	Проверка.Наименование                 = НСтр("ru='Проверка наличия принятого ОС и сальдо на счете учета'");
	Проверка.Причины                      = НСтр("ru='Для используемого ОС нет документа поступления или принятия у учету.
														|Есть сальдо на счете амортизации, но нет сальдо на счете учета.'");
	Проверка.Рекомендация                 = НСтр("ru='Проверьте наличие документа поступления для ОС, счет учета, сальдо по счету.'");
	Проверка.Идентификатор                = "ПроверкаПоступленияИСальдоНаСчетеОС";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаПереопределяемый.ПроверкаПоступленияИСальдоНаСчетеОС";
	Проверка.КонтекстПроверокВеденияУчета = "ОСИНМА";
	
	// 7. Налоги.
	ГруппаПроверок = ГруппыПроверок.Добавить();
	ГруппаПроверок.Наименование    = НСтр("ru='7. Налоги'");
	ГруппаПроверок.Идентификатор   = "Налоги";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы	      = "Налоги";
	Проверка.ИдентификаторРодителя        = "Налоги";
	Проверка.Наименование                 = НСтр("ru='Проверка счетов в настройках налоговой декларации.'");
	Проверка.Причины                      = НСтр("ru='В настройках налоговой декларации неверно настроены счета,
														|или отсутствуют счета, или повторяются света в разных строках.'");
	Проверка.Рекомендация                 = НСтр("ru='Заполните счета в настройках налоговой декларации.'");
	Проверка.Идентификатор                = "ПроверкаСчетовВНастройкахНалоговойДекларации";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаПереопределяемый.ПроверкаСчетовВНастройкахНалоговойДекларации";
	Проверка.КонтекстПроверокВеденияУчета = "Налоги";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы	      = "Налоги";
	Проверка.ИдентификаторРодителя        = "Налоги";
	Проверка.Наименование                 = НСтр("ru='Проверка заполнения группы НУ.'");
	Проверка.Причины                      = НСтр("ru='Незаполненная группа НУ в принятии к учету или вводу начальных остатков,
														|при условии что первоначальная стоимость больше или равна минимальной стоимости ОС для НУ.
														|Минимальная стоимость ОС для НУ указывается в учетной политике организации.'");
	Проверка.Рекомендация                 = НСтр("ru='Заполните группа НУ для оснонвных средств.'");
	Проверка.Идентификатор                = "ПроверкаЗаполненияГруппыНУ";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаПереопределяемый.ПроверкаЗаполненияГруппыНУ";
	Проверка.КонтекстПроверокВеденияУчета = "Налоги";
	
	// 8. Настройки и справочники.
	ГруппаПроверок = ГруппыПроверок.Добавить();
	ГруппаПроверок.Наименование    = НСтр("ru='8. Настройки и справочники'");
	ГруппаПроверок.Идентификатор   = "НастройкиИСправочники";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы	      = "НастройкиИСправочники";
	Проверка.ИдентификаторРодителя        = "НастройкиИСправочники";
	Проверка.Наименование                 = НСтр("ru='Проверка основного договора с видом ""Прочее"".'");
	Проверка.Причины                      = НСтр("ru='В элементе справочника ""Организации"" выбран контрагент ГНС,
														|у которого нет основного договора с видом ""Прочее"".'");
	Проверка.Рекомендация                 = НСтр("ru='Создайте у выбранного контрагента ГНС договор с видом ""Прочее"" и укажите его основным 
														|или выберите другого контрагента, у которого есть основной договор с видом ""Прочее"".'");
	Проверка.Идентификатор                = "ПроверкаОсновногоДоговораСВидом_Прочее";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаПереопределяемый.ПроверкаОсновногоДоговораСВидом_Прочее";
	Проверка.КонтекстПроверокВеденияУчета = "НастройкиИСправочники";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы	      = "НастройкиИСправочники";
	Проверка.ИдентификаторРодителя        = "НастройкиИСправочники";
	Проверка.Наименование                 = НСтр("ru='Проверка признака ""Участник ЕАЭС"" у стран.'");
	Проверка.Причины                      = НСтр("ru='В элементе справочника ""Страны мира"" неверно указан признак ""Участник ЕАЭС"".'");
	Проверка.Рекомендация                 = НСтр("ru='В элементе справочника ""Страны мира"" необходимо установить или снять признак ""Участник ЕАЭС"".'");
	Проверка.Идентификатор                = "ПроверкаПризнакаСтраны_УчастникЕАЭС";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаПереопределяемый.ПроверкаПризнакаСтраны_УчастникЕАЭС";
	Проверка.КонтекстПроверокВеденияУчета = "НастройкиИСправочники";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы	      = "НастройкиИСправочники";
	Проверка.ИдентификаторРодителя        = "НастройкиИСправочники";
	Проверка.Наименование                 = НСтр("ru='Проверка признака страны у контрагентов.'");
	Проверка.Причины                      = НСтр("ru='В элементе справочника ""Контрагенты"" неверно указан признак страны.'");
	Проверка.Рекомендация                 = НСтр("ru='В элементе справочника ""Страны мира"" необходимо перевыбрать страну резиденства.
														|Если это не помогло, то необходимо проверить элемент справочника ""Страны мира"".'");
	Проверка.Идентификатор                = "ПроверкаПризнакаСтраныКонтрагента";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаПереопределяемый.ПроверкаПризнакаСтраныКонтрагента";
	Проверка.КонтекстПроверокВеденияУчета = "НастройкиИСправочники";
	
	// 9. Общее.
	ГруппаПроверок = ГруппыПроверок.Добавить();
	ГруппаПроверок.Наименование    = НСтр("ru='9. Общее'");
	ГруппаПроверок.Идентификатор   = "Общее";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы	      = "Общее";
	Проверка.ИдентификаторРодителя        = "Общее";
	Проверка.Наименование                 = НСтр("ru='Проверка проведения вводов начальных остатков первыми (по дате) документами в базе.'");
	Проверка.Причины                      = НСтр("ru='Документы ""Ввод начальных остатков"" должны быть первыми введены в базу.
														|Проверка происходит по дате проведения документа (вплоть до секунды).'");
	Проверка.Рекомендация                 = НСтр("ru='Необходимо перепровести все документы, не являющиеся вводом начальных остатков, установив дату позже, чем дата самого позднего ввода начальных остатков.'");
	Проверка.Идентификатор                = "ПроверкаВводаНачальныхОстатковНаПервенствоПоДате";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаПереопределяемый.ПроверкаВводаНачальныхОстатковНаПервенствоПоДате";
	Проверка.КонтекстПроверокВеденияУчета = "Общее";	
	
	// Временно пустые группы.
	// 3. Покупка и продажа.
	ГруппаПроверок = ГруппыПроверок.Добавить();
	ГруппаПроверок.Наименование    = НСтр("ru='3. Покупка и продажа'");
	ГруппаПроверок.Идентификатор   = "ПокупкаИПродажа";
	// Конец БПКР

КонецПроцедуры

// Позволяет настроить положение индикатора о проблемах в формах объектов.
//
// Параметры:
//   ПараметрыГруппыИндикации - Структура - выходные параметры индикатора:
//     * ВыводитьСнизу     - Булево - Если указать Истина, то группа индикатора будет выводиться самой последней 
//                           в форме или в конце указанной группе элементов ИмяРодителяГруппы.
//                           По умолчанию Ложь - группа выводится в начале указанной группе ИмяРодителяГруппы или 
//                           сразу под командной панелью формы объекта.
//     * ИмяРодителяГруппы - Строка - Определяет имя группы элементов формы объекта, внутри которой должна 
//                           располагаться группа индикации.
//
//   ТипСсылки - Тип - Тип ссылки, для которой переопределяются параметры группы индикации.
//                     Например, Тип("ДокументСсылка.НачислениеЗарплаты").
//
Процедура ПриОпределенииПараметровГруппыИндикации(ПараметрыГруппыИндикации, Знач ТипСсылки) Экспорт
	
	
	
КонецПроцедуры

// Позволяет настроить внешний вид и положение колонки-индикатора о проблемах в формах списков
// (с динамическим списком).
//
// Параметры:
//   ПараметрыКолонкиИндикации - Структура - выходные параметры индикатора:
//     * ВыводитьПоследней  - Булево - Если указать Истина, то колонка-индикатор будет выводиться в конце.
//                            По умолчанию Ложь - колонка выводится в начале.
//     * ПоложениеЗаголовка - ПоложениеЗаголовкаЭлементаФормы - Задает положение заголовка колонки-индикатора.
//     * Ширина             - Число - Ширина колонки-индикатора.
//
//   ПолноеИмя - Строка - Полное имя объекта основной таблицы динамического списка.
//                        Например, Метаданные.Документы.НачислениеЗарплаты.ПолноеИмя().
//
Процедура ПриОпределенииПараметровКолонкиИндикации(ПараметрыКолонкиИндикации, ПолноеИмя) Экспорт
	
	
	
КонецПроцедуры

// Позволяет дозаполнить информацию о проблеме перед ее регистрацией.
// В частности, можно заполнить дополнительные значения для ограничения доступа на уровне записей 
// к списку проблем ведения учета.
//
// Параметры:
//   Проблема - Структура - Сформированная алгоритмом проверки информация о проблеме:
//     * ПроблемныйОбъект         - ЛюбаяСсылка - объект, по поводу которого записывается проблема.
//                                                Либо ссылка на элемент справочника ИдентификаторыОбъектовМетаданных
//     * ПравилоПроверки          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на выполненную проверку.
//     * ВидПроверки              - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к которому 
//                                  относится выполненная проверка.
//     * КлючУникальности         - УникальныйИдентификатор - Ключ уникальности проблемы.
//     * УточнениеПроблемы        - Строка - Строка-уточнение найденной проблемы.
//     * ВажностьПроблемы         - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                  Информация, Предупреждение, Ошибка, ПолезныйСовет и ВажнаяИнформация.
//     * Ответственный            - СправочникСсылка.Пользователи - Заполнен если есть возможность
//                                  идентифицировать ответственного в проблемном объекте.
//     * ИгнорироватьПроблему     - Булево - Флаг игнорирования проблемы. Если имеет значение "Истина",
//                                  запись о проблеме игнорируется подсистемой.
//     * ДополнительнаяИнформация - ХранилищеЗначений - Служебное свойство с дополнительными
//                                  сведениями, связанными с выявленной проблемой.
//     * Выявлено                 - Дата - Серверное время идентификации проблемы.
//
//   СсылкаНаОбъект  - ЛюбаяСсылка - Ссылка на объект-источник значения для добавляемых
//                     дополнительных измерений.
//   Реквизиты       - КоллекцияОбъектовМетаданных - Коллекция, содержащая реквизиты объекта-
//                     источника проблем.
//
Процедура ПередЗаписьюПроблемы(Проблема, СсылкаНаОбъект, Реквизиты) Экспорт
	
	// БПКР
	Если Реквизиты.Найти("Организация") <> Неопределено Тогда
		Проблема.Вставить("Организация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Организация"));
	КонецЕсли;
	// Конец БПКР
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела: Следует использовать функцию ПриОпределенииПроверок.
// Предназначена для подключения собственных правил проверки ведения учета.
//
// Параметры:
//   ГруппыПроверок - ТаблицаЗначений - Таблица, в которую добавляются группы проверок:
//      * Наименование  - Строка - Наименование группы проверок, например: "Системные проверки".
//      * Идентификатор - Строка - Строковый идентификатор группы, например: "СистемныеПроверки".
//
//   Проверки - ТаблицаЗначений - Таблица, в которую добавляются проверки:
//      * Наименование                   - Строка - Наименование элемента проверки. Обязательно для заполнения.
//      * Причины                        - Строка - Возможные причины, которые привели к возникновению проблемы.
//                                                  Выводятся в отчете о проблемах. Необязательно для заполнения.
//      * Рекомендация                   - Строка - Рекомендация по решению возникшей проблемы.
//                                                  Выводятся в отчете о проблемах. Необязательно для заполнения.
//      * Идентификатор                  - Строка - Строковый идентификатор проверки. Обязателен для заполнения.
//      * ИдентификаторРодителя          - Строка - Строковый идентификатор группы проверок, например: "СистемныеПроверки".
//                                                  Обязательно для заполнения.
//      * ДатаНачалаПроверки             - Дата - Пороговая дата, обозначающая границу проверяемых
//                                         объектов (только для объектов с датой). Объекты, дата которых меньше
//                                         указанной, не следует проверять. По умолчанию не заполнено (т.е. проверять все).
//      * ЛимитПроблем                   - Число - Максимальное количество проверяемых объектов.
//                                         По умолчанию 0 - следует проверить все объекты.
//      * ОбработчикПроверки             - Строка - Имя экспортной процедуры-обработчика проверки в серверном общем модуле.
//                                         Предназначен для поиска и регистрации проблем ведения учета.
//                                         Параметры обработчика проверки:
//                                           * Проверка - СправочникСсылка.ПравилаПроверкиУчета - исполняемая проверка.
//                                           * ПараметрыПроверки - Структура - Параметры проверки, которую необходимо выполнить.
//                                                                             Подробнее см. в документации.
//      * ОбработчикПереходаКИсправлению - Строка - Имя экспортной процедуры-обработчика исправления проблемы 
//                                         в клиентском общем модуле или полное имя формы, которая будет открыта для
//                                         исправления проблемы. Параметры обработчика исправления проблемы или формы:
//                                          * ИдентификаторПроверки - Строка - идентификатор проверки, 
//                                                                    которая выявила проблему.
//                                          * ВидПроверки - СправочникСсылка.ВидыПроверок - вид проверки 
//                                                          с дополнительной информацией о проблеме.
//      * ДополнительныеПараметры        - ХранилищеЗначений - Дополнительная информация по проверке.
//
// Пример:
//   Проверка = Проверки.Добавить();
//   Проверка.ИдентификаторГруппы = "СистемныеПроверки";
//   Проверка.Наименование        = НСтр("ru='Демо: Проверка заполнения комментария в документах ""Демо: Поступление товаров""'");
//   Проверка.Причины             = НСтр("ru='Не введен комментарий в документе.'");
//   Проверка.Рекомендация        = НСтр("ru='Ввести комментарий в документе.'");
//   Проверка.Идентификатор       = "ПроверитьКомментарийВПоступленииТоваров";
//   Проверка.ОбработчикПроверки  = "_ДемоСтандартныеПодсистемы.ПроверитьКомментарийВПоступленииТоваров";
//   Проверка.ДатаНачалаПроверки  = Дата('20140101000000');
//   Проверка.ЛимитПроблем        = 3;
//
Процедура ПриОпределенииПрикладныхПроверок(ГруппыПроверок, Проверки) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБП

// Проверяет счета с субконто "Договоры" и "Склады".
//
// Параметры:
//   Проверка          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на правило проверки, которая выполнялась.
//   ПараметрыПроверки - Структура - Сформированная алгоритмом проверки структура проблемы.
//      * Идентификатор                     - Строка - Строковый идентификатор проверки.
//      * Представление                     - Строка - Пользовательское представление проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                            соответствующего проверке.
//      * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                            объектов (только для объектов с датой). Объекты, дата которых
//                                            меньше указанной, не следует проверять. По умолчанию не 
//                                            заполнено (т.е. проверять все).
//      * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                            По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки                  - Число - Очередная итерация проверки. Используется совместно с параметром
//                                            ЛимитПроблем для определения предельного количества итераций.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на
//                                            выполненную проверку.
//      * ВидПроверки                       - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к
//                                            которому относится выполненная проверка.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
Процедура ПроверкаСубконтоКонтрагентыИНоменклатура(Проверка, ПараметрыПроверки) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)
		|		ИЛИ Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады)";
	Выборка = Запрос.Выполнить().Выбрать();

	СтруктураПоискаДоговора = Новый Структура();
	СтруктураПоискаДоговора.Вставить("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	СтруктураПоискаКонтрагента = Новый Структура();
	СтруктураПоискаКонтрагента.Вставить("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	                                                                                                             
	СтруктураПоискаНоменклатуры = Новый Структура();
	СтруктураПоискаНоменклатуры.Вставить("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	Пока Выборка.Следующий() Цикл
		Ошибка = Ложь;
		
		Если Выборка.Ссылка.ВидыСубконто.НайтиСтроки(СтруктураПоискаДоговора).Количество() > 0 Тогда
			Если Выборка.Ссылка.ВидыСубконто.НайтиСтроки(СтруктураПоискаКонтрагента).Количество() = 0 Тогда	
				Ошибка = Истина;
				ТекстУточнения = НСтр("ru = 'Обнаружен субконто ""Договоры"" но отсутствует субконто ""Контрагенты"":'") + Символы.ПС;
			КонецЕсли;
			
		Иначе
			Если Выборка.Ссылка.ВидыСубконто.НайтиСтроки(СтруктураПоискаНоменклатуры).Количество() = 0 Тогда	
				Ошибка = Истина;
				ТекстУточнения = НСтр("ru = 'Обнаружен субконто ""Склады"" но отсутствует субконто ""Номенклатура"":'") + Символы.ПС;
			КонецЕсли;	
		КонецЕсли;
		
		Если Ошибка Тогда
			Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(Выборка.Ссылка, ПараметрыПроверки);
			Проблема.УточнениеПроблемы = ТекстУточнения;
			КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры

// Проверяет счета с субконто "ДенежныеСредства" и "СтатьиДвиженияДенежныхСредств".
//
// Параметры:
//   Проверка          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на правило проверки, которая выполнялась.
//   ПараметрыПроверки - Структура - Сформированная алгоритмом проверки структура проблемы.
//      * Идентификатор                     - Строка - Строковый идентификатор проверки.
//      * Представление                     - Строка - Пользовательское представление проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                            соответствующего проверке.
//      * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                            объектов (только для объектов с датой). Объекты, дата которых
//                                            меньше указанной, не следует проверять. По умолчанию не 
//                                            заполнено (т.е. проверять все).
//      * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                            По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки                  - Число - Очередная итерация проверки. Используется совместно с параметром
//                                            ЛимитПроблем для определения предельного количества итераций.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на
//                                            выполненную проверку.
//      * ВидПроверки                       - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к
//                                            которому относится выполненная проверка.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
Процедура ПроверкаСубконтоДС_СДДС(Проверка, ПараметрыПроверки) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	(Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеСредстваВКассе)
		|			ИЛИ Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеСредстваВБанке))
		|	И Хозрасчетный.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеСредстваВПути)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	НЕ(Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеСредстваВКассе)
		|				ИЛИ Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеСредстваВБанке))
		|	И Хозрасчетный.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеСредстваОграниченныеКИспользованию)";
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураПоискаДС = Новый Структура();
	СтруктураПоискаДС.Вставить("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДенежныеСредства);
	
	СтруктураПоискаСДДС = Новый Структура();
	СтруктураПоискаСДДС.Вставить("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств);
	
	ВыборкаСчетовДС_СДДС = МассивРезультатов[0].Выбрать();
	
	Пока ВыборкаСчетовДС_СДДС.Следующий() Цикл
		
		ВидыСубконто = ВыборкаСчетовДС_СДДС.Ссылка.ВидыСубконто;
		Ошибка = Ложь;
		
		Если ВидыСубконто.НайтиСтроки(СтруктураПоискаДС).Количество() = 0 Тогда
			Ошибка = Истина;
			ТекстУточнения = НСтр("ru = 'У счета не обнаружено субконто ""Денежные средства"".'") + Символы.ПС;
		КонецЕсли;
				
		Если ВидыСубконто.НайтиСтроки(СтруктураПоискаСДДС).Количество() = 0 Тогда
			Если Ошибка Тогда
				ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
										  |У счета не обнаружено субконто ""Статья движения денежных средств"".'"), ТекстУточнения);
			Иначе
				ТекстУточнения = НСтр("ru = 'У счета не обнаружено субконто ""Статья движения денежных средств"".'") + Символы.ПС;
			КонецЕсли;
			
			Ошибка = Истина;
		КонецЕсли;
		
		Если ВидыСубконто.Количество() < 2 Тогда
			Если Ошибка Тогда
				ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
										  |У счета не хватает субконто.'"), ТекстУточнения);
			Иначе
				ТекстУточнения = НСтр("ru = 'У счета не хватает субконто.'") + Символы.ПС;
			КонецЕсли;
			
			Ошибка = Истина;			
		КонецЕсли;
		
		Если ВидыСубконто.Количество() > 2 Тогда
			Если Ошибка Тогда
				ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
										  |У счета лишнее субконто.'"), ТекстУточнения);
			Иначе
				ТекстУточнения = НСтр("ru = 'У счета лишнее субконто.'") + Символы.ПС;
			КонецЕсли;
			
			Ошибка = Истина;			
		КонецЕсли;
		
		Если Ошибка Тогда
			Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(ВыборкаСчетовДС_СДДС.Ссылка, ПараметрыПроверки);
			Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = '%1'"),ТекстУточнения);
			КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);	
		КонецЕсли;
	КонецЦикла;

	ВыборкаОстальныхСчетов = МассивРезультатов[1].Выбрать();
	
	Пока ВыборкаОстальныхСчетов.Следующий() Цикл
		
		ВидыСубконто = ВыборкаОстальныхСчетов.Ссылка.ВидыСубконто;
		Ошибка = Ложь;
		
		Если ВидыСубконто.НайтиСтроки(СтруктураПоискаДС).Количество() > 0 Тогда	
			Ошибка = Истина;
			ТекстУточнения = НСтр("ru = 'У счета обнаружено субконто ""Денежные средства"".'") + Символы.ПС;
		КонецЕсли;
			
		Если ВидыСубконто.НайтиСтроки(СтруктураПоискаСДДС).Количество() > 0 Тогда
			Если Ошибка Тогда
				ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
										  |У счета обнаружено субконто ""Статья движения денежных средств"".'"), ТекстУточнения);
			Иначе
				ТекстУточнения = НСтр("ru = 'У счета обнаружено субконто ""Статья движения денежных средств"".'") + Символы.ПС;
			КонецЕсли;
			
			Ошибка = Истина;			
		КонецЕсли;
		
		Если Ошибка Тогда
			Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(ВыборкаОстальныхСчетов.Ссылка, ПараметрыПроверки);
			Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = '%1'"),ТекстУточнения);
			КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Проверяет признаки и признаки субконто счетов 6ххх, 7ххх, 8ххх, 9ххх.
//
// Параметры:
//   Проверка          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на правило проверки, которая выполнялась.
//   ПараметрыПроверки - Структура - Сформированная алгоритмом проверки структура проблемы.
//      * Идентификатор                     - Строка - Строковый идентификатор проверки.
//      * Представление                     - Строка - Пользовательское представление проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                            соответствующего проверке.
//      * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                            объектов (только для объектов с датой). Объекты, дата которых
//                                            меньше указанной, не следует проверять. По умолчанию не 
//                                            заполнено (т.е. проверять все).
//      * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                            По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки                  - Число - Очередная итерация проверки. Используется совместно с параметром
//                                            ЛимитПроблем для определения предельного количества итераций.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на
//                                            выполненную проверку.
//      * ВидПроверки                       - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к
//                                            которому относится выполненная проверка.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
Процедура ПроверкаПризнаковСчета(Проверка, ПараметрыПроверки) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Ссылка,
		|	Хозрасчетный.Временный КАК Временный,
		|	Хозрасчетный.Валютный КАК Валютный,
		|	Хозрасчетный.Количественный КАК Количественный
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
		|	И (ПОДСТРОКА(Хозрасчетный.Код, 0, 1) = ""6""
		|		  ИЛИ ПОДСТРОКА(Хозрасчетный.Код, 0, 1) = ""7""
		|		  ИЛИ ПОДСТРОКА(Хозрасчетный.Код, 0, 1) = ""8""
		|		  ИЛИ ПОДСТРОКА(Хозрасчетный.Код, 0, 1) = ""9"")
		|;
		|
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Временный
		|	И НЕ(ПОДСТРОКА(Хозрасчетный.Код, 0, 1) = ""6""
		|		    ИЛИ ПОДСТРОКА(Хозрасчетный.Код, 0, 1) = ""7""
		|		    ИЛИ ПОДСТРОКА(Хозрасчетный.Код, 0, 1) = ""8""
		|		    ИЛИ ПОДСТРОКА(Хозрасчетный.Код, 0, 1) = ""9"")";
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ТолькоОбороты", Ложь);
	
	ВыборкаСчетов6789 = МассивРезультатов[0].Выбрать();		

	Пока ВыборкаСчетов6789.Следующий() Цикл
		Ошибка = Ложь;
		
		Если ВыборкаСчетов6789.Ссылка.ВидыСубконто.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
			Ошибка = Истина;
			ТекстУточнения = НСтр("ru = 'У субконто счета не установлен признак ""Только обороты"".'") + Символы.ПС;
		КонецЕсли;
				
		Если НЕ ВыборкаСчетов6789.Временный Тогда
			Если Ошибка Тогда
				ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
										  |У счета не указан признак ""Временный"".'"), ТекстУточнения);
			Иначе
				ТекстУточнения = НСтр("ru = 'У счета не указан признак ""Временный"".'") + Символы.ПС;
			КонецЕсли;
			
			Ошибка = Истина;
		КонецЕсли;
			
		Если ВыборкаСчетов6789.Валютный Тогда
			Если Ошибка Тогда
				ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
										  |У счета указан признак ""Валютный"".'"), ТекстУточнения);
			Иначе
				ТекстУточнения = НСтр("ru = 'У счета указан признак ""Валютный"".'") + Символы.ПС;
			КонецЕсли;
			
			Ошибка = Истина;
		КонецЕсли;
			
		Если ВыборкаСчетов6789.Количественный Тогда
			Если Ошибка Тогда
				ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
										  |У счета указан признак ""Количественный"".'"), ТекстУточнения);
			Иначе
				ТекстУточнения = НСтр("ru = 'У счета указан признак ""Количественный"".'") + Символы.ПС;
			КонецЕсли;
			
			Ошибка = Истина;
		КонецЕсли;
		
		Если Ошибка Тогда
			Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(ВыборкаСчетов6789.Ссылка, ПараметрыПроверки);
			Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = '%1'"),ТекстУточнения);
			КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);	
		КонецЕсли;
	КонецЦикла;
	
	ВыборкаОстальныхСчетов = МассивРезультатов[1].Выбрать();		

	Пока ВыборкаОстальныхСчетов.Следующий() Цикл
		Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(ВыборкаОстальныхСчетов.Ссылка, ПараметрыПроверки);
		Проблема.УточнениеПроблемы = НСтр("ru = 'У счета указан признак ""Временный"".'") + Символы.ПС;
		КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);	
	КонецЦикла;
КонецПроцедуры

// Проверяет правильность указания парных счетов.
//
// Параметры:
//   Проверка          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на правило проверки, которая выполнялась.
//   ПараметрыПроверки - Структура - Сформированная алгоритмом проверки структура проблемы.
//      * Идентификатор                     - Строка - Строковый идентификатор проверки.
//      * Представление                     - Строка - Пользовательское представление проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                            соответствующего проверке.
//      * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                            объектов (только для объектов с датой). Объекты, дата которых
//                                            меньше указанной, не следует проверять. По умолчанию не 
//                                            заполнено (т.е. проверять все).
//      * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                            По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки                  - Число - Очередная итерация проверки. Используется совместно с параметром
//                                            ЛимитПроблем для определения предельного количества итераций.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на
//                                            выполненную проверку.
//      * ВидПроверки                       - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к
//                                            которому относится выполненная проверка.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
Процедура ПроверкаПарныхСчетов(Проверка, ПараметрыПроверки) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
		// 1. Выбираются все парные счета и свойства первого счета.
		// 2. Выбираются все парные счета, где ни один из счетов не является 1ххх или 2ххх.
		// 3. Выбираются все парные счета.
		// 4. Выбираются парные счета, где один счет 1ххх, а второй не 3ххх, за исключением счетов 1750 и 1795.
		// 5. Выбираются парные счета, где один счет 21хх или 29хх, а второй не 21хх или 29хх.
		// 6. Выбираются счета, где один счет 2ххх, но не 21хх и не 29хх, а второй счет не 4ххх.
		// 7. Выбирюатся все данные из 1 пункта, но коды счета и парного счета обрезаются до двух первых цифр.
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет,
		|	Хозрасчетный.ПарныйСчет КАК ПарныйСчет,
		|	Хозрасчетный.Код КАК КодСчета,
		|	Хозрасчетный.ПарныйСчет.Код КАК КодПарногоСчета,
		|	Хозрасчетный.Забалансовый КАК Забалансовый,
		|	Хозрасчетный.ЗапретитьИспользоватьВПроводках КАК ЗапретитьИспользоватьВПроводках,
		|	Хозрасчетный.Временный КАК Временный,
		|	Хозрасчетный.Валютный КАК Валютный,
		|	Хозрасчетный.Количественный КАК Количественный,
		|	Хозрасчетный.Вид КАК Вид
		|ПОМЕСТИТЬ ВременнаяТаблицаПарныеСчета
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	НЕ Хозрасчетный.ПарныйСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|	И Хозрасчетный.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП)
		|	И Хозрасчетный.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НачисленныйИзносМБП)
		|	И Хозрасчетный.ПарныйСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МБП)
		|	И Хозрасчетный.ПарныйСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НачисленныйИзносМБП)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаПарныеСчета.Счет КАК Счет,
		|	ВременнаяТаблицаПарныеСчета.ПарныйСчет КАК ПарныйСчет
		|ИЗ
		|	ВременнаяТаблицаПарныеСчета КАК ВременнаяТаблицаПарныеСчета
		|ГДЕ
		|	ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодСчета, 0, 1) <> ""1""
		|	И ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодСчета, 0, 1) <> ""2""
		|	И ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодПарногоСчета, 0, 1) <> ""1""
		|	И ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодПарногоСчета, 0, 1) <> ""2""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаПарныеСчета.Счет КАК Счет,
		|	ВременнаяТаблицаПарныеСчета.ПарныйСчет КАК ПарныйСчет
		|ИЗ
		|	ВременнаяТаблицаПарныеСчета КАК ВременнаяТаблицаПарныеСчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаПарныеСчета.Счет КАК Счет,
		|	ВременнаяТаблицаПарныеСчета.ПарныйСчет КАК ПарныйСчет
		|ИЗ
		|	ВременнаяТаблицаПарныеСчета КАК ВременнаяТаблицаПарныеСчета
		|ГДЕ
		|	ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодСчета, 0, 1) = ""1""
		|	И ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодПарногоСчета, 0, 1) <> ""3""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаПарныеСчета.Счет КАК Счет,
		|	ВременнаяТаблицаПарныеСчета.ПарныйСчет КАК ПарныйСчет
		|ИЗ
		|	ВременнаяТаблицаПарныеСчета КАК ВременнаяТаблицаПарныеСчета
		|ГДЕ
		|	(ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодСчета, 0, 2) = ""21""
		|			ИЛИ ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодСчета, 0, 2) = ""29"")
		|	И ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодПарногоСчета, 0, 2) <> ""21""
		|	И ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодПарногоСчета, 0, 2) <> ""29""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаПарныеСчета.Счет КАК Счет,
		|	ВременнаяТаблицаПарныеСчета.ПарныйСчет КАК ПарныйСчет
		|ИЗ
		|	ВременнаяТаблицаПарныеСчета КАК ВременнаяТаблицаПарныеСчета
		|ГДЕ
		|	ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодСчета, 0, 1) = ""2""
		|	И ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодСчета, 0, 2) <> ""21""
		|	И ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодСчета, 0, 2) <> ""29""
		|	И ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодПарногоСчета, 0, 1) <> ""4""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаПарныеСчета.Счет КАК Счет,
		|	ВременнаяТаблицаПарныеСчета.ПарныйСчет КАК ПарныйСчет,
		|	ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодСчета, 0, 2) КАК КодСчета,
		|	ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодПарногоСчета, 0, 2) КАК КодПарногоСчета,
		|	ВременнаяТаблицаПарныеСчета.Забалансовый КАК Забалансовый,
		|	ВременнаяТаблицаПарныеСчета.ЗапретитьИспользоватьВПроводках КАК ЗапретитьИспользоватьВПроводках,
		|	ВременнаяТаблицаПарныеСчета.Временный КАК Временный,
		|	ВременнаяТаблицаПарныеСчета.Валютный КАК Валютный,
		|	ВременнаяТаблицаПарныеСчета.Количественный КАК Количественный,
		|	ВременнаяТаблицаПарныеСчета.Вид КАК Вид
		|ИЗ
		|	ВременнаяТаблицаПарныеСчета КАК ВременнаяТаблицаПарныеСчета";
		
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Парный счет указывается только для счетов 1ххх и 2ххх.
	ВыборкаОшибочныеПарныеСчета = МассивРезультатов[1].Выбрать();		
	
	Пока ВыборкаОшибочныеПарныеСчета.Следующий() Цикл
		Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(ВыборкаОшибочныеПарныеСчета.Счет, ПараметрыПроверки);
		Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'Парный счет указывается только для счетов 1ххх и 2ххх.
														  |А для счета %1 указан парный счет %2.'"),
														  ВыборкаОшибочныеПарныеСчета.Счет, ВыборкаОшибочныеПарныеСчета.ПарныйСчет);
		КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
	КонецЦикла;

	// Каждый парный счет указывается только  для одного счета. 
	ТЗПарныхСчетов = МассивРезультатов[2].Выгрузить();
	ТЗПарныхСчетов.Индексы.Добавить("Счет");

	Для Каждого СтрокаТаблицыЗначений Из ТЗПарныхСчетов Цикл
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Счет", СтрокаТаблицыЗначений.Счет);
		МассивСтрок = ТЗПарныхСчетов.НайтиСтроки(СтруктураОтбора);
		КоличествоСтрок = МассивСтрок.Количество();
		Если КоличествоСтрок > 1 Тогда
			СчетаСтрокой = НСтр("ru = 'Данный счет является парным для счетов:'");
			Для Каждого СтрокаМассива Из МассивСтрок Цикл
				Если КоличествоСтрок = 1 Тогда
					СчетаСтрокой = СтрШаблон(НСтр("ru = '%1 %2,'"), СчетаСтрокой, СтрокаТаблицыЗначений.ПарныйСчет);
				Иначе
					СчетаСтрокой = СтрШаблон(НСтр("ru = '%1 %2.'"), СчетаСтрокой, СтрокаТаблицыЗначений.ПарныйСчет);
				КонецЕсли;
				КоличествоСтрок = КоличествоСтрок - 1;
			КонецЦикла;
			
			Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(СтрокаТаблицыЗначений.Счет, ПараметрыПроверки);
			Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'Каждый парный счет указывается только для одного счета.
															  |%1.'"), СчетаСтрокой);
			КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
		КонецЕсли;
	КонецЦикла;
	
	// Для счета 1ххх парный счет должен быть 3ххх.
	ВыборкаПарныхСчетов1ххх = МассивРезультатов[3].Выбрать();		
	
	Пока ВыборкаПарныхСчетов1ххх.Следующий() Цикл
		Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(ВыборкаПарныхСчетов1ххх.Счет, ПараметрыПроверки);
		Проблема.УточнениеПроблемы = НСтр("ru = 'Для счета 1ххх парный счет должен быть 3ххх.'");
		КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
	КонецЦикла;
	
	// Для счета 21хх или 29хх парный счет должен быть также 21хх или 29хх.
	ВыборкаПарныхСчетов21хх_29хх = МассивРезультатов[4].Выбрать();		
	
	Пока ВыборкаПарныхСчетов21хх_29хх.Следующий() Цикл
		Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(ВыборкаПарныхСчетов21хх_29хх.Счет, ПараметрыПроверки);
		Проблема.УточнениеПроблемы = НСтр("ru = 'Для счета 21хх или 29хх парный счет должен быть также 21хх или 29хх.'");
		КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
	КонецЦикла;
	
	// Для прочих счетов 2ххх парный счет должен быть 4ххх.
	ВыборкаПрочихПарныхСчетов2ххх = МассивРезультатов[5].Выбрать();		
	
	Пока ВыборкаПрочихПарныхСчетов2ххх.Следующий() Цикл
		Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(ВыборкаПрочихПарныхСчетов2ххх.Счет, ПараметрыПроверки);
		Проблема.УточнениеПроблемы = НСтр("ru = 'Для счетов 2ххх, кроме 21хх и 29хх, парный счет должен быть 4ххх.'");
		КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
	КонецЦикла;
	
	// Для парных счетов кроме 21хх и 29хх все признаки, субконто и признаки субконто должны совпадать. 
	// Первый счет пары должен быть активным, а второй – пассивным.
	ТЗСчетовСравнения = МассивРезультатов[6].Выгрузить();
	
	Счет = Неопределено;
	ПарныйСчет = Неопределено;
	
	Для Каждого СтрокаТаблицыЗначений Из ТЗСчетовСравнения Цикл;
		
		Ошибка = Ложь;
		
		Если Счет = Неопределено Тогда
			Счет = СтрокаТаблицыЗначений.Счет;
			ПарныйСчет = СтрокаТаблицыЗначений.ПарныйСчет;
		КонецЕсли;
		
		Если СтрокаТаблицыЗначений.ПарныйСчет = Счет И СтрокаТаблицыЗначений.Счет = ПарныйСчет Тогда
			Прервать;
		КонецЕсли;
		
		Если (СтрокаТаблицыЗначений.КодСчета <> "21" И СтрокаТаблицыЗначений.КодСчета <> "29")
			ИЛИ (СтрокаТаблицыЗначений.КодПарногоСчета <> "21" И СтрокаТаблицыЗначений.КодПарногоСчета <> "29") Тогда
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Счет", СтрокаТаблицыЗначений.ПарныйСчет);
			
			МассивСтрок = ТЗСчетовСравнения.НайтиСтроки(СтруктураОтбора);
			
			Если МассивСтрок.Количество() = 0 Тогда
				Ошибка = Истина;
				ТекстУточнения = СтрШаблон(НСтр("ru = 'Для счета %1 настроен парный счет %2, но у счета %2 не настроен парный счет.
										   |У счета %1 удалите парный счет, затем запишите его, а затем выберите парный счет.'"), 
										  СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;	
			Иначе	
			
				ДанныеПарногоСчета = МассивСтрок[0];
				
				Если СтрокаТаблицыЗначений.Вид = ВидСчета.Активный И ДанныеПарногоСчета.Вид = ВидСчета.Активный Тогда
					Ошибка = Истина;
					ТекстУточнения = СтрШаблон(НСтр("ru = 'Один счет пары должен быть активным, а второй – пассивным.
											   |Оба парных счета %1 и %2 являются активными.'"), 
											  СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
											  
				ИначеЕсли СтрокаТаблицыЗначений.Вид = ВидСчета.Пассивный И ДанныеПарногоСчета.Вид = ВидСчета.Пассивный Тогда
					Ошибка = Истина;
					ТекстУточнения = СтрШаблон(НСтр("ru = 'Один счет пары должен быть активным, а второй – пассивным.
											   |Оба парных счета %1 и %2 являются пассивными.'"), 
											  СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;	
				КонецЕсли;
				
				Если СтрокаТаблицыЗначений.Забалансовый <> ДанныеПарногоСчета.Забалансовый Тогда
					Если Ошибка Тогда
						ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
												  |У парных счетов %2 и %3 отличаются значения признака ""Забалансовый"".'"), 
												  ТекстУточнения, СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
					Иначе
						ТекстУточнения = СтрШаблон(НСтр("ru = 'У парных счетов %1 и %2 отличаются значения признака ""Забалансовый"".'"), 
												  СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
					КонецЕсли;
					
					Ошибка = Истина;
				КонецЕсли;

				Если СтрокаТаблицыЗначений.ЗапретитьИспользоватьВПроводках <> ДанныеПарногоСчета.ЗапретитьИспользоватьВПроводках Тогда
					Если Ошибка Тогда
						ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
												  |У парных счетов %2 и %3 отличаются значения признака ""Счет является группой"".'"), 
												  ТекстУточнения, СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
					Иначе
						ТекстУточнения = СтрШаблон(НСтр("ru = 'У парных счетов %1 и %2 отличаются значения признака ""Счет является группой"".'"), 
												  СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
					КонецЕсли;
					
					Ошибка = Истина;	
				КонецЕсли;
				
				Если СтрокаТаблицыЗначений.Временный <> ДанныеПарногоСчета.Временный Тогда
					Если Ошибка Тогда
						ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
												  |У парных счетов %2 и %3 отличаются значения признака ""Временный"".'"), 
												  ТекстУточнения, СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
					Иначе
						ТекстУточнения = СтрШаблон(НСтр("ru = 'У парных счетов %1 и %2 отличаются значения признака ""Временный"".'"), 
												  СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
					КонецЕсли;
					
					Ошибка = Истина;	
				КонецЕсли;
				
				Если СтрокаТаблицыЗначений.Валютный <> ДанныеПарногоСчета.Валютный Тогда
					Если Ошибка Тогда
						ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
												  |У парных счетов %2 и %3 отличаются значения признака ""Валютный"".'"), 
												  ТекстУточнения, СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
					Иначе
						ТекстУточнения = СтрШаблон(НСтр("ru = 'У парных счетов %1 и %2 отличаются значения признака ""Валютный"".'"), 
												  СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
					КонецЕсли;
					
					Ошибка = Истина;	
				КонецЕсли;
				
				Если СтрокаТаблицыЗначений.Количественный <> ДанныеПарногоСчета.Количественный Тогда
					Если Ошибка Тогда
						ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
												  |У парных счетов %2 и %3 отличаются значения признака ""Количественный"".'"), 
												  ТекстУточнения, СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
					Иначе
						ТекстУточнения = СтрШаблон(НСтр("ru = 'У парных счетов %1 и %2 отличаются значения признака ""Количественный"".'"), 
												  СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
					КонецЕсли;
					
					Ошибка = Истина;	
				КонецЕсли;

				СубконтоСчета = СтрокаТаблицыЗначений.Счет.ВидыСубконто;
				СубконтоПарногоСчета = ДанныеПарногоСчета.Счет.ВидыСубконто;
				
				Если СубконтоСчета.Количество() <> СубконтоПарногоСчета.Количество() Тогда
					ОдинаковоеКоличествоСубконто = Ложь;
					Если Ошибка Тогда
						ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
												  |У парных счетов %2 и %3 отличается количество субконто.'"), 
												  ТекстУточнения, СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
					Иначе
						ТекстУточнения = СтрШаблон(НСтр("ru = 'У парных счетов %1 и %2 отличается количество субконто.'"), 
												  СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
					КонецЕсли;
					
					Ошибка = Истина;
				Иначе
					ОдинаковоеКоличествоСубконто = Истина;
				КонецЕсли;
				
				Если ОдинаковоеКоличествоСубконто Тогда
					Для Каждого	СтрокаСубконтоСчета Из СубконтоСчета Цикл
						СтруктураОтбора = Новый Структура();
						СтруктураОтбора.Вставить("НомерСтроки", СтрокаСубконтоСчета.НомерСтроки);
						СтруктураОтбора.Вставить("ВидСубконто", СтрокаСубконтоСчета.ВидСубконто);
						СтруктураОтбора.Вставить("ТолькоОбороты", СтрокаСубконтоСчета.ТолькоОбороты);
						СтруктураОтбора.Вставить("Суммовой", СтрокаСубконтоСчета.Суммовой);
						СтруктураОтбора.Вставить("Валютный", СтрокаСубконтоСчета.Валютный);
						СтруктураОтбора.Вставить("Количественный", СтрокаСубконтоСчета.Количественный); 
						
						Если СубконтоПарногоСчета.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
							Если Ошибка Тогда
								ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
														  |У парных счетов %2 и %3 отличаются субконто, или признаки субконто, или порядок.'"), 
														  ТекстУточнения, СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
							Иначе
								ТекстУточнения = СтрШаблон(НСтр("ru = 'У парных счетов %1 и %2 отличаются субконто, или признаки субконто, или порядок.'"), 
														  СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
							КонецЕсли;
							Ошибка = Истина;
						КонецЕсли;
						Прервать;
					КонецЦикла;	
				КонецЕсли;
			КонецЕсли;	
				
			Если Ошибка Тогда
				Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(СтрокаТаблицыЗначений.Счет, ПараметрыПроверки);
				Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = '%1'"),ТекстУточнения);
				КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

// Проверяет правильность указания признака "Валютный" у счетов.
//
// Параметры:
//   Проверка          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на правило проверки, которая выполнялась.
//   ПараметрыПроверки - Структура - Сформированная алгоритмом проверки структура проблемы.
//      * Идентификатор                     - Строка - Строковый идентификатор проверки.
//      * Представление                     - Строка - Пользовательское представление проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                            соответствующего проверке.
//      * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                            объектов (только для объектов с датой). Объекты, дата которых
//                                            меньше указанной, не следует проверять. По умолчанию не 
//                                            заполнено (т.е. проверять все).
//      * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                            По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки                  - Число - Очередная итерация проверки. Используется совместно с параметром
//                                            ЛимитПроблем для определения предельного количества итераций.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на
//                                            выполненную проверку.
//      * ВидПроверки                       - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к
//                                            которому относится выполненная проверка.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
Процедура ПроверкаПризнакаВалютный(Проверка, ПараметрыПроверки) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	НЕ(Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)
		|			И Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
		|			ИЛИ Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДенежныеСредства))
		|	И Хозрасчетный.Ссылка <> Значение(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
		|	И Хозрасчетный.Ссылка <> Значение(ПланСчетов.Хозрасчетный.ДолговыеЦенныеБумаги)
		|	И Хозрасчетный.Ссылка <> Значение(ПланСчетов.Хозрасчетный.КредиторскаяЗадолженностьПодотчетнымЛицам)
		|	И Хозрасчетный.Ссылка <> Значение(ПланСчетов.Хозрасчетный.ДенежныеСредстваВПути)
		|	И Хозрасчетный.Валютный";
	Выборка = Запрос.Выполнить().Выбрать();		

	Пока Выборка.Следующий() Цикл		
		Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(Выборка.Ссылка, ПараметрыПроверки);
		Проблема.УточнениеПроблемы = НСтр("ru = 'У счета не обнаружено необходимых субконто, но стоит признак ""Валютный"".'") + Символы.ПС;
		КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);			
	КонецЦикла;
КонецПроцедуры

// Проверяет правильность указания признака "Валютный" у счетов.
//
// Параметры:
//   Проверка          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на правило проверки, которая выполнялась.
//   ПараметрыПроверки - Структура - Сформированная алгоритмом проверки структура проблемы.
//      * Идентификатор                     - Строка - Строковый идентификатор проверки.
//      * Представление                     - Строка - Пользовательское представление проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                            соответствующего проверке.
//      * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                            объектов (только для объектов с датой). Объекты, дата которых
//                                            меньше указанной, не следует проверять. По умолчанию не 
//                                            заполнено (т.е. проверять все).
//      * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                            По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки                  - Число - Очередная итерация проверки. Используется совместно с параметром
//                                            ЛимитПроблем для определения предельного количества итераций.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на
//                                            выполненную проверку.
//      * ВидПроверки                       - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к
//                                            которому относится выполненная проверка.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
Процедура ПроверкаПризнакаАктивно_Пассивный(Проверка, ПараметрыПроверки) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Ссылка,
		|	Хозрасчетный.Код КАК Код,
		|	Хозрасчетный.ВидыСубконто.(
		|		ВидСубконто КАК ВидСубконто
		|	) КАК ВидыСубконто
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Вид = Значение(ВидСчета.АктивноПассивный)";	
	Выборка = Запрос.Выполнить().Выбрать();
	        
	Пока Выборка.Следующий() Цикл
		Код 				 = Выборка.Код;
		ПервыйСимволКода 	 = Лев(Код, 1);
		ПервыеДваСимволаКода = Лев(Код, 2);
		
		Если ПервыеДваСимволаКода <> "14" И ПервыеДваСимволаКода <> "15" И ПервыеДваСимволаКода <> "31" 
			И ПервыеДваСимволаКода <> "34" И ПервыеДваСимволаКода <> "35" 
			И ПервыйСимволКода <> "5" И ПервыйСимволКода <> "Z"
			И Код <> "0000" И Код <> "9000" И Код <> "9800" Тогда	
			
			Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(Выборка.Ссылка, ПараметрыПроверки);
			Проблема.УточнениеПроблемы = НСтр("ru = 'Активно-пассивными могут быть только счета 14хх, 15хх, 31хх, 34хх, 35хх, 0000, 5ххх, 9000, 9800, Zхххх.'") + Символы.ПС;
			КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			
			Продолжить;
			
		ИначеЕсли ПервыйСимволКода = "5" ИЛИ ПервыйСимволКода = "Z" ИЛИ Код = "0000" ИЛИ Код = "9000" ИЛИ Код = "9800" Тогда	
			Продолжить;
		КонецЕсли;	
		
		ВыборкаСубконто = Выборка.ВидыСубконто.Выбрать();
		
		Если ВыборкаСубконто.Количество() = 0 Тогда
			Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(Выборка.Ссылка, ПараметрыПроверки);
			Проблема.УточнениеПроблемы = НСтр("ru = 'Активно-пассивные счета должны иметь первым субконто ""Контрагенты"" или ""Работники (Физические лица)"".'") + Символы.ПС;
			КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);	
		Иначе	
			Пока ВыборкаСубконто.Следующий() Цикл
				Если ВыборкаСубконто.ВидСубконто <> ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты
					И ВыборкаСубконто.ВидСубконто <> ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СотрудникиОрганизаций Тогда
					
					Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(Выборка.Ссылка, ПараметрыПроверки);
					Проблема.УточнениеПроблемы = НСтр("ru = 'Активно-пассивные счета должны иметь первым субконто ""Контрагенты"" или ""Работники (Физические лица)"".'") + Символы.ПС;
					КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
					
					Прервать;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры

// Проверяет соответствие сумм себестоимости ТМЗ и первоначальной стоимости ОС.
//
// Параметры:
//   Проверка          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на правило проверки, которая выполнялась.
//   ПараметрыПроверки - Структура - Сформированная алгоритмом проверки структура проблемы.
//      * Идентификатор                     - Строка - Строковый идентификатор проверки.
//      * Представление                     - Строка - Пользовательское представление проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                            соответствующего проверке.
//      * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                            объектов (только для объектов с датой). Объекты, дата которых
//                                            меньше указанной, не следует проверять. По умолчанию не 
//                                            заполнено (т.е. проверять все).
//      * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                            По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки                  - Число - Очередная итерация проверки. Используется совместно с параметром
//                                            ЛимитПроблем для определения предельного количества итераций.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на
//                                            выполненную проверку.
//      * ВидПроверки                       - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к
//                                            которому относится выполненная проверка.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
Процедура ПроверкаСоответствияСуммТМЗ_И_ОС(Проверка, ПараметрыПроверки) Экспорт

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПринятиеКУчетуОС.Ссылка КАК Регистратор,
		|	ПринятиеКУчетуОС.Дата КАК Период,
		|	ПринятиеКУчетуОС.Организация КАК Организация,
		|	ПринятиеКУчетуОС.Склад КАК Склад,
		|	ПринятиеКУчетуОС.СчетУчета КАК СчетУчета,
		|	ПринятиеКУчетуОС.Номенклатура КАК Номенклатура,
		|	""Поступление основного средства"" КАК Содержание
		|ПОМЕСТИТЬ ВременнаяТаблицаШапка
		|ИЗ
		|	Документ.ПринятиеКУчетуОС КАК ПринятиеКУчетуОС
		|ГДЕ
		|	ПринятиеКУчетуОС.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование)
		|	И ПринятиеКУчетуОС.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПринятиеКУчетуОСОС.НомерСтроки КАК НомерСтроки,
		|	ПринятиеКУчетуОСОС.СчетУчета КАК СчетУчета,
		|	ПринятиеКУчетуОСОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ПринятиеКУчетуОСОС.Ссылка КАК Ссылка,
		|	ПринятиеКУчетуОСОС.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость
		|ПОМЕСТИТЬ ВременнаяТаблицаОС
		|ИЗ
		|	Документ.ПринятиеКУчетуОС.ОС КАК ПринятиеКУчетуОСОС
		|ГДЕ
		|	ПринятиеКУчетуОСОС.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование)
		|	И ПринятиеКУчетуОСОС.Ссылка.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Регистратор КАК Регистратор,
		|	ВременнаяТаблицаШапка.Период КАК Период,
		|	ВременнаяТаблицаШапка.Организация КАК Организация,
		|	ВременнаяТаблицаШапка.Содержание КАК Содержание,
		|	ВременнаяТаблицаШапка.Склад КАК Склад
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Регистратор КАК Регистратор,
		|	""Товары"" КАК ИмяСписка,
		|	""Товары"" КАК СинонимСписка,
		|	ВременнаяТаблицаШапка.Период КАК Период,
		|	ВременнаяТаблицаОС.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаШапка.СчетУчета КАК СчетУчета,
		|	ВременнаяТаблицаШапка.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаШапка.Склад КАК Склад,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
		|	0 КАК Себестоимость,
		|	1 КАК Количество,
		|	ВременнаяТаблицаОС.СчетУчета КАК КорСчетСписания,
		|	ВременнаяТаблицаОС.ОсновноеСредство КАК КорСубконто1,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ВременнаяТаблицаОС.ПервоначальнаяСтоимость КАК СебестоимостьПоДокументу
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
		|		ПО ВременнаяТаблицаШапка.Регистратор = ВременнаяТаблицаОС.Ссылка";
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизиты = МассивРезультатов[2].Выгрузить();
	ТаблицаТовары = МассивРезультатов[3].Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаРеквизиты Цикл
	
		НоваяТаблицаРеквизиты 	= ТаблицаРеквизиты.СкопироватьКолонки();
		НоваяТаблицаТовары 		= ТаблицаТовары.СкопироватьКолонки();
		
		НоваяСтрокаТаблицы = НоваяТаблицаРеквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаТаблицы);
		
		Отбор = Новый Структура("Регистратор", СтрокаТаблицы.Регистратор);
		МассивСтрок = ТаблицаТовары.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			НоваяСтрокаТаблицы = НоваяТаблицаТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаМассива);	
		КонецЦикла;	
		
		ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(НоваяТаблицаТовары, НоваяТаблицаРеквизиты, Ложь);
		
		Для Каждого СтрокаТаблицыТовары Из НоваяТаблицаТовары Цикл

			Отбор = Новый Структура();
			Отбор.Вставить("Номенклатура", СтрокаТаблицыТовары.Номенклатура);
			Отбор.Вставить("КорСубконто1", СтрокаТаблицыТовары.КорСубконто1);
			
			МассивСтрок = ТаблицаСписанныеТовары.НайтиСтроки(Отбор);
			
			Если МассивСтрок.Количество() > 0 Тогда
				
				Если СтрокаТаблицыТовары.СебестоимостьПоДокументу <> МассивСтрок[0].СуммаСписания Тогда
					Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(СтрокаТаблицыТовары.КорСубконто1, ПараметрыПроверки);
					Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'Первоначальная стоимость ОС ""%1"" отличается от себестоимости номенклатуры %2'"),
																		СтрокаТаблицыТовары.КорСубконто1, СтрокаТаблицыТовары.Номенклатура) + Символы.ПС;
					КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Проверяет наличие верных счетов в настройках налоговой декларации.
//
// Параметры:
//   Проверка          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на правило проверки, которая выполнялась.
//   ПараметрыПроверки - Структура - Сформированная алгоритмом проверки структура проблемы.
//      * Идентификатор                     - Строка - Строковый идентификатор проверки.
//      * Представление                     - Строка - Пользовательское представление проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                            соответствующего проверке.
//      * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                            объектов (только для объектов с датой). Объекты, дата которых
//                                            меньше указанной, не следует проверять. По умолчанию не 
//                                            заполнено (т.е. проверять все).
//      * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                            По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки                  - Число - Очередная итерация проверки. Используется совместно с параметром
//                                            ЛимитПроблем для определения предельного количества итераций.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на
//                                            выполненную проверку.
//      * ВидПроверки                       - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к
//                                            которому относится выполненная проверка.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
Процедура ПроверкаСчетовВНастройкахНалоговойДекларации(Проверка, ПараметрыПроверки) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиНалоговойДекларацииСтрокиОтчета.Ссылка КАК Ссылка,
		|	НастройкиНалоговойДекларацииСтрокиОтчета.Ссылка.Наименование КАК Наименование,
		|	НастройкиНалоговойДекларацииСтрокиОтчета.КодСтроки КАК КодСтроки
		|ПОМЕСТИТЬ ВременнаяТаблицаСтроки
		|ИЗ
		|	Справочник.НастройкиНалоговойДекларации.СтрокиОтчета КАК НастройкиНалоговойДекларацииСтрокиОтчета
		|ГДЕ
		|	НЕ НастройкиНалоговойДекларацииСтрокиОтчета.ЭтоЗаголовок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиНалоговойДекларацииНастройкиСтрок.Ссылка КАК Ссылка,
		|	НастройкиНалоговойДекларацииНастройкиСтрок.КодСтроки КАК КодСтроки,
		|	НастройкиНалоговойДекларацииНастройкиСтрок.СчетУчета КАК СчетУчета,
		|	НастройкиНалоговойДекларацииНастройкиСтрок.СчетУчета.Временный КАК СчетУчетаВременный
		|ПОМЕСТИТЬ ВременнаяТаблицаНастройки
		|ИЗ
		|	Справочник.НастройкиНалоговойДекларации.НастройкиСтрок КАК НастройкиНалоговойДекларацииНастройкиСтрок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаНастройки.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаНастройки.КодСтроки КАК КодСтроки,
		|	ВременнаяТаблицаНастройки.СчетУчета КАК Счет
		|ИЗ
		|	ВременнаяТаблицаНастройки КАК ВременнаяТаблицаНастройки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСтроки.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаСтроки.Наименование КАК Наименование,
		|	ВременнаяТаблицаСтроки.КодСтроки КАК КодСтроки,
		|	ЕСТЬNULL(ВременнаяТаблицаНастройки.СчетУчета, НЕОПРЕДЕЛЕНО) КАК Счет,
		|	ЕСТЬNULL(ВременнаяТаблицаНастройки.СчетУчетаВременный, ИСТИНА) КАК Временный
		|ИЗ
		|	ВременнаяТаблицаСтроки КАК ВременнаяТаблицаСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНастройки КАК ВременнаяТаблицаНастройки
		|		ПО ВременнаяТаблицаСтроки.Ссылка = ВременнаяТаблицаНастройки.Ссылка
		|			И ВременнаяТаблицаСтроки.КодСтроки = ВременнаяТаблицаНастройки.КодСтроки
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Наименование),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КодСтроки),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Счет),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Временный)
		|ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Хозрасчетный.Код КАК Код,
		|	Хозрасчетный.Ссылка КАК Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	НЕ Хозрасчетный.Забалансовый
		|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
		|	И Хозрасчетный.Временный
		|	И Хозрасчетный.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыДоходыПоНалогуНаПрибыль)";	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаПоиска = МассивРезультатов[2].Выгрузить();
	ТаблицаСчета  = МассивРезультатов[4].Выгрузить();
	
	Выборка = МассивРезультатов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	        
	Пока Выборка.Следующий() Цикл
		
		Соответствие = Новый Соответствие();
		МассивСчетов = Новый Массив();
		
		ВыборкаДетали = Выборка.Выбрать();
		
		Пока ВыборкаДетали.Следующий() Цикл
			
			Если ВыборкаДетали.Счет = Неопределено ИЛИ ВыборкаДетали.Счет = ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
				Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(ВыборкаДетали.Ссылка, ПараметрыПроверки);
				Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'У строки %1 незаполнен счет в настройке.
															|В элементе справочника %2.'"), 
													ВыборкаДетали.КодСтроки, ВыборкаДетали.Наименование) + Символы.ПС;
				КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
				
			Иначе
				МассивСчетов.Добавить(ВыборкаДетали.Счет);
			КонецЕсли;	
			
			Если НЕ ВыборкаДетали.Временный Тогда	
				Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(ВыборкаДетали.Ссылка, ПараметрыПроверки);
				Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'В настройке строки %1 выбран счет %2 с отключенной настройкой ""Временный"".
															|В элементе справочника %3.'"), 
													ВыборкаДетали.КодСтроки, ВыборкаДетали.Счет, ВыборкаДетали.Наименование) + Символы.ПС;
				КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);	
			КонецЕсли;
			
			Если ВыборкаДетали.Счет = ПланыСчетов.Хозрасчетный.РасходыДоходыПоНалогуНаПрибыль Тогда	
				Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(ВыборкаДетали.Ссылка, ПараметрыПроверки);
				Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'В настройке строки %1 выбран счет 9910. 
															|Данный счет является исключением и не должен быть в настройках.
															|В элементе справочника %2'"), 
													ВыборкаДетали.КодСтроки, ВыборкаДетали.Наименование) + Символы.ПС;
				КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);	
			КонецЕсли;
			
			Если НЕ ВыборкаДетали.Счет = Неопределено И НЕ ВыборкаДетали.Счет = ПланыСчетов.Хозрасчетный.ПустаяСсылка()
				И Соответствие.Получить(ВыборкаДетали.Счет) = Неопределено Тогда
				Отбор = Новый Структура();
				Отбор.Вставить("Ссылка", ВыборкаДетали.Ссылка);
				Отбор.Вставить("Счет", ВыборкаДетали.Счет);
				
				МассивСтрок = ТаблицаПоиска.НайтиСтроки(Отбор);
				
				Если МассивСтрок.Количество() > 1 Тогда 
					
					МассивКодовСтрок = Новый Массив();
					
					Для Каждого СтрокаМассива Из МассивСтрок Цикл	
						МассивКодовСтрок.Добавить(СтрокаМассива.КодСтроки);	
					КонецЦикла;
					
					Соответствие.Вставить(ВыборкаДетали.Счет, МассивКодовСтрок);
				КонецЕсли;
			КонецЕсли;
			
			Наименование = ВыборкаДетали.Наименование;
		КонецЦикла;
		
		Для Каждого СтрокаСоответствия Из Соответствие Цикл
			
			СтрокаКодовСтрок = "";
			
			КоличествоСтрок = СтрокаСоответствия.Значение.Количество();
			Строка = 1;
			
			Для Каждого СтрокаМассива Из СтрокаСоответствия.Значение Цикл
				
				Если КоличествоСтрок = Строка Тогда
					СтрокаКодовСтрок = СтрокаКодовСтрок + СтрокаМассива;
				Иначе	
					СтрокаКодовСтрок = СтрокаКодовСтрок + СтрокаМассива + ", ";	
				КонецЕсли;	
					
				Строка = Строка + 1;
			КонецЦикла;
			
			Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(Выборка.Ссылка, ПараметрыПроверки);
			Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'Счет %1 используется в кодах строк: %2.
														|В элементе справочника %3.'"), 
												СтрокаСоответствия.Ключ, СтрокаКодовСтрок, Наименование) + Символы.ПС;
			КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
		КонецЦикла;	
		
		Для Каждого СтрокаТаблицы Из ТаблицаСчета Цикл
			
			Результат = МассивСчетов.Найти(СтрокаТаблицы.Ссылка);
			
			Если Результат = Неопределено Тогда
				Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(Выборка.Ссылка, ПараметрыПроверки);
				Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'Счет %1 не задействован в настройках элемента справочника %2.'"), 
													СтрокаТаблицы.Код, Наименование) + Символы.ПС;
				КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);	
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры

// Проверяет наличие основного договора с принаком "Прочее".
//
// Параметры:
//   Проверка          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на правило проверки, которая выполнялась.
//   ПараметрыПроверки - Структура - Сформированная алгоритмом проверки структура проблемы.
//      * Идентификатор                     - Строка - Строковый идентификатор проверки.
//      * Представление                     - Строка - Пользовательское представление проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                            соответствующего проверке.
//      * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                            объектов (только для объектов с датой). Объекты, дата которых
//                                            меньше указанной, не следует проверять. По умолчанию не 
//                                            заполнено (т.е. проверять все).
//      * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                            По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки                  - Число - Очередная итерация проверки. Используется совместно с параметром
//                                            ЛимитПроблем для определения предельного количества итераций.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на
//                                            выполненную проверку.
//      * ВидПроверки                       - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к
//                                            которому относится выполненная проверка.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
Процедура ПроверкаОсновногоДоговораСВидом_Прочее(Проверка, ПараметрыПроверки) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка,
		|	Организации.КонтрагентГНС КАК КонтрагентГНС
		|ПОМЕСТИТЬ ВременнаяТаблицаОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.КонтрагентГНС <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеДоговорыКонтрагента.Организация КАК Организация,
		|	ОсновныеДоговорыКонтрагента.Контрагент КАК Контрагент,
		|	ОсновныеДоговорыКонтрагента.Договор КАК Договор
		|ПОМЕСТИТЬ ВременнаяТаблицаОсновныеДоговоры
		|ИЗ
		|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
		|ГДЕ
		|	ОсновныеДоговорыКонтрагента.Организация В
		|			(ВЫБРАТЬ
		|				ВременнаяТаблицаОрганизации.Ссылка
		|			ИЗ
		|				ВременнаяТаблицаОрганизации)
		|	И ОсновныеДоговорыКонтрагента.Контрагент В
		|			(ВЫБРАТЬ
		|				ВременнаяТаблицаОрганизации.КонтрагентГНС
		|			ИЗ
		|				ВременнаяТаблицаОрганизации)
		|	И ОсновныеДоговорыКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаОрганизации.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаОрганизации.КонтрагентГНС КАК Контрагент 
		|ИЗ
		|	ВременнаяТаблицаОрганизации КАК ВременнаяТаблицаОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОсновныеДоговоры КАК ВременнаяТаблицаОсновныеДоговоры
		|		ПО ВременнаяТаблицаОрганизации.Ссылка = ВременнаяТаблицаОсновныеДоговоры.Организация
		|ГДЕ
		|	ВременнаяТаблицаОсновныеДоговоры.Договор ЕСТЬ NULL";
	Выборка = Запрос.Выполнить().Выбрать();		

	Пока Выборка.Следующий() Цикл		
		Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(Выборка.Ссылка, ПараметрыПроверки);
		Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'В организации ""%1"" указан контрагент ""%2"" у которого нет основного договора с видом ""Прочее"" принадлежащего этой организации.'"), 
											Выборка.Ссылка, Выборка.Контрагент) + Символы.ПС;
		КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);			
	КонецЦикла;
КонецПроцедуры

// Проверяет наличие основного договора с принаком "Прочее".
//
// Параметры:
//   Проверка          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на правило проверки, которая выполнялась.
//   ПараметрыПроверки - Структура - Сформированная алгоритмом проверки структура проблемы.
//      * Идентификатор                     - Строка - Строковый идентификатор проверки.
//      * Представление                     - Строка - Пользовательское представление проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                            соответствующего проверке.
//      * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                            объектов (только для объектов с датой). Объекты, дата которых
//                                            меньше указанной, не следует проверять. По умолчанию не 
//                                            заполнено (т.е. проверять все).
//      * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                            По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки                  - Число - Очередная итерация проверки. Используется совместно с параметром
//                                            ЛимитПроблем для определения предельного количества итераций.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на
//                                            выполненную проверку.
//      * ВидПроверки                       - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к
//                                            которому относится выполненная проверка.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
Процедура ПроверкаЗаполненияГруппыНУ(Проверка, ПараметрыПроверки) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УчетнаяПолитикаОрганизаций.Период КАК Период,
		|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
		|	УчетнаяПолитикаОрганизаций.МинимумСтоимостиОСДляНУ КАК МинимумСтоимостиОСДляНУ
		|ПОМЕСТИТЬ ВременнаяТаблицаУчетнаяПолитика
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ПараметрыУчетаОС.Организация КАК Организация,
		|	ПараметрыУчетаОС.Регистратор КАК Регистратор,
		|	ПараметрыУчетаОС.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|	МАКСИМУМ(ВременнаяТаблицаУчетнаяПолитика.Период) КАК Период
		|ПОМЕСТИТЬ ВременнаяТаблицаМаксПериод
		|ИЗ
		|	РегистрСведений.ПараметрыУчетаОС КАК ПараметрыУчетаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаУчетнаяПолитика КАК ВременнаяТаблицаУчетнаяПолитика
		|		ПО ПараметрыУчетаОС.Период >= ВременнаяТаблицаУчетнаяПолитика.Период
		|			И ПараметрыУчетаОС.Организация = ВременнаяТаблицаУчетнаяПолитика.Организация
		|ГДЕ
		|	ПараметрыУчетаОС.ГруппаНУ = ЗНАЧЕНИЕ(Справочник.ГруппыНалоговогоУчетаОС.ПустаяСсылка)
		|	И ПараметрыУчетаОС.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Земля)
		|	И (ПараметрыУчетаОС.Регистратор ССЫЛКА Документ.ВводНачальныхОстатков
		|		ИЛИ ПараметрыУчетаОС.Регистратор ССЫЛКА Документ.ПринятиеКУчетуОС)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПараметрыУчетаОС.ОсновноеСредство,
		|	ПараметрыУчетаОС.Регистратор,
		|	ПараметрыУчетаОС.Организация,
		|	ПараметрыУчетаОС.ПервоначальнаяСтоимость
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаМаксПериод.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаМаксПериод.Регистратор КАК Ссылка
		|ИЗ
		|	ВременнаяТаблицаМаксПериод КАК ВременнаяТаблицаМаксПериод
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаУчетнаяПолитика КАК ВременнаяТаблицаУчетнаяПолитика
		|		ПО ВременнаяТаблицаМаксПериод.Период = ВременнаяТаблицаУчетнаяПолитика.Период
		|			И ВременнаяТаблицаМаксПериод.Организация = ВременнаяТаблицаУчетнаяПолитика.Организация
		|ГДЕ
		|	ВременнаяТаблицаМаксПериод.ПервоначальнаяСтоимость >= ВременнаяТаблицаУчетнаяПолитика.МинимумСтоимостиОСДляНУ";
	Выборка = Запрос.Выполнить().Выбрать();		

	Пока Выборка.Следующий() Цикл		
		Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(Выборка.Ссылка, ПараметрыПроверки);
		Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'В документе ""%1"" не заполнена группа НУ у основного средства ""%2"".'"),
										Выборка.Ссылка, Выборка.ОсновноеСредство) + Символы.ПС;
		КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);			
	КонецЦикла;	
КонецПроцедуры

// Проверяет наличие поступления (принятия) и сальдо на счете учета ОС.
//
// Параметры:
//   Проверка          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на правило проверки, которая выполнялась.
//   ПараметрыПроверки - Структура - Сформированная алгоритмом проверки структура проблемы.
//      * Идентификатор                     - Строка - Строковый идентификатор проверки.
//      * Представление                     - Строка - Пользовательское представление проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                            соответствующего проверке.
//      * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                            объектов (только для объектов с датой). Объекты, дата которых
//                                            меньше указанной, не следует проверять. По умолчанию не 
//                                            заполнено (т.е. проверять все).
//      * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                            По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки                  - Число - Очередная итерация проверки. Используется совместно с параметром
//                                            ЛимитПроблем для определения предельного количества итераций.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на
//                                            выполненную проверку.
//      * ВидПроверки                       - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к
//                                            которому относится выполненная проверка.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
Процедура ПроверкаПоступленияИСальдоНаСчетеОС(Проверка, ПараметрыПроверки) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
		// 1. Парные счета из 21хх и 29хх.
		// 2. Сальдо Дт по активным счетам из пункта 1.
		// 3. Сальдо Кт по пассивным счетам из пункта 1.
		// 4. Проверка наличия сальдо по пассивному счету с условием, что по парному активному счету сальдо нет.
		// 5. ОС поступившие, принятые или введенные с помощью док. "Ввод начальных остатков" (событие "Прочее"). 
		// 6. Проверка наличия ОС в 2 и 3 пунктах, которых нет в 5 пункте.
		// 7. Группировка 6 пункта.	
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Ссылка,
		|	Хозрасчетный.Вид КАК Вид,
		|	Хозрасчетный.ПарныйСчет КАК ПарныйСчет
		|ПОМЕСТИТЬ ВременнаяТаблицаСчета
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.ПарныйСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|	И (Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновныеСредства))
		|			ИЛИ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НематериальныеАктивы)))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК Сальдо
		|ПОМЕСТИТЬ ВременнаяТаблицаСальдоСчетовУчета
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			,
		|			Счет В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаСчета.Ссылка
		|				ИЗ
		|					ВременнаяТаблицаСчета
		|				ГДЕ
		|					ВременнаяТаблицаСчета.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)),
		|			,
		|			) КАК ХозрасчетныйОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
		|	ХозрасчетныйОстатки.СуммаОстатокКт КАК Сальдо
		|ПОМЕСТИТЬ ВременнаяТаблицаСальдоСчетовАмортизации
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			,
		|			Счет В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаСчета.Ссылка
		|				ИЗ
		|					ВременнаяТаблицаСчета
		|				ГДЕ
		|					ВременнаяТаблицаСчета.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)),
		|			,
		|			) КАК ХозрасчетныйОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСальдоСчетовАмортизации.Счет КАК СчетАмортизации,
		|	ВременнаяТаблицаСальдоСчетовАмортизации.ОсновноеСредство КАК ОсновноеСредство,
		|	ВременнаяТаблицаСчета.ПарныйСчет КАК СчетУчета
		|ИЗ
		|	ВременнаяТаблицаСальдоСчетовАмортизации КАК ВременнаяТаблицаСальдоСчетовАмортизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСчета КАК ВременнаяТаблицаСчета
		|		ПО ВременнаяТаблицаСальдоСчетовАмортизации.Счет = ВременнаяТаблицаСчета.Ссылка
		|ГДЕ
		|	НЕ ВременнаяТаблицаСальдоСчетовАмортизации.ОсновноеСредство В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаСальдоСчетовУчета.ОсновноеСредство
		|				ИЗ
		|					ВременнаяТаблицаСальдоСчетовУчета)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СобытияОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ ВременнаяТаблицаПринятыеОС
		|ИЗ
		|	РегистрСведений.СобытияОС.СрезПоследних(
		|			,
		|			Событие = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Поступление)
		|				ИЛИ Событие = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчету)
		|				ИЛИ Событие = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Прочее)) КАК СобытияОССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСальдоСчетовУчета.Счет КАК Счет,
		|	ВременнаяТаблицаСальдоСчетовУчета.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ ВременнаяТаблицаОСБезДокументов
		|ИЗ
		|	ВременнаяТаблицаСальдоСчетовУчета КАК ВременнаяТаблицаСальдоСчетовУчета
		|ГДЕ
		|	НЕ ВременнаяТаблицаСальдоСчетовУчета.ОсновноеСредство В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаПринятыеОС.ОсновноеСредство
		|				ИЗ
		|					ВременнаяТаблицаПринятыеОС)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаСальдоСчетовАмортизации.Счет,
		|	ВременнаяТаблицаСальдоСчетовАмортизации.ОсновноеСредство
		|ИЗ
		|	ВременнаяТаблицаСальдоСчетовАмортизации КАК ВременнаяТаблицаСальдоСчетовАмортизации
		|ГДЕ
		|	НЕ ВременнаяТаблицаСальдоСчетовАмортизации.ОсновноеСредство В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаПринятыеОС.ОсновноеСредство
		|				ИЗ
		|					ВременнаяТаблицаПринятыеОС)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВременнаяТаблицаОСБезДокументов.Счет) КАК Счет,
		|	ВременнаяТаблицаОСБезДокументов.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	ВременнаяТаблицаОСБезДокументов КАК ВременнаяТаблицаОСБезДокументов
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаОСБезДокументов.ОсновноеСредство";
	МассивРезультатов = Запрос.ВыполнитьПакет();		
	
	Выборка = МассивРезультатов[3].Выбрать();
	
	Пока Выборка.Следующий() Цикл		
		Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(Выборка.ОсновноеСредство, ПараметрыПроверки);
		Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'Основное средство (НМА) ""%1"" имеет сальдо на счете %2, но не имеет его на парном счете %3.'"),
										Выборка.ОсновноеСредство, Выборка.СчетАмортизации, Выборка.СчетУчета) + Символы.ПС;
		КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);			
	КонецЦикла;
	
	Выборка = МассивРезультатов[6].Выбрать();
	
	Пока Выборка.Следующий() Цикл		
		Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(Выборка.ОсновноеСредство, ПараметрыПроверки);
		Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'Основное средство (НМА) ""%1"" имеет сальдо на счете %2, но на данное основное средство (НМА) нет документа поступления или принятия к учету.'"),
										Выборка.ОсновноеСредство, Выборка.Счет) + Символы.ПС;
		КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);			
	КонецЦикла;
КонецПроцедуры

// Проверяет наличие валютной суммы в строке табличной части.
//
// Параметры:
//   Проверка          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на правило проверки, которая выполнялась.
//   ПараметрыПроверки - Структура - Сформированная алгоритмом проверки структура проблемы.
//      * Идентификатор                     - Строка - Строковый идентификатор проверки.
//      * Представление                     - Строка - Пользовательское представление проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                            соответствующего проверке.
//      * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                            объектов (только для объектов с датой). Объекты, дата которых
//                                            меньше указанной, не следует проверять. По умолчанию не 
//                                            заполнено (т.е. проверять все).
//      * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                            По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки                  - Число - Очередная итерация проверки. Используется совместно с параметром
//                                            ЛимитПроблем для определения предельного количества итераций.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на
//                                            выполненную проверку.
//      * ВидПроверки                       - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к
//                                            которому относится выполненная проверка.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
Процедура ПроверкаЗаполненияВалютнойСуммыВВводеНачальныхОстатков(Проверка, ПараметрыПроверки) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВводНачальныхОстатковПрочее.Ссылка КАК Ссылка,
		|	ВводНачальныхОстатковПрочее.СчетУчета КАК СчетУчета
		|ИЗ
		|	Документ.ВводНачальныхОстатков.Прочее КАК ВводНачальныхОстатковПрочее
		|ГДЕ
		|	ВводНачальныхОстатковПрочее.СчетУчета.Валютный
		|	И ВводНачальныхОстатковПрочее.ВалютнаяСумма = 0";
	Выборка = Запрос.Выполнить().Выбрать();		

	Пока Выборка.Следующий() Цикл		
		Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(Выборка.Ссылка, ПараметрыПроверки);
		Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'В документе ""%1"" в строке табличной части указан валютный счет ""%2"", но не заполнена валютная сумма.'"),
										Выборка.Ссылка, Выборка.СчетУчета) + Символы.ПС;
		КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);			
	КонецЦикла;	
КонецПроцедуры

// Проверяет указания количественного счета в шапке документа.
//
// Параметры:
//   Проверка          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на правило проверки, которая выполнялась.
//   ПараметрыПроверки - Структура - Сформированная алгоритмом проверки структура проблемы.
//      * Идентификатор                     - Строка - Строковый идентификатор проверки.
//      * Представление                     - Строка - Пользовательское представление проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                            соответствующего проверке.
//      * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                            объектов (только для объектов с датой). Объекты, дата которых
//                                            меньше указанной, не следует проверять. По умолчанию не 
//                                            заполнено (т.е. проверять все).
//      * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                            По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки                  - Число - Очередная итерация проверки. Используется совместно с параметром
//                                            ЛимитПроблем для определения предельного количества итераций.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на
//                                            выполненную проверку.
//      * ВидПроверки                       - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к
//                                            которому относится выполненная проверка.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
Процедура ПроверкаУказанияКоличественногоСчетаВВводеНачальныхОстатков(Проверка, ПараметрыПроверки) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВводНачальныхОстатков.Ссылка КАК Ссылка,
		|	ВводНачальныхОстатков.СчетУчета КАК СчетУчета
		|ИЗ
		|	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
		|ГДЕ
		|	НЕ ВводНачальныхОстатков.СчетУчета.Количественный
		|	И ВводНачальныхОстатков.РазделУчета = ""Запасы""";
	Выборка = Запрос.Выполнить().Выбрать();		

	Пока Выборка.Следующий() Цикл		
		Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(Выборка.Ссылка, ПараметрыПроверки);
		Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'В документе ""%1"" указан счет учета с отключенным признаком ""Количественный"".'"),
										Выборка.Ссылка, Выборка.СчетУчета) + Символы.ПС;
		КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);			
	КонецЦикла;	
КонецПроцедуры

// Проверяет указания счета дохода в строке табличной части.
//
// Параметры:
//   Проверка          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на правило проверки, которая выполнялась.
//   ПараметрыПроверки - Структура - Сформированная алгоритмом проверки структура проблемы.
//      * Идентификатор                     - Строка - Строковый идентификатор проверки.
//      * Представление                     - Строка - Пользовательское представление проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                            соответствующего проверке.
//      * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                            объектов (только для объектов с датой). Объекты, дата которых
//                                            меньше указанной, не следует проверять. По умолчанию не 
//                                            заполнено (т.е. проверять все).
//      * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                            По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки                  - Число - Очередная итерация проверки. Используется совместно с параметром
//                                            ЛимитПроблем для определения предельного количества итераций.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на
//                                            выполненную проверку.
//      * ВидПроверки                       - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к
//                                            которому относится выполненная проверка.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
Процедура ПроверкаСчетаОприходованияДокумента_ОприходованиеТоваров(Проверка, ПараметрыПроверки) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОприходованиеТоваровТовары.Ссылка КАК Ссылка,
		|	ОприходованиеТоваровТовары.СчетУчета КАК СчетУчета
		|ИЗ
		|	Документ.ОприходованиеТоваров.Товары КАК ОприходованиеТоваровТовары
		|ГДЕ
		|	НЕ(ОприходованиеТоваровТовары.СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Доходы))
		|		ИЛИ ОприходованиеТоваровТовары.СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДоходыОтНеоперационнойДеятельности)))";
	Выборка = Запрос.Выполнить().Выбрать();		

	Пока Выборка.Следующий() Цикл		
		Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(Выборка.Ссылка, ПараметрыПроверки);
		Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'В документе ""%1"" в табличной части ""Товары"" указан счет ""%2"", который не является счетом дохода.'"),
										Выборка.Ссылка, Выборка.СчетУчета) + Символы.ПС;
		КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);			
	КонецЦикла;	
КонецПроцедуры

// Проверяет являются ли документы "Ввод начальных остатов" первыми документами (по дате) в базе.
//
// Параметры:
//   Проверка          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на правило проверки, которая выполнялась.
//   ПараметрыПроверки - Структура - Сформированная алгоритмом проверки структура проблемы.
//      * Идентификатор                     - Строка - Строковый идентификатор проверки.
//      * Представление                     - Строка - Пользовательское представление проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                            соответствующего проверке.
//      * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                            объектов (только для объектов с датой). Объекты, дата которых
//                                            меньше указанной, не следует проверять. По умолчанию не 
//                                            заполнено (т.е. проверять все).
//      * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                            По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки                  - Число - Очередная итерация проверки. Используется совместно с параметром
//                                            ЛимитПроблем для определения предельного количества итераций.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на
//                                            выполненную проверку.
//      * ВидПроверки                       - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к
//                                            которому относится выполненная проверка.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
Процедура ПроверкаВводаНачальныхОстатковНаПервенствоПоДате(Проверка, ПараметрыПроверки) Экспорт

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц; 
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
		|	ХозрасчетныйОбороты.ПериодСекунда КАК Период
		|ПОМЕСТИТЬ ВременнаяТаблицаПериоды
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(, , Авто, , , , , ) КАК ХозрасчетныйОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВременнаяТаблицаПериоды.Период) КАК Период
		|ИЗ
		|	ВременнаяТаблицаПериоды КАК ВременнаяТаблицаПериоды
		|ГДЕ
		|	ВременнаяТаблицаПериоды.Регистратор ССЫЛКА Документ.ВводНачальныхОстатков";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() <> 0 Тогда
		Выборка.Следующий();
		Период = Выборка.Период;
		
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;              
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВременнаяТаблицаПериоды.Регистратор КАК Регистратор
			|ИЗ
			|	ВременнаяТаблицаПериоды КАК ВременнаяТаблицаПериоды
			|ГДЕ
			|	ВременнаяТаблицаПериоды.Период < &Период";
		Запрос.УстановитьПараметр("Период", Период);
		Выборка = Запрос.Выполнить().Выбрать();		

		Пока Выборка.Следующий() Цикл		
			Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(Выборка.Регистратор, ПараметрыПроверки);
			Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'Документ ""%1"" проведен раньше, чем самый поздний (от %2) документ ввода начальных остатков.'"),
											Выборка.Регистратор, Период) + Символы.ПС;
			КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Проверяет признак страны "Участник ЕАЭС".
//
// Параметры:
//   Проверка          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на правило проверки, которая выполнялась.
//   ПараметрыПроверки - Структура - Сформированная алгоритмом проверки структура проблемы.
//      * Идентификатор                     - Строка - Строковый идентификатор проверки.
//      * Представление                     - Строка - Пользовательское представление проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                            соответствующего проверке.
//      * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                            объектов (только для объектов с датой). Объекты, дата которых
//                                            меньше указанной, не следует проверять. По умолчанию не 
//                                            заполнено (т.е. проверять все).
//      * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                            По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки                  - Число - Очередная итерация проверки. Используется совместно с параметром
//                                            ЛимитПроблем для определения предельного количества итераций.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на
//                                            выполненную проверку.
//      * ВидПроверки                       - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к
//                                            которому относится выполненная проверка.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
Процедура ПроверкаПризнакаСтраны_УчастникЕАЭС(Проверка, ПараметрыПроверки) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СтраныМира.Ссылка КАК Ссылка,
		|	СтраныМира.Наименование КАК Наименование,
		|	СтраныМира.Код КАК Код,
		|	СтраныМира.УчастникЕАЭС КАК УчастникЕАЭС
		|ИЗ
		|	Справочник.СтраныМира КАК СтраныМира";
	Выборка = Запрос.Выполнить().Выбрать();		

	// КЫРГЫЗСТАН
	Кыргызстан = Справочники.СтраныМира.Киргизия;	
	Если НЕ Кыргызстан.УчастникЕАЭС Тогда
		Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(Кыргызстан, ПараметрыПроверки);
		Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'В элементе ""%1"" должен быть установлен признак ""Участник ЕАЭС"".'"),
										Кыргызстан.Наименование) + Символы.ПС;
		КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);	
	КонецЕсли;
	
	// РОССИЯ
	Россия = Справочники.СтраныМира.Россия;
	Если НЕ Россия.УчастникЕАЭС Тогда
		Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(Россия, ПараметрыПроверки);
		Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'В элементе ""%1"" должен быть установлен признак ""Участник ЕАЭС"".'"),
										Россия.Наименование) + Символы.ПС;
		КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);	
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
			  // КАЗАХСТАН			  БЕЛАРУСЬ			  	  АРМЕНИЯ
		Если (Выборка.Код = "398" ИЛИ Выборка.Код = "112" ИЛИ Выборка.Код = "051") И НЕ Выборка.УчастникЕАЭС Тогда
			Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(Выборка.Ссылка, ПараметрыПроверки);
			Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'В элементе ""%1"" должен быть установлен признак ""Участник ЕАЭС"".'"),
											Выборка.Наименование) + Символы.ПС;
			КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			
			                                 // КЫРГЫЗСТАН			 РОССИЯ                  КАЗАХСТАН			  	 БЕЛАРУСЬ			  	 АРМЕНИЯ
		ИначеЕсли Выборка.УчастникЕАЭС И НЕ (Выборка.Код = "417" ИЛИ Выборка.Код = "643" ИЛИ Выборка.Код = "398" ИЛИ Выборка.Код = "112" ИЛИ Выборка.Код = "051") Тогда
			Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(Выборка.Ссылка, ПараметрыПроверки);
			Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'В элементе ""%1"" НЕ должен быть установлен признак ""Участник ЕАЭС"".'"),
											Выборка.Наименование) + Символы.ПС;
			КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

// Проверяет признак страны контрагента.
//
// Параметры:
//   Проверка          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на правило проверки, которая выполнялась.
//   ПараметрыПроверки - Структура - Сформированная алгоритмом проверки структура проблемы.
//      * Идентификатор                     - Строка - Строковый идентификатор проверки.
//      * Представление                     - Строка - Пользовательское представление проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                            соответствующего проверке.
//      * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                            объектов (только для объектов с датой). Объекты, дата которых
//                                            меньше указанной, не следует проверять. По умолчанию не 
//                                            заполнено (т.е. проверять все).
//      * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                            По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки                  - Число - Очередная итерация проверки. Используется совместно с параметром
//                                            ЛимитПроблем для определения предельного количества итераций.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на
//                                            выполненную проверку.
//      * ВидПроверки                       - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к
//                                            которому относится выполненная проверка.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
Процедура ПроверкаПризнакаСтраныКонтрагента(Проверка, ПараметрыПроверки) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СтраныМира.Ссылка КАК Ссылка,
		|	СтраныМира.Наименование КАК Наименование,
		|	СтраныМира.Код КАК Код
		|ПОМЕСТИТЬ ВременнаяТаблицаСтраныМира
		|ИЗ
		|	Справочник.СтраныМира КАК СтраныМира
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка,
		|	Контрагенты.Наименование КАК НаименованиеКонтрагента,
		|	Контрагенты.СтранаРезидентства КАК СтранаРезидентства,
		|	Контрагенты.ПризнакСтраны КАК ПризнакСтраны,
		|	ВременнаяТаблицаСтраныМира.Наименование КАК НаименованиеСтраны,
		|	ВременнаяТаблицаСтраныМира.Код КАК Код
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтраныМира КАК ВременнаяТаблицаСтраныМира
		|		ПО Контрагенты.СтранаРезидентства = ВременнаяТаблицаСтраныМира.Ссылка
		|ГДЕ
		|	НЕ Контрагенты.ЭтоГруппа";
	Выборка = Запрос.Выполнить().Выбрать();		
	
	Пока Выборка.Следующий() Цикл
		
			 // КЫРГЫЗСТАН
		Если Выборка.Код = "417" Тогда

			Если Выборка.ПризнакСтраны <> Перечисления.ПризнакиСтраны.КР Тогда
				Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(Выборка.Ссылка, ПараметрыПроверки);
				Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'У контрагента ""%1"" с страной резиденства ""%2"" должен быть признак страны ""%3"".'"),
												Выборка.НаименованиеКонтрагента, Выборка.НаименованиеСтраны, Перечисления.ПризнакиСтраны.КР) + Символы.ПС;
				КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			КонецЕсли;	
				
			 	  // КАЗАХСТАН			  БЕЛАРУСЬ			  	  АРМЕНИЯ                 РОССИЯ
		ИначеЕсли Выборка.Код = "398" ИЛИ Выборка.Код = "112" ИЛИ Выборка.Код = "051" ИЛИ Выборка.Код = "643" Тогда
			
			Если Выборка.ПризнакСтраны <> Перечисления.ПризнакиСтраны.ЕАЭС Тогда
				Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(Выборка.Ссылка, ПараметрыПроверки);
				Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'У контрагента ""%1"" с страной резиденства ""%2"" должен быть признак страны ""%3"".'"),
												Выборка.НаименованиеКонтрагента, Выборка.НаименованиеСтраны, Перечисления.ПризнакиСтраны.ЕАЭС) + Символы.ПС;
				КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			КонецЕсли;	
				
		ИначеЕсли ЗначениеЗаполнено(Выборка.СтранаРезидентства) Тогда
			
			Если Выборка.ПризнакСтраны <> Перечисления.ПризнакиСтраны.ИмпортЭкспорт Тогда
				Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(Выборка.Ссылка, ПараметрыПроверки);
				Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'У контрагента ""%1"" с страной резиденства ""%2"" должен быть признак страны ""%3"".'"),
												Выборка.НаименованиеКонтрагента, Выборка.НаименованиеСтраны, Перечисления.ПризнакиСтраны.ИмпортЭкспорт) + Символы.ПС;
				КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			КонецЕсли;
				
		ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.СтранаРезидентства) Тогда
			
			Если Выборка.ПризнакСтраны <> Перечисления.ПризнакиСтраны.ПустаяСсылка() Тогда
				Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(Выборка.Ссылка, ПараметрыПроверки);
				Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'У контрагента ""%1"" не указана страна резиденства, поэтому признак страны тоже должен быть не указан.'"),
												Выборка.НаименованиеКонтрагента) + Символы.ПС;
				КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки); 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

#КонецОбласти
