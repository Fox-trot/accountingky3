
#Область ПрограммныйИнтерфейс

// Позволяет задать общие настройки подсистемы.
//
// Параметры:
//   Настройки - Структура - настройки подсистемы:
//     * КартинкаИндикатораПроблем    - Картинка, которая будет выводиться в качестве
//                                      индикатора ошибки в колонке динамического списка
//                                      форм списков и на специальной панели форм объектов.
//     * ПояснениеИндикатораПроблем   - Строка - Поясняющая строка к ошибке.
//     * ГиперссылкаИндикатораПроблем - Строка - Текст гиперссылки, при нажатии на которую,
//                                      будет сформирован и открыт отчет с ошибками.
//
// Пример:
//   Настройки = Новый Структура;
//   Настройки.Вставить("КартинкаИндикатораПроблем",    БиблиотекаКартинок.Предупреждение);
//   Настройки.Вставить("ПояснениеИндикатораПроблем",   Неопределено);
//   Настройки.Вставить("ГиперссылкаИндикатораПроблем", Неопределено);
//
Процедура ПриОпределенииНастроек(Настройки) Экспорт
	
КонецПроцедуры

// Предназначена для подключения собственных правил проверки ведения учета.
//
// Параметры:
//   ГруппыПроверок - ТаблицаЗначений - Таблица, в которую добавляются группы проверок:
//      * Наименование  - Строка - Наименование группы проверок, например: "Системные проверки".
//      * Идентификатор - Строка - Строковый идентификатор группы, например: "СистемныеПроверки".
//
//   Проверки - ТаблицаЗначений - Таблица, в которую добавляются проверки:
//      * Наименование                   - Строка - Наименование элемента проверки. Обязательно для заполнения.
//      * Причины                        - Строка - Возможные причины, которые привели к возникновению проблемы.
//                                                  Выводятся в отчете о проблемах. Необязательно для заполнения.
//      * Рекомендация                   - Строка - Рекомендация по решению возникшей проблемы.
//                                                  Выводятся в отчете о проблемах. Необязательно для заполнения.
//      * Идентификатор                  - Строка - Строковый идентификатор проверки. Обязателен для заполнения.
//      * ИдентификаторГруппы            - Строка - Строковый идентификатор группы проверок, например: "СистемныеПроверки".
//                                                  Обязательно для заполнения.
//      * ДатаНачалаПроверки             - Дата - Пороговая дата, обозначающая границу проверяемых
//                                         объектов (только для объектов с датой). Объекты, дата которых меньше
//                                         указанной, не следует проверять. По умолчанию не заполнено (т.е. проверять все).
//      * ЛимитПроблем                   - Число - Максимальное количество проверяемых объектов.
//                                         По умолчанию 0 - следует проверить все объекты.
//      * ОбработчикПроверки             - Строка - Имя экспортной процедуры-обработчика проверки в серверном общем модуле.
//                                         Предназначен для поиска и регистрации проблем ведения учета.
//                                         Параметры обработчика проверки:
//                                           * Проверка - СправочникСсылка.ПравилаПроверкиУчета - исполняемая проверка.
//                                           * ПараметрыПроверки - Структура - Параметры проверки, которую необходимо выполнить.
//                                                                             Подробнее см. в документации.
//      * ОбработчикПереходаКИсправлению - Строка - Имя экспортной процедуры-обработчика исправления проблемы 
//                                         в клиентском общем модуле или полное имя формы, которая будет открыта для
//                                         исправления проблемы. Параметры обработчика исправления проблемы или формы:
//                                          * ИдентификаторПроверки - Строка - идентификатор проверки, 
//                                                                    которая выявила проблему.
//                                          * ВидПроверки - СправочникСсылка.ВидыПроверок - вид проверки 
//                                                          с дополнительной информацией о проблеме.
//      * ДополнительныеПараметры        - ХранилищеЗначений - Дополнительная информация по проверке.
//
// Пример:
//   Проверка = Проверки.Добавить();
//   Проверка.ИдентификаторГруппы = "СистемныеПроверки";
//   Проверка.Наименование        = НСтр("ru='Демо: Проверка заполнения комментария в документах ""Демо: Поступление товаров""'");
//   Проверка.Причины             = НСтр("ru='Не введен комментарий в документе.'");
//   Проверка.Рекомендация        = НСтр("ru='Ввести комментарий в документе.'");
//   Проверка.Идентификатор       = "ПроверитьКомментарийВПоступленииТоваров";
//   Проверка.ОбработчикПроверки  = "_ДемоСтандартныеПодсистемы.ПроверитьКомментарийВПоступленииТоваров";
//   Проверка.ДатаНачалаПроверки  = Дата('20140101000000');
//   Проверка.ЛимитПроблем        = 3;
//
Процедура ПриОпределенииПроверок(ГруппыПроверок, Проверки) Экспорт
	
	ГруппаПроверок = ГруппыПроверок.Добавить();
	ГруппаПроверок.Наименование    = НСтр("ru='План счетов'");
	ГруппаПроверок.Идентификатор   = "ПланСчетов";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторРодителя        = "ПланСчетов";
	Проверка.Наименование                 = НСтр("ru='Проверка наличия субконто ДОГОВОРЫ (Склады) без субконто КОНТРАГЕНТЫ (Номенклатура)'");
	Проверка.Причины                      = НСтр("ru='Если у счета есть субконто Договоры, то обязательно должно быть субконто Контрагенты. 
													 |Если у счета есть субконто Склады,  то обязательно должно быть субконто Номенклатура.'");
	Проверка.Рекомендация                 = НСтр("ru='Добавьте счету необходимое субконто.'");
	Проверка.Идентификатор                = "ПроверкаСубконтоКонтрагентыИНоменклатура";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаПереопределяемый.ПроверкаСубконтоКонтрагентыИНоменклатура";
	Проверка.КонтекстПроверокВеденияУчета = "ПланСчетов";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторРодителя        = "ПланСчетов";
	Проверка.Наименование                 = НСтр("ru='Проверка счетов денежных средств'");
	Проверка.Причины                      = НСтр("ru='У счетов 11хх и 12хх должны быть субконто ""Денежные средства"" и ""Статьи движения денежных средств"" и только они. 
													 |У других счетов не должно быть субконто ""Денежные средства"".'");
	Проверка.Рекомендация                 = НСтр("ru='Исправьте отсутствие(присутствие) необходимых субконто счета.'");
	Проверка.Идентификатор                = "ПроверкаСубконтоДС_СДДС";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаПереопределяемый.ПроверкаСубконтоДС_СДДС";
	Проверка.КонтекстПроверокВеденияУчета = "ПланСчетов";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторРодителя        = "ПланСчетов";
	Проверка.Наименование                 = НСтр("ru='Проверка счетов 6,7,8,9'");
	Проверка.Причины                      = НСтр("ru='Должен быть признак ""Временный"". 
													 |У всех остальных счетов не должно быть признака ""Временный"".
													 |Не должно быть признаков ""Валютный"", ""Количественный"".
													 |У всех видов субконто должен быть признак ""Только обороты"".
													 |Если счет не является группой то для него должна быть указана счет-группа.'");
	Проверка.Рекомендация                 = НСтр("ru='Исправьте отсутствие(присутствие) необходимых признаков счета.'");
	Проверка.Идентификатор                = "ПроверкаПризнаковСчета";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаПереопределяемый.ПроверкаПризнаковСчета";
	Проверка.КонтекстПроверокВеденияУчета = "ПланСчетов";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторРодителя        = "ПланСчетов";
	Проверка.Наименование                 = НСтр("ru='Проверка правильности указания пар счетов'");
	Проверка.Причины                      = НСтр("ru='Парный счет указывается только для счетов 1ххх и 2ххх. 
													 |Каждый парный счет указывается только  для одного счета.
													 |Для счета 1ххх парный счет должен быть 3ххх.
													 |Для счета 21хх или 29хх парный счет должен быть также 21хх или 29хх.
													 |Для прочих счетов 2ххх парный счет должен быть 4ххх.
													 |Для парных счетов кроме 21хх и 29хх все признаки, субконто и признаки субконто должны совпадать.
													 |Один счет пары должен быть активным, а второй – пассивным.'");
	Проверка.Рекомендация                 = НСтр("ru='Исправьте парный счет или свойства парных счетов.'");
	Проверка.Идентификатор                = "ПроверкаПарныхСчетов";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаПереопределяемый.ПроверкаПарныхСчетов";
	Проверка.КонтекстПроверокВеденияУчета = "ПланСчетов";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторРодителя        = "ПланСчетов";
	Проверка.Наименование                 = НСтр("ru='Проверка правильности признака ""Валютный""'");
	Проверка.Причины                      = НСтр("ru='Признак ""Валютный"" может указываться для счетов с субконто Контрагенты и Договоры. 
													 |Признак ""Валютный"" может указываться для счетов с субконто Денежные средства.
													 |Признак ""Валютный"" может указываться для счета 1520.
													 |Для других счетов признак ""Валютный"" не указывается.'");
	Проверка.Рекомендация                 = НСтр("ru='Исправьте признак ""Валютный"" счета.'");
	Проверка.Идентификатор                = "ПроверкаПризнакаВалютный";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаПереопределяемый.ПроверкаПризнакаВалютный";
	Проверка.КонтекстПроверокВеденияУчета = "ПланСчетов";	
	
КонецПроцедуры

// Позволяет настроить положение индикатора о проблемах в формах объектов.
//
// Параметры:
//   ПараметрыГруппыИндикации - Структура - выходные параметры индикатора:
//     * ВыводитьСнизу     - Булево - Если указать Истина, то группа индикатора будет выводиться самой последней 
//                           в форме или в конце указанной группе элементов ИмяРодителяГруппы.
//                           По умолчанию Ложь - группа выводится в начале указанной группе ИмяРодителяГруппы или 
//                           сразу под командной панелью формы объекта.
//     * ИмяРодителяГруппы - Строка - Определяет имя группы элементов формы объекта, внутри которой должна 
//                           располагаться группа индикации.
//
//   ТипСсылки - Тип - Тип ссылки, для которой переопределяются параметры группы индикации.
//                     Например, Тип("ДокументСсылка.НачислениеЗарплаты").
//
Процедура ПриОпределенииПараметровГруппыИндикации(ПараметрыГруппыИндикации, Знач ТипСсылки) Экспорт
	
	
	
КонецПроцедуры

// Позволяет настроить внешний вид и положение колонки-индикатора о проблемах в формах списков
// (с динамическим списком).
//
// Параметры:
//   ПараметрыКолонкиИндикации - Структура - выходные параметры индикатора:
//     * ВыводитьПоследней  - Булево - Если указать Истина, то колонка-индикатор будет выводиться в конце.
//                            По умолчанию Ложь - колонка выводится в начале.
//     * ПоложениеЗаголовка - ПоложениеЗаголовкаЭлементаФормы - Задает положение заголовка колонки-индикатора.
//     * Ширина             - Число - Ширина колонки-индикатора.
//
//   ПолноеИмя - Строка - Полное имя объекта основной таблицы динамического списка.
//                        Например, Метаданные.Документы.НачислениеЗарплаты.ПолноеИмя().
//
Процедура ПриОпределенииПараметровКолонкиИндикации(ПараметрыКолонкиИндикации, ПолноеИмя) Экспорт
	
	
	
КонецПроцедуры

// Позволяет дозаполнить информацию о проблеме перед ее регистрацией.
// В частности, можно заполнить дополнительные значения для ограничения доступа на уровне записей 
// к списку проблем ведения учета.
//
// Параметры:
//   Проблема - Структура - Сформированная алгоритмом проверки информация о проблеме:
//     * ПроблемныйОбъект         - ЛюбаяСсылка - объект, по поводу которого записывается проблема.
//                                                Либо ссылка на элемент справочника ИдентификаторыОбъектовМетаданных
//     * ПравилоПроверки          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на выполненную проверку.
//     * ВидПроверки              - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к которому 
//                                  относится выполненная проверка.
//     * КлючУникальности         - УникальныйИдентификатор - Ключ уникальности проблемы.
//     * УточнениеПроблемы        - Строка - Строка-уточнение найденной проблемы.
//     * ВажностьПроблемы         - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                  "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//     * Ответственный            - СправочникСсылка.Пользователи - Заполнен если есть возможность
//                                  идентифицировать ответственного в проблемном объекте.
//     * ИгнорироватьПроблему     - Булево - Флаг игнорирования проблемы. Если имеет значение "Истина",
//                                  запись о проблеме игнорируется подсистемой.
//     * ДополнительнаяИнформация - ХранилищеЗначений - Служебное свойство с дополнительными
//                                  сведениями, связанными с выявленной проблемой.
//     * Выявлено                 - Дата - Серверное время идентификации проблемы.
//
//   СсылкаНаОбъект  - ЛюбаяСсылка - Ссылка на объект-источник значения для добавляемых
//                     дополнительных измерений.
//   Реквизиты       - КоллекцияОбъектовМетаданных - Коллекция, содержащая реквизиты объекта-
//                     источника проблем.
//
Процедура ПередЗаписьюПроблемы(Проблема, СсылкаНаОбъект, Реквизиты) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить логику поведения выполнения проверки до отработки логики подсистемы.
//
// Параметры:
//   Проверка          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на правило проверки,
//                       которая будет выполняться.
//   ПараметрыПроверки - Структура - Сформированная алгоритмом проверки структура проблемы.
//      * Идентификатор                     - Строка - Строковый идентификатор проверки.
//      * Представление                     - Строка - Пользовательское представление проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                            соответствующего проверке.
//      * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                            объектов (только для объектов с датой). Объекты, дата которых
//                                            меньше указанной, не следует проверять. По умолчанию не 
//                                            заполнено (т.е. проверять все).
//      * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                            По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки                  - Число - Очередная итерация проверки. Используется совместно с параметром
//                                            ЛимитПроблем для определения предельного количества итераций.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на
//                                            выполненную проверку.
//      * ВидПроверки                       - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к
//                                            которому относится выполненная проверка.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
Процедура ПриВыполненииПроверки(Проверка, ПараметрыПроверки) Экспорт
	
КонецПроцедуры

// Позволяет переопределить логику поведения выполнения проверки после отработки логики подсистемы.
//
// Параметры:
//   Проверка          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на правило проверки, которая выполнялась.
//   ПараметрыПроверки - Структура - Сформированная алгоритмом проверки структура проблемы.
//      * Идентификатор                     - Строка - Строковый идентификатор проверки.
//      * Представление                     - Строка - Пользовательское представление проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                            соответствующего проверке.
//      * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                            объектов (только для объектов с датой). Объекты, дата которых
//                                            меньше указанной, не следует проверять. По умолчанию не 
//                                            заполнено (т.е. проверять все).
//      * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                            По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки                  - Число - Очередная итерация проверки. Используется совместно с параметром
//                                            ЛимитПроблем для определения предельного количества итераций.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на
//                                            выполненную проверку.
//      * ВидПроверки                       - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к
//                                            которому относится выполненная проверка.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
Процедура ПослеВыполненияПроверки(Проверка, ПараметрыПроверки) Экспорт
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела: Следует использовать функцию ПриОпределенииПроверок.
// Предназначена для подключения собственных правил проверки ведения учета.
//
// Параметры:
//   ГруппыПроверок - ТаблицаЗначений - Таблица, в которую добавляются группы проверок:
//      * Наименование  - Строка - Наименование группы проверок, например: "Системные проверки".
//      * Идентификатор - Строка - Строковый идентификатор группы, например: "СистемныеПроверки".
//
//   Проверки - ТаблицаЗначений - Таблица, в которую добавляются проверки:
//      * Наименование                   - Строка - Наименование элемента проверки. Обязательно для заполнения.
//      * Причины                        - Строка - Возможные причины, которые привели к возникновению проблемы.
//                                                  Выводятся в отчете о проблемах. Необязательно для заполнения.
//      * Рекомендация                   - Строка - Рекомендация по решению возникшей проблемы.
//                                                  Выводятся в отчете о проблемах. Необязательно для заполнения.
//      * Идентификатор                  - Строка - Строковый идентификатор проверки. Обязателен для заполнения.
//      * ИдентификаторРодителя          - Строка - Строковый идентификатор группы проверок, например: "СистемныеПроверки".
//                                                  Обязательно для заполнения.
//      * ДатаНачалаПроверки             - Дата - Пороговая дата, обозначающая границу проверяемых
//                                         объектов (только для объектов с датой). Объекты, дата которых меньше
//                                         указанной, не следует проверять. По умолчанию не заполнено (т.е. проверять все).
//      * ЛимитПроблем                   - Число - Максимальное количество проверяемых объектов.
//                                         По умолчанию 0 - следует проверить все объекты.
//      * ОбработчикПроверки             - Строка - Имя экспортной процедуры-обработчика проверки в серверном общем модуле.
//                                         Предназначен для поиска и регистрации проблем ведения учета.
//                                         Параметры обработчика проверки:
//                                           * Проверка - СправочникСсылка.ПравилаПроверкиУчета - исполняемая проверка.
//                                           * ПараметрыПроверки - Структура - Параметры проверки, которую необходимо выполнить.
//                                                                             Подробнее см. в документации.
//      * ОбработчикПереходаКИсправлению - Строка - Имя экспортной процедуры-обработчика исправления проблемы 
//                                         в клиентском общем модуле или полное имя формы, которая будет открыта для
//                                         исправления проблемы. Параметры обработчика исправления проблемы или формы:
//                                          * ИдентификаторПроверки - Строка - идентификатор проверки, 
//                                                                    которая выявила проблему.
//                                          * ВидПроверки - СправочникСсылка.ВидыПроверок - вид проверки 
//                                                          с дополнительной информацией о проблеме.
//      * ДополнительныеПараметры        - ХранилищеЗначений - Дополнительная информация по проверке.
//
// Пример:
//   Проверка = Проверки.Добавить();
//   Проверка.ИдентификаторГруппы = "СистемныеПроверки";
//   Проверка.Наименование        = НСтр("ru='Демо: Проверка заполнения комментария в документах ""Демо: Поступление товаров""'");
//   Проверка.Причины             = НСтр("ru='Не введен комментарий в документе.'");
//   Проверка.Рекомендация        = НСтр("ru='Ввести комментарий в документе.'");
//   Проверка.Идентификатор       = "ПроверитьКомментарийВПоступленииТоваров";
//   Проверка.ОбработчикПроверки  = "_ДемоСтандартныеПодсистемы.ПроверитьКомментарийВПоступленииТоваров";
//   Проверка.ДатаНачалаПроверки  = Дата('20140101000000');
//   Проверка.ЛимитПроблем        = 3;
//
Процедура ПриОпределенииПрикладныхПроверок(ГруппыПроверок, Проверки) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБП

// Проверяет счета с субконто "Договоры" и "Склады".
//
// Параметры:
//   Проверка          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на правило проверки, которая выполнялась.
//   ПараметрыПроверки - Структура - Сформированная алгоритмом проверки структура проблемы.
//      * Идентификатор                     - Строка - Строковый идентификатор проверки.
//      * Представление                     - Строка - Пользовательское представление проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                            соответствующего проверке.
//      * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                            объектов (только для объектов с датой). Объекты, дата которых
//                                            меньше указанной, не следует проверять. По умолчанию не 
//                                            заполнено (т.е. проверять все).
//      * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                            По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки                  - Число - Очередная итерация проверки. Используется совместно с параметром
//                                            ЛимитПроблем для определения предельного количества итераций.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на
//                                            выполненную проверку.
//      * ВидПроверки                       - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к
//                                            которому относится выполненная проверка.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
Процедура ПроверкаСубконтоКонтрагентыИНоменклатура(Проверка, ПараметрыПроверки) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)
		|		ИЛИ Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады)";
	Выборка = Запрос.Выполнить().Выбрать();

	СтруктураПоискаДоговора = Новый Структура();
	СтруктураПоискаДоговора.Вставить("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	СтруктураПоискаКонтрагента = Новый Структура();
	СтруктураПоискаКонтрагента.Вставить("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	                                                                                                             
	СтруктураПоискаНоменклатуры = Новый Структура();
	СтруктураПоискаНоменклатуры.Вставить("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	Пока Выборка.Следующий() Цикл
		Ошибка = Ложь;
		
		Если Выборка.Ссылка.ВидыСубконто.НайтиСтроки(СтруктураПоискаДоговора).Количество() > 0 Тогда
			Если Выборка.Ссылка.ВидыСубконто.НайтиСтроки(СтруктураПоискаКонтрагента).Количество() = 0 Тогда	
				Ошибка = Истина;
				ТекстУточнения = НСтр("ru = 'Обнаружен субконто ""Договоры"" но отсутствует субконто ""Контрагенты"":'") + Символы.ПС;
			КонецЕсли;
			
		Иначе
			Если Выборка.Ссылка.ВидыСубконто.НайтиСтроки(СтруктураПоискаНоменклатуры).Количество() = 0 Тогда	
				Ошибка = Истина;
				ТекстУточнения = НСтр("ru = 'Обнаружен субконто ""Склады"" но отсутствует субконто ""Номенклатура"":'") + Символы.ПС;
			КонецЕсли;	
		КонецЕсли;
		
		Если Ошибка Тогда
			Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(Выборка.Ссылка, ПараметрыПроверки);
			Проблема.УточнениеПроблемы = ТекстУточнения;
			КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры

// Проверяет счета с субконто "ДенежныеСредства" и "СтатьиДвиженияДенежныхСредств".
//
// Параметры:
//   Проверка          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на правило проверки, которая выполнялась.
//   ПараметрыПроверки - Структура - Сформированная алгоритмом проверки структура проблемы.
//      * Идентификатор                     - Строка - Строковый идентификатор проверки.
//      * Представление                     - Строка - Пользовательское представление проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                            соответствующего проверке.
//      * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                            объектов (только для объектов с датой). Объекты, дата которых
//                                            меньше указанной, не следует проверять. По умолчанию не 
//                                            заполнено (т.е. проверять все).
//      * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                            По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки                  - Число - Очередная итерация проверки. Используется совместно с параметром
//                                            ЛимитПроблем для определения предельного количества итераций.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на
//                                            выполненную проверку.
//      * ВидПроверки                       - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к
//                                            которому относится выполненная проверка.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
Процедура ПроверкаСубконтоДС_СДДС(Проверка, ПараметрыПроверки) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеСредстваВКассе)
		|		ИЛИ Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеСредстваВБанке)
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	НЕ (Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеСредстваВКассе)
		|		ИЛИ Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеСредстваВБанке)";
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураПоискаДС = Новый Структура();
	СтруктураПоискаДС.Вставить("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДенежныеСредства);
	
	СтруктураПоискаСДДС = Новый Структура();
	СтруктураПоискаСДДС.Вставить("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств);
	
	ВыборкаСчетовДС_СДДС = МассивРезультатов[0].Выбрать();
	
	Пока ВыборкаСчетовДС_СДДС.Следующий() Цикл
		
		ВидыСубконто = ВыборкаСчетовДС_СДДС.Ссылка.ВидыСубконто;
		Ошибка = Ложь;
		
		Если ВидыСубконто.НайтиСтроки(СтруктураПоискаДС).Количество() = 0 Тогда
			Ошибка = Истина;
			ТекстУточнения = НСтр("ru = 'У счета не обнаружено субконто ""Денежные средства"".'") + Символы.ПС;
		КонецЕсли;
				
		Если ВидыСубконто.НайтиСтроки(СтруктураПоискаСДДС).Количество() = 0 Тогда
			Если Ошибка Тогда
				ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
										  |У счета не обнаружено субконто ""Статья движения денежных средств"".'"), ТекстУточнения);
			Иначе
				ТекстУточнения = НСтр("ru = 'У счета не обнаружено субконто ""Статья движения денежных средств"".'") + Символы.ПС;
			КонецЕсли;
			
			Ошибка = Истина;
		КонецЕсли;
		
		Если ВидыСубконто.Количество() < 2 Тогда
			Если Ошибка Тогда
				ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
										  |У счета не хватает субконто.'"), ТекстУточнения);
			Иначе
				ТекстУточнения = НСтр("ru = 'У счета не хватает субконто.'") + Символы.ПС;
			КонецЕсли;
			
			Ошибка = Истина;			
		КонецЕсли;
		
		Если ВидыСубконто.Количество() > 2 Тогда
			Если Ошибка Тогда
				ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
										  |У счета лишнее субконто.'"), ТекстУточнения);
			Иначе
				ТекстУточнения = НСтр("ru = 'У счета лишнее субконто.'") + Символы.ПС;
			КонецЕсли;
			
			Ошибка = Истина;			
		КонецЕсли;
		
		Если Ошибка Тогда
			Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(ВыборкаСчетовДС_СДДС.Ссылка, ПараметрыПроверки);
			Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = '%1'"),ТекстУточнения);
			КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);	
		КонецЕсли;
	КонецЦикла;

	ВыборкаОстальныхСчетов = МассивРезультатов[1].Выбрать();
	
	Пока ВыборкаОстальныхСчетов.Следующий() Цикл
		
		ВидыСубконто = ВыборкаОстальныхСчетов.Ссылка.ВидыСубконто;
		Ошибка = Ложь;
		
		Если ВидыСубконто.НайтиСтроки(СтруктураПоискаДС).Количество() > 0 Тогда	
			Ошибка = Истина;
			ТекстУточнения = НСтр("ru = 'У счета обнаружено субконто ""Денежные средства"".'") + Символы.ПС;
		КонецЕсли;
			
		Если ВидыСубконто.НайтиСтроки(СтруктураПоискаСДДС).Количество() > 0 Тогда
			Если Ошибка Тогда
				ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
										  |У счета обнаружено субконто ""Статья движения денежных средств"".'"), ТекстУточнения);
			Иначе
				ТекстУточнения = НСтр("ru = 'У счета обнаружено субконто ""Статья движения денежных средств"".'") + Символы.ПС;
			КонецЕсли;
			
			Ошибка = Истина;			
		КонецЕсли;
		
		Если Ошибка Тогда
			Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(ВыборкаОстальныхСчетов.Ссылка, ПараметрыПроверки);
			Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = '%1'"),ТекстУточнения);
			КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Проверяет признаки и признаки субконто счетов 6ххх, 7ххх, 8ххх, 9ххх.
//
// Параметры:
//   Проверка          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на правило проверки, которая выполнялась.
//   ПараметрыПроверки - Структура - Сформированная алгоритмом проверки структура проблемы.
//      * Идентификатор                     - Строка - Строковый идентификатор проверки.
//      * Представление                     - Строка - Пользовательское представление проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                            соответствующего проверке.
//      * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                            объектов (только для объектов с датой). Объекты, дата которых
//                                            меньше указанной, не следует проверять. По умолчанию не 
//                                            заполнено (т.е. проверять все).
//      * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                            По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки                  - Число - Очередная итерация проверки. Используется совместно с параметром
//                                            ЛимитПроблем для определения предельного количества итераций.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на
//                                            выполненную проверку.
//      * ВидПроверки                       - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к
//                                            которому относится выполненная проверка.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
Процедура ПроверкаПризнаковСчета(Проверка, ПараметрыПроверки) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Ссылка,
		|	Хозрасчетный.Временный КАК Временный,
		|	Хозрасчетный.Валютный КАК Валютный,
		|	Хозрасчетный.Количественный КАК Количественный
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
		|	И (ПОДСТРОКА(Хозрасчетный.Код, 0, 1) = ""6""
		|		  ИЛИ ПОДСТРОКА(Хозрасчетный.Код, 0, 1) = ""7""
		|		  ИЛИ ПОДСТРОКА(Хозрасчетный.Код, 0, 1) = ""8""
		|		  ИЛИ ПОДСТРОКА(Хозрасчетный.Код, 0, 1) = ""9"")
		|;
		|
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Временный
		|	И НЕ(ПОДСТРОКА(Хозрасчетный.Код, 0, 1) = ""6""
		|		    ИЛИ ПОДСТРОКА(Хозрасчетный.Код, 0, 1) = ""7""
		|		    ИЛИ ПОДСТРОКА(Хозрасчетный.Код, 0, 1) = ""8""
		|		    ИЛИ ПОДСТРОКА(Хозрасчетный.Код, 0, 1) = ""9"")";
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ТолькоОбороты", Ложь);
	
	ВыборкаСчетов6789 = МассивРезультатов[0].Выбрать();		

	Пока ВыборкаСчетов6789.Следующий() Цикл
		Ошибка = Ложь;
		
		Если ВыборкаСчетов6789.Ссылка.ВидыСубконто.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
			Ошибка = Истина;
			ТекстУточнения = НСтр("ru = 'У субконто счета не установлен признак ""Только обороты"".'") + Символы.ПС;
		КонецЕсли;
				
		Если НЕ ВыборкаСчетов6789.Временный Тогда
			Если Ошибка Тогда
				ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
										  |У счета не указан признак ""Временный"".'"), ТекстУточнения);
			Иначе
				ТекстУточнения = НСтр("ru = 'У счета не указан признак ""Временный"".'") + Символы.ПС;
			КонецЕсли;
			
			Ошибка = Истина;
		КонецЕсли;
			
		Если ВыборкаСчетов6789.Валютный Тогда
			Если Ошибка Тогда
				ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
										  |У счета указан признак ""Валютный"".'"), ТекстУточнения);
			Иначе
				ТекстУточнения = НСтр("ru = 'У счета указан признак ""Валютный"".'") + Символы.ПС;
			КонецЕсли;
			
			Ошибка = Истина;
		КонецЕсли;
			
		Если ВыборкаСчетов6789.Количественный Тогда
			Если Ошибка Тогда
				ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
										  |У счета указан признак ""Количественный"".'"), ТекстУточнения);
			Иначе
				ТекстУточнения = НСтр("ru = 'У счета указан признак ""Количественный"".'") + Символы.ПС;
			КонецЕсли;
			
			Ошибка = Истина;
		КонецЕсли;
		
		Если Ошибка Тогда
			Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(ВыборкаСчетов6789.Ссылка, ПараметрыПроверки);
			Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = '%1'"),ТекстУточнения);
			КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);	
		КонецЕсли;
	КонецЦикла;
	
	ВыборкаОстальныхСчетов = МассивРезультатов[1].Выбрать();		

	Пока ВыборкаОстальныхСчетов.Следующий() Цикл
		Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(ВыборкаОстальныхСчетов.Ссылка, ПараметрыПроверки);
		Проблема.УточнениеПроблемы = НСтр("ru = 'У счета указан признак ""Временный"".'") + Символы.ПС;
		КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);	
	КонецЦикла;
КонецПроцедуры

// Проверяет правильность указания парных счетов.
//
// Параметры:
//   Проверка          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на правило проверки, которая выполнялась.
//   ПараметрыПроверки - Структура - Сформированная алгоритмом проверки структура проблемы.
//      * Идентификатор                     - Строка - Строковый идентификатор проверки.
//      * Представление                     - Строка - Пользовательское представление проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                            соответствующего проверке.
//      * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                            объектов (только для объектов с датой). Объекты, дата которых
//                                            меньше указанной, не следует проверять. По умолчанию не 
//                                            заполнено (т.е. проверять все).
//      * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                            По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки                  - Число - Очередная итерация проверки. Используется совместно с параметром
//                                            ЛимитПроблем для определения предельного количества итераций.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на
//                                            выполненную проверку.
//      * ВидПроверки                       - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к
//                                            которому относится выполненная проверка.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
Процедура ПроверкаПарныхСчетов(Проверка, ПараметрыПроверки) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
		// 1. Выбираются все парные счета и свойства первого счета.
		// 2. Выбираются все парные счета, где ни один из счетов не является 1ххх или 2ххх.
		// 3. Выбираются все парные счета.
		// 4. Выбираются парные счета, где один счет 1ххх, а второй не 3ххх, за исключением счетов 1750 и 1795.
		// 5. Выбираются парные счета, где один счет 21хх или 29хх, а второй не 21хх или 29хх.
		// 6. Выбираются счета, где один счет 2ххх, но не 21хх и не 29хх, а второй счет не 4ххх.
		// 7. Выбирюатся все данные из 1 пункта, но коды счета и парного счета обрезаются до двух первых цифр.
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет,
		|	Хозрасчетный.ПарныйСчет КАК ПарныйСчет,
		|	Хозрасчетный.Код КАК КодСчета,
		|	Хозрасчетный.ПарныйСчет.Код КАК КодПарногоСчета,
		|	Хозрасчетный.Забалансовый КАК Забалансовый,
		|	Хозрасчетный.ЗапретитьИспользоватьВПроводках КАК ЗапретитьИспользоватьВПроводках,
		|	Хозрасчетный.Временный КАК Временный,
		|	Хозрасчетный.Валютный КАК Валютный,
		|	Хозрасчетный.Количественный КАК Количественный,
		|	Хозрасчетный.Вид КАК Вид
		|ПОМЕСТИТЬ ВременнаяТаблицаПарныеСчета
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	НЕ Хозрасчетный.ПарныйСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаПарныеСчета.Счет КАК Счет,
		|	ВременнаяТаблицаПарныеСчета.ПарныйСчет КАК ПарныйСчет
		|ИЗ
		|	ВременнаяТаблицаПарныеСчета КАК ВременнаяТаблицаПарныеСчета
		|ГДЕ
		|	ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодСчета, 0, 1) <> ""1""
		|	И ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодСчета, 0, 1) <> ""2""
		|	И ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодПарногоСчета, 0, 1) <> ""1""
		|	И ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодПарногоСчета, 0, 1) <> ""2""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаПарныеСчета.Счет КАК Счет,
		|	ВременнаяТаблицаПарныеСчета.ПарныйСчет КАК ПарныйСчет
		|ИЗ
		|	ВременнаяТаблицаПарныеСчета КАК ВременнаяТаблицаПарныеСчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаПарныеСчета.Счет КАК Счет,
		|	ВременнаяТаблицаПарныеСчета.ПарныйСчет КАК ПарныйСчет
		|ИЗ
		|	ВременнаяТаблицаПарныеСчета КАК ВременнаяТаблицаПарныеСчета
		|ГДЕ
		|	ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодСчета, 0, 1) = ""1""
		|	И ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодПарногоСчета, 0, 1) <> ""3""
		|	И (ВременнаяТаблицаПарныеСчета.КодСчета <> ""1750""
		|		ИЛИ ВременнаяТаблицаПарныеСчета.КодПарногоСчета <> ""1750"")
		|		ИЛИ ВременнаяТаблицаПарныеСчета.КодСчета <> ""1795""
		|		ИЛИ ВременнаяТаблицаПарныеСчета.КодПарногоСчета <> ""1795"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаПарныеСчета.Счет КАК Счет,
		|	ВременнаяТаблицаПарныеСчета.ПарныйСчет КАК ПарныйСчет
		|ИЗ
		|	ВременнаяТаблицаПарныеСчета КАК ВременнаяТаблицаПарныеСчета
		|ГДЕ
		|	(ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодСчета, 0, 2) = ""21""
		|			ИЛИ ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодСчета, 0, 2) = ""29"")
		|	И ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодПарногоСчета, 0, 2) <> ""21""
		|	И ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодПарногоСчета, 0, 2) <> ""29""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаПарныеСчета.Счет КАК Счет,
		|	ВременнаяТаблицаПарныеСчета.ПарныйСчет КАК ПарныйСчет
		|ИЗ
		|	ВременнаяТаблицаПарныеСчета КАК ВременнаяТаблицаПарныеСчета
		|ГДЕ
		|	ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодСчета, 0, 1) = ""2""
		|	И ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодСчета, 0, 2) <> ""21""
		|	И ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодСчета, 0, 2) <> ""29""
		|	И ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодПарногоСчета, 0, 1) <> ""4""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаПарныеСчета.Счет КАК Счет,
		|	ВременнаяТаблицаПарныеСчета.ПарныйСчет КАК ПарныйСчет,
		|	ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодСчета, 0, 2) КАК КодСчета,
		|	ПОДСТРОКА(ВременнаяТаблицаПарныеСчета.КодПарногоСчета, 0, 2) КАК КодПарногоСчета,
		|	ВременнаяТаблицаПарныеСчета.Забалансовый КАК Забалансовый,
		|	ВременнаяТаблицаПарныеСчета.ЗапретитьИспользоватьВПроводках КАК ЗапретитьИспользоватьВПроводках,
		|	ВременнаяТаблицаПарныеСчета.Временный КАК Временный,
		|	ВременнаяТаблицаПарныеСчета.Валютный КАК Валютный,
		|	ВременнаяТаблицаПарныеСчета.Количественный КАК Количественный,
		|	ВременнаяТаблицаПарныеСчета.Вид КАК Вид
		|ИЗ
		|	ВременнаяТаблицаПарныеСчета КАК ВременнаяТаблицаПарныеСчета";
		
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Парный счет указывается только для счетов 1ххх и 2ххх.
	ВыборкаОшибочныеПарныеСчета = МассивРезультатов[1].Выбрать();		
	
	Пока ВыборкаОшибочныеПарныеСчета.Следующий() Цикл
		Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(ВыборкаОшибочныеПарныеСчета.Счет, ПараметрыПроверки);
		Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'Парный счет указывается только для счетов 1ххх и 2ххх.
														  |А для счета %1 указан парный счет %2.'"),
														  ВыборкаОшибочныеПарныеСчета.Счет, ВыборкаОшибочныеПарныеСчета.ПарныйСчет);
		КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
	КонецЦикла;

	// Каждый парный счет указывается только  для одного счета. 
	ТЗПарныхСчетов = МассивРезультатов[2].Выгрузить();
	ТЗПарныхСчетов.Индексы.Добавить("Счет");

	Для Каждого СтрокаТаблицыЗначений Из ТЗПарныхСчетов Цикл
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Счет", СтрокаТаблицыЗначений.Счет);
		МассивСтрок = ТЗПарныхСчетов.НайтиСтроки(СтруктураОтбора);
		КоличествоСтрок = МассивСтрок.Количество();
		Если КоличествоСтрок > 1 Тогда
			СчетаСтрокой = НСтр("ru = 'Данный счет является парным для счетов:'");
			Для Каждого СтрокаМассива Из МассивСтрок Цикл
				Если КоличествоСтрок = 1 Тогда
					СчетаСтрокой = СтрШаблон(НСтр("ru = '%1 %2,'"), СчетаСтрокой, СтрокаТаблицыЗначений.ПарныйСчет);
				Иначе
					СчетаСтрокой = СтрШаблон(НСтр("ru = '%1 %2.'"), СчетаСтрокой, СтрокаТаблицыЗначений.ПарныйСчет);
				КонецЕсли;
				КоличествоСтрок = КоличествоСтрок - 1;
			КонецЦикла;
			
			Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(СтрокаТаблицыЗначений.Счет, ПараметрыПроверки);
			Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'Каждый парный счет указывается только для одного счета.
															  |%1.'"), СчетаСтрокой);
			КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
		КонецЕсли;
	КонецЦикла;
	
	// Для счета 1ххх парный счет должен быть 3ххх.
	ВыборкаПарныхСчетов1ххх = МассивРезультатов[3].Выбрать();		
	
	Пока ВыборкаПарныхСчетов1ххх.Следующий() Цикл
		Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(ВыборкаПарныхСчетов1ххх.Счет, ПараметрыПроверки);
		Проблема.УточнениеПроблемы = НСтр("ru = 'Для счета 1ххх парный счет должен быть 3ххх.'");
		КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
	КонецЦикла;
	
	// Для счета 21хх или 29хх парный счет должен быть также 21хх или 29хх.
	ВыборкаПарныхСчетов21хх_29хх = МассивРезультатов[4].Выбрать();		
	
	Пока ВыборкаПарныхСчетов21хх_29хх.Следующий() Цикл
		Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(ВыборкаПарныхСчетов21хх_29хх.Счет, ПараметрыПроверки);
		Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = 'Для счета 21хх или 29хх парный счет должен быть также 21хх или 29хх.'"),
														  ВыборкаПарныхСчетов21хх_29хх.Счет);
		КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
	КонецЦикла;
	
	// Для прочих счетов 2ххх парный счет должен быть 4ххх.
	ВыборкаПрочихПарныхСчетов2ххх = МассивРезультатов[5].Выбрать();		
	
	Пока ВыборкаПрочихПарныхСчетов2ххх.Следующий() Цикл
		Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(ВыборкаПрочихПарныхСчетов2ххх.Счет, ПараметрыПроверки);
		Проблема.УточнениеПроблемы = НСтр("ru = 'Для счетов 2ххх, кроме 21хх и 29хх, парный счет должен быть 4ххх.'");
		КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
	КонецЦикла;
	
	// Для парных счетов кроме 21хх и 29хх все признаки, субконто и признаки субконто должны совпадать. 
	// Первый счет пары должен быть активным, а второй – пассивным.
	ТЗСчетовСравнения = МассивРезультатов[6].Выгрузить();
	
	Счет = Неопределено;
	ПарныйСчет = Неопределено;
	
	Для Каждого СтрокаТаблицыЗначений Из ТЗСчетовСравнения Цикл;
		
		Ошибка = Ложь;
		
		Если Счет = Неопределено Тогда
			Счет = СтрокаТаблицыЗначений.Счет;
			ПарныйСчет = СтрокаТаблицыЗначений.ПарныйСчет;
		КонецЕсли;
		
		Если СтрокаТаблицыЗначений.ПарныйСчет = Счет И СтрокаТаблицыЗначений.Счет = ПарныйСчет Тогда
			Прервать;
		КонецЕсли;
		
		Если (СтрокаТаблицыЗначений.КодСчета <> "21" И СтрокаТаблицыЗначений.КодСчета <> "29")
			ИЛИ (СтрокаТаблицыЗначений.КодПарногоСчета <> "21" И СтрокаТаблицыЗначений.КодПарногоСчета <> "29") Тогда
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Счет", СтрокаТаблицыЗначений.ПарныйСчет);
			
			МассивСтрок = ТЗСчетовСравнения.НайтиСтроки(СтруктураОтбора);
			ДанныеПарногоСчета = МассивСтрок[0];
			
			Если СтрокаТаблицыЗначений.Вид = ВидСчета.Активный И ДанныеПарногоСчета.Вид = ВидСчета.Активный Тогда
				Ошибка = Истина;
				ТекстУточнения = СтрШаблон(НСтр("ru = 'Один счет пары должен быть активным, а второй – пассивным.
										   |Оба парных счета %1 и %2 являются активными.'"), 
										  СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
										  
			ИначеЕсли СтрокаТаблицыЗначений.Вид = ВидСчета.Пассивный И ДанныеПарногоСчета.Вид = ВидСчета.Пассивный Тогда
				Ошибка = Истина;
				ТекстУточнения = СтрШаблон(НСтр("ru = 'Один счет пары должен быть активным, а второй – пассивным.
										   |Оба парных счета %1 и %2 являются пассивными.'"), 
										  СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;	
			КонецЕсли;
			
			Если СтрокаТаблицыЗначений.Забалансовый <> ДанныеПарногоСчета.Забалансовый Тогда
				Если Ошибка Тогда
					ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
											  |У парных счетов %2 и %3 отличаются значения признака ""Забалансовый"".'"), 
											  ТекстУточнения, СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
				Иначе
					ТекстУточнения = СтрШаблон(НСтр("ru = 'У парных счетов %1 и %2 отличаются значения признака ""Забалансовый"".'"), 
											  СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
				КонецЕсли;
				
				Ошибка = Истина;
			КонецЕсли;

			Если СтрокаТаблицыЗначений.ЗапретитьИспользоватьВПроводках <> ДанныеПарногоСчета.ЗапретитьИспользоватьВПроводках Тогда
				Если Ошибка Тогда
					ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
											  |У парных счетов %2 и %3 отличаются значения признака ""Счет является группой"".'"), 
											  ТекстУточнения, СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
				Иначе
					ТекстУточнения = СтрШаблон(НСтр("ru = 'У парных счетов %1 и %2 отличаются значения признака ""Счет является группой"".'"), 
											  СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
				КонецЕсли;
				
				Ошибка = Истина;	
			КонецЕсли;
			
			Если СтрокаТаблицыЗначений.Временный <> ДанныеПарногоСчета.Временный Тогда
				Если Ошибка Тогда
					ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
											  |У парных счетов %2 и %3 отличаются значения признака ""Временный"".'"), 
											  ТекстУточнения, СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
				Иначе
					ТекстУточнения = СтрШаблон(НСтр("ru = 'У парных счетов %1 и %2 отличаются значения признака ""Временный"".'"), 
											  СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
				КонецЕсли;
				
				Ошибка = Истина;	
			КонецЕсли;
			
			Если СтрокаТаблицыЗначений.Валютный <> ДанныеПарногоСчета.Валютный Тогда
				Если Ошибка Тогда
					ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
											  |У парных счетов %2 и %3 отличаются значения признака ""Валютный"".'"), 
											  ТекстУточнения, СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
				Иначе
					ТекстУточнения = СтрШаблон(НСтр("ru = 'У парных счетов %1 и %2 отличаются значения признака ""Валютный"".'"), 
											  СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
				КонецЕсли;
				
				Ошибка = Истина;	
			КонецЕсли;
			
			Если СтрокаТаблицыЗначений.Количественный <> ДанныеПарногоСчета.Количественный Тогда
				Если Ошибка Тогда
					ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
											  |У парных счетов %2 и %3 отличаются значения признака ""Количественный"".'"), 
											  ТекстУточнения, СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
				Иначе
					ТекстУточнения = СтрШаблон(НСтр("ru = 'У парных счетов %1 и %2 отличаются значения признака ""Количественный"".'"), 
											  СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
				КонецЕсли;
				
				Ошибка = Истина;	
			КонецЕсли;

			СубконтоСчета = СтрокаТаблицыЗначений.Счет.ВидыСубконто;
			СубконтоПарногоСчета = ДанныеПарногоСчета.Счет.ВидыСубконто;
			
			Если СубконтоСчета.Количество() <> СубконтоПарногоСчета.Количество() Тогда
				ОдинаковоеКоличествоСубконто = Ложь;
				Если Ошибка Тогда
					ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
											  |У парных счетов %2 и %3 отличается количество субконто.'"), 
											  ТекстУточнения, СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
				Иначе
					ТекстУточнения = СтрШаблон(НСтр("ru = 'У парных счетов %1 и %2 отличается количество субконто.'"), 
											  СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
				КонецЕсли;
				
				Ошибка = Истина;
			Иначе
				ОдинаковоеКоличествоСубконто = Истина;
			КонецЕсли;
			
			Если ОдинаковоеКоличествоСубконто Тогда
				Для Каждого	СтрокаСубконтоСчета Из СубконтоСчета Цикл
					СтруктураОтбора = Новый Структура();
					СтруктураОтбора.Вставить("ВидСубконто", СтрокаСубконтоСчета.ВидСубконто);
					СтруктураОтбора.Вставить("ТолькоОбороты", СтрокаСубконтоСчета.ТолькоОбороты);
					СтруктураОтбора.Вставить("Суммовой", СтрокаСубконтоСчета.Суммовой);
					СтруктураОтбора.Вставить("Валютный", СтрокаСубконтоСчета.Валютный);
					СтруктураОтбора.Вставить("Количественный", СтрокаСубконтоСчета.Количественный);
					
					Если СубконтоПарногоСчета.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
						Если Ошибка Тогда
							ТекстУточнения = СтрШаблон(НСтр("ru = '%1 
													  |У парных счетов %2 и %3 отличаются субконто или признаки субконто.'"), 
													  ТекстУточнения, СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
						Иначе
							ТекстУточнения = СтрШаблон(НСтр("ru = 'У парных счетов %1 и %2 отличаются субконто или признаки субконто.'"), 
													  СтрокаТаблицыЗначений.Счет, СтрокаТаблицыЗначений.ПарныйСчет) + Символы.ПС;
						КонецЕсли;
						Ошибка = Истина;
					КонецЕсли;
					Прервать;
				КонецЦикла;	
			КонецЕсли;
					
			Если Ошибка Тогда
				Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(СтрокаТаблицыЗначений.Счет, ПараметрыПроверки);
				Проблема.УточнениеПроблемы = СтрШаблон(НСтр("ru = '%1'"),ТекстУточнения);
				КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

// Проверяет правильность указания признака "Валютный" у счетов.
//
// Параметры:
//   Проверка          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на правило проверки, которая выполнялась.
//   ПараметрыПроверки - Структура - Сформированная алгоритмом проверки структура проблемы.
//      * Идентификатор                     - Строка - Строковый идентификатор проверки.
//      * Представление                     - Строка - Пользовательское представление проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                            соответствующего проверке.
//      * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                            объектов (только для объектов с датой). Объекты, дата которых
//                                            меньше указанной, не следует проверять. По умолчанию не 
//                                            заполнено (т.е. проверять все).
//      * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                            По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки                  - Число - Очередная итерация проверки. Используется совместно с параметром
//                                            ЛимитПроблем для определения предельного количества итераций.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на
//                                            выполненную проверку.
//      * ВидПроверки                       - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к
//                                            которому относится выполненная проверка.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
Процедура ПроверкаПризнакаВалютный(Проверка, ПараметрыПроверки) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	НЕ(Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)
		|			И Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
		|			ИЛИ Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДенежныеСредства))
		|	И Хозрасчетный.Ссылка <> Значение(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
		|	И Хозрасчетный.Ссылка <> Значение(ПланСчетов.Хозрасчетный.ДолговыеЦенныеБумаги)
		|	И Хозрасчетный.Ссылка <> Значение(ПланСчетов.Хозрасчетный.КредиторскаяЗадолженностьПодотчетнымЛицам)
		|	И Хозрасчетный.Валютный";
	Выборка = Запрос.Выполнить().Выбрать();		

	Пока Выборка.Следующий() Цикл		
		Проблема = КонтрольВеденияУчетаСлужебный.ОписаниеПроблемы(Выборка.Ссылка, ПараметрыПроверки);
		Проблема.УточнениеПроблемы = НСтр("ru = 'У счета не обнаружено необходимых субконто, но стоит признак ""Валютный"".'") + Символы.ПС;
		КонтрольВеденияУчетаСлужебный.ЗаписатьПроблему(Проблема, ПараметрыПроверки);			
	КонецЦикла;
КонецПроцедуры

#КонецОбласти


