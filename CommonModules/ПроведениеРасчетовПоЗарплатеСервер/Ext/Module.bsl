////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА ЗАПИСЕЙ РЕГИСТРОВ РАСЧЕТА

// Алгоритм обработки данных в последовательности категорий расчета
//
// Параметры:
//  ИмяРегистра				 - Строка - имя регистра расчета
//  НаборЗаписейРегистра	 - РегистрРасчетаНаборЗаписей	- набор записей регистра расчета
//  ТабличнаяЧастьДокумента	 - ТабличнаяЧасть - табличная часть документа для синхронизации
// 	Ошибки 					 - Массив - массив сообщений пользователю
Процедура РассчитатьЗаписиРегистраРасчета(ИмяРегистра, НаборЗаписейРегистра, ТабличнаяЧастьДокумента, Ошибки = Неопределено, МассивСтрокДляУдаления = Неопределено) Экспорт 
	Если НаборЗаписейРегистра.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Если МассивСтрокДляУдаления = Неопределено Тогда 
		МассивСтрокДляУдаления = Новый Массив;
	КонецЕсли;	
	
	ИмяПланаВидовРасчета = Метаданные.РегистрыРасчета[ИмяРегистра].ПланВидовРасчета.Имя;
	
	Регистратор = НаборЗаписейРегистра.Отбор.Регистратор.Значение;
	
	// получение массива видов расчета из набора записей
	ТаблицаВидовРасчета = НаборЗаписейРегистра.Выгрузить();
	ТаблицаВидовРасчета.Свернуть("ВидРасчета");
	
	Запрос = Новый Запрос( 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыРасчета.КатегорияРасчета КАК КатегорияРасчета,
		|	ВидыРасчета.СпособРасчета,
		|	ВЫБОР
		|		КОГДА ВидыРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПроцентомОтРазмера) 
		|		ИЛИ ВидыРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.РаботаСверхурочно)
		|		ИЛИ ВидыРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ЗаВредность)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СпособРасчетаПроцентомОтРазмера,
		|	ВЫБОР
		|		КОГДА ВидыРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ВыслугаЛет) 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СпособРасчетаВыслугаЛет,
		|	ВидыРасчета.ТребуетсяРасчетБазы,
		|	ВидыРасчета.ТребуетсяРасчетВремени
		|ИЗ
		|	ПланВидовРасчета." + ИмяПланаВидовРасчета + " КАК ВидыРасчета
		|ГДЕ
		|	ВидыРасчета.Ссылка В(&ВидыРасчетов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыРасчета.КатегорияРасчета.Порядок
		|ИТОГИ ПО
		|	КатегорияРасчета");
	Запрос.УстановитьПараметр("ВидыРасчетов", ТаблицаВидовРасчета.ВыгрузитьКолонку("ВидРасчета"));
	
	ВыборкаКатегорий = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКатегорий.Следующий() Цикл 
		// анализ необходимых данных для оптимизации запроса к данным
		ВложеннаяВыборка = ВыборкаКатегорий.Выбрать();
		
		// получение структуры необходимых данных для расчетов текущей категории
		НеобходимыеДанные = Новый Структура;
		НеобходимыеДанные.Вставить("ТребуетсяРасчетБазы", Ложь);
		НеобходимыеДанные.Вставить("ТребуетсяРасчетВремени", Ложь);

		Пока ВложеннаяВыборка.Следующий() Цикл 
			НеобходимыеДанные.ТребуетсяРасчетБазы = ?(НеобходимыеДанные.ТребуетсяРасчетБазы, НеобходимыеДанные.ТребуетсяРасчетБазы, ВложеннаяВыборка.ТребуетсяРасчетБазы);
			НеобходимыеДанные.ТребуетсяРасчетВремени = ?(НеобходимыеДанные.ТребуетсяРасчетВремени, НеобходимыеДанные.ТребуетсяРасчетВремени, ВложеннаяВыборка.ТребуетсяРасчетВремени);
		КонецЦикла;
		
		ИсходныеДанные = ПолучитьДанныеДляРасчета(ИмяРегистра, ВыборкаКатегорий.КатегорияРасчета, НеобходимыеДанные, Регистратор, ТабличнаяЧастьДокумента);
		
		РассчитатьЗаписиНабора(ИмяРегистра, ИсходныеДанные, НаборЗаписейРегистра, ТабличнаяЧастьДокумента, Ошибки, МассивСтрокДляУдаления);

		НаборЗаписейРегистра.Записать(, Истина);
	КонецЦикла;
КонецПроцедуры

// Механизм получения данных для расчета ресурсов регистра расчета
// по каждой категории расчета
//
// Параметры:
//  ИмяРегистра			 - 	 - 
//  КатегорияРасчета	 - 	 - 
//  НеобходимыеДанные	 - 	 - 
//  Регистратор			 - 	 - 
// Возвращаемое значение:
//   - 
Функция ПолучитьДанныеДляРасчета(ИмяРегистра, КатегорияРасчета, НеобходимыеДанные, Регистратор, ТабличнаяЧастьДокумента) Экспорт 
	
	Запрос = Новый Запрос();
	
	Измерения = Новый Массив(2);
	Измерения[0] = "Физлицо";
	Измерения[1] = "Организация";
	
	Запрос.УстановитьПараметр("ИзмеренияОсновного", 	Измерения);
	Запрос.УстановитьПараметр("ИзмеренияБазового",  	Измерения);
	Запрос.УстановитьПараметр("Регистратор",  			Регистратор);
	Запрос.УстановитьПараметр("КатегорияРасчета",		КатегорияРасчета);
	
	Если ИмяРегистра = "Начисления" Тогда 
		
		ТекстЗапроса = "";
		
		// формирование текста запроса
		ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|Начисления.НомерСтроки 							КАК НомерСтроки,
			|Начисления.ФизЛицо 								КАК ФизЛицо,
			|Начисления.ВидРасчета.ТребуетсяРасчетБазы 			КАК ТребуетсяРасчетБазы,
			|Начисления.ВидРасчета.ТребуетсяРасчетВремени 		КАК ТребуетсяРасчетВремени,
			|Начисления.ВидРасчета.ЗачетОтработанногоВремени 	КАК ЗачетОтработанногоВремени,
			|Начисления.ВидРасчета.Коэффициент 					КАК Коэффициент,
			|Начисления.ВидРасчета.Доля 						КАК Доля,
			|Начисления.ВидРасчета.СпособРасчета 				КАК СпособРасчета";
			
		Если НеобходимыеДанные.ТребуетсяРасчетВремени Тогда 
			ТекстЗапроса = ТекстЗапроса + ",
			|ЕстьNULL(НачисленияДанныеГрафика.ЗначениеЧасовПериодДействия, 0) КАК ЗначениеЧасовПериодДействия,
			|ЕстьNULL(НачисленияДанныеГрафика.ЗначениеЧасовФактическийПериодДействия, 0) КАК ЗначениеЧасовФактическийПериодДействия,
			|ЕстьNULL(НачисленияДанныеГрафика.ЗначениеДнейПериодДействия, 0) КАК ЗначениеДнейПериодДействия,
			|ЕстьNULL(НачисленияДанныеГрафика.ЗначениеДнейФактическийПериодДействия, 0) КАК ЗначениеДнейФактическийПериодДействия";
		КонецЕсли;
		
		Если НеобходимыеДанные.ТребуетсяРасчетБазы Тогда 
			ТекстЗапроса = ТекстЗапроса + ",
			|ЕстьNULL(НачисленияБазаНачисления.РезультатБаза, 0) КАК РезультатБаза";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
			|ИЗ РегистрРасчета.Начисления КАК Начисления";
		 
		Если НеобходимыеДанные.ТребуетсяРасчетВремени Тогда 
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления.ДанныеГрафика(Регистратор = &Регистратор И ВидРасчета.КатегорияРасчета = &КатегорияРасчета) КАК НачисленияДанныеГрафика
			|ПО НачисленияДанныеГрафика.НомерСтроки = Начисления.НомерСтроки";
		КонецЕсли;	
		
		Если НеобходимыеДанные.ТребуетсяРасчетБазы Тогда 
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления.БазаНачисления(&ИзмеренияОсновного, &ИзмеренияБазового, ,Регистратор = &Регистратор и ВидРасчета.КатегорияРасчета = &КатегорияРасчета) КАК НачисленияБазаНачисления
			|ПО НачисленияБазаНачисления.НомерСтроки = Начисления.НомерСтроки";
		КонецЕсли;
					
		ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ Начисления.Регистратор = &Регистратор И Начисления.ВидРасчета.КатегорияРасчета = &КатегорияРасчета
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
	ИначеЕсли ИмяРегистра = "Удержания" Тогда 
		
		// формирование текста запроса
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|Удержания.НомерСтроки 								КАК НомерСтроки,
			|Удержания.ВидРасчета.ТребуетсяРасчетБазы 			КАК ТребуетсяРасчетБазы,
			|Удержания.ВидРасчета.ТребуетсяРасчетВремени 		КАК ТребуетсяРасчетВремени,
			|Удержания.ВидРасчета.СпособРасчета 				КАК СпособРасчета";
				
		Если НеобходимыеДанные.ТребуетсяРасчетБазы Тогда 
			ТекстЗапроса = ТекстЗапроса + ",
			|ЕстьNULL(УдержанияБазаНачисления.РезультатБаза, 0) КАК РезультатБаза";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
			|ИЗ РегистрРасчета.Удержания КАК Удержания";	
		
		Если НеобходимыеДанные.ТребуетсяРасчетБазы Тогда 
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Удержания.БазаНачисления(&ИзмеренияОсновного, &ИзмеренияБазового, ,Регистратор = &Регистратор) КАК УдержанияБазаНачисления
			|ПО УдержанияБазаНачисления.НомерСтроки = Удержания.НомерСтроки";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ Удержания.Регистратор = &Регистратор
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции	

// Механизм обработки в цикле записей из набора записей расчитываемого регистра расчета
//
// Параметры:
//  ИмяРегистра				 - 	 - 
//  ИсходныеДанные			 - 	 - 
//  НаборЗаписейРегистра	 - 	 - 
//  ТабличнаяЧастьДокумента	 - 	 - 
//  Ошибки					 - 	 - 
Процедура РассчитатьЗаписиНабора(ИмяРегистра, ИсходныеДанные, НаборЗаписейРегистра, ТабличнаяЧастьДокумента, Ошибки, МассивСтрокДляУдаления) Экспорт 
	МассивСообщений = Новый Массив;
	
	СтруктураПоиска = Новый Структура("НомерСтроки");
	Для Каждого СтрокаДвижений ИЗ НаборЗаписейРегистра Цикл 
		СтруктураПоиска.НомерСтроки = СтрокаДвижений.НомерСтроки;
		
		Если ИсходныеДанные.НайтиСледующий(СтруктураПоиска) Тогда
			// рассчет каждой записи набора записей
			РассчитатьЗаписьРегистраРасчета(ИмяРегистра, СтрокаДвижений, ИсходныеДанные, Ошибки);
			
			Если ТабличнаяЧастьДокумента = Неопределено Тогда 
				Продолжить;
			КонецЕсли;	
			
			// получаем текущую строку
			СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Получить(НаборЗаписейРегистра.Индекс(СтрокаДвижений));
			
			Если СтрокаТабличнойЧасти = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			// удаление сроки с нулевым результатом
			Если СтрокаДвижений.Результат = 0 Тогда 
				МассивСтрокДляУдаления.Добавить(СтрокаТабличнойЧасти);	
				Продолжить;
			КонецЕсли;	
			
			СтрокаТабличнойЧасти.Результат = СтрокаДвижений.Результат;
			Если ИмяРегистра = "Начисления" Тогда 
				СтрокаТабличнойЧасти.ОтработаноДней = СтрокаДвижений.ОтработаноДней;
				СтрокаТабличнойЧасти.ОтработаноЧасов = СтрокаДвижений.ОтработаноЧасов;
				
				СтрокаТабличнойЧасти.НормаДней = СтрокаДвижений.НормаДней;
				СтрокаТабличнойЧасти.НормаЧасов = СтрокаДвижений.НормаЧасов;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры	

// Алгоритмы расчета начислений и удержаний в соответствии со способами расчета
// процедуру вызываем при расчете каждой записи из набора записей регистра расчета
//
// Параметры:
//  ИмяРегистра		 - 	 - 
//  СтрокаДвижений	 - 	 - 
//  ИсходныеДанные	 - 	 - 
//  Ошибки			 - 	 - 
Процедура РассчитатьЗаписьРегистраРасчета(ИмяРегистра, СтрокаДвижений, ИсходныеДанные, Ошибки) Экспорт 
	
	ВидРасчета 		= СтрокаДвижений.ВидРасчета;
	СпособРасчета 	= ИсходныеДанные.СпособРасчета;
	
	Результат 		= 0;
	ФактДней		= 0;
	ФактЧасов		= 0;
	НормаДней       = 0;
	НормаЧасов      = 0;

	Если ИсходныеДанные.ТребуетсяРасчетВремени Тогда 
		ФактДней		= ИсходныеДанные.ЗначениеДнейФактическийПериодДействия;
		ФактЧасов		= ИсходныеДанные.ЗначениеЧасовФактическийПериодДействия; // - ИсходныеДанные.ОтработаноЧасовНеявки;
		НормаДней       = ИсходныеДанные.ЗначениеДнейПериодДействия;
		НормаЧасов      = ИсходныеДанные.ЗначениеЧасовПериодДействия;
	КонецЕсли;	
	
	ШаблонТекстаСообщения = "";
	
	Если ИмяРегистра = "Начисления" Тогда 
		
		// этот "Если..." нужно расширять при появлении новых способов расчета		
		
		// Процентом (формула = РезультатБаза * Размер)
		Если СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.Процентом") Тогда 
			Если ИсходныеДанные.РезультатБаза = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Не определены базовые начисления для вида расчета ""%1""; сотрудник ""%2"".'");
			Иначе
				Результат = ИсходныеДанные.РезультатБаза * СтрокаДвижений.Размер / 100;
			КонецЕсли;	

		// Фиксированной суммой (формула = Размер)
		ИначеЕсли СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ФиксированнойСуммой") Тогда
			Результат = СтрокаДвижений.Размер;
			
		// По месячной ставке по дням (формула = Размер * ФактДней / НормаДней)
		ИначеЕсли СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ПоМесячнойСтавкеПоДням") Тогда
			Если НормаДней = 0 Или ФактДней = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Нет рабочих дней в заданном периоде для вида расчета ""%1""; сотрудник ""%2"".'");
			Иначе	
				Результат = СтрокаДвижений.Размер * (ФактДней / НормаДней);
			КонецЕсли;
			
		// По месячной ставке по часам (формула = Размер * ФактЧасов / НормаЧасов)
		ИначеЕсли СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ПоМесячнойСтавкеПоЧасам") Тогда
			Если НормаЧасов = 0 Или ФактЧасов = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Нет рабочих часов в заданном периоде для вида расчета ""%1""; сотрудник ""%2"".'");
			Иначе	
				Результат = СтрокаДвижений.Размер * (ФактЧасов / НормаЧасов);
			КонецЕсли;
			
		// По дневной ставке (формула = Размер * ФактДней)
		ИначеЕсли СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ПоДневнойСтавке") Тогда
			Если ФактДней = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Нет рабочих дней в заданном периоде для вида расчета ""%1""; сотрудник ""%2"".'");
			Иначе	
				Результат = СтрокаДвижений.Размер * ФактДней;
			КонецЕсли;
			
		// По часовой ставке (формула = Размер * ФактЧасов)
		ИначеЕсли СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ПоЧасовойСтавке") Тогда
			Если ФактЧасов = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Нет рабочих часов в заданном периоде для вида расчета ""%1""; сотрудник ""%2"".'");
			Иначе	
				Результат = СтрокаДвижений.Размер * ФактЧасов;
			КонецЕсли;
			
		// Ночные, Праздничные, Работа сверхурочно  (формула = РазмерОсновногоВидаРасчета / НормаЧасов * ФактЧасов * Коэффициент)
		ИначеЕсли СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.РаботаСверхурочно") Тогда
			ФактДней = СтрокаДвижений.ОтработаноДней;
			ФактЧасов = СтрокаДвижений.ОтработаноЧасов;
			
			Если НормаЧасов = 0 Или ФактЧасов = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Нет рабочих часов в заданном периоде; вид расчета ""%1""; сотрудник ""%2"".'");
			ИначеЕсли ИсходныеДанные.РезультатБаза = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Не определены базовые начисления; вид расчета ""%1""; сотрудник ""%2"".'");
			ИначеЕсли ИсходныеДанные.Коэффициент = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Не указан коэффициент; вид расчета ""%1""; сотрудник ""%2"".'");
			Иначе
				СтрокаДвижений.Размер = ИсходныеДанные.РазмерОсновногоВидаРасчета;
				//Если ИсходныеДанные.ОсновнойВидРасчетаПоЧасовойСтавке Тогда 
				//	Результат = ИсходныеДанные.РазмерОсновногоВидаРасчета * ФактЧасов * ИсходныеДанные.Коэффициент;
				//Иначе 
				//	Результат = ИсходныеДанные.РазмерОсновногоВидаРасчета / НормаЧасов * ФактЧасов * ИсходныеДанные.Коэффициент;
				//КонецЕсли;
				Результат = 0;
			КонецЕсли;
			
		////////////////////////////////////////////////////////////////////////////////
		// РАСЧЕТ ОТ ОБРАТНОГО
		
		ИначеЕсли СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ПоМесячнойСтавкеОтОбратногоПоДням") Тогда
			Если НормаДней = 0 Или ФактДней = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Нет рабочих дней в заданном периоде для вида расчета ""%1""; сотрудник ""%2"".'");
			КонецЕсли;
		КонецЕсли;	
			
		Если ВидРасчета.ЗачетОтработанногоВремени Тогда 
			СтрокаДвижений.ОтработаноДней 	= ФактДней * ?(СтрокаДвижений.Сторно, -1, 1);
			СтрокаДвижений.ОтработаноЧасов 	= ФактЧасов * ?(СтрокаДвижений.Сторно, -1, 1);
			
			СтрокаДвижений.НормаДней 		= НормаДней;
			СтрокаДвижений.НормаЧасов 		= НормаЧасов;
		КонецЕсли;
		
	ИначеЕсли ИмяРегистра = "Удержания"	 Тогда 
		// этот "Если..." нужно расширять при появлении новых способов расчета		
		
		// Процентом (формула = РезультатБаза * Размер)
		Если СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаУдержаний.Процентом") Тогда 
			Если ИсходныеДанные.РезультатБаза = 0 Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Не определены базовые начисления для вида расчета ""%1""; сотрудник ""%2"".'");
			ИначеЕсли ИсходныеДанные.РезультатБаза <= СтрокаДвижений.РазмерВычета Тогда 
				ШаблонТекстаСообщения = НСтр("ru = 'Размер вычета налоговых сумм превышает базовые начисления для вида расчета ""%1""; сотрудник ""%2"".'");
			Иначе
				Результат = (ИсходныеДанные.РезультатБаза - СтрокаДвижений.РазмерВычета) * СтрокаДвижений.Размер / 100;
			КонецЕсли;	
			
		// Фиксированной суммой (формула = Размер)
		ИначеЕсли СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаУдержаний.ФиксированнойСуммой") Тогда
			Результат = СтрокаДвижений.Размер;
		КонецЕсли;		
	КонецЕсли;	
	
	СтрокаДвижений.Результат = Результат * ?(СтрокаДвижений.Сторно, -1, 1);
	
	Если НЕ ШаблонТекстаСообщения = "" Тогда 
		ТекстДляОднойОшибки = СтрШаблон(ШаблонТекстаСообщения, ВидРасчета, СтрокаДвижений.ФизЛицо);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	Неопределено, ТекстДляОднойОшибки, ИмяРегистра,, ТекстДляОднойОшибки);
	КонецЕсли;	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ГРАФИКАМИ

// Функция возвращает структура с количеством дней графика работ за период
//
// Параметры:
//  ГрафикРаботы  	- СправочникСсылка.ГрафикиРаботы - график работы, по которому работает сотрудник
//  ДатаНачала 		- Дата - дата начала
//  ДатаОкончания 	- Дата - дата окончания
//
// Возвращаемое значение:
//   Структура, количество дней в графике
//
Функция КоличествоДнейГрафикаРаботы(ГрафикРаботы, ДатаНачала, ДатаОкончания) Экспорт 

	КоличествоДней = Новый Структура();
	КоличествоДней.Вставить("ГрафикРаботы", ГрафикРаботы);
	КоличествоДней.Вставить("КоличествоДней", 0); 
	КоличествоДней.Вставить("КоличествоДнейРабочий", 0); 
	КоличествоДней.Вставить("КоличествоДнейПредпраздничный", 0); 
	КоличествоДней.Вставить("КоличествоДнейСуббота", 0);
	КоличествоДней.Вставить("КоличествоДнейВоскресенье", 0); 
	КоличествоДней.Вставить("КоличествоДнейПраздник", 0);
	КоличествоДней.Вставить("КоличествоДнейВыходной", 0);
	КоличествоДней.Вставить("КоличествоДнейБезПраздник", 0);
	КоличествоДней.Вставить("КоличествоДнейНеРабочих", 0);
	
	КоличествоДней.Вставить("КоличествоЧасов", 0); 
	КоличествоДней.Вставить("КоличествоЧасовРабочий", 0); 
	КоличествоДней.Вставить("КоличествоЧасовПредпраздничный", 0); 
	КоличествоДней.Вставить("КоличествоЧасовСуббота", 0); 
	КоличествоДней.Вставить("КоличествоЧасовВоскресенье", 0); 
	КоличествоДней.Вставить("КоличествоЧасовПраздник", 0); 
	КоличествоДней.Вставить("КоличествоЧасовВыходной", 0); 
	КоличествоДней.Вставить("КоличествоЧасовБезПраздник", 0); 
	КоличествоДней.Вставить("КоличествоЧасовНеРабочих", 0);
	
	КоличествоДней.Вставить("ЗначениеДней", 0); 
	КоличествоДней.Вставить("ЗначениеЧасов", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.ГрафикРаботы,
		|	СУММА(1) КАК КоличествоДней,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоДнейРабочий,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоДнейПредпраздничный,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Выходной)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоДнейВыходной,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоДнейСуббота,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Воскресенье)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоДнейВоскресенье,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоДнейПраздник,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоДнейБезПраздник,
		|	СУММА(ВЫБОР
		|			КОГДА ЗначениеДней = 0
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоДнейНеРабочих,
		
		// часов
		|	СУММА(ЗначениеЧасов) КАК КоличествоЧасов,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|				ТОГДА ЗначениеЧасов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоЧасовРабочий,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
		|				ТОГДА ЗначениеЧасов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоЧасовПредпраздничный,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Выходной)
		|				ТОГДА ЗначениеЧасов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоЧасовВыходной,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота)
		|				И ЗначениеЧасов = 0 		
		|				ТОГДА &НормаЧасовЗаполнения
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота)
		|				И НЕ ЗначениеЧасов = 0 
		|				ТОГДА ЗначениеЧасов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоЧасовСуббота,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Воскресенье)
		|				И ЗначениеЧасов = 0 		
		|				ТОГДА &НормаЧасовЗаполнения
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Воскресенье)
		|				И НЕ ЗначениеЧасов = 0 		
		|				ТОГДА ЗначениеЧасов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоЧасовВоскресенье,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		|				И ЗначениеЧасов = 0 		
		|				ТОГДА &НормаЧасовЗаполнения
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		|				И НЕ ЗначениеЧасов = 0 		
		|				ТОГДА ЗначениеЧасов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоЧасовПраздник,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		|				ТОГДА ЗначениеЧасов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоЧасовБезПраздник,
		|	СУММА(ВЫБОР
		|			КОГДА ЗначениеДней = 0
		|				ТОГДА &НормаЧасовЗаполнения
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоЧасовНеРабочих,
		
		|	СУММА(ДанныеПроизводственногоКалендаря.ЗначениеДней) КАК ЗначениеДней,
		|	СУММА(ДанныеПроизводственногоКалендаря.ЗначениеЧасов) КАК ЗначениеЧасов
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ГрафикРаботы = &ГрафикРаботы
		|	И ДанныеПроизводственногоКалендаря.Год МЕЖДУ &ГодНачалоПериода И &ГодКонецПериода
		|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеПроизводственногоКалендаря.ГрафикРаботы";
	Запрос.УстановитьПараметр("ГодНачалоПериода", Год(ДатаНачала));
	Запрос.УстановитьПараметр("ГодКонецПериода", Год(ДатаОкончания));
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", ДатаОкончания);
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	Запрос.УстановитьПараметр("НормаЧасовЗаполнения", ГрафикРаботы.НормаЧасовЗаполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(КоличествоДней, ВыборкаДетальныеЗаписи);	
	КонецЕсли;	

	Возврат КоличествоДней;
КонецФункции // КоличествоДней()

// Функция возвращает Дату, к которой добавлены дни
//
// Параметры:
//  ГрафикРаботы  	- СправочникСсылка.ГрафикиРаботы - график работы, по которому работает сотрудник
//  ДатаНачала 		- Дата - дата начала
//  КоличествоДней	- Число - количество дней, которое нужно добавить
//  МассивВидыДней 	- Массив из Перечисление.ВидыДнейПроизводственногоКалендаря - по каким видам дня нужно добавить
//
// Возвращаемое значение:
//   Структура, количество дней в графике
//
Функция ДобавитьКДатеПоГрафику(ГрафикРаботы, ДатаНачала, КоличествоДней, МассивВидыДней = Неопределено) Экспорт 

	Если МассивВидыДней = Неопределено Тогда 
		МассивВидыДней = Новый Массив;
		МассивВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
		МассивВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота);
		МассивВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье);
		МассивВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
		МассивВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
		МассивВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Выходной);
	КонецЕсли;	
	
	ДатаОкончания = ДатаНачала;
	Дней = СтрЗаменить(КоличествоДней,Символы.НПП,"");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ " + Дней + "
		|	ДанныеПроизводственногоКалендаря.ГрафикРаботы,
		|	ДанныеПроизводственногоКалендаря.ВидДня КАК ВидДня,
		|	ДанныеПроизводственногоКалендаря.Дата КАК Дата
		|ПОМЕСТИТЬ ВременнаяТаблицаДни
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ГрафикРаботы = &ГрафикРаботы
		|	И ДанныеПроизводственногоКалендаря.Год >= &ГодНачалоПериода
		|	И ДанныеПроизводственногоКалендаря.Дата >= &НачалоПериода
		|	И ДанныеПроизводственногоКалендаря.ВидДня В(&МассивВидыДней)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВременнаяТаблицаДни.Дата) КАК ДатаОкончания
		|ИЗ
		|	ВременнаяТаблицаДни КАК ВременнаяТаблицаДни";
	Запрос.УстановитьПараметр("ГодНачалоПериода", Год(ДатаНачала));
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	Запрос.УстановитьПараметр("МассивВидыДней", МассивВидыДней);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		ДатаОкончания = ВыборкаДетальныеЗаписи.ДатаОкончания;	
	КонецЕсли;	

	Возврат ДатаОкончания;
КонецФункции // КоличествоДней()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ ПО СРЕДНЕМУ ЗАРАБОТКУ

// Процедура заполняет табличную часть Среднего заработка
//
// Параметры:
//  ПериодРасчетаСреднегоЗаработка	 - Число							- Количество месяцев для расчета среднего заработка
//  НачалоПериода					 - Дата	 							- Начало периода расчета базы среднего заработка
//  КонецПериода					 - Дата	 							- Окончание периода расчета базы среднего заработка
//  ГрафикРаботы					 - СправочникСсылка.ГрафикиРаботы	- Ссылка на справочник графики работ для отбора
//  ДокументСсылка					 - ДокументСсылка	 				- Ссылка на документ
//  НеполныеМесяцы					 - Перечисление.НеполныеМесяцы	 	- Признак, что делать с неполными месяцами
//  ТабличнаяЧастьДокумента			 - ТабличнаяЧасть 	 				- Табличная часть документа для заполнения
// 	Ошибки 					 		 - Массив 							- Массив сообщений пользователю
Процедура ЗаполнитьТабличнуюЧастьСреднийЗаработок(ПериодРасчетаСреднегоЗаработка, НачалоПериода, КонецПериода, 
			ГрафикРаботы, ДокументСсылка, НеполныеМесяцы, ТабличнаяЧастьДокумента, Ошибки = Неопределено) Экспорт 
			
	КоличествоМесяцев = ПериодРасчетаСреднегоЗаработка;
	
	Запрос = Новый Запрос();
	
	Измерения = Новый Массив(2);
	Измерения[0] = "Физлицо";
	Измерения[1] = "Организация";
	
	Разрезы = Новый Массив(2);
	Разрезы[0] = "ПериодРегистрации";
	Разрезы[1] = "ВидРасчета";
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаФакт.ФизЛицо,
		|	ТаблицаФакт.Результат,
		|	ТаблицаФакт.ОтработаноДней,
		|	ТаблицаФакт.ПериодРегистрации КАК ПериодРегистрации,
		|	ТаблицаНорма.НормаДней,
		|	ТаблицаНорма.НормаЧасов
		|ИЗ
		|	(ВЫБРАТЬ
		|		Начисления.ФизЛицо КАК ФизЛицо,
		|		СУММА(ВЫБОР
		|				КОГДА НачисленияБазаНачисления.ВидРасчетаРазрез.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ГодоваяПремия)
		|					ТОГДА НачисленияБазаНачисления.РезультатБаза / НачисленияБазаНачисления.ВидРасчетаРазрез.Доля
		|				ИНАЧЕ НачисленияБазаНачисления.РезультатБаза
		|			КОНЕЦ) КАК Результат,
		|		СУММА(ВЫБОР
		|				КОГДА НачисленияБазаНачисления.ВидРасчетаРазрез.ЗачетОтработанногоВремени
		|					ТОГДА НачисленияБазаНачисления.ОтработаноДнейБаза
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК ОтработаноДней,
		|		НачисленияБазаНачисления.ПериодРегистрацииРазрез КАК ПериодРегистрации
		|	ИЗ
		|		РегистрРасчета.Начисления КАК Начисления
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления.БазаНачисления(
		|					&ИзмеренияОсновного,
		|					&ИзмеренияБазового,
		|					&Разрезы,
		|					Регистратор = &Регистратор) КАК НачисленияБазаНачисления
		|			ПО Начисления.НомерСтроки = НачисленияБазаНачисления.НомерСтроки
		|	ГДЕ
		|		Начисления.Регистратор = &Регистратор
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Начисления.ФизЛицо,
		|		НачисленияБазаНачисления.ПериодРегистрацииРазрез) КАК ТаблицаФакт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы,
		|			НАЧАЛОПЕРИОДА(ГрафикиРаботы.Дата, МЕСЯЦ) КАК ПериодРегистрации,
		|			СУММА(ГрафикиРаботы.ЗначениеДней) КАК НормаДней,
		|			СУММА(ГрафикиРаботы.ЗначениеЧасов) КАК НормаЧасов
		|		ИЗ
		|			РегистрСведений.ДанныеПроизводственногоКалендаря КАК ГрафикиРаботы
		|		ГДЕ
		|			ГрафикиРаботы.ГрафикРаботы = &ГрафикРаботы
		|			И ГрафикиРаботы.Год МЕЖДУ &ГодБазовыйПериодНачало И &ГодБазовыйПериодКонец
		|			И ГрафикиРаботы.Дата МЕЖДУ &БазовыйПериодНачало И &БазовыйПериодКонец
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ГрафикиРаботы.ГрафикРаботы,
		|			НАЧАЛОПЕРИОДА(ГрафикиРаботы.Дата, МЕСЯЦ)) КАК ТаблицаНорма
		|		ПО ТаблицаФакт.ПериодРегистрации = ТаблицаНорма.ПериодРегистрации
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодРегистрации УБЫВ";
	// Для факт	
	Запрос.УстановитьПараметр("ИзмеренияБазового",  	Измерения);
	Запрос.УстановитьПараметр("ИзмеренияОсновного",  	Измерения);
	Запрос.УстановитьПараметр("Разрезы",  				Разрезы);
	Запрос.УстановитьПараметр("Регистратор",  			ДокументСсылка);
	// Для норма
	Запрос.УстановитьПараметр("ГрафикРаботы",  			ГрафикРаботы);
	Запрос.УстановитьПараметр("ГодБазовыйПериодНачало",	Год(НачалоПериода));
	Запрос.УстановитьПараметр("ГодБазовыйПериодКонец", 	Год(КонецПериода));
	Запрос.УстановитьПараметр("БазовыйПериодНачало",	НачалоПериода);//01.11.15	
	Запрос.УстановитьПараметр("БазовыйПериодКонец", 	КонецПериода);	// 310116
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		ТекстСообщения = НСтр("ru = 'Нет данных для заполнения! Заполнение документа отменено.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	, ТекстСообщения, Неопределено);
		
		Возврат;
	КонецЕсли;	
	
	Ошибки = Неопределено;
	
	// Определение по методу расчета- как будет получена база
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если КоличествоМесяцев = 0 Тогда
			Прервать;
		КонецЕсли;	
		
		Если НеполныеМесяцы = ПредопределенноеЗначение("Перечисление.НеполныеМесяцы.Отбрасывать") Тогда 
			// 1. Если выбран метод "Отбрасывать" - все не полностью отработанные месяцы не будут учитываться		
			Если НЕ ВыборкаДетальныеЗаписи.ОтработаноДней = ВыборкаДетальныеЗаписи.НормаДней Тогда 
				Продолжить;
			КонецЕсли;	
			
			СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи); 
		ИначеЕсли НеполныеМесяцы = ПредопределенноеЗначение("Перечисление.НеполныеМесяцы.Дополнять") Тогда	
			// 2. Если выбран метод "Дополнять" - то по полученным данным в месяце расчет ежедневного дохода и дополнение до полного месяца
			СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи); 
			
			Если ВыборкаДетальныеЗаписи.ОтработаноДней > 0 И
				НЕ СтрокаТабличнойЧасти.ОтработаноДней = СтрокаТабличнойЧасти.НормаДней Тогда 
				СтрокаТабличнойЧасти.Результат = СтрокаТабличнойЧасти.Результат / СтрокаТабличнойЧасти.ОтработаноДней * СтрокаТабличнойЧасти.НормаДней;			
			КонецЕсли;	
		ИначеЕсли НеполныеМесяцы = ПредопределенноеЗначение("Перечисление.НеполныеМесяцы.НеИзменять") Тогда	
			// 3. Если выбран метод "Не изменять" - то ничего не менять	
			СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДетальныеЗаписи); 
		КонецЕсли;	
		
		КоличествоМесяцев = КоличествоМесяцев - 1;
	КонецЦикла;
КонецПроцедуры // ЗаполнитьТабличнуюЧастьСреднийЗаработок()

// Процедура заполняет табличную часть по перидам регистрации
//
// Параметры:
//  Объект							 - ДокументОбъект					- Объект для заполнения
//  НачалоПериода					 - Дата	 							- Начало периода расчета базы среднего заработка
//  КонецПериода					 - Дата	 							- Окончание периода расчета базы среднего заработка
//  ПериодРегистрации				 - Дата	 							- Месяц- в который нужно определить результат
//  ВидРасчета					 	 - ПланВидовРасчета	 				- Ссылка на план видов расчета
//  ГрафикРаботы					 - СправочникСсылка.ГрафикиРаботы	- Ссылка на справочник графики работ для отбора
//  Результат					 	 - Число	 						- Результат начисления
//  ТабличнаяЧастьДокумента			 - ТабличнаяЧасть 	 				- Табличная часть документа для заполнения
// 	Ошибки 					 		 - Массив 							- Массив сообщений пользователю
Процедура ЗаполнитьТабличнуюЧастьПоПериодам(Объект, НачалоПериода, КонецПериода, 
			ПериодРегистрации, ВидРасчета, МетодРасчета, ГрафикРаботы, Результат, ТабличнаяЧастьДокумента = "Начисления", Ошибки = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.ГрафикРаботы,
		|	&ВидРасчета КАК ВидРасчета,
		|	ВложенныйЗапрос.ОтработаноДней * &Результат КАК Результат,
		|	ВложенныйЗапрос.ПериодРегистрации КАК ПериодРегистрации,
		|	ВложенныйЗапрос.ОтработаноДней,
		|	ВложенныйЗапрос.ДатаНачала,
		|	ВложенныйЗапрос.ДатаОкончания
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДанныеПроизводственногоКалендаря.ГрафикРаботы КАК ГрафикРаботы,
		|		НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК ПериодРегистрации,
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеПроизводственногоКалендаря.Дата) КАК ОтработаноДней,
		|		ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ)
		|				ТОГДА &НачалоПериода
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ)
		|		КОНЕЦ КАК ДатаНачала,
		|		ВЫБОР
		|			КОГДА КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ) = КОНЕЦПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ)
		|				ТОГДА &КонецПериода
		|			ИНАЧЕ КОНЕЦПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ)
		|		КОНЕЦ КАК ДатаОкончания
		|	ИЗ
		|		РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|	ГДЕ
		|		ДанныеПроизводственногоКалендаря.ГрафикРаботы = &ГрафикРаботы
		|		И (ДанныеПроизводственногоКалендаря.Год = &ГодНачалоПериода
		|				ИЛИ ДанныеПроизводственногоКалендаря.Год = &ГодКонецПериода)
		|		И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|		И НЕ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		|		И НЕ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Воскресенье)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ДанныеПроизводственногоКалендаря.ГрафикРаботы,
		|		НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ),
		|		ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ)
		|				ТОГДА &НачалоПериода
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ)
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ) = КОНЕЦПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ)
		|				ТОГДА &КонецПериода
		|			ИНАЧЕ КОНЕЦПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ)
		|		КОНЕЦ) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодРегистрации";
	Запрос.УстановитьПараметр("ГодНачалоПериода", Год(НачалоПериода));
	Запрос.УстановитьПараметр("ГодКонецПериода", Год(КонецПериода));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ВидРасчета", ВидРасчета);
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	Запрос.УстановитьПараметр("Результат", Результат);
	Если Не МетодРасчета.РасчетПоРабочимДням Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И НЕ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Воскресенье)","");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		     СТЧ = Объект[ТабличнаяЧастьДокумента].Добавить();
			 ЗаполнитьЗначенияСвойств(СТЧ,Выборка);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоПериодам()

// Функция - получает размеры для расчета больничных листов
// в зависимости от общего стажа работы
//
// Параметры:
//  КоличествоЛетСтажа	- Число - количество лет
// Возвращаемое значение:
//  Размеры - Структура
Функция РазмерыБольничныхЛистов(КоличествоЛетСтажа) Экспорт 
	Возврат ПроведениеРасчетовПоЗарплатеСерверПовтИсп.РазмерыБольничныхЛистов(КоличествоЛетСтажа);
КонецФункции // СведенияОСотруднике()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ ПО СОТРУДНИКУ

// Функция - получает Сведения о сотруднике
//
// Параметры:
//  Период		 - Дата	 							- Период отбора для получения данных
//  Организация	 - СправочникСсылка.Организации	 	- Организация для отбора
//  ФизЛицо		 - СправочникСсылка.ФизическиеЛица	- Сотрудник, по которому нужно получить сведения
// Возвращаемое значение:
//  СведенияОСотруднике - Структура
Функция СведенияОСотруднике(Период, Организация, ФизЛицо) Экспорт 
	Возврат ПроведениеРасчетовПоЗарплатеСерверПовтИсп.СведенияОСотруднике(КонецДня(Период), Организация, ФизЛицо);
КонецФункции // СведенияОСотруднике()

// Функция - получает Статус сотрудника
//
// Параметры:
//  Период		 - Дата	 							- Период отбора для получения данных
//  Организация	 - СправочникСсылка.Организации	 	- Организация для отбора
//  ФизЛицо		 - СправочникСсылка.ФизическиеЛица	- Сотрудник, по которому нужно получить сведения
// Возвращаемое значение:
//  Структура
Функция СтатусСотрудникаКакНалогоплательщика(Период, Организация, ФизЛицо) Экспорт 
	Возврат ПроведениеРасчетовПоЗарплатеСерверПовтИсп.СтатусСотрудникаКакНалогоплательщика(КонецДня(Период), Организация, ФизЛицо);
КонецФункции // СтатусСотрудникаКакНалогоплательщика()

// Функция - получает Стажи сотрудника
//
// Параметры:
//  ПериодОкончанияСтажа - Дата	- Период, по который нужно рассчитать стаж
//  ФизЛицо		 - СправочникСсылка.ФизическиеЛица	- Сотрудник, по которому нужно получить сведения
// Возвращаемое значение:
//  Структура	- Лет, месяцев, Дней (общего стажа),ЛетНепрерывногоСтажа,МесяцевНепрерывногоСтажа,ДнейНепрерывногоСтажа
Функция СведенияОСтажеСотрудника(ПериодОкончанияСтажа, ФизЛицо) Экспорт 
	
	СтруктураСтажа = Новый Структура();
	СтруктураСтажа.Вставить("Лет",0);
	СтруктураСтажа.Вставить("Месяцев",0);
	СтруктураСтажа.Вставить("Дней",0);
	СтруктураСтажа.Вставить("ДатаОбщегоСтажа",Дата(1,1,1)); 
	
	СтруктураСтажа.Вставить("ЛетНепрерывногоСтажа",0);
	СтруктураСтажа.Вставить("МесяцевНепрерывногоСтажа",0);
	СтруктураСтажа.Вставить("ДнейНепрерывногоСтажа",0);	
	СтруктураСтажа.Вставить("ДатаНепрерывногоСтажа",Дата(1,1,1));	
	
	СтруктураСтажа.Вставить("ЛетСуммированногоСтажа",0);
	СтруктураСтажа.Вставить("МесяцевСуммированногоСтажа",0);
	СтруктураСтажа.Вставить("ДнейСуммированногоСтажа",0);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Стажи.ФизЛицо КАК ФизЛицо,
	|	Стажи.ДатаОбщегоСтажа КАК ДатаОбщегоСтажа,
	|	Стажи.ДатаНепрерывногоСтажа КАК ДатаНепрерывногоСтажа,
	|	Стажи.ДатаСуммированногоСтажа,
	|	&ПериодОтчета КАК Период,
	|	РАЗНОСТЬДАТ(Стажи.ДатаОбщегоСтажа, &ПериодОтчета, ГОД) - ВЫБОР
	|		КОГДА МЕСЯЦ(Стажи.ДатаОбщегоСтажа) > МЕСЯЦ(&ПериодОтчета)
	|			ТОГДА 1
	|		КОГДА МЕСЯЦ(Стажи.ДатаОбщегоСтажа) = МЕСЯЦ(&ПериодОтчета)
	|				И ДЕНЬ(Стажи.ДатаОбщегоСтажа) > ДЕНЬ(&ПериодОтчета)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Лет,
	|	РАЗНОСТЬДАТ(Стажи.ДатаОбщегоСтажа, &ПериодОтчета, МЕСЯЦ) - ВЫБОР
	|		КОГДА ДЕНЬ(Стажи.ДатаОбщегоСтажа) > ДЕНЬ(&ПериодОтчета)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоМесяцев,
	|	РАЗНОСТЬДАТ(Стажи.ДатаОбщегоСтажа, &ПериодОтчета, ДЕНЬ) КАК ВсегоДней,
	|	РАЗНОСТЬДАТ(Стажи.ДатаНепрерывногоСтажа, &ПериодОтчета, ГОД) - ВЫБОР
	|		КОГДА МЕСЯЦ(Стажи.ДатаНепрерывногоСтажа) > МЕСЯЦ(&ПериодОтчета)
	|			ТОГДА 1
	|		КОГДА МЕСЯЦ(Стажи.ДатаНепрерывногоСтажа) = МЕСЯЦ(&ПериодОтчета)
	|				И ДЕНЬ(Стажи.ДатаНепрерывногоСтажа) > ДЕНЬ(&ПериодОтчета)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЛетНепрерывногоСтажа,
	|	РАЗНОСТЬДАТ(Стажи.ДатаНепрерывногоСтажа, &ПериодОтчета, МЕСЯЦ) - ВЫБОР
	|		КОГДА ДЕНЬ(Стажи.ДатаНепрерывногоСтажа) > ДЕНЬ(&ПериодОтчета)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоМесяцевНепрерывногоСтажа,
	|	РАЗНОСТЬДАТ(Стажи.ДатаНепрерывногоСтажа, &ПериодОтчета, ДЕНЬ) КАК ВсегоДнейНепрерывногоСтажа,
	|	РАЗНОСТЬДАТ(Стажи.ДатаСуммированногоСтажа, &ПериодОтчета, ГОД) - ВЫБОР
	|		КОГДА МЕСЯЦ(Стажи.ДатаСуммированногоСтажа) > МЕСЯЦ(&ПериодОтчета)
	|			ТОГДА 1
	|		КОГДА МЕСЯЦ(Стажи.ДатаСуммированногоСтажа) = МЕСЯЦ(&ПериодОтчета)
	|				И ДЕНЬ(Стажи.ДатаСуммированногоСтажа) > ДЕНЬ(&ПериодОтчета)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЛетСуммированногоСтажа,
	|	РАЗНОСТЬДАТ(Стажи.ДатаСуммированногоСтажа, &ПериодОтчета, МЕСЯЦ) - ВЫБОР
	|		КОГДА ДЕНЬ(Стажи.ДатаСуммированногоСтажа) > ДЕНЬ(&ПериодОтчета)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоМесяцевСуммированногоСтажа,
	|	РАЗНОСТЬДАТ(Стажи.ДатаСуммированногоСтажа, &ПериодОтчета, ДЕНЬ) КАК ВсегоДнейСуммированногоСтажа
	|ПОМЕСТИТЬ ВТСтажиПромежуточная
	|ИЗ
	|	РегистрСведений.СтажиСотрудников.СрезПоследних(&ПериодОтчета, ФизЛицо = &ФизЛицо) КАК Стажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтажиПромежуточная.ФизЛицо,
	|	СтажиПромежуточная.ДатаНепрерывногоСтажа,
	|	СтажиПромежуточная.ДатаОбщегоСтажа,
	|	СтажиПромежуточная.ДатаСуммированногоСтажа,
	|	СтажиПромежуточная.Лет,
	|	РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(СтажиПромежуточная.ДатаОбщегоСтажа, ГОД, СтажиПромежуточная.Лет), СтажиПромежуточная.Период, МЕСЯЦ) КАК Месяцев,
	|	РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(СтажиПромежуточная.ДатаОбщегоСтажа, МЕСЯЦ, СтажиПромежуточная.ВсегоМесяцев), СтажиПромежуточная.Период, ДЕНЬ) КАК Дней,
	|	СтажиПромежуточная.ЛетНепрерывногоСтажа,
	|	РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(СтажиПромежуточная.ДатаНепрерывногоСтажа, ГОД, СтажиПромежуточная.ЛетНепрерывногоСтажа), СтажиПромежуточная.Период, МЕСЯЦ) КАК МесяцевНепрерывногоСтажа,
	|	РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(СтажиПромежуточная.ДатаНепрерывногоСтажа, МЕСЯЦ, СтажиПромежуточная.ВсегоМесяцевНепрерывногоСтажа), СтажиПромежуточная.Период, ДЕНЬ) КАК ДнейНепрерывногоСтажа,
	|	СтажиПромежуточная.ЛетСуммированногоСтажа,
	|	РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(СтажиПромежуточная.ДатаСуммированногоСтажа, ГОД, СтажиПромежуточная.ЛетСуммированногоСтажа), СтажиПромежуточная.Период, МЕСЯЦ) КАК МесяцевСуммированногоСтажа,
	|	РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(СтажиПромежуточная.ДатаСуммированногоСтажа, МЕСЯЦ, СтажиПромежуточная.ВсегоМесяцевСуммированногоСтажа), СтажиПромежуточная.Период, ДЕНЬ) КАК ДнейСуммированногоСтажа
	|ИЗ
	|	ВТСтажиПромежуточная КАК СтажиПромежуточная";
	
	Запрос.УстановитьПараметр("ПериодОтчета", ПериодОкончанияСтажа);
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(СтруктураСтажа,Выборка);
		Если Не ЗначениеЗаполнено(Выборка.ДатаСуммированногоСтажа) Тогда
			СтруктураСтажа.ЛетСуммированногоСтажа 		= 0;
			СтруктураСтажа.МесяцевСуммированногоСтажа 	= 0;
			СтруктураСтажа.ДнейСуммированногоСтажа 		= 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураСтажа;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОТРАЖЕНИЯ В УЧЕТЕ

// Функция формирует пустую структуру для заполнения данных для отбора в РС Счета учета ЗП
//
Функция СтруктураОтбораДанныхСчетовУчетаПоЗП() Экспорт 

	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Подразделение", "");
	СтруктураОтбора.Вставить("Должность", "");
	СтруктураОтбора.Вставить("КатегорияДолжности", "");
	СтруктураОтбора.Вставить("МетодРасчетаОтпуска", "");
	СтруктураОтбора.Вставить("МетодРасчетаБольничногоЛиста", "");
	СтруктураОтбора.Вставить("ВидРасчетаНачисления", "");
	СтруктураОтбора.Вставить("ВидРасчетаУдержания", "");
	
	Возврат СтруктураОтбора;	

КонецФункции // СтруктураОтбораДанныхСчетовУчетаПоЗП()

// Функция получает данные регистра сведений по переданным параметрам
//
// Параметры:
//  СтруктураОтбора  - Структура - структура параметров для выборки наиболее близкого значения из регистра
//		* Подразделение 				- СправочникСсылка.ПодразделенияОрганизаций
//      * Должность 					- СправочникСсылка.Должности
//      * ВидРаботы 					- СправочникСсылка.ВидыРабот
//      * МетодРасчетаОтпуска           - СправочникСсылка.МетодыРасчетаОтпуска
//      * МетодРасчетаБольничногоЛиста  - СправочникСсылка.МетодыРасчетаБольничногоЛиста
//      * ВидРасчетаНачисления			- ПланВидовРасчетаСсылка.ВидыНачислений
//      * ВидРасчетаУдержания			- ПланВидовРасчетаСсылка.ВидыУдержаний
//
// Возвращаемое значение:
//   Структура - 
//		* СчетУчетаЗатрат 				- ПланСчетовСсылка.Хозрасчетный
//      * СтатьяЗатрат 					- СправочникСсылка.СтатьиЗатрат
//
Функция ДанныеСчетаУчетаЗП(СтруктураОтбора) Экспорт 
	Возврат ПроведениеРасчетовПоЗарплатеСерверПовтИсп.ДанныеСчетаУчетаЗП(СтруктураОтбора);
КонецФункции // ПараметрыОтраженияВУчете()
