#Область ПрограммныйИнтерфейс

// Возвращает таблицу свойств предопределенных блоков
//
// Возвращаемое значени:
//   ТаблицаЗначений - описание полей см. в методе НоваяТаблицаБлоков()
//
Функция ПредопределенныеБлоки() Экспорт
	
	ТаблицаБлоков = НоваяТаблицаБлоков();
	
	ИспользуетсяРазделениеДанных = ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных()
		И ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
	// Монитор основных показателей
	Если ОстаткиДенежныхСредствДоступны() Тогда
		ДобавитьОстаткиДенежныхСредств(ТаблицаБлоков);
	КонецЕсли;
	
	Если ПокупателиДоступны() Тогда
		ДобавитьПокупатели(ТаблицаБлоков);
	КонецЕсли;
	
	Если ПоставщикиДоступны() Тогда
		ДобавитьПоставщики(ТаблицаБлоков);
	КонецЕсли;
	
	Если ПродажиДоступны() Тогда
		ДобавитьПродажи(ТаблицаБлоков);
	КонецЕсли;
	
	// Список задач
	Если ЗадачиДоступны() Тогда
		ДобавитьЗадачи(ТаблицаБлоков);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВызовОнлайнПоддержки
	Если ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		ДобавитьНовости(ТаблицаБлоков);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВызовОнлайнПоддержки
	
	ДобавитьТекущиеДела(ТаблицаБлоков);
	
	Если ЗаметкиДоступны() Тогда
		ДобавитьЗаметки(ТаблицаБлоков);
	КонецЕсли;	

	Если МетодическаяПоддержкаДоступна() Тогда
		ДобавитьМетодическаяПоддержка(ТаблицаБлоков);
	КонецЕсли;

	Если ИспользуетсяРазделениеДанных Тогда
		ДобавитьПоддержкаСервиса(ТаблицаБлоков);
	КонецЕсли;

	Возврат ТаблицаБлоков;
	
КонецФункции

#КонецОбласти

#Область ДанныеИнформационнойПанели

#Область Задачи

Процедура ДобавитьЗадачи(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаЗадачи(),
		"",
		"БлокиИнформационнойПанели.Задачи",
		"БлокиИнформационнойПанели.ОбновитьЗадачи",
		СвойстваЗадачи());
	
КонецПроцедуры

Функция СвойстваЗадачи()
	
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоЗадач() - 1;
	
	Свойства = "Задачи_Заголовок, Задачи_Просрочено";
	
	Для Индекс = 0 По ВГраница Цикл
		Свойства = Свойства + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоНаименованияЗадачи(Индекс);

	КонецЦикла;
	
	Возврат Свойства;

КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьЗадачи(Параметры) Экспорт

	//КалендарьБухгалтера.ОбновитьЗадачи(Параметры.Организация, Параметры.БыстроеОбновление);	
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура Задачи(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		Результат.Вставить("Задачи_Заголовок",
			ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаЗадачи()));
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваЗадачи());
	Результат.Вставить("Задачи_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаЗадачи()));
	
	//ДанныеЗадачиБухгалтера = КалендарьБухгалтера.ДанныеЗадачиБухгалтера(Параметры.Организация);
	
	//АктуальныеЗадачи = ДанныеЗадачиБухгалтера.АктуальныеЗадачи;

	ШрифтОбычногоСобытия = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветОбычногоСобытия  = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	// удалить после внедрения календаря
	ДанныеЗадачиБухгалтера = Новый Структура("ПросроченнаяЗадача, КоличествоПросроченных", Неопределено, 0);
	// конец удалить
	
	// Просроченные задачи
	Просрочено = ПредставлениеПросроченныхЗадач(ДанныеЗадачиБухгалтера);
	
	Результат.Вставить("Задачи_Просрочено", Просрочено);
	
	//// Актуальные задачи
	//Если АктуальныеЗадачи.Количество() > 0 Тогда

	//	КоличествоЗадач = БлокиИнформационнойПанелиКлиентСервер.КоличествоЗадач();
	//	
	//	Актуальные = ПредставлениеАктуальныхЗадач(АктуальныеЗадачи);

	//	Для Индекс = 0 По Мин(Актуальные.ВГраница(), КоличествоЗадач - 1) Цикл
	//		Результат.Вставить(
	//			БлокиИнформационнойПанелиКлиентСервер.СвойствоНаименованияЗадачи(Индекс),
	//			Актуальные[Индекс]);
	//	КонецЦикла;
	//	
	//Иначе
		
		НаименованиеЗадачи = Новый ФорматированнаяСтрока(
			НСтр("ru = 'На ближайший месяц задач нет'"),
			ШрифтОбычногоСобытия, ЦветОбычногоСобытия);
		
		Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоНаименованияЗадачи(0), НаименованиеЗадачи);
		
	//КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

Функция ПредставлениеАктуальныхЗадач(АктуальныеЗадачи)
	
	Представления = Новый Массив();
	
	ОтборЗадач = Новый Структура("ОтносительныйСрок, ОтносительныйСрокПорядок", 0, 0);
	
	КоличествоСвободныхСтрок = БлокиИнформационнойПанелиКлиентСервер.КоличествоЗадач();
	
	ИндексСтроки = 0;
	
	ПараметрыПредметаИсчисления = Перечисления.ВидыДействийКалендаряБухгалтера.ПредметыИсчисления();
	
	ОтносительныеСрокиЗадач = АктуальныеЗадачи.Скопировать(,"ОтносительныйСрок, ОтносительныйСрокПорядок");
	ОтносительныеСрокиЗадач.Свернуть("ОтносительныйСрок, ОтносительныйСрокПорядок");
	ОтносительныеСрокиЗадач.Сортировать("ОтносительныйСрокПорядок");
	
	КоличествоОставшихсяПериодов = ОтносительныеСрокиЗадач.Количество();
	
	ШрифтТекста = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	
	ЦветОбычногоСобытия        = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	ЦветВажногоСобытия         = ЦветаСтиля.ВажноеСобытие;
	ЦветПриближающегосяСобытия = ЦветаСтиля.ПриближающеесяСобытие;
	
	Для Каждого ОтносительныйСрокЗадачи Из ОтносительныеСрокиЗадач Цикл
		
		ОтносительныйСрок = ОтносительныйСрокЗадачи.ОтносительныйСрок;
		
		// Ищем строки с приоритетом
		ОтборЗадач.ОтносительныйСрок        = ОтносительныйСрок;
		ОтборЗадач.ОтносительныйСрокПорядок = ОтносительныйСрокЗадачи.ОтносительныйСрокПорядок;
		
		НайденныеЗадачи = АктуальныеЗадачи.Скопировать(ОтборЗадач);
		НайденныеЗадачи.Сортировать("ОсталосьДней Возр, ДействиеПорядок Возр");
		
		Если ОтносительныйСрок = Перечисления.ОтносительныеСроки.Сегодня Тогда
			ЦветТекста = ЦветВажногоСобытия;
		ИначеЕсли ОтносительныйСрок = Перечисления.ОтносительныеСроки.Завтра Тогда
			ЦветТекста = ЦветПриближающегосяСобытия;
		Иначе
			ЦветТекста = ЦветОбычногоСобытия
		КонецЕсли;
		
		Задача = НайденныеЗадачи[0];
		ПредставлениеСрока = ПредставлениеСрока(ОтносительныйСрок, Задача.ОсталосьДней);
			
		Если НайденныеЗадачи.Количество() = 1 Тогда
			НаименованиеЗадачи = НаименованиеЗадачиПолностью(НайденныеЗадачи[0], ПредставлениеСрока, ЦветТекста, ШрифтТекста);
			Представления.Добавить(НаименованиеЗадачи);
			КоличествоСвободныхСтрок = КоличествоСвободныхСтрок - 1;
			ИндексСтроки = ИндексСтроки + 1;
		Иначе
			КоличествоДоступныхСтрок = Макс(КоличествоСвободныхСтрок - КоличествоОставшихсяПериодов + 1, 1);
			
			ЗадачиВНесколькоСтрок = РаспределитьЗадачиПоСтрокам(НайденныеЗадачи, КоличествоДоступныхСтрок, ПараметрыПредметаИсчисления, ПредставлениеСрока, ЦветТекста, ШрифтТекста);
			Для Каждого НаименованиеЗадачи Из ЗадачиВНесколькоСтрок Цикл
				Представления.Добавить(НаименованиеЗадачи);
				КоличествоСвободныхСтрок = КоличествоСвободныхСтрок - 1;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
		КонецЕсли;
		
		КоличествоОставшихсяПериодов = КоличествоОставшихсяПериодов - 1;
		
		Если КоличествоСвободныхСтрок = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Представления;
	
КонецФункции

Функция ПредставлениеПросроченныхЗадач(ДанныеЗадачиБухгалтера)
	
	ПараметрыПредметаИсчисления = НСтр("ru = 'задача, задачи, задач'");
	
	ШрифтОбычногоСобытия = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветОбычногоСобытия  = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	ШрифтВажногоСобытия = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветВажногоСобытия  = ЦветаСтиля.ВажноеСобытие;
	
	ШрифтПриближающегосяСобытия = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветПриближающегосяСобытия  = ЦветаСтиля.ПриближающеесяСобытие;
	
	ОтборПросроченныхЗадач = Новый Структура("ОтносительныйСрок", Перечисления.ОтносительныеСроки.Просрочено);
	
	ПросроченнаяЗадача = ДанныеЗадачиБухгалтера.ПросроченнаяЗадача;
	
	КоличествоПросроченных = ДанныеЗадачиБухгалтера.КоличествоПросроченных;
	
	Если КоличествоПросроченных = 0 Тогда
		
		Представление = Новый ФорматированнаяСтрока(
			СтрШаблон(НСтр("ru = 'Просроченных %1 нет'"), МножественноеПредставление(ПараметрыПредметаИсчисления)),
			ШрифтОбычногоСобытия, ЦветОбычногоСобытия);
		
	ИначеЕсли КоличествоПросроченных = 1 Тогда
		
		ПредставлениеСрока = Формат(ПросроченнаяЗадача.Срок, "Л=ru; ДФ='d MMMM'");
		
		// Исключим возможность переноса строк в веб-клиенте
		НаименованиеЗадачиБезПробелов = СтрокаБезПереносов(
			СтрШаблон(НСтр("ru = '%1 %2'"), ПредставлениеСрока, ПросроченнаяЗадача.Наименование));
		
		Представление = Новый ФорматированнаяСтрока(
			НаименованиеЗадачиБезПробелов,
			ШрифтВажногоСобытия, ЦветВажногоСобытия);
		
	Иначе
		
		КоличествоПросроченныхПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
			КоличествоПросроченных, ПараметрыПредметаИсчисления);
		
		Представление = Новый ФорматированнаяСтрока(
			СтрШаблон(НСтр("ru = 'Просрочено: %1'"), КоличествоПросроченныхПрописью),
			ШрифтВажногоСобытия, ЦветВажногоСобытия);
		
	КонецЕсли;

	Возврат Представление;
	
КонецФункции

Функция РаспределитьЗадачиПоСтрокам(Задачи, КоличествоСтрок, ПараметрыПредметаИсчисления, ПредставлениеСрока, ЦветТекста, ШрифтТекста)
	
	СтрокиЗадач = Новый Массив;
	
	НаименованияЗадач = Новый Соответствие();
	Для ИндексЗадачи = 1 По КоличествоСтрок - 1 Цикл
		
		Если Задачи.Количество() > 0 Тогда
			Если НаименованияЗадач[Задачи[0].Наименование] <> Неопределено Тогда
				// Такое наименование уже выведено, повторно выводить не будем.
				Продолжить;
			КонецЕсли;
			СтрокиЗадач.Добавить(НаименованиеЗадачиПолностью(Задачи[0], ПредставлениеСрока, ЦветТекста, ШрифтТекста));
			НаименованияЗадач.Вставить(Задачи[0].Наименование, Истина);
			Задачи.Удалить(0);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УникальноеНаименование Из НаименованияЗадач Цикл
		Задача = Задачи.Найти(УникальноеНаименование.Ключ, "Наименование");
		// В этом периоде строка с такой задачей уже выведена.
		Если Задача <> Неопределено Тогда
			Задачи.Удалить(Задача);
		КонецЕсли;
	КонецЦикла;
	
	Если Задачи.Количество() = 1 Тогда
		СтрокиЗадач.Добавить(НаименованиеЗадачиПолностью(Задачи[0], ПредставлениеСрока, ЦветТекста, ШрифтТекста));
	Иначе
		СтрокиЗадач.Добавить(ВсеЗадачиОднойСтрокой(Задачи, ПараметрыПредметаИсчисления, ПредставлениеСрока, ЦветТекста, ШрифтТекста));
	КонецЕсли;
	
	Возврат СтрокиЗадач;
	
КонецФункции

Функция ВсеЗадачиОднойСтрокой(Задачи, ПараметрыПредметаИсчисления, ПредставлениеСрока, ЦветТекста, ШрифтТекста)
	
	Действия = Задачи.Скопировать();
	Действия.Колонки.Добавить("Количество");
	Действия.ЗаполнитьЗначения(1, "Количество");
	Действия.Свернуть("Действие, ДействиеПорядок", "Количество");
	
	Действия.Сортировать("ДействиеПорядок Возр");
	
	СоставСтроки = Новый Массив;
	СоставСтроки.Добавить(ПредставлениеСрока);
	РегулярныйПлатеж = Перечисления.ВидыДействийКалендаряБухгалтера.РегулярныйПлатеж;
	
	Для Каждого Задача Из Действия Цикл

		Если Задача.Количество = 1 Тогда
			НайденныеЗадачи = Задачи.НайтиСтроки(Новый Структура("Действие, ДействиеПорядок", Задача.Действие, Задача.ДействиеПорядок));
			Если Задача.Действие <> РегулярныйПлатеж И НайденныеЗадачи.Количество() > 0 Тогда
				КоличествоЗадачПрописью = НайденныеЗадачи[0].Наименование;
			Иначе
				КоличествоЗадачПрописью = НРег(Задача.Действие);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Задача.Действие) = Тип("Строка") Тогда
			КоличествоЗадачПрописью = Задачи.Найти(Задача.Действие,"Действие").Наименование;
		Иначе
			КоличествоЗадачПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				Задача.Количество, НРег(ПараметрыПредметаИсчисления.Получить(Задача.Действие)));
		КонецЕсли;
		
		// Все найденные задачи сворачиваем в одну строку
		СоставСтроки.Добавить(Новый ФорматированнаяСтрока(
			СтрШаблон(НСтр("ru = ' %1'"),КоличествоЗадачПрописью),
			ШрифтТекста, ЦветТекста));
			
		СоставСтроки.Добавить(",");

	КонецЦикла;
	
	СоставСтроки.Удалить(СоставСтроки.ВГраница());
	
	Если СоставСтроки.Количество() > 2 Тогда
		СоставСтроки.Установить(СоставСтроки.ВГраница() - 1, НСтр("ru = ' и'"));
	КонецЕсли;
	
	НаименованиеЗадачиБезПробелов = СтрокаБезПереносов(СтрСоединить(СоставСтроки, ""));
	
	Возврат Новый ФорматированнаяСтрока(
		НаименованиеЗадачиБезПробелов,
		ШрифтТекста,
		ЦветТекста);

КонецФункции

Функция НаименованиеЗадачиПолностью(Задача, ПредставлениеСрока, ЦветТекста, ШрифтТекста)
	
	// Исключим возможность переноса строк в веб-клиенте
	НаименованиеЗадачиБезПробелов = СтрокаБезПереносов(
		СтрШаблон(НСтр("ru = '%1 %2'"), ПредставлениеСрока, Задача.Наименование));
	
	Возврат Новый ФорматированнаяСтрока(
		НаименованиеЗадачиБезПробелов,
		ШрифтТекста,
		ЦветТекста);

КонецФункции

Функция ЗадачиДоступны()
	
	//Возврат ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.СписокЗадач);
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ОстаткиДенежныхСредств

Процедура ДобавитьОстаткиДенежныхСредств(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаОстаткиДенежныхСредств(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОстаткиДенежныхСредств(),
		"БлокиИнформационнойПанели.ОстаткиДенежныхСредств",
		"БлокиИнформационнойПанели.ОбновитьОстаткиДенежныхСредств",
		СвойстваОстаткиДенежныхСредств());
	
КонецПроцедуры

Функция СвойстваОстаткиДенежныхСредств()
	
	// ВГраница = Количеству, т.к. последняя строка используется для итоговой записи
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоВалютныхОстатков();
	
	Свойства = "ОстаткиДенежныхСредств_Заголовок, "
					+ "ОстаткиДенежныхСредств_Касса, "
					+ "ОстаткиДенежныхСредств_Банк, "
					+ "ОстаткиДенежныхСредств_ИндексИтога";
	
	Для Индекс = 0 По ВГраница Цикл
		Свойства = Свойства + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоОстатокДенежныхСредств(Индекс);
	КонецЦикла;
	
	Возврат Свойства;
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьОстаткиДенежныхСредств(Параметры) Экспорт
	
	//РазделыМонитора = Новый Массив;
	//РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ОстаткиДенежныхСредств);
	//
	//ПараметрыЗаполнения = Новый Структура();
	//ПараметрыЗаполнения.Вставить("Организация", Параметры.Организация);
	//ПараметрыЗаполнения.Вставить("РазделыМонитора", РазделыМонитора);
	//ПараметрыЗаполнения.Вставить("ПолучатьПрошлыйПериод", Ложь);
	//
	//АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	//
	//УстановитьПривилегированныйРежим(Истина);
	//Если Параметры.БыстроеОбновление Тогда
	//	МониторРуководителя.ОбновитьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	//Иначе
	//	МониторРуководителя.ПерезаписатьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	//КонецЕсли;
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура ОстаткиДенежныхСредств(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		Результат.Вставить("ОстаткиДенежныхСредств_Заголовок",
			ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОстаткиДенежныхСредств()));
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	Результат = Новый Структура(СвойстваОстаткиДенежныхСредств());
	Результат.Вставить("ОстаткиДенежныхСредств_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОстаткиДенежныхСредств()));
		
	ОстаткиДенежныхСредств = ДанныеОстаткиДенежныхСредств(ВалютаРегламентированногоУчета);
	
	// Остаток в кассе
	Касса = ПредставлениеОстаткаДенежныхСредств(ОстаткиДенежныхСредств.Касса, ВалютаРегламентированногоУчета);
	Результат.Вставить("ОстаткиДенежныхСредств_Касса", Касса);
	
	ВалютныеОстатки = ОстаткиДенежныхСредств.ВалютныеОстатки;
	
	ИндексСтроки = 0;
	Если ВалютныеОстатки.Количество() <= БлокиИнформационнойПанелиКлиентСервер.КоличествоВалютныхОстатков() Тогда
		
		// Остаток в валюте регл.учета
		Банк = ПредставлениеОстаткаДенежныхСредств(ОстаткиДенежныхСредств.Банк, ВалютаРегламентированногоУчета);
		
		// Остатки на валютных счетах с разбивкой по валютам
		Для Каждого СтрокаОстатка Из ВалютныеОстатки Цикл
			
			Остаток = ПредставлениеОстаткаДенежныхСредств(СтрокаОстатка.СуммаВВалюте, СтрокаОстатка.Валюта);
			Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоОстатокДенежныхСредств(ИндексСтроки), Остаток);
			
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЦикла;
		
	Иначе
		
		// Группируем все остатки в одну строку
		Банк = ПредставлениеОстаткаДенежныхСредств(ОстаткиДенежныхСредств.Банк + ВалютныеОстатки.Итог("Сумма"), ВалютаРегламентированногоУчета);
		
	КонецЕсли;
	Результат.Вставить("ОстаткиДенежныхСредств_Банк", Банк);
	
	// Итого
	Итого = ПредставлениеОстаткаДенежныхСредств(ОстаткиДенежныхСредств.Итого, ВалютаРегламентированногоУчета, Истина);
	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоОстатокДенежныхСредств(ИндексСтроки), Итого);
	Результат.Вставить("ОстаткиДенежныхСредств_ИндексИтога", ИндексСтроки);
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

// Функция - Данные остатки денежных средств
//
// Параметры:
//  ВалютаРегламентированногоУчета	 - СправочникСсылка.Валюты	 - Валюта регламентированного учета.
// 
// Возвращаемое значение:
//  РезультатОстаткиДенежныхСредств - Структура остатков
//
Функция ДанныеОстаткиДенежныхСредств(ВалютаРегламентированногоУчета)
	// Валютные остатки будут показаны в разрезе валют.
	ВалютныеОстатки = Новый ТаблицаЗначений;
	ВалютныеОстатки.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ВалютныеОстатки.Колонки.Добавить("СуммаВВалюте", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ВалютныеОстатки.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ВалютныеОстатки.Индексы.Добавить("Валюта");
	
	РезультатОстаткиДенежныхСредств = Новый Структура("Касса, Банк, Итого, ВалютныеОстатки", 0, 0, 0, ВалютныеОстатки);
	
	МакетОстаткиДенежныхСредств = Отчеты.ОстаткиДенежныхСредств.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	ТекстЗапроса = МакетОстаткиДенежныхСредств.НаборыДанных.ОсновнойНабор.Запрос;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Заполнение остатков денежных средств.
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Валюта = ВалютаРегламентированногоУчета Тогда 
			Если ВыборкаДетальныеЗаписи.ВидДенежныхСредств = "Деньги в кассе" Тогда 
				РезультатОстаткиДенежныхСредств.Касса = РезультатОстаткиДенежныхСредств.Касса + ВыборкаДетальныеЗаписи.СуммаОстаток;
			ИначеЕсли ВыборкаДетальныеЗаписи.ВидДенежныхСредств = "Деньги на расчетных счетах" Тогда
				РезультатОстаткиДенежныхСредств.Банк = РезультатОстаткиДенежныхСредств.Банк + ВыборкаДетальныеЗаписи.СуммаОстаток;
			КонецЕсли;
		Иначе 
			// Сумма итого валютных остатков в регламентированной валюте.
			Если ВыборкаДетальныеЗаписи.Итог = 1 Тогда 
				РезультатОстаткиДенежныхСредств.Итого = РезультатОстаткиДенежныхСредств.Итого + ВыборкаДетальныеЗаписи.СуммаОстаток;
			КонецЕсли;					
			
			НайденныеСтроки = РезультатОстаткиДенежныхСредств.ВалютныеОстатки.НайтиСтроки(Новый Структура("Валюта", ВыборкаДетальныеЗаписи.Валюта));
			
			Если НайденныеСтроки.Количество() = 0 Тогда 
				СтрокаТаблицы = РезультатОстаткиДенежныхСредств.ВалютныеОстатки.Добавить();
				СтрокаТаблицы.Валюта = ВыборкаДетальныеЗаписи.Валюта;
			Иначе 
				СтрокаТаблицы = НайденныеСтроки[0];
			КонецЕсли;
			
			СтрокаТаблицы.СуммаВВалюте = СтрокаТаблицы.СуммаВВалюте + ВыборкаДетальныеЗаписи.ВалютнаяСуммаОстаток;	
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма + ВыборкаДетальныеЗаписи.СуммаОстаток;	
		КонецЕсли;	
	КонецЦикла;
	
	Возврат РезультатОстаткиДенежныхСредств;
	
КонецФункции // ДанныеОстаткиДенежныхСредств()

Функция ПредставлениеОстаткаДенежныхСредств(Остаток, Валюта, Выделить = Ложь)
	
	ФорматнаяСтрока = "ЧДЦ=; ЧН=0";
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		СтроковоеПредставление = СтрШаблон("%1 %2", Формат(Остаток, ФорматнаяСтрока), Валюта);
	Иначе
		СтроковоеПредставление = Формат(Остаток, ФорматнаяСтрока);
	КонецЕсли;
	
	Шрифт      = ?(Выделить, Новый Шрифт(ШрифтыСтиля.ШрифтТекстаИнформационнойПанели,,, Истина), ШрифтыСтиля.ШрифтТекстаИнформационнойПанели);
	ЦветТекста = ?(Остаток >= 0, ЦветаСтиля.ЦветТекстаИнформационнойПанели, ЦветаСтиля.ВажноеСобытие);
	
	Возврат Новый ФорматированнаяСтрока(СтроковоеПредставление, Шрифт, ЦветТекста);
	
КонецФункции

Функция ОстаткиДенежныхСредствДоступны()
	// Блок доступен для пользователей, которым доступен отчет "Остатки денежных средств".
	// Сведения об остатках получаются из регистра "Хозрасчетный" в привилегированном режиме.
	Возврат ПравоДоступа("Использование", Метаданные.Отчеты.ОстаткиДенежныхСредств);
КонецФункции

#КонецОбласти

#Область Покупатели

Процедура ДобавитьПокупатели(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаПокупатели(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПокупатели(),
		"БлокиИнформационнойПанели.Покупатели",
		"БлокиИнформационнойПанели.ОбновитьПокупатели",
		СвойстваПокупатели());
	
КонецПроцедуры

Функция СвойстваПокупатели()
	
	Свойства = "Покупатели_Заголовок, Покупатели_НеоплаченныеСчета, "
					+ "Покупатели_Задолженность, Покупатели_ЗадолженностьОтклонение, "
					+ "Покупатели_ПросроченнаяЗадолженность, Покупатели_ПросроченнаяЗадолженностьОтклонение,"
					+ "Покупатели_ДоступностьРазделов";
	
	Возврат Свойства;
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьПокупатели(Параметры) Экспорт
	
	//РазделыМонитора = Новый Массив;
	//РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ЗадолженностьПокупателей);
	//РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.НеоплаченныеСчетаПокупателям);
	//
	//Если ПравоДоступа("Чтение", Метаданные.Константы.СрокОплатыПокупателей) Тогда
	//	ЗаданСрокОплатыПокупателей = (Константы.СрокОплатыПокупателей.Получить() > 0);
	//	Если ЗаданСрокОплатыПокупателей Тогда
	//		РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ПросроченнаяЗадолженностьПокупателей);
	//	КонецЕсли;
	//КонецЕсли;
	//
	//ПараметрыЗаполнения = Новый Структура();
	//ПараметрыЗаполнения.Вставить("Организация", Параметры.Организация);
	//ПараметрыЗаполнения.Вставить("РазделыМонитора", РазделыМонитора);
	//ПараметрыЗаполнения.Вставить("ПолучатьПрошлыйПериод", Параметры.ПоказыватьСравнениеСПрошлымГодом);
	//
	//АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	//
	//УстановитьПривилегированныйРежим(Истина);
	//Если Параметры.БыстроеОбновление Тогда
	//	МониторРуководителя.ОбновитьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	//Иначе
	//	МониторРуководителя.ПерезаписатьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	//КонецЕсли;
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура Покупатели(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		Результат.Вставить("Покупатели_Заголовок",
			ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПокупатели()));
		Результат.Вставить("Покупатели_ДоступностьРазделов", ПокупателиДоступностьРазделов());
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваПокупатели());
	Результат.Вставить("Покупатели_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПокупатели()));
	Результат.Вставить("Покупатели_ДоступностьРазделов", ПокупателиДоступностьРазделов());
	
	Покупатели = ДанныеПокупатели(Параметры);
	
	Шрифт      = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	// Задолженность
	Если Покупатели.Задолженность = 0 И Покупатели.ЗадолженностьОтклонение <> 0 И Параметры.ПоказыватьСравнениеСПрошлымГодом Тогда
		ФорматнаяСтрокаЗадолженность = "ЧДЦ=; ЧН=0";
	Иначе
		ФорматнаяСтрокаЗадолженность = "ЧДЦ=";
	КонецЕсли;
	
	Задолженность = Новый ФорматированнаяСтрока(
		Формат(Покупатели.Задолженность, ФорматнаяСтрокаЗадолженность),
		Шрифт,
		ЦветТекста);
	Результат.Вставить("Покупатели_Задолженность", Задолженность);
	
	// Просроченная задолженность
	Если Покупатели.ПросроченнаяЗадолженность = 0 И Покупатели.ПросроченнаяЗадолженностьОтклонение <> 0 И Параметры.ПоказыватьСравнениеСПрошлымГодом Тогда
		ФорматнаяСтрокаПросроченнаяЗадолженность = "ЧДЦ=; ЧН=0";
	Иначе
		ФорматнаяСтрокаПросроченнаяЗадолженность = "ЧДЦ=";
	КонецЕсли;
	
	ПросроченнаяЗадолженность = Новый ФорматированнаяСтрока(
		Формат(Покупатели.ПросроченнаяЗадолженность, ФорматнаяСтрокаПросроченнаяЗадолженность),
		Шрифт,
		ЦветТекста);
	Результат.Вставить("Покупатели_ПросроченнаяЗадолженность", ПросроченнаяЗадолженность);
	
	// Отклонения
	Если Параметры.ПоказыватьСравнениеСПрошлымГодом Тогда
		
		ЗадолженностьОтклонение = ПредставлениеОтклонения(Покупатели.ЗадолженностьОтклонение);
		Результат.Вставить("Покупатели_ЗадолженностьОтклонение", ЗадолженностьОтклонение);
		
		ПросроченнаяЗадолженностьОтклонение = ПредставлениеОтклонения(Покупатели.ПросроченнаяЗадолженностьОтклонение);
		Результат.Вставить("Покупатели_ПросроченнаяЗадолженностьОтклонение",ПросроченнаяЗадолженностьОтклонение);
		
	КонецЕсли;
	
	// Неоплаченные счета
	НеоплаченныеСчета = Новый ФорматированнаяСтрока(
		Формат(Покупатели.НеоплаченныеСчета, "ЧДЦ="),
		Шрифт,
		ЦветТекста);
	Результат.Вставить("Покупатели_НеоплаченныеСчета", НеоплаченныеСчета);
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

// Функция - Данные по покупателям
//
// Параметры:
//  ВалютаРегламентированногоУчета	 - СправочникСсылка.Валюты	 - Валюта регламентированного учета.
// 
// Возвращаемое значение:
//  РезультатПокупатели - Структура
//
Функция ДанныеПокупатели(Параметры)
	РезультатПокупатели = Новый Структура;
	РезультатПокупатели.Вставить("Задолженность", 0);
	РезультатПокупатели.Вставить("ЗадолженностьОтклонение", 0);
	РезультатПокупатели.Вставить("ПросроченнаяЗадолженность", 0);
	РезультатПокупатели.Вставить("ПросроченнаяЗадолженностьОтклонение", 0);
	РезультатПокупатели.Вставить("НеоплаченныеСчета", 0);

	ТекущаяДата = КонецДня(ТекущаяДатаСеанса());
	ТекущаяДатаПрошлыйГод = ДобавитьМесяц(ТекущаяДата, -12);	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Организация КАК Организация,
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК Задолженность,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ХозрасчетныйОстаткиПрошлыйГод.СуммаОстатокДт, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокДт / ЕСТЬNULL(ХозрасчетныйОстаткиПрошлыйГод.СуммаОстатокДт, 0) * 100 - 100
		|	КОНЕЦ КАК ЗадолженностьОтклонение,
		|	ХозрасчетныйОстаткиПрошлыйГод.СуммаОстатокДт КАК СуммаОстатокДт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ТекущаяДата, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СчетаКПолучению)), , Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&ТекущаяДатаПрошлыйГод,
		|				Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СчетаКПолучению)),
		|				,
		|				Организация = &Организация
		|					И &ПоказыватьСравнениеСПрошлымГодом) КАК ХозрасчетныйОстаткиПрошлыйГод
		|		ПО ХозрасчетныйОстатки.Организация = ХозрасчетныйОстаткиПрошлыйГод.Организация";
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("ПоказыватьСравнениеСПрошлымГодом", Параметры.ПоказыватьСравнениеСПрошлымГодом);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("ТекущаяДатаПрошлыйГод", ТекущаяДатаПрошлыйГод);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(РезультатПокупатели, Выборка);
	КонецЕсли;	
	
	// Неоплаченные счета
	МакетСхемаКомпоновкиДанных = Отчеты.АнализНеоплаченныхСчетовПокупателям.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	ТекстЗапроса = МакетСхемаКомпоновкиДанных.НаборыДанных.НеоплаченныеСчетаПокупателям.Запрос;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда 
			Сумма = ВыборкаДетальныеЗаписи.СуммаВВалюте
		Иначе 
			Сумма = ВыборкаДетальныеЗаписи.СуммаВВалюте * ВыборкаДетальныеЗаписи.Курс / ВыборкаДетальныеЗаписи.Кратность;
		КонецЕсли;	
		
		РезультатПокупатели.НеоплаченныеСчета = РезультатПокупатели.НеоплаченныеСчета + Сумма;
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СрокОплаты)
			И ВыборкаДетальныеЗаписи.СрокОплаты < ТекущаяДата Тогда
			
			РезультатПокупатели.ПросроченнаяЗадолженность = РезультатПокупатели.ПросроченнаяЗадолженность + Сумма;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат РезультатПокупатели;
	
КонецФункции // ДанныеПокупатели()

Функция ПокупателиДоступностьРазделов()
	
	//ЗадолженностьПокупателейПоСрокамДолга =
	//	ПравоДоступа("Использование", Метаданные.Отчеты.ЗадолженностьПокупателейПоСрокамДолга)
	//	И ПравоДоступа("Чтение", Метаданные.Константы.СрокОплатыПокупателей)
	//	И Константы.СрокОплатыПокупателей.Получить() > 0;
	//	
	//АнализНеоплаченныхСчетовПокупателям =
	//	ПравоДоступа("Использование", Метаданные.Отчеты.АнализНеоплаченныхСчетовПокупателям)
	//	И Перечисления.РазделыМонитораРуководителя.ДанныеРазделаДоступны(Перечисления.РазделыМонитораРуководителя.НеоплаченныеСчетаПокупателям);
		
	ДоступностьРазделов = Новый Структура();
	//ДоступностьРазделов.Вставить("ЗадолженностьПокупателей",              ПравоДоступа("Использование", Метаданные.Отчеты.ЗадолженностьПокупателей));
	//ДоступностьРазделов.Вставить("ЗадолженностьПокупателейПоСрокамДолга", ЗадолженностьПокупателейПоСрокамДолга);
	ДоступностьРазделов.Вставить("ЗадолженностьПокупателей",              Истина);
	ДоступностьРазделов.Вставить("ЗадолженностьПокупателейПоСрокамДолга", Истина);
	ДоступностьРазделов.Вставить("АнализНеоплаченныхСчетовПокупателям",   ПравоДоступа("Просмотр", Метаданные.Документы.СчетНаОплатуПокупателю));
	ДоступностьРазделов.Вставить("СозданиеСчета",                         ПравоДоступа("Изменение", Метаданные.Документы.СчетНаОплатуПокупателю));
	ДоступностьРазделов.Вставить("СозданиеРеализации",                    ПравоДоступа("Изменение", Метаданные.Документы.РеализацияТоваровУслуг));
	
	Возврат ДоступностьРазделов;
	
КонецФункции

Функция ПокупателиДоступны()
	
	ДоступностьРазделов = ПокупателиДоступностьРазделов();
	
	Возврат ДоступностьРазделов.ЗадолженностьПокупателей
		ИЛИ ДоступностьРазделов.ЗадолженностьПокупателейПоСрокамДолга
		ИЛИ ДоступностьРазделов.АнализНеоплаченныхСчетовПокупателям;
	
КонецФункции

#КонецОбласти

#Область Поставщики

Процедура ДобавитьПоставщики(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаПоставщики(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПоставщики(),
		"БлокиИнформационнойПанели.Поставщики",
		"БлокиИнформационнойПанели.ОбновитьПоставщики",
		СвойстваПоставщики());
	
КонецПроцедуры

Функция СвойстваПоставщики()
	
	Свойства = "Поставщики_Заголовок, Поставщики_НеоплаченныеСчета, "
					+ "Поставщики_Задолженность, Поставщики_ЗадолженностьОтклонение, "
					+ "Поставщики_ПросроченнаяЗадолженность, Поставщики_ПросроченнаяЗадолженностьОтклонение,"
					+ "Поставщики_ДоступностьРазделов";
	
	Возврат Свойства;
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьПоставщики(Параметры) Экспорт
	
	//РазделыМонитора = Новый Массив;
	//РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ЗадолженностьПоставщикам);
	//РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.НеоплаченныеСчетаПоставщиков);
	//
	//ЗаданСрокОплатыПоставщикам = (Константы.СрокОплатыПоставщикам.Получить() > 0);
	//Если ЗаданСрокОплатыПоставщикам Тогда
	//	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ПросроченнаяЗадолженностьПоставщикам);
	//КонецЕсли;
	//
	//ПараметрыЗаполнения = Новый Структура();
	//ПараметрыЗаполнения.Вставить("Организация", Параметры.Организация);
	//ПараметрыЗаполнения.Вставить("РазделыМонитора", РазделыМонитора);
	//ПараметрыЗаполнения.Вставить("ПолучатьПрошлыйПериод", Параметры.ПоказыватьСравнениеСПрошлымГодом);
	//
	//АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	//
	//УстановитьПривилегированныйРежим(Истина);
	//Если Параметры.БыстроеОбновление Тогда
	//	МониторРуководителя.ОбновитьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	//Иначе
	//	МониторРуководителя.ПерезаписатьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	//КонецЕсли;
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура Поставщики(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		Результат.Вставить("Поставщики_Заголовок",
			ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПоставщики()));
		Результат.Вставить("Поставщики_ДоступностьРазделов", ПоставщикиДоступностьРазделов());
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваПоставщики());
	Результат.Вставить("Поставщики_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПоставщики()));
	Результат.Вставить("Поставщики_ДоступностьРазделов", ПоставщикиДоступностьРазделов());
	
	Поставщики = ДанныеПоставщики(Параметры);
	
	Шрифт      = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	// Задолженность
	Если Поставщики.Задолженность = 0 И Поставщики.ЗадолженностьОтклонение <> 0 И Параметры.ПоказыватьСравнениеСПрошлымГодом Тогда
		ФорматнаяСтрокаЗадолженность = "ЧДЦ=; ЧН=0";
	Иначе
		ФорматнаяСтрокаЗадолженность = "ЧДЦ=";
	КонецЕсли;
	
	Задолженность = Новый ФорматированнаяСтрока(
		Формат(Поставщики.Задолженность, ФорматнаяСтрокаЗадолженность),
		Шрифт,
		ЦветТекста);
	Результат.Вставить("Поставщики_Задолженность", Задолженность);
	
	// Просроченная задолженность
	Если Поставщики.ПросроченнаяЗадолженность = 0 И Поставщики.ПросроченнаяЗадолженностьОтклонение <> 0 И Параметры.ПоказыватьСравнениеСПрошлымГодом Тогда
		ФорматнаяСтрокаПросроченнаяЗадолженность = "ЧДЦ=; ЧН=0";
	Иначе
		ФорматнаяСтрокаПросроченнаяЗадолженность = "ЧДЦ=";
	КонецЕсли;
	
	ПросроченнаяЗадолженность = Новый ФорматированнаяСтрока(
		Формат(Поставщики.ПросроченнаяЗадолженность, ФорматнаяСтрокаПросроченнаяЗадолженность),
		Шрифт,
		ЦветТекста);
	Результат.Вставить("Поставщики_ПросроченнаяЗадолженность", ПросроченнаяЗадолженность);
	
	// Отклонения
	Если Параметры.ПоказыватьСравнениеСПрошлымГодом Тогда
		
		ЗадолженностьОтклонение = ПредставлениеОтклонения(Поставщики.ЗадолженностьОтклонение);
		Результат.Вставить("Поставщики_ЗадолженностьОтклонение", ЗадолженностьОтклонение);
		
		ПросроченнаяЗадолженностьОтклонение = ПредставлениеОтклонения(Поставщики.ПросроченнаяЗадолженностьОтклонение);
		Результат.Вставить("Поставщики_ПросроченнаяЗадолженностьОтклонение",ПросроченнаяЗадолженностьОтклонение);
		
	КонецЕсли;
	
	// Неоплаченные счета
	НеоплаченныеСчета = Новый ФорматированнаяСтрока(
		Формат(Поставщики.НеоплаченныеСчета, "ЧДЦ="),
		Шрифт,
		ЦветТекста);
	Результат.Вставить("Поставщики_НеоплаченныеСчета", НеоплаченныеСчета);
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

// Функция - Данные по поставщикам
//
// Параметры:
//  ВалютаРегламентированногоУчета	 - СправочникСсылка.Валюты	 - Валюта регламентированного учета.
// 
// Возвращаемое значение:
//  РезультатПоставщики - Структура
//
Функция ДанныеПоставщики(Параметры)
	РезультатПоставщики = Новый Структура;
	РезультатПоставщики.Вставить("Задолженность", 0);
	РезультатПоставщики.Вставить("ЗадолженностьОтклонение", 0);
	РезультатПоставщики.Вставить("ПросроченнаяЗадолженность", 0);
	РезультатПоставщики.Вставить("ПросроченнаяЗадолженностьОтклонение", 0);
	РезультатПоставщики.Вставить("НеоплаченныеСчета", 0);

	ТекущаяДата = КонецДня(ТекущаяДатаСеанса());
	ТекущаяДатаПрошлыйГод = ДобавитьМесяц(ТекущаяДата, -12);	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Организация КАК Организация,
		|	ХозрасчетныйОстатки.СуммаОстатокКт КАК Задолженность,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ХозрасчетныйОстаткиПрошлыйГод.СуммаОстатокКт, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт / ЕСТЬNULL(ХозрасчетныйОстаткиПрошлыйГод.СуммаОстатокКт, 0) * 100 - 100
		|	КОНЕЦ КАК ЗадолженностьОтклонение,
		|	ХозрасчетныйОстаткиПрошлыйГод.СуммаОстатокКт КАК СуммаОстатокКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ТекущаяДата, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СчетаКОплате)), , Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&ТекущаяДатаПрошлыйГод,
		|				Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СчетаКОплате)),
		|				,
		|				Организация = &Организация
		|					И &ПоказыватьСравнениеСПрошлымГодом) КАК ХозрасчетныйОстаткиПрошлыйГод
		|		ПО ХозрасчетныйОстатки.Организация = ХозрасчетныйОстаткиПрошлыйГод.Организация";
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("ПоказыватьСравнениеСПрошлымГодом", Параметры.ПоказыватьСравнениеСПрошлымГодом);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("ТекущаяДатаПрошлыйГод", ТекущаяДатаПрошлыйГод);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(РезультатПоставщики, Выборка);
	КонецЕсли;	
	
	Возврат РезультатПоставщики;
	
КонецФункции // ДанныеПокупатели()

Функция ПоставщикиДоступностьРазделов()
	
	//ЗадолженностьПоставщикамПоСрокамДолга = 
	//	ПравоДоступа("Использование", Метаданные.Отчеты.ЗадолженностьПоставщикамПоСрокамДолга)
	//	И Константы.СрокОплатыПоставщикам.Получить() > 0;
	
	ДоступностьРазделов = Новый Структура();
	//ДоступностьРазделов.Вставить("ЗадолженностьПоставщикам",              ПравоДоступа("Использование", Метаданные.Отчеты.ЗадолженностьПоставщикам));
	//ДоступностьРазделов.Вставить("ЗадолженностьПоставщикамПоСрокамДолга", ЗадолженностьПоставщикамПоСрокамДолга);
	//ДоступностьРазделов.Вставить("АнализНеоплаченныхСчетовПоставщиков",   ПравоДоступа("Использование", Метаданные.Отчеты.АнализНеоплаченныхСчетовПоставщиков));
	ДоступностьРазделов.Вставить("ЗадолженностьПоставщикам",              Истина);
	ДоступностьРазделов.Вставить("ЗадолженностьПоставщикамПоСрокамДолга", Истина);
	ДоступностьРазделов.Вставить("АнализНеоплаченныхСчетовПоставщиков",   Истина);
	
	Возврат ДоступностьРазделов;
	
КонецФункции

Функция ПоставщикиДоступны()
	
	ДоступностьРазделов = ПоставщикиДоступностьРазделов();
	
	Возврат ДоступностьРазделов.ЗадолженностьПоставщикам
		ИЛИ ДоступностьРазделов.ЗадолженностьПоставщикамПоСрокамДолга
		ИЛИ ДоступностьРазделов.АнализНеоплаченныхСчетовПоставщиков;
	
КонецФункции

#КонецОбласти

#Область Продажи

Процедура ДобавитьПродажи(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаПродажи(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПродажи(),
		"БлокиИнформационнойПанели.Продажи",
		"БлокиИнформационнойПанели.ОбновитьПродажи",
		СвойстваПродажи());
	
КонецПроцедуры

Функция СвойстваПродажи()
	
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоПериодовПродаж() - 1;
	
	Свойства = "Продажи_Заголовок";
	
	Для Индекс = 0 По ВГраница Цикл
		Свойства = Свойства + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоПериодПродаж(Индекс) + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоСуммаПродаж(Индекс) + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоОтклонениеПродаж(Индекс);
	КонецЦикла;

	Возврат Свойства;
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//
Процедура ОбновитьПродажи(Параметры) Экспорт
	
	//РазделыМонитора = Новый Массив;
	//РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ПродажиПоКонтрагентам);
	//
	//ПараметрыЗаполнения = Новый Структура();
	//ПараметрыЗаполнения.Вставить("Организация", Параметры.Организация);
	//ПараметрыЗаполнения.Вставить("РазделыМонитора", РазделыМонитора);
	//ПараметрыЗаполнения.Вставить("ПолучатьПрошлыйПериод", Параметры.ПоказыватьСравнениеСПрошлымГодом);
	//
	//АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	//
	//УстановитьПривилегированныйРежим(Истина);
	//Если Параметры.БыстроеОбновление Тогда
	//	МониторРуководителя.ОбновитьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	//Иначе
	//	МониторРуководителя.ПерезаписатьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	//КонецЕсли;
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура Продажи(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		Результат.Вставить("Продажи_Заголовок",
			ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПродажи()));
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваПродажи());
	Результат.Вставить("Продажи_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПродажи()));
	
	Продажи = ДанныеПродажи(Параметры);
	
	КонецПериода = КонецДня(ТекущаяДатаСеанса());
	
	НачалоМесяца = НачалоМесяца(КонецПериода);
	НачалоГода   = НачалоГода(КонецПериода);
	
	НачалоПрошлогоМесяца  = НачалоМесяца(ДобавитьМесяц(КонецПериода, -1));
	НачалоПрошлогоПериода = НачалоГода(НачалоПрошлогоМесяца);
	
	Индекс =-1;
	
	// Текущий месяц
	Индекс = Индекс + 1;
	Если КонецПериода <> КонецМесяца(КонецПериода) Тогда
		ДобавитьСтрокуПродаж(Индекс, Результат,
			СтрШаблон(НСтр("ru = 'с %1'"), Формат(НачалоМесяца, "Л=ru_RU; ДФ='д ММММ'")),
			Продажи.ТекущийМесяц,
			Продажи.ТекущийМесяцОтклонение,
			Параметры.ПоказыватьСравнениеСПрошлымГодом,
			БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиТекущегоМесяца());
	Иначе
		ДобавитьСтрокуПродаж(Индекс, Результат,
			Формат(НачалоМесяца, "Л=ru_RU; ДФ='ММММ'"),
			Продажи.ТекущийМесяц,
			Продажи.ТекущийМесяцОтклонение,
			Параметры.ПоказыватьСравнениеСПрошлымГодом,
			БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиТекущегоМесяца());
	КонецЕсли;
	
	// С начала года. Не показываем, если дублирует продажи за текущий месяц.
	Если НачалоГода <> НачалоМесяца Тогда 
		Индекс = Индекс + 1;
		Если КонецПериода <> КонецМесяца(КонецПериода) Тогда
			ДобавитьСтрокуПродаж(Индекс, Результат,
				СтрШаблон(НСтр("ru = 'с %1'"), Формат(НачалоГода, "Л=ru_RU; ДФ='д ММММ'")),
				Продажи.ТекущийМесяцСНачалаГода,
				Продажи.ТекущийМесяцСНачалаГодаОтклонение,
				Параметры.ПоказыватьСравнениеСПрошлымГодом,
				БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиТекущегоМесяцаСНачалаГода());
		Иначе
			ДобавитьСтрокуПродаж(Индекс, Результат,
				СтрШаблон("%1 – %2", Формат(НачалоГода, "Л=ru_RU; ДФ='MMMM'"), Формат(НачалоМесяца, "Л=ru_RU; ДФ='MMMM'")),
				Продажи.ТекущийМесяцСНачалаГода,
				Продажи.ТекущийМесяцСНачалаГодаОтклонение,
				Параметры.ПоказыватьСравнениеСПрошлымГодом,
				БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиТекущегоМесяцаСНачалаГода());
		КонецЕсли;
	КонецЕсли;
	
	// Прошлый месяц
	Индекс = Индекс + 1;
	ДобавитьСтрокуПродаж(Индекс, Результат,
		Формат(НачалоПрошлогоМесяца, "Л=ru_RU; ДФ='MMMM'"),
		Продажи.ПрошлыйМесяц,
		Продажи.ПрошлыйМесяцОтклонение,
		Параметры.ПоказыватьСравнениеСПрошлымГодом,
		БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиПрошлогоМесяца());
	
	// С начала года по конец прошлого месяца. Не показываем, если дублирует продажи за прошлый месяц.
	Если НачалоПрошлогоПериода <> НачалоПрошлогоМесяца Тогда
		Индекс = Индекс + 1;
		ДобавитьСтрокуПродаж(Индекс, Результат,
			СтрШаблон("%1 – %2", Формат(НачалоПрошлогоПериода, "Л=ru_RU; ДФ='MMMM'"), Формат(НачалоПрошлогоМесяца, "Л=ru_RU; ДФ='MMMM'")),
			Продажи.ПрошлыйМесяцСНачалаГода,
			Продажи.ПрошлыйМесяцСНачалаГодаОтклонение,
			Параметры.ПоказыватьСравнениеСПрошлымГодом,
			БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиПрошлогоМесяцаСНачалаГода());
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

// Функция - Данные Продажи
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//     * Инициализация - Истина - заполнить только статическими данными
// 
// Возвращаемое значение:
//  РезультатПродажи - Структура продаж
//
Функция ДанныеПродажи(Параметры)
	РезультатПродажи = Новый Структура();
	РезультатПродажи.Вставить("ТекущийМесяц", 0);
	РезультатПродажи.Вставить("ТекущийМесяцОтклонение", 0);
	РезультатПродажи.Вставить("ТекущийМесяцСНачалаГода", 0);
	РезультатПродажи.Вставить("ТекущийМесяцСНачалаГодаОтклонение", 0);
	РезультатПродажи.Вставить("ПрошлыйМесяц", 0);
	РезультатПродажи.Вставить("ПрошлыйМесяцОтклонение", 0);
	РезультатПродажи.Вставить("ПрошлыйМесяцСНачалаГода", 0);
	РезультатПродажи.Вставить("ПрошлыйМесяцСНачалаГодаОтклонение", 0);
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ТекущаяДатаПрошлыйГод = ДобавитьМесяц(ТекущаяДата, -12);	

	// Прорадок в запросе такой же как в структуре результата.
	Запрос = Новый Запрос;
	Запрос.Текст =
		// Текущий месяц
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК Порядок,
		|	ПродажиОбороты.Организация КАК Организация,
		|	ПродажиОбороты.СуммаОборот КАК ТекущийМесяц,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПродажиОборотыПрошлыйГод.СуммаОборот, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ПродажиОбороты.СуммаОборот / ЕСТЬNULL(ПродажиОборотыПрошлыйГод.СуммаОборот, 0) * 100 - 100
		|	КОНЕЦ КАК ТекущийМесяцОтклонение,
		|	0 КАК ТекущийМесяцСНачалаГода,
		|	0 КАК ТекущийМесяцСНачалаГодаОтклонение,
		|	0 КАК ПрошлыйМесяц,
		|	0 КАК ПрошлыйМесяцОтклонение,
		|	0 КАК ПрошлыйМесяцСНачалаГода,
		|	0 КАК ПрошлыйМесяцСНачалаГодаОтклонение
		|ПОМЕСТИТЬ ТаблицаПродажи
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ), КОНЕЦПЕРИОДА(&ТекущаяДата, МЕСЯЦ), , Организация = &Организация) КАК ПродажиОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
		|				НАЧАЛОПЕРИОДА(&ТекущаяДатаПрошлыйГод, МЕСЯЦ),
		|				КОНЕЦПЕРИОДА(&ТекущаяДатаПрошлыйГод, МЕСЯЦ),
		|				,
		|				Организация = &Организация
		|					И &ПоказыватьСравнениеСПрошлымГодом) КАК ПродажиОборотыПрошлыйГод
		|		ПО ПродажиОбороты.Организация = ПродажиОборотыПрошлыйГод.Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	ПродажиОбороты.Организация,
		|	0,
		|	0,
		|	ПродажиОбороты.СуммаОборот,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПродажиОборотыПрошлыйГод.СуммаОборот, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ПродажиОбороты.СуммаОборот / ЕСТЬNULL(ПродажиОборотыПрошлыйГод.СуммаОборот, 0) * 100 - 100
		|	КОНЕЦ,
		|	0,
		|	0,
		|	0,
		|	0
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(НАЧАЛОПЕРИОДА(&ТекущаяДата, ГОД), КОНЕЦПЕРИОДА(&ТекущаяДата, МЕСЯЦ), , Организация = &Организация) КАК ПродажиОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
		|				НАЧАЛОПЕРИОДА(&ТекущаяДатаПрошлыйГод, ГОД),
		|				КОНЕЦПЕРИОДА(&ТекущаяДатаПрошлыйГод, МЕСЯЦ),
		|				,
		|				Организация = &Организация
		|					И &ПоказыватьСравнениеСПрошлымГодом) КАК ПродажиОборотыПрошлыйГод
		|		ПО ПродажиОбороты.Организация = ПродажиОборотыПрошлыйГод.Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	5,
		|	ПродажиОбороты.Организация,
		|	0,
		|	0,
		|	0,
		|	0,
		|	ПродажиОбороты.СуммаОборот,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПродажиОборотыПрошлыйГод.СуммаОборот, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ПродажиОбороты.СуммаОборот / ЕСТЬNULL(ПродажиОборотыПрошлыйГод.СуммаОборот, 0) * 100 - 100
		|	КОНЕЦ,
		|	0,
		|	0
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -1), МЕСЯЦ), КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -1), МЕСЯЦ), , Организация = &Организация) КАК ПродажиОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
		|				НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДатаПрошлыйГод, МЕСЯЦ, -1), ДЕНЬ),
		|				КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДатаПрошлыйГод, МЕСЯЦ, -1), ДЕНЬ),
		|				,
		|				Организация = &Организация
		|					И &ПоказыватьСравнениеСПрошлымГодом) КАК ПродажиОборотыПрошлыйГод
		|		ПО ПродажиОбороты.Организация = ПродажиОборотыПрошлыйГод.Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	7,
		|	ПродажиОбороты.Организация,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	ПродажиОбороты.СуммаОборот,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПродажиОборотыПрошлыйГод.СуммаОборот, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ПродажиОбороты.СуммаОборот / ЕСТЬNULL(ПродажиОборотыПрошлыйГод.СуммаОборот, 0) * 100 - 100
		|	КОНЕЦ
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(НАЧАЛОПЕРИОДА(&ТекущаяДата, ГОД), КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -1), МЕСЯЦ), , Организация = &Организация) КАК ПродажиОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
		|				НАЧАЛОПЕРИОДА(&ТекущаяДатаПрошлыйГод, ГОД),
		|				КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДатаПрошлыйГод, МЕСЯЦ, -1), МЕСЯЦ),
		|				,
		|				Организация = &Организация
		|					И &ПоказыватьСравнениеСПрошлымГодом) КАК ПродажиОборотыПрошлыйГод
		|		ПО ПродажиОбороты.Организация = ПродажиОборотыПрошлыйГод.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаПродажи.Порядок) КАК Порядок,
		|	ТаблицаПродажи.Организация КАК Организация,
		|	СУММА(ТаблицаПродажи.ТекущийМесяц) КАК ТекущийМесяц,
		|	СУММА(ТаблицаПродажи.ТекущийМесяцОтклонение) КАК ТекущийМесяцОтклонение,
		|	СУММА(ТаблицаПродажи.ТекущийМесяцСНачалаГода) КАК ТекущийМесяцСНачалаГода,
		|	СУММА(ТаблицаПродажи.ТекущийМесяцСНачалаГодаОтклонение) КАК ТекущийМесяцСНачалаГодаОтклонение,
		|	СУММА(ТаблицаПродажи.ПрошлыйМесяц) КАК ПрошлыйМесяц,
		|	СУММА(ТаблицаПродажи.ПрошлыйМесяцОтклонение) КАК ПрошлыйМесяцОтклонение,
		|	СУММА(ТаблицаПродажи.ПрошлыйМесяцСНачалаГода) КАК ПрошлыйМесяцСНачалаГода,
		|	СУММА(ТаблицаПродажи.ПрошлыйМесяцСНачалаГодаОтклонение) КАК ПрошлыйМесяцСНачалаГодаОтклонение
		|ИЗ
		|	ТаблицаПродажи КАК ТаблицаПродажи
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПродажи.Организация";
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("ПоказыватьСравнениеСПрошлымГодом", Параметры.ПоказыватьСравнениеСПрошлымГодом);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("ТекущаяДатаПрошлыйГод", ТекущаяДатаПрошлыйГод);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(РезультатПродажи, Выборка);
	КонецЕсли;	
	
	Возврат РезультатПродажи;
	
КонецФункции // ДанныеПродажи()

Процедура ДобавитьСтрокуПродаж(Индекс, Результат, Период, Сумма, Отклонение, ДобавитьОтклонение, Идентификатор)
	
	Если Сумма = 0 И Отклонение <> 0 И ДобавитьОтклонение Тогда
		ФорматнаяСтрока = "ЧДЦ=; ЧН=0";
	Иначе
		ФорматнаяСтрока = "ЧДЦ=";
	КонецЕсли;
	
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;
	
	ПредставлениеПериода = Новый ФорматированнаяСтрока(Период, , ЦветГиперссылки, , Идентификатор);
	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоПериодПродаж(Индекс), ПредставлениеПериода);
	
	ПредставлениеСуммы = Новый ФорматированнаяСтрока(Формат(Сумма, ФорматнаяСтрока), Шрифт, ЦветТекста);
	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоСуммаПродаж(Индекс), ПредставлениеСуммы);
	
	Если ДобавитьОтклонение Тогда
		
		ПредставлениеОтклонения = ПредставлениеОтклонения(Отклонение);
		Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоОтклонениеПродаж(Индекс), ПредставлениеОтклонения);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПродажиДоступны()
	// Блок доступен для пользователей, которым доступен отчет "Продажи".
	// Сведения о продажах получаются из регистра "Хозрасчетный" в привилегированном режиме.
	Возврат ПравоДоступа("Использование", Метаданные.Отчеты.Продажи);
КонецФункции

#КонецОбласти

#Область Новости

Процедура ДобавитьНовости(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаНовости(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаНовости(),
		"БлокиИнформационнойПанели.Новости",,
		СвойстваНовости());
	
КонецПроцедуры

Функция СвойстваНовости()
	
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоНовостей() - 1;
	
	Свойства = "Новости_Заголовок, Новости_Индекс, Новости_Текст, Новости_АдресХранилища";
	
	Возврат Свойства;
	
КонецФункции

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы информационной панели
//
Процедура Новости(Параметры) Экспорт

	Результат = Новый Структура(СвойстваНовости());
	Результат.Вставить("Новости_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаНовости()));
	
	МаксимальноеКоличествоНовостей = БлокиИнформационнойПанелиКлиентСервер.КоличествоНовостей();
	
	ТаблицаНовостей = Новый ТаблицаЗначений;
	Если ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		
		ПараметрыПолученияНовостей = Новый Структура;
		ПараметрыПолученияНовостей.Вставить("ВариантОтбора",      ИнтернетПоддержкаПользователейПереопределяемый.ВариантОтбораПоЛентеНовостей());
		ПараметрыПолученияНовостей.Вставить("ЛентаНовостей",      ИнтернетПоддержкаПользователейПереопределяемый.ЛентаНовостейЧтоНового());
		ПараметрыПолученияНовостей.Вставить("КоличествоНовостей", МаксимальноеКоличествоНовостей);
		ПараметрыПолученияНовостей.Вставить("ПорядокСортировки",  "Прочтена Возр, ДатаПубликации Убыв, Важность Убыв");
		
		Справочники.Новости.ПолучитьСписокНовостей(
			ТаблицаНовостей,
			Пользователи.ТекущийПользователь(),
			ПараметрыПолученияНовостей,
			Новый Массив);
		
	КонецЕсли;
	
	Шрифт           = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста      = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;
	
	ТекстыНовостей = Новый СписокЗначений;
	СсылкиНовостей = Новый СписокЗначений;
	
	КоличествоНовостей = ТаблицаНовостей.Количество();
	Если КоличествоНовостей > 0 Тогда
		
		ВГраница = Мин(МаксимальноеКоличествоНовостей, КоличествоНовостей) - 1;
		Для Индекс = 0 По ВГраница Цикл
			
			Новость = ТаблицаНовостей[Индекс];
			
			ТекстНовости = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(СокрЛП(Новость.Наименование), Шрифт, ЦветТекста),
				Символы.ПС,
				Символы.ПС,
				Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее'"), , ЦветГиперссылки, , ПолучитьНавигационнуюСсылку(Новость.Ссылка))
			);
			
			ТекстыНовостей.Добавить(ТекстНовости);
			СсылкиНовостей.Добавить(Новость.Ссылка);
			
		КонецЦикла;
		
		Результат.Вставить("Новости_Текст", ТекстыНовостей[0].Значение);
		
	Иначе
		
		Результат.Вставить("Новости_Текст", Новый ФорматированнаяСтрока(БлокиИнформационнойПанелиКлиентСервер.ТекстОтсутствияНовостей(), Шрифт, ЦветТекста));
		
	КонецЕсли;
	
	// Начинаем показывать с первой новости
	Результат.Вставить("Новости_Индекс", 0);
	
	// Список новостей передаем в форму через временное хранилище
	ДанныеНовостей = Новый Структура;
	ДанныеНовостей.Вставить("ТекстыНовостей", ТекстыНовостей);
	ДанныеНовостей.Вставить("СсылкиНовостей", СсылкиНовостей);
	АдресХранилищаНовостей = ПоместитьВоВременноеХранилище(ДанныеНовостей, Параметры.УникальныйИдентификатор);
	Результат.Вставить("Новости_АдресХранилища", АдресХранилищаНовостей);
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

Процедура ДобавитьТекущиеДела(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаТекущиеДела(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаТекущиеДела(),
		"БлокиИнформационнойПанели.ТекущиеДела",,
		СвойстваТекущиеДела());
	
КонецПроцедуры

Функция СвойстваТекущиеДела()
	
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоТекущиеДела() - 1;
	
	Свойства = "ТекущиеДела_Заголовок, ТекущиеДела_Индекс, ТекущиеДела_Текст, ТекущиеДела_АдресХранилища";
	
	Возврат Свойства;
	
КонецФункции

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы информационной панели
//
Процедура ТекущиеДела(Параметры) Экспорт

	Результат = Новый Структура(СвойстваТекущиеДела());
	Результат.Вставить("ТекущиеДела_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаТекущиеДела()));
	
	МаксимальноеКоличествоТекущиеДела = БлокиИнформационнойПанелиКлиентСервер.КоличествоТекущиеДела();
	
	ПараметрыТекущиеДела = Новый Структура;
	ТекущиеДелаВХранилище = ПоместитьВоВременноеХранилище(Неопределено, Параметры.УникальныйИдентификатор);
	ТекущиеДелаСлужебный.СформироватьСписокТекущихДелПользователя(ПараметрыТекущиеДела, ТекущиеДелаВХранилище); 
	ТаблицаТекущиеДела = ПолучитьИзВременногоХранилища(ТекущиеДелаВХранилище);
	
	Шрифт           = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста      = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;
	
	ТекстыТекущиеДела = Новый СписокЗначений;
	СсылкиТекущиеДела = Новый СписокЗначений;
	
	КоличествоТекущиеДела = ТаблицаТекущиеДела.Количество();
	Если КоличествоТекущиеДела > 0 Тогда
		КоличествоТекущиеДела = 0;
		Для Каждого СтрокаТаблицыТекущиеДела Из ТаблицаТекущиеДела Цикл 
			Если НЕ СтрокаТаблицыТекущиеДела.ЕстьДела
				Или НЕ СтрокаТаблицыТекущиеДела.ПредставлениеРаздела = "Администрирование" Тогда 
				Продолжить;
			КонецЕсли;
			
			Если КоличествоТекущиеДела >= МаксимальноеКоличествоТекущиеДела Тогда 
				Прервать;
			КонецЕсли;	
			
			Представление = ?(СтрокаТаблицыТекущиеДела.Количество = 0, СтрокаТаблицыТекущиеДела.Представление, СтрШаблон("%1 (%2)", СтрокаТаблицыТекущиеДела.Представление, СтрокаТаблицыТекущиеДела.Количество));
			
			ТекстТекущиеДела = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(Представление, Шрифт, ЦветТекста),
				Символы.ПС,
				Символы.ПС,
				Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее'"),, ЦветГиперссылки,, СтрокаТаблицыТекущиеДела.Форма)
			);
			
			ТекстыТекущиеДела.Добавить(ТекстТекущиеДела);
			СсылкиТекущиеДела.Добавить(СтрокаТаблицыТекущиеДела.Форма);
			
			КоличествоТекущиеДела = КоличествоТекущиеДела + 1;
		КонецЦикла;	
		
		Результат.Вставить("ТекущиеДела_Текст", ТекстыТекущиеДела[0].Значение);
		
	Иначе
		Результат.Вставить("ТекущиеДела_Текст", Новый ФорматированнаяСтрока(БлокиИнформационнойПанелиКлиентСервер.ТекстОтсутствияТекущиеДела(), Шрифт, ЦветТекста));
	КонецЕсли;
	
	// Начинаем показывать с первого
	Результат.Вставить("ТекущиеДела_Индекс", 0);
	
	// Список дел передаем в форму через временное хранилище
	ДанныеТекущиеДела = Новый Структура;
	ДанныеТекущиеДела.Вставить("ТекстыТекущиеДела", ТекстыТекущиеДела);
	ДанныеТекущиеДела.Вставить("СсылкиТекущиеДела", СсылкиТекущиеДела);
	АдресХранилищаТекущиеДела = ПоместитьВоВременноеХранилище(ДанныеТекущиеДела, Параметры.УникальныйИдентификатор);
	Результат.Вставить("ТекущиеДела_АдресХранилища", АдресХранилищаТекущиеДела);
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область Заметки

Процедура ДобавитьЗаметки(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаЗаметки(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаЗаметки(),
		"БлокиИнформационнойПанели.Заметки",
		"БлокиИнформационнойПанели.ОбновитьЗаметки",
		СвойстваЗаметки());
	
КонецПроцедуры

Функция СвойстваЗаметки()
	
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоЗаметки() - 1;
	
	Свойства = "Заметки_Заголовок, Заметки_Индекс, Заметки_Текст, Заметки_ИндексКартинки, Заметки_АдресХранилища";
	
	Возврат Свойства;
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьЗаметки(Параметры) Экспорт

КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы информационной панели
//
Процедура Заметки(Параметры) Экспорт

	Результат = Новый Структура(СвойстваЗаметки());
	Результат.Вставить("Заметки_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаЗаметки()));
	
	МаксимальноеКоличествоЗаметки = БлокиИнформационнойПанелиКлиентСервер.КоличествоЗаметки();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СправочникЗаметки.Ссылка КАК Ссылка,
		|	СправочникЗаметки.Наименование КАК Наименование,
		|	СправочникЗаметки.Пометка КАК Пометка,
		|	ВЫБОР
		|		КОГДА СправочникЗаметки.ПометкаУдаления
		|			ТОГДА 0
		|		КОГДА СправочникЗаметки.ЭтоГруппа
		|			ТОГДА -1
		|		КОГДА СправочникЗаметки.Пометка = ЗНАЧЕНИЕ(Перечисление.ЦветаЗаметок.ПустаяСсылка)
		|			ТОГДА 4
		|		ИНАЧЕ ЕСТЬNULL(ЦветаЗаметок.Порядок, 0) + 2
		|	КОНЕЦ КАК ИндексКартинки,
		|	СправочникЗаметки.ПредставлениеПредмета КАК ПредставлениеПредмета
		|ИЗ
		|	Справочник.Заметки КАК СправочникЗаметки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ЦветаЗаметок КАК ЦветаЗаметок
		|		ПО СправочникЗаметки.Пометка.Порядок = ЦветаЗаметок.Порядок
		|ГДЕ
		|	НЕ СправочникЗаметки.ПометкаУдаления
		|	И СправочникЗаметки.Автор = &Пользователь
		|	И СправочникЗаметки.ДляРабочегоСтола
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаИзменения";
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	ТаблицаЗаметки = Запрос.Выполнить().Выгрузить();
	
	Шрифт           = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста      = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;
	
	ТекстыЗаметки = Новый СписокЗначений;
	СсылкиЗаметки = Новый СписокЗначений;
	КартинкиЗаметки = Новый СписокЗначений;
	
	КоличествоЗаметки = ТаблицаЗаметки.Количество();
	Если КоличествоЗаметки > 0 Тогда
		КоличествоЗаметки = 0;
		Для Каждого СтрокаТаблицыЗаметки Из ТаблицаЗаметки Цикл 
			Если КоличествоЗаметки >= МаксимальноеКоличествоЗаметки Тогда 
				Прервать;
			КонецЕсли;	
			
			ПредставлениеПредмета = ?(СтрокаТаблицыЗаметки.ПредставлениеПредмета = "не задан", 
				СтрокаТаблицыЗаметки.Наименование,
				СтрокаТаблицыЗаметки.ПредставлениеПредмета);
			
			ТекстЗаметки = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(ПредставлениеПредмета, Шрифт, ЦветТекста),
				Символы.ПС,
				Символы.ПС,
				Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее'"),, ЦветГиперссылки,, ПолучитьНавигационнуюСсылку(СтрокаТаблицыЗаметки.Ссылка))
			);
			
			ТекстыЗаметки.Добавить(ТекстЗаметки);
			СсылкиЗаметки.Добавить(СтрокаТаблицыЗаметки.Ссылка);
			КартинкиЗаметки.Добавить(СтрокаТаблицыЗаметки.ИндексКартинки);
			
			КоличествоЗаметки = КоличествоЗаметки + 1;
		КонецЦикла;	
		
		Результат.Вставить("Заметки_Текст", ТекстыЗаметки[0].Значение);
		Результат.Вставить("Заметки_ИндексКартинки", КартинкиЗаметки[0].Значение);
		
	Иначе
		Результат.Вставить("Заметки_Текст", Новый ФорматированнаяСтрока(БлокиИнформационнойПанелиКлиентСервер.ТекстОтсутствияЗаметки(), Шрифт, ЦветТекста));
		Результат.Вставить("Заметки_ИндексКартинки", 1);
	КонецЕсли;
	
	// Начинаем показывать с первого
	Результат.Вставить("Заметки_Индекс", 0);
	
	// Список заметок передаем в форму через временное хранилище
	ДанныеЗаметки = Новый Структура;
	ДанныеЗаметки.Вставить("ТекстыЗаметки", ТекстыЗаметки);
	ДанныеЗаметки.Вставить("СсылкиЗаметки", СсылкиЗаметки);
	ДанныеЗаметки.Вставить("КартинкиЗаметки", КартинкиЗаметки);
	АдресХранилищаЗаметки = ПоместитьВоВременноеХранилище(ДанныеЗаметки, Параметры.УникальныйИдентификатор);
	Результат.Вставить("Заметки_АдресХранилища", АдресХранилищаЗаметки);
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

Функция ЗаметкиДоступны()
	Возврат Константы.ИспользоватьЗаметки.Получить();
КонецФункции

#КонецОбласти

#Область МетодическаяПоддержка

Процедура ДобавитьМетодическаяПоддержка(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаМетодическаяПоддержка(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаМетодическаяПоддержка(),
		"БлокиИнформационнойПанели.МетодическаяПоддержка",,
		СвойстваМетодическаяПоддержка());
	
КонецПроцедуры

Функция СвойстваМетодическаяПоддержка()
	
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоСсылокМетодическойПоддержки() - 1;
	
	Свойства = "МетодическаяПоддержка_Заголовок";
	
	Для Индекс = 0 По ВГраница Цикл
		Свойства = Свойства + ","
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоСсылкаМетодическойПоддержки(Индекс);
	КонецЦикла;
	
	Возврат Свойства;

КонецФункции

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//
Процедура МетодическаяПоддержка(Параметры) Экспорт
	
	Результат = Новый Структура(СвойстваМетодическаяПоддержка());
	Результат.Вставить("МетодическаяПоддержка_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаМетодическаяПоддержка()));
	
	МаксимальноеКоличествоСсылок = БлокиИнформационнойПанелиКлиентСервер.КоличествоСсылокМетодическойПоддержки();
	
	ТаблицаИнформационныхСсылок = Обработки.МетодическаяПоддержка.ПолучитьТаблицуИнформационныхСсылокДляВиджета();
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;
	
	ВГраница = Мин(МаксимальноеКоличествоСсылок, ТаблицаИнформационныхСсылок.Количество()) - 1;
	Для Индекс = 0 По ВГраница Цикл
		
		ИнформационнаяСсылка = ТаблицаИнформационныхСсылок[Индекс];
		
		СсылкаМетодическойПоддержки = Новый ФорматированнаяСтрока(
			ИнформационнаяСсылка.Наименование, , ЦветГиперссылки, , ИнформационнаяСсылка.Адрес);
		
		Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоСсылкаМетодическойПоддержки(Индекс), СсылкаМетодическойПоддержки);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

Функция МетодическаяПоддержкаДоступна()
	
	Возврат ПравоДоступа("Использование", Метаданные.Обработки.МетодическаяПоддержка);
	
КонецФункции

#КонецОбласти

#Область ПоддержкаСервиса

Процедура ДобавитьПоддержкаСервиса(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаПоддержкаСервиса(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПоддержкаСервиса(ДомашняяСтраницаСервиса()),
		"БлокиИнформационнойПанели.ПоддержкаСервиса",,
		СвойстваПоддержкаСервиса());
	
КонецПроцедуры

Функция СвойстваПоддержкаСервиса()
	
	Свойства = "ПоддержкаСервиса_Заголовок, ПоддержкаСервиса_КартинкаСообщения, ПоддержкаСервиса_ТекстСообщения";
	
	Возврат Свойства;
	
КонецФункции

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//
Процедура ПоддержкаСервиса(Параметры) Экспорт
	
	Результат = Новый Структура(СвойстваПоддержкаСервиса());
	Результат.Вставить("ПоддержкаСервиса_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПоддержкаСервиса(
		ДомашняяСтраницаСервиса())));
	
	Шрифт      = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	//// ТехнологияСервиса.ИнформационныйЦентр
	//ТаблицаСообщенийСервиса = Новый ТаблицаЗначений;
	//ТаблицаСообщенийСервиса.Колонки.Добавить(
	//	"СсылкаНаДанные", Новый ОписаниеТипов("СправочникСсылка.ОбщиеДанныеИнформационногоЦентра"));
	//УстановитьПривилегированныйРежим(Истина);
	//ИнформационныйЦентрСервер.СформироватьСписокНовостейНаРабочийСтол(ТаблицаСообщенийСервиса, 1);
	//УстановитьПривилегированныйРежим(Ложь);
	//// Конец ТехнологияСервиса.ИнформационныйЦентр
	//
	//Если ТаблицаСообщенийСервиса.Количество() > 0 Тогда
	//	
	//	Сообщение = ТаблицаСообщенийСервиса[0];
	//	
	//	СвойстваСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сообщение.СсылкаНаДанные, "Наименование, Критичность");
	//	
	//	ИндексКартинки = БлокиИнформационнойПанелиКлиентСервер.ИндексКартинкиСообщенияСервиса(СвойстваСообщения.Критичность > 5);
	//	Результат.Вставить("ПоддержкаСервиса_КартинкаСообщения", ИндексКартинки);
	//	
	//	НаименованиеБезПробелов = СтрокаБезПереносов(СвойстваСообщения.Наименование);
	//	
	//	ТекстСообщения = Новый ФорматированнаяСтрока(НаименованиеБезПробелов, Шрифт, ЦветТекста);
	//	Результат.Вставить("ПоддержкаСервиса_ТекстСообщения", ТекстСообщения);
	//	
	//КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

Функция ДомашняяСтраницаСервиса() Экспорт
	
	ДомашняяСтраница = НСтр("ru = 'Домашняя страница'");
	Если ДомашняяСтраница = "Домашняя страница" Тогда
		ДомашняяСтраница = "";
	КонецЕсли;
	
	Возврат ДомашняяСтраница;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НоваяТаблицаБлоков()
	
	ТаблицаБлоков = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаБлоков.Колонки;
	
	Колонки.Добавить("Пометка",                   Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("Имя",                       ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Колонки.Добавить("Синоним",                   ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Колонки.Добавить("ПроцедураПолученияДанных",  ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Колонки.Добавить("ПроцедураОбновленияДанных", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Колонки.Добавить("РеквизитыФормы",            ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Колонки.Добавить("ЦветФона",                  Новый ОписаниеТипов("Цвет"));
	Колонки.Добавить("Порядок",                   ОбщегоНазначения.ОписаниеТипаЧисло(3));
	
	Возврат ТаблицаБлоков;
	
КонецФункции

Процедура Добавить(ТаблицаБлоков, Имя, Синоним, ПроцедураПолученияДанных, ПроцедураОбновленияДанных, РеквизитыФормы, Порядок = 100)
	
	НовыйБлок = ТаблицаБлоков.Добавить();
	НовыйБлок.Имя                       = Имя;
	НовыйБлок.Синоним                   = Синоним;
	НовыйБлок.ПроцедураПолученияДанных  = ПроцедураПолученияДанных;
	НовыйБлок.ПроцедураОбновленияДанных = ПроцедураОбновленияДанных;
	НовыйБлок.РеквизитыФормы            = РеквизитыФормы;
	НовыйБлок.Порядок                   = Порядок;
	
КонецПроцедуры

Функция МножественноеПредставление(ПараметрыПредметаИсчисления)
	
	ПредставленияПредмета = СтрРазделить(ПараметрыПредметаИсчисления, ",");
	
	Возврат ?(ПредставленияПредмета.Количество() >= 3, СокрЛП(ПредставленияПредмета[2]), "");
	
КонецФункции

Функция ПредставлениеСрока(ОтносительныйСрок, ОсталосьДней) Экспорт
	
	Если ОтносительныйСрок = Перечисления.ОтносительныеСроки.НесколькоДней Тогда
		
		ОсталосьДнейПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
			ОсталосьДней, НСтр("ru = 'день, дня, дней'"));
			
		ПредставлениеСрока = СтрШаблон(НСтр("ru = 'Через %1'"), ОсталосьДнейПрописью);
		
	ИначеЕсли ОтносительныйСрок = Перечисления.ОтносительныеСроки.Неделя Тогда
		
		ПредставлениеСрока = НСтр("ru = 'Через неделю'");
		
	ИначеЕсли ОтносительныйСрок = Перечисления.ОтносительныеСроки.ДвеНедели Тогда
		
		ПредставлениеСрока = НСтр("ru = 'Через 2 недели'");
		
	ИначеЕсли ОтносительныйСрок = Перечисления.ОтносительныеСроки.ТриНедели Тогда
		
		ПредставлениеСрока = НСтр("ru = 'Через 3 недели'");
		
	ИначеЕсли ОтносительныйСрок = Перечисления.ОтносительныеСроки.Месяц Тогда
		
		ПредставлениеСрока = НСтр("ru = 'Через месяц'");
		
	Иначе
		
		ПредставлениеСрока = Строка(ОтносительныйСрок); // Сегодня, Завтра
		
	КонецЕсли;
	
	Возврат ПредставлениеСрока;
	
КонецФункции

Функция ПредставлениеОтклонения(Знач Отклонение)
	
	Отклонение = Окр(Отклонение, 0);
	
	Стрелка = ?(Отклонение > 0, СтрелкаВверх(), СтрелкаВниз());
	
	МодульОтклонения = Макс(Отклонение, -Отклонение);
	
	ПределОтклонения = ПределОтклонения();
	
	Если Отклонение <> 0 Тогда
		Если Отклонение < ПределОтклонения Тогда
			ПредставлениеОтклонения = Стрелка + Формат(МодульОтклонения, "ЧДЦ=") + "%";
		Иначе
			ПредставлениеОтклонения = Стрелка;
		КонецЕсли;
	Иначе
		ПредставлениеОтклонения = "";
	КонецЕсли;
	
	Шрифт = ШрифтыСтиля.ШрифтОтклоненияИнформационнойПанели;
	Если Отклонение > 0 Тогда
		ЦветТекста = ЦветаСтиля.ЦветПоложительногоОтклоненияИнформационнойПанели;
	ИначеЕсли Отклонение < 0 Тогда
		ЦветТекста = ЦветаСтиля.ЦветОтрицательногоОтклоненияИнформационнойПанели;
	Иначе
		ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ПредставлениеОтклонения, Шрифт, ЦветТекста);
	
КонецФункции

Функция ПределОтклонения()
	
	Возврат 999;
	
КонецФункции

Функция СтрелкаВверх()
	
	Возврат Символ(9650);
	
КонецФункции

Функция СтрелкаВниз()
	
	Возврат Символ(9660);
	
КонецФункции

// Заменяет пробелы в строке на неразрывные пробелы для блокировки переносов в браузере
//
Функция СтрокаБезПереносов(ИсходнаяСтрока)
	
	// Для того чтобы строка правильно переносилась в веб-клиенте,
	// вместо запятой используем символ - U+201A:Single Low-9 Quotation Mark (Keystroke: Alt+0130)
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, ",", "‚");
	Возврат СтрЗаменить(ИсходнаяСтрока, " ", Символы.НПП);
	
КонецФункции

Функция ЗаголовокБлока(ТекстЗаголовка)
	
	Если Константы.ИнтерфейсТакси.Получить() Тогда
		Шрифт = ШрифтыСтиля.ШрифтЗаголовкаИнформационнойПанели;
		ЦветТекста = ЦветаСтиля.ЦветЗаголовкаИнформационнойПанели;
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ТекстЗаголовка, Шрифт, ЦветТекста);
	
КонецФункции

#КонецОбласти