////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ ПО СОТРУДНИКУ

// Нужно использовать функцию ПроведениеРасчетовПоЗарплатеСервер.СведенияОСотруднике 
//Функция - получает Сведения о сотруднике
//
// Возвращаемое значение:
//  СведенияОСотруднике - Структура
Функция СведенияОСотруднике(Период, Организация, ФизЛицо) Экспорт 
	Возврат РегистрыСведений.Сотрудники.ПолучитьПоследнее(Период, Новый Структура("Организация, ФизЛицо", Организация, ФизЛицо));
КонецФункции // СведенияОСотруднике()

// Нужно использовать функцию ПроведениеРасчетовПоЗарплатеСервер.СтатусСотрудникаКакНалогоплательщика 
//Функция - получает статус сотрудника
//
// Возвращаемое значение:
//  Структура
Функция СтатусСотрудникаКакНалогоплательщика(Период, Организация, ФизЛицо) Экспорт 
	Возврат РегистрыСведений.СтатусыСотрудников.ПолучитьПоследнее(Период, Новый Структура("Организация, ФизЛицо", Организация, ФизЛицо));
КонецФункции // СтатусСотрудникаКакНалогоплательщика()

// Нужно использовать функцию ПроведениеРасчетовПоЗарплатеСервер.ДанныеСчетаУчетаЗП 
//Функция - получает статус сотрудника
//
// Возвращаемое значение:
//  Структура
Функция ДанныеСчетаУчетаЗП(СтруктураОтбора) Экспорт 

	// Выбирается значение по всем параметрам
	// по убыванию от максимально подходящего
	РезультатСчетаУчетаЗП = Новый Структура("СчетУчетаЗатрат, СтатьяЗатрат", 
		ПланыСчетов.Хозрасчетный.ПустаяСсылка(), 
		Справочники.СтатьиЗатратИДоходов.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетаУчетаЗП.Подразделение,
		|	СчетаУчетаЗП.ВидРасчетаНачисления,
		|	СчетаУчетаЗП.ВидРасчетаУдержания,
		|	СчетаУчетаЗП.СчетУчетаЗатрат,
		|	СчетаУчетаЗП.СтатьяЗатрат
		|ПОМЕСТИТЬ ВременнаяТаблицаСчетаУчетаЗП
		|ИЗ
		|	РегистрСведений.СчетаУчетаЗП КАК СчетаУчетаЗП
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетаУчетаЗП.СчетУчетаЗатрат,
		|	СчетаУчетаЗП.СтатьяЗатрат
		|ПОМЕСТИТЬ ВременнаяТаблицаСчетаУчетаЗПОтбор
		|ИЗ
		|	ВременнаяТаблицаСчетаУчетаЗП КАК СчетаУчетаЗП
		|ГДЕ
		|	СчетаУчетаЗП.Подразделение = &Подразделение
		|	И СчетаУчетаЗП.ВидРасчетаНачисления = &ВидРасчетаНачисления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетаУчетаЗП.СчетУчетаЗатрат,
		|	СчетаУчетаЗП.СтатьяЗатрат
		|ИЗ
		|	ВременнаяТаблицаСчетаУчетаЗП КАК СчетаУчетаЗП
		|ГДЕ
		|	СчетаУчетаЗП.Подразделение = &Подразделение
		|	И СчетаУчетаЗП.ВидРасчетаУдержания = &ВидРасчетаУдержания
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетаУчетаЗП.СчетУчетаЗатрат,
		|	СчетаУчетаЗП.СтатьяЗатрат
		|ИЗ
		|	ВременнаяТаблицаСчетаУчетаЗП КАК СчетаУчетаЗП
		|ГДЕ
		|	СчетаУчетаЗП.Подразделение = &Подразделение
		|	И СчетаУчетаЗП.ВидРасчетаНачисления = ЗНАЧЕНИЕ(ПланВидовРасчета.ВидыНачислений.ПустаяСсылка)
		|	И СчетаУчетаЗП.ВидРасчетаУдержания = ЗНАЧЕНИЕ(ПланВидовРасчета.ВидыУдержаний.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВременнаяТаблицаСчетаУчетаЗПОтбор.СчетУчетаЗатрат,
		|	ВременнаяТаблицаСчетаУчетаЗПОтбор.СтатьяЗатрат
		|ИЗ
		|	ВременнаяТаблицаСчетаУчетаЗПОтбор КАК ВременнаяТаблицаСчетаУчетаЗПОтбор";
	Запрос.УстановитьПараметр("Подразделение", 			СтруктураОтбора.Подразделение);
	Запрос.УстановитьПараметр("ВидРасчетаНачисления", 	СтруктураОтбора.ВидРасчетаНачисления);
	Запрос.УстановитьПараметр("ВидРасчетаУдержания", 	СтруктураОтбора.ВидРасчетаУдержания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(РезультатСчетаУчетаЗП, ВыборкаДетальныеЗаписи);
	КонецЕсли;;
	
	Возврат РезультатСчетаУчетаЗП;	
КонецФункции // ПараметрыОтраженияВУчете()

// Нужно использовать функцию ПроведениеРасчетовПоЗарплатеСервер.РазмерыБольничныхЛистов 
//Функция - получает размеры для расчета больничных личтов в зависимости от стажа
//
// Возвращаемое значение:
//  Структура
Функция РазмерыБольничныхЛистов(КоличествоЛетСтажа) Экспорт 

	Размеры = Новый Структура("НижняяГраница, ДнейОрганизации, Процент, ПроцентБеременность, РазмерЗаСчетСФ, РазмерБеременностьЗаСчетСФ",0,0,0,0,0,0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РазмерыБольничныхЛистов.НижняяГраница КАК НижняяГраница,
		|	РазмерыБольничныхЛистов.ДнейОрганизации,
		|	РазмерыБольничныхЛистов.Процент,
		|	РазмерыБольничныхЛистов.ПроцентБеременность,
		|	РазмерыБольничныхЛистов.РазмерЗаСчетСФ,
		|	РазмерыБольничныхЛистов.РазмерБеременностьЗаСчетСФ
		|ИЗ
		|	РегистрСведений.РазмерыБольничныхЛистов КАК РазмерыБольничныхЛистов
		|ГДЕ
		|	РазмерыБольничныхЛистов.НижняяГраница <= &КоличествоЛетСтажа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НижняяГраница";
	Запрос.УстановитьПараметр("КоличествоЛетСтажа", КоличествоЛетСтажа);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Размеры, ВыборкаДетальныеЗаписи);	
	КонецЕсли;
	
	Возврат Размеры;	
КонецФункции // РазмерыБольничныхЛистов()
