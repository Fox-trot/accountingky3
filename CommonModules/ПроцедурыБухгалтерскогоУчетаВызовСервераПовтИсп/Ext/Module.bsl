////////////////////////////////////////////////////////////////////////////////
// ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп:
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьСвойстваСчета(Знач Счет) Экспорт

	ПланСчетов = "Хозрасчетный";
		
	ДанныеСчета = Новый Структура;
	ДанныеСчета.Вставить("Ссылка"                         , ПланыСчетов[ПланСчетов].ПустаяСсылка());
	ДанныеСчета.Вставить("Наименование"                   , "");
	ДанныеСчета.Вставить("Код"                            , "");
	ДанныеСчета.Вставить("Родитель"                       , ПланыСчетов[ПланСчетов].ПустаяСсылка());
	ДанныеСчета.Вставить("Вид"                            , Неопределено);
	ДанныеСчета.Вставить("Забалансовый"                   , Ложь);
	ДанныеСчета.Вставить("ЗапретитьИспользоватьВПроводках", Ложь);
	ДанныеСчета.Вставить("Валютный"                   , Ложь);
	ДанныеСчета.Вставить("Количественный"                 , Ложь);
	ДанныеСчета.Вставить("КоличествоСубконто"             , 0);
	
	МаксКоличествоСубконто	= ПолучитьМаксКоличествоСубконто(ПланСчетов);
	
	Для ИндексСубконто = 1 По МаксКоличествоСубконто Цикл
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто,                   Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Наименование",  Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения",   Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Суммовой",      Ложь);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТолькоОбороты", Ложь);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат ДанныеСчета;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", Счет);
	
	Запрос.Текст = 
	"ВЫБРАТЬ                                                    
	|	ПланСчетов.Ссылка,
	|	ПланСчетов.Родитель,
	|	ПланСчетов.Код,
	|	ПланСчетов.Наименование,
	|	ПланСчетов.Вид,
	|	ПланСчетов.Забалансовый,
	|	ПланСчетов.ЗапретитьИспользоватьВПроводках,
	|	ПланСчетов.Валютный,
	|	ПланСчетов.Количественный
	|ИЗ
	|	ПланСчетов." + ПланСчетов + " КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.Ссылка = &Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыСубконто.НомерСтроки КАК НомерСтроки,
	|	ВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	ВидыСубконто.ВидСубконто.Наименование КАК Наименование,
	|	ВидыСубконто.ВидСубконто.ТипЗначения КАК ТипЗначения,
	|	ВидыСубконто.ТолькоОбороты КАК ТолькоОбороты,
	|	ВидыСубконто.Суммовой КАК Суммовой
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто
	|ГДЕ
	|	ВидыСубконто.Ссылка = &Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыСубконто.НомерСтроки";   								
	
	МассивРезультатов	= Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеСчета, Выборка);
	КонецЕсли;
		
	ВыборкаВидыСубконто	= МассивРезультатов[1].Выбрать();
		
	ДанныеСчета.КоличествоСубконто	= ВыборкаВидыСубконто.Количество();
		
	ИндексСубконто	= 0;
		
	Пока ВыборкаВидыСубконто.Следующий() Цикл
		
		ИндексСубконто	= ИндексСубконто + 1;
		
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто,                   ВыборкаВидыСубконто.ВидСубконто);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Наименование",  ВыборкаВидыСубконто.Наименование);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения",   ВыборкаВидыСубконто.ТипЗначения);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Суммовой",      ВыборкаВидыСубконто.Суммовой);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТолькоОбороты", ВыборкаВидыСубконто.ТолькоОбороты);
		
	КонецЦикла;
	
	Возврат ДанныеСчета;
	
КонецФункции

Функция ПолучитьМаксКоличествоСубконто(ПланСчетов) Экспорт

	Возврат Метаданные.ПланыСчетов[ПланСчетов].МаксКоличествоСубконто;

КонецФункции

Функция СчетВИерархии(Счет, Эталон) Экспорт

	Если ЗначениеЗаполнено(Счет) Тогда
		Возврат Счет = Эталон ИЛИ Счет.ПринадлежитЭлементу(Эталон);
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция СчетаВИерархии(СчетГруппа) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СчетГруппа) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетГруппа", СчетГруппа);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетГруппа)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");

КонецФункции

Функция НаСчетеВедетсяУчетПоКонтрагентам(Счет) Экспорт

	СвойстваСчета = ПолучитьСвойстваСчета(Счет);

	УчетПоКонтрагентам = СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты
		ИЛИ СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;

	Возврат УчетПоКонтрагентам;

КонецФункции 

Функция НаСчетеВедетсяУчетПоДоговорам(Счет) Экспорт

	СвойстваСчета = ПолучитьСвойстваСчета(Счет);

	УчетПоДоговорам = СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры
		ИЛИ СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;

	Возврат УчетПоДоговорам;

КонецФункции

Функция ВедетсяУчетПоСкладам(Счет) Экспорт

	СвойстваСчета = ПолучитьСвойстваСчета(Счет);

	УчетПоСкладам = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;

	Возврат УчетПоСкладам;

КонецФункции 

Функция ВедетсяСуммовойУчетПоСкладам(Счет) Экспорт

	СвойстваСчета      = ПолучитьСвойстваСчета(Счет);

	Если СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
		Возврат СвойстваСчета.ВидСубконто1Суммовой;
	ИначеЕсли СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
		Возврат СвойстваСчета.ВидСубконто2Суммовой;
	ИначеЕсли СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
		Возврат СвойстваСчета.ВидСубконто3Суммовой;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция НаСчетеВедетсяПартионныйУчет(Счет) Экспорт

	СвойстваСчета  = ПолучитьСвойстваСчета(Счет);

	ПартионныйУчет = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;

	Возврат ПартионныйУчет;

КонецФункции 

Функция НаСчетеВедетсяУчетНоменклатуры(Счет) Экспорт
	
	Если ЗначениеЗаполнено(Счет) Тогда
		
		СвойстваСчета  = ПолучитьСвойстваСчета(Счет);

		УчетПоНоменклатуре = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура
			ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура
			ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
			
	Иначе
			
		УчетПоНоменклатуре = Истина;
		
	КонецЕсли;
		
	Возврат УчетПоНоменклатуре;
	
КонецФункции

Функция НаСчетеВедетсяУчетПоПодразделениям(Счет) Экспорт
	
	Если ЗначениеЗаполнено(Счет) Тогда
		
		СвойстваСчета  = ПолучитьСвойстваСчета(Счет);

		УчетПоПодразделениям = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения
			ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения
			ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения;
			
	Иначе
			
		УчетПоПодразделениям = Истина;
		
	КонецЕсли;
		
	Возврат УчетПоПодразделениям;
	
КонецФункции

Функция НаСчетеВедетсяУчетПоСотрудникамОрганизаций(Счет) Экспорт
	
	СвойстваСчета = ПолучитьСвойстваСчета(Счет);

	УчетПоСотрудникамОрганизаций = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СотрудникиОрганизаций
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СотрудникиОрганизаций
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СотрудникиОрганизаций;

	Возврат УчетПоСотрудникамОрганизаций;
	
КонецФункции

Функция ОсобыйПорядокПереоценкиСчета(Счет) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаУчетаСОсобымПорядкомПереоценки.СпособПризнанияКурсовойРазницы
	|ИЗ
	|	РегистрСведений.СчетаУчетаСОсобымПорядкомПереоценки КАК СчетаУчетаСОсобымПорядкомПереоценки
	|ГДЕ
	|	СчетаУчетаСОсобымПорядкомПереоценки.СчетУчета = &Счет";
	
	Запрос.УстановитьПараметр("Счет", Счет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Результат = Выборка.СпособПризнанияКурсовойРазницы;
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// Функция проверяет счет на его принадлежность к блоку производственных счетов
// 
// Параметры:
//  Счет - ПланСчетовСсылка.Хозрасчетный - счет, который необходимо проверить
//  СписокСчетовПроизводства - кешируемый перечень производственных счетов
//
Функция СчетЯвляетсяПроизводственным(Счет, СписокСчетовПроизводства = Неопределено) Экспорт
	
	Результат  = Ложь;
	Если СписокСчетовПроизводства = Неопределено Тогда
		// Если вызвать функцию ПолучитьСписокСчетовПроизводственногоУчета() напрямую, то результат функции не кэшируется
		СписокСчетовПроизводства = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСписокСчетовПроизводственногоУчета();
	КонецЕсли;
	
	Если СписокСчетовПроизводства.Найти(Счет) <> Неопределено Тогда		
		Результат  = Истина;			
	КонецЕсли;	 
	
	Возврат Результат
	
КонецФункции

// Функция проверяет счет на его принадлежность к блоку производственных счетов
// 
// Параметры:
//  Счет - ПланСчетовСсылка.Налоговый - счет, который необходимо проверить
//  СписокСчетовПроизводства - кешируемый перечень производственных счетов
//
Функция СчетЯвляетсяПроизводственнымНУ(Счет, СписокСчетовПроизводства = Неопределено) Экспорт
	
	Результат  = Ложь;
	Если СписокСчетовПроизводства = Неопределено Тогда
		// Если вызвать функцию ПолучитьСписокСчетовПроизводственногоУчетаНУ() напрямую, то результат функции не кэшируется
		СписокСчетовПроизводства = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСписокСчетовПроизводственногоУчетаНУ();
	КонецЕсли;
	
	Если СписокСчетовПроизводства.Найти(Счет) <> Неопределено Тогда		
		Результат  = Истина;			
	КонецЕсли;	 
	
	Возврат Результат
	
КонецФункции

// Функция проверяет счет на его принадлежность к блоку счетов учета внеоборотных активов
// 
// Параметры:
//  Счет - ПланСчетовСсылка.Налоговый - счет, который необходимо проверить
//  СписокСчетовВА - Массив - список счетов учета внеоборотных активов (необязательный)
//
Функция СчетЯвляетсяВАНУ(Счет, СписокСчетовВА = Неопределено) Экспорт
	
	Результат = Ложь;
	Если СписокСчетовВА = Неопределено Тогда
		// Если вызвать функцию ПолучитьСписокСчетовВАУчетаНУ() напрямую, то результат функции не кэшируется
		СписокСчетовВА = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСписокСчетовВАУчетаНУ();
	КонецЕсли;
	
	Если СписокСчетовВА.Найти(Счет) <> Неопределено Тогда		
		Результат = Истина;			
	КонецЕсли;	 
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает массив счетов, которые необходимо регламентно переоценивать.
// 
// Параметры:
//	РегламентнаяОперация - Булево - признак переоценки счетов в рамках регламентной операции
//
Функция СчетаПодлежащиеПереоценке(РегламентнаяОперация = Ложь) Экспорт
	
	// Валютные счета, подлежащие переоценке
	// Все балансовые валютные счета
	// Счета, переоцениваемые в особом порядке, исключаются
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|	И НЕ Хозрасчетный.Забалансовый
	|	И НЕ Хозрасчетный.Ссылка В
	|				(ВЫБРАТЬ
	|					СчетаУчетаСОсобымПорядкомПереоценки.СчетУчета
	|				ИЗ
	|					РегистрСведений.СчетаУчетаСОсобымПорядкомПереоценки КАК СчетаУчетаСОсобымПорядкомПереоценки
	|				ГДЕ
	|					НЕ СчетаУчетаСОсобымПорядкомПереоценки.СпособПризнанияКурсовойРазницы = ЗНАЧЕНИЕ(Перечисление.СпособыПризнанияКурсовойРазницы.ПоОперациям))";
	
	Если РегламентнаяОперация Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
												"ЗНАЧЕНИЕ(Перечисление.СпособыПризнанияКурсовойРазницы.ПоОперациям)",
												"ЗНАЧЕНИЕ(Перечисление.СпособыПризнанияКурсовойРазницы.Регламентно)");	
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");

КонецФункции

// Формируется список счетов учета номенклатуры
//
// Параметры:
//  ПрефиксУчета - Строка - префикс учета, для которого необходимо получить список счетов
//
Функция ПолучитьСписокСчетовУчетаТМЗ(ПрефиксУчета = "БУ") Экспорт
	
	Если ПрефиксУчета = "НУ" Тогда
		ИмяПланаСчетов = "Налоговый";
	Иначе 		
		ИмяПланаСчетов = "Хозрасчетный";
	КонецЕсли;
	
	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].СырьеИМатериалы);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ГотоваяПродукция);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].Товары);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ПроизводствоИзДавальческогоСырья);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ПрочиеЗапасы);		
	
	Возврат СписокСчетов;
	
КонецФункции
           
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьСписокСчетовПроизводственногоУчета() Экспорт
	                               	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Хозрасчетный.Ссылка КАК Счет
	                      |ИЗ
	                      |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	                      |ГДЕ
	                      |	(Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство_),
	                      |								ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПолуфабрикатыСобственногоПроизводства_),
	                      |								ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВспомогательныеПроизводства_),
	                      |								ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НакладныеРасходы_)))");
						  
	Результат = Запрос.Выполнить();					  
	Если Не Результат.Пустой()Тогда
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Счет");
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
							  
КонецФункции

Функция ПолучитьСписокСчетовПроизводственногоУчетаНУ() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Налоговый.Ссылка КАК Счет
	                      |ИЗ
	                      |	ПланСчетов.Налоговый КАК Налоговый
	                      |ГДЕ
	                      |	(Налоговый.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ОсновноеПроизводство_),
	                      |								  ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства),
	                      |								  ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВспомогательныеПроизводства),
	                      |								  ЗНАЧЕНИЕ(ПланСчетов.Налоговый.НакладныеРасходы)))");
						  
	Результат = Запрос.Выполнить();					  
	Если Не Результат.Пустой()Тогда
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Счет");
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
							  
КонецФункции

Функция ПолучитьСписокСчетовВАУчетаНУ() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Налоговый.Ссылка КАК Счет
	                      |ИЗ
	                      |	ПланСчетов.Налоговый КАК Налоговый
	                      |ГДЕ
	                      |	(Налоговый.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВАПодлежащиеАмортизации), 
						  |								  ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВАНеПодлежащиеАмортизации), 
						  |								  ЗНАЧЕНИЕ(ПланСчетов.Налоговый.НезавершенноеСтроительство), 
						  |								  ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПреренцииДоВводаВЭксплуатацию)))");
						  
	Результат = Запрос.Выполнить();					  
	Если Не Результат.Пустой()Тогда
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Счет");
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
							  
КонецФункции

Функция ПолучитьСписокСчетовУчетаВА() Экспорт
	
	Счета = Новый СписокЗначений();
	Счета.Добавить("ДолгосрочныеАктивыДляПродажи_");
	Счета.Добавить("ДолгосрочныеАктивыДляПродажи");
	Счета.Добавить("ГруппаНаВыбытиеДляПродажи");

	Счета.Добавить("ИнвестицииВНедвижимость_");
	Счета.Добавить("ИнвестицииВНедвижимость");
	Счета.Добавить("АмортизацияИнвестицийВНедвижимость");
	Счета.Добавить("УбытокОтОбесцененияИнвестицийВНедвижимость");
	Счета.Добавить("ОсновныеСредства_");
	Счета.Добавить("ОсновныеСредства");
	Счета.Добавить("АмортизацияОсновныхСредств");
	Счета.Добавить("УбытокОтОбесцененияОсновныхСредств");
	
	Возврат Счета;
	
КонецФункции	
	
