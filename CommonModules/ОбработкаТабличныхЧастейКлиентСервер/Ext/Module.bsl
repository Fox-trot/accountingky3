
// Рассчитывает сумму в строке табличной части документа при поступлении
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа
//
Процедура РассчитатьСуммуСтрокиТабличнойЧастиПоступление(
	СтрокаТабличнойЧасти, 
	Период,
	СуммаВключаетНалоги = Ложь,
	СтавкаНДС = Неопределено, 
	СтавкаНСП = Неопределено, 
	БезналичныйРасчет = Ложь, 
	СуммаАкциза = 0, 
	Знач КурсДокумента = 1, 
	Знач КратностьДокумента = 1) Экспорт
	
	ЗначениеСтавкиНДС = УчетНДСВызовСервера.ПолучитьСтавкуНДС(Период, СтавкаНДС);
	ЗначениеСтавкиНСП = ?(БезналичныйРасчет, 0 ,УчетНДСВызовСервера.ПолучитьСтавкуНСП(Период, СтавкаНДС, СтавкаНСП));
	
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента);
	Если СуммаВключаетНалоги Тогда 
		СтрокаТабличнойЧасти.Сумма = (СтрокаТабличнойЧасти.Всего * КурсДокумента / КратностьДокумента) + СуммаАкциза;	
	Иначе 
		СтрокаТабличнойЧасти.Сумма = ((СтрокаТабличнойЧасти.Всего * КурсДокумента / КратностьДокумента) + СуммаАкциза) * 100 /	(100 + ЗначениеСтавкиНДС + ЗначениеСтавкиНСП);
	КонецЕсли;	
	
КонецПроцедуры

// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа.
//
Процедура РассчитатьСуммуНДССтрокиТабличнойЧастиПоступление(
	СтрокаТабличнойЧасти, 
	Период,
	СуммаВключаетНалоги = Ложь,
	СтавкаНДС = Неопределено, 
	СтавкаНСП = Неопределено, 
	БезналичныйРасчет = Ложь, 
	СуммаАкциза = 0,
	Знач КурсДокумента = 1, 
	Знач КратностьДокумента = 1) Экспорт
	
	ЗначениеСтавкиНДС = УчетНДСВызовСервера.ПолучитьСтавкуНДС(Период, СтавкаНДС);
	ЗначениеСтавкиНСП = ?(БезналичныйРасчет, 0 ,УчетНДСВызовСервера.ПолучитьСтавкуНСП(Период, СтавкаНДС, СтавкаНСП));
	
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента); 
	СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДСПоступления(
		((СтрокаТабличнойЧасти.Всего * КурсДокумента / КратностьДокумента) + СуммаАкциза),
		СуммаВключаетНалоги,
		ЗначениеСтавкиНДС,
		ЗначениеСтавкиНСП);
		
КонецПроцедуры

// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа.
//
Процедура РассчитатьСуммуНСПСтрокиТабличнойЧастиПоступление(
	СтрокаТабличнойЧасти, 
	СуммаАкциза = 0,
	Знач КурсДокумента = 1, 
	Знач КратностьДокумента = 1) Экспорт
	
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента); 
	СтрокаТабличнойЧасти.СуммаНСП = ((СтрокаТабличнойЧасти.Всего * КурсДокумента / КратностьДокумента) + СуммаАкциза) - СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНДС;
КонецПроцедуры

// Рассчитывает сумму налогов в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти 	- Структура или СтрокаТабличнойЧасти - Строка табличной части документа.
//  Период					- Дата - Период расчета
//  СуммаВключаетНалоги	 	- Булево - Признак расчета суммы НДС и НСП
//  СтавкаНДС			 	- СправочникСсылка.СтавкиНДС - Ссылка на справочник ставки НДС для расчета
//  СтавкаНСП			 	- СправочникСсылка.СтавкиНСП - Ссылка на справочник ставки НСП для расчета
//  БезналичныйРасчет	 	- Булево - Признак безналичного расчета
//
Процедура РассчитатьСуммыНалоговСтрокиТабличнойЧастиПоступление(
	СтрокаТабличнойЧасти, 
	Период,
	СуммаВключаетНалоги = Ложь,
	СтавкаНДС = Неопределено, 
	СтавкаНСП = Неопределено, 
	БезналичныйРасчет = Ложь, 
	СуммаАкциза = 0,
	Знач КурсДокумента = 1, 
	Знач КратностьДокумента = 1) Экспорт

	ЗначениеСтавкиНДС = УчетНДСВызовСервера.ПолучитьСтавкуНДС(Период, СтавкаНДС);
	ЗначениеСтавкиНСП = ?(БезналичныйРасчет, 0, УчетНДСВызовСервера.ПолучитьСтавкуНСП(Период, СтавкаНДС, СтавкаНСП));
	
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента); 
	СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДСПоступления(
		((СтрокаТабличнойЧасти.Всего * КурсДокумента / КратностьДокумента) + СуммаАкциза),
		СуммаВключаетНалоги,
		ЗначениеСтавкиНДС,
		ЗначениеСтавкиНСП);
		
	Если БезналичныйРасчет Тогда
		СтрокаТабличнойЧасти.СуммаНСП = 0;
	Иначе
		Если СуммаВключаетНалоги Тогда
			СтрокаТабличнойЧасти.СуммаНСП = ((СтрокаТабличнойЧасти.Всего * КурсДокумента / КратностьДокумента) + СуммаАкциза) * ЗначениеСтавкиНСП / 100;
		Иначе
			СтрокаТабличнойЧасти.СуммаНСП = ((СтрокаТабличнойЧасти.Всего * КурсДокумента / КратностьДокумента) + СуммаАкциза) - СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНДС;	 
		КонецЕсли;
	КонецЕсли;	
		
КонецПроцедуры

// Выполняем пересчет налогов табличной части документа после изменений в форме
//  "Цены и валюта".
//
// Параметры:
//  Объект					- Объект - Объект пересчета
//  Период					- Дата - Период пересчета
//  ИмяТабличнойЧасти 		- Строка - Имя табличной части, в которой нужно переститать
//  СуммаВключаетНалоги	 	- Булево - Признак расчета суммы НДС и НСП
//  СтавкаНДС			 	- СправочникСсылка.СтавкиНДС - Ссылка на справочник ставки НДС для пересчета
//  СтавкаНСП			 	- СправочникСсылка.СтавкиНСП - Ссылка на справочник ставки НСП для пересчета
//  БезналичныйРасчет	 	- Булево - Признак безналичного расчета
//
Процедура ПересчитатьНалогиТабличнойЧастиПоступление(
	Объект, 
	Период, 
	ИмяТабличнойЧасти, 
	СуммаВключаетНалоги = Ложь,
	СтавкаНДС = Неопределено, 
	СтавкаНСП = Неопределено, 
	БезналичныйРасчет = Ложь,
	Знач КурсДокумента = 1, 
	Знач КратностьДокумента = 1) Экспорт
	
	ЗначениеСтавкиНДС = УчетНДСВызовСервера.ПолучитьСтавкуНДС(Период, СтавкаНДС);
	ЗначениеСтавкиНСП = ?(БезналичныйРасчет, 0, УчетНДСВызовСервера.ПолучитьСтавкуНСП(Период, СтавкаНДС, СтавкаНСП));
	
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента); 
	Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
		СуммаАкциза = 0;
		Если СтрокаТабличнойЧасти.Свойство("СуммаАкциза") Тогда
			СуммаАкциза = СтрокаТабличнойЧасти.СуммаАкциза;
		КонецЕсли;	
			
		// СуммаНДС.
		СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДСПоступления(
			(СтрокаТабличнойЧасти.Всего * КурсДокумента / КратностьДокумента) + СуммаАкциза,
			СуммаВключаетНалоги,
			ЗначениеСтавкиНДС,
			ЗначениеСтавкиНСП);
			
		// Сумма	
		Если СуммаВключаетНалоги Тогда 
			СтрокаТабличнойЧасти.Сумма = ((СтрокаТабличнойЧасти.Всего * КурсДокумента / КратностьДокумента) + СуммаАкциза) * 100 /	(100 + ЗначениеСтавкиНДС + ЗначениеСтавкиНСП);
		Иначе 
			СтрокаТабличнойЧасти.Сумма = (СтрокаТабличнойЧасти.Всего * КурсДокумента / КратностьДокумента) + СуммаАкциза;
		КонецЕсли;
		
		// СуммаНСП.
		Если БезналичныйРасчет Тогда
			СтрокаТабличнойЧасти.СуммаНСП = 0;
		Иначе
			Если СуммаВключаетНалоги Тогда
				СтрокаТабличнойЧасти.СуммаНСП = ((СтрокаТабличнойЧасти.Всего * КурсДокумента / КратностьДокумента) + СуммаАкциза) - СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНДС;
			Иначе
				СтрокаТабличнойЧасти.СуммаНСП = ((СтрокаТабличнойЧасти.Всего * КурсДокумента / КратностьДокумента) + СуммаАкциза) * ЗначениеСтавкиНСП / 100; 
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;		

КонецПроцедуры 

// Рассчитывает количество в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа
//
Процедура РассчитатьКоличествоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти) Экспорт

	СтрокаТабличнойЧасти.Количество = Окр(СтрокаТабличнойЧасти.КоличествоМест * СтрокаТабличнойЧасти.Емкость, 3);
	
КонецПроцедуры

// Рассчитывает сумму в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа
//
Процедура РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ЗначениеПустогоКоличества = 0, СуммаСкидкиПоСтроке = Ложь) Экспорт

	Если СтрокаТабличнойЧасти.Свойство("Цена") Тогда 
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * ?(СтрокаТабличнойЧасти.Количество = 0, ЗначениеПустогоКоличества, СтрокаТабличнойЧасти.Количество);
	КонецЕсли;	
	
	Если СуммаСкидкиПоСтроке Тогда 
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаСкидки;
	ИначеЕсли СтрокаТабличнойЧасти.Свойство("ПроцентСкидкиНаценки") Тогда
		Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
			СтрокаТабличнойЧасти.СуммаСкидки = СтрокаТабличнойЧасти.Сумма;
			СтрокаТабличнойЧасти.Сумма = 0;
		ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 Тогда
			СтрокаТабличнойЧасти.СуммаСкидки = СтрокаТабличнойЧасти.Сумма * (СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100); 
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаСкидки;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

// Рассчитывает цену в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа
//
Процедура РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ЗначениеПустогоКоличества = 0) Экспорт

	РасчетноеКоличество = ?(СтрокаТабличнойЧасти.Количество = 0, ЗначениеПустогоКоличества, СтрокаТабличнойЧасти.Количество);
	
	Если РасчетноеКоличество = 0 Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / РасчетноеКоличество;
	КонецЕсли; 

КонецПроцедуры

// Рассчитывает сумму налогов в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти 	- Структура или СтрокаТабличнойЧасти - Строка табличной части документа.
//  Период					- Дата - Период расчета
//  СуммаВключаетНалоги	 	- Булево - Признак расчета суммы НДС и НСП
//  СтавкаНДС			 	- СправочникСсылка.СтавкиНДС - Ссылка на справочник ставки НДС для расчета
//  СтавкаНСП			 	- СправочникСсылка.СтавкиНСП - Ссылка на справочник ставки НСП для расчета
//  БезналичныйРасчет	 	- Булево - Признак безналичного расчета
//
Процедура РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Период, СуммаВключаетНалоги = Ложь, СтавкаНДС = Неопределено, СтавкаНСП = Неопределено, БезналичныйРасчет = Ложь) Экспорт

	Если ТипЗнч(СтрокаТабличнойЧасти) = Тип("Структура") Тогда
		Если СтрокаТабличнойЧасти.Свойство("Сумма") 
			И СтрокаТабличнойЧасти.Свойство("СтавкаНДС")
			И СтрокаТабличнойЧасти.Свойство("СтавкаНСП") Тогда
			
			ЗначениеСтавкиНДС = УчетНДСВызовСервера.ПолучитьСтавкуНДС(Период, СтрокаТабличнойЧасти.СтавкаНДС);
			ЗначениеСтавкиНСП = ?(БезналичныйРасчет, 0, УчетНДСВызовСервера.ПолучитьСтавкуНСП(Период, СтрокаТабличнойЧасти.СтавкаНДС, СтрокаТабличнойЧасти.СтавкаНСП));
			
			СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
												СтрокаТабличнойЧасти.Сумма,
												СуммаВключаетНалоги,
												ЗначениеСтавкиНДС,
												ЗначениеСтавкиНСП);
												
			СтрокаТабличнойЧасти.СуммаНСП = УчетНДСКлиентСервер.РассчитатьСуммуНСП(
												СтрокаТабличнойЧасти.Сумма,
												СуммаВключаетНалоги,
												ЗначениеСтавкиНДС,
												ЗначениеСтавкиНСП);
		КонецЕсли;
		
	Иначе // Строка табличной части
		
		ЗначениеСтавкиНДС = УчетНДСВызовСервера.ПолучитьСтавкуНДС(Период, СтавкаНДС);
		ЗначениеСтавкиНСП = ?(БезналичныйРасчет, 0, УчетНДСВызовСервера.ПолучитьСтавкуНСП(Период, СтавкаНДС, СтавкаНСП));

		СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
											СтрокаТабличнойЧасти.Сумма,
											СуммаВключаетНалоги,
											ЗначениеСтавкиНДС,
											ЗначениеСтавкиНСП);
											
		СтрокаТабличнойЧасти.СуммаНСП = УчетНДСКлиентСервер.РассчитатьСуммуНСП(
											СтрокаТабличнойЧасти.Сумма,
											СуммаВключаетНалоги,
											ЗначениеСтавкиНДС,
											ЗначениеСтавкиНСП);
	КонецЕсли;

	Если СтрокаТабличнойЧасти.Свойство("Всего") Тогда
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);
	КонецЕсли;	
КонецПроцедуры

// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа.
//
Процедура РассчитатьСуммуНДССтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Период, СуммаВключаетНалоги = Ложь, СтавкаНДС = Неопределено, СтавкаНСП = Неопределено, БезналичныйРасчет = Ложь) Экспорт

	Если ТипЗнч(СтрокаТабличнойЧасти)=Тип("Структура") Тогда
		Если СтрокаТабличнойЧасти.Свойство("Сумма") 
			И СтрокаТабличнойЧасти.Свойство("СтавкаНДС")
			И СтрокаТабличнойЧасти.Свойство("СтавкаНСП") Тогда
			СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
				СтрокаТабличнойЧасти.Сумма,
				СуммаВключаетНалоги,
				УчетНДСВызовСервера.ПолучитьСтавкуНДС(Период, СтрокаТабличнойЧасти.СтавкаНДС),
				?(БезналичныйРасчет, 0, УчетНДСВызовСервера.ПолучитьСтавкуНСП(Период, СтрокаТабличнойЧасти.СтавкаНДС, СтрокаТабличнойЧасти.СтавкаНСП)));
		КонецЕсли;
	Иначе // Строка табличной части
		СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТабличнойЧасти.Сумма,
			СуммаВключаетНалоги,
			УчетНДСВызовСервера.ПолучитьСтавкуНДС(Период, СтавкаНДС),
			?(БезналичныйРасчет, 0, УчетНДСВызовСервера.ПолучитьСтавкуНСП(Период, СтавкаНДС, СтавкаНСП)));
	КонецЕсли;
		
	Если СтрокаТабличнойЧасти.Свойство("Всего") Тогда
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);
	КонецЕсли;	
КонецПроцедуры

// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа.
//
Процедура РассчитатьСуммуНСПСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Период, СуммаВключаетНалоги = Ложь, СтавкаНДС = Неопределено, СтавкаНСП = Неопределено, БезналичныйРасчет = Ложь) Экспорт

	Если ТипЗнч(СтрокаТабличнойЧасти)=Тип("Структура") Тогда
		Если СтрокаТабличнойЧасти.Свойство("Сумма") 
			И СтрокаТабличнойЧасти.Свойство("СтавкаНДС")
			И СтрокаТабличнойЧасти.Свойство("СтавкаНСП") Тогда
			СтрокаТабличнойЧасти.СуммаНСП = УчетНДСКлиентСервер.РассчитатьСуммуНСП(
				СтрокаТабличнойЧасти.Сумма,
				СуммаВключаетНалоги,
				УчетНДСВызовСервера.ПолучитьСтавкуНДС(Период, СтрокаТабличнойЧасти.СтавкаНДС),
				?(БезналичныйРасчет, 0, УчетНДСВызовСервера.ПолучитьСтавкуНСП(Период, СтрокаТабличнойЧасти.СтавкаНДС, СтрокаТабличнойЧасти.СтавкаНСП)));
		КонецЕсли;
	Иначе // Строка табличной части
		СтрокаТабличнойЧасти.СуммаНСП = УчетНДСКлиентСервер.РассчитатьСуммуНСП(
			СтрокаТабличнойЧасти.Сумма,
			СуммаВключаетНалоги,
			УчетНДСВызовСервера.ПолучитьСтавкуНДС(Период, СтавкаНДС),
			?(БезналичныйРасчет, 0, УчетНДСВызовСервера.ПолучитьСтавкуНСП(Период, СтавкаНДС, СтавкаНСП)));
	КонецЕсли;

	Если СтрокаТабличнойЧасти.Свойство("Всего") Тогда
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);
	КонецЕсли;	
КонецПроцедуры

// Процедура выполняет стандартные действия по расчету плановой суммы
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//
Процедура ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти, ЗначениеПустогоКоличества = 0) Экспорт

	СтрокаТабличнойЧасти.СуммаПлановая = 
		?(СтрокаТабличнойЧасти.Количество = 0, ЗначениеПустогоКоличества, СтрокаТабличнойЧасти.Количество)
		* СтрокаТабличнойЧасти.ПлановаяСтоимость;

КонецПроцедуры

// Выполняем пересчет цены по валюте табличной части документа после изменений в форме
//  "Цены и валюта".
//
// Параметры:
//  Объект				- Объект - Объект пересчета
//  Период				- Дата - Период пересчета
//  СтруктураКурсыПред - Структура - Параметры курса.
//       * Курс      - Число - Курс валюты на указанную дату.
//       * Кратность - Число - Кратность валюты на указанную дату.
//       * Валюта    - СправочникСсылка.Валюты - Ссылка валюты.
// 	СтруктураКурсы - Структура - Параметры курса.
//       * Курс      - Число - Курс валюты на указанную дату.
//       * Кратность - Число - Кратность валюты на указанную дату.
//       * Валюта    - СправочникСсылка.Валюты - Ссылка валюты.
//  ИмяТабличнойЧасти 	- Строка - Имя табличной части, в которой нужно переститать
//
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, Период, СтруктураКурсыПред, СтруктураКурсы, ИмяТабличнойЧасти) Экспорт
	
	Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
		// Цена.
		Если СтрокаТабличнойЧасти.Свойство("Цена") Тогда
			СтрокаТабличнойЧасти.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СтрокаТабличнойЧасти.Цена, 
				Новый Структура("Валюта, Курс, Кратность", СтруктураКурсыПред.Валюта, СтруктураКурсыПред.Курс, СтруктураКурсыПред.Кратность),
				Новый Структура("Валюта, Курс, Кратность", СтруктураКурсы.Валюта, СтруктураКурсы.Курс, СтруктураКурсы.Кратность));
		КонецЕсли;
			
		РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЦикла;		

КонецПроцедуры // ПересчитатьЦеныТабличнойЧастиПоВалюте()

// Выполняем пересчет налогов табличной части документа после изменений в форме
//  "Цены и валюта".
//
// Параметры:
//  Объект					- Объект - Объект пересчета
//  Период					- Дата - Период пересчета
//  ИмяТабличнойЧасти 		- Строка - Имя табличной части, в которой нужно переститать
//  СуммаВключаетНалоги	 	- Булево - Признак расчета суммы НДС и НСП
//  СтавкаНДС			 	- СправочникСсылка.СтавкиНДС - Ссылка на справочник ставки НДС для пересчета
//  СтавкаНСП			 	- СправочникСсылка.СтавкиНСП - Ссылка на справочник ставки НСП для пересчета
//  БезналичныйРасчет	 	- Булево - Признак безналичного расчета
//
Процедура ПересчитатьНалогиТабличнойЧасти(Объект, Период, ИмяТабличнойЧасти, СуммаВключаетНалоги = Ложь, СтавкаНДС = Неопределено, СтавкаНСП = Неопределено, БезналичныйРасчет = Ложь) Экспорт
	
	ЗначениеСтавкиНДС = УчетНДСВызовСервера.ПолучитьСтавкуНДС(Период, СтавкаНДС);
	ЗначениеСтавкиНСП = ?(БезналичныйРасчет, 0, УчетНДСВызовСервера.ПолучитьСтавкуНСП(Период, СтавкаНДС, СтавкаНСП));

	Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
		// СуммаНДС.
		СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТабличнойЧасти.Сумма,
			СуммаВключаетНалоги,
			ЗначениеСтавкиНДС,
			ЗначениеСтавкиНСП);
			
		// СуммаНСП.
		СтрокаТабличнойЧасти.СуммаНСП = УчетНДСКлиентСервер.РассчитатьСуммуНСП(
			СтрокаТабличнойЧасти.Сумма,
			СуммаВключаетНалоги,
			ЗначениеСтавкиНДС,
			ЗначениеСтавкиНСП);
			
		Если СтрокаТабличнойЧасти.Свойство("Всего") Тогда
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(СуммаВключаетНалоги, 0, СтрокаТабличнойЧасти.СуммаНДС + СтрокаТабличнойЧасти.СуммаНСП);
		КонецЕсли;	
	КонецЦикла;		

КонецПроцедуры // ПересчитатьЦеныТабличнойЧастиПоВалюте()

// Функция выполняет поиск первой, удовлетворяющей условию поиска, строки табличной части.
//
// Параметры:
//  ИмяТабличнойЧасти - Строка - Имя табличной части документа, в которой осуществляется поиск,
//  СтруктураОтбора - Структура - задает условие поиска.
//
// Возвращаемое значение: 
//  Строка табличной части - найденная строка табличной части,
//  Неопределено           - строка табличной части не найдена.
//
Функция НайтиСтрокуТабличнойЧасти(Объект, ИмяТабличнойЧасти, СтруктураОтбора) Экспорт

	СтрокаТабличнойЧасти = Неопределено;
	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда

		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

// Рассчитывает сумму взаиморасчетов в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти	- СтрокаТабличнойЧасти	 - строка табличной части документа
//  ДанныеДокумента			- Структура - Данные документа
//		* Валюта	- СправочникСсылка.Валюты - Валюта документа
//		* Курс		- Число - Курс документа
//		* Кратность - Число - Кратность документа
//  ДанныВзаиморасчетов	- Структура - Данные взаиморасчетов
//		* Валюта	- СправочникСсылка.Валюты - Валюта расчетов
//		* Курс		- Число - Курс расчетов
//		* Кратность - Число - Кратность документа
//  ВалютаРегламентированногоУчета	 - СправочникСсылка.Валюты - Валюта регламентированного учета
//
Процедура РассчитатьСуммуВзаиморасчетовСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДанныеДокумента, ДанныВзаиморасчетов, ВалютаРегламентированногоУчета) Экспорт

	// Валюта взаиморасчетов в валюте регламентированного учета. 
	Если ДанныВзаиморасчетов.Валюта = ВалютаРегламентированногоУчета Тогда 
		СтрокаТабличнойЧасти.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
			СтрокаТабличнойЧасти.СуммаПлатежа, 
			Новый Структура("Валюта, Курс, Кратность", ДанныВзаиморасчетов.Валюта, СтрокаТабличнойЧасти.КурсВзаиморасчетов, СтрокаТабличнойЧасти.КратностьВзаиморасчетов),
			Новый Структура("Валюта, Курс, Кратность", ДанныеДокумента.Валюта, 1, 1));
	// В документа в валюте регламентированного учета.
	ИначеЕсли ДанныеДокумента.Валюта = ВалютаРегламентированногоУчета Тогда  
		СтрокаТабличнойЧасти.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
			СтрокаТабличнойЧасти.СуммаПлатежа, 
			Новый Структура("Валюта, Курс, Кратность", ДанныеДокумента.Валюта, ДанныеДокумента.Курс, ДанныеДокумента.Кратность),
			Новый Структура("Валюта, Курс, Кратность", ДанныВзаиморасчетов.Валюта, СтрокаТабличнойЧасти.КурсВзаиморасчетов, СтрокаТабличнойЧасти.КратностьВзаиморасчетов));
	// В любой другой валюте.
	Иначе  
		СтрокаТабличнойЧасти.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
			СтрокаТабличнойЧасти.СуммаПлатежа, 
			Новый Структура("Валюта, Курс, Кратность", ДанныВзаиморасчетов.Валюта, СтрокаТабличнойЧасти.КурсВзаиморасчетов, СтрокаТабличнойЧасти.КратностьВзаиморасчетов),
			Новый Структура("Валюта, Курс, Кратность", ДанныеДокумента.Валюта, 1, 1));
	КонецЕсли;	

КонецПроцедуры

// Рассчитывает курс взаиморасчетов в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти	- СтрокаТабличнойЧасти	 - строка табличной части документа
//  ДанныеДокумента			- Структура - Данные документа
//		* Валюта	- СправочникСсылка.Валюты - Валюта документа
//		* Курс		- Число - Курс документа
//		* Кратность - Число - Кратность документа
//  ДанныВзаиморасчетов	- Структура - Данные взаиморасчетов
//		* Валюта	- СправочникСсылка.Валюты - Валюта расчетов
//		* Курс		- Число - Курс расчетов
//		* Кратность - Число - Кратность документа
//  ВалютаРегламентированногоУчета	 - СправочникСсылка.Валюты - Валюта регламентированного учета
//
Процедура РассчитатьКурсВзаиморасчетовСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДанныеДокумента, ДанныВзаиморасчетов, ВалютаРегламентированногоУчета) Экспорт

	Если СтрокаТабличнойЧасти.СуммаПлатежа = 0
		Или СтрокаТабличнойЧасти.СуммаВзаиморасчетов = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	// Валюта взаиморасчетов в валюте регламентированного учета. 
	Если ДанныеДокумента.Валюта = ВалютаРегламентированногоУчета Тогда
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = 
			Окр(СтрокаТабличнойЧасти.СуммаПлатежа / (СтрокаТабличнойЧасти.СуммаВзаиморасчетов / СтрокаТабличнойЧасти.КратностьВзаиморасчетов), 4);
	// В любой другой валюте.		
	Иначе		
		СтрокаТабличнойЧасти.КурсВзаиморасчетов = 
			Окр(СтрокаТабличнойЧасти.СуммаВзаиморасчетов * ДанныеДокумента.Кратность / (СтрокаТабличнойЧасти.СуммаПлатежа * СтрокаТабличнойЧасти.КратностьВзаиморасчетов), 4);
	КонецЕсли;

КонецПроцедуры

// Процедура устанавливает курсы валют табличной части документа
// Если валюты разные, то курс взаиморасчетов равен отношению большего курса на меньший.
//
// Параметры:
//  Объект					- Объект - Объект пересчета
//  ИмяТабличнойЧасти 		- Строка - Имя табличной части, в которой нужно переститать
//  ДанныеДокумента			- Структура - Данные документа
//		* Валюта	- СправочникСсылка.Валюты - Валюта документа
//		* Курс		- Число - Курс документа
//		* Кратность - Число - Кратность документа
//  ДанныВзаиморасчетов	- Структура - Данные взаиморасчетов
//		* Валюта	- СправочникСсылка.Валюты - Валюта расчетов
//		* Курс		- Число - Курс расчетов
//		* Кратность - Число - Кратность документа
//  ВалютаРегламентированногоУчета	 - СправочникСсылка.Валюты - Валюта регламентированного учета
//
Процедура УстановитьКурсыВзаиморасчетовТабличнойЧасти(Объект, ИмяТабличнойЧасти, ДанныеДокумента, ДанныВзаиморасчетов, ВалютаРегламентированногоУчета) Экспорт

	Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл 
		// 1. Валюта документа KGS, валюта расчетов KGS.
		Если ДанныеДокумента.Валюта = ВалютаРегламентированногоУчета
			И ДанныВзаиморасчетов.Валюта = ВалютаРегламентированногоУчета Тогда 
			СтрокаТабличнойЧасти.КурсВзаиморасчетов = ДанныеДокумента.Курс;
			СтрокаТабличнойЧасти.КратностьВзаиморасчетов = ДанныеДокумента.Кратность;
		// 2. Валюта документа USD, валюта расчетов USD.
		ИначеЕсли НЕ ДанныеДокумента.Валюта = ВалютаРегламентированногоУчета
			И ДанныВзаиморасчетов.Валюта = ДанныеДокумента.Валюта Тогда
			СтрокаТабличнойЧасти.КурсВзаиморасчетов = ДанныеДокумента.Курс;
			СтрокаТабличнойЧасти.КратностьВзаиморасчетов = ДанныеДокумента.Кратность;
		// 3. Валюта документа KGS, валюта расчетов USD.
		ИначеЕсли ДанныеДокумента.Валюта = ВалютаРегламентированногоУчета
			И НЕ ДанныВзаиморасчетов.Валюта = ВалютаРегламентированногоУчета Тогда
			СтрокаТабличнойЧасти.КурсВзаиморасчетов = ДанныВзаиморасчетов.Курс;
			СтрокаТабличнойЧасти.КратностьВзаиморасчетов = ДанныВзаиморасчетов.Кратность;
		// 4. Валюта документа USD, валюта расчетов KGS.
		ИначеЕсли НЕ ДанныеДокумента.Валюта = ВалютаРегламентированногоУчета
			И ДанныВзаиморасчетов.Валюта = ВалютаРегламентированногоУчета Тогда
			СтрокаТабличнойЧасти.КурсВзаиморасчетов = ДанныеДокумента.Курс;
			СтрокаТабличнойЧасти.КратностьВзаиморасчетов = ДанныеДокумента.Кратность;
		// 5. Валюта документа USD, валюта расчетов RUB.
		ИначеЕсли НЕ ДанныеДокумента.Валюта = ВалютаРегламентированногоУчета
			И НЕ ДанныВзаиморасчетов.Валюта = ВалютаРегламентированногоУчета Тогда
			
			Если ДанныеДокумента.Курс >= ДанныВзаиморасчетов.Курс 
				И ДанныеДокумента.Кратность >= ДанныВзаиморасчетов.Кратность Тогда 
				СтрокаТабличнойЧасти.КурсВзаиморасчетов = ДанныеДокумента.Курс * ДанныВзаиморасчетов.Кратность / ДанныВзаиморасчетов.Курс * ДанныеДокумента.Кратность;
				СтрокаТабличнойЧасти.КратностьВзаиморасчетов = 1;
			Иначе 
				СтрокаТабличнойЧасти.КурсВзаиморасчетов = ДанныВзаиморасчетов.Курс * ДанныеДокумента.Кратность / ДанныеДокумента.Курс * ДанныВзаиморасчетов.Кратность;
				СтрокаТабличнойЧасти.КратностьВзаиморасчетов = 1;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры

// Рассчитывает сумму взаиморасчетов в табличной части документа
//
// Параметры:
//  Объект					- Объект - Объект пересчета
//  ИмяТабличнойЧасти 		- Строка - Имя табличной части, в которой нужно переститать
//  ДанныеДокумента			- Структура - Данные документа
//		* Валюта	- СправочникСсылка.Валюты - Валюта документа
//		* Курс		- Число - Курс документа
//		* Кратность - Число - Кратность документа
//  ДанныВзаиморасчетов	- Структура - Данные взаиморасчетов
//		* Валюта	- СправочникСсылка.Валюты - Валюта расчетов
//		* Курс		- Число - Курс расчетов
//		* Кратность - Число - Кратность документа
//  ВалютаРегламентированногоУчета	 - СправочникСсылка.Валюты - Валюта регламентированного учета
//
Процедура РассчитатьСуммуВзаиморасчетовТабличнойЧасти(Объект, ИмяТабличнойЧасти, ДанныеДокумента, ДанныВзаиморасчетов, ВалютаРегламентированногоУчета) Экспорт
	Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл 
		РассчитатьСуммуВзаиморасчетовСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДанныеДокумента, ДанныВзаиморасчетов, ВалютаРегламентированногоУчета);
	КонецЦикла;			
КонецПроцедуры
